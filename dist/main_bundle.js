(()=>{var e,t={3520:(e,t,o)=>{t.GameSimulator=class{constructor(){this.gameState={resources:{clones:0,sticks:0,vines:0,rocks:0,fish:0,wood:0,ponder:0,ore:0,sand:0,wheat:0,freshwater:0,hides:0,clay:0,herbs:0,game:0,husks:0,violence:0,sharprocks:0,rope:0,handle:0,staff:0,fishingrod:0,spear:0,axe:0,pickaxe:0,glass:0,paper:0,gold:0,iron:0,silver:0,bricks:0,bread:0,steel:0,beams:0,crates:0,nails:0,slabs:0,medicine:0,leather:0,concrete:0},maxes:{clones:0,sticks:50,vines:50,rocks:30,fish:10,wood:40,ponder:20,ore:20,sand:20,wheat:20,freshwater:50,hides:50,clay:50,herbs:50,game:50,husks:1e3,violence:100},buildings:{animal_pen:0,bakery:0,barn:0,barracks:0,campfire:0,desk:0,drying_racks:0,fish_traps:0,fishery:0,forge:0,garden:0,grove:0,herbalist_hut:0,hospital:0,house:0,hut:0,irrigation:0,library:0,lumber_yard:0,marketplace:0,military_school:0,mine:0,observatory:0,reservoir:0,rock_role:0,sand_scoop:0,shed:0,shelter:0,stockpile:0,stone_depot:0,stone_quarry:0,tannery:0,teepee:0,telescope:0,tower:0,traps:0,vineyard:0,warehouse:0,water_pump:0,windmill:0,workshop:0},time:0},this.log=[]}buildingsConst=o(5882).buildings;buyBuilding(e){let t={};for(const[o,s]of Object.entries(this.buildingsConst[e].basecost))t[o]=s*Math.pow(this.buildingsConst[e].ratio,this.gameState.buildings[e]);let o=!0;for(let e in t)if(this.gameState.resources[e]<t[e])return void(o=!1);if(o){for(let e in t)this.gameState.resources[e]-=t[e];if(this.gameState.buildings[e]+=1,this.storage.includes(e))for(const[t,o]of Object.entries(this.buildingsConst[e].effects))this.gameState.maxes[t]+=o}}simulateTick(){this.performActions(),this.updateResources(),this.gameState.time+=1,this.logGameState()}housing=["hut","shelter","house","barracks","hospital","teepee"];storage=["shed","stockpile","workshop","warehouse","drying_racks","water_pump","military_school","barn","herbalist_hut","mine","bakery","animal_pen","reservoir","stone_depot"];buildingPriority=[...this.housing,...this.storage];performActions(){for(let e of Object.values(this.buildingPriority))try{this.buyBuilding(e)}catch(t){console.error("Failed to buy",e,t)}}resourcesToGather=["sticks"];updateResources(){for(let[e,t]of Object.entries(this.resourcesToGather)){let e=0;"sticks"!==t&&"vines"!==t&&"wood"!==t&&"rocks"!==t&&"fish"!==t&&"ore"!==t||(e=1),this.gameState.resources[t]+=(e+.25*this.gameState.resources.clones)/this.resourcesToGather.length,Object.keys(this.gameState.maxes).includes(t)&&this.gameState.resources[t]>this.gameState.maxes[t]&&(this.gameState.resources[t]=this.gameState.maxes[t],"vines"===t&&Math.random()>.5&&(this.gameState.resources.rope+=this.gameState.resources.vines/3,this.gameState.resources.vines=0),"wood"===t&&Math.random()>.5&&(this.gameState.resources.paper+=this.gameState.resources.wood/12,this.gameState.resources.wood=0),"ore"===t&&Math.random()>.5&&(Math.random()>.5?(this.gameState.resources.iron+=this.gameState.resources.ore/20,this.gameState.resources.ore=0):(this.gameState.resources.gold+=this.gameState.resources.ore/100,this.gameState.resources.ore=0)),"sand"===t&&Math.random()>.5&&(this.gameState.resources.paper+=this.gameState.resources.sand/10,this.gameState.resources.sand=0),"clay"===t&&Math.random()>.5&&(this.gameState.resources.bricks+=this.gameState.resources.clay/15,this.gameState.resources.clay=0))}this.gameState.resources.sticks>=10&&!this.resourcesToGather.includes("vines")&&(this.resourcesToGather.push("vines"),console.warn(this.resourcesToGather)),this.gameState.resources.vines>=10&&!this.resourcesToGather.includes("rocks")&&(this.resourcesToGather.push("rocks"),console.warn(this.resourcesToGather)),this.gameState.resources.rocks>=10&&!this.resourcesToGather.includes("fish")&&(this.resourcesToGather.push("fish"),console.warn(this.resourcesToGather)),this.gameState.resources.fish>=10&&!this.resourcesToGather.includes("wood")&&(this.resourcesToGather.push("wood"),console.warn(this.resourcesToGather)),this.gameState.resources.wood>=10&&!this.resourcesToGather.includes("ore")&&(this.resourcesToGather.push("ore"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=1&&!this.resourcesToGather.includes("ponder")&&(this.resourcesToGather.push("ponder"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=3&&!this.resourcesToGather.includes("sand")&&(this.resourcesToGather.push("sand"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=4&&!this.resourcesToGather.includes("clay")&&(this.resourcesToGather.push("clay"),console.warn(this.resourcesToGather)),this.gameState.resources.clones=this.gameState.buildings.shelter+this.gameState.buildings.hut+2*this.gameState.buildings.house+3*this.gameState.buildings.hospital+2*this.gameState.buildings.teepee+this.gameState.buildings.barracks}logGameState(){const e=JSON.parse(JSON.stringify(this.gameState));this.log.push({time:this.gameState.time,...e})}runSimulation(e){for(let t=0;t<e;t++)this.simulateTick();this.outputResults()}outputResults(){const e=function(e){const t=Object.keys(e[0].buildings),o=Object.keys(e[0].resources),s=(Object.keys(e[0].maxes),[...Object.keys(e[0]).filter((e=>"buildings"!==e&&"resources"!==e)),...t,...o]),n=[s.join(",")];return e.forEach((e=>{const t=s.map((t=>e.buildings&&e.buildings.hasOwnProperty(t)?e.buildings[t]:e.resources&&e.resources.hasOwnProperty(t)?e.resources[t]:e[t]));n.push(t.join(","))})),n.join("\n")}(this.log),t=new Blob([e],{type:"text/csv"}),o=URL.createObjectURL(t),s=document.createElement("a");s.href=o,s.download="data.csv",s.textContent="Download CSV",document.body.appendChild(s),console.table(this.log)}}},1621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},5098:e=>{let t=.5;function o(){return t}let s=.5;function n(){return s}e.exports={setMusicVolume:function(e){t=e},getMusicVolume:o,setSfxVolume:function(e){s=e},getSfxVolume:n,playSound:function(e,t){const s=new Audio(e);s.volume=t?n():o(),s.play()}}},5151:(e,t,o)=>{const{buildings:s,isPopBuilding:n}=o(5882),{increaseMaterial:r,increaseMax:i}=o(9594),{updateTotal:a}=o(5150),{hasPerk:c}=o(134),{getMaterial:l}=o(3924),{passedStage:u}=o(8751),{recalcMaxClones:d}=o(6995),{updateBuildingButtonCount:f}=o(2607),{recalculateBuildingCost:p}=o(8022),{canBuyBuilding:g}=o(5023),{isPondered:h}=o(4369),{updateBuildingList:m}=o(2831),{capitalizeFirst:b}=o(6681),{ponders:y}=o(6397),{logEvent:v,getAnalytics:k}=o(9013),{getPlayerUid:w}=o(9476);function x(e){console.log("Buying building "+e);const t=s[e];if(g(e)){t.count++;for(const e in t.cost)r(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))i(e,o),"clones"===e&&(d(),a());f(e,t.count,JSON.parse(JSON.stringify(t.emoji))),p(e),m(),v(k(),"building_purchase",{building_name:e,user_id:w()})}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){try{const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e){return function(){const t=Object.entries(e).every((([e,t])=>l(e)>=Math.floor(t/2)));return u("clones")&&t}}(o.cost);return console.log("create building button:",o,JSON.parse(JSON.stringify(o.emoji))),{class:"tooltip "+e,tab:"production",text:`${JSON.parse(JSON.stringify(o.emoji))} ${b(e)} (${o.count})`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}}catch(o){console.error("Could not create building button for",e,t)}},buyMaxBuildings:function(e){let t=0;for(s[e];g(e);)x(e),++t;return v(k(),"building_purchase_max",{building_name:e,user_id:w(),count:t}),t},buyBuilding:x,generateEffectString:function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));for(const[t,o]of Object.entries(y))h(t)&&t.startsWith("effectiveBuildings")&&(e*=1.03);t.push(`+${e.toFixed(2)}% ${o} production`)}return t.join("<br>")},updateBuildingList:m}},8121:(e,t,o)=>{const{resources:s}=o(2587),{craftedResources:n}=o(3371),{skills:r}=o(2324),{getWorkers:i}=o(5150),{hasPerk:a}=o(134),{isPondered:c}=o(4369),{getFactoryProduction:l}=o(1051),{hasPrestige:u,getLevelOfPrestige:d}=o(6425),{getMaterial:f}=o(3924),{hasTool:p}=o(2609),{ponders:g}=o(6397),h={Lumberjack:["wood","sticks"],Miner:["rocks","ore"],Botanist:["vines","herbs","wheat"]},m={gathering:["gatheringBoost"],masonry:["masonryBoost"],carpentry:["carpentryBoost"],thinking:["thinkingBoost"],farming:["farmingBoost"],fishing:["fishingBoost"],hunting:["huntingBoost"]},b={wood:"axe",ore:"pickaxe",fish:"fishingrod",game:"spear",ponder:"paper",sticks:"staff"};t.calcIncrease=function(e,t){var n=0;const l=o(5882).buildings;"clones"===e&&c("autoClone")&&(n=1),s[e]&&s[e].isGetting&&(n+=1),n=function(e,t){for(const[o,s]of Object.entries(h))s.includes(t)&&a(o)&&(e*=1.75);return e}(n+=(a("Leader")?.375:.25)*i(e)||0,e),n=function(e,t){for(const[o,s]of Object.entries(m))if(r[o].affectedResources.includes(t)){s.forEach((t=>{u(t)&&(e*=1.1*d(t))}));let t=1.06,n=1+(Math.pow(t,r[o].level)-1)/100;e*=n}return e}(n,e);for(const t of Object.keys(l)){const s=o(5882).getBoost(t,e);if(s){var p=Math.pow(s,l[t].count);for(const[e,t]of Object.entries(g))c(e)&&e.startsWith("effectiveBuildings")&&(p*=1.03);n*=p}}return c("eatBread")&&f("bread")>0&&(n*=1.1),n=function(t){for(const[o,s]of Object.entries(g))c(o)&&(o.startsWith("fasterResourceGain")&&(t*=1.05),o.startsWith("fasterPonder")&&"ponder"===e&&(t*=1.05));return t}(n),u("cloneBoost")&&(n*=1.05*d("cloneBoost")),n=function(e,t){const o=b[t];return o&&f(o)>10&&(e*=1+Math.log10(f(o)/10)),e}(n,e),f("husks")>10&&(n*=1+Math.log(f("husks")/10)),n=Math.sqrt(n),parseFloat((n*t/1e3).toFixed(3))}},5023:(e,t,o)=>{const{resources:s}=o(2587),{getMaterial:n}=o(3924),{passedStage:r}=o(8751);t.canBuyBuilding=function(e){let t=!0;const i=o(5882).buildings[e];for(const e in i.cost)if(i.cost[e]>n(e,s)){t=!1;break}return i.effects&&i.effects.clones&&!r("clone")&&(t=!1),t}},7064:(e,t,o)=>{const{craftedResources:s}=o(3371),{getMaterial:n}=o(3924);t.canCraft=function(e){let t=s[e].cost;for(const[e,o]of Object.entries(t))if(n(e)<o)return!1;return!0}},6681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},7169:(e,t)=>{const o=document.getElementById("message");t.messageElement=o,t.changeMessage=function(e,t,s="You feel peckish for some seafood"){null===s&&(s="You feel peckish for some seafood");const n=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="${s}">${t}</span>`);o.innerHTML=n}},4856:(e,t,o)=>{const{getMaterial:s}=o(3924),{increaseMaterial:n}=o(9594),r={husks:{probability:.05,quantity:1},nails:{probability:.1,quantity:50},slabs:{probability:.2,quantity:50},beams:{probability:.1,quantity:60},axe:{probability:.15,quantity:5},spear:{probability:1,quantity:5},gold:{probability:.1,quantity:10},iron:{probability:.15,quantity:50},silver:{probability:.05,quantity:20},steel:{probability:.1,quantity:30},bricks:{probability:.15,quantity:80}};let i={};function a(){return i}function c(){let e={};for(const t in r)if(Math.random()<r[t].probability){const o=Math.floor(r[t].quantity*(.4*Math.random()+.8));o>0&&(e[t]=o)}return i=e,console.log(i),e}const l=document.getElementById("arena");function u(e,t){for(let o=0;o<t;o++){const t=document.createElement("div");t.className=`ball ${e}`,t.style.left=("player"===e?10:90)+"%",t.style.top=10+30*o+"px",l.appendChild(t),"player"===e?d.push(t):f.push(t)}}let d=[],f=[],p=[];const g=3e3;function h(){document.querySelectorAll(".ball").forEach((e=>{const t=e.classList.contains("player")?l.offsetWidth:-l.offsetWidth;p.push(e.animate([{transform:`translateX(${t}px)`}],{duration:g,fill:"none"}).finished.then((()=>{e.remove()})))})),v(),setTimeout((()=>{const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0!==e&&0!==t){for(const e of document.querySelectorAll(".ball"))e.remove();u("player",e),u("enemy",t),h()}}),g-100)}let m=!1;function b(){if(m)return;const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0===e&&t>0?x="enemy":0===t&&e>0&&(x="player"),null!==x){const e=document.getElementById("combatResult");if(e.textContent="player"===x?"You won!":"enemy"===x?"The Enemy won!":"It's a draw!",setTimeout((()=>{w.disabled=!1}),g/2),"player"===x){m=!0;let t=1;"aggressive"===$()&&(t=.75),"careful"===$()&&(t=1.25);for(const[o,s]of Object.entries(i))n(o,s*t),e.innerHTML+=`<br>+${s*t} ${o}`;c()}return console.log("battle result was",x),function(e){if(null===e)return B;e?B*=1.3:B/=1.1,B<200&&(B=200)}(null===x||"player"===x),D(),!0}return!1}function y(e,t){const o=e.getBoundingClientRect(),s=t.getBoundingClientRect();return!(o.right<s.left||o.left>s.right||o.bottom<s.top||o.top>s.bottom)}function v(){!function(e,t){for(let n=0;n<e.length;n++)for(let e=0;e<t.length;e++)y(d[n],f[e])&&(o=d[n],s=f[e],Math.random()<1/(1+Math.pow(10,(T()-C())/S))?s.remove():o.remove());var o,s}(d,f),b()||m||requestAnimationFrame(v)}function k(){const e=C(),t=T(),o=Math.ceil(e/12),s=Math.ceil(t/12),n=Math.max(o,s),r=Math.floor(e/n),i=Math.floor(t/n);return document.getElementById("approximateBall").textContent=n.toString(),[r,i]}const w=document.querySelector("button#startCombat");let x=null;const S=200;function C(){let e=s("violence")+s("spear")+s("medicine");return"aggressive"===$()?e*=1.2:"careful"===$()&&(e*=.8),e}let B=400;function T(){return B}const M=document.getElementById("playerMight"),j=document.getElementById("enemyMight");function E(){const e=C(),t=T(),o=1/(1+Math.pow(10,(t-e)/S));M.textContent=e.toFixed(0),M.setAttribute("tooltipdesc",`${s("violence").toFixed(0)} violence + ${s("spear").toFixed(0)} spears + ${s("medicine").toFixed(0)} medicine`),j.textContent=t.toFixed(0);const n=document.getElementById("chanceToWin");return n.textContent=(100*o).toFixed(1)+"%",n.style.color=`hsl(${(120*o).toString(10)},100%,50%)`,o}let A="balanced";function $(){return A}const q=document.querySelectorAll("button.stance");function O(e){console.log("switch stance to ",e),q.forEach((e=>{e.disabled=!1})),document.querySelector(`#${e}Stance`).disabled=!0,function(e){A=e}(e),D()}function D(){Object.keys(a()).length<1&&c();const e=document.getElementById("lootList");e.innerHTML="";for(const[t,o]of Object.entries(a()))e.innerHTML+=`<span>${t} (${o})</span> <br>`;j.textContent=T().toString(),k(),E()}window.switchStance=O,e.exports={combat:function(){x=null;for(const e of document.querySelectorAll(".ball"))e.remove();let[e,t]=k();u("player",e),u("enemy",t),document.getElementById("combatResult").textContent="",w.disabled=!0,m=!1,h()},calculateWinChance:E,refreshValues:D,pauseAnimation:function(){p.forEach((e=>{e.pause()}))},battleResult:x,simulateBattle:function(){x=function(){const e=C(),t=T(),o=1/(1+Math.pow(10,(t-e)/S));return Math.random()<o?"player":"enemy"}(),b()},switchStance:O,getCurrEnemyMight:T,setEnemyMight:function(e){B=e}}},1051:(e,t,o)=>{const{getSfxVolume:s,playSound:n}=o(5098),{canCraft:r}=o(7064),{getMaterial:i}=o(3924),{craftedResources:a}=o(3371),{resources:c}=o(2587);var l={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},u=[];Object.keys(c).forEach((e=>u.push(e))),Object.keys(a).forEach((e=>u.push(e))),console.log("All materials: ",u);let d={},f={};function p(e,t){e&&"none"!==e&&(d[e]--,Array.from(a[e].cost).forEach((e=>{f[e.resource]-=e.amount}))),d[t]?d[t]++:d[t]=1,a[t]&&Array.from(a[t].cost).forEach((e=>{f[e.resource]+=e.amount}))}function g(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const s=document.createElement("span");s.classList.add("factoryCost");const n=document.createElement("select");Object.keys(l).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,n.appendChild(t)})),n.setAttribute("data-produced","none"),n.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=n.value;p(e,t),this.setAttribute("data-produced",t),t&&"none"!==t&&(document.querySelector(`#resource-${t}`).style.color="thistle",s.innerHTML="",s.innerHTML+=`${o(9594).generateTooltipCost(a[n.value].cost)}`)}));const r=document.createElement("span");return r.innerHTML="&#8594;",t.appendChild(s),t.appendChild(r),t.appendChild(n),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.selected=!0,e.appendChild(o)}(n),e.appendChild(t),t}let h=2,m=30;var b=50;e.exports={createFactoryDiv:g,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,s=l[t];s&&t&&r(t)&&function(e,t){console.trace();let s=[];e.forEach((e=>s.push(i(e)/a[t].cost[e])));let n=Math.min(h,...s);console.log(n,h,...s),n*=1,o(9594).craftResourceQuantity(t,n)}(s,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");i("silver")<b?console.log("Not enough silver!"):(o(9594).increaseMaterial("silver",-b),g(),n("./audio/factorybuild.wav"),b*=1.2,e.setAttribute("tooltipCost",`${b.toFixed(0)} silver`))},upgradeBulk:function(){i("silver")<m||(h+=2,m+=10,n("./audio/factorybulk.wav"),document.getElementById("upgradeBulkButton").setAttribute("tooltipCost",`${h} → ${h+2}: ${m.toFixed(0)} silver`))},allMaterials:u,getFactoryProduction:function(e){return d[e]*h},loadFactory:function(e){console.log("loading a factory for ",e);let t=g();if(e)try{t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(9594).generateTooltipCost(a[e].cost)}`}catch(e){console.warn(e)}const s=document.getElementById("buyFactoryButton");s&&(s.setAttribute("tooltipCost",`${b.toFixed(0)} silver`),p("none",e)),b*=1.2},activeFactoriesProducing:d}},7531:(e,t)=>{t.fitCharToCell=function(e,t,o,s){const n=document.createElement("span");n.textContent=e,n.style.fontSize=`${s}px`,n.style.position="absolute",n.style.whiteSpace="nowrap",n.style.visibility="hidden",document.body.appendChild(n);let r=s;for(;n.offsetWidth<t&&n.offsetHeight<o&&(r++,n.style.fontSize=`${r}px`,!(r>=1e3)););return document.body.removeChild(n),r}},215:(e,t,o)=>{const{resources:s}=o(2587),{capitalizeFirst:n}=o(6681),{getSfxVolume:r}=o(5098),i=document.querySelector("#resources");const a=document.querySelector("#emojiGatherDisplay");t.toggleResource=function(e){const t=new Audio("./audio/gather.wav");t.volume=r(),t.play();const o=s[e],c=document.querySelector("#resources").querySelector("#resource-"+e),l=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));a.textContent="𓀟",o.isGetting?(o.isGetting=!1,l.classList.remove("gathering"),l.textContent=o.defaultText,c&&(c.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(s)){t.isGetting=!1;const o=document.querySelector("#gather"+n(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const s=i.querySelector("#resource-"+e);s&&(s.style.fontWeight="normal")}}(),o.isGetting=!0,l.textContent=o.activeText,c&&(c.style.fontWeight="bold"),a.textContent=o.emoji,console.log(o.emoji),l.classList.add("gathering"))}},429:(e,t,o)=>{const{craftedResources:s}=o(3371),{buildings:n}=o(5882),{buttons:r}=o(2054),{generateTooltipCost:i}=o(9594),{createBuildingButton:a}=o(5151),{hasPerk:c}=o(134),{recalculateBuildingCost:l}=o(8022),{showTab:u}=o(2093);t.generateButtons=function(){console.log("Generating buttons"),console.trace();for(let e in n){const t=a(e,n);r[e]=t}const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),c=document.getElementById("experimentTab").querySelector(".button-columns"),d=document.getElementById("ponderTab"),f=e(c),p=e(d);let g=1,h=0,m=0;for(let e in r){const a=r[e],c=document.createElement("button");c.id=e,c.className=a.class,c.textContent=a.text.split("_").join(" "),a.tooltipDesc&&c.setAttribute("data-tooltip-desc",a.tooltipDesc),a.tooltipEffect&&c.setAttribute("data-tooltip-effect",a.tooltipEffect),c.setAttribute("unlock",a.unlock),c.setAttribute("data_building",a.data_building);const d=Object.values(s).find((t=>t.id===e));d&&(a.tooltipCost=i(d.cost)),c.setAttribute("data-tooltip-cost",a.tooltipCost),a.showTab&&c.addEventListener("click",(()=>{u(a.showTab),console.log("Switching to tab: "+a.showTab)})),"production"===a.tab?(c.style.gridColumn=g.toString(),g=(g+1)%3,o.appendChild(c)):"experiment"===a.tab?(f[h].appendChild(c),h=(h+1)%3):"tabs"===a.tab?t.appendChild(c):"ponder"===a.tab?(p[m].appendChild(c),m=(m+1)%3):"job"===a.tab||document.getElementById(a.tab).appendChild(a),Object.keys(n).find((t=>t===e))&&l(e);try{a.requirement()||(c.style.display="none")}catch(e){}}}},6900:(e,t,o)=>{const{capitalizeFirst:s}=o(6681),{craftedResources:n}=o(3371),{resources:r}=o(2587),i=Object.keys(r).filter((e=>"husks"!==e)),a=Object.keys(n);function c(e,t){return Math.random()*(t-e)+e}function l(){const e=[{start:78107,end:78142},{start:78307,end:78367}],t=e[Math.floor(Math.random()*e.length)],o=Math.floor(c(t.start,t.end+1));return String.fromCodePoint(o)}const u=["bustling","majestic","ancient","elegant","hidden","glorious","enchanted","whispering","mystical","luminous","radiant","spectacular","dazzling","serenade","celestial","vibrant","imposing","venerable","immaculate","enigmatic","harmonious","ethereal","resplendent","tranquil","serene","awe-inspiring","peaceful","picturesque","captivating"],d=["Sanctuary","Citadel","Haven","Monastery","Outpost","Observatory","Stronghold","Palace","Temple","Manor","Keep","Chateau","Acropolis","Cathedral","Villa","Fortress","Bastion","Lighthouse","Castle","Coliseum","Pyramid","Mansion","Estate","Museum","Tower","Hall","Library","Gallery","Bazaar"],f=["sanctuary","citadel","haven","monastery","outpost","observatory","stronghold","palace","temple","manor"],p=["provides","enhances","imbues","radiates","embodies","inspires","evokes","exudes","bestows","creates"],g=["with","through","amidst","beneath","above","alongside"],h=["and","while","as","although","yet"];t.generateRandomBuilding=function(){const e=function(){const e=u[Math.floor(Math.random()*u.length)],t=d[Math.floor(Math.random()*d.length)];return`${s(e)} ${t}`}(),t=function(){const e=u[Math.floor(Math.random()*u.length)],t=u[Math.floor(Math.random()*u.length)],o=f[Math.floor(Math.random()*f.length)],n=p[Math.floor(Math.random()*p.length)],r=g[Math.floor(Math.random()*g.length)],i=h[Math.floor(Math.random()*h.length)];let a="";switch(Math.floor(6*Math.random())){case 0:a=`${e} ${o} that ${n} an aura of splendor.`;break;case 1:a=`${s(r)} its ${e} appearance, the ${o} ${n} an aura of ${t}.`;break;case 2:a=`${s(e)} ${o} ${n} gracefully, exuding an enchanting atmosphere.`;break;case 3:a=`The ${o} is ${e} and ${n} with a sense of wonder.`;break;case 4:a=`Amidst the ${e} surroundings, the ${o} ${n} tranquility and beauty.`;break;case 5:a=`An ${e} ${o} that ${n} an aura of charm ${i} mystique.`;break;default:a=`${s(e)} ${o} that ${n} an aura of splendor.`}return a}(),o=c(1,3),n={};for(let e=0;e<o;e++)n[i[Math.floor(Math.random()*i.length)]]=Math.floor(100*Math.random()*(5-o));const r=c(0,1);for(let e=0;e<r;e++)n[a[Math.floor(Math.random()*a.length)]]=Math.floor(50*Math.random());const m={},b=c(0,1);for(let e=0;e<b;e++){const e=i[Math.floor(Math.random()*i.length)];let t=Math.floor(c(30,200));"clones"===e?t=Math.floor(c(1,3)):"husks"===e&&(t=Math.floor(c(1,10))),m[e]=t}const y={},v=c(0===b?1:0,1);for(let e=0;e<v;e++){const e=i[Math.floor(Math.random()*i.length)],t=c(1.01,1.2);y[e]=t}return{name:e,description:t,basecost:n,cost:n,effects:m,boost:y,count:0,ratio:c(1.3,1.6),emoji:l()}}},6590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(3371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},3924:(e,t,o)=>{const{getCraftedResource:s}=o(6590);t.getMaterial=function(e,t){return t||(t=o(2587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},8078:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(6425),{resources:r,isResource:i}=o(2587),{skills:a}=o(2324);let c=new Set(["gatherSticks"]);t.allVisibleButtons=c,e.exports={getMax:function(e){if(i(e)){let t=r[e].max,o=t;return s("storageSpace")&&"clones"!==e?o=t*(1.05*n("storageSpace")):"clones"===e&&s("maxClones")&&(o=t+n("maxClones")),o}return 1/0},calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return c.has(e)},setVisibleButton:function(e){c.add(e)},clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},6842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combatTab",hunting:"hunting"}},5150:(e,t,o)=>{const{skills:s}=o(2324),{resources:n}=o(2587),{getMaterial:r}=o(3924),{isPondered:i}=o(4369),{getMax:a}=o(8078),{triggerFloatUpText:c}=o(8727),{playSound:l}=o(5098),u={};for(let e in s)u[e]=0;const d=document.getElementById("jobsTab");function f(){var e=0;for(let t in u)e+=u[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),d.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(l("./audio/job.wav"),r("clones",n)>f()){const o=e.pageX,s=e.pageY;if(e.shiftKey){let e=r("clones",n)-f();u[t]+=e,c(o,s,`+${e} workers`,"green")}else if(e.ctrlKey){let e=Math.min(10,r("clones",n)-f());u[t]+=e,c(o,s,`+${e} workers`,"green")}else u[t]++,c(o,s,"+1 worker","green");g(t,u[t]),m(t),b()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job"),o=e.pageX,s=e.pageY;if(l("./audio/job.wav"),e.shiftKey){let e=u[t];u[t]=0,e>0&&c(o,s,`-${e} workers`,"red")}else if(e.ctrlKey){let e=Math.min(10,u[t]);u[t]-=e,c(o,s,`-${e} workers`,"red")}else u[t]>0&&(u[t]--,c(o,s,"-1 worker","red"));g(t,u[t]),m(t),b()}))}));let p=new Map;function g(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let r=o.length,i=Math.floor(t/r);for(let t of o)p.set(t,i),i>0&&h(e,t);let a=t-i*r;for(let t of o)a>0&&(p.set(t,p.get(t)+1),a--,h(e,t))}function h(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const s=document.getElementById(`resource-${t}`);if(!s||"none"===s.style.display)return;const n=o.getBoundingClientRect(),r=s.getBoundingClientRect(),i=document.createElement("div");i.style.position="absolute",i.style.width="10px",i.style.height="10px",i.style.borderRadius="50%",i.style.backgroundColor="white",i.style.opacity=".8",i.style.left=`${n.left+window.scrollX}px`,i.style.top=`${n.top+window.scrollY}px`,document.body.appendChild(i),i.animate([{transform:`translate(${r.left-n.left}px, ${r.top-n.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{i.style.display="none"}}function m(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${u[e]}`),o(9594).updateEmojiDisplay()}function b(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+f()+" / "+a("clones")}let y=new Map,v=document.getElementById("lineCanvas"),k=v.getContext("2d");function w(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,r=scrollY+s.top+s.height/2;k.beginPath(),k.moveTo(n,r),k.lineTo(t,o),k.stroke(),function(e,t,o,s,n,r){let i,a,c,l=s,u=n;e.beginPath(),i=Math.atan2(n-o,s-t),a=r*Math.cos(i)+l,c=r*Math.sin(i)+u,e.moveTo(a,c),i+=1/3*(2*Math.PI),a=r*Math.cos(i)+l,c=r*Math.sin(i)+u,e.lineTo(a,c),i+=1/3*(2*Math.PI),a=r*Math.cos(i)+l,c=r*Math.sin(i)+u,e.lineTo(a,c),e.closePath(),e.fill()}(k,n,r,t,o,10)}function x(e,t){let o=u[e];u[e]=0,u[t]+=o,m(e),m(t)}v.width=window.innerWidth,v.height=window.innerHeight,e.exports={clearJobAssignments:function(){k.clearRect(0,0,v.width,v.height),y=new Map},reassignJobsBasedOnResources:function(){try{const e=y.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const i=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,l=s[e].affectedResources;if(!l)return;for(const e of l)if(void 0!==n[e]&&r(e)<n[e].max){c=!1;break}c&&u[e]>0&&(x(i,a),g(i,u[i]),g(a,u[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:x,drawAllConnections:function(){k.clearRect(0,0,v.width,v.height);try{for(let[e,t]of y.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),r=n.left+n.width/2,i=0;i=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,w(o,r,i)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return p.get(e)},updateTotal:b,setConnections:function(e){y=e},getConnections:function(){return y},distributeWorkers:g,updateDisplay:m,jobCounts:u,resetAllJobs:function(){for(let e in s)u[e]=0,g(e,0),b(),m(e)}}},5882:(e,t,o)=>{const{hasPerk:s}=o(134),{recalcMaxClones:n}=o(6995),{recalculateBuildingCost:r}=o(8022),{updateBuildingButtonCount:i}=o(2607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},hospital:{basecost:{concrete:10,medicine:20,fish:20},effects:{clones:3},boost:{},count:0,ratio:1.7,tooltipDesc:"Keep yourself safe.",emoji:"+"},barracks:{basecost:{spear:20,violence:1,wood:200},effects:{clones:1,violence:20},boost:{},count:0,ratio:1.5,tooltipDesc:"A hall of raucous soldiers.",emoji:"𓈏"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.2,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30,wood:40},effects:{wood:100},ratio:1.2,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.2,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.4,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,bread:10,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},reservoir:{basecost:{rocks:100,clay:50,water:10},effects:{water:100},boost:{},count:0,ratio:1.3,tooltipDesc:"A hole filled with water. Useful.",emoji:"𓈞"},stone_depot:{basecost:{rocks:200},effects:{rocks:250},boost:{},count:0,ratio:1.2,tooltipDesc:"A big stack of rocks.",emoji:"𓈓"},warehouse:{basecost:{crates:10,concrete:20},effects:{wood:100,rocks:100,clay:100,sand:100},boost:{},count:0,ratio:1.3,tooltipDesc:"Put stuff in a box inside a larger box.",emoji:"𓇦"},military_school:{basecost:{bricks:20,violence:10},effects:{violence:100},boost:{violence:1.05},count:0,ratio:1.4,tooltipDesc:"Learn the art of hurting others.",emoji:"𓇻"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.02},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{fish:50},boost:{},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},irrigation:{basecost:{freshwater:20},effects:{},boost:{wheat:1.05},count:0,ratio:1.2,tooltipDesc:"Wetten your wheat with water.",emoji:"𓈗"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,gold:1},effects:{},boost:{all:1.05},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"𓇬"},garden:{basecost:{beams:20,herbs:20,freshwater:10},effects:{},boost:{herbs:1.1,sticks:1.05},count:0,ratio:1.3,tooltipDesc:"Nice nature, carefully cultivated.",emoji:"𓆷"},sand_scoop:{basecost:{beams:10,iron:5},effects:{},boost:{sand:1.1},count:0,ratio:1.2,tooltipDesc:"Scoop the sand from the shore? Sure!",emoji:"𓄛"},traps:{basecost:{nails:10,sticks:20,herbs:20,vines:15},effects:{},boost:{game:1.1},count:0,ratio:1.2,tooltipDesc:"Watch your step!",emoji:"𓄦"},rock_role:{basecost:{slabs:20,freshwater:30,vines:15},effects:{},boost:{rocks:1.2},count:0,ratio:1.3,tooltipDesc:"In order to gather the rock you must become the rock.",emoji:"𓆇"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,i(e,0),r(e);n()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"teepee":case"hospital":case"barracks":return!0;default:return!1}}}},2054:(e,t,o)=>{const{passedStage:s}=o(8751),{getMaterial:n}=o(3924),{hasTool:r}=o(2609),{resources:i}=o(2587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",i)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",i)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>r("Spear")||r("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>r("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>r("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},combatTabButton:{class:"tab-button",text:"Combat",showTab:"combatTab",tab:"tabs",requirement:()=>s("combatTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},3371:(e,t,o)=>{const{getMaterial:s}=o(3924),{getCraftedResource:n}=o(6590),{resources:r}=o(2587),{passedStage:i}=o(8751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},bread:{id:"craftBreadButton",value:0,cost:{wheat:13},craftedOnce:!1,requiredStage:"agriculture",tooltipDesc:"I'm gonna grind your wheat to make my bread!",tooltipcost:"",class:"agriculture"},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}},wood:{value:0,cost:{sticks:8}},sticks:{value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id===e||o.id===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null},resetCraftedResources:function(){for(const[e,t]of Object.entries(a))t.value=0,t.craftedOnce=!1}}},7055:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},6397:(e,t,o)=>{const{capitalizeFirst:s}=o(6681);let n={"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combatTab:{id:"ponderCombatTab",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double diameter Teepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}},eatBread:{id:"ponderEatBread",requirement:()=>!0,isPondered:!1,text:"Eat Bread",tooltipDesc:"Eating some bread will help you work faster",cost:{ponder:400,bread:30}}};function r(e){const t=[{value:1e3,numeral:"M"},{value:900,numeral:"CM"},{value:500,numeral:"D"},{value:400,numeral:"CD"},{value:100,numeral:"C"},{value:90,numeral:"XC"},{value:50,numeral:"L"},{value:40,numeral:"XL"},{value:10,numeral:"X"},{value:9,numeral:"IX"},{value:5,numeral:"V"},{value:4,numeral:"IV"},{value:1,numeral:"I"}];let o="";for(const s of t)for(;e>=s.value;)o+=s.numeral,e-=s.value;return o}!function(e){for(let e=1;e<=100;e++)n[`fasterResourceGain${e}`]={id:`ponderFasterResourceGain${e}`,isPondered:!1,cost:{ponder:40*Math.pow(3,e-1)},requirement:()=>!0,text:`Productivity ${r(e)}`,tooltipDesc:"Just work harder. 5% bonus to resource gain"};for(let e=1;e<=100;e++)n[`fasterPonder${e}`]={id:`ponderFasterPonder${e}`,isPondered:!1,cost:{ponder:10*Math.pow(5,e-1)},text:`Think Harder ${r(e)}`,tooltipDesc:"5% boost to pondering",requirement:()=>!0};for(let e=1;e<=100;e++)n[`effectiveBuildings${e}`]={id:`ponderEffectiveBuildings${e}`,isPondered:!1,cost:{ponder:30*Math.pow(3,e-1)},text:`Buildings ${r(e)}`,tooltipDesc:"Increase building effects by 3%",requirement:()=>!0}}(),e.exports={ponders:n,resetPonders:function(){for(const[e,t]of Object.entries(n))t.isPondered=!1}}},6425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},cheaperBuildings:{text:"Rickety",tooltipDesc:"Building Cost (-5%)",cost:2,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o}},2587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",max:1e3},violence:{value:0,id:"gatherViolence",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"",max:100}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0}}},2324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:["violence"]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,resetCraftedResources:n}=o(3371),{buildings:r,resetBuildings:i}=o(5882),{ponders:a,resetPonders:c}=o(6397),{buttons:l}=o(2054),{resources:u,resetResources:d}=o(2587),{saveGame:f,loadGame:p}=o(502),{appendCraftedResourceButtons:g,increaseMaterial:h,craftAllResources:m,craftResource:b,calcIncrease:y,updateResourceIncreaseRates:v,increaseMax:k,setMaterial:w}=o(9594),{buyMaxBuildings:x,buyBuilding:S}=o(5151),{selectAbility:C,resetPerks:B}=o(134),{clearSidebar:T,getMax:M}=o(8078),{makeVisible:j}=o(1123),{updateButtonVisibility:E}=o(7667),{getCraftedResource:A}=o(6590),{getMaterial:$}=o(3924),{buyFactory:q,attemptManufacture:O,upgradeBulk:D,allMaterials:L}=o(1051),{isPondered:R,generatePonderButtons:P}=o(4369),{hasTool:I,addTool:F}=o(2609),{getAteFish:G,setAteFish:V}=o(1621),{updateTotal:H,clearJobAssignments:_,resetAllJobs:N}=o(5150),{capitalizeFirst:W}=o(6681),{passedStage:z,resetStages:J}=o(8751),{recalcMaxClones:U}=o(6995),{initializeResourceTags:Y,updateSidebar:K,updateDisplayValue:X}=o(5453),{prestige:Q}=o(6425),{triggerFloatUpText:Z}=o(8727),{updateBounceAnimation:ee}=o(5994),{updateTooltip:te,hideTooltip:oe}=o(8208),{canCraft:se}=o(7064),{calculateWinChance:ne,combat:re,switchStance:ie}=o(4856),{showTab:ae,getCurrentTab:ce}=o(2093),{getSfxVolume:le,getMusicVolume:ue,setMusicVolume:de,setSfxVolume:fe,playSound:pe}=o(5098),{generateRandomBuilding:ge}=o(6900),{changeMessage:he,messageElement:me}=o(7169),{generateButtons:be}=o(429),{toggleResource:ye}=o(215),{GameSimulator:ve}=o(3520),{initializeApp:ke}=o(5752),{getAnalytics:we}=o(9013),xe={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},Se=[{condition:()=>$("sticks",u)>=1,action:()=>j("stick")},{condition:()=>$("sticks",u)>=10,action:()=>j("vines")},{condition:()=>$("vines",u)>=10,action:()=>j("rocks")},{condition:()=>$("rocks",u)>=1,action:()=>{j("tab-button"),j("craftRocks")}},{condition:()=>A("spear",s)>0,action:()=>j("spear")},{condition:()=>$("fish",u)>=1,action:()=>j("fishing")},{condition:()=>I("Axe"),action:()=>j("wood")},{condition:()=>A("rope")>=1,action:()=>j("rope")},{condition:()=>$("fish",u)>=5&&!G(),action:()=>j("eatFish")},{condition:()=>G(),action:()=>{j("clone"),j("ponder-tab")}},{condition:()=>R("ponderFinish"),action:()=>(document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>R("biggerShelter"),action:()=>U()},{condition:()=>R("biggerHut"),action:()=>U()},{condition:()=>R("biggerHouse"),action:()=>U()},{condition:()=>R("biggerTeepee"),action:()=>U()},{condition:()=>R("evenBiggerShelter"),action:()=>U()},{condition:()=>$("clones")>=30,action:()=>j("prestige")},{condition:()=>$("clay")>0,action:()=>j("clay")},{condition:()=>!document.getElementById("toggle-basics")&&R("organization"),action:()=>Y(!0)},{condition:()=>z("combatTab"),action:()=>ne()}],Ce=["./audio/song1.wav","./audio/song2.wav","./audio/song3.wav","./audio/song4.wav","./audio/song5.wav","./audio/song6.wav","./audio/song7.wav","./audio/song8.wav","./audio/song9.wav","./audio/song10.wav"];let Be=null,Te=null;function Me(){Be&&(Be.pause(),Be.currentTime=0);const e=Math.floor(Math.random()*Ce.length);Be=new Audio(Ce[e]),Be.volume=ue(),Be.play(),function(){Te&&clearTimeout(Te);const e=3e4*Math.random()+5e3;Be.onended=()=>{Te=setTimeout(Me,e)}}()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":ae("productionTab");break;case"2":z("tab-button")&&ae("experimentTab");break;case"3":z("ponder-tab")&&ae("ponderTab");break;case"4":z("jobs-tab")&&ae("jobsTab");break;case"5":z("skillsTable")&&ae("skillsTab");break;case"6":z("perksTab")&&ae("perksTab");break;case"7":z("factoryTab")&&ae("factoryTab");break;case"8":z("combatTab")&&ae("combatTab");break;case"a":"combatTab"===ce()&&ie("aggressive");break;case"b":"combatTab"===ce()&&ie("balanced");break;case"c":"combatTab"===ce()&&ie("careful");break;case"f":"combatTab"!==ce()||document.getElementById("startCombat").disabled?ye("fish"):re();break;case"s":ye("sticks");break;case"r":z("rocks")&&ye("rocks");break;case"v":z("vines")&&ye("vines");break;case"w":z("wood")&&ye("wood");break;case"o":z("ore")&&ye("ore");break;case"p":z("ponder-tab")&&ye("ponder");break;case"Escape":Ve()}}));const je=document.body;je.classList.toggle("dark-mode");let Ee=!0;function Ae(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block",o.style.opacity="1"}),5e3)}let $e=50,qe=null,Oe=0,De=0;function Le(e){null===qe&&(qe=e);const t=e-qe;Oe+=t,De+=t,qe=e;let o=$e;for(De>=10*$e&&($e=De/10);De>=$e;)De-=$e,Ge($e);$e=o,requestAnimationFrame(Le)}let Re=0,Pe=0;const Ie=1e4,Fe=1e3;function Ge(e,t){for(const[t,o]of Object.entries(L))h(o,y(o,e));v(),function(){for(let e=Se.length-1;e>=0;e--){const t=Se[e];t.condition()&&(t.action(),Se.splice(e,1))}for(let e in xe)!I(e)&&A(e)>0&&(F(e),j(xe[e]));try{E(),null!==Ue&&te(Ue)}catch(e){console.warn(e)}}(),Re+=e,Pe+=e,Re>=Ie&&(f(),Re=0),z("factoryTab")&&Pe>=Fe&&(console.log("manufacturing attempt",Pe,Fe),Pe=0,O())}function Ve(){pe("./audio/options.wav",!0);const e=document.getElementById("optionsMenu");e.style.display="none"===e.style.display?"block":"none"}window.onbeforeunload=function(){He||f()};let He=!1;document.addEventListener("DOMContentLoaded",(e=>{const t=ke({apiKey:"AIzaSyCotsZUfpU3dBSARhviv3oKtlnEyv7e_gk",authDomain:"clone-experiment.firebaseapp.com",projectId:"clone-experiment",storageBucket:"clone-experiment.appspot.com",messagingSenderId:"1028768441674",appId:"1:1028768441674:web:2bf0906e5a94f5b2400db3",measurementId:"G-M45BJLXJFR"});we(t),P(a),p(),be(),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),q()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("tooltipCost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),D()}))}(),Y(),p(),T(),Y(R("organization")),g(),K(),ae("productionTab"),o(7864).generateTradeTable(u),document.addEventListener("click",(e=>{if(null===Be&&Me(),e.target.matches("button")){const n=e.target;if(n.getAttribute("data_building")&&"undefined"!==n.getAttribute("data_building")&&n.classList.contains("purchasable")){var t=n.getAttribute("data_building");const o=e.pageX,s=e.pageY;pe("./audio/building.wav",!0);const r=W(t).split("_").join(" ");if(e.shiftKey){let e=x(t);Z(o,s,`+${e} ${r}s`,"aqua")}else S(t),Z(o,s,`+1 ${r}`,"aqua")}else if(n.classList.contains("unlock")){const e=n.getAttribute("unlock");if(console.log(e),a[e]){var o=!0;for(let t in a[e].cost)if($(t,u)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)h(t,-a[e].cost[t]);a[e].isPondered=!0,j(e),n.display="none",pe("./audio/ponder.wav",!0),"organization"===e&&location.reload()}}}else if("undefined"!==n.id)if("gather"===n.id.slice(0,6))ye(function(e){for(const[t,o]of Object.entries(u))if(o.id===e)return t;return"error "+e}(n.id));else if("craft"===n.id.slice(0,5)){pe("./audio/craft.wav",!0);let t=function(e){for(const[t,o]of Object.entries(s))if(console.log(t,o,e),o.id===e)return t;return"error "+e}(n.id);se(t)&&Z(e.pageX,e.pageY,`+${t}`,"aqua"),e.shiftKey?m(t):b(t)}else"saveButton"===n.id?f():"eatFish"===n.id?function(){if(!G()&&$("fish",u)>=1){const e=new Audio("./audio/fish.wav");e.volume=le(),e.play(),h("fish",-1),Ae(),V(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{he("You are with yourself in a forest.","with yourself","You feel peckish for some seafood."),k("clones",1),h("clones",1)}),1e3)}}():"overlay-button"===n.id?(document.getElementById("overlay-text").style.opacity="0",document.getElementById("overlay-button").style.opacity="0",document.getElementById("overlay").style.display="none",document.getElementById("isekaiButtons").innerHTML="",location.reload()):"deleteSaveButton"===n.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?Ye():"clearJobAssignments"===n.id?_():"darkModeToggle"===n.id?(je.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),Ee=!Ee,darkModeToggle.textContent=Ee?"Light Mode":"Dark Mode"):"prestige"===n.id?Je():"startCombat"===n.id&&re();if(n.classList.contains("tierOneButton")){let e=n.textContent;C(e)}}if(e.target.matches("#alone")){let t="+1 Clone";$("clones")<M("clones")?u.clones.value+=1:t="Max Clones",pe("+1 Clone"===t?"./audio/clone.wav":"./audio/failclone.wav");const o=e.pageX,s=e.pageY;Z(o,s,t,"+1 Clone"===t?"green":"red"),H(),X("clones")}})),document.getElementById("optionsButton").addEventListener("click",Ve),document.getElementById("musicVolume").addEventListener("input",(function(){de(this.value),Be.volume=ue()})),document.getElementById("sfxVolume").addEventListener("input",(function(){fe(this.value)})),requestAnimationFrame(Le),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){te(e),Ue=e})),e.addEventListener("onclick",(function(){te(e)})),e.addEventListener("mouseleave",(function(){oe(),Ue=null}))})),H(),ee(),w("clones",M("clones"))}));const _e=document.getElementById("overlay"),Ne=document.getElementById("overlay-text"),We=document.getElementById("overlay-button"),ze=document.getElementById("overlay-back-button");function Je(){We.addEventListener("click",(()=>{const e=$("clones")+$("husks");d(),n(),c(),B(),i(),N(),J(),pe("./audio/isekaiconfirm.wav",!0);for(let[e,t]of Object.entries(u))t.max=100;h("husks",e),_e.style.display="none";let t=null;for(let e=0;e<5;e++){const e=ge();r[e.name.split(" ").join("_")]=e,t=e}he("You are in another world.","another",`You feel a need to acquire ${Object.values(t.cost).join(",")}`),Y(!1)})),ze.addEventListener("click",(()=>{_e.style.display="none"}));const e=new Audio("./audio/isekai.wav");e.volume=le(),e.play();const t=document.getElementById("husksIsekaiValue");let o;o=t||document.createElement("p"),o.id="husksIsekaiValue",o.innerHTML=`Husks:  ${$("husks")} <br> You will get ${$("clones")} Husks post-isekai.<br>You will receive 5 randomly generated new buildings, unique to this new world.`,o.style.opacity="0",_e.prepend(o),_e.style.backgroundColor="MidnightBlue",Ne.textContent="You step through to another world.",Ae(),setTimeout((()=>{ze.style.opacity="1"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(Q).forEach((s=>{const n=document.createElement("button");n.innerHTML=`<b>${Q[s].text}</b><br>Level: ${Q[s].level}<br>Cost: ${Q[s].cost}`,n.setAttribute("tooltipCost",Q[s].cost),n.setAttribute("tooltipDesc",Q[s].tooltipDesc),n.classList.add("tooltip"),n.style.gridColumn=(t%4+1).toString(),n.style.gridRow=Math.floor(t/4+1).toString(),++t,n.addEventListener("click",(()=>{console.log(`Button ${s} was clicked`),$("husks")<Q[s].cost||(Q[s].level++,h("husks",-Q[s].cost),Q[s].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(Q[s].cost),n.setAttribute("tooltipCost",Q[s].cost),n.innerHTML=`<b>${Q[s].text}</b><br>Level: ${Q[s].level}<br>Cost: ${Q[s].cost}`,o.textContent="Husks: "+$("husks"),te(n))})),n.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${s} was right clicked`),Q[s].level<=0||(Q[s].level--,Q[s].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(Q[s].cost),n.setAttribute("tooltipCost",Q[s].cost),h("husks",Q[s].cost),n.innerHTML=`<b>${Q[s].text}</b><br>Level: ${Q[s].level}<br>Cost: ${Q[s].cost}`,o.textContent="Husks: "+$("husks"),te(n))})),e.appendChild(n),n.addEventListener("mouseenter",(function(e){te(n),Ue=n})),n.addEventListener("mouseleave",(function(){oe(),Ue=null}))}))}),5e3),setTimeout((()=>{o.style.opacity="1"}),5e3)}var Ue=null;function Ye(){localStorage.removeItem("save"),He=!0,location.reload()}e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${u[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){Oe=e},changeMessage:he,getMessage:function(){return me},total_time:Oe,currentHoverButton:Ue,deleteGame:Ye,isekai:Je,update:Ge},window.deleteGame=Ye,window.isekai=Je},1123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(8751),{updateButtonVisibility:r}=o(7667);t.makeVisible=function(e){n(e)||s(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),r()}},134:(e,t,o)=>{const{buildings:s}=o(5882),{perks:n}=o(7055);let r=[];function i(e){return r.includes(e)}function a(e){if(r.push(e),"Architect"===e){const e=o(5882).buildings;for(let t of Object.keys(e))o(8022).recalculateBuildingCost(t)}}e.exports={hasPerk:i,addPerk:a,selectAbility:function(e){i(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(1495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(i(t))return t;return""},getAllPerks:function(){return r},resetPerks:function(){r=[]}}},9476:e=>{e.exports={getPlayerUid:function(){return null},generateUniqueID:function(){return Date.now().toString(36)+Math.random().toString(36).substr(2,5)}}},4369:(e,t,o)=>{const{capitalizeFirst:s}=o(6681),{ponders:n}=o(6397),{getMaterial:r}=o(3924),{resources:i}=o(2587),{buttons:a}=o(2054);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(r(e,i)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,r]of Object.entries(e)){const e=`ponder${s(t)}`;let i=o(9594).generateTooltipCost(r.cost);a[e]={class:"tooltip unlock",text:r.text||"Ponder a Mystery?",tooltipDesc:r.tooltipDesc||"Who knows what you'll discover",tooltipCost:i,tab:"ponder",unlock:t,requirement:()=>o(8078).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},6995:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(6425),{isPondered:r}=o(4369),{passedStage:i}=o(8751),{updateBounceAnimation:a}=o(5994);t.recalcMaxClones=function(){let e=0;i("clone")&&(e+=1);const t=o(5882).buildings;for(const[o,s]of Object.entries(t))s.effects&&s.effects.clones&&(e+=s.effects.clones*s.count);r("biggerShelter")&&(e+=1*t.shelter.count),r("biggerHut")&&(e+=1*t.hut.count),r("biggerHouse")&&(e+=2*t.house.count),r("biggerTeepee")&&(e+=4*t.teepee.count),r("evenBiggerShelter")&&(e+=1*t.shelter.count),s("maxClones")&&(e+=1*n("maxClones")),o(9594).setMax("clones",e),a()}},8022:(e,t,o)=>{t.recalculateBuildingCost=function(e){let t=o(5882).buildings[e];if(t&&t.cost&&t.ratio)for(let e in t.cost)console.log(t,t.basecost[e],t.ratio,t.count),t.cost[e]=Math.round(t.basecost[e]*Math.pow(t.ratio,t.count)),o(134).hasPerk("Architect")&&(t.cost[e]*=.75),o(6425).hasPrestige("cheaperBuildings")&&(t.cost[e]*=Math.pow(.95,o(6425).getLevelOfPrestige("cheaperBuildings")));const s=document.querySelector("#"+e);var n=o(9594).generateTooltipCost(t.cost);if(!s)throw"Button not found for "+e;{s.setAttribute("data-tooltip-cost",n);const e=o(5151).generateEffectString(t);s.setAttribute("data-tooltip-effect",e)}}},9594:(e,t,o)=>{const{resources:s}=o(2587),{craftedResources:n}=o(3371),{buttons:r}=o(2054),{skills:i}=o(2324),{getWorkers:a,updateTotal:c}=o(5150),{hasTool:l}=o(2609),{calcCraftBonus:u,getMax:d}=o(8078),{canCraft:f}=o(7064),{capitalizeFirst:p}=o(6681),{getMaterial:g}=o(3924),{isPondered:h}=o(4369),{calcIncrease:m}=o(8121),{updateSidebar:b,abbreviateNumber:y}=o(5453),{passedStage:v}=o(8751),{updateDisplayValue:k}=o(5453),{updateSkills:w}=o(8491),{recalcMaxClones:x}=o(6995),S=document.getElementById("resources");function C(e,t){s[e].max+=t,b(),c()}function B(e,t){0==t||Number.isNaN(t)||((e=e.toLowerCase())in s?(g(e)<d(e)&&t>0?(h("fasterResourceGain")&&(t*=1.05),s[e].value+=t,w(e,t),"violence"===e&&o(4856).refreshValues()):t<0?s[e].value+=t:s[e].value=d(e),k(e)):e in n?(console.log("crafting a material",e,t),n[e].value+=t,k(e),w(e,t)):(s[e]&&(s[e].value+=t),n[e]&&(n[e].value+=t),b()))}function T(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(n).find((t=>n[t]===e));return t.innerHTML=`${e.text||p(o)}`,t.tab="experiment",t}t.resourcesContainer=S,window.increaseMaterial=B,window.increaseMax=C;const M=document.querySelector("#craftedResourceButtons");function j(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${g(o,s)>=e[o]?"enough":"not-enough"}">${y(e[o])} ${o}</span><br>`;return t}const E=document.getElementById("emojiDisplay");function A(){let e="";for(let t in s){let o=a(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=`<span class='tooltip' tooltipdesc='${t}'>${n.repeat(o)}</span>`)}E.innerHTML=e,function(){let e=48;for(E.style.fontSize=`${e}px`;E.offsetWidth>600&&e>30;)e-=1,E.style.fontSize=`${e}px`}()}function $(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!f(e))return;let o=n[e].cost;t=Math.floor(t);for(const[e,s]of Object.entries(o))console.log("crafting quantity:",e,s),B(e,-s*t),k(e);B(e,u(e)*t),n[e].craftedOnce||(n[e].craftedOnce=!0),k(e)}A(),e.exports={increaseMaterial:B,setMax:function(e,t){s[e].max=t,b(),c()},increaseMax:C,craftAllResources:function(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(g(e,s)/t[e]);let r=Math.floor(Math.min(...o));console.log(e,r),$(e,r)}catch(t){console.log("Failed to craftall for: ",e,t)}},craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;f(e)&&(!function(e,t,o){for(const[e,o]of Object.entries(t))B(e,-o);B(e,o)}(e,n[e].cost,u(e)),n[e].craftedOnce||(n[e].craftedOnce=!0),k(e))},updateEmojiDisplay:A,generateTooltipCost:j,calcSecondsRemaining:function(e,t){if(t<=g(e))return 0;const o=m(e,1e3);return 0==o?-1:Math.ceil(t-g(e))/o},appendCraftedResourceButtons:function(){for(let e in n){const t=T(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",j(n[e].cost)||""),M.appendChild(t),v(t.getAttribute("requirement"))?t.classList.remove("hidden"):t.classList.add("hidden"),r[n[e].id]=n[e]}},calcIncrease:m,updateResourceIncreaseRates:function(){for(let t in s){const o=m(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:$,setMaterial:function(e,t){s[e].value=t,k(e),c()}}},502:(e,t,o)=>{const{calcIncrease:s,updateEmojiDisplay:n}=o(9594),{addTool:r,getAllTools:i}=o(2609),{allVisibleButtons:a,setVisibleButton:c,getMax:l}=o(8078),{makeVisible:u}=o(1123),{getCraftedResource:d}=o(6590),{getMaterial:f}=o(3924),{getAllPerks:p,addPerk:g,hasPerk:h,selectAbility:m}=o(134),{isPondered:b}=o(4369),{jobCounts:y,setConnections:v,getConnections:k,distributeWorkers:w,updateDisplay:x}=o(5150),{total_time:S}=o(808),{setAteFish:C,getAteFish:B}=o(1621),{craftedResources:T}=o(3371),{buildings:M}=o(5882),{ponders:j}=o(6397),{resources:E}=o(2587),{skills:A}=o(2324),{getAllStages:$}=o(8751),{activeFactoriesProducing:q,loadFactory:O}=o(1051),{recalcMaxClones:D}=o(6995),{updateSidebar:L}=o(5453),{prestige:R}=o(6425),{recalculateBuildingCost:P}=o(8022),{updateBuildingButtonCount:I}=o(2607),{updateBuildingList:F}=o(5151),{populateSkillsTable:G}=o(8491),{getAnalytics:V,logEvent:H}=o(9013),{generateUniqueID:_}=o(9476);function N(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{},newBuildings:{}};for(let t in A)e.skills[t]={exp:A[t].exp,level:A[t].level};for(let t in T)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=d(t),e.craftedResources[t].craftedOnce=T[t].craftedOnce;for(let t in E)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=f(t,E),e.resources[t].max=l(t);e.tools=i(),e.stages=$(),e.jobs=y;try{e.perks=[new Set(p())]}catch(t){e.perks=[],console.error("saving perks error",t)}e.connections=Array.from(k().entries());for(let t in j)e.unlocks[t]=b(t);let t=null;for(let o in M)e.buildings[o]=M[o].count,M[o].hasOwnProperty("name")&&(e.newBuildings[o]=M[o],t=M[o]);for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries(q))e.factories[t]=o;const s=o(808).getMessage().innerHTML,n=function(){const e="You feel a strange, constructive urge to acquire "+Object.keys(t.cost).join(", ");return console.log("message tooltip:",e),e}(),r=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(s);r.push(n),e.message=r;for(const[t,o]of Object.entries(R))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=S,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),H(V(),"save",e),e}e.exports={saveGame:N,loadGame:function(){if(console.log("Loading Game"),!localStorage.getItem("player_uid")){const e=_();localStorage.setItem("player_uid",e)}const e=localStorage.getItem("player_uid");var t=JSON.parse(localStorage.getItem("save"));if(console.log(t),H(V(),"load",{savegame:t,playerUid:e}),null!==t){if(void 0!==t.resources)for(let e in t.resources)"undefined"!==e.valueOf()&&null!==e&&null!==E[e]&&(E[e].value=t.resources[e].value,E[e].max=t.resources[e].max,console.log("Updating resources for "+e+" to "+t.resources[e].value,t.resources[e].max),0!=E[e].value&&o(5453).updateDisplayValue(e));if(void 0!==t.skills)for(let e in t.skills)A[e].exp=t.skills[e].exp,A[e].level=t.skills[e].level;if(void 0!==t.craftedResources)for(var a of Object.keys(t.craftedResources))T[a]&&(T[a].value=t.craftedResources[a].value,Number.isNaN(T[a].value)&&(T[a].value=0),T[a].craftedOnce=t.craftedResources[a].craftedOnce,o(5453).updateDisplayValue(a));if(void 0!==t.tools){let e=[...new Set([...i(),...t.tools])];for(let t in e)r(t)}if(void 0!==t.stages)for(let e in t.stages)u(t.stages[e]);if(void 0!==t.jobs)for(let e in t.jobs)y[e]=t.jobs[e],x(e);if(void 0!==t.unlocks)for(let e in t.unlocks)try{j[e].isPondered=t.unlocks[e]}catch(t){console.warn("Old save data includes obsolete ponder",e)}if(b("skillsTable")&&G(),void 0!==t.perks)for(let[e,s]of Object.entries(t.perks))if(g(s),o(1495).selectCorrectPerkButton(s),parseFloat(e)>100)break;if(void 0!==t.prestige)for(const[e,o]of Object.entries(t.prestige))R[e].cost=o.cost,R[e].level=o.level;if(function(e){if(void 0!==e.newBuildings)for(let t in e.newBuildings)M[t]=e.newBuildings[t];if(void 0!==e.buildings){for(let t in e.buildings)try{M[t].count=e.buildings[t],M[t].count>0&&(I(t,M[t].count,M[t].emoji),P(t))}catch(e){console.warn("error with building",t,e)}L()}}(t),D(),F(),C(E.clones.max>=1),B()&&(document.querySelector("#eatFish").style.display="none"),void 0!==t.message&&o(7169).changeMessage(t.message[0],t.message[1],t.message[2]?t.message[2]:null),void 0!==t.time){o(808).setTotalTime(t.time[S]);const e=Date.now()-t.time.time_of_save;for(let t in E){const o=s(t,e);E[t].value+=o,E[t].value>E[t].max&&(E[t].value=E[t].max)}}if(void 0!==t.allVisibleButtons){console.log(t.allVisibleButtons);for(let e in t.allVisibleButtons)c(e)}void 0!==t.connections&&(v(new Map(t.connections)),0===k().size&&v(new Map),console.log(k()));for(let e in y)w(e,y[e]);if(n(),void 0!==t.factories)for(const[e,o]of Object.entries(t.factories))if(o>0)for(let t=1;t<o;++t)O(e)}}},window.saveGame=N},1495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},2093:(e,t,o)=>{const{drawAllConnections:s}=o(5150),{updateSidebar:n}=o(5453),{refreshValues:r,combat:i,pauseAnimation:a,battleResult:c,simulateBattle:l}=o(4856),{getSfxVolume:u,playSound:d}=o(5098);function f(){let e="";for(let t of p)t.classList.contains("active")&&(e=t.id);return e}t.getCurrentTab=f;let p=document.querySelectorAll(".tab-content > .content");t.showTab=function(e){console.log("show tab: "+e);let t=f();if(e===t)return;d("./audio/tab.wav");let o=document.getElementById(t);o&&(o.classList.remove("active"),o.style.opacity="0");let n=document.querySelectorAll(".tab-button");for(let e of n)e.classList.remove("active");let i=document.getElementById(e);setTimeout((()=>{i.classList.add("active")}),100),setTimeout((()=>{i.style.opacity="1"}),200);const a=`#${e}Button`;let u=document.querySelector(a);u&&u.classList.add("active"),"jobsTab"===e&&s(),"combatTab"===e&&(r(),null===c&&l()),console.log(t,">",e)}},5453:(e,t,o)=>{const{calcIncrease:s}=o(8121),{capitalizeFirst:n}=o(6681),{getMaterial:r}=o(3924),{getMax:i}=o(8078),{resources:a}=o(2587),{isPondered:c}=o(4369);function l(e){var t=!0;return r(e)>0&&(t=!1,a[e]&&(a[e].isVisible=!0)),a[e]&&a[e].isVisible&&(t=!1),t}function u(e){if("number"!=typeof e)return e;function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const d=document.getElementById("resources");function f(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),d.appendChild(o))):o=document.getElementById("resources");const s=n(e).split("_").join(" "),a=document.createElement("p");a.className="resource",a.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${s}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let u=i(e)&&i(e)<1/0?i(e).toFixed(2):"∞";l.textContent=`${r(e).toFixed(2)} / ${u}`;const f=document.createElement("span");function p(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}return f.className="resourceRate",f.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,a.appendChild(c),a.appendChild(l),a.appendChild(f),o.appendChild(a),p("resource-clones",1),p("resource-sticks",2),p("resource-vines",3),p("resource-rocks",4),p("resource-fish",5),p("resource-freshwater",6),p("resource-wood",7),p("resource-ore",8),p("resource-sand",9),p("resource-clay",10),p("resource-wheat",11),p("resource-hides",12),p("resource-game",13),p("resource-herbs",14),p("resource-berries",15),p("resource-ponder",50),a}function p(e){const t=d.querySelector(`#${e}Value`),o=d.querySelector(`#${e}IncreaseRate`);if(t){try{if(t.textContent=`${u(r(e))} / ${u(i(e))}`,o){const t=s(e,1e3);0===t||Number.isNaN(t)?o.parentElement.innerHTML=`<span id="${e}IncreaseRate"></span>`:o.parentElement.innerHTML=`(<span id="${e}IncreaseRate">${s(e,1e3).toFixed(1)}</span>/s)`}l(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(a[e]&&a[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}}e.exports={updateSidebar:function(){const e=o(1051).allMaterials;Array.from(e).forEach((e=>{p(e)}))},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder","violence"],food:["berries","fish","game","wheat","bread","freshwater"],materials:["sticks","vines","rocks","wood","sand","clay","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,s]of Object.entries(t))s.forEach((t=>{let s=document.getElementById("resource-"+t);e||(o=null),s||(s=f(t,o)),l(t)?s.style.display="none":s.style.display=""}))},updateDisplayValue:p,abbreviateNumber:u}},8491:(e,t,o)=>{const{skills:s}=o(2324),{triggerFloatUpText:n}=o(8727),r=function(e){let t={};for(const[o,s]of Object.entries(e))for(const e of s.affectedResources)t[e]||(t[e]=[]),t[e].push(o);return t}(s);console.log(r);let i=!1;function a(){const e=document.getElementById("skillsTable");if(i)for(let e in s){(s[e].exp>0||s[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=s[e].exp+"%",document.querySelector("#level-"+e).textContent="[level "+s[e].level+"]   "+e)}else{console.log("Generating table for the first time"),i=!0;for(let t in s){let o=document.createElement("tr");o.id="tr-"+t;let n=document.createElement("td");n.style.position="relative";let r=document.createElement("div");r.setAttribute("class","progressBar"),r.style.height="20px",r.setAttribute("data-skill",t);let i=document.createElement("span");i.textContent="[level "+s[t].level+"]   "+t,i.setAttribute("id","level-"+t),i.style.position="absolute",i.style.left="10px",i.style.top="50%",i.style.transform="translateY(-50%)",0==s[t].exp&&0==s[t].level&&(o.style.display="none"),n.appendChild(r),n.appendChild(i),o.appendChild(n),e.appendChild(o)}}}e.exports={updateSkills:function(e,t){if(t=Math.abs(t),o(4369).isPondered("fasterSkills")&&(t*=1.05),!r[e])return;const i=r[e][0].toString();if(s[i].level>=100)return s[i].level=100,void(s[i].exp=0);if(s[i].exp+=t/Math.pow(1.4,s[i].level),s[i].exp>=100){s[i].level+=1,s[i].exp=0;let e=`Level up! ${i} → ${s[i].level}`;const t=document.getElementById("prestige").getBoundingClientRect();n(t.x,t.y,e,"#F4D03F")}o(8751).passedStage("skillsTable")&&a()},populateSkillsTable:a}},8751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},2609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},7864:(e,t,o)=>{const{getMaterial:s}=o(3924),n=document.getElementById("resourceList"),r=document.getElementById("goldAmount");function i(e,t){s("gold",o(2587).resources)>=t&&(o(9594).increaseMaterial("gold",-t),o(9594).increaseMaterial(e,t),r.textContent=s("gold",o(2587).resources))}function a(e,t){s(e,o(2587).resources)>=1&&(o(9594).increaseMaterial("gold",t),o(9594).increaseMaterial(e,-1),r.textContent=s("gold",o(2587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{i(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=i,t.sellResource=a},8727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,s){const n=document.createElement("div");n.textContent=o,n.style.left=`${e}px`,n.style.top=t-30+"px",n.style.color=s,n.classList.add("float-up-fade-out"),document.body.appendChild(n),n.addEventListener("animationend",(()=>{n.remove()}))}},5994:(e,t,o)=>{const{getMaterial:s}=o(3924),{getMax:n}=o(8078);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");s("clones")<n("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},2607:(e,t,o)=>{const{capitalizeFirst:s}=o(6681);t.updateBuildingButtonCount=function(e,t,o){document.getElementById(`${e}`).textContent=`${o} ${s(e).split("_").join(" ")} (${t})`}},2831:(e,t,o)=>{const{buildings:s}=o(5882),{updateTooltip:n,hideTooltip:r}=o(8208),{fitCharToCell:i}=o(7531),a=document.getElementById("buildingList");t.updateBuildingList=function(){const e=document.createDocumentFragment();let t=0;for(const[o,n]of Object.entries(s))for(let s=0;s<n.count;++s,++t){let s=(t%6+1).toString(),r=Math.floor(t/6+1).toString();const i=document.createElement("span");i.className="tooltip",i.style.gridColumn=s,i.style.gridRow=r,i.style.fontSize="36px",i.setAttribute("tooltipDesc",o),i.textContent=n.emoji||"?",e.appendChild(i)}a.innerHTML="",a.appendChild(e),a.addEventListener("mouseenter",(e=>{e.target.classList.contains("tooltip")&&n(e.target)}),!0),a.addEventListener("mouseleave",(e=>{e.target.classList.contains("tooltip")&&r()}),!0)}},7667:(e,t,o)=>{const{buttons:s}=o(2054),{getCraftedResourceConfigById:n}=o(3371),{getBuildingCount:r}=o(5882),{isPondered:i,canUnlock:a}=o(4369),{getCraftedResourceKeyByConfig:c}=o(3371),{isButtonIdVisible:l,setVisibleButton:u}=o(8078),{canCraft:d}=o(7064),{canBuyBuilding:f}=o(5023),{passedStage:p}=o(8751);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),i(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var g=n(t.id);g.value>0&&(o="button-disabled");const e=c(g);d(e)&&(o=!t.requiredStage||t.requiredStage&&p(t.requiredStage)?"purchasable":"hidden")}t.data_building&&(o=r(t.data_building)?"button-disabled":o,o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(6842).O[t];"hidden"==(s=null==n||i(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(s),e.style.display="")}))}},8208:(e,t,o)=>{const{getCraftedResourceConfigById:s}=o(3371),{buildings:n}=o(5882),{ponders:r}=o(6397),{resources:i,getResourceConfigById:a}=o(2587),{calcSecondsRemaining:c}=o(9594),{getMax:l}=o(8078),{getMaterial:u}=o(3924),d=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){d.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||s(e.id)||n[e.getAttribute("data_building")]||r[e.getAttribute("unlock")],p=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||f&&f.cost;!function(e,t,o,s){let n="";function r(e){let t=parseFloat(e);return e.includes("K")?t*=1e3:e.includes("M")?t*=1e6:e.includes("B")&&(t*=1e9),t}t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#4cf">${o}</span><hr>`);try{if(s.toString().includes("span"))n+=function(e,t){const o=/class="tooltip-(\w+) .+?">([\d.]+[KM]?)\s(\w+)</g;let s,n="";for(;null!==(s=o.exec(e));){const e=s[1],o=s[2],a=r(o);var i=u(e,t)>=a?"enough":"not-enough";l(e)<a&&(i="exceeds-max"),n+=`<span class="tooltip-${e} ${i}">${o} ${e}</span>`;let d=0;t[e]&&(d=c(e,a)),d>0&&"exceeds-max"!=i&&(n+=`<span class="time-remaining">(${d.toFixed(0)} seconds)</span>`),n+="<br>"}return n}(s,i);else{var a="";for(const[e,t]of Object.entries(s)){var f=u(e,i)>=t?"enough":"not-enough";l(e)<t&&(f="exceeds-max"),a+=`<span class="tooltip-${e} ${f}">${t.toFixed(0)} ${e}</span>`;let o=0;i[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=f&&(a+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),a+="<br>"}n+=a}}catch(e){void 0!==s&&"undefined"!==s&&(n+=s)}d.innerHTML=n,d.style.left=e.getBoundingClientRect().right+5+"px",d.style.top=e.getBoundingClientRect().top-d.offsetHeight/2+"px",d.style.display="block"}(e,t,o,p)}}},o={};function s(e){var n=o[e];if(void 0!==n)return n.exports;var r=o[e]={exports:{}};return t[e](r,r.exports,s),r.exports}s.m=t,e=[],s.O=(t,o,n,r)=>{if(!o){var i=1/0;for(u=0;u<e.length;u++){for(var[o,n,r]=e[u],a=!0,c=0;c<o.length;c++)(!1&r||i>=r)&&Object.keys(s.O).every((e=>s.O[e](o[c])))?o.splice(c--,1):(a=!1,r<i&&(i=r));if(a){e.splice(u--,1);var l=n();void 0!==l&&(t=l)}}return t}r=r||0;for(var u=e.length;u>0&&e[u-1][2]>r;u--)e[u]=e[u-1];e[u]=[o,n,r]},s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={179:0};s.O.j=t=>0===e[t];var t=(t,o)=>{var n,r,[i,a,c]=o,l=0;if(i.some((t=>0!==e[t]))){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);if(c)var u=c(s)}for(t&&t(o);l<i.length;l++)r=i[l],s.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return s.O(u)},o=self.webpackChunkclone_idle=self.webpackChunkclone_idle||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var n=s.O(void 0,[13],(()=>s(808)));n=s.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QW9CSyxFQUFFOEIsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9HYW1lU2ltdWxhdG9yLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2F0ZUZpc2guanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvYXVkaW8uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvYnVpbGRpbmdzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NhbGNJbmNyZWFzZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jYW5CdXlCdWlsZGluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jYW5DcmFmdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jYXBpdGFsaXplRmlyc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2hhbmdlTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jb21iYXQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9maXRDaGFyVG9DZWxsLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2dhdGhlcmluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9nZW5lcmF0ZUJ1dHRvbnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2VuZXJhdGVSYW5kb21CdWlsZGluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9nZXRDcmFmdGVkUmVzb3VyY2UuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2V0TWF0ZXJpYWwuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvaGVscGVyLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pvYlJlcXVpcmVkUG9uZGVycy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qb2JzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vYnVpbGRpbmdzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vYnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wZXJrcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3ByZXN0aWdlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vcmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vc2tpbGxzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL21haW4uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvbWFrZVZpc2libGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcGVya3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcGxheWVyVWlkLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9yZWNhbGNNYXhDbG9uZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NhdmluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zaG93VGFiLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvc2tpbGxzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3N0YWdlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90b29scy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90cmFkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90cmlnZ2VyRmxvYXRVcFRleHQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlQm91bmNlQW5pbWF0aW9uLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlQnVpbGRpbmdMaXN0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHkuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiY2xhc3MgR2FtZVNpbXVsYXRvciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IHtcclxuICAgICAgICAgICAgcmVzb3VyY2VzOiB7XHJcbiAgICAgICAgICAgICAgICBjbG9uZXM6IDAsXHJcbiAgICAgICAgICAgICAgICBzdGlja3M6IDAsXHJcbiAgICAgICAgICAgICAgICB2aW5lczogMCxcclxuICAgICAgICAgICAgICAgIHJvY2tzOiAwLFxyXG4gICAgICAgICAgICAgICAgZmlzaDogMCxcclxuICAgICAgICAgICAgICAgIHdvb2Q6IDAsXHJcbiAgICAgICAgICAgICAgICBwb25kZXI6IDAsXHJcbiAgICAgICAgICAgICAgICBvcmU6IDAsXHJcbiAgICAgICAgICAgICAgICBzYW5kOiAwLFxyXG4gICAgICAgICAgICAgICAgd2hlYXQ6IDAsXHJcbiAgICAgICAgICAgICAgICBmcmVzaHdhdGVyOiAwLFxyXG4gICAgICAgICAgICAgICAgaGlkZXM6IDAsXHJcbiAgICAgICAgICAgICAgICBjbGF5OiAwLFxyXG4gICAgICAgICAgICAgICAgaGVyYnM6IDAsXHJcbiAgICAgICAgICAgICAgICBnYW1lOiAwLFxyXG4gICAgICAgICAgICAgICAgaHVza3M6IDAsXHJcbiAgICAgICAgICAgICAgICB2aW9sZW5jZTogMCxcclxuICAgICAgICAgICAgICAgIHNoYXJwcm9ja3M6IDAsXHJcbiAgICAgICAgICAgICAgICByb3BlOiAwLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RhZmY6IDAsXHJcbiAgICAgICAgICAgICAgICBmaXNoaW5ncm9kOiAwLFxyXG4gICAgICAgICAgICAgICAgc3BlYXI6IDAsXHJcbiAgICAgICAgICAgICAgICBheGU6IDAsXHJcbiAgICAgICAgICAgICAgICBwaWNrYXhlOiAwLFxyXG4gICAgICAgICAgICAgICAgZ2xhc3M6IDAsXHJcbiAgICAgICAgICAgICAgICBwYXBlcjogMCxcclxuICAgICAgICAgICAgICAgIGdvbGQ6IDAsXHJcbiAgICAgICAgICAgICAgICBpcm9uOiAwLFxyXG4gICAgICAgICAgICAgICAgc2lsdmVyOiAwLFxyXG4gICAgICAgICAgICAgICAgYnJpY2tzOiAwLFxyXG4gICAgICAgICAgICAgICAgYnJlYWQ6IDAsXHJcbiAgICAgICAgICAgICAgICBzdGVlbDogMCxcclxuICAgICAgICAgICAgICAgIGJlYW1zOiAwLFxyXG4gICAgICAgICAgICAgICAgY3JhdGVzOiAwLFxyXG4gICAgICAgICAgICAgICAgbmFpbHM6IDAsXHJcbiAgICAgICAgICAgICAgICBzbGFiczogMCxcclxuICAgICAgICAgICAgICAgIG1lZGljaW5lOiAwLFxyXG4gICAgICAgICAgICAgICAgbGVhdGhlcjogMCxcclxuICAgICAgICAgICAgICAgIGNvbmNyZXRlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtYXhlczoge1xyXG4gICAgICAgICAgICAgICAgXCJjbG9uZXNcIjogMCxcclxuICAgICAgICAgICAgICAgIFwic3RpY2tzXCI6IDUwLFxyXG4gICAgICAgICAgICAgICAgXCJ2aW5lc1wiOiA1MCxcclxuICAgICAgICAgICAgICAgIFwicm9ja3NcIjogMzAsXHJcbiAgICAgICAgICAgICAgICBcImZpc2hcIjogMTAsXHJcbiAgICAgICAgICAgICAgICBcIndvb2RcIjogNDAsXHJcbiAgICAgICAgICAgICAgICBcInBvbmRlclwiOiAyMCxcclxuICAgICAgICAgICAgICAgIFwib3JlXCI6IDIwLFxyXG4gICAgICAgICAgICAgICAgXCJzYW5kXCI6IDIwLFxyXG4gICAgICAgICAgICAgICAgXCJ3aGVhdFwiOiAyMCxcclxuICAgICAgICAgICAgICAgICdmcmVzaHdhdGVyJzogNTAsXHJcbiAgICAgICAgICAgICAgICAnaGlkZXMnOiA1MCxcclxuICAgICAgICAgICAgICAgICdjbGF5JzogNTAsXHJcbiAgICAgICAgICAgICAgICAnaGVyYnMnOiA1MCxcclxuICAgICAgICAgICAgICAgICdnYW1lJzogNTAsXHJcbiAgICAgICAgICAgICAgICAnaHVza3MnOiAxMDAwLFxyXG4gICAgICAgICAgICAgICAgJ3Zpb2xlbmNlJzogMTAwXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBidWlsZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGFuaW1hbF9wZW46IDAsXHJcbiAgICAgICAgICAgICAgICBiYWtlcnk6IDAsXHJcbiAgICAgICAgICAgICAgICBiYXJuOiAwLFxyXG4gICAgICAgICAgICAgICAgYmFycmFja3M6IDAsXHJcbiAgICAgICAgICAgICAgICBjYW1wZmlyZTogMCxcclxuICAgICAgICAgICAgICAgIGRlc2s6IDAsXHJcbiAgICAgICAgICAgICAgICBkcnlpbmdfcmFja3M6IDAsXHJcbiAgICAgICAgICAgICAgICBmaXNoX3RyYXBzOiAwLFxyXG4gICAgICAgICAgICAgICAgZmlzaGVyeTogMCxcclxuICAgICAgICAgICAgICAgIGZvcmdlOiAwLFxyXG4gICAgICAgICAgICAgICAgZ2FyZGVuOiAwLFxyXG4gICAgICAgICAgICAgICAgZ3JvdmU6IDAsXHJcbiAgICAgICAgICAgICAgICBoZXJiYWxpc3RfaHV0OiAwLFxyXG4gICAgICAgICAgICAgICAgaG9zcGl0YWw6IDAsXHJcbiAgICAgICAgICAgICAgICBob3VzZTogMCxcclxuICAgICAgICAgICAgICAgIGh1dDogMCxcclxuICAgICAgICAgICAgICAgIGlycmlnYXRpb246IDAsXHJcbiAgICAgICAgICAgICAgICBsaWJyYXJ5OiAwLFxyXG4gICAgICAgICAgICAgICAgbHVtYmVyX3lhcmQ6IDAsXHJcbiAgICAgICAgICAgICAgICBtYXJrZXRwbGFjZTogMCxcclxuICAgICAgICAgICAgICAgIG1pbGl0YXJ5X3NjaG9vbDogMCxcclxuICAgICAgICAgICAgICAgIG1pbmU6IDAsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZhdG9yeTogMCxcclxuICAgICAgICAgICAgICAgIHJlc2Vydm9pcjogMCxcclxuICAgICAgICAgICAgICAgIHJvY2tfcm9sZTogMCxcclxuICAgICAgICAgICAgICAgIHNhbmRfc2Nvb3A6IDAsXHJcbiAgICAgICAgICAgICAgICBzaGVkOiAwLFxyXG4gICAgICAgICAgICAgICAgc2hlbHRlcjogMCxcclxuICAgICAgICAgICAgICAgIHN0b2NrcGlsZTogMCxcclxuICAgICAgICAgICAgICAgIHN0b25lX2RlcG90OiAwLFxyXG4gICAgICAgICAgICAgICAgc3RvbmVfcXVhcnJ5OiAwLFxyXG4gICAgICAgICAgICAgICAgdGFubmVyeTogMCxcclxuICAgICAgICAgICAgICAgIHRlZXBlZTogMCxcclxuICAgICAgICAgICAgICAgIHRlbGVzY29wZTogMCxcclxuICAgICAgICAgICAgICAgIHRvd2VyOiAwLFxyXG4gICAgICAgICAgICAgICAgdHJhcHM6IDAsXHJcbiAgICAgICAgICAgICAgICB2aW5leWFyZDogMCxcclxuICAgICAgICAgICAgICAgIHdhcmVob3VzZTogMCxcclxuICAgICAgICAgICAgICAgIHdhdGVyX3B1bXA6IDAsXHJcbiAgICAgICAgICAgICAgICB3aW5kbWlsbDogMCxcclxuICAgICAgICAgICAgICAgIHdvcmtzaG9wOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmxvZyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkaW5nc0NvbnN0ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpLmJ1aWxkaW5ncztcclxuICAgIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgICAgIC8vIFNpbWlsYXIgbG9naWMgdG8gdGhlIG9yaWdpbmFsIGJ1eUJ1aWxkaW5nLFxyXG4gICAgICAgIC8vIGJ1dCB3b3JrcyBvbiB0aGlzLmdhbWVTdGF0ZSBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgZ2FtZSBzdGF0ZVxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSBjb3N0c1xyXG4gICAgICAgIGxldCBjb3N0ID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5idWlsZGluZ3NDb25zdFtidWlsZGluZ05hbWVdLmJhc2Vjb3N0KSkge1xyXG4gICAgICAgICAgICBjb3N0W2tleV0gPSB2YWx1ZSAqIE1hdGgucG93KHRoaXMuYnVpbGRpbmdzQ29uc3RbYnVpbGRpbmdOYW1lXS5yYXRpbywgdGhpcy5nYW1lU3RhdGUuYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhjb3N0KTtcclxuICAgICAgICAvLyBDaGVjayBpZiBlbm91Z2ggcmVzb3VyY2VzIGFyZSBhdmFpbGFibGVcclxuICAgICAgICBsZXQgY2FuQnV5ID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKGxldCBjIGluIGNvc3QpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1tjXSA8IGNvc3RbY10pIHtcclxuICAgICAgICAgICAgICAgIGNhbkJ1eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBCdXkgYnVpbGRpbmcgaWYgZW5vdWdoIHJlc291cmNlcyBhcmUgYXZhaWxhYmxlXHJcbiAgICAgICAgaWYgKGNhbkJ1eSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBjIGluIGNvc3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1tjXSAtPSBjb3N0W2NdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJ1aWxkaW5nc1tidWlsZGluZ05hbWVdICs9IDE7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yYWdlLmluY2x1ZGVzKGJ1aWxkaW5nTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEluY3JlYXNlIHRoZSBtYXggc3RvcmFnZVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbciwgdmFsXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmJ1aWxkaW5nc0NvbnN0W2J1aWxkaW5nTmFtZV0uZWZmZWN0cykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5tYXhlc1tyXSArPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2ltdWxhdGVUaWNrKCkge1xyXG4gICAgICAgIC8vIFNpbXVsYXRlIGEgc2luZ2xlIHRpY2sgb2YgdGhlIGdhbWVcclxuICAgICAgICB0aGlzLnBlcmZvcm1BY3Rpb25zKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVSZXNvdXJjZXMoKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS50aW1lICs9IDE7IC8vIEluY3JlbWVudCB0aW1lXHJcbiAgICAgICAgdGhpcy5sb2dHYW1lU3RhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBob3VzaW5nID0gWydodXQnLCAnc2hlbHRlcicsICdob3VzZScsICdiYXJyYWNrcycsICdob3NwaXRhbCcsICd0ZWVwZWUnXTtcclxuICAgIHN0b3JhZ2UgPSBbJ3NoZWQnLCAnc3RvY2twaWxlJywgJ3dvcmtzaG9wJywgJ3dhcmVob3VzZScsICdkcnlpbmdfcmFja3MnLCAnd2F0ZXJfcHVtcCcsICdtaWxpdGFyeV9zY2hvb2wnLCAnYmFybicsICdoZXJiYWxpc3RfaHV0JywgJ21pbmUnLCAnYmFrZXJ5JywgJ2FuaW1hbF9wZW4nLCAncmVzZXJ2b2lyJywgJ3N0b25lX2RlcG90J107XHJcbiAgICBidWlsZGluZ1ByaW9yaXR5ID0gWy4uLnRoaXMuaG91c2luZywgLi4udGhpcy5zdG9yYWdlXTtcclxuICAgIHBlcmZvcm1BY3Rpb25zKCkge1xyXG4gICAgICAgIC8vIERlZmluZSBwbGF5ZXIgYWN0aW9ucyBoZXJlLCBlLmcuLCBidXkgYnVpbGRpbmdzLCBjcmFmdCByZXNvdXJjZXNcclxuICAgICAgICBmb3IgKGxldCBiIG9mIE9iamVjdC52YWx1ZXModGhpcy5idWlsZGluZ1ByaW9yaXR5KSkge1xyXG4gICAgICAgICAgICB0cnkgeyB0aGlzLmJ1eUJ1aWxkaW5nKGIpOyB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gYnV5JywgYiwgZXJyb3IpOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIC4uLiBvdGhlciBhY3Rpb25zIC4uLlxyXG4gICAgfVxyXG5cclxuICAgIHJlc291cmNlc1RvR2F0aGVyID0gWydzdGlja3MnXTtcclxuICAgIHVwZGF0ZVJlc291cmNlcygpIHtcclxuICAgICAgICAvLyBVcGRhdGUgcmVzb3VyY2VzIGJhc2VkIG9uIGJ1aWxkaW5ncywgYWN0aW9ucywgZXRjLlxyXG4gICAgICAgIC8vIEV4YW1wbGU6XHJcblxyXG4gICAgICAgIGZvciAobGV0IFtpLCBrZXldIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMucmVzb3VyY2VzVG9HYXRoZXIpKSB7XHJcbiAgICAgICAgICAgIGxldCBnYXRoZXJpbmcgPSAwO1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnc3RpY2tzJyB8fCBrZXkgPT09ICd2aW5lcycgfHwga2V5ID09PSAnd29vZCcgfHwga2V5ID09PSAncm9ja3MnIHx8IGtleSA9PT0gJ2Zpc2gnIHx8IGtleSA9PT0gJ29yZScpIGdhdGhlcmluZyA9IDE7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1trZXldICs9IChnYXRoZXJpbmcgKyAuMjUgKiB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzKSAvIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuZ2FtZVN0YXRlLm1heGVzKS5pbmNsdWRlcyhrZXkpICYmIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1trZXldID4gdGhpcy5nYW1lU3RhdGUubWF4ZXNba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzW2tleV0gPSB0aGlzLmdhbWVTdGF0ZS5tYXhlc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3ZpbmVzJyAmJiBNYXRoLnJhbmRvbSgpID4gMC41KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JhZnQgdmluZXMgaW50byByb3BlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzWydyb3BlJ10gKz0gdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLnZpbmVzIC8gMztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMudmluZXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3dvb2QnICYmIE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmFmdCB3b29kIGludG8gcGFwZXJcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXNbJ3BhcGVyJ10gKz0gdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLndvb2QgLyAxMjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMud29vZCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnb3JlJyAmJiBNYXRoLnJhbmRvbSgpID4gMC41KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JhZnQgb3JlIGludG8gaXJvbiBvciBnb2xkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzWydpcm9uJ10gKz0gdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLm9yZSAvIDIwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMub3JlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1snZ29sZCddICs9IHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5vcmUgLyAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5vcmUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdzYW5kJyAmJiBNYXRoLnJhbmRvbSgpID4gMC41KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JhZnQgc2FuZCBpbnRvIHBhcGVyXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzWydwYXBlciddICs9IHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5zYW5kIC8gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLnNhbmQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXknICYmIE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmFmdCBjbGF5IGludG8gYnJpY2tzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzWydicmlja3MnXSArPSB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xheSAvIDE1O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbGF5ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5zdGlja3MgPj0gMTAgJiYgIXRoaXMucmVzb3VyY2VzVG9HYXRoZXIuaW5jbHVkZXMoJ3ZpbmVzJykpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5wdXNoKCd2aW5lcycpOyAvLyBQdXNoICd2aW5lcycgb25seSBpZiBpdCdzIG5vdCBhbHJlYWR5IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5yZXNvdXJjZXNUb0dhdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMudmluZXMgPj0gMTAgJiYgIXRoaXMucmVzb3VyY2VzVG9HYXRoZXIuaW5jbHVkZXMoJ3JvY2tzJykpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5wdXNoKCdyb2NrcycpOyAvLyBQdXNoICd2aW5lcycgb25seSBpZiBpdCdzIG5vdCBhbHJlYWR5IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5yZXNvdXJjZXNUb0dhdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMucm9ja3MgPj0gMTAgJiYgIXRoaXMucmVzb3VyY2VzVG9HYXRoZXIuaW5jbHVkZXMoJ2Zpc2gnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlc1RvR2F0aGVyLnB1c2goJ2Zpc2gnKTsgLy8gUHVzaCAndmluZXMnIG9ubHkgaWYgaXQncyBub3QgYWxyZWFkeSBpbiB0aGUgYXJyYXlcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKHRoaXMucmVzb3VyY2VzVG9HYXRoZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmZpc2ggPj0gMTAgJiYgIXRoaXMucmVzb3VyY2VzVG9HYXRoZXIuaW5jbHVkZXMoJ3dvb2QnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlc1RvR2F0aGVyLnB1c2goJ3dvb2QnKTsgLy8gUHVzaCAndmluZXMnIG9ubHkgaWYgaXQncyBub3QgYWxyZWFkeSBpbiB0aGUgYXJyYXlcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKHRoaXMucmVzb3VyY2VzVG9HYXRoZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLndvb2QgPj0gMTAgJiYgIXRoaXMucmVzb3VyY2VzVG9HYXRoZXIuaW5jbHVkZXMoJ29yZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIucHVzaCgnb3JlJyk7IC8vIFB1c2ggJ3ZpbmVzJyBvbmx5IGlmIGl0J3Mgbm90IGFscmVhZHkgaW4gdGhlIGFycmF5XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLnJlc291cmNlc1RvR2F0aGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzID49IDEgJiYgIXRoaXMucmVzb3VyY2VzVG9HYXRoZXIuaW5jbHVkZXMoJ3BvbmRlcicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIucHVzaCgncG9uZGVyJyk7IC8vIFB1c2ggJ3ZpbmVzJyBvbmx5IGlmIGl0J3Mgbm90IGFscmVhZHkgaW4gdGhlIGFycmF5XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLnJlc291cmNlc1RvR2F0aGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbG9uZXMgPj0gMyAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygnc2FuZCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIucHVzaCgnc2FuZCcpOyAvLyBQdXNoICd2aW5lcycgb25seSBpZiBpdCdzIG5vdCBhbHJlYWR5IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5yZXNvdXJjZXNUb0dhdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzID49IDQgJiYgIXRoaXMucmVzb3VyY2VzVG9HYXRoZXIuaW5jbHVkZXMoJ2NsYXknKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlc1RvR2F0aGVyLnB1c2goJ2NsYXknKTsgLy8gUHVzaCAndmluZXMnIG9ubHkgaWYgaXQncyBub3QgYWxyZWFkeSBpbiB0aGUgYXJyYXlcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKHRoaXMucmVzb3VyY2VzVG9HYXRoZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuc3RpY2tzICs9ICgxICsgLjI1ICogdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmNsb25lcykgLyB0aGlzLnJlc291cmNlc1RvR2F0aGVyLmxlbmd0aDtcclxuICAgICAgICAvLyB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMudmluZXMgKz0gKDEgKyAuMjUgKiB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzKSAvIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIubGVuZ3RoO1xyXG4gICAgICAgIC8vIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5zYW5kICs9ICguMjUgKiB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzKSAvIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIubGVuZ3RoO1xyXG4gICAgICAgIC8vIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbGF5ICs9ICguMjUgKiB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzKSAvIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIubGVuZ3RoO1xyXG4gICAgICAgIC8vIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5yb2NrcyArPSAoMSArIC4yNSAqIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbG9uZXMpIC8gdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmNsb25lcyA9IHRoaXMuZ2FtZVN0YXRlLmJ1aWxkaW5ncy5zaGVsdGVyICtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYnVpbGRpbmdzLmh1dCArXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJ1aWxkaW5ncy5ob3VzZSAqIDIgK1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5idWlsZGluZ3MuaG9zcGl0YWwgKiAzICtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYnVpbGRpbmdzLnRlZXBlZSAqIDIgK1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5idWlsZGluZ3MuYmFycmFja3M7XHJcbiAgICAgICAgLy8gLi4uIG90aGVyIHJlc291cmNlIHVwZGF0ZXMgLi4uXHJcbiAgICB9XHJcblxyXG4gICAgbG9nR2FtZVN0YXRlKCkge1xyXG4gICAgICAgIC8vIExvZyBhIGRlZXAgY29weSBvZiB0aGUgY3VycmVudCBzdGF0ZSBmb3IgbGF0ZXIgYW5hbHlzaXNcclxuICAgICAgICBjb25zdCBzdGF0ZUNvcHkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZ2FtZVN0YXRlKSk7XHJcbiAgICAgICAgdGhpcy5sb2cucHVzaCh7IHRpbWU6IHRoaXMuZ2FtZVN0YXRlLnRpbWUsIC4uLnN0YXRlQ29weSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBydW5TaW11bGF0aW9uKGR1cmF0aW9uKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkdXJhdGlvbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltdWxhdGVUaWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub3V0cHV0UmVzdWx0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIG91dHB1dFJlc3VsdHMoKSB7XHJcbiAgICAgICAgLy8gT3V0cHV0IHRoZSByZXN1bHRzIGluIGEgZm9ybWF0IHN1aXRhYmxlIGZvciB2aXN1YWxpemF0aW9uXHJcbiAgICAgICAgLy8gRXhhbXBsZTogY29uc29sZSBsb2dnaW5nLCBmb3IgbW9yZSBhZHZhbmNlZCB1c2UgY2FzZXMsIGNvbnNpZGVyIGdlbmVyYXRpbmcgQ1NWIG9yIEpTT04gZmlsZXNcclxuICAgICAgICAvLyBjb25zb2xlLnRhYmxlKHRoaXMubG9nKTtcclxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0VG9DU1YoZGF0YSkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBoZWFkZXIgcm93IHdpdGgga2V5cyBmcm9tIGJ1aWxkaW5ncyBhbmQgcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nc0tleXMgPSBPYmplY3Qua2V5cyhkYXRhWzBdLmJ1aWxkaW5ncyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlc0tleXMgPSBPYmplY3Qua2V5cyhkYXRhWzBdLnJlc291cmNlcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heGVzS2V5cyA9IE9iamVjdC5rZXlzKGRhdGFbMF0ubWF4ZXMpO1xyXG4gICAgICAgICAgICBjb25zdCBvdGhlcktleXMgPSBPYmplY3Qua2V5cyhkYXRhWzBdKS5maWx0ZXIoa2V5ID0+IGtleSAhPT0gJ2J1aWxkaW5ncycgJiYga2V5ICE9PSAncmVzb3VyY2VzJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IFsuLi5vdGhlcktleXMsIC4uLmJ1aWxkaW5nc0tleXMsIC4uLnJlc291cmNlc0tleXNdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY3N2ID0gW2hlYWRlci5qb2luKCcsJyldO1xyXG5cclxuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKChyb3cpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGhlYWRlci5tYXAoKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBrZXkgaXMgaW4gYnVpbGRpbmdzIG9yIHJlc291cmNlcyBhbmQgaGFuZGxlIGFjY29yZGluZ2x5XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5idWlsZGluZ3MgJiYgcm93LmJ1aWxkaW5ncy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3cuYnVpbGRpbmdzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyb3cucmVzb3VyY2VzICYmIHJvdy5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93LnJlc291cmNlc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3dba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNzdi5wdXNoKHZhbHVlcy5qb2luKCcsJykpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjc3Yuam9pbignXFxuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjc3ZEYXRhID0gY29udmVydFRvQ1NWKHRoaXMubG9nKTtcclxuXHJcbiAgICAgICAgLy8gU3RlcCAzOiBDcmVhdGUgYSBkYXRhIFVSSSBmb3IgdGhlIENTViBzdHJpbmdcclxuICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2NzdkRhdGFdLCB7IHR5cGU6ICd0ZXh0L2NzdicgfSk7XHJcbiAgICAgICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHJcbiAgICAgICAgLy8gU3RlcCA0OiBDcmVhdGUgYSBkb3dubG9hZGFibGUgbGlua1xyXG4gICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgbGluay5ocmVmID0gdXJsO1xyXG4gICAgICAgIGxpbmsuZG93bmxvYWQgPSAnZGF0YS5jc3YnO1xyXG4gICAgICAgIGxpbmsudGV4dENvbnRlbnQgPSAnRG93bmxvYWQgQ1NWJztcclxuXHJcbiAgICAgICAgLy8gQXBwZW5kIHRoZSBsaW5rIHRvIHRoZSBkb2N1bWVudFxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XHJcbiAgICAgICAgY29uc29sZS50YWJsZSh0aGlzLmxvZyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydHMuR2FtZVNpbXVsYXRvciA9IEdhbWVTaW11bGF0b3I7XHJcbi8vIHdpbmRvdy5ydW5TaW11bGF0aW9uID0gc2ltdWxhdG9yLnJ1blNpbXVsYXRpb247XHJcbiIsInZhciBhdGVGaXNoID0gZmFsc2U7XHJcblxyXG5mdW5jdGlvbiBzZXRBdGVGaXNoKGJvb2wpIHtcclxuICAgIGF0ZUZpc2ggPSBib29sO1xyXG4gICAgcmV0dXJuIGF0ZUZpc2g7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QXRlRmlzaCgpIHtcclxuICAgIHJldHVybiBhdGVGaXNoO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGF0ZUZpc2gsXHJcbiAgICBzZXRBdGVGaXNoLFxyXG4gICAgZ2V0QXRlRmlzaFxyXG59OyIsImxldCBtdXNpY1ZvbHVtZSA9IDAuNTtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRNdXNpY1ZvbHVtZSh2b2wpIHtcclxuICAgIG11c2ljVm9sdW1lID0gdm9sO1xyXG59XHJcbmZ1bmN0aW9uIGdldE11c2ljVm9sdW1lKCkge1xyXG4gICAgcmV0dXJuIG11c2ljVm9sdW1lO1xyXG59XHJcblxyXG5sZXQgc2Z4Vm9sdW1lID0gMC41O1xyXG5cclxuZnVuY3Rpb24gc2V0U2Z4Vm9sdW1lKHZvbCkge1xyXG4gICAgc2Z4Vm9sdW1lID0gdm9sO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNmeFZvbHVtZSgpIHtcclxuICAgIHJldHVybiBzZnhWb2x1bWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBsYXlTb3VuZChmaWxlbmFtZSwgaXNTZngpIHtcclxuICAgIGNvbnN0IGF1ZGlvID0gbmV3IEF1ZGlvKGZpbGVuYW1lKTtcclxuICAgIGF1ZGlvLnZvbHVtZSA9IGlzU2Z4ID8gZ2V0U2Z4Vm9sdW1lKCkgOiBnZXRNdXNpY1ZvbHVtZSgpO1xyXG4gICAgYXVkaW8ucGxheSgpO1xyXG5cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZXRNdXNpY1ZvbHVtZSxcclxuICAgIGdldE11c2ljVm9sdW1lLFxyXG4gICAgc2V0U2Z4Vm9sdW1lLFxyXG4gICAgZ2V0U2Z4Vm9sdW1lLFxyXG4gICAgcGxheVNvdW5kXHJcbn07IiwiY29uc3QgeyBidWlsZGluZ3MsIGlzUG9wQnVpbGRpbmcgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBpbmNyZWFzZU1hdGVyaWFsLCBpbmNyZWFzZU1heCwgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG90YWwgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IGhhc1BlcmsgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZSgnLi9yZWNhbGNNYXhDbG9uZXMnKTtcclxuXHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50Jyk7XHJcbmNvbnN0IHsgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgfSA9IHJlcXVpcmUoJy4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QnKTtcclxuY29uc3QgeyBjYW5CdXlCdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9jYW5CdXlCdWlsZGluZycpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQgfSA9IHJlcXVpcmUoJy4vcG9uZGVyJyk7XHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdMaXN0IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1aWxkaW5nTGlzdCcpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKCcuL2pzb24vcG9uZGVyJyk7XHJcbmNvbnN0IHsgbG9nRXZlbnQsIGdldEFuYWx5dGljcyB9ID0gcmVxdWlyZSgnQGZpcmViYXNlL2FuYWx5dGljcycpO1xyXG5jb25zdCB7IGdldFBsYXllclVpZCB9ID0gcmVxdWlyZSgnLi9wbGF5ZXJVaWQnKTtcclxuXHJcbi8qIEJVSUxESU5HUyAqL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlZmZlY3Qgb2YgYSBidWlsZGluZ1xyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmcgVGhlIGJ1aWxkaW5nIG9iamVjdFxyXG4gKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlZmZlY3Qgb2YgdGhlIGJ1aWxkaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUVmZmVjdFN0cmluZyhidWlsZGluZykge1xyXG4gICAgbGV0IGVmZmVjdFBhcnRzID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgW3Jlc291cmNlLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuZWZmZWN0cykpIHtcclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHt2YWx1ZX0gbWF4ICR7cmVzb3VyY2V9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgW3Jlc291cmNlLCBib29zdF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuYm9vc3QpKSB7XHJcbiAgICAgICAgbGV0IHBlcmNlbnRhZ2VCb29zdCA9IE1hdGgucm91bmQoKGJvb3N0IC0gMSkgKiAxMDApO1xyXG4gICAgICAgIC8vIGlmIChpc1BvbmRlcmVkKCdlZmZlY3RpdmVCdWlsZGluZ3MnKSkgcGVyY2VudGFnZUJvb3N0ICo9IDEuMDE7XHJcbiAgICAgICAgLy8gQXBwbHkgcG9uZGVyIGJvbnVzZXNcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBbcG9uZGVySWQsIHBvbmRlcl0gb2YgT2JqZWN0LmVudHJpZXMocG9uZGVycykpIHtcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQocG9uZGVySWQpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBvbmRlcklkLnN0YXJ0c1dpdGgoJ2VmZmVjdGl2ZUJ1aWxkaW5ncycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZUJvb3N0ICo9IDEuMDM7IC8vIEFwcGx5IHRoZSBib251cyBmb3IgdGhpcyBzcGVjaWZpYyBwb25kZXJcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHtwZXJjZW50YWdlQm9vc3QudG9GaXhlZCgyKX0lICR7cmVzb3VyY2V9IHByb2R1Y3Rpb25gKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVmZmVjdFBhcnRzLmpvaW4oJzxicj4nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb3N0IG9mIHRoZSBidWlsZGluZ1xyXG4gKiBAcGFyYW0ge09iamVjdH0gY29zdCBUaGUgYnVpbGRpbmcgY29zdCBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb3N0IG9mIHRoZSBidWlsZGluZyBzZXBhcmF0ZWQgYnkgbmV3IGxpbmVzXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QoY29zdCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGNvc3QpLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHthbW91bnQudG9GaXhlZCgyKX0gJHttYXRlcmlhbH1gKS5qb2luKCdcXG4nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGJ1dHRvbiBmb3IgYSBidWlsZGluZ1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdLZXkgVGhlIG5hbWUgb2YgdGhlIGJ1aWxkaW5nXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBidWlsZGluZ3MgTWFpbiBidWlsZGluZ3Mgb2JqZWN0XHJcbiAqIEByZXR1cm5zIFRoZSBidWlsZGluZyBidXR0b25cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uKGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdLZXldO1xyXG5cclxuICAgICAgICAvLyBEZWVwIGNvcHkgYmFzZWNvc3QgdG8gY3JlYXRlIGNvc3RcclxuICAgICAgICBidWlsZGluZ1snY29zdCddID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidWlsZGluZy5iYXNlY29zdCkpO1xyXG5cclxuICAgICAgICBjb25zdCBjb3N0cyA9IE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmNvc3QpXHJcbiAgICAgICAgICAgIC5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYCR7bWF0ZXJpYWx9OiAke2Ftb3VudH1gKVxyXG4gICAgICAgICAgICAuam9pbignLCAnKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWlyZW1lbnRGdW5jdGlvbiA9IGNyZWF0ZVJlcXVpcmVtZW50RnVuY3Rpb24oYnVpbGRpbmcuY29zdCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZSBidWlsZGluZyBidXR0b246JywgYnVpbGRpbmcsIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYnVpbGRpbmcuZW1vamkpKSk7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0ge1xyXG4gICAgICAgICAgICAnY2xhc3MnOiAndG9vbHRpcCAnICsgYnVpbGRpbmdLZXksXHJcbiAgICAgICAgICAgICd0YWInOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgICAgICd0ZXh0JzogYCR7SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidWlsZGluZy5lbW9qaSkpfSAke2NhcGl0YWxpemVGaXJzdChidWlsZGluZ0tleSl9ICgke2J1aWxkaW5nLmNvdW50fSlgLFxyXG4gICAgICAgICAgICAndG9vbHRpcERlc2MnOiBidWlsZGluZ3NbYnVpbGRpbmdLZXldLnRvb2x0aXBEZXNjIHx8IFwiQSBteXN0ZXJpb3VzIGJ1aWxkaW5nIHdpdGggdW50b2xkIGJlbmVmaXRzLlwiLFxyXG4gICAgICAgICAgICAndG9vbHRpcENvc3QnOiBjb3N0cyxcclxuICAgICAgICAgICAgJ3JlcXVpcmVtZW50JzogKCkgPT4gcmVxdWlyZW1lbnRGdW5jdGlvbigpLFxyXG4gICAgICAgICAgICAnZGF0YV9idWlsZGluZyc6IGJ1aWxkaW5nS2V5LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBidXR0b247XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCBjcmVhdGUgYnVpbGRpbmcgYnV0dG9uIGZvcicsIGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIGEgYnVpbGRpbmcgc2hvdWxkIGJlIHZpc2libGVcclxuICogQHBhcmFtIHtPYmplY3R9IGNvc3RzIFRoZSBjb3N0cyBvZiB0aGUgYnVpbGRpbmdcclxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhIGJ1aWxkaW5nIHNob3VsZCBiZSB2aXNpYmxlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uKGNvc3RzKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvc3RDb25kaXRpb24gPSBPYmplY3QuZW50cmllcyhjb3N0cylcclxuICAgICAgICAgICAgLmV2ZXJ5KChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaFJlc291cmNlID0gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwpID49IE1hdGguZmxvb3IoYW1vdW50IC8gMik7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgQ2hlY2tpbmcgJHttYXRlcmlhbH06IE5lZWQgJHtNYXRoLmZsb29yKGFtb3VudCAvIDIpfSwgSGF2ZSAke2dldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpfSwgUmVzdWx0OiAke2hhc0Vub3VnaFJlc291cmNlfWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc0Vub3VnaFJlc291cmNlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhc3NlZFN0YWdlKCdjbG9uZXMnKSAmJiBjb3N0Q29uZGl0aW9uO1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBCdXlzIGEgYnVpbGRpbmcgaWYgcG9zc2libGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nTmFtZSBUaGUgbmFtZSBvZiB0aGUgYnVpbGRpbmdcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBidXlCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiQnV5aW5nIGJ1aWxkaW5nIFwiICsgYnVpbGRpbmdOYW1lKTtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG5cclxuXHJcbiAgICBpZiAoIWNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkpIHJldHVybjtcclxuXHJcbiAgICAvLyBBY3R1YWxseSBidWlsZCB0aGUgYnVpbGRpbmdcclxuICAgIGJ1aWxkaW5nLmNvdW50Kys7XHJcblxyXG4gICAgLy8gU3VidHJhY3QgdGhlIGNvc3RcclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1idWlsZGluZy5jb3N0W3Jlc291cmNlXSk7XHJcbiAgICB9XHJcbiAgICAvLyBBZGQgdGhlIGVmZmVjdHNcclxuICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmVmZmVjdHMpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2JvdWdodCBidWlsZGluZyBlZmZlY3RzJywgcmVzb3VyY2UsIGFtb3VudCk7XHJcbiAgICAgICAgaW5jcmVhc2VNYXgocmVzb3VyY2UsIGFtb3VudCk7XHJcbiAgICAgICAgLy8gVXBkYXRlIG1heCBjbG9uZXMgYWZ0ZXIgdXBkYXRpbmcgdGhlIGNvdW50XHJcbiAgICAgICAgaWYgKHJlc291cmNlID09PSAnY2xvbmVzJykge1xyXG4gICAgICAgICAgICByZWNhbGNNYXhDbG9uZXMoKTtcclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFVwZGF0ZSBidXR0b24gdGV4dFxyXG4gICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChidWlsZGluZ05hbWUsIGJ1aWxkaW5nLmNvdW50LCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGJ1aWxkaW5nLmVtb2ppKSkpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgY29zdCBvZiB0aGUgYnVpbGRpbmdcclxuICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGJ1aWxkaW5nTmFtZSk7XHJcblxyXG5cclxuICAgIC8vIGFkZFRvQnVpbGRpbmdMaXN0KGJ1aWxkaW5nTmFtZSwgYnVpbGRpbmcuZW1vamkpO1xyXG4gICAgdXBkYXRlQnVpbGRpbmdMaXN0KCk7XHJcblxyXG4gICAgbG9nRXZlbnQoZ2V0QW5hbHl0aWNzKCksICdidWlsZGluZ19wdXJjaGFzZScsIHtcclxuICAgICAgICBidWlsZGluZ19uYW1lOiBidWlsZGluZ05hbWUsXHJcbiAgICAgICAgdXNlcl9pZDogZ2V0UGxheWVyVWlkKCkgLy8gUmVwbGFjZSB3aXRoIHRoZSB1c2VyJ3MgSUQgb3IgYSB1bmlxdWUgaWRlbnRpZmllclxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCdXlzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBidWlsZGluZ3MgdGhhdCBjYW4gYmUgcHVyY2hhc2VkXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ05hbWUgVGhlIG5hbWUgb2YgdGhlIGJ1aWxkaW5nXHJcbiAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgYnVpbGRpbmdzIHRoYXQgd2VyZSBwdXJjaGFzZWRcclxuICovXHJcbmZ1bmN0aW9uIGJ1eU1heEJ1aWxkaW5ncyhidWlsZGluZ05hbWUpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGxldCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG4gICAgLy8gVE9ETyB1cGRhdGUgd2l0aCBjb29sIGZvcm11bGFcclxuICAgIC8vIE1hdGguZmxvb3IoTWF0aC5sb2coKGN1cnJlbmN5ICogKGJ1aWxkaW5nLnJhdGlvIC0gMSkpIC8gKGJ1aWxkaW5nLmJhc2Vjb3N0ICogTWF0aC5wb3coYnVpbGRpbmcucmF0aW8sIGJ1aWxkaW5nLmNvdW50KSkpIC8gTWF0aC5sb2coYnVpbGRpbmcucmF0aW8pKTtcclxuICAgIHdoaWxlIChjYW5CdXlCdWlsZGluZyhidWlsZGluZ05hbWUpKSB7XHJcbiAgICAgICAgYnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKTtcclxuICAgICAgICArK2k7XHJcbiAgICB9XHJcbiAgICBsb2dFdmVudChnZXRBbmFseXRpY3MoKSwgJ2J1aWxkaW5nX3B1cmNoYXNlX21heCcsIHtcclxuICAgICAgICBidWlsZGluZ19uYW1lOiBidWlsZGluZ05hbWUsXHJcbiAgICAgICAgdXNlcl9pZDogZ2V0UGxheWVyVWlkKCksXHJcbiAgICAgICAgY291bnQ6IGlcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGk7XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdCxcclxuICAgIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uLFxyXG4gICAgYnV5TWF4QnVpbGRpbmdzLFxyXG4gICAgYnV5QnVpbGRpbmcsXHJcbiAgICBnZW5lcmF0ZUVmZmVjdFN0cmluZyxcclxuICAgIHVwZGF0ZUJ1aWxkaW5nTGlzdFxyXG59OyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyBnZXRXb3JrZXJzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRGYWN0b3J5UHJvZHVjdGlvbiB9ID0gcmVxdWlyZShcIi4vZmFjdG9yeVwiKTtcclxuY29uc3QgeyBoYXNQcmVzdGlnZSwgZ2V0TGV2ZWxPZlByZXN0aWdlIH0gPSByZXF1aXJlKFwiLi9qc29uL3ByZXN0aWdlXCIpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9nZXRNYXRlcmlhbFwiKTtcclxuY29uc3QgeyBoYXNUb29sIH0gPSByZXF1aXJlKFwiLi90b29sc1wiKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuXHJcbi8vIENsb25lcyB3b3JrIGF0IDEvNCB0aGUgc3BlZWQgYnkgZGVmYXVsdFxyXG52YXIgY2xvbmVNdWx0ID0gMC4yNTtcclxuXHJcbi8vIFBlcmtzXHJcblxyXG5jb25zdCBwZXJrQm9vc3RzID0ge1xyXG4gICAgJ0x1bWJlcmphY2snOiBbJ3dvb2QnLCAnc3RpY2tzJ10sXHJcbiAgICAnTWluZXInOiBbJ3JvY2tzJywgJ29yZSddLFxyXG4gICAgJ0JvdGFuaXN0JzogWyd2aW5lcycsICdoZXJicycsICd3aGVhdCddLFxyXG4gICAgLy8gQWRkIG90aGVyIHBlcmtzIGFzIG5lZWRlZFxyXG59O1xyXG5cclxuXHJcbmZ1bmN0aW9uIGFwcGx5UGVya0Jvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpIHtcclxuICAgIGZvciAoY29uc3QgW3BlcmssIHJlc291cmNlc10gb2YgT2JqZWN0LmVudHJpZXMocGVya0Jvb3N0cykpIHtcclxuICAgICAgICBpZiAocmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlTmFtZSkgJiYgaGFzUGVyayhwZXJrKSkge1xyXG4gICAgICAgICAgICB0b3RhbCAqPSAxLjc1OyAvLyA3NSUgYm9udXMgdG8gc3BlY2lmaWNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIFNraWxsc1xyXG5cclxuY29uc3Qgc2tpbGxCb29zdHMgPSB7XHJcbiAgICAnZ2F0aGVyaW5nJzogWydnYXRoZXJpbmdCb29zdCddLFxyXG4gICAgJ21hc29ucnknOiBbJ21hc29ucnlCb29zdCddLFxyXG4gICAgJ2NhcnBlbnRyeSc6IFsnY2FycGVudHJ5Qm9vc3QnXSxcclxuICAgICd0aGlua2luZyc6IFsndGhpbmtpbmdCb29zdCddLFxyXG4gICAgJ2Zhcm1pbmcnOiBbJ2Zhcm1pbmdCb29zdCddLFxyXG4gICAgJ2Zpc2hpbmcnOiBbJ2Zpc2hpbmdCb29zdCddLFxyXG4gICAgJ2h1bnRpbmcnOiBbJ2h1bnRpbmdCb29zdCddLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gYXBwbHlTa2lsbEJvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpIHtcclxuICAgIGZvciAoY29uc3QgW3NraWxsLCBib29zdHNdIG9mIE9iamVjdC5lbnRyaWVzKHNraWxsQm9vc3RzKSkge1xyXG4gICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAgICAgYm9vc3RzLmZvckVhY2goYm9vc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc1ByZXN0aWdlKGJvb3N0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICo9IDEuMSAqIGdldExldmVsT2ZQcmVzdGlnZShib29zdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZXQgc2tpbGxSYXRpbyA9IDEuMDY7XHJcbiAgICAgICAgICAgIGxldCBtdWx0ID0gMSArIChNYXRoLnBvdyhza2lsbFJhdGlvLCBza2lsbHNbc2tpbGxdLmxldmVsKSAtIDEpIC8gMTAwO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBtdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0b3RhbDtcclxufVxyXG5cclxuLy8gVG9vbHNcclxuXHJcbmNvbnN0IHJlc291cmNlVG9vbE1hcCA9IHtcclxuICAgICd3b29kJzogJ2F4ZScsXHJcbiAgICAnb3JlJzogJ3BpY2theGUnLFxyXG4gICAgJ2Zpc2gnOiAnZmlzaGluZ3JvZCcsXHJcbiAgICAnZ2FtZSc6ICdzcGVhcicsXHJcbiAgICAncG9uZGVyJzogJ3BhcGVyJyxcclxuICAgICdzdGlja3MnOiAnc3RhZmYnLFxyXG4gICAgLy8gQWRkIG1vcmUgbWFwcGluZ3MgYXMgbmVlZGVkXHJcbn07XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvb2xCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKSB7XHJcbiAgICBjb25zdCB0b29sTmFtZSA9IHJlc291cmNlVG9vbE1hcFtyZXNvdXJjZU5hbWVdO1xyXG4gICAgaWYgKHRvb2xOYW1lICYmIGdldE1hdGVyaWFsKHRvb2xOYW1lKSA+IDEwKSB7XHJcbiAgICAgICAgdG90YWwgKj0gMSArIE1hdGgubG9nMTAoZ2V0TWF0ZXJpYWwodG9vbE5hbWUpIC8gMTApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlIHRoZSBhbW91bnQgYSByZXNvdXJjZSBzaG91bGQgaW5jcmVhc2UgYnkgaW4gYSBnaXZlbiB0aW1lIHBlcmlvZFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VOYW1lIFRoZSByZXNvdXJjZSB0byBjYWxjdWxhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhX3RpbWUgSG93IG11Y2ggdGltZSBoYXMgZWxhcHNlZFxyXG4gKiBAcmV0dXJucyBUaGUgYW1vdW50IHRoYXQgcmVzb3VyY2Ugc2hvdWxkIGluY3JlYXNlIGJ5XHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjSW5jcmVhc2UocmVzb3VyY2VOYW1lLCBkZWx0YV90aW1lKSB7XHJcbiAgICB2YXIgdG90YWwgPSAwO1xyXG5cclxuICAgIC8vIGlmIChyZXNvdXJjZU5hbWUgPT09ICdicmVhZCcgJiYgaXNQb25kZXJlZCgnZWF0QnJlYWQnKSkgcmV0dXJuIHBhcnNlRmxvYXQoKC0xICogZGVsdGFfdGltZSAvIDEwMDApLnRvRml4ZWQoMykpO1xyXG5cclxuICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpLmJ1aWxkaW5ncztcclxuICAgIC8vIGNsb25lcyBpbmNyZWFzZSBieSAxIHBlciBzZWNvbmQgYXMgbG9uZyBhcyB0aGVyZSdzIHNwYWNlXHJcbiAgICAvLyBpZiAocmVzb3VyY2UgPT09ICdjbG9uZXMnICYmIHBhc3NlZFN0YWdlKCdjbG9uZScpKSB7XHJcbiAgICAvLyAgICAgdG90YWwgPSAxO1xyXG4gICAgLy8gICAgIHJldHVybiB0b3RhbDtcclxuICAgIC8vIH1cclxuICAgIC8vIGlmICghcmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHtcclxuICAgIC8vICAgICBpZiAoY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZU5hbWUpKSB7XHJcbiAgICAvLyAgICAgICAgIC8vIGNoZWNrIG91ciBmYWN0b3JpZXNcclxuICAgIC8vICAgICAgICAgdG90YWwgPSBnZXRGYWN0b3J5UHJvZHVjdGlvbihyZXNvdXJjZU5hbWUpO1xyXG4gICAgLy8gICAgICAgICBpZiAodG90YWwgPiAwKSByZXR1cm4gdG90YWw7IC8vIERvbid0IGFwcGx5IHNraWxscyB0byBmYWN0b3JpZXNcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSByZXR1cm4gdG90YWw7IC8vIGlmIG5vdCBhIHJlc291cmNlIG9yIGEgY3JhZnRlZCByZXNvdXJjZSwgcmV0dXJuIDBcclxuICAgIC8vIH1cclxuXHJcbiAgICBpZiAocmVzb3VyY2VOYW1lID09PSAnY2xvbmVzJyAmJiBpc1BvbmRlcmVkKCdhdXRvQ2xvbmUnKSkgdG90YWwgPSAxO1xyXG5cclxuICAgIC8vIEdhdGhlcmluZyBwZXJzb25hbGx5XHJcbiAgICBpZiAocmVzb3VyY2VzW3Jlc291cmNlTmFtZV0gJiYgcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgdG90YWwgKz0gMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBqb2JzXHJcbiAgICBsZXQgbGVhZGVyTXVsdCA9IGhhc1BlcmsoJ0xlYWRlcicpID8gY2xvbmVNdWx0ICogMS41IDogY2xvbmVNdWx0O1xyXG4gICAgdG90YWwgKz0gbGVhZGVyTXVsdCAqIGdldFdvcmtlcnMocmVzb3VyY2VOYW1lKSB8fCAwO1xyXG5cclxuXHJcbiAgICAvLyBBcHBseSBwZXJrcyBwcm9kdWN0aW9uIGJvb3N0XHJcbiAgICB0b3RhbCA9IGFwcGx5UGVya0Jvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpO1xyXG4gICAgLy8gQXBwbHkgc2tpbGxzIHRvIGFsbCBjbG9uZXNcclxuICAgIHRvdGFsID0gYXBwbHlTa2lsbEJvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKGdldEJvb3N0KCdjYW1wZmknKSlcclxuICAgIC8vIEFsbCBidWlsZGluZ3MgYWZ0ZXIgbGV2ZWxcclxuICAgIGZvciAoY29uc3QgYnVpbGRpbmcgb2YgT2JqZWN0LmtleXMoYnVpbGRpbmdzKSkge1xyXG4gICAgICAgIGNvbnN0IGJvb3N0RGF0YSA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpLmdldEJvb3N0KGJ1aWxkaW5nLCByZXNvdXJjZU5hbWUpO1xyXG4gICAgICAgIGlmIChib29zdERhdGEpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBpbmNyZWFzZSA9IE1hdGgucG93KGJvb3N0RGF0YSwgYnVpbGRpbmdzW2J1aWxkaW5nXS5jb3VudCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3BvbmRlcklkLCBwb25kZXJdIG9mIE9iamVjdC5lbnRyaWVzKHBvbmRlcnMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNQb25kZXJlZChwb25kZXJJZCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvbmRlcklkLnN0YXJ0c1dpdGgoJ2VmZmVjdGl2ZUJ1aWxkaW5ncycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlYXNlICo9IDEuMDM7IC8vIEFwcGx5IHRoZSBib251cyBmb3IgdGhpcyBzcGVjaWZpYyBwb25kZXJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvdGFsICo9IGluY3JlYXNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBcHBseSBwb25kZXIgYm9udXNlc1xyXG4gICAgZnVuY3Rpb24gYXBwbHlQb25kZXJCb251c2VzKHRvdGFsKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbcG9uZGVySWQsIHBvbmRlcl0gb2YgT2JqZWN0LmVudHJpZXMocG9uZGVycykpIHtcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQocG9uZGVySWQpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBvbmRlcklkLnN0YXJ0c1dpdGgoJ2Zhc3RlclJlc291cmNlR2FpbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0Zhc3RlciBSZXNvdXJjZScsIHBvbmRlcklkKTtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbCAqPSAxLjA1OyAvLyBBcHBseSB0aGUgYm9udXMgZm9yIHRoaXMgc3BlY2lmaWMgcG9uZGVyXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBvbmRlcklkLnN0YXJ0c1dpdGgoJ2Zhc3RlclBvbmRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc291cmNlTmFtZSA9PT0gJ3BvbmRlcicpIHRvdGFsICo9IDEuMDU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvdGFsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1BvbmRlcmVkKCdlYXRCcmVhZCcpICYmIGdldE1hdGVyaWFsKCdicmVhZCcpID4gMCkgdG90YWwgKj0gMS4xO1xyXG5cclxuICAgIC8vIFVzYWdlOiBBcHBseSBwb25kZXJzIHRvIHRoZSAndG90YWwnIHZhbHVlXHJcbiAgICB0b3RhbCA9IGFwcGx5UG9uZGVyQm9udXNlcyh0b3RhbCk7XHJcbiAgICAvLyBpZiAoaXNQb25kZXJlZCgnZmFzdGVyUmVzb3VyY2VHYWluJykpIHRvdGFsICo9IDEuMDU7XHJcblxyXG4gICAgaWYgKGhhc1ByZXN0aWdlKCdjbG9uZUJvb3N0JykpIHRvdGFsICo9IDEuMDUgKiBnZXRMZXZlbE9mUHJlc3RpZ2UoJ2Nsb25lQm9vc3QnKTtcclxuXHJcbiAgICAvLyBDaGVjayB0b29sc1xyXG4gICAgdG90YWwgPSBhcHBseVRvb2xCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKTtcclxuXHJcbiAgICAvLyBOZWVkIGF0IGxlYXN0IDEwIGh1c2tzIHRvIGJvb3N0IG1hdGhlbWF0aWNhbGx5IChsbigxKSA9IDApXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2h1c2tzJykgPiAxMCkgdG90YWwgKj0gMSArIE1hdGgubG9nKGdldE1hdGVyaWFsKCdodXNrcycpIC8gMTApO1xyXG5cclxuICAgIC8vIERpbWluaXNoaW5nIHJldHVybnNcclxuICAgIHRvdGFsID0gTWF0aC5zcXJ0KHRvdGFsKTtcclxuXHJcbiAgICAvLyBDb252ZXJ0IGZyb20gc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KCh0b3RhbCAqIGRlbHRhX3RpbWUgLyAxMDAwKS50b0ZpeGVkKDMpKTtcclxufVxyXG5leHBvcnRzLmNhbGNJbmNyZWFzZSA9IGNhbGNJbmNyZWFzZTsiLCJjb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nTmFtZVxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gY2FuQnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGVub3VnaCByZXNvdXJjZXNcclxuICAgIGxldCBjYW5CdXkgPSB0cnVlO1xyXG4gICAgY29uc3QgYnVpbGRpbmdzID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpLmJ1aWxkaW5ncztcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmNvc3RbcmVzb3VyY2VdID4gZ2V0TWF0ZXJpYWwocmVzb3VyY2UsIHJlc291cmNlcykpIHtcclxuICAgICAgICAgICAgY2FuQnV5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDYW4ndCBidXkgY2xvbmluZyBidWlsZGluZ3MgYmVmb3JlIGNsb25lcyB1bmxvY2tlZFxyXG4gICAgaWYgKGJ1aWxkaW5nLmVmZmVjdHMgJiYgYnVpbGRpbmcuZWZmZWN0c1snY2xvbmVzJ10gJiYgIXBhc3NlZFN0YWdlKCdjbG9uZScpKSBjYW5CdXkgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHdlIGJ1eSAnLGJ1aWxkaW5nTmFtZSxjYW5CdXkpO1xyXG4gICAgcmV0dXJuIGNhbkJ1eTtcclxufVxyXG5leHBvcnRzLmNhbkJ1eUJ1aWxkaW5nID0gY2FuQnV5QnVpbGRpbmc7IiwiY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcmVzb3VyY2UgY2FuIGJlIGNyYWZ0ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZUtleSBUaGUga2V5IG9mIHRoZSByZXNvdXJjZSB0byBjaGVjay5cclxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgcmVzb3VyY2UgY2FuIGJlIGNyYWZ0ZWQsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmZ1bmN0aW9uIGNhbkNyYWZ0KHJlc291cmNlS2V5KSB7XHJcbiAgICBsZXQgcmVxdWlyZW1lbnRzID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY29zdDtcclxuXHJcbiAgICAvLyBDaGVjayBpZiBhbGwgcmVxdWlyZW1lbnRzIGFyZSBtZXRcclxuICAgIC8vIHRyeSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZUtleSwgcmVxdWlyZW1lbnRzKTtcclxuICAgIGZvciAoY29uc3QgW21hdCwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXF1aXJlbWVudHMpKVxyXG4gICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXQpIDwgdmFsKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyB9IGNhdGNoIChlcnIpIHtcclxuICAgIC8vIGNvbnNvbGUud2FybignRXJyb3IgaW4gY2FsY3VsYXRpbmcgcmVxdWlyZW1lbnRzOiAnLCByZXNvdXJjZUtleSwgcmVxdWlyZW1lbnRzLCBlcnIpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmV4cG9ydHMuY2FuQ3JhZnQgPSBjYW5DcmFmdDsiLCIvKipcclxuICogQ2FwaXRhbGl6ZXMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIHN0cmluZ1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZ0V4YW1wbGVcclxuICogQHJldHVybnMgU3RyaW5nRXhhbXBsZVxyXG4gKi9cclxuZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0KHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcclxufVxyXG5leHBvcnRzLmNhcGl0YWxpemVGaXJzdCA9IGNhcGl0YWxpemVGaXJzdDsiLCIvLyBFeGFtcGxlIHVzYWdlXHJcbi8vIG5hdmlnYXRlVG8oJ25leHQtcGFnZS5odG1sJyk7XHJcbi8vIE1lc3NhZ2UgXHJcbmNvbnN0IG1lc3NhZ2VFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKTtcclxuZXhwb3J0cy5tZXNzYWdlRWxlbWVudCA9IG1lc3NhZ2VFbGVtZW50O1xyXG5mdW5jdGlvbiBjaGFuZ2VNZXNzYWdlKG5ld01lc3NhZ2UsIGNsb25lV29yZHMsIHRvb2x0aXAgPSAnWW91IGZlZWwgcGVja2lzaCBmb3Igc29tZSBzZWFmb29kJykge1xyXG4gICAgLy8gY29uc29sZS5sb2cobmV3TWVzc2FnZSwgY2xvbmVXb3JkcywgdG9vbHRpcCk7XHJcbiAgICBpZiAodG9vbHRpcCA9PT0gbnVsbCkgdG9vbHRpcCA9ICdZb3UgZmVlbCBwZWNraXNoIGZvciBzb21lIHNlYWZvb2QnO1xyXG4gICAgY29uc3QgbW9kaWZpZWRNZXNzYWdlID0gbmV3TWVzc2FnZS5yZXBsYWNlKGNsb25lV29yZHMsIGA8c3BhbiBjbGFzcz0ndG9vbHRpcCcgaWQ9XCJhbG9uZVwiIHRvb2x0aXBEZXNjPVwiJHt0b29sdGlwfVwiPiR7Y2xvbmVXb3Jkc308L3NwYW4+YCk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSBtb2RpZmllZE1lc3NhZ2U7XHJcbn1cclxuZXhwb3J0cy5jaGFuZ2VNZXNzYWdlID0gY2hhbmdlTWVzc2FnZTsiLCJjb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9nZXRNYXRlcmlhbFwiKTtcclxuY29uc3QgeyBpbmNyZWFzZU1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9yZXNvdXJjZXNcIik7XHJcblxyXG5cclxuY29uc3QgbG9vdFRhYmxlID0ge1xyXG4gICAgaHVza3M6IHsgcHJvYmFiaWxpdHk6IDAuMDUsIHF1YW50aXR5OiAxIH0sXHJcblxyXG4gICAgbmFpbHM6IHsgcHJvYmFiaWxpdHk6IDAuMTAsIHF1YW50aXR5OiA1MCB9LFxyXG4gICAgc2xhYnM6IHsgcHJvYmFiaWxpdHk6IDAuMjAsIHF1YW50aXR5OiA1MCB9LFxyXG4gICAgYmVhbXM6IHsgcHJvYmFiaWxpdHk6IDAuMTAsIHF1YW50aXR5OiA2MCB9LFxyXG5cclxuICAgIGF4ZTogeyBwcm9iYWJpbGl0eTogMC4xNSwgcXVhbnRpdHk6IDUgfSxcclxuICAgIHNwZWFyOiB7IHByb2JhYmlsaXR5OiAxLCBxdWFudGl0eTogNSB9LFxyXG5cclxuICAgIGdvbGQ6IHsgcHJvYmFiaWxpdHk6IC4xLCBxdWFudGl0eTogMTAgfSxcclxuICAgIGlyb246IHsgcHJvYmFiaWxpdHk6IDAuMTUsIHF1YW50aXR5OiA1MCB9LFxyXG4gICAgc2lsdmVyOiB7IHByb2JhYmlsaXR5OiAwLjA1LCBxdWFudGl0eTogMjAgfSxcclxuICAgIHN0ZWVsOiB7IHByb2JhYmlsaXR5OiAwLjEwLCBxdWFudGl0eTogMzAgfSxcclxuXHJcbiAgICBicmlja3M6IHsgcHJvYmFiaWxpdHk6IDAuMTUsIHF1YW50aXR5OiA4MCB9LFxyXG5cclxufTtcclxuXHJcbmxldCBjdXJyTG9vdCA9IHt9O1xyXG5cclxuZnVuY3Rpb24gZ2V0Q3Vyckxvb3QoKSB7XHJcbiAgICByZXR1cm4gY3Vyckxvb3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlTG9vdCgpIHtcclxuICAgIGxldCBsb290ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHJlc291cmNlIGluIGxvb3RUYWJsZSkge1xyXG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgbG9vdFRhYmxlW3Jlc291cmNlXS5wcm9iYWJpbGl0eSkge1xyXG4gICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9IE1hdGguZmxvb3IobG9vdFRhYmxlW3Jlc291cmNlXS5xdWFudGl0eSAqIChNYXRoLnJhbmRvbSgpICogLjQgKyAuOCkpOyAvLyBHZXQgbG9vdCA4MCUgLSAxMjAlXHJcbiAgICAgICAgICAgIGlmIChxdWFudGl0eSA+IDApIGxvb3RbcmVzb3VyY2VdID0gcXVhbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY3Vyckxvb3QgPSBsb290O1xyXG4gICAgY29uc29sZS5sb2coY3Vyckxvb3QpO1xyXG4gICAgcmV0dXJuIGxvb3Q7XHJcbn1cclxuXHJcblxyXG5cclxuLy8gc2NyaXB0LmpzXHJcbmNvbnN0IGFyZW5hID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FyZW5hJyk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUJhbGxzKHRlYW0sIGNvdW50KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICBjb25zdCBiYWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgYmFsbC5jbGFzc05hbWUgPSBgYmFsbCAke3RlYW19YDtcclxuICAgICAgICBiYWxsLnN0eWxlLmxlZnQgPSBgJHt0ZWFtID09PSAncGxheWVyJyA/IDEwIDogOTB9JWA7IC8vIFN0YXJ0aW5nIHBvc2l0aW9uc1xyXG4gICAgICAgIGJhbGwuc3R5bGUudG9wID0gYCR7MTAgKyBpICogMzB9cHhgO1xyXG4gICAgICAgIGFyZW5hLmFwcGVuZENoaWxkKGJhbGwpO1xyXG4gICAgICAgIGlmICh0ZWFtID09PSAncGxheWVyJykgcGxheWVyVHJvb3BzLnB1c2goYmFsbCk7XHJcbiAgICAgICAgZWxzZSBlbmVteVRyb29wcy5wdXNoKGJhbGwpO1xyXG4gICAgfVxyXG59XHJcbmxldCBwbGF5ZXJUcm9vcHMgPSBbXTtcclxubGV0IGVuZW15VHJvb3BzID0gW107XHJcbmxldCBhbmltYXRpb25zID0gW107XHJcbmNvbnN0IGFuaW1UaW1lID0gMzAwMDtcclxuZnVuY3Rpb24gc3RhcnRBbmltYXRpb24oKSB7XHJcblxyXG4gICAgY29uc3QgYmFsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmFsbCcpO1xyXG4gICAgYmFsbHMuZm9yRWFjaChiYWxsID0+IHtcclxuICAgICAgICBjb25zdCBpc3BsYXllclRlYW0gPSBiYWxsLmNsYXNzTGlzdC5jb250YWlucygncGxheWVyJyk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0WCA9IGlzcGxheWVyVGVhbSA/IGFyZW5hLm9mZnNldFdpZHRoIDogLWFyZW5hLm9mZnNldFdpZHRoOyAvLyBUYXJnZXQgcG9zaXRpb25zXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYmFsbCwgdGFyZ2V0WCk7XHJcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGJhbGwuYW5pbWF0ZShbXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgke3RhcmdldFh9cHgpYCB9XHJcbiAgICAgICAgXSwge1xyXG4gICAgICAgICAgICBkdXJhdGlvbjogYW5pbVRpbWUsXHJcbiAgICAgICAgICAgIGZpbGw6ICdub25lJ1xyXG4gICAgICAgIH0pLmZpbmlzaGVkLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBiYWxsLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH0pO1xyXG4gICAgdXBkYXRlKCk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyQmFsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxheWVyJykubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGVuZW15QmFsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZW5lbXknKS5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmIChwbGF5ZXJCYWxscyA9PT0gMCB8fCBlbmVteUJhbGxzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgYmFsbCBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmFsbCcpKSB7XHJcbiAgICAgICAgICAgIGJhbGwucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5lZWQgdG8gYmF0dGxlIGFnYWluXHJcbiAgICAgICAgY3JlYXRlQmFsbHMoJ3BsYXllcicsIHBsYXllckJhbGxzKTtcclxuICAgICAgICBjcmVhdGVCYWxscygnZW5lbXknLCBlbmVteUJhbGxzKTtcclxuICAgICAgICBzdGFydEFuaW1hdGlvbigpO1xyXG5cclxuICAgIH0sIGFuaW1UaW1lIC0gMTAwKTsgLy8gTmVlZCB0byBleGVjdXRlIGJlZm9yZSB0aGUgYmFsbHMgYXJlIGRlbGV0ZWRcclxufVxyXG5cclxubGV0IGhhc1Jld2FyZGVkID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGNoZWNrRm9yV2luKCkge1xyXG4gICAgaWYgKGhhc1Jld2FyZGVkKSByZXR1cm47XHJcbiAgICBjb25zdCBwbGF5ZXJCYWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGF5ZXInKS5sZW5ndGg7XHJcbiAgICBjb25zdCBlbmVteUJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVuZW15JykubGVuZ3RoO1xyXG5cclxuICAgIGlmIChwbGF5ZXJCYWxscyA9PT0gMCAmJiBlbmVteUJhbGxzID4gMCkgYmF0dGxlUmVzdWx0ID0gJ2VuZW15JztcclxuICAgIGVsc2UgaWYgKGVuZW15QmFsbHMgPT09IDAgJiYgcGxheWVyQmFsbHMgPiAwKSBiYXR0bGVSZXN1bHQgPSAncGxheWVyJztcclxuXHJcbiAgICBpZiAoYmF0dGxlUmVzdWx0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgY29tYmF0UmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbWJhdFJlc3VsdCcpO1xyXG4gICAgICAgIGlmIChiYXR0bGVSZXN1bHQgPT09IFwicGxheWVyXCIpIHtcclxuICAgICAgICAgICAgY29tYmF0UmVzdWx0LnRleHRDb250ZW50ID0gXCJZb3Ugd29uIVwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYmF0dGxlUmVzdWx0ID09PSBcImVuZW15XCIpIHtcclxuICAgICAgICAgICAgY29tYmF0UmVzdWx0LnRleHRDb250ZW50ID0gXCJUaGUgRW5lbXkgd29uIVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbWJhdFJlc3VsdC50ZXh0Q29udGVudCA9IFwiSXQncyBhIGRyYXchXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBmaWdodEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0sIGFuaW1UaW1lIC8gMik7XHJcblxyXG4gICAgICAgIC8vIFJld2FyZCB0aGUgcGxheWVyIHRoZWlyIGxvb3QgaWYgdGhleSB3b25cclxuICAgICAgICBpZiAoYmF0dGxlUmVzdWx0ID09PSBcInBsYXllclwiKSB7XHJcbiAgICAgICAgICAgIGhhc1Jld2FyZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IHN0YW5jZU11bHQgPSAxO1xyXG4gICAgICAgICAgICBpZiAoZ2V0U3RhbmNlKCkgPT09ICdhZ2dyZXNzaXZlJykgc3RhbmNlTXVsdCA9IC43NTtcclxuICAgICAgICAgICAgaWYgKGdldFN0YW5jZSgpID09PSAnY2FyZWZ1bCcpIHN0YW5jZU11bHQgPSAxLjI1O1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBbbG9vdE5hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhjdXJyTG9vdCkpIHtcclxuICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwobG9vdE5hbWUsIHZhbHVlICogc3RhbmNlTXVsdCk7XHJcbiAgICAgICAgICAgICAgICBjb21iYXRSZXN1bHQuaW5uZXJIVE1MICs9IGA8YnI+KyR7dmFsdWUgKiBzdGFuY2VNdWx0fSAke2xvb3ROYW1lfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ2VuZXJhdGVMb290KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGN1bGF0ZUVuZW15TWlnaHQoKTtcclxuICAgICAgICByZWZyZXNoVmFsdWVzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkZXRlY3RDb2xsaXNpb25zKHBsYXllciwgZW5lbXkpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxheWVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbmVteS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoaXNDb2xsaWRpbmcocGxheWVyVHJvb3BzW2ldLCBlbmVteVRyb29wc1tqXSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY29sbGlzaW9uXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVDb2xsaXNpb24ocGxheWVyVHJvb3BzW2ldLCBlbmVteVRyb29wc1tqXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQ29sbGlkaW5nKGJhbGwxLCBiYWxsMikge1xyXG4gICAgY29uc3QgcmVjdDEgPSBiYWxsMS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IHJlY3QyID0gYmFsbDIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgcmV0dXJuICEoXHJcbiAgICAgICAgcmVjdDEucmlnaHQgPCByZWN0Mi5sZWZ0IHx8XHJcbiAgICAgICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0IHx8XHJcbiAgICAgICAgcmVjdDEuYm90dG9tIDwgcmVjdDIudG9wIHx8XHJcbiAgICAgICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tXHJcbiAgICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDb2xsaXNpb24ocGxheWVyQmFsbCwgZW5lbXlCYWxsKSB7XHJcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDEgLyAoMSArIE1hdGgucG93KDEwLCAoZ2V0Q3VyckVuZW15TWlnaHQoKSAtIGNhbGN1bGF0ZVBsYXllck1pZ2h0KCkpIC8gY2hhbmNlU3ByZWFkKSkpIGVuZW15QmFsbC5yZW1vdmUoKTtcclxuICAgIGVsc2UgcGxheWVyQmFsbC5yZW1vdmUoKTtcclxuXHJcbn1cclxuXHJcbi8vIENhbGwgdGhpcyBmdW5jdGlvbiBjb250aW51b3VzbHksIGUuZy4sIHVzaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG5mdW5jdGlvbiB1cGRhdGUoKSB7XHJcbiAgICBkZXRlY3RDb2xsaXNpb25zKHBsYXllclRyb29wcywgZW5lbXlUcm9vcHMpO1xyXG4gICAgaWYgKCFjaGVja0ZvcldpbigpICYmICFoYXNSZXdhcmRlZCkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNSb3VuZGluZygpIHtcclxuICAgIGNvbnN0IHBsYXllck1pZ2h0ID0gY2FsY3VsYXRlUGxheWVyTWlnaHQoKTtcclxuICAgIGNvbnN0IGVuZW15TWlnaHQgPSBnZXRDdXJyRW5lbXlNaWdodCgpO1xyXG5cclxuICAgIGNvbnN0IGJhbGxDb3VudCA9IDEyO1xyXG4gICAgY29uc3QgcGxheWVyUm91bmRpbmcgPSBNYXRoLmNlaWwocGxheWVyTWlnaHQgLyBiYWxsQ291bnQpO1xyXG4gICAgY29uc3QgZW5lbXlSb3VuZGluZyA9IE1hdGguY2VpbChlbmVteU1pZ2h0IC8gYmFsbENvdW50KTtcclxuXHJcbiAgICBjb25zdCBoaWdoZXJSb3VuZGluZyA9IE1hdGgubWF4KHBsYXllclJvdW5kaW5nLCBlbmVteVJvdW5kaW5nKTtcclxuICAgIGNvbnN0IHBsYXllckNvdW50ID0gTWF0aC5mbG9vcihwbGF5ZXJNaWdodCAvIGhpZ2hlclJvdW5kaW5nKTtcclxuICAgIGNvbnN0IGVuZW15Q291bnQgPSBNYXRoLmZsb29yKGVuZW15TWlnaHQgLyBoaWdoZXJSb3VuZGluZyk7XHJcblxyXG4gICAgY29uc3QgYXBwcm94RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHByb3hpbWF0ZUJhbGwnKTtcclxuICAgIGFwcHJveEVsZW1lbnQudGV4dENvbnRlbnQgPSBoaWdoZXJSb3VuZGluZy50b1N0cmluZygpO1xyXG5cclxuICAgIHJldHVybiBbcGxheWVyQ291bnQsIGVuZW15Q291bnRdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXVzZUFuaW1hdGlvbigpIHtcclxuICAgIC8vIGNvbnN0IGJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKTtcclxuICAgIGFuaW1hdGlvbnMuZm9yRWFjaChiYWxsID0+IHtcclxuICAgICAgICBiYWxsLnBhdXNlKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuY29uc3QgZmlnaHRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24jc3RhcnRDb21iYXQnKTtcclxuXHJcbmxldCBiYXR0bGVSZXN1bHQgPSBudWxsOyAvLyBWYXJpYWJsZSB0byBzdG9yZSBiYXR0bGUgcmVzdWx0XHJcblxyXG5jb25zdCBjaGFuY2VTcHJlYWQgPSAyMDA7IC8vIExhcmdlciBtZWFucyBzbWFsbGVyIGFybWllcyBoYXZlIGEgaGlnaGVyIGNoYW5jZSB0byBiZWF0IGxhcmdlciBhcm1pZXNcclxuZnVuY3Rpb24gc2ltdWxhdGVCYXR0bGUoKSB7XHJcbiAgICAvLyBQZXJmb3JtIHRoZSBiYXR0bGUgc2ltdWxhdGlvbiBsb2dpYyBoZXJlXHJcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVCYXR0bGVSZXN1bHQoKSB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyTWlnaHQgPSBjYWxjdWxhdGVQbGF5ZXJNaWdodCgpO1xyXG4gICAgICAgIGNvbnN0IGVuZW15TWlnaHQgPSBnZXRDdXJyRW5lbXlNaWdodCgpO1xyXG4gICAgICAgIGNvbnN0IHBsYXllckNoYW5jZSA9IDEgLyAoMSArIE1hdGgucG93KDEwLCAoZW5lbXlNaWdodCAtIHBsYXllck1pZ2h0KSAvIGNoYW5jZVNwcmVhZCkpO1xyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIHRvIHNpbXVsYXRlIHRoZSBiYXR0bGUgb3V0Y29tZVxyXG4gICAgICAgIGNvbnN0IHJhbmRvbU91dGNvbWUgPSBNYXRoLnJhbmRvbSgpO1xyXG5cclxuICAgICAgICBpZiAocmFuZG9tT3V0Y29tZSA8IHBsYXllckNoYW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ3BsYXllcic7IC8vIFBsYXllciB3aW5zXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdlbmVteSc7IC8vIEVuZW15IHdpbnNcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSByZXN1bHQgYW5kIHN0b3JlIGl0IGluIHRoZSBiYXR0bGVSZXN1bHQgdmFyaWFibGVcclxuICAgIGJhdHRsZVJlc3VsdCA9IGNhbGN1bGF0ZUJhdHRsZVJlc3VsdCgpO1xyXG4gICAgY2hlY2tGb3JXaW4oKTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogTWFpbiBjb21iYXQgZnVuY3Rpb24sIHN0YXJ0IGV2ZXJ5dGhpbmdcclxuICovXHJcbmZ1bmN0aW9uIGNvbWJhdCgpIHtcclxuICAgIGJhdHRsZVJlc3VsdCA9IG51bGw7XHJcbiAgICAvLyBSZW1vdmUgYWxsIGJhbGxzXHJcbiAgICBmb3IgKGNvbnN0IGJhbGwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKSkge1xyXG4gICAgICAgIGJhbGwucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgICAvLyBSb3VuZCBkb3duIHRoZSBiYWxscyB0byAxMlxyXG4gICAgbGV0IFtwbGF5ZXJDb3VudCwgZW5lbXlDb3VudF0gPSBjYWxjUm91bmRpbmcoKTtcclxuXHJcbiAgICBjcmVhdGVCYWxscygncGxheWVyJywgcGxheWVyQ291bnQpO1xyXG4gICAgY3JlYXRlQmFsbHMoJ2VuZW15JywgZW5lbXlDb3VudCk7XHJcblxyXG5cclxuICAgIGNvbnN0IGNvbWJhdFJlc3VsdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21iYXRSZXN1bHQnKTtcclxuICAgIGNvbWJhdFJlc3VsdC50ZXh0Q29udGVudCA9ICcnO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGZpZ2h0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGhhc1Jld2FyZGVkID0gZmFsc2U7XHJcblxyXG4gICAgc3RhcnRBbmltYXRpb24oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlUGxheWVyTWlnaHQoKSB7XHJcbiAgICBsZXQgbWlnaHQgPSBnZXRNYXRlcmlhbCgndmlvbGVuY2UnKSArIGdldE1hdGVyaWFsKCdzcGVhcicpICsgZ2V0TWF0ZXJpYWwoJ21lZGljaW5lJyk7XHJcbiAgICBpZiAoZ2V0U3RhbmNlKCkgPT09ICdhZ2dyZXNzaXZlJykgbWlnaHQgKj0gMS4yO1xyXG4gICAgZWxzZSBpZiAoZ2V0U3RhbmNlKCkgPT09ICdjYXJlZnVsJykgbWlnaHQgKj0gMC44O1xyXG4gICAgcmV0dXJuIG1pZ2h0O1xyXG59XHJcblxyXG5cclxubGV0IGVuZW15TWlnaHQgPSA0MDA7IC8vIEluaXRpYWxpemUgZW5lbXkgbWlnaHQgYXMgYSBnbG9iYWwgdmFyaWFibGVcclxuXHJcbmZ1bmN0aW9uIGdldE5leHRCYXR0bGVNaWdodChwbGF5ZXJXb25QcmV2aW91c0JhdHRsZSkge1xyXG5cclxuICAgIGlmIChwbGF5ZXJXb25QcmV2aW91c0JhdHRsZSA9PT0gbnVsbCkgcmV0dXJuIGVuZW15TWlnaHQ7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgcGxheWVyIHdvbiB0aGUgcHJldmlvdXMgYmF0dGxlXHJcbiAgICBpZiAocGxheWVyV29uUHJldmlvdXNCYXR0bGUpIHtcclxuICAgICAgICAvLyBJbmNyZWFzZSB0aGUgZGlmZmljdWx0eSBmb3IgdGhlIG5leHQgYmF0dGxlXHJcbiAgICAgICAgZW5lbXlNaWdodCAqPSAxLjM7IC8vIFlvdSBjYW4gYWRqdXN0IHRoZSBpbmNyZW1lbnQgYXMgbmVlZGVkXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIERlY3JlYXNlIHRoZSBkaWZmaWN1bHR5IGZvciB0aGUgbmV4dCBiYXR0bGVcclxuICAgICAgICBlbmVteU1pZ2h0IC89IDEuMTsgLy8gWW91IGNhbiBhZGp1c3QgdGhlIGRlY3JlbWVudCBhcyBuZWVkZWRcclxuICAgIH1cclxuXHJcbiAgICAvLyBFbnN1cmUgdGhlIGJhc2VNaWdodCBkb2Vzbid0IGdvIGJlbG93IGEgbWluaW11bSB2YWx1ZVxyXG4gICAgaWYgKGVuZW15TWlnaHQgPCAyMDApIHtcclxuICAgICAgICBlbmVteU1pZ2h0ID0gMjAwOyAvLyBTZXQgYSBtaW5pbXVtIG1pZ2h0IHZhbHVlXHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRqdXN0IHRoZSBkaWZmaWN1bHR5IGJhc2VkIG9uIHRoZSBwbGF5ZXIncyBsZXZlbFxyXG4gICAgLy8gRm9yIGV4YW1wbGUsIHlvdSBjYW4gbWFrZSBiYXR0bGVzIHByb2dyZXNzaXZlbHkgaGFyZGVyIGFzIHRoZSBwbGF5ZXIncyBsZXZlbCBpbmNyZWFzZXNcclxuICAgIC8vIGJhc2VNaWdodCArPSBwbGF5ZXJMZXZlbCAqIDEwOyAvLyBBZGp1c3QgdGhpcyBmb3JtdWxhIGFzIG5lZWRlZFxyXG5cclxuICAgIHJldHVybiBlbmVteU1pZ2h0O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gc2V0RW5lbXlNaWdodChtaWdodCkge1xyXG4gICAgZW5lbXlNaWdodCA9IG1pZ2h0OyAvLyBVcGRhdGUgdGhlIGdsb2JhbCBlbmVteU1pZ2h0IHZhcmlhYmxlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEN1cnJFbmVteU1pZ2h0KCkge1xyXG4gICAgcmV0dXJuIGVuZW15TWlnaHQ7IC8vIFJldHVybiB0aGUgZ2xvYmFsIGVuZW15TWlnaHQgdmFyaWFibGVcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlRW5lbXlNaWdodCgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdiYXR0bGUgcmVzdWx0IHdhcycsIGJhdHRsZVJlc3VsdCk7XHJcbiAgICBjb25zdCBtaWdodCA9IGdldE5leHRCYXR0bGVNaWdodChiYXR0bGVSZXN1bHQgPT09IG51bGwgfHwgYmF0dGxlUmVzdWx0ID09PSAncGxheWVyJyk7XHJcbiAgICByZXR1cm4gbWlnaHQ7XHJcbn1cclxuXHJcbmNvbnN0IHBsYXllck1pZ2h0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXJNaWdodCcpO1xyXG5jb25zdCBlbmVteU1pZ2h0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmVteU1pZ2h0Jyk7XHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVdpbkNoYW5jZSgpIHtcclxuXHJcbiAgICBjb25zdCBwbGF5ZXJNaWdodCA9IGNhbGN1bGF0ZVBsYXllck1pZ2h0KCk7XHJcbiAgICBjb25zdCBlbmVteU1pZ2h0ID0gZ2V0Q3VyckVuZW15TWlnaHQoKTtcclxuXHJcbiAgICAvLyBjb25zdCBbcGxheWVyQ291bnQsIGVuZW15Q291bnRdID0gY2FsY1JvdW5kaW5nKCk7XHJcblxyXG4gICAgLy8gVGhpcyBudW1iZXIgaXMgYSBkaXJ0eSBsaWUsIGJ1dCB0aGUgdHJ1dGggaXMgdG9vIGhhcmRcclxuICAgIGNvbnN0IGNoYW5jZSA9IDEgLyAoMSArIE1hdGgucG93KDEwLCAoZW5lbXlNaWdodCAtIHBsYXllck1pZ2h0KSAvIGNoYW5jZVNwcmVhZCkpO1xyXG5cclxuXHJcbiAgICBwbGF5ZXJNaWdodEVsZW1lbnQudGV4dENvbnRlbnQgPSBwbGF5ZXJNaWdodC50b0ZpeGVkKDApO1xyXG4gICAgcGxheWVyTWlnaHRFbGVtZW50LnNldEF0dHJpYnV0ZSgndG9vbHRpcGRlc2MnLCBgJHtnZXRNYXRlcmlhbCgndmlvbGVuY2UnKS50b0ZpeGVkKDApfSB2aW9sZW5jZSArICR7Z2V0TWF0ZXJpYWwoJ3NwZWFyJykudG9GaXhlZCgwKX0gc3BlYXJzICsgJHtnZXRNYXRlcmlhbCgnbWVkaWNpbmUnKS50b0ZpeGVkKDApfSBtZWRpY2luZWApO1xyXG5cclxuICAgIGVuZW15TWlnaHRFbGVtZW50LnRleHRDb250ZW50ID0gZW5lbXlNaWdodC50b0ZpeGVkKDApO1xyXG5cclxuICAgIGNvbnN0IGNoYW5jZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmNlVG9XaW4nKTtcclxuICAgIGNoYW5jZUVsZW1lbnQudGV4dENvbnRlbnQgPSAoY2hhbmNlICogMTAwKS50b0ZpeGVkKDEpICsgJyUnO1xyXG5cclxuICAgIGNoYW5jZUVsZW1lbnQuc3R5bGUuY29sb3IgPSAoYGhzbCgkeyhjaGFuY2UgKiAxMjApLnRvU3RyaW5nKDEwKX0sMTAwJSw1MCUpYCk7XHJcblxyXG4gICAgcmV0dXJuIGNoYW5jZTtcclxufVxyXG5cclxubGV0IHN0YW5jZSA9ICdiYWxhbmNlZCc7XHJcblxyXG5mdW5jdGlvbiBnZXRTdGFuY2UoKSB7XHJcbiAgICByZXR1cm4gc3RhbmNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRTdGFuY2UobmV3U3RhbmNlKSB7XHJcbiAgICBzdGFuY2UgPSBuZXdTdGFuY2U7XHJcbn1cclxuXHJcbmNvbnN0IHN0YW5jZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24uc3RhbmNlJyk7XHJcbmZ1bmN0aW9uIHN3aXRjaFN0YW5jZShuZXdTdGFuY2UpIHtcclxuICAgIGNvbnNvbGUubG9nKCdzd2l0Y2ggc3RhbmNlIHRvICcsIG5ld1N0YW5jZSk7XHJcbiAgICBzdGFuY2VCdXR0b25zLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH0pO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7bmV3U3RhbmNlfVN0YW5jZWApLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIHNldFN0YW5jZShuZXdTdGFuY2UpO1xyXG4gICAgcmVmcmVzaFZhbHVlcygpO1xyXG59XHJcbi8vIEB0cy1pZ25vcmVcclxud2luZG93LnN3aXRjaFN0YW5jZSA9IHN3aXRjaFN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBSZWZyZXNoIGFsbCB0aGUgdmFsdWVzIG9mIHRoZSBjb21iYXQgVUksIGluY2x1ZGluZyBjaGFuY2UgdG8gd2luLCBsb290cywgYW5kIGVuZW15IG1pZ2h0XHJcbiAqL1xyXG5mdW5jdGlvbiByZWZyZXNoVmFsdWVzKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coZ2V0Q3Vyckxvb3QoKSk7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoZ2V0Q3Vyckxvb3QoKSkubGVuZ3RoIDwgMSkgZ2VuZXJhdGVMb290KCk7XHJcblxyXG4gICAgY29uc3QgbG9vdExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9vdExpc3QnKTtcclxuICAgIGxvb3RMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgZm9yIChjb25zdCBbcmVzb3VyY2UsIHF1YW50aXR5XSBvZiBPYmplY3QuZW50cmllcyhnZXRDdXJyTG9vdCgpKSkge1xyXG4gICAgICAgIGxvb3RMaXN0LmlubmVySFRNTCArPSBgPHNwYW4+JHtyZXNvdXJjZX0gKCR7cXVhbnRpdHl9KTwvc3Bhbj4gPGJyPmA7XHJcbiAgICB9XHJcblxyXG4gICAgZW5lbXlNaWdodEVsZW1lbnQudGV4dENvbnRlbnQgPSBnZXRDdXJyRW5lbXlNaWdodCgpLnRvU3RyaW5nKCk7XHJcbiAgICBjYWxjUm91bmRpbmcoKTtcclxuICAgIGNhbGN1bGF0ZVdpbkNoYW5jZSgpO1xyXG59XHJcblxyXG5cclxuLy8gRXhhbXBsZSB1c2FnZVxyXG4vLyBzZXR1cEdhbWUoNSwgNSk7IC8vIDUgYmFsbHMgZm9yIGVhY2ggdGVhbVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNvbWJhdCxcclxuICAgIGNhbGN1bGF0ZVdpbkNoYW5jZSxcclxuICAgIHJlZnJlc2hWYWx1ZXMsXHJcbiAgICBwYXVzZUFuaW1hdGlvbixcclxuICAgIGJhdHRsZVJlc3VsdCxcclxuICAgIHNpbXVsYXRlQmF0dGxlLFxyXG4gICAgc3dpdGNoU3RhbmNlLFxyXG4gICAgZ2V0Q3VyckVuZW15TWlnaHQsXHJcbiAgICBzZXRFbmVteU1pZ2h0LFxyXG59OyIsImNvbnN0IHsgZ2V0U2Z4Vm9sdW1lLCBwbGF5U291bmQgfSA9IHJlcXVpcmUoJy4vYXVkaW8nKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuLy8gQXNzdW1pbmcgdGhlc2UgYXJlIGRlZmluZWQgZ2xvYmFsbHlcclxuLy8gdmFyIG1hbnVmYWN0dXJlZE1hcCA9IHtcclxuLy8gICAgIGNsYXk6IFsnYnJpY2tzJ10sXHJcbi8vICAgICBoZXJiczogWydtZWRpY2luZSddLFxyXG4vLyAgICAgaGlkZXM6IFsnbGVhdGhlciddLFxyXG4vLyAgICAgaXJvbjogWydzdGVlbCcsICduYWlscyddLFxyXG4vLyAgICAgb3JlOiBbJ2lyb24nLCAnc2lsdmVyJywgJ2dvbGQnXSxcclxuLy8gICAgIHNhbmQ6IFsnZ2xhc3MnLCAnY29uY3JldGUnXSxcclxuLy8gICAgIHJvY2tzOiBbJ3NsYWJzJ10sXHJcbi8vICAgICB2aW5lczogWydyb3BlJ10sXHJcbi8vICAgICB3b29kOiBbJ3BhcGVyJywgJ2JlYW1zJywgJ2NyYXRlcyddLFxyXG4vLyB9O1xyXG5cclxudmFyIHN3aXRjaGVkTWFudWZhY3R1cmVkTWFwID0ge1xyXG4gICAgJ2JlYW1zJzogWyd3b29kJ10sXHJcbiAgICAnYnJpY2tzJzogWydjbGF5J10sXHJcbiAgICAnY29uY3JldGUnOiBbJ3NhbmQnXSxcclxuICAgICdjcmF0ZXMnOiBbJ3dvb2QnXSxcclxuICAgICdnbGFzcyc6IFsnc2FuZCddLFxyXG4gICAgJ2dvbGQnOiBbJ29yZSddLFxyXG4gICAgJ2hhbmRsZSc6IFsnc3RpY2tzJ10sXHJcbiAgICAnaXJvbic6IFsnb3JlJ10sXHJcbiAgICAnbGVhdGhlcic6IFsnaGlkZXMnXSxcclxuICAgICdtZWRpY2luZSc6IFsnaGVyYnMnXSxcclxuICAgICduYWlscyc6IFsnaXJvbiddLFxyXG4gICAgJ3BhcGVyJzogWyd3b29kJ10sXHJcbiAgICAnc2hhcnByb2Nrcyc6IFsncm9ja3MnXSxcclxuICAgICdzaWx2ZXInOiBbJ29yZSddLFxyXG4gICAgJ3NsYWJzJzogWydyb2NrcyddLFxyXG4gICAgJ3NwZWFyJzogWydzdGFmZicsICdzaGFycHJvY2tzJywgJ3JvcGUnXSxcclxuICAgICdzdGFmZic6IFsnaGFuZGxlJywgJ3JvcGUnXSxcclxuICAgICdzdGVlbCc6IFsnaXJvbiddLFxyXG4gICAgJ3N0aWNrcyc6IFsnd29vZCddLFxyXG4gICAgJ3JvcGUnOiBbJ3ZpbmVzJ10sXHJcbiAgICAnd29vZCc6IFsnc3RpY2tzJ10sXHJcbn07XHJcblxyXG5cclxudmFyIGFsbE1hdGVyaWFscyA9IFtdO1xyXG5PYmplY3Qua2V5cyhyZXNvdXJjZXMpLmZvckVhY2gociA9PiBhbGxNYXRlcmlhbHMucHVzaChyKSk7XHJcbk9iamVjdC5rZXlzKGNyYWZ0ZWRSZXNvdXJjZXMpLmZvckVhY2gociA9PiBhbGxNYXRlcmlhbHMucHVzaChyKSk7XHJcbmNvbnNvbGUubG9nKFwiQWxsIG1hdGVyaWFsczogXCIsIGFsbE1hdGVyaWFscyk7XHJcblxyXG5sZXQgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nID0ge307XHJcbmxldCBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmcgPSB7fTtcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gaXNQcm9kdWNpbmcocmVzb3VyY2UpIHtcclxuICAgIHJldHVybiByZXNvdXJjZSBpbiBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmc7XHJcbn1cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gaXNDb25zdW1pbmcocmVzb3VyY2UpIHtcclxuICAgIHJldHVybiByZXNvdXJjZSBpbiBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmc7XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIGdldEZhY3RvcnlDb25zdW1wdGlvbihyZXNvdXJjZSkge1xyXG4vLyAgICAgcmV0dXJuIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tyZXNvdXJjZV0gKiA7XHJcbi8vIH1cclxuXHJcbmZ1bmN0aW9uIGdldEZhY3RvcnlQcm9kdWN0aW9uKHJlc291cmNlKSB7XHJcbiAgICByZXR1cm4gYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW3Jlc291cmNlXSAqIG1hbnVmYWN0dXJlQnVsaztcclxufVxyXG5cclxuXHJcbi8vIEZ1bmN0aW9uIHRvIHVwZGF0ZSByZXNvdXJjZSBwcm9kdWN0aW9uIGFuZCBjb25zdW1wdGlvblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIHVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nKG9sZFByb2R1Y2VkLCBuZXdQcm9kdWNlZCkge1xyXG4gICAgLy8gaWYgKG5ld1Byb2R1Y2VkID09PSBudWxsKSByZXR1cm47XHJcbiAgICAvLyBJZiB0aGlzIGZhY3Rvcnkgd2FzIHByZXZpb3VzbHkgcHJvZHVjaW5nIHNvbWV0aGluZywgcmVkdWNlIHRoZSBjb3VudFxyXG4gICAgaWYgKG9sZFByb2R1Y2VkICYmIG9sZFByb2R1Y2VkICE9PSAnbm9uZScpIHtcclxuICAgICAgICBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbb2xkUHJvZHVjZWRdLS07XHJcbiAgICAgICAgQXJyYXkuZnJvbShjcmFmdGVkUmVzb3VyY2VzW29sZFByb2R1Y2VkXS5jb3N0KS5mb3JFYWNoKChjb3N0KSA9PiB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSAtPSBjb3N0LmFtb3VudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHByb2R1Y3Rpb24gY291bnQgZm9yIHRoZSBuZXcgcmVzb3VyY2VcclxuICAgIGlmIChhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbbmV3UHJvZHVjZWRdKSBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbbmV3UHJvZHVjZWRdKys7XHJcbiAgICBlbHNlIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tuZXdQcm9kdWNlZF0gPSAxO1xyXG4gICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXNbbmV3UHJvZHVjZWRdKSB7XHJcbiAgICAgICAgQXJyYXkuZnJvbShjcmFmdGVkUmVzb3VyY2VzW25ld1Byb2R1Y2VkXS5jb3N0KS5mb3JFYWNoKChjb3N0KSA9PiB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSArPSBjb3N0LmFtb3VudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ2FsbCB0aGlzIHdoZW5ldmVyIGEgZmFjdG9yeSdzIHNldHRpbmdzIGNoYW5nZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIG9uRmFjdG9yeU1vZGlmaWVkKGZhY3RvcnlJbmRleCwgbmV3UHJvZHVjZWQpIHtcclxuICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2ZhY3RvcnktJHtmYWN0b3J5SW5kZXh9IC5yaWdodFNlbGVjdGApO1xyXG4gICAgdXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmcocmlnaHRTZWxlY3QuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJyksIG5ld1Byb2R1Y2VkKTtcclxuICAgIHJpZ2h0U2VsZWN0LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsIG5ld1Byb2R1Y2VkKTtcclxufVxyXG4vLyBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5mb3JFYWNoKChyZXNvdXJjZSkgPT4ge1xyXG4vLyAgICAgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW3Jlc291cmNlXSA9IDA7XHJcbi8vICAgICBBcnJheS5mcm9tKGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VdLmNvc3QpLmZvckVhY2goKGNvc3QpID0+IHtcclxuLy8gICAgICAgICBpZiAoIWFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSkge1xyXG4vLyAgICAgICAgICAgICBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0gPSAwO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0pO1xyXG4vLyB9KTtcclxuZnVuY3Rpb24gY3JlYXRlRmFjdG9yeURpdigpIHtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHJlc291cmNlIHRyYWNraW5nIG9iamVjdHNcclxuXHJcblxyXG4gICAgY29uc3QgZmFjdG9yaWVzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY3RvcmllcycpO1xyXG4gICAgY29uc3QgZmFjdG9yeURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZmFjdG9yeURpdi5jbGFzc05hbWUgPSAnZmFjdG9yeSc7XHJcblxyXG4gICAgY29uc3QgbGVmdFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBsZWZ0VGV4dC5jbGFzc0xpc3QuYWRkKCdmYWN0b3J5Q29zdCcpO1xyXG4gICAgY29uc3QgcmlnaHRTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuXHJcbiAgICAvLyBQb3B1bGF0ZSB0aGUgcmlnaHQgZHJvcGRvd25cclxuICAgIE9iamVjdC5rZXlzKHN3aXRjaGVkTWFudWZhY3R1cmVkTWFwKS5mb3JFYWNoKHJlc291cmNlID0+IHtcclxuXHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gcmVzb3VyY2U7XHJcbiAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gcmVzb3VyY2U7XHJcbiAgICAgICAgcmlnaHRTZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuXHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgcmlnaHRTZWxlY3Quc2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJywgJ25vbmUnKTtcclxuXHJcblxyXG4gICAgcmlnaHRTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwcm9kdWNlZCByZXNvdXJjZSBmb3IgdGhpcyBmYWN0b3J5XHJcbiAgICAgICAgY29uc3QgY3VycmVudFByb2R1Y2VkID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZHVjZWQnKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGN1cnJlbnRQcm9kdWNlZCAhPT0gJ25vbmUnKSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcmVzb3VyY2UtJHtjdXJyZW50UHJvZHVjZWR9YCkuc3R5bGUuY29sb3IgPSAnJztcclxuXHJcbiAgICAgICAgY29uc3QgbmV3UHJvZHVjZWQgPSByaWdodFNlbGVjdC52YWx1ZTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHJlc291cmNlIHRyYWNraW5nXHJcbiAgICAgICAgdXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmcoY3VycmVudFByb2R1Y2VkLCBuZXdQcm9kdWNlZCk7XHJcblxyXG4gICAgICAgIC8vIE5vdyB1cGRhdGUgdGhlIGRhdGFzZXQgZm9yIHRoZSBuZXh0IGNoYW5nZSBldmVudFxyXG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJywgbmV3UHJvZHVjZWQpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKG5ld1Byb2R1Y2VkICYmIG5ld1Byb2R1Y2VkICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcmVzb3VyY2UtJHtuZXdQcm9kdWNlZH1gKS5zdHlsZS5jb2xvciA9ICd0aGlzdGxlJztcclxuICAgICAgICAgICAgbGVmdFRleHQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgIGxlZnRUZXh0LmlubmVySFRNTCArPSBgJHtyZXF1aXJlKCcuL3Jlc291cmNlcycpLmdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlc1tyaWdodFNlbGVjdC52YWx1ZV0uY29zdCl9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBpbml0aWFsIG9wdGlvbiBmb3IgbGVmdCBzZWxlY3RcclxuICAgIGZ1bmN0aW9uIGFkZEluaXRpYWxPcHRpb24oc2VsZWN0RWxlbWVudCwgdGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBpbml0aWFsT3B0aW9uLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICAgICAgLy8gaW5pdGlhbE9wdGlvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmRDaGlsZChpbml0aWFsT3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIGFycm93LmlubmVySFRNTCA9ICcmIzg1OTQ7JzsgLy8gUmlnaHQgYXJyb3cgSFRNTCBlbnRpdHlcclxuXHJcbiAgICBmYWN0b3J5RGl2LmFwcGVuZENoaWxkKGxlZnRUZXh0KTtcclxuICAgIGZhY3RvcnlEaXYuYXBwZW5kQ2hpbGQoYXJyb3cpO1xyXG4gICAgZmFjdG9yeURpdi5hcHBlbmRDaGlsZChyaWdodFNlbGVjdCk7XHJcblxyXG4gICAgYWRkSW5pdGlhbE9wdGlvbihyaWdodFNlbGVjdCwgJ1NlbGVjdCBhIFJlc291cmNlJyk7XHJcblxyXG4gICAgZmFjdG9yaWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGZhY3RvcnlEaXYpO1xyXG5cclxuICAgIHJldHVybiBmYWN0b3J5RGl2O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbG9hZEZhY3RvcnkoY3JhZnRpbmcpIHtcclxuICAgIGNvbnNvbGUubG9nKFwibG9hZGluZyBhIGZhY3RvcnkgZm9yIFwiLCBjcmFmdGluZyk7XHJcbiAgICBsZXQgZGl2ID0gY3JlYXRlRmFjdG9yeURpdigpO1xyXG4gICAgaWYgKGNyYWZ0aW5nKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgICAgIGRpdi5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKS52YWx1ZSA9IGNyYWZ0aW5nO1xyXG5cclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcmVzb3VyY2UtJHtjcmFmdGluZ31gKS5zdHlsZS5jb2xvciA9ICd0aGlzdGxlJztcclxuICAgICAgICAgICAgZGl2LnF1ZXJ5U2VsZWN0b3IoJy5mYWN0b3J5Q29zdCcpLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBkaXYucXVlcnlTZWxlY3RvcignLmZhY3RvcnlDb3N0JykuaW5uZXJIVE1MICs9IGAke3JlcXVpcmUoJy4vcmVzb3VyY2VzJykuZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW2NyYWZ0aW5nXS5jb3N0KX1gO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5RmFjdG9yeUJ1dHRvbicpO1xyXG5cclxuICAgIGlmIChidXlGYWN0b3J5QnV0dG9uKSB7XHJcblxyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIGAke25ld0ZhY3RvcnlTaWx2ZXJDb3N0LnRvRml4ZWQoMCl9IHNpbHZlcmApO1xyXG4gICAgICAgIHVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nKCdub25lJywgY3JhZnRpbmcpO1xyXG4gICAgfVxyXG4gICAgbmV3RmFjdG9yeVNpbHZlckNvc3QgKj0gMS4yO1xyXG59XHJcblxyXG5cclxubGV0IG1hbnVmYWN0dXJlQnVsayA9IDI7XHJcbmxldCBidWxrVXBncmFkZUNvc3QgPSAzMDtcclxubGV0IG1hbnVmYWN0dXJlQm9udXMgPSAxO1xyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJlc291cmNlcyBBbGwgcmVzb3VyY2VzIHJlcXVpcmVkIGZvciB0aGUgY3JhZnRcclxuICogQHBhcmFtIHtzdHJpbmd9IGdvYWxSZXNvdXJjZSBXaGF0IHdlJ2xsIGJlIGNyYWZ0aW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBtYW51ZmFjdHVyZShyZXNvdXJjZXMsIGdvYWxSZXNvdXJjZSkge1xyXG4gICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgLy8gQ2FsY3VsYXRlIGhvdyBtYW55IHdlIGNhbiBhZmZvcmRcclxuICAgIGxldCBhcnIgPSBbXTtcclxuICAgIHJlc291cmNlcy5mb3JFYWNoKHJlc291cmNlID0+IGFyci5wdXNoKGdldE1hdGVyaWFsKHJlc291cmNlKSAvIGNyYWZ0ZWRSZXNvdXJjZXNbZ29hbFJlc291cmNlXS5jb3N0W3Jlc291cmNlXSkpO1xyXG4gICAgbGV0IG51bSA9IE1hdGgubWluKG1hbnVmYWN0dXJlQnVsaywgLi4uYXJyKTtcclxuICAgIGNvbnNvbGUubG9nKG51bSwgbWFudWZhY3R1cmVCdWxrLCAuLi5hcnIpO1xyXG4gICAgbnVtICo9IG1hbnVmYWN0dXJlQm9udXM7XHJcbiAgICAvLyBUaGUgZmFjdG9yaWVzIGdldCB0byBiZSBoYWxmIHByaWNlIG9mIG5vcm1hbCBjcmFmdGluZyBiYyBlZmZpY2llbmN5XHJcbiAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmNyYWZ0UmVzb3VyY2VRdWFudGl0eShnb2FsUmVzb3VyY2UsIG51bSk7XHJcbiAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKGdvYWxSZXNvdXJjZSwgbnVtKTtcclxuICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1jcmFmdGVkUmVzb3VyY2VzW2dvYWxSZXNvdXJjZV0uY29zdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZ3JhZGVCdWxrKCkge1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdzaWx2ZXInKSA8IGJ1bGtVcGdyYWRlQ29zdCkgcmV0dXJuO1xyXG4gICAgbWFudWZhY3R1cmVCdWxrICs9IDI7XHJcbiAgICBidWxrVXBncmFkZUNvc3QgKz0gMTA7XHJcblxyXG5cclxuICAgIHBsYXlTb3VuZCgnLi9hdWRpby9mYWN0b3J5YnVsay53YXYnKTtcclxuXHJcblxyXG4gICAgY29uc3QgdXBCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBncmFkZUJ1bGtCdXR0b24nKTtcclxuICAgIHVwQnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBgJHttYW51ZmFjdHVyZUJ1bGt9IOKGkiAke21hbnVmYWN0dXJlQnVsayArIDJ9OiAke2J1bGtVcGdyYWRlQ29zdC50b0ZpeGVkKDApfSBzaWx2ZXJgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXR0ZW1wdE1hbnVmYWN0dXJlKCkge1xyXG4gICAgY29uc3QgZmFjdG9yaWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZhY3RvcnknKTtcclxuICAgIGZhY3Rvcmllcy5mb3JFYWNoKGZhY3RvcnkgPT4ge1xyXG5cclxuICAgICAgICAvLyBjb25zdCBsZWZ0U2VsZWN0ID0gZmFjdG9yeS5xdWVyeVNlbGVjdG9yKCdzcGFuOmZpcnN0LWNoaWxkJyk7XHJcbiAgICAgICAgY29uc3QgcmlnaHRTZWxlY3QgPSBmYWN0b3J5LnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdDpsYXN0LWNoaWxkJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGNvbnN0IGdvYWxSZXNvdXJjZSA9IHJpZ2h0U2VsZWN0LnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlcyA9IHN3aXRjaGVkTWFudWZhY3R1cmVkTWFwW2dvYWxSZXNvdXJjZV07XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJjaGVja2luZyBmYWN0b3J5XCIsIGdvYWxSZXNvdXJjZSk7XHJcbiAgICAgICAgaWYgKHJlc291cmNlcyAmJiBnb2FsUmVzb3VyY2UgJiYgY2FuQ3JhZnQoZ29hbFJlc291cmNlKSkge1xyXG4gICAgICAgICAgICBtYW51ZmFjdHVyZShyZXNvdXJjZXMsIGdvYWxSZXNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG59XHJcblxyXG52YXIgbmV3RmFjdG9yeVNpbHZlckNvc3QgPSA1MDtcclxuZnVuY3Rpb24gYnV5RmFjdG9yeSgpIHtcclxuICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5RmFjdG9yeUJ1dHRvbicpO1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdzaWx2ZXInKSA8IG5ld0ZhY3RvcnlTaWx2ZXJDb3N0KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ05vdCBlbm91Z2ggc2lsdmVyIScpOyByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFzIGVub3VnaCBzaWx2ZXIgdG8gYWZmb3JkIGZhY3RvcnlcclxuICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnc2lsdmVyJywgLW5ld0ZhY3RvcnlTaWx2ZXJDb3N0KTtcclxuICAgIGNyZWF0ZUZhY3RvcnlEaXYoKTtcclxuXHJcblxyXG4gICAgcGxheVNvdW5kKCcuL2F1ZGlvL2ZhY3RvcnlidWlsZC53YXYnKTtcclxuXHJcbiAgICBuZXdGYWN0b3J5U2lsdmVyQ29zdCAqPSAxLjI7XHJcbiAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBgJHtuZXdGYWN0b3J5U2lsdmVyQ29zdC50b0ZpeGVkKDApfSBzaWx2ZXJgKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjcmVhdGVGYWN0b3J5RGl2LFxyXG4gICAgYXR0ZW1wdE1hbnVmYWN0dXJlLFxyXG4gICAgYnV5RmFjdG9yeSxcclxuICAgIHVwZ3JhZGVCdWxrLFxyXG4gICAgYWxsTWF0ZXJpYWxzLFxyXG4gICAgZ2V0RmFjdG9yeVByb2R1Y3Rpb24sXHJcbiAgICBsb2FkRmFjdG9yeSxcclxuICAgIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1xyXG59O1xyXG4iLCJmdW5jdGlvbiBmaXRDaGFyVG9DZWxsKGNoYXIsIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgaW5pdGlhbEZvbnRTaXplKSB7XHJcbiAgICAvLyBDcmVhdGUgYSB0ZW1wb3Jhcnkgc3BhbiBlbGVtZW50IHRvIG1lYXN1cmUgdGhlIGNoYXJhY3RlclxyXG4gICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHNwYW4udGV4dENvbnRlbnQgPSBjaGFyO1xyXG4gICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IGAke2luaXRpYWxGb250U2l6ZX1weGA7XHJcbiAgICBzcGFuLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsgLy8gc28gaXQgZG9lc24ndCBhZmZlY3QgdGhlIGxheW91dFxyXG4gICAgc3Bhbi5zdHlsZS53aGl0ZVNwYWNlID0gJ25vd3JhcCc7IC8vIHRvIHByZXZlbnQgbGluZSBicmVha3NcclxuICAgIHNwYW4uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOyAvLyB0byBrZWVwIGl0IGhpZGRlblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzcGFuKTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgc3BhbiBmaXRzIHdpdGhpbiB0aGUgZGltZW5zaW9ucywgYW5kIGFkanVzdCBmb250IHNpemUgaWYgbm90XHJcbiAgICBsZXQgY3VycmVudEZvbnRTaXplID0gaW5pdGlhbEZvbnRTaXplO1xyXG4gICAgd2hpbGUgKHNwYW4ub2Zmc2V0V2lkdGggPCBjZWxsV2lkdGggJiYgc3Bhbi5vZmZzZXRIZWlnaHQgPCBjZWxsSGVpZ2h0KSB7XHJcbiAgICAgICAgY3VycmVudEZvbnRTaXplKys7XHJcbiAgICAgICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IGAke2N1cnJlbnRGb250U2l6ZX1weGA7XHJcblxyXG4gICAgICAgIC8vIE9wdGlvbmFsOiBzdG9wIGlmIHRoZSBmb250IHNpemUgZ2V0cyB0b28gc21hbGxcclxuICAgICAgICBpZiAoY3VycmVudEZvbnRTaXplID49IDEwMDApIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFuIHVwOiByZW1vdmUgdGhlIHRlbXBvcmFyeSBzcGFuIGVsZW1lbnRcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3Bhbik7XHJcblxyXG4gICAgcmV0dXJuIGN1cnJlbnRGb250U2l6ZTtcclxufVxyXG5leHBvcnRzLmZpdENoYXJUb0NlbGwgPSBmaXRDaGFyVG9DZWxsO1xyXG4iLCJjb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBnZXRTZnhWb2x1bWUgfSA9IHJlcXVpcmUoJy4vYXVkaW8nKTtcclxuXHJcbi8qIEdBVEhFUklORyBNQVRFUklBTFMqL1xyXG5jb25zdCBzaWRlYmFyUGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIik7XHJcbmZ1bmN0aW9uIHN0b3BBbGxHYXRoZXJpbmcoKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG4gICAgICAgIHZhbC5pc0dldHRpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCByQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNnYXRoZXJcIiArIGNhcGl0YWxpemVGaXJzdChrZXkpKTtcclxuICAgICAgICBpZiAockJ1dHRvbikge1xyXG4gICAgICAgICAgICByQnV0dG9uLnRleHRDb250ZW50ID0gdmFsLmRlZmF1bHRUZXh0O1xyXG4gICAgICAgICAgICByQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2dhdGhlcmluZycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2V0IHNpZGViYXIgdG8gbm90IGJvbGRcclxuICAgICAgICBjb25zdCBzaWRlYmFyVGV4dCA9IHNpZGViYXJQYXJlbnQucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyBrZXkpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcclxuXHJcbiAgICB9XHJcbn1cclxuY29uc3QgZW1vamlHYXRoZXJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW1vamlHYXRoZXJEaXNwbGF5Jyk7XHJcbmZ1bmN0aW9uIHRvZ2dsZVJlc291cmNlKHJlc291cmNlS2V5KSB7XHJcblxyXG4gICAgY29uc3QgZ2F0aGVyQXVkaW8gPSBuZXcgQXVkaW8oJy4vYXVkaW8vZ2F0aGVyLndhdicpO1xyXG4gICAgZ2F0aGVyQXVkaW8udm9sdW1lID0gZ2V0U2Z4Vm9sdW1lKCk7XHJcbiAgICBnYXRoZXJBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZXNbcmVzb3VyY2VLZXldO1xyXG5cclxuXHJcbiAgICBjb25zdCBzaWRlYmFyUGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIik7XHJcblxyXG4gICAgY29uc3Qgc2lkZWJhclRleHQgPSBzaWRlYmFyUGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXNvdXJjZS0nICsgcmVzb3VyY2VLZXkpO1xyXG4gICAgY29uc3QgcmVzb3VyY2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2F0aGVyJyArIHJlc291cmNlS2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVzb3VyY2VLZXkuc2xpY2UoMSkpO1xyXG4gICAgZW1vamlHYXRoZXJEaXYudGV4dENvbnRlbnQgPSAn8JOAnyc7IC8vIERlZmF1bHQgZW1vamkg8JOAn1xyXG5cclxuXHJcbiAgICBpZiAoIXJlc291cmNlLmlzR2V0dGluZykge1xyXG4gICAgICAgIHN0b3BBbGxHYXRoZXJpbmcoKTsgLy8gU3RvcCBhbGwgZ2F0aGVyaW5nIGFjdGlvbnNcclxuICAgICAgICByZXNvdXJjZS5pc0dldHRpbmcgPSB0cnVlO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi50ZXh0Q29udGVudCA9IHJlc291cmNlLmFjdGl2ZVRleHQ7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChzaWRlYmFyVGV4dCkgc2lkZWJhclRleHQuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZW1vamlHYXRoZXJEaXYudGV4dENvbnRlbnQgPSByZXNvdXJjZS5lbW9qaTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXNvdXJjZS5lbW9qaSk7XHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnZ2F0aGVyaW5nJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc291cmNlLmlzR2V0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2dhdGhlcmluZycpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi50ZXh0Q29udGVudCA9IHJlc291cmNlLmRlZmF1bHRUZXh0O1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnRvZ2dsZVJlc291cmNlID0gdG9nZ2xlUmVzb3VyY2U7XHJcbiIsImNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpO1xyXG5jb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnV0dG9uc1wiKTtcclxuY29uc3QgeyBnZW5lcmF0ZVRvb2x0aXBDb3N0IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNyZWF0ZUJ1aWxkaW5nQnV0dG9uIH0gPSByZXF1aXJlKCcuL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IGhhc1BlcmsgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHNob3dUYWIgfSA9IHJlcXVpcmUoJy4vc2hvd1RhYicpO1xyXG5cclxuLyogQlVUVE9OUyBHRU5FUkFURSAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1dHRvbnMoKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIGJ1dHRvbnNcIik7XHJcbiAgICBjb25zb2xlLnRyYWNlKCk7XHJcbiAgICAvLyBDcmVhdGUgdGhlIGNvbHVtbnNcclxuICAgIGZvciAobGV0IGJ1aWxkaW5nS2V5IGluIGJ1aWxkaW5ncykge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1aWxkaW5nQnV0dG9uKGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpO1xyXG4gICAgICAgIGJ1dHRvbnNbYnVpbGRpbmdLZXldID0gYnV0dG9uO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTWFkZSBidXR0b24gZm9yIFwiICsgYnVpbGRpbmdLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNyZWF0ZUNvbHVtbnMgPSAocGFyZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29sMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnN0IGNvbDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb25zdCBjb2wzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbDEuc3R5bGUud2lkdGggPSAnMzMuMzMlJztcclxuICAgICAgICBjb2wyLnN0eWxlLndpZHRoID0gJzMzLjMzJSc7XHJcbiAgICAgICAgY29sMy5zdHlsZS53aWR0aCA9ICczMy4zMyUnO1xyXG5cclxuICAgICAgICBjb2wxLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICBjb2wyLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICBjb2wzLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuXHJcbiAgICAgICAgY29sMS5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgY29sMi5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgY29sMy5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgIC8vIHBhcmVudC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXg7JyAgLy8gU2V0IHBhcmVudCB0byBiZSBhIGZsZXggY29udGFpbmVyXHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMyk7XHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMik7XHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMSk7XHJcblxyXG4gICAgICAgIHJldHVybiBbY29sMSwgY29sMiwgY29sM107XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHRhYnNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpO1xyXG4gICAgY29uc3QgcHJvZHVjdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBleHBlcmltZW50Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4cGVyaW1lbnRUYWInKS5xdWVyeVNlbGVjdG9yKCcuYnV0dG9uLWNvbHVtbnMnKTtcclxuICAgIGNvbnN0IHBvbmRlckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb25kZXJUYWInKTtcclxuICAgIC8vIGNvbnN0IGpvYkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2JzVGFiJyk7XHJcbiAgICAvLyBZb3UgY2FuIGFkZCBtb3JlIGNvbnRhaW5lcnMgZm9yIGRpZmZlcmVudCB0YWJzIGFzIG5lZWRlZFxyXG4gICAgLy8gY29uc3QgcHJvZHVjdGlvbkNvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKHByb2R1Y3Rpb25Db250YWluZXIpO1xyXG4gICAgY29uc3QgZXhwZXJpbWVudENvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKGV4cGVyaW1lbnRDb250YWluZXIpO1xyXG4gICAgY29uc3QgcG9uZGVyQ29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMocG9uZGVyQ29udGFpbmVyKTtcclxuICAgIC8vIGNvbnN0IGpvYkNvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKGpvYkNvbnRhaW5lcik7XHJcbiAgICAvLyBTaW1pbGFybHksIGNyZWF0ZSBjb2x1bW5zIGZvciBvdGhlciB0YWJzIGFzIG5lZWRlZFxyXG4gICAgbGV0IHByb2R1Y3Rpb25Db2x1bW5JbmRleCA9IDE7XHJcbiAgICBsZXQgZXhwZXJpbWVudENvbHVtbkluZGV4ID0gMDtcclxuICAgIGxldCBwb25kZXJDb2x1bW5JbmRleCA9IDA7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBsZXQgam9iQ29sdW1uSW5kZXggPSAwO1xyXG5cclxuICAgIC8vIEFkZCBjb3VudGVycyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuICAgIGZvciAobGV0IGtleSBpbiBidXR0b25zKSB7XHJcbiAgICAgICAgY29uc3QgYnRuID0gYnV0dG9uc1trZXldO1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5pZCA9IGtleTtcclxuICAgICAgICBidXR0b25FbGVtZW50LmNsYXNzTmFtZSA9IGJ0bi5jbGFzcztcclxuICAgICAgICBidXR0b25FbGVtZW50LnRleHRDb250ZW50ID0gYnRuLnRleHQuc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcblxyXG4gICAgICAgIC8vIGJ1dHRvbkVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgaWYgKGJ0bi50b29sdGlwRGVzYykgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgYnRuLnRvb2x0aXBEZXNjKTtcclxuICAgICAgICBpZiAoYnRuLnRvb2x0aXBFZmZlY3QpIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZWZmZWN0JywgYnRuLnRvb2x0aXBFZmZlY3QpO1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCd1bmxvY2snLCBidG4udW5sb2NrKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJywgYnRuLmRhdGFfYnVpbGRpbmcpO1xyXG4gICAgICAgIC8vIGlmIHRoaXMgcmVzb3VyY2UgaXNuJ3QgdW5sb2NrZWQsIGhpZGUgaXRcclxuICAgICAgICAvLyBpZiAoIWJ0bi5pc1Zpc2libGUpIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGJ1dHRvbiBjb3JyZXNwb25kcyB0byBhIGNyYWZ0ZWQgcmVzb3VyY2UgdXNpbmcgdGhlIElEXHJcbiAgICAgICAgY29uc3QgY3JhZnRlZFJlc291cmNlID0gT2JqZWN0LnZhbHVlcyhjcmFmdGVkUmVzb3VyY2VzKS5maW5kKHJlc291cmNlID0+IHJlc291cmNlLmlkID09PSBrZXkpO1xyXG5cclxuICAgICAgICBpZiAoY3JhZnRlZFJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIGJ0bi50b29sdGlwQ29zdCA9IGdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlLmNvc3QpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGJ0bi50b29sdGlwQ29zdCk7XHJcblxyXG4gICAgICAgIGlmIChidG4uc2hvd1RhYikge1xyXG4gICAgICAgICAgICBidXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2hvd1RhYihidG4uc2hvd1RhYik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN3aXRjaGluZyB0byB0YWI6IFwiICsgYnRuLnNob3dUYWIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXBwZW5kIHRvIHRoZSBhcHByb3ByaWF0ZSBjb2x1bW4gYmFzZWQgb24gdGhlIHRhYiBwcm9wZXJ0eVxyXG4gICAgICAgIGlmIChidG4udGFiID09PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgLy9zdHlsZT0nZ3JpZC1jb2x1bW46JHtjb2x9OyBncmlkLXJvdzoke3Jvd307XHJcbiAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZ3JpZENvbHVtbiA9IHByb2R1Y3Rpb25Db2x1bW5JbmRleC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAvLyBidXR0b25FbGVtZW50LnN0eWxlLmdyaWRSb3cgPSAnMCc7XHJcbiAgICAgICAgICAgIHByb2R1Y3Rpb25Db2x1bW5JbmRleCA9IChwcm9kdWN0aW9uQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgICAgIHByb2R1Y3Rpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIC8vIHByb2R1Y3Rpb25Db2x1bW5zW3Byb2R1Y3Rpb25Db2x1bW5JbmRleF0uYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIC8vIHByb2R1Y3Rpb25Db2x1bW5JbmRleCA9IChwcm9kdWN0aW9uQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAnZXhwZXJpbWVudCcpIHtcclxuICAgICAgICAgICAgZXhwZXJpbWVudENvbHVtbnNbZXhwZXJpbWVudENvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgZXhwZXJpbWVudENvbHVtbkluZGV4ID0gKGV4cGVyaW1lbnRDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICd0YWJzJykge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHRhYnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAncG9uZGVyJykge1xyXG4gICAgICAgICAgICBwb25kZXJDb2x1bW5zW3BvbmRlckNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgcG9uZGVyQ29sdW1uSW5kZXggPSAocG9uZGVyQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAnam9iJykge1xyXG4gICAgICAgICAgICAvLyBqb2JDb2x1bW5zW2pvYkNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gam9iQ29sdW1uSW5kZXggPSAoam9iQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChidG4udGFiKS5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbW9yZSBjb25kaXRpb25zIGZvciBvdGhlciB0YWJzIGFzIG5lZWRlZFxyXG4gICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwIGZvciBidWlsZGluZ3NcclxuICAgICAgICBjb25zdCBidWlsZGluZyA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChidWlsZGluZyA9PiBidWlsZGluZyA9PT0ga2V5KTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnVpbGRpbmcsIGtleSk7XHJcbiAgICAgICAgICAgIC8vIGJ0bi50b29sdGlwQ29zdCA9IGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdChidWlsZGluZ3NbYnVpbGRpbmddLmNvc3QpO1xyXG4gICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBIaWRlIHRoZSBidXR0b25zIHdlIHNob3VsZG4ndCBzZWUgeWV0XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnRuKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoIWJ0bi5yZXF1aXJlbWVudCgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25FbGVtZW50LCBidG4ucmVxdWlyZW1lbnQoKSk7XHJcbiAgICAgICAgICAgICAgICBidXR0b25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdFcnJvciB3aXRoIHJlcXVpcmVtZW50IHdoaWxlIGdlbmVyYXRpbmcgYnV0dG9uczogJywgYnRuLCBlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdlbmVyYXRlQnV0dG9ucyA9IGdlbmVyYXRlQnV0dG9ucztcclxuIiwiY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoXCIuL2NhcGl0YWxpemVGaXJzdFwiKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuXHJcbi8vIERlZmluZSBhIGxpc3Qgb2YgcG9zc2libGUgYnVpbGRpbmcgbmFtZXMsIGNvc3RzLCBhbmQgZGVzY3JpcHRpb25zXHJcbmNvbnN0IHBvc3NpYmxlUmVzb3VyY2VzID0gT2JqZWN0LmtleXMocmVzb3VyY2VzKS5maWx0ZXIoa2V5ID0+IGtleSAhPT0gJ2h1c2tzJyk7XHJcbmNvbnN0IHBvc3NpYmxlQ3JhZnRlZFJlc291cmNlcyA9IE9iamVjdC5rZXlzKGNyYWZ0ZWRSZXNvdXJjZXMpO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZSBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiBtaW4gYW5kIG1heFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIExvd2VyIGJvdW5kIG9mIHRoZSByYW5kb20gbnVtYmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVXBwZXIgYm91bmQgb2YgdGhlIHJhbmRvbSBudW1iZXJcclxuICogQHJldHVybnMgQSByYW5kb20gbnVtYmVyIGJldHdlZW4gbWluIGFuZCBtYXhcclxuICovXHJcbmZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihtaW4sIG1heCkge1xyXG4gIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSBlbW9qaSBpbiB0aGUgZWd5cHRpYW4gaGVpcm9nbHlwaGljIHNldCAoMHgxMzExYi0weDEzMTNlICYgMHgxMzFlMy0weDEzMjFGKVxyXG4gKiBAcmV0dXJucyBBIHJhbmRvbSBlbW9qaSBpbiB0aGUgZWd5cHRpYW4gaGVpcm9nbHlwaGljIHNldFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UmFuZG9tRW1vamkoKSB7XHJcbiAgLy8gRGVmaW5lIHRoZSBVbmljb2RlIHJhbmdlcyBmb3IgcmFuZG9tIGVtb2ppc1xyXG4gIGNvbnN0IHJhbmdlcyA9IFtcclxuICAgIHsgc3RhcnQ6IDB4MTMxMUIsIGVuZDogMHgxMzEzRSB9LFxyXG4gICAgeyBzdGFydDogMHgxMzFFMywgZW5kOiAweDEzMjFGIH0sXHJcbiAgXTtcclxuXHJcbiAgLy8gQ2hvb3NlIGEgcmFuZG9tIHJhbmdlXHJcbiAgY29uc3QgcmFuZG9tUmFuZ2UgPSByYW5nZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZ2VzLmxlbmd0aCldO1xyXG5cclxuICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBVbmljb2RlIGNoYXJhY3RlciB3aXRoaW4gdGhlIHNlbGVjdGVkIHJhbmdlXHJcbiAgY29uc3QgcmFuZG9tVW5pY29kZSA9IE1hdGguZmxvb3IoZ2V0UmFuZG9tTnVtYmVyKHJhbmRvbVJhbmdlLnN0YXJ0LCByYW5kb21SYW5nZS5lbmQgKyAxKSk7XHJcblxyXG4gIC8vIENvbnZlcnQgdGhlIFVuaWNvZGUgY29kZSBwb2ludCB0byBhIEphdmFTY3JpcHQgc3RyaW5nXHJcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHJhbmRvbVVuaWNvZGUpO1xyXG59XHJcblxyXG5jb25zdCBhZGplY3RpdmVzID0gW1xyXG4gICdidXN0bGluZycsXHJcbiAgJ21hamVzdGljJyxcclxuICAnYW5jaWVudCcsXHJcbiAgJ2VsZWdhbnQnLFxyXG4gICdoaWRkZW4nLFxyXG4gICdnbG9yaW91cycsXHJcbiAgJ2VuY2hhbnRlZCcsXHJcbiAgJ3doaXNwZXJpbmcnLFxyXG4gICdteXN0aWNhbCcsXHJcbiAgJ2x1bWlub3VzJyxcclxuICAncmFkaWFudCcsXHJcbiAgJ3NwZWN0YWN1bGFyJyxcclxuICAnZGF6emxpbmcnLFxyXG4gICdzZXJlbmFkZScsXHJcbiAgJ2NlbGVzdGlhbCcsXHJcbiAgJ3ZpYnJhbnQnLFxyXG4gICdpbXBvc2luZycsXHJcbiAgJ3ZlbmVyYWJsZScsXHJcbiAgJ2ltbWFjdWxhdGUnLFxyXG4gICdlbmlnbWF0aWMnLFxyXG4gICdoYXJtb25pb3VzJyxcclxuICAnZXRoZXJlYWwnLFxyXG4gICdyZXNwbGVuZGVudCcsXHJcbiAgJ3RyYW5xdWlsJyxcclxuICAnc2VyZW5lJyxcclxuICAnYXdlLWluc3BpcmluZycsXHJcbiAgJ3BlYWNlZnVsJyxcclxuICAncGljdHVyZXNxdWUnLFxyXG4gICdjYXB0aXZhdGluZycsXHJcbl07XHJcblxyXG5jb25zdCBidWlsZGluZ05hbWVzID0gW1xyXG4gICdTYW5jdHVhcnknLFxyXG4gICdDaXRhZGVsJyxcclxuICAnSGF2ZW4nLFxyXG4gICdNb25hc3RlcnknLFxyXG4gICdPdXRwb3N0JyxcclxuICAnT2JzZXJ2YXRvcnknLFxyXG4gICdTdHJvbmdob2xkJyxcclxuICAnUGFsYWNlJyxcclxuICAnVGVtcGxlJyxcclxuICAnTWFub3InLFxyXG4gICdLZWVwJyxcclxuICAnQ2hhdGVhdScsXHJcbiAgJ0Fjcm9wb2xpcycsXHJcbiAgJ0NhdGhlZHJhbCcsXHJcbiAgJ1ZpbGxhJyxcclxuICAnRm9ydHJlc3MnLFxyXG4gICdCYXN0aW9uJyxcclxuICAnTGlnaHRob3VzZScsXHJcbiAgJ0Nhc3RsZScsXHJcbiAgJ0NvbGlzZXVtJyxcclxuICAnUHlyYW1pZCcsXHJcbiAgJ01hbnNpb24nLFxyXG4gICdFc3RhdGUnLFxyXG4gICdNdXNldW0nLFxyXG4gICdUb3dlcicsXHJcbiAgJ0hhbGwnLFxyXG4gICdMaWJyYXJ5JyxcclxuICAnR2FsbGVyeScsXHJcbiAgJ0JhemFhcicsXHJcbl07XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYSByYW5kb20gYnVpbGRpbmcgbmFtZSBieSBjb21iaW5pbmcgYW4gYWRqZWN0aXZlIGFuZCBhIGJ1aWxkaW5nIG5hbWVcclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQnVpbGRpbmdOYW1lKCkge1xyXG4gIGNvbnN0IHJhbmRvbUFkamVjdGl2ZSA9IGFkamVjdGl2ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWRqZWN0aXZlcy5sZW5ndGgpXTtcclxuICBjb25zdCByYW5kb21CdWlsZGluZ05hbWUgPSBidWlsZGluZ05hbWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJ1aWxkaW5nTmFtZXMubGVuZ3RoKV07XHJcbiAgcmV0dXJuIGAke2NhcGl0YWxpemVGaXJzdChyYW5kb21BZGplY3RpdmUpfSAke3JhbmRvbUJ1aWxkaW5nTmFtZX1gO1xyXG59XHJcblxyXG5cclxuY29uc3Qgbm91bnMgPSBbXHJcbiAgJ3NhbmN0dWFyeScsXHJcbiAgJ2NpdGFkZWwnLFxyXG4gICdoYXZlbicsXHJcbiAgJ21vbmFzdGVyeScsXHJcbiAgJ291dHBvc3QnLFxyXG4gICdvYnNlcnZhdG9yeScsXHJcbiAgJ3N0cm9uZ2hvbGQnLFxyXG4gICdwYWxhY2UnLFxyXG4gICd0ZW1wbGUnLFxyXG4gICdtYW5vcicsXHJcbl07XHJcblxyXG5jb25zdCB2ZXJicyA9IFtcclxuICAncHJvdmlkZXMnLFxyXG4gICdlbmhhbmNlcycsXHJcbiAgJ2ltYnVlcycsXHJcbiAgJ3JhZGlhdGVzJyxcclxuICAnZW1ib2RpZXMnLFxyXG4gICdpbnNwaXJlcycsXHJcbiAgJ2V2b2tlcycsXHJcbiAgJ2V4dWRlcycsXHJcbiAgJ2Jlc3Rvd3MnLFxyXG4gICdjcmVhdGVzJyxcclxuXTtcclxuXHJcbmNvbnN0IHByZXBvc2l0aW9ucyA9IFtcclxuICAnd2l0aCcsXHJcbiAgJ3Rocm91Z2gnLFxyXG4gICdhbWlkc3QnLFxyXG4gICdiZW5lYXRoJyxcclxuICAnYWJvdmUnLFxyXG4gICdhbG9uZ3NpZGUnLFxyXG5dO1xyXG5cclxuY29uc3QgY29uanVuY3Rpb25zID0gW1xyXG4gICdhbmQnLFxyXG4gICd3aGlsZScsXHJcbiAgJ2FzJyxcclxuICAnYWx0aG91Z2gnLFxyXG4gICd5ZXQnLFxyXG5dO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIGRlc2NyaXB0aW9uIG9mIGEgYnVpbGRpbmdcclxuICogQHJldHVybnMgQSBzdHJpbmcgY29udGFpbmluZyBhIGRlc2NyaXB0aW9uIG9mIGEgYnVpbGRpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQnVpbGRpbmdEZXNjcmlwdGlvbigpIHtcclxuICBjb25zdCByYW5kb21BZGplY3RpdmUgPSBhZGplY3RpdmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFkamVjdGl2ZXMubGVuZ3RoKV07XHJcbiAgY29uc3QgcmFuZG9tQWRqZWN0aXZlMiA9IGFkamVjdGl2ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWRqZWN0aXZlcy5sZW5ndGgpXTtcclxuXHJcbiAgY29uc3QgcmFuZG9tTm91biA9IG5vdW5zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG5vdW5zLmxlbmd0aCldO1xyXG4gIGNvbnN0IHJhbmRvbVZlcmIgPSB2ZXJic1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2ZXJicy5sZW5ndGgpXTtcclxuICBjb25zdCByYW5kb21QcmVwb3NpdGlvbiA9IHByZXBvc2l0aW9uc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwcmVwb3NpdGlvbnMubGVuZ3RoKV07XHJcbiAgY29uc3QgcmFuZG9tQ29uanVuY3Rpb24gPSBjb25qdW5jdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29uanVuY3Rpb25zLmxlbmd0aCldO1xyXG5cclxuICBjb25zdCBzZW50ZW5jZVN0cnVjdHVyZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpOyAvLyBIb3cgbWFueSBzZW50ZW5jZSBzdHJ1Y3R1cmVzIHdlIGhhdmVcclxuXHJcbiAgbGV0IGRlc2NyaXB0aW9uID0gJyc7XHJcblxyXG4gIHN3aXRjaCAoc2VudGVuY2VTdHJ1Y3R1cmUpIHtcclxuICAgIGNhc2UgMDpcclxuICAgICAgZGVzY3JpcHRpb24gPSBgJHtyYW5kb21BZGplY3RpdmV9ICR7cmFuZG9tTm91bn0gdGhhdCAke3JhbmRvbVZlcmJ9IGFuIGF1cmEgb2Ygc3BsZW5kb3IuYDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gYCR7Y2FwaXRhbGl6ZUZpcnN0KHJhbmRvbVByZXBvc2l0aW9uKX0gaXRzICR7cmFuZG9tQWRqZWN0aXZlfSBhcHBlYXJhbmNlLCB0aGUgJHtyYW5kb21Ob3VufSAke3JhbmRvbVZlcmJ9IGFuIGF1cmEgb2YgJHtyYW5kb21BZGplY3RpdmUyfS5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgZGVzY3JpcHRpb24gPSBgJHtjYXBpdGFsaXplRmlyc3QocmFuZG9tQWRqZWN0aXZlKX0gJHtyYW5kb21Ob3VufSAke3JhbmRvbVZlcmJ9IGdyYWNlZnVsbHksIGV4dWRpbmcgYW4gZW5jaGFudGluZyBhdG1vc3BoZXJlLmA7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICBkZXNjcmlwdGlvbiA9IGBUaGUgJHtyYW5kb21Ob3VufSBpcyAke3JhbmRvbUFkamVjdGl2ZX0gYW5kICR7cmFuZG9tVmVyYn0gd2l0aCBhIHNlbnNlIG9mIHdvbmRlci5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgZGVzY3JpcHRpb24gPSBgQW1pZHN0IHRoZSAke3JhbmRvbUFkamVjdGl2ZX0gc3Vycm91bmRpbmdzLCB0aGUgJHtyYW5kb21Ob3VufSAke3JhbmRvbVZlcmJ9IHRyYW5xdWlsaXR5IGFuZCBiZWF1dHkuYDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDU6XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gYEFuICR7cmFuZG9tQWRqZWN0aXZlfSAke3JhbmRvbU5vdW59IHRoYXQgJHtyYW5kb21WZXJifSBhbiBhdXJhIG9mIGNoYXJtICR7cmFuZG9tQ29uanVuY3Rpb259IG15c3RpcXVlLmA7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgZGVzY3JpcHRpb24gPSBgJHtjYXBpdGFsaXplRmlyc3QocmFuZG9tQWRqZWN0aXZlKX0gJHtyYW5kb21Ob3VufSB0aGF0ICR7cmFuZG9tVmVyYn0gYW4gYXVyYSBvZiBzcGxlbmRvci5gO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRlc2NyaXB0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGUgYSByYW5kb20gYnVpbGRpbmdcclxuICogQHJldHVybnMgQSBidWlsZGluZyBvYmplY3QgY29udGFpbmluZyBhIG5hbWUsIGRlc2NyaXB0aW9uLCBlZmZlY3RzLCBib29zdHMsIGFuZCBjb3N0XHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nKCkge1xyXG4gIC8vIFJhbmRvbWx5IHNlbGVjdCBhIG5hbWUsIGRlc2NyaXB0aW9uLCBhbmQgY29zdCBmb3IgdGhlIGJ1aWxkaW5nXHJcbiAgY29uc3QgcmFuZG9tTmFtZSA9IGdlbmVyYXRlQnVpbGRpbmdOYW1lKCk7XHJcbiAgY29uc3QgcmFuZG9tRGVzY3JpcHRpb24gPSBnZW5lcmF0ZUJ1aWxkaW5nRGVzY3JpcHRpb24oKTtcclxuXHJcbiAgLy8gUmFuZG9tbHkgY2hvb3NlIDEtMyByYW5kb20gcmVzb3VyY2VzIGZvciB0aGUgY29zdFxyXG4gIGNvbnN0IG51bVJlc291cmNlcyA9IGdldFJhbmRvbU51bWJlcigxLCAzKTtcclxuICBjb25zdCByYW5kb21Db3N0cyA9IHt9O1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUmVzb3VyY2VzOyBpKyspIHtcclxuICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgcmVwZWF0cywgaXQncyB0aGUgc2FtZSBhcyByb2xsaW5nIG9uZSBmZXdlciBjb3N0XHJcbiAgICBjb25zdCByYW5kb21SZXNvdXJjZSA9IHBvc3NpYmxlUmVzb3VyY2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlUmVzb3VyY2VzLmxlbmd0aCldO1xyXG4gICAgcmFuZG9tQ29zdHNbcmFuZG9tUmVzb3VyY2VdID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwICogKDUgLSBudW1SZXNvdXJjZXMpKTsgLy8gRmV3ZXIgcmVzb3VyY2VzIG1lYW5zIG1vcmUgZXhwZW5zaXZlXHJcbiAgfVxyXG5cclxuICAvLyAwLTEgY3JhZnRlZCByZXNvdXJjZXNcclxuICBjb25zdCBudW1DcmFmdGVkUmVzb3VyY2VzID0gZ2V0UmFuZG9tTnVtYmVyKDAsIDEpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ3JhZnRlZFJlc291cmNlczsgaSsrKSB7XHJcbiAgICAvLyBXZSBkb24ndCBjYXJlIGFib3V0IHJlcGVhdHMsIGl0J3MgdGhlIHNhbWUgYXMgcm9sbGluZyBvbmUgZmV3ZXIgY29zdFxyXG4gICAgY29uc3QgcmFuZG9tUmVzb3VyY2UgPSBwb3NzaWJsZUNyYWZ0ZWRSZXNvdXJjZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVDcmFmdGVkUmVzb3VyY2VzLmxlbmd0aCldO1xyXG4gICAgcmFuZG9tQ29zdHNbcmFuZG9tUmVzb3VyY2VdID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTApO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIEdlbmVyYXRlIHJhbmRvbSBlZmZlY3RzXHJcbiAgY29uc3QgcmFuZG9tRWZmZWN0cyA9IHt9O1xyXG4gIGNvbnN0IG51bUVmZmVjdHMgPSBnZXRSYW5kb21OdW1iZXIoMCwgMSk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1FZmZlY3RzOyBpKyspIHtcclxuICAgIGNvbnN0IHJhbmRvbVJlc291cmNlID0gcG9zc2libGVSZXNvdXJjZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVSZXNvdXJjZXMubGVuZ3RoKV07XHJcbiAgICBsZXQgcmFuZG9tRWZmZWN0VmFsdWUgPSBNYXRoLmZsb29yKGdldFJhbmRvbU51bWJlcigzMCwgMjAwKSk7IC8vIEFkanVzdCB0aGUgcmFuZ2UgYXMgbmVlZGVkXHJcbiAgICBpZiAocmFuZG9tUmVzb3VyY2UgPT09ICdjbG9uZXMnKSByYW5kb21FZmZlY3RWYWx1ZSA9IE1hdGguZmxvb3IoZ2V0UmFuZG9tTnVtYmVyKDEsIDMpKTtcclxuICAgIGVsc2UgaWYgKHJhbmRvbVJlc291cmNlID09PSAnaHVza3MnKSByYW5kb21FZmZlY3RWYWx1ZSA9IE1hdGguZmxvb3IoZ2V0UmFuZG9tTnVtYmVyKDEsIDEwKSk7XHJcbiAgICByYW5kb21FZmZlY3RzW3JhbmRvbVJlc291cmNlXSA9IHJhbmRvbUVmZmVjdFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8gR2VuZXJhdGUgcmFuZG9tIGJvb3N0c1xyXG4gIGNvbnN0IHJhbmRvbUJvb3N0cyA9IHt9O1xyXG4gIGNvbnN0IG51bUJvb3N0cyA9IGdldFJhbmRvbU51bWJlcihudW1FZmZlY3RzID09PSAwID8gMSA6IDAsIDEpOyAvLyBFbnN1cmUgdGhlIGJ1aWxkaW5nIGRvZXMgKnNvbWV0aGluZypcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUJvb3N0czsgaSsrKSB7XHJcbiAgICBjb25zdCByYW5kb21SZXNvdXJjZSA9IHBvc3NpYmxlUmVzb3VyY2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlUmVzb3VyY2VzLmxlbmd0aCldO1xyXG4gICAgY29uc3QgcmFuZG9tQm9vc3RWYWx1ZSA9IGdldFJhbmRvbU51bWJlcigxLjAxLCAxLjIpOyAvLyBBZGp1c3QgdGhlIHJhbmdlIGFzIG5lZWRlZFxyXG4gICAgcmFuZG9tQm9vc3RzW3JhbmRvbVJlc291cmNlXSA9IHJhbmRvbUJvb3N0VmFsdWU7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgYSByYW5kb20gYnVpbGRpbmcgb2JqZWN0XHJcbiAgY29uc3QgcmFuZG9tQnVpbGRpbmcgPSB7XHJcbiAgICBuYW1lOiByYW5kb21OYW1lLFxyXG4gICAgZGVzY3JpcHRpb246IHJhbmRvbURlc2NyaXB0aW9uLFxyXG4gICAgYmFzZWNvc3Q6IHJhbmRvbUNvc3RzLFxyXG4gICAgY29zdDogcmFuZG9tQ29zdHMsXHJcbiAgICBlZmZlY3RzOiByYW5kb21FZmZlY3RzLFxyXG4gICAgYm9vc3Q6IHJhbmRvbUJvb3N0cyxcclxuICAgIGNvdW50OiAwLFxyXG4gICAgcmF0aW86IGdldFJhbmRvbU51bWJlcigxLjMsIDEuNiksXHJcbiAgICBlbW9qaTogZ2V0UmFuZG9tRW1vamkoKSxcclxuICB9O1xyXG5cclxuICByZXR1cm4gcmFuZG9tQnVpbGRpbmc7XHJcbn1cclxuZXhwb3J0cy5nZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nID0gZ2VuZXJhdGVSYW5kb21CdWlsZGluZzsiLCIvKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwsIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuXHJcbiAgICBtYXRlcmlhbCA9IG1hdGVyaWFsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBMb2FkIGNyYWZ0ZWRSZXNvdXJjZXMgaWYgbm90IHByb3ZpZGVkXHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXMpIGNyYWZ0ZWRSZXNvdXJjZXMgPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpLmNyYWZ0ZWRSZXNvdXJjZXM7XHJcblxyXG4gICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSByZXR1cm4gY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgfHwgMDtcclxuICAgIGVsc2UgcmV0dXJuIDA7XHJcblxyXG59XHJcbmV4cG9ydHMuZ2V0Q3JhZnRlZFJlc291cmNlID0gZ2V0Q3JhZnRlZFJlc291cmNlO1xyXG4iLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuLy8gY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuLy8gR2V0IGZ1bmN0aW9uIGZvciBtYXRlcmlhbHNcclxuLyoqXHJcbiAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIG1hdGVyaWFsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKiBAcmV0dXJucyBWYWx1ZSBvZiBtYXRlcmlhbFxyXG4qL1xyXG5mdW5jdGlvbiBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSB7XHJcbiAgICBpZiAoIXJlc291cmNlcykgcmVzb3VyY2VzID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcztcclxuICAgIGlmIChyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG1hdGVyaWFsOlwiLCBtYXRlcmlhbCk7ICAvLyBGb3IgZGVidWdnaW5nXHJcbiAgICAgICAgcmV0dXJuIGdldENyYWZ0ZWRSZXNvdXJjZShtYXRlcmlhbCwgbnVsbCk7XHJcblxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ2V0TWF0ZXJpYWwgPSBnZXRNYXRlcmlhbDsiLCJjb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoJy4vanNvbi9wcmVzdGlnZScpO1xyXG5jb25zdCB7IHJlc291cmNlcywgaXNSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5cclxuXHJcblxyXG5cclxubGV0IGFsbFZpc2libGVCdXR0b25zID0gbmV3IFNldChbJ2dhdGhlclN0aWNrcyddKTtcclxuZXhwb3J0cy5hbGxWaXNpYmxlQnV0dG9ucyA9IGFsbFZpc2libGVCdXR0b25zO1xyXG5cclxuXHJcbi8vIENhbGN1bGF0ZSB0aGUgZmluYWwgbnVtYmVyIG9mIGNyYWZ0ZWQgZ29vZHMgZnJvbSBib251c2VzXHJcbmZ1bmN0aW9uIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSB7XHJcbiAgICBsZXQgdG90YWwgPSAxO1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2VLZXkpKSB7XHJcbiAgICAgICAgICAgIGxldCBza2lsbFJhdGlvID0gMS4wNjtcclxuICAgICAgICAgICAgdmFyIG11bHQgPSAxICsgKE1hdGgucG93KHNraWxsUmF0aW8sIHNraWxsc1tza2lsbF0ubGV2ZWwpIC0gMSkgLyAxMDA7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTXVsdGlwbHlpbmcgZ2FpbiBieSBcIiArIG11bHQpO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBtdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGdldEFmZmVjdGVkUmVzb3VyY2VzKHNraWxsKSB7XHJcbiAgICBpZiAoc2tpbGxzW3NraWxsXSkge1xyXG4gICAgICAgIHJldHVybiBza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7ICAvLyBvciBhbiBlbXB0eSBhcnJheSBbXSwgYmFzZWQgb24geW91ciBwcmVmZXJlbmNlXHJcbn1cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWwgXHJcbiAqIEByZXR1cm5zIE1heCBvZiBtYXRlcmlhbCBvciBJbmZpbml0eVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TWF4KG1hdGVyaWFsKSB7XHJcbiAgICBpZiAoaXNSZXNvdXJjZShtYXRlcmlhbCkpIHtcclxuICAgICAgICBsZXQgYmFzZU1heCA9IHJlc291cmNlc1ttYXRlcmlhbF0ubWF4OyAvLyBTdGF0aWMgYmFzZSBtYXggdmFsdWVcclxuICAgICAgICBsZXQgbWF4ID0gYmFzZU1heDtcclxuXHJcbiAgICAgICAgaWYgKGhhc1ByZXN0aWdlKCdzdG9yYWdlU3BhY2UnKSAmJiBtYXRlcmlhbCAhPT0gJ2Nsb25lcycpIHtcclxuICAgICAgICAgICAgbWF4ID0gYmFzZU1heCAqICgxLjA1ICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdzdG9yYWdlU3BhY2UnKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtYXRlcmlhbCA9PT0gJ2Nsb25lcycgJiYgaGFzUHJlc3RpZ2UoJ21heENsb25lcycpKSB7XHJcbiAgICAgICAgICAgIG1heCA9IGJhc2VNYXggKyBnZXRMZXZlbE9mUHJlc3RpZ2UoJ21heENsb25lcycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1heDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY2xlYXJTaWRlYmFyKCkge1xyXG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG4gICAgc2lkZWJhci5pbm5lckhUTUwgPSAnJztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGlzQnV0dG9uSWRWaXNpYmxlKGlkKSB7XHJcbiAgICByZXR1cm4gYWxsVmlzaWJsZUJ1dHRvbnMuaGFzKGlkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VmlzaWJsZUJ1dHRvbihpZCkge1xyXG4gICAgYWxsVmlzaWJsZUJ1dHRvbnMuYWRkKGlkKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBnZXRNYXgsXHJcbiAgICBjYWxjQ3JhZnRCb251cyxcclxuICAgIGlzQnV0dG9uSWRWaXNpYmxlLFxyXG4gICAgc2V0VmlzaWJsZUJ1dHRvbixcclxuICAgIGNsZWFyU2lkZWJhcixcclxufTtcclxuXHJcbiIsIi8qKlxyXG4gKiBBIG1hcCBvZiBhbGwgam9icyB0aGF0IHJlcXVpcmUgYSBwb25kZXIgdG8gYmUgdW5sb2NrZWRcclxuICpcclxuICogSm9iOiBSZXF1aXJlZFBvbmRlclxyXG4gKi9cclxuY29uc3Qgam9iUmVxdWlyZWRQb25kZXJzID0ge1xyXG4gICAgJ3RoaW5raW5nJzogJ3RoaW5raW5nJyxcclxuICAgICdmaXNoaW5nJzogJ2Zpc2hpbmcnLFxyXG4gICAgJ3NtaXRoaW5nJzogJ25vdC11bmxvY2thYmxlJyxcclxuICAgICdmYXJtaW5nJzogJ2FncmljdWx0dXJlJyxcclxuICAgICdjb21iYXQnOiAnY29tYmF0VGFiJyxcclxuICAgICdodW50aW5nJzogJ2h1bnRpbmcnXHJcbn07XHJcbmV4cG9ydHMuam9iUmVxdWlyZWRQb25kZXJzID0gam9iUmVxdWlyZWRQb25kZXJzO1xyXG4iLCIvLyBAdHMtbm9jaGVja1xyXG4vLyBERVBFTkRTIE9OOiBza2lsbHMuanMsIHBvbmRlci5qc1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuXHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKFwiLi9wb25kZXJcIik7XHJcbmNvbnN0IHsgZ2V0TWF4IH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IHRyaWdnZXJGbG9hdFVwVGV4dCB9ID0gcmVxdWlyZSgnLi90cmlnZ2VyRmxvYXRVcFRleHQnKTtcclxuY29uc3QgeyBwbGF5U291bmQgfSA9IHJlcXVpcmUoJy4vYXVkaW8nKTtcclxuXHJcbi8qIEpPQlMgRlVOQ1RJT05BTElUWSAqL1xyXG5cclxuXHJcbmNvbnN0IGpvYkNvdW50cyA9IHt9O1xyXG5mb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgIGpvYkNvdW50c1tza2lsbF0gPSAwO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IGpvYnNUYWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9ic1RhYicpO1xyXG5cclxuT2JqZWN0LmtleXMoc2tpbGxzKS5mb3JFYWNoKHNraWxsID0+IHtcclxuICAgIGNvbnN0IGpvYkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgam9iRGl2LmNsYXNzTGlzdC5hZGQoJ2pvYi1idXR0b24nKTtcclxuICAgIGpvYkRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJywgc2tpbGwpO1xyXG4gICAgam9iRGl2LmlkID0gJ2pvYi1idXR0b24tJyArIHNraWxsO1xyXG5cclxuICAgIGNvbnN0IGRlY3JlbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGVjcmVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2J0bi1kZWNyZW1lbnQnKTtcclxuICAgIGRlY3JlbWVudERpdi50ZXh0Q29udGVudCA9ICctJztcclxuICAgIGpvYkRpdi5hcHBlbmRDaGlsZChkZWNyZW1lbnREaXYpO1xyXG5cclxuICAgIGNvbnN0IGpvYk5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgam9iTmFtZVNwYW4uY2xhc3NMaXN0LmFkZCgnam9iLW5hbWUnKTtcclxuICAgIGpvYk5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7c2tpbGwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBza2lsbC5zbGljZSgxKX06IDBgO1xyXG4gICAgam9iRGl2LmFwcGVuZENoaWxkKGpvYk5hbWVTcGFuKTtcclxuXHJcbiAgICBjb25zdCBpbmNyZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGluY3JlbWVudERpdi5jbGFzc0xpc3QuYWRkKCdidG4taW5jcmVtZW50Jyk7XHJcbiAgICBpbmNyZW1lbnREaXYudGV4dENvbnRlbnQgPSAnKyc7XHJcbiAgICBqb2JEaXYuYXBwZW5kQ2hpbGQoaW5jcmVtZW50RGl2KTtcclxuXHJcbiAgICBqb2JzVGFiLmFwcGVuZENoaWxkKGpvYkRpdik7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1pbmNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBqb2JUeXBlID0gdGhpcy5jbG9zZXN0KCcuam9iLWJ1dHRvbicpLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vam9iLndhdicpO1xyXG4gICAgICAgIGlmIChnZXRNYXRlcmlhbCgnY2xvbmVzJywgcmVzb3VyY2VzKSA+IGdldFRvdGFsSm9icygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDsgLy8gWCBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gZXZlbnQucGFnZVk7IC8vIFkgY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpZmZlcmVuY2UgPSBnZXRNYXRlcmlhbCgnY2xvbmVzJywgcmVzb3VyY2VzKSAtIGdldFRvdGFsSm9icygpO1xyXG4gICAgICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdICs9IGRpZmZlcmVuY2U7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYCske2RpZmZlcmVuY2V9IHdvcmtlcnNgLCAnZ3JlZW4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgMTAgb3IgbWF4IGNsb25lc1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpZmZlcmVuY2UgPSBNYXRoLm1pbigxMCwgZ2V0TWF0ZXJpYWwoJ2Nsb25lcycsIHJlc291cmNlcykgLSBnZXRUb3RhbEpvYnMoKSk7XHJcbiAgICAgICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0gKz0gZGlmZmVyZW5jZTtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgKyR7ZGlmZmVyZW5jZX0gd29ya2Vyc2AsICdncmVlbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdKys7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgJysxIHdvcmtlcicsICdncmVlbicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh3b3JrZXJzRGlzdHJpYnV0aW9uKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idG4tZGVjcmVtZW50JykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGpvYlR5cGUgPSB0aGlzLmNsb3Nlc3QoJy5qb2ItYnV0dG9uJykuZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDsgLy8gWCBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTsgLy8gWSBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG4gICAgICAgIHBsYXlTb3VuZCgnLi9hdWRpby9qb2Iud2F2Jyk7XHJcbiAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgIGxldCBudW1Xb3JrZXJzID0gam9iQ291bnRzW2pvYlR5cGVdO1xyXG4gICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0gPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKG51bVdvcmtlcnMgPiAwKSB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYC0ke251bVdvcmtlcnN9IHdvcmtlcnNgLCAncmVkJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgIC8vIFN1YnRyYWN0IDEwIG9yIG1heCBjbG9uZXNcclxuICAgICAgICAgICAgbGV0IGRpZmZlcmVuY2UgPSBNYXRoLm1pbigxMCwgam9iQ291bnRzW2pvYlR5cGVdKTtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdIC09IGRpZmZlcmVuY2U7XHJcbiAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgLSR7ZGlmZmVyZW5jZX0gd29ya2Vyc2AsICdyZWQnKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGpvYkNvdW50c1tqb2JUeXBlXSA+IDApIHtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdLS07XHJcblxyXG4gICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgJy0xIHdvcmtlcicsICdyZWQnKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKGpvYlR5cGUsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheShqb2JUeXBlKTtcclxuICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGdldFRvdGFsSm9icygpIHtcclxuICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICBmb3IgKGxldCBqIGluIGpvYkNvdW50cykge1xyXG4gICAgICAgIHRvdGFsICs9IGpvYkNvdW50c1tqXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0b3RhbDtcclxufVxyXG5cclxuLy8gR2xvYmFsIGZvciB3aGljaCByZXNvdXJjZSBlYWNoIGNsb25lIGdhdGhlcnNcclxubGV0IHdvcmtlcnNEaXN0cmlidXRpb24gPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIGRpc3RyaWJ1dGVXb3JrZXJzKHNraWxsLCB0b3RhbFdvcmtlcnMpIHtcclxuICAgIGlmICghc2tpbGxzW3NraWxsXSkgcmV0dXJuIG51bGw7ICAvLyBSZXR1cm4gbnVsbCBpZiB0aGUgc2tpbGwgZG9lc24ndCBleGlzdFxyXG5cclxuICAgIGxldCBhZmZlY3RlZFJlc291cmNlcyA9IHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXM7XHJcblxyXG4gICAgLy8gRmlsdGVyIGFmZmVjdGVkUmVzb3VyY2VzIHRvIG9ubHkgY29udGFpbiBrZXlzIHRoYXQgYXJlIHByZXNlbnQgaW4gdGhlIHJlc291cmNlcyBtYXBcclxuICAgIGFmZmVjdGVkUmVzb3VyY2VzID0gYWZmZWN0ZWRSZXNvdXJjZXMuZmlsdGVyKHJlc291cmNlID0+IHJlc291cmNlIGluIHJlc291cmNlcyk7XHJcblxyXG4gICAgLy8gbGV0IGE7XHJcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGFmZmVjdGVkUmVzb3VyY2VzLmxlbmd0aDsgYSA9IGFmZmVjdGVkUmVzb3VyY2VzW2ldKSB7XHJcblxyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgLy8gICAgIGlmICghcmVzb3VyY2VzW2FdKSB7XHJcblxyXG4gICAgLy8gICAgICAgICBjb25zdCBpbmRleCA9IGFmZmVjdGVkUmVzb3VyY2VzLmluZGV4T2YoYSk7XHJcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGEsIGluZGV4KTtcclxuICAgIC8vICAgICAgICAgbGV0IHggPSBhZmZlY3RlZFJlc291cmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICsraTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhhZmZlY3RlZFJlc291cmNlcyk7XHJcbiAgICBsZXQgbnVtYmVyT2ZSZXNvdXJjZXMgPSBhZmZlY3RlZFJlc291cmNlcy5sZW5ndGg7XHJcblxyXG4gICAgLy8gSW5pdGlhbCBldmVuIGRpc3RyaWJ1dGlvblxyXG4gICAgbGV0IHBlclJlc291cmNlID0gTWF0aC5mbG9vcih0b3RhbFdvcmtlcnMgLyBudW1iZXJPZlJlc291cmNlcyk7XHJcblxyXG4gICAgLy8gRXZlbmx5IGRpc3RyaWJ1dGUgd29ya2VycyBhbW9uZyB0aGUgYWZmZWN0ZWQgcmVzb3VyY2VzXHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBvZiBhZmZlY3RlZFJlc291cmNlcykge1xyXG4gICAgICAgIHdvcmtlcnNEaXN0cmlidXRpb24uc2V0KHJlc291cmNlLCBwZXJSZXNvdXJjZSk7XHJcbiAgICAgICAgaWYgKHBlclJlc291cmNlID4gMCkgbW92ZUJhbGxGcm9tSm9iVG9SZXNvdXJjZShza2lsbCwgcmVzb3VyY2UpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXN0cmlidXRlIGFueSByZW1haW5pbmcgd29ya2VycyBkdWUgdG8gcm91bmRpbmdcclxuICAgIGxldCByZW1haW5pbmdXb3JrZXJzID0gdG90YWxXb3JrZXJzIC0gKHBlclJlc291cmNlICogbnVtYmVyT2ZSZXNvdXJjZXMpO1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2Ugb2YgYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICBpZiAocmVtYWluaW5nV29ya2VycyA+IDApIHtcclxuICAgICAgICAgICAgd29ya2Vyc0Rpc3RyaWJ1dGlvbi5zZXQocmVzb3VyY2UsIHdvcmtlcnNEaXN0cmlidXRpb24uZ2V0KHJlc291cmNlKSArIDEpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdXb3JrZXJzLS07XHJcbiAgICAgICAgICAgIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoc2tpbGwsIHJlc291cmNlKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyh3b3JrZXJzRGlzdHJpYnV0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbW92ZUJhbGxGcm9tSm9iVG9SZXNvdXJjZShqb2JUeXBlLCBhZmZlY3RlZFJlc291cmNlKSB7XHJcbiAgICAvLyBGaW5kIHRoZSBqb2IgYnV0dG9uXHJcbiAgICBjb25zdCBqb2JCdXR0b24gPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJykpXHJcbiAgICAgICAgLmZpbmQoYnRuID0+IGJ0bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJykgPT09IGpvYlR5cGUpO1xyXG5cclxuICAgIGlmICgham9iQnV0dG9uIHx8IGpvYkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHJldHVybjsgLy8gSm9iIGJ1dHRvbiBub3QgZm91bmRcclxuXHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHJlc291cmNlLSR7YWZmZWN0ZWRSZXNvdXJjZX1gKTtcclxuICAgIGlmICghcmVzb3VyY2VEaXNwbGF5IHx8IHJlc291cmNlRGlzcGxheS5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHJldHVybjsgLy8gUmVzb3VyY2UgZGlzcGxheSBub3QgZm91bmRcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgcG9zaXRpb25zXHJcbiAgICBjb25zdCBqb2JCdXR0b25SZWN0ID0gam9iQnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgY29uc3QgcmVzb3VyY2VSZWN0ID0gcmVzb3VyY2VEaXNwbGF5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGJhbGwgZWxlbWVudFxyXG4gICAgY29uc3QgYmFsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYmFsbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICBiYWxsLnN0eWxlLndpZHRoID0gJzEwcHgnO1xyXG4gICAgYmFsbC5zdHlsZS5oZWlnaHQgPSAnMTBweCc7XHJcbiAgICBiYWxsLnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1MCUnO1xyXG4gICAgYmFsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xyXG4gICAgYmFsbC5zdHlsZS5vcGFjaXR5ID0gJy44JztcclxuICAgIGJhbGwuc3R5bGUubGVmdCA9IGAke2pvYkJ1dHRvblJlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYfXB4YDtcclxuICAgIGJhbGwuc3R5bGUudG9wID0gYCR7am9iQnV0dG9uUmVjdC50b3AgKyB3aW5kb3cuc2Nyb2xsWX1weGA7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJhbGwpO1xyXG5cclxuICAgIC8vIEFuaW1hdGUgdGhlIGJhbGxcclxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IGJhbGwuYW5pbWF0ZShbXHJcbiAgICAgICAgeyB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtyZXNvdXJjZVJlY3QubGVmdCAtIGpvYkJ1dHRvblJlY3QubGVmdH1weCwgJHtyZXNvdXJjZVJlY3QudG9wIC0gam9iQnV0dG9uUmVjdC50b3B9cHgpYCB9XHJcbiAgICBdLCB7XHJcbiAgICAgICAgZHVyYXRpb246IDEwMDAsIC8vIEFuaW1hdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcclxuICAgICAgICAvLyBmaWxsOiAnZm9yd2FyZHMnIC8vIEtlZXAgdGhlIGJhbGwgYXQgdGhlIGVuZCBwb3NpdGlvbiBhZnRlciBhbmltYXRpb25cclxuICAgICAgICBlYXNpbmc6ICdjdWJpYy1iZXppZXIoLjIzLC0wLjM0LDAsMS4wNiknXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBFdmVudCBsaXN0ZW5lciB0byBoaWRlIHRoZSBiYWxsIGFmdGVyIGFuaW1hdGlvblxyXG4gICAgYW5pbWF0aW9uLm9uZmluaXNoID0gKCkgPT4ge1xyXG4gICAgICAgIGJhbGwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH07XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0V29ya2VycyhyZXNvdXJjZU5hbWUpIHtcclxuICAgIHJldHVybiB3b3JrZXJzRGlzdHJpYnV0aW9uLmdldChyZXNvdXJjZU5hbWUpO1xyXG59XHJcblxyXG4vLyBjb25zdCBhbGxKb2JCdXR0b25icyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJyk7XHJcbmZ1bmN0aW9uIHVwZGF0ZURpc3BsYXkoam9iVHlwZSkge1xyXG4gICAgY29uc3QgdGhpc0pvYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5qb2ItYnV0dG9uW2RhdGEtam9iPVwiJHtqb2JUeXBlfVwiXWApO1xyXG4gICAgaWYgKCF0aGlzSm9iQnV0dG9uKSBjb25zb2xlLndhcm4oXCJDb3VsZG4ndCBmaW5kIGpvYiBidXR0b24gZm9yIGpvYjogXCIsIGpvYlR5cGUpO1xyXG4gICAgY29uc3Qgam9iRWxlbWVudCA9IHRoaXNKb2JCdXR0b24ucXVlcnlTZWxlY3RvcihgLmpvYi1uYW1lYCk7XHJcbiAgICBpZiAoam9iRWxlbWVudCkgam9iRWxlbWVudC50ZXh0Q29udGVudCA9IGAke2pvYlR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBqb2JUeXBlLnNsaWNlKDEpfTogJHtqb2JDb3VudHNbam9iVHlwZV19YDtcclxuXHJcbiAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLnVwZGF0ZUVtb2ppRGlzcGxheSgpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZSB0b3RhbCBhc3NpZ25lZCBjbG9uZXMgY291bnRlclxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlVG90YWwoKSB7XHJcbiAgICBjb25zdCB0b3RhbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjam9icy10b3RhbCcpO1xyXG4gICAgdG90YWxFbGVtZW50LnRleHRDb250ZW50ID0gXCJBc3NpZ25lZCBDbG9uZXM6IFwiICsgZ2V0VG90YWxKb2JzKCkgKyBcIiAvIFwiICsgZ2V0TWF4KCdjbG9uZXMnKTtcclxufVxyXG5cclxuXHJcbmxldCBzdGFydEJ1dHRvbiA9IG51bGw7XHJcbmxldCBjb25uZWN0aW9ucyA9IG5ldyBNYXAoKTsgIC8vIE1hcCB0byBzdG9yZSBjb25uZWN0aW9uc1xyXG5sZXQgbWFuYWdlbWVudCA9IHsgJ2Nvbm5lY3Rpb25zJzogY29ubmVjdGlvbnMsICdtaW5zJzoge30sICdtYXhlcyc6IHt9LCAndHJpZ2dlcnMnOiB7fSB9O1xyXG5sZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmVDYW52YXMnKTtcclxuXHJcbmZ1bmN0aW9uIHNldENvbm5lY3Rpb25zKG5ld0Nvbm5lY3Rpb25zKSB7XHJcbiAgICBjb25uZWN0aW9ucyA9IG5ld0Nvbm5lY3Rpb25zO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDb25uZWN0aW9ucygpIHtcclxuICAgIHJldHVybiBjb25uZWN0aW9ucztcclxufVxyXG5cclxuLy8gaWYgKGNhbnZhcykge1xyXG4vLyBAdHMtaWdub3JlXHJcbmxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuLy8gQHRzLWlnbm9yZVxyXG5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuLy8gQHRzLWlnbm9yZVxyXG5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4vLyB9XHJcblxyXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpO1xyXG5cclxuLy8gICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4vLyAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCcuYnRuLWRlY3JlbWVudCcpIHx8IGUudGFyZ2V0LmNsb3Nlc3QoJy5idG4taW5jcmVtZW50JykpIHJldHVybjtcclxuXHJcbi8vICAgICAgICAgICAgIGlmICghaXNQb25kZXJlZCgnbWFuYWdlbWVudCcpKSByZXR1cm47XHJcblxyXG4vLyAgICAgICAgICAgICBsZXQgam9iQnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdCgnLmpvYi1idXR0b24nKTtcclxuXHJcbi8vICAgICAgICAgICAgIGlmIChqb2JCdXR0b24pIHtcclxuLy8gICAgICAgICAgICAgICAgIGlmICghc3RhcnRCdXR0b24pIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbiA9IGpvYkJ1dHRvbjtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRCdXR0b24uaWQgJiYgam9iQnV0dG9uLmlkKSB7IC8vIEVuc3VyZSBib3RoIElEcyBhcmUgYXZhaWxhYmxlXHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbnMuc2V0KHN0YXJ0QnV0dG9uLmlkLCBqb2JCdXR0b24uaWQpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBEcmF3IGFsbCBjb25uZWN0aW9uc1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGRyYXdBbGxDb25uZWN0aW9ucygpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBSZXNldFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uID0gbnVsbDtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyBJRCBmb3Igb25lIG9mIHRoZSBidXR0b25zOicsIHN0YXJ0QnV0dG9uLCBqb2JCdXR0b24pO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ2xpY2tlZCBlbGVtZW50IGlzIG5vdCBpbnNpZGUgYSBqb2IgYnV0dG9uOicsIGUudGFyZ2V0KTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgaWYgKHN0YXJ0QnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIERyYXcgZXhpc3RpbmcgY29ubmVjdGlvbnNcclxuLy8gICAgICAgICAgICAgZHJhd0FsbENvbm5lY3Rpb25zKCk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBEcmF3IHRoZSBsaW5lIGZyb20gc3RhcnRCdXR0b24gdG8gY3VycmVudCBtb3VzZSBwb3NpdGlvblxyXG4vLyAgICAgICAgICAgICBkcmF3TGluZShzdGFydEJ1dHRvbiwgZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0pO1xyXG4vLyB9KTtcclxuXHJcbmZ1bmN0aW9uIGRyYXdBbGxDb25uZWN0aW9ucygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIHRyeSB7XHJcblxyXG5cclxuICAgICAgICBmb3IgKGxldCBbb2xkSWQsIG5ld0lkXSBvZiBjb25uZWN0aW9ucy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgbGV0IG9sZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9sZElkKTtcclxuICAgICAgICAgICAgbGV0IG5ld0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5ld0lkKTtcclxuICAgICAgICAgICAgbGV0IHJlY3QgPSBuZXdCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGxldCBuZXdYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIGxldCBuZXdZID0gMDtcclxuICAgICAgICAgICAgaWYgKHJlY3QuYm90dG9tID4gb2xkQnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSkgbmV3WSA9IG5ld0J1dHRvbi5vZmZzZXRUb3AgLSAxMDtcclxuICAgICAgICAgICAgZWxzZSBuZXdZID0gbmV3QnV0dG9uLm9mZnNldFRvcCArIG5ld0J1dHRvbi5vZmZzZXRIZWlnaHQgKyAxMDtcclxuICAgICAgICAgICAgZHJhd0xpbmUob2xkQnV0dG9uLCBuZXdYLCBuZXdZKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS53YXJuKCdkcmF3QWxsQ29ubmVjdGlvbnMnLCBlcnJvcik7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0Fycm93aGVhZChjb250ZXh0LCBmcm9tWCwgZnJvbVksIHRvWCwgdG9ZLCByYWRpdXMpIHtcclxuICAgIGxldCB4X2NlbnRlciA9IHRvWDtcclxuICAgIGxldCB5X2NlbnRlciA9IHRvWTtcclxuXHJcbiAgICBsZXQgYW5nbGU7XHJcbiAgICBsZXQgeDtcclxuICAgIGxldCB5O1xyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgYW5nbGUgPSBNYXRoLmF0YW4yKHRvWSAtIGZyb21ZLCB0b1ggLSBmcm9tWCk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0xpbmUoc3RhcnRFbGVtZW50LCBlbmRYLCBlbmRZKSB7XHJcbiAgICBsZXQgcmVjdCA9IHN0YXJ0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIC8vIGxldCBvZmZzZXQgPSBNYXRoLnJhbmRvbSgpICogMTAwICsgMTAwXHJcbiAgICBsZXQgc3RhcnRYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7IC8vIC0gb2Zmc2V0O1xyXG4gICAgLy8gZW5kWCAtPSBvZmZzZXQ7XHJcbiAgICBsZXQgc3RhcnRZID0gc2Nyb2xsWSArIHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyO1xyXG5cclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oc3RhcnRYLCBzdGFydFkpO1xyXG4gICAgY3R4LmxpbmVUbyhlbmRYLCBlbmRZKTtcclxuICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAvLyBEcmF3IGFycm93IGF0IHRoZSBlbmQgb2YgdGhlIGxpbmVcclxuICAgIGRyYXdBcnJvd2hlYWQoY3R4LCBzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgMTApOyAgLy8gYWRqdXN0IHRoZSBsYXN0IHBhcmFtZXRlciBmb3IgYXJyb3cgc2l6ZVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckpvYkFzc2lnbm1lbnRzKCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgY29ubmVjdGlvbnMgPSBuZXcgTWFwKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMoKSB7XHJcbiAgICAvLyBGb3IgZWFjaCBjb25uZWN0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBjb25uZWN0aW9ucy5lbnRyaWVzKCk7XHJcbiAgICAgICAgaWYgKGVudHJpZXMgPT09IHVuZGVmaW5lZCkgdGhyb3cgJ0VudHJpZXMgaXMgdW5kZWZpbmVkJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW29sZEpvYklkLCBuZXdKb2JJZF0gb2YgZW50cmllcykge1xyXG4gICAgICAgICAgICBsZXQgb2xkSm9iQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob2xkSm9iSWQpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YUpvYiA9IG9sZEpvYkJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvbGRJZCA9IG9sZEpvYklkLnJlcGxhY2UoJ2pvYi1idXR0b24tJywgJycpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdJZCA9IG5ld0pvYklkLnJlcGxhY2UoJ2pvYi1idXR0b24tJywgJycpO1xyXG4gICAgICAgICAgICBsZXQgbWF4ZWRPdXQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc291cmNlQXJyYXkgPSBza2lsbHNbZGF0YUpvYl0uYWZmZWN0ZWRSZXNvdXJjZXM7XHJcbiAgICAgICAgICAgIGlmICghcmVzb3VyY2VBcnJheSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZUFycmF5KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIHJlc291cmNlQXJyYXkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXRlcmlhbChyKSA8IHJlc291cmNlc1tyXS5tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyLCBnZXRNYXRlcmlhbChyKSwgcmVzb3VyY2VzW3JdLm1heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ZWRPdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1heGVkT3V0ICYmIGpvYkNvdW50c1tkYXRhSm9iXSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaEpvYihvbGRJZCwgbmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMob2xkSWQsIGpvYkNvdW50c1tvbGRJZF0pO1xyXG4gICAgICAgICAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMobmV3SWQsIGpvYkNvdW50c1tuZXdJZF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpZiAocmVzb3VyY2VzW2FmZmVjdGVkUmVzb3VyY2VdLmN1cnJlbnRWYWx1ZSA+PSByZXNvdXJjZXNbYWZmZWN0ZWRSZXNvdXJjZV0ubWF4VmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gICAgIHN3aXRjaEpvYihvbGRKb2JJZCwgbmV3Sm9iSWQpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS53YXJuKCdyZWFzc2lnbkpvYnMnLCBlcnJvcik7IH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN3aXRjaEpvYihvbGRKb2JJZCwgbmV3Sm9iSWQpIHtcclxuICAgIC8vIFRoaXMgZnVuY3Rpb24gc3dpdGNoZXMgd29ya2VycyBmcm9tIG9sZEpvYiB0byBuZXdKb2IuXHJcbiAgICAvLyBEZXBlbmRpbmcgb24geW91ciBhcHBsaWNhdGlvbiBzdHJ1Y3R1cmUsIHlvdSBjYW4gaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gYWNjb3JkaW5nbHkuXHJcbiAgICAvLyBGb3IgZXhhbXBsZSwgcmVkdWNlIHRoZSBjb3VudCBvZiB3b3JrZXJzIGluIG9sZEpvYiBhbmQgaW5jcmVhc2UgaW4gbmV3Sm9iLlxyXG4gICAgLy8gY29uc29sZS5sb2coYFN3aXRjaGluZyB3b3JrZXJzIGZyb20gJHtvbGRKb2JJZH0gdG8gJHtuZXdKb2JJZH1gKTtcclxuXHJcbiAgICBsZXQgd29ya2VycyA9IGpvYkNvdW50c1tvbGRKb2JJZF07XHJcbiAgICBqb2JDb3VudHNbb2xkSm9iSWRdID0gMDtcclxuICAgIGpvYkNvdW50c1tuZXdKb2JJZF0gKz0gd29ya2VycztcclxuICAgIHVwZGF0ZURpc3BsYXkob2xkSm9iSWQpO1xyXG4gICAgdXBkYXRlRGlzcGxheShuZXdKb2JJZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0QWxsSm9icygpIHtcclxuICAgIC8vIGpvYkNvdW50cyA9IHt9O1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgam9iQ291bnRzW3NraWxsXSA9IDA7XHJcbiAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMoc2tpbGwsIDApO1xyXG4gICAgICAgIHVwZGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheShza2lsbCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2xlYXJKb2JBc3NpZ25tZW50cyxcclxuICAgIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMsXHJcbiAgICBzd2l0Y2hKb2IsXHJcbiAgICBkcmF3QWxsQ29ubmVjdGlvbnMsXHJcbiAgICBnZXRXb3JrZXJzLFxyXG4gICAgdXBkYXRlVG90YWwsXHJcbiAgICBzZXRDb25uZWN0aW9ucyxcclxuICAgIGdldENvbm5lY3Rpb25zLFxyXG4gICAgZGlzdHJpYnV0ZVdvcmtlcnMsXHJcbiAgICB1cGRhdGVEaXNwbGF5LFxyXG4gICAgam9iQ291bnRzLFxyXG4gICAgcmVzZXRBbGxKb2JzXHJcbn07IiwiY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKFwiLi4vcGVya3NcIik7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKFwiLi4vcmVjYWxjTWF4Q2xvbmVzXCIpO1xyXG5jb25zdCB7IHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0IH0gPSByZXF1aXJlKFwiLi4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3RcIik7XHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCB9ID0gcmVxdWlyZShcIi4uL3VwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnRcIik7XHJcblxyXG5jb25zdCBidWlsZGluZ3MgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIT1VTSU5HXHJcbiAgICAgKi9cclxuICAgIFwic2hlbHRlclwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwic3RpY2tzXCI6IDMwIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJjbG9uZXNcIjogMSB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS40LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZvciB3aGVuIHlvdSBuZWVkIGEgaG9tZSBhd2F5IGZyb20gaG9tZS5cIixcclxuICAgICAgICBlbW9qaTogJ+WFqydcclxuICAgIH0sXHJcbiAgICAnaHV0Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICdzdGlja3MnOiA1MCwgJ3ZpbmVzJzogMzAgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHsgJ2Nsb25lcyc6IDEgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0EgY296eSwgaWR5bGxpYyBjaHVuayBvZiB3b29kLicsXHJcbiAgICAgICAgZW1vamk6ICflhoInXHJcbiAgICB9LFxyXG4gICAgXCJob3VzZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA1MCwgXCJyb2Nrc1wiOiAyMCwgJ2Zpc2gnOiAxMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiY2xvbmVzXCI6IDIgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJFdmVyeSBjbG9uZSdzIGRyZWFtLiBNaW51cyB0aGUgd2hpdGUgcGlja2V0IGZlbmNlLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn5LuLJ1xyXG4gICAgfSxcclxuICAgICd0ZWVwZWUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3dvb2QnOiAxMCwgJ2hpZGVzJzogMjUsICdmaXNoJzogMTUgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdjbG9uZXMnOiAyIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV3JhcCBzb21lIGhpZGVzIGFyb3VuZCBzb21lIHdvb2QgYW5kIGNhbGwgaXQgYSBob21lLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn56m0J1xyXG4gICAgfSxcclxuICAgICdob3NwaXRhbCc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyBjb25jcmV0ZTogMTAsIG1lZGljaW5lOiAyMCwgZmlzaDogMjAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdjbG9uZXMnOiAzIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdLZWVwIHlvdXJzZWxmIHNhZmUuJyxcclxuICAgICAgICBlbW9qaTogJysnXHJcbiAgICB9LFxyXG4gICAgJ2JhcnJhY2tzJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7IHNwZWFyOiAyMCwgdmlvbGVuY2U6IDEsIHdvb2Q6IDIwMCB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ2Nsb25lcyc6IDEsICd2aW9sZW5jZSc6IDIwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIGhhbGwgb2YgcmF1Y291cyBzb2xkaWVycy4nLFxyXG4gICAgICAgIGVtb2ppOiAn8JOIjydcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTVE9SQUdFXHJcbiAgICAgKi9cclxuICAgIFwic2hlZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA0MCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwid29vZFwiOiA1MCwgXCJzdGlja3NcIjogNTAsIFwicm9ja3NcIjogMjAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGUgdWx0aW1hdGUgc3RvcmFnZSBzb2x1dGlvbiBmb3IgdGhlIHBhY2sgcmF0IGluIHlvdS5cIixcclxuICAgICAgICBlbW9qaTogJ+S4qidcclxuICAgIH0sXHJcbiAgICAnc3RvY2twaWxlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7IHJvY2tzOiAzMCwgd29vZDogNDAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7IHdvb2Q6IDEwMCB9LFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkNodWNrIGEgYnVuY2ggb2YgbG9ncyBpbiBhIHBpbGUsIHdoYXQgY291bGQgaGFwcGVuP1wiLFxyXG4gICAgICAgIGVtb2ppOiAn5ZOBJ1xyXG4gICAgfSxcclxuICAgIFwiZHJ5aW5nX3JhY2tzXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJzdGlja3NcIjogMzAsIFwiZmlzaFwiOiA1IH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJmaXNoXCI6IDIwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQWlyIGRyeWluZzogTmF0dXJlJ3Mgd2F5IG9mIHByZXNlcnZpbmcgZm9vZC5cIixcclxuICAgICAgICBlbW9qaTogJ+WbmydcclxuICAgIH0sXHJcbiAgICBcIndvcmtzaG9wXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJ3b29kXCI6IDQwLCBcInN0aWNrc1wiOiAyMCwgXCJyb2Nrc1wiOiAxMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7ICdyb2Nrcyc6IDUwLCAnb3JlJzogNTAsICdzYW5kJzogMTAwLCAnY2xheSc6IDUwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRElZJ3MgZHJlYW0gZGVzdGluYXRpb24uXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk46wJ1xyXG4gICAgfSxcclxuICAgICdiYXJuJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHsgJ3dvb2QnOiAzMCwgJ3doZWF0JzogNSB9LFxyXG4gICAgICAgICdlZmZlY3RzJzogeyAnd2hlYXQnOiAxMDAsICd2aW5lcyc6IDQwIH0sXHJcbiAgICAgICAgJ2Jvb3N0Jzoge30sXHJcbiAgICAgICAgJ2NvdW50JzogMCxcclxuICAgICAgICAncmF0aW8nOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSGF5LCB3aGF0J3MgaW4gdGhhdCBidWlsZGluZz9cIixcclxuICAgICAgICBlbW9qaTogJ/CTj4YnXHJcbiAgICB9LFxyXG4gICAgJ2hlcmJhbGlzdF9odXQnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3N0aWNrcyc6IDUwLCAndmluZXMnOiA1MCwgJ2hlcmJzJzogNTAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdoZXJicyc6IDEwMCwgJ3ZpbmVzJzogMTAwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ2hlcmJzJzogMS4yLCB2aW5lczogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHBsYWNlIGZvciBicmV3aW5nIGFuZCBzdGV3aW5nLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOPgydcclxuICAgIH0sXHJcbiAgICBcImJha2VyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA4MCxcclxuICAgICAgICAgICAgXCJicmVhZFwiOiAxMCxcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgJ3doZWF0JzogMjAwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjI1LFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJGcmVzaGx5IGJha2VkIGJyZWFkLCBob3QgYW5kIHJlYWR5LlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOPlidcclxuXHJcbiAgICB9LFxyXG4gICAgXCJhbmltYWxfcGVuXCI6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBzdGlja3M6IDUwLFxyXG4gICAgICAgICAgICBnYW1lOiAyMCxcclxuICAgICAgICAgICAgZmlzaDogMjVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ2dhbWUnOiAxMDAsICdoaWRlcyc6IDMwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBwbGFjZSB0byBwdXQgdGhvc2UgbGVzc2VyIHRoYW4geW91LlwiLFxyXG4gICAgICAgIGVtb2ppOiAn55q/J1xyXG4gICAgfSxcclxuICAgICdyZXNlcnZvaXInOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgcm9ja3M6IDEwMCxcclxuICAgICAgICAgICAgY2xheTogNTAsXHJcbiAgICAgICAgICAgIHdhdGVyOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnd2F0ZXInOiAxMDAgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIGhvbGUgZmlsbGVkIHdpdGggd2F0ZXIuIFVzZWZ1bC5cIixcclxuICAgICAgICBlbW9qaTogJ/CTiJ4nXHJcbiAgICB9LFxyXG4gICAgJ3N0b25lX2RlcG90Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIHJvY2tzOiAyMDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ3JvY2tzJzogMjUwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBiaWcgc3RhY2sgb2Ygcm9ja3MuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4iTJ1xyXG4gICAgfSxcclxuICAgICd3YXJlaG91c2UnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgY3JhdGVzOiAxMCxcclxuICAgICAgICAgICAgY29uY3JldGU6IDIwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICd3b29kJzogMTAwLCAncm9ja3MnOiAxMDAsICdjbGF5JzogMTAwLCAnc2FuZCc6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnUHV0IHN0dWZmIGluIGEgYm94IGluc2lkZSBhIGxhcmdlciBib3guJyxcclxuICAgICAgICBlbW9qaTogJ/CTh6YnXHJcbiAgICB9LFxyXG4gICAgJ21pbGl0YXJ5X3NjaG9vbCc6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBicmlja3M6IDIwLFxyXG4gICAgICAgICAgICB2aW9sZW5jZTogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ3Zpb2xlbmNlJzogMTAwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3Zpb2xlbmNlJzogMS4wNSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdMZWFybiB0aGUgYXJ0IG9mIGh1cnRpbmcgb3RoZXJzLicsXHJcbiAgICAgICAgZW1vamk6ICfwk4e7J1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQUk9EVUNUSU9OIEJPT1NUXHJcbiAgICAgKi9cclxuICAgIFwiZ3JvdmVcIjoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICd3b29kJzogMjAsICd2aW5lcyc6IDIwIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3dvb2QnOiAxLjA1LCAnc3RpY2tzJzogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIG5pY2UgZ3JvdmUgb2YgdHJlZXMgdG8gZmluZCB3b29kIGZhc3Rlci5cIixcclxuICAgICAgICBlbW9qaTogJ/CThq3wk4atJ1xyXG4gICAgfSxcclxuICAgIFwiZmlzaF90cmFwc1wiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9wZVwiOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcImZpc2hcIjogMS4wNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZpc2hpbmcgbWFkZSBlYXN5LiBObyBwYXRpZW5jZSByZXF1aXJlZC5cIixcclxuICAgICAgICBlbW9qaTogJ+S6lSdcclxuICAgIH0sXHJcbiAgICBcIm1pbmVcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDMwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJvcmVcIjogMS4wNSwgJ3JvY2tzJzogMS4wNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkRpZyBkZWVwIGFuZCBmaW5kIHlvdXIgaW5uZXIgb3JlLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOKjSdcclxuICAgIH0sXHJcbiAgICBcImNhbXBmaXJlXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiAyMCxcclxuICAgICAgICAgICAgXCJzdGlja3NcIjogMjBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHsgJ2FsbCc6IDEuMDIgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV2hlcmUgc3RvcmllcyBhcmUgdG9sZCBhbmQgbWFyc2htYWxsb3dzIGFyZSB0b2FzdGVkLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn54GrJ1xyXG4gICAgfSxcclxuICAgIFwibHVtYmVyX3lhcmRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMjAwLFxyXG4gICAgICAgICAgICBcImlyb25cIjogMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMS4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV29vZCB5b3UgbGlrZSBzb21lIG1vcmUgd29vZD9cIixcclxuICAgICAgICBlbW9qaTogJ/CTjI8nXHJcbiAgICB9LFxyXG4gICAgXCJzdG9uZV9xdWFycnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDUwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMjAsXHJcbiAgICAgICAgICAgIFwicm9wZVwiOiAzMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlJvY2sgb24gd2l0aCB5b3VyIGJhZCBzZWxmIVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOKjidcclxuICAgIH0sXHJcbiAgICBcImZpc2hlcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogNDAsXHJcbiAgICAgICAgICAgIFwicm9wZVwiOiAxNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgJ2Zpc2gnOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZpc2ggYXJlIGZyaWVuZHMuIEFuZCBmb29kLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOMpCdcclxuICAgIH0sXHJcbiAgICAnaXJyaWdhdGlvbic6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBmcmVzaHdhdGVyOiAyMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgd2hlYXQ6IDEuMDUgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldldHRlbiB5b3VyIHdoZWF0IHdpdGggd2F0ZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4iXJ1xyXG4gICAgfSxcclxuICAgIFwidmluZXlhcmRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMjAsXHJcbiAgICAgICAgICAgIFwidmluZXNcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ2aW5lc1wiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGb3IgdGhlIGZpbmVzdCB2aW5lcy4gV2hhdCBlbHNlIHdvdWxkIGl0IGdyb3c/XCIsXHJcbiAgICAgICAgZW1vamk6ICfwn5yMJ1xyXG4gICAgfSxcclxuICAgIFwiZm9yZ2VcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDQwLFxyXG4gICAgICAgICAgICBcIm9yZVwiOiAyMCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDEwMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIm9yZVwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJNZWx0LCBtb2xkLCBhbmQgbWFrZSBtYXJ2ZWxvdXMgbWV0YWxzLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOKqydcclxuICAgIH0sXHJcbiAgICAnd2F0ZXJfcHVtcCc6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7XHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDMwLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgICAgICd3b29kJzogMTAsXHJcbiAgICAgICAgICAgICd3aGVhdCc6IDJcclxuICAgICAgICB9LFxyXG4gICAgICAgICdlZmZlY3RzJzogeyAnZnJlc2h3YXRlcic6IDMwIH0sXHJcbiAgICAgICAgJ2Jvb3N0Jzoge1xyXG4gICAgICAgICAgICAnZnJlc2h3YXRlcic6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2NvdW50JzogMCxcclxuICAgICAgICAncmF0aW8nOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRnJlc2ggd2F0ZXIgb24gZGVtYW5kIVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOPgidcclxuICAgIH0sXHJcbiAgICAndG93ZXInOiB7XHJcbiAgICAgICAgJ2Jhc2Vjb3N0Jzoge1xyXG4gICAgICAgICAgICAnYnJpY2tzJzogMjAsXHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDEwLFxyXG4gICAgICAgICAgICAnd29vZCc6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHt9LFxyXG4gICAgICAgICdib29zdCc6IHsgJ2hpZGVzJzogMS4wNSwgJ2dhbWUnOiAxLjEgfSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2VlIHRoaW5ncyBmcm9tIGFmYXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qiJ1xyXG4gICAgfSxcclxuICAgIFwidGFubmVyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA2MCxcclxuICAgICAgICAgICAgXCJoaWRlc1wiOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgJ2hpZGVzJzogNTAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJoaWRlc1wiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiVHJlYXQgaGlkZXMgdG8gbWFrZSBxdWFsaXR5IGxlYXRoZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4OUJ1xyXG4gICAgfSxcclxuICAgIFwibWFya2V0cGxhY2VcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDUwLFxyXG4gICAgICAgICAgICBcImdvbGRcIjogMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBhbGw6IDEuMDVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMjUsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkEgYnVzdGxpbmcgaHViIG9mIHRyYWRlIGFuZCBiYXJ0ZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfigr8nXHJcbiAgICB9LFxyXG4gICAgXCJ3aW5kbWlsbFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNjAsXHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3aGVhdFwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiR3JpbmQgZ3JhaW5zIGVmZmljaWVudGx5IHdpdGggd2luZCBwb3dlci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTh6wnXHJcbiAgICB9LFxyXG4gICAgJ2dhcmRlbic6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBiZWFtczogMjAsXHJcbiAgICAgICAgICAgIGhlcmJzOiAyMCxcclxuICAgICAgICAgICAgZnJlc2h3YXRlcjogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdoZXJicyc6IDEuMSwgJ3N0aWNrcyc6IDEuMDUgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIk5pY2UgbmF0dXJlLCBjYXJlZnVsbHkgY3VsdGl2YXRlZC5cIixcclxuICAgICAgICBlbW9qaTogJ/CThrcnXHJcbiAgICB9LFxyXG4gICAgJ3NhbmRfc2Nvb3AnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgYmVhbXM6IDEwLCBpcm9uOiA1IH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3NhbmQnOiAxLjEgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU2Nvb3AgdGhlIHNhbmQgZnJvbSB0aGUgc2hvcmU/IFN1cmUhJyxcclxuICAgICAgICBlbW9qaTogJ/CThJsnXHJcbiAgICB9LFxyXG4gICAgJ3RyYXBzJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7IG5haWxzOiAxMCwgc3RpY2tzOiAyMCwgaGVyYnM6IDIwLCB2aW5lczogMTUgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyAnZ2FtZSc6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV2F0Y2ggeW91ciBzdGVwIVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOEpidcclxuICAgIH0sXHJcbiAgICAncm9ja19yb2xlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7IHNsYWJzOiAyMCwgZnJlc2h3YXRlcjogMzAsIHZpbmVzOiAxNSB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdyb2Nrcyc6IDEuMiB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdJbiBvcmRlciB0byBnYXRoZXIgdGhlIHJvY2sgeW91IG11c3QgYmVjb21lIHRoZSByb2NrLicsXHJcbiAgICAgICAgZW1vamk6ICfwk4aHJ1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQT05ERVJcclxuICAgICAqL1xyXG4gICAgJ3RlbGVzY29wZSc6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBnbGFzczogMSxcclxuICAgICAgICAgICAgd29vZDogMTAsXHJcbiAgICAgICAgICAgIHBvbmRlcjogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7IHBvbmRlcjogMS4wNSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTG9vaywgdXAgaW4gdGhlIHNreSEgSXQncyBhIHN0YXIhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4ypJ1xyXG4gICAgfSxcclxuICAgIFwib2JzZXJ2YXRvcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcImJyaWNrc1wiOiA3MCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDMwLFxyXG4gICAgICAgICAgICBcImdsYXNzXCI6IDUwLFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiA1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTdGFyZ2F6aW5nIGhhcyBuZXZlciBiZWVuIHNvLi4uIHByb2R1Y3RpdmU/XCIsXHJcbiAgICAgICAgZW1vamk6ICfimIYnXHJcbiAgICB9LFxyXG4gICAgXCJsaWJyYXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDcwLFxyXG4gICAgICAgICAgICBcInBhcGVyXCI6IDI1LFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAyNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJwb25kZXJcIjogNTAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiS25vd2xlZGdlIGlzIHBvd2VyLiBBbmQgYSBmaXJlIGhhemFyZCBpZiBub3Qgc3RvcmVkIHByb3Blcmx5LlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8J+VridcclxuICAgIH0sXHJcbiAgICBcImRlc2tcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTUsXHJcbiAgICAgICAgICAgIFwic3RpY2tzXCI6IDIwLFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJwb25kZXJcIjogMzAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHsgXCJwb25kZXJcIjogMS4wNSB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHdyaXRlcidzIGJsb2NrIGlzIG5vIG1hdGNoIGZvciBhcm1vci1waWVyY2luZyBwZW5jaWxzIVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOKrCdcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldEJ1aWxkaW5nQ291bnQoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICByZXR1cm4gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV0uY291bnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nTmFtZSBcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIGdldEJvb3N0KGJ1aWxkaW5nTmFtZSwgcmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG4gICAgaWYgKGJ1aWxkaW5nICYmIGJ1aWxkaW5nLmJvb3N0KSB7XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmJvb3N0W3Jlc291cmNlXSkgcmV0dXJuIGJ1aWxkaW5nLmJvb3N0W3Jlc291cmNlXTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcuYm9vc3RbJ2FsbCddKSByZXR1cm4gYnVpbGRpbmcuYm9vc3RbJ2FsbCddO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gcmVzZXRCdWlsZGluZ3MoKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmdzKSkge1xyXG4gICAgICAgIHZhbFsnY291bnQnXSA9IDA7XHJcbiAgICAgICAgLy8gVXBkYXRlIGJ1dHRvbiB0ZXh0XHJcbiAgICAgICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChrZXksIDApO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIGNvc3Qgb2YgdGhlIGJ1aWxkaW5nXHJcbiAgICAgICAgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3Qoa2V5KTtcclxuXHJcbiAgICB9XHJcbiAgICAvLyBVcGRhdGUgbWF4IGNsb25lcyBhZnRlciB1cGRhdGluZyB0aGUgY291bnRcclxuICAgIHJlY2FsY01heENsb25lcygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1BvcEJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgc3dpdGNoIChidWlsZGluZ05hbWUpIHtcclxuICAgICAgICBjYXNlICdzaGVsdGVyJzpcclxuICAgICAgICBjYXNlICdodXQnOlxyXG4gICAgICAgIGNhc2UgJ2hvdXNlJzpcclxuICAgICAgICBjYXNlICd0ZWVwZWUnOlxyXG4gICAgICAgIGNhc2UgJ2hvc3BpdGFsJzpcclxuICAgICAgICBjYXNlICdiYXJyYWNrcyc6XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBidWlsZGluZ3MsXHJcbiAgICBnZXRCdWlsZGluZ0NvdW50LFxyXG4gICAgZ2V0Qm9vc3QsXHJcbiAgICByZXNldEJ1aWxkaW5ncyxcclxuICAgIGlzUG9wQnVpbGRpbmdcclxufTsiLCJjb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuLi9zdGFnZXMnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBoYXNUb29sIH0gPSByZXF1aXJlKCcuLi90b29scycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuXHJcbi8qIEJVVFRPTlMgKi9cclxuY29uc3QgYnV0dG9ucyA9IHtcclxuXHJcbiAgICAvKiBQUk9EVUNUSU9OIFRBQiAqL1xyXG4gICAgJ2dhdGhlclN0aWNrcyc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgc3RhcnRWaXNpYmxlJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOAnSBHYXRoZXIgU3RpY2tzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0ZpdmUsIFNpeCwgUGljayB1cCBzdGlja3MuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlIC8vIFRoaXMgYnV0dG9uIGlzIGFsd2F5cyB2aXNpYmxlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlclZpbmVzJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBzdGljaycsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTja8gR2F0aGVyIFZpbmVzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NvbWUgdmluZXMgYXJlIHJ1YmJlcnksIG90aGVycyBhcmUgZ3VtbXkuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRNYXRlcmlhbCgnc3RpY2tzJywgcmVzb3VyY2VzKSA+PSAxMCB8fCBwYXNzZWRTdGFnZSgndmluZXMnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJSb2Nrcyc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgc3RpY2snLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4qW8JOAqSBHYXRoZXIgUm9ja3MnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnTm90IGEgc2luZ2xlIHdpbmRvdyB0byB0aHJvdyB0aGVtIHRocm91Z2guJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRNYXRlcmlhbCgndmluZXMnLCByZXNvdXJjZXMpID49IDEwIHx8IHBhc3NlZFN0YWdlKCdyb2NrcycpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlckZpc2gnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIGZpc2hpbmcnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4adIPCThp8g8JOGniBHbyBGaXNoJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0dvdCBhbnkgdHVuYT8nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGhhc1Rvb2woJ1NwZWFyJykgfHwgaGFzVG9vbChcIkZpc2hpbmcgUm9kXCIpIHx8IHBhc3NlZFN0YWdlKCdmaXNoaW5nJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyV29vZCc6IHtcclxuICAgICAgICBjbGFzczogJ3dvb2RUb2dnbGUgd29vZCcsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTjI8gQ2hvcCBXb29kJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0FuIGF4ZSBodXJ0cyB3YXkgbGVzcyB0aGFuIHVzaW5nIHlvdXIgaGFuZHMuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGhhc1Rvb2woJ0F4ZScpIHx8IHBhc3NlZFN0YWdlKCd3b29kJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyT3JlJzoge1xyXG4gICAgICAgIFwiY2xhc3NcIjogXCJ0b29sdGlwIFwiLFxyXG4gICAgICAgIFwidGFiXCI6IFwicHJvZHVjdGlvblwiLFxyXG4gICAgICAgIFwidGV4dFwiOiBcIvCTibggTWluZSBPcmVcIixcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiRGlnZ3kgRGlnZ3kgSG9sZVwiLFxyXG4gICAgICAgIFwidG9vbHRpcENvc3RcIjogXCJGcmVlXCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGhhc1Rvb2woJ1BpY2theGUnKSB8fCBwYXNzZWRTdGFnZSgnb3JlJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcblxyXG5cclxuXHJcbiAgICAvKiBUQUJTICovXHJcbiAgICAncHJvZHVjdGlvblRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdQcm9kdWN0aW9uJyxcclxuICAgICAgICBzaG93VGFiOiAncHJvZHVjdGlvblRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZXhwZXJpbWVudFRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdFeHBlcmltZW50JyxcclxuICAgICAgICBzaG93VGFiOiAnZXhwZXJpbWVudFRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAncG9uZGVyVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1BvbmRlcicsXHJcbiAgICAgICAgc2hvd1RhYjogJ3BvbmRlclRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnam9ic1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdKb2JzJyxcclxuICAgICAgICBzaG93VGFiOiAnam9ic1RhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdqb2JzLXRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ3NraWxsc1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdTa2lsbHMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdza2lsbHNUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnc2tpbGxzVGFibGUnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdwZXJrc1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdQZXJrcycsXHJcbiAgICAgICAgc2hvd1RhYjogJ3BlcmtzVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BlcmtzVGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZmFjdG9yeVRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdGYWN0b3JpZXMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdmYWN0b3J5VGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ2ZhY3RvcnlUYWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdjb21iYXRUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiBcIkNvbWJhdFwiLFxyXG4gICAgICAgIHNob3dUYWI6ICdjb21iYXRUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnY29tYmF0VGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgLyogUE9OREVSIFRBQiAqL1xyXG4gICAgJ2dhdGhlclBvbmRlcic6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAnLFxyXG4gICAgICAgIHRleHQ6ICdQb25kZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnV3JhcCB5b3VyIGhlYWQgYXJvdW5kIHRoZSBncmVhdCBteXN0ZXJpZXMnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnVGltZScsXHJcbiAgICAgICAgdGFiOiAncG9uZGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGJ1dHRvbnM6IGJ1dHRvbnNcclxufTsiLCIvKiBDUkFGVElORyBSRVNPVVJDRVMgKi9cclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4uL2dldENyYWZ0ZWRSZXNvdXJjZScpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi4vc3RhZ2VzJyk7XHJcblxyXG5cclxuY29uc3QgY3JhZnRlZFJlc291cmNlcyA9IHtcclxuICAgICdzaGFycHJvY2tzJzoge1xyXG4gICAgICAgIHRleHQ6ICdTaGFycCBSb2NrcycsXHJcbiAgICAgICAgaWQ6ICdjcmFmdFNoYXJwcm9ja3NCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3JvY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdDcmFmdCBhIHJvY2sgdXNpbmcgbm90aGluZyBidXQgcm9ja3MhJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1JvY2tzOiA1JyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ3JvcGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFJvcGVCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3ZpbmVzJzogMyB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdUaGUgYmFzaXMgb2YgYXR0YWNoaW5nIHRoaW5ncyB0byBvdGhlciB0aGluZ3MuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1ZpbmVzOiAzJyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ2hhbmRsZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0SGFuZGxlQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdzdGlja3MnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NoZWFyIG9mZiB0aGF0IGJhcmsgdG8gaG9sZCBpdCBiZXR0ZXInLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU2hhcnAgUm9ja3M6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAnY3JhZnRSb2NrcydcclxuICAgICAgICAvLyB0b29sOiAnU2hhcnAgUm9jaydcclxuICAgIH0sXHJcbiAgICAnc3RhZmYnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFN0YWZmQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdoYW5kbGUnOiAyLCAncm9wZSc6IDEgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU3RpY2sgc29tZSBzaGVhcmVkIHN0aWNrcyB0b2dldGhlcicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdIYW5kbGVzOiAyJyxcclxuICAgICAgICBjbGFzczogJ3JvcGUnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ2Zpc2hpbmdyb2QnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEZpc2hpbmdyb2RCdXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdGaXNoaW5nIFJvZCcsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc3RhZmYnOiAxLCAncm9wZSc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJmaXNoaW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIHdlYXBvbiBmZWFyZWQgYnkgdW5kZXJ3YXRlciBsaWZlJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdmaXNoaW5nJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdzcGVhcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0U3BlYXJCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHtcclxuICAgICAgICAgICAgJ3N0YWZmJzogMSxcclxuICAgICAgICAgICAgJ3NoYXJwcm9ja3MnOiAxLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSBsb25nIGFuZCBwb2ludHkgc3RpY2snLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU3RhZmZzOiAxJyxcclxuICAgICAgICBjbGFzczogJ3JvcGUnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ2F4ZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0QXhlQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdoYW5kbGUnOiAxLCAncm9wZSc6IDEsICdzaGFycHJvY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInNwZWFyXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdQdXQgYSByb2NrIHN0cmFpZ2h0IHRocm91Z2ggdGhhdCBoYW5kbGUnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU3BlYXJzOiAxJyxcclxuICAgICAgICBjbGFzczogJ3NwZWFyJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdwaWNrYXhlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRQaWNrYXhlQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7XHJcbiAgICAgICAgICAgICdoYW5kbGUnOiAxLFxyXG4gICAgICAgICAgICAnc2hhcnByb2Nrcyc6IDMsXHJcbiAgICAgICAgICAgICdyb3BlJzogMSxcclxuICAgICAgICAgICAgJ3JvY2tzJzogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInNwZWFyXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTYWRseSBub3QgbWFkZSBvZiBkaWFtb25kcycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdBeGVzOiAxJyxcclxuICAgICAgICBjbGFzczogJ3NwZWFyJ1xyXG4gICAgfSxcclxuXHJcbiAgICAnZ2xhc3MnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEdsYXNzQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdzYW5kJzogMTAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdZb3UgY2FuIHNlZSByaWdodCB0aHJvdWdoIGl0IScsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJnbGFzc0Jsb3dpbmdcIixcclxuICAgICAgICBjbGFzczogJ2dsYXNzQmxvd2luZydcclxuICAgIH0sXHJcbiAgICAncGFwZXInOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFBhcGVyQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICd3b29kJzogMTIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdPdXRzb3VyY2UgeW91ciBtZW1vcnknLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicGFwZXJcIixcclxuICAgICAgICBjbGFzczogJ3BhcGVyJ1xyXG4gICAgfSxcclxuICAgICdnb2xkJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRHb2xkQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiAxMDAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJtZXRhbFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGVyZSdzIHNvbWUgeWVsbG93IGJpdHMgaW4gdGhpcyBvcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdtZXRhbFdvcmtpbmcnXHJcbiAgICB9LFxyXG4gICAgJ2lyb24nOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdElyb25CdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ29yZSc6IDIwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwibWV0YWxXb3JraW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHN0dXJkeS1sb29raW5nIGJpdHMgaW4gdGhpcyBvcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdtZXRhbFdvcmtpbmcnXHJcbiAgICB9LFxyXG4gICAgJ3NpbHZlcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0U2lsdmVyQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiA1MCB9LFxyXG5cclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJtZXRhbFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGVyZSdzIHNvbWUgc2hpbnkgZ3JheSBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdicmlja3MnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEJyaWNrc0J1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnY2xheSc6IDE1IH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwiY2xheVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkxlYXZlIHNvbWUgY2xheSBieSB0aGUgZmlyZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ2NsYXknXHJcbiAgICB9LFxyXG4gICAgJ2JyZWFkJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRCcmVhZEJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyB3aGVhdDogMTMgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogJ2FncmljdWx0dXJlJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJJJ20gZ29ubmEgZ3JpbmQgeW91ciB3aGVhdCB0byBtYWtlIG15IGJyZWFkIVwiLFxyXG4gICAgICAgIHRvb2x0aXBjb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ2FncmljdWx0dXJlJ1xyXG4gICAgfSxcclxuICAgICdzdGVlbCc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiA1IH0gfSxcclxuICAgICdiZWFtcyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3dvb2QnOiAxMCB9IH0sXHJcbiAgICAnY3JhdGVzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IDE1IH0gfSxcclxuICAgICduYWlscyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiAxIH0gfSxcclxuICAgICdzbGFicyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3JvY2tzJzogMjAgfSB9LFxyXG4gICAgJ21lZGljaW5lJzogeyB2YWx1ZTogMCwgY29zdDogeyAnaGVyYnMnOiA1MCB9IH0sXHJcbiAgICAnbGVhdGhlcic6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2hpZGVzJzogMTAgfSB9LFxyXG4gICAgJ2NvbmNyZXRlJzogeyB2YWx1ZTogMCwgY29zdDogeyAnc2FuZCc6IDMyIH0gfSxcclxuICAgICd3b29kJzogeyB2YWx1ZTogMCwgY29zdDogeyAnc3RpY2tzJzogOCB9IH0sXHJcbiAgICAnc3RpY2tzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IC4xIH0gfSxcclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkKGlkKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtjLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgaWYgKHZhbC5pZCA9PT0gaWQgfHwgdmFsLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyhjb25maWcpIHtcclxuICAgIGZvciAobGV0IGsgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGspO1xyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW2tdLmlkID09PSBjb25maWcuaWQpIHJldHVybiBrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0Q3JhZnRlZFJlc291cmNlcygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhjcmFmdGVkUmVzb3VyY2VzKSkge1xyXG4gICAgICAgIHZhbC52YWx1ZSA9IDA7XHJcbiAgICAgICAgdmFsLmNyYWZ0ZWRPbmNlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY3JhZnRlZFJlc291cmNlcyxcclxuICAgIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQsXHJcbiAgICBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyxcclxuICAgIHJlc2V0Q3JhZnRlZFJlc291cmNlc1xyXG59OyIsIlxyXG5cclxuLyoqXHJcbiAqIFRpZXIgMSAoNDAwIHBvbmRlcik6XHJcbiAqIFxyXG4gKiBMdW1iZXJqYWNrXHJcbiAqICArMjUlIHdvb2QgcHJvZHVjdGlvblxyXG4gKiAgKzI1JSBzdGlja3MgcHJvZHVjdGlvblxyXG4gKiBcclxuICogTWluZXJcclxuICogICsyNSUgc3RvbmUgJiBvcmUgcHJvZHVjdGlvblxyXG4gKiBcclxuICogQm90YW5pc3RcclxuICogICsyNSUgdmluZXMgJiBoZXJicyAmIHdoZWF0IHByb2R1Y3Rpb25cclxuICogXHJcbiAqIExlYWRlclxyXG4gKiAgNTAlIGNsb25lIGVmZmVjdGl2ZW5lc3NcclxuICogXHJcbiAqIEFyY2hpdGVjdFxyXG4gKiAgLTI1JSBidWlsZGluZyBjb3N0XHJcbiAqIFxyXG4gKiBcclxuICogVGllciAyICgxNTAwIHBvbmRlcik6XHJcbiAqIFxyXG4gKiBUaGlua2VyXHJcbiAqICArNTAlIHBvbmRlciBwcm9kdWN0aW9uIGFuZCBzdG9yYWdlXHJcbiAqICAtMjUlIHBvbmRlciBjb3N0XHJcbiAqIFxyXG4gKiBHZW5lcmFsXHJcbiAqICArNTAlIGNvbWJhdCBzdHJlbmd0aFxyXG4gKiAgKzI1JSBjbG9uZSBlZmZlY3RpdmVuZXNzXHJcbiAqIFxyXG4gKiBNZXJjaGFudFxyXG4gKiAgLTI1JSB0cmFkZSBwcmljZVxyXG4gKiAgKzI1JSBjaGFuY2Ugb2YgcmFyZSB0cmFkZVxyXG4gKiBcclxuICogR2VuZXJhbGlzdFxyXG4gKiAgKzEwJSBnbG9iYWwgcHJvZHVjdGlvblxyXG4gKiBcclxuICogU3BlY2lhbGlzdFxyXG4gKiAgKzEwMCUgc2tpbGwgZ2FpblxyXG4gKiAgKzEwJSBza2lsbCBib251cyB0byByZXNvdXJjZXNcclxuICogXHJcbiAqIFxyXG4gKiBcclxuICogXHJcbiAqL1xyXG5jb25zdCBwZXJrcyA9IHtcclxuICAgICd0aWVyMSc6IFsnTHVtYmVyamFjaycsICdNaW5lcicsICdCb3RhbmlzdCcsICdMZWFkZXInLCAnQXJjaGl0ZWN0J10sXHJcbiAgICAndGllcjInOiBbJ1RoaW5rZXInLCAnR2VuZXJhbCcsICdNZXJjaGFudCcsICdHZW5lcmFsaXN0JywgJ1NwZWNpYWxpc3QnXSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcGVya3M6IHBlcmtzXHJcbn07IiwiY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoXCIuLi9jYXBpdGFsaXplRmlyc3RcIik7XHJcblxyXG5sZXQgcG9uZGVycyA9IHtcclxuICAgIC8vICdwb25kZXIxJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyUG9uZGVyMScsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogMTAgfSxcclxuICAgIC8vICAgICB0ZXh0OiBcIlRoaW5rIEhhcmRlclwiLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG5cclxuICAgIC8vIH0sXHJcbiAgICAnam9icy10YWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJKb2JzLXRhYicsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMjAgfSxcclxuICAgICAgICB0ZXh0OiBcIlVuZGVyc3RhbmQgQ2xvbmluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnV2h5IGFyZSB0aGVyZSB0d28gb2YgeW91PycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTYW5pdHkgKDIwIFBvbmRlciknLFxyXG5cclxuICAgIH0sXHJcbiAgICAnc2tpbGxzVGFibGUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJTa2lsbHNUYWJsZScsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAgfSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJZb3UncmUgc3RhcnRpbmcgdG8gbGVhcm4gdGhpbmdzLCByaWdodD9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIk5vdGljZSBJbXByb3ZlbWVudFwiXHJcbiAgICB9LFxyXG4gICAgJ2Zpc2hpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGaXNoaW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MCwgJ2Zpc2gnOiA1MCB9LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldoYXQgaWYuLi4geW91ciBjbG9uZXMgY291bGQgZ28gZmlzaGluZz9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIkZpc2hpbmcgSm9iXCJcclxuICAgIH0sXHJcbiAgICAvLyAnbWljcm9tYW5hZ2VtZW50Jzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyTWljcm9tYW5hZ2VtZW50JyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAsICdjbG9uZXMnOiA1IH0sXHJcbiAgICAvLyAgICAgdGV4dDogXCJNaWNyb21hbmFnZW1lbnRcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJZb3UgbWFuYWdlZCB0byBtYWtlIGNsb25lcyBtYW5hZ2UgZWFjaCBvdGhlci5cIlxyXG4gICAgLy8gfSxcclxuICAgICdmYXN0ZXJTa2lsbHMnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYXN0ZXJTa2lsbHMnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDgwIH0sXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJTa2lsbHMgSVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoaW5rIFNtYXJ0ZXIuIDUlIGJvbnVzIHRvIHNraWxsIGV4cFwiXHJcbiAgICB9LFxyXG4gICAgJ3RoaW5raW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyVGhpbmtpbmcnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE1MCB9LFxyXG4gICAgICAgIHRleHQ6IFwiVGhpbmtpbmcgSm9iXCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTGV0IHlvdXIgY2xvbmVzIHN0YXJ0IHRoaW5raW5nIGZvciB0aGVtc2VsdmVzLlwiXHJcblxyXG4gICAgfSxcclxuICAgIC8vICdmYXN0ZXJSZXNvdXJjZUdhaW4nOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJGYXN0ZXJSZXNvdXJjZUdhaW4nLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwIH0sXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgdGV4dDogXCJQcm9kdWN0aXZpdHkgSVwiLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIkp1c3Qgd29yayBoYXJkZXIuIDUlIGJvbnVzIHRvIHJlc291cmNlIGdhaW5cIlxyXG4gICAgLy8gfSxcclxuICAgIC8vICdmYXN0ZXJSZXNvdXJjZUdhaW4yJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyRmFzdGVyUmVzb3VyY2VHYWluMicsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogMTIwIH0sXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgdGV4dDogXCJQcm9kdWN0aXZpdHkgSUlcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiA1JSBib251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgIC8vIH0sXHJcbiAgICAvLyAnZmFzdGVyUmVzb3VyY2VHYWluMyc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlckZhc3RlclJlc291cmNlR2FpbjMnLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwMCB9LFxyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgLy8gICAgIHRleHQ6IFwiUHJvZHVjdGl2aXR5IElJSVwiLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIkp1c3Qgd29yayBoYXJkZXIuIDUlIGJvbnVzIHRvIHJlc291cmNlIGdhaW5cIlxyXG4gICAgLy8gfSxcclxuICAgICdtZXRhbFdvcmtpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJNZXRhbFdvcmtpbmcnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiTWV0YWwgV29ya2luZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlN0YXJ0IHByb2Nlc3NpbmcgdGhhdCBvcmVcIixcclxuICAgICAgICAvLyBjb3N0OiBbeyBtYXRlcmlhbDogJ3BvbmRlcicsIGFtb3VudDogMTAwIH0sIHsgbWF0ZXJpYWw6ICdvcmUnLCBhbW91bnQ6IDUwIH0sIHsgbWF0ZXJpYWw6ICdyb2NrcycsIGFtb3VudDogNTAgfV1cclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMDAsICdvcmUnOiA1MCwgJ3JvY2tzJzogNTAgfSxcclxuICAgIH0sXHJcbiAgICAnZ2xhc3NCbG93aW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyR2xhc3NCbG93aW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiAnR2xhc3MgQmxvd2luZycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdIdWZmIGFuZCBwdWZmIGFuZCBtYWtlIGEgY29vbCB2YXNlJyxcclxuICAgICAgICBjb3N0OiB7ICdzYW5kJzogMjAsICdwb25kZXInOiA4MCB9XHJcbiAgICB9LFxyXG4gICAgJ29yZ2FuaXphdGlvbic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlck9yZ2FuaXphdGlvbicsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogJ09yZ2FuaXplZCBTdG9yYWdlJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ09yZ2FuaXplIHlvdXIgc3RvcmFnZSBieSBncm91cHMnLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCB9XHJcbiAgICB9LFxyXG4gICAgJ3BhcGVyJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUGFwZXInLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6ICdQYXBlciBQcm9jZXNzaW5nJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NtYXNoIGRvd24gc29tZSB3b29kIGludG8gcGFwZXInLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCwgJ3dvb2QnOiAxMDAgfVxyXG4gICAgfSxcclxuICAgICdhdXRvQ2xvbmUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJBdXRvQ2xvbmUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQXV0byBDbG9uZVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkF1dG9tYXRpY2FsbHkgcHJvZHVjZSBjbG9uZXNcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxNDAsICdjbG9uZXMnOiAyMCB9LFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyAnZWZmZWN0aXZlQnVpbGRpbmdzJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyRWZmZWN0aXZlQnVpbGRpbmdzJyxcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIkJ1aWxkaW5ncyBJXCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiSW5jcmVhc2UgYnVpbGRpbmcgZWZmZWN0cyBieSAzJVwiLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE4MCB9LFxyXG4gICAgLy8gfSxcclxuICAgICdhZ3JpY3VsdHVyZSc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckFncmljdWx0dXJlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkFncmljdWx0dXJlXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmluZCBzb21lIHNlZWRzIGZyb20gYWxsIHRob3NlIHBsYW50c1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE4MCB9XHJcbiAgICB9LFxyXG4gICAgJ2NvbWJhdFRhYic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckNvbWJhdFRhYicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJDb21iYXRcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJJcyB0aGVyZSBhbnlvbmUgdG8gc3BhciB3aXRoIGJlc2lkZXMgeW91P1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwMCwgJ3NwZWFyJzogMTAwIH1cclxuICAgIH0sXHJcbiAgICAnaHVudGluZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckh1bnRpbmcnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiSHVudGluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkF0IGxlYXN0IHRoZXJlIGFyZSBhbmltYWxzXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMjAwLCAnZmlzaCc6IDUwIH1cclxuICAgIH0sXHJcbiAgICAncGVya3NUYWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJQZXJrc1RhYicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogJ1BlcmtzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01heWJlIHlvdSBhcyB0aGUgb3JpZ2luYWwgc2hvdWxkIHNwZWNpYWxpemUnLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwMCB9XHJcbiAgICB9LFxyXG4gICAgLy8gJ2F1dG9jcmFmdCc6IHtcclxuICAgIC8vICAgICBpZDogXCJwb25kZXJBdXRvY3JhZnRcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIkF1dG8gQ3JhZnRcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJBdXRvbWF0aWNhbGx5IGNyYWZ0IHJlc291cmNlcyB3aGVuIHRoZXkgcmVhY2ggdGhlIHN0b3JhZ2UgbGltaXRcIixcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiA0MDAsICd3b29kJzogMTAwMCwgJ3JvY2tzJzogNTAwLCAnd2hlYXQnOiAxMDAwIH1cclxuICAgIC8vIH0sXHJcbiAgICAnZmFjdG9yeVRhYic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckZhY3RvcnlUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRmFjdG9yaWVzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQXNjZW5kIHRvIHRoZSBuZXh0IGxldmVsIG9mIGVjb25vbXlcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MDAsICdnb2xkJzogMTAsICd3b29kJzogMTAwMCwgJ3doZWF0JzogMTAwMCwgJ3JvY2tzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgLy8gJ3BvbmRlcjInOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJQb25kZXIyJyxcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIlRoaW5rIGV2ZW4gaGFyZGVyXCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiNSUgYm9vc3QgdG8gcG9uZGVyaW5nXCIsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogMzAwIH1cclxuICAgIC8vIH0sXHJcbiAgICAvLyAncG9uZGVyMyc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlclBvbmRlcjMnLFxyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIHRleHQ6IFwiVGhpbmsgaGFyZGVzdFwiLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDYwMCB9XHJcbiAgICAvLyB9LFxyXG4gICAgJ2JpZ2dlclNoZWx0ZXInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJTaGVsdGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkV4cGFuZCBTaGVsdGVyXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2hlbHRlcnMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAwLCAnc3RpY2tzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2JpZ2dlckh1dCc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckJpZ2dlckh1dCcsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJFeHBhbmQgSHV0XCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSHV0cyBjYW4gaG91c2UgMSBtb3JlIGNsb25lIGVhY2hcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA3NTAsICdzdGlja3MnOiAxNTAwLCAndmluZXMnOiAxMDAwIH1cclxuICAgIH0sXHJcbiAgICAnYmlnZ2VySG91c2UnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJIb3VzZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJUd28tc3RvcnkgaG91c2VzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSG91c2VzIGNhbiBob3VzZSAyIG1vcmUgY2xvbmVzIGVhY2hcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMDAwLCAnd29vZCc6IDIwMDAsICdyb2Nrcyc6IDIwMDAgfVxyXG4gICAgfSxcclxuICAgICdiaWdnZXJUZWVwZWUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJUZWVwZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRG91YmxlIGRpYW1ldGVyIFRlZXBlZXNcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUZWVwZWVzIGNhbiBob3VzZSA0IG1vcmUgY2xvbmVzIGVhY2hcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMjUwLCAnd29vZCc6IDMwMDAsICdoaWRlcyc6IDE1MDAgfVxyXG4gICAgfSxcclxuICAgICdldmVuQmlnZ2VyU2hlbHRlcic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckV2ZW5CaWdnZXJTaGVsdGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkV4cGFuZCBTaGVsdGVyIEFnYWluXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2hlbHRlcnMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTUwMCwgJ3N0aWNrcyc6IDMwMDAsICdmaXNoJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2VhdEJyZWFkJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRWF0QnJlYWQnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRWF0IEJyZWFkXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRWF0aW5nIHNvbWUgYnJlYWQgd2lsbCBoZWxwIHlvdSB3b3JrIGZhc3RlclwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwMCwgJ2JyZWFkJzogMzAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVzZXRQb25kZXJzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHBvbmRlcnMpKSB7XHJcbiAgICAgICAgdmFsLmlzUG9uZGVyZWQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0b1JvbWFuKG51bSkge1xyXG4gICAgY29uc3Qgcm9tYW5OdW1lcmFscyA9IFtcclxuICAgICAgICB7IHZhbHVlOiAxMDAwLCBudW1lcmFsOiAnTScgfSxcclxuICAgICAgICB7IHZhbHVlOiA5MDAsIG51bWVyYWw6ICdDTScgfSxcclxuICAgICAgICB7IHZhbHVlOiA1MDAsIG51bWVyYWw6ICdEJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDQwMCwgbnVtZXJhbDogJ0NEJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDEwMCwgbnVtZXJhbDogJ0MnIH0sXHJcbiAgICAgICAgeyB2YWx1ZTogOTAsIG51bWVyYWw6ICdYQycgfSxcclxuICAgICAgICB7IHZhbHVlOiA1MCwgbnVtZXJhbDogJ0wnIH0sXHJcbiAgICAgICAgeyB2YWx1ZTogNDAsIG51bWVyYWw6ICdYTCcgfSxcclxuICAgICAgICB7IHZhbHVlOiAxMCwgbnVtZXJhbDogJ1gnIH0sXHJcbiAgICAgICAgeyB2YWx1ZTogOSwgbnVtZXJhbDogJ0lYJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDUsIG51bWVyYWw6ICdWJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDQsIG51bWVyYWw6ICdJVicgfSxcclxuICAgICAgICB7IHZhbHVlOiAxLCBudW1lcmFsOiAnSScgfVxyXG4gICAgXTtcclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICBmb3IgKGNvbnN0IG51bWVyYWwgb2Ygcm9tYW5OdW1lcmFscykge1xyXG4gICAgICAgIHdoaWxlIChudW0gPj0gbnVtZXJhbC52YWx1ZSkge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gbnVtZXJhbC5udW1lcmFsO1xyXG4gICAgICAgICAgICBudW0gLT0gbnVtZXJhbC52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGFkZFBvbmRlcnMoY291bnQpIHtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGNvdW50OyBpKyspIHtcclxuICAgICAgICBjb25zdCBpZCA9IGBmYXN0ZXJSZXNvdXJjZUdhaW4ke2l9YDtcclxuICAgICAgICBwb25kZXJzW2lkXSA9IHtcclxuICAgICAgICAgICAgaWQ6IGBwb25kZXJGYXN0ZXJSZXNvdXJjZUdhaW4ke2l9YCxcclxuICAgICAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwICogTWF0aC5wb3coMywgaSAtIDEpIH0sXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgICAgICB0ZXh0OiBgUHJvZHVjdGl2aXR5ICR7dG9Sb21hbihpKX1gLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiA1JSBib251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGNvdW50OyBpKyspIHtcclxuICAgICAgICBwb25kZXJzW2BmYXN0ZXJQb25kZXIke2l9YF0gPSB7XHJcbiAgICAgICAgICAgIGlkOiBgcG9uZGVyRmFzdGVyUG9uZGVyJHtpfWAsXHJcbiAgICAgICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMCAqIE1hdGgucG93KDUsIGkgLSAxKSB9LFxyXG4gICAgICAgICAgICB0ZXh0OiBgVGhpbmsgSGFyZGVyICR7dG9Sb21hbihpKX1gLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogYDUlIGJvb3N0IHRvIHBvbmRlcmluZ2AsXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gY291bnQ7IGkrKykge1xyXG4gICAgICAgIHBvbmRlcnNbYGVmZmVjdGl2ZUJ1aWxkaW5ncyR7aX1gXSA9IHtcclxuICAgICAgICAgICAgaWQ6IGBwb25kZXJFZmZlY3RpdmVCdWlsZGluZ3Mke2l9YCxcclxuICAgICAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwICogTWF0aC5wb3coMywgaSAtIDEpIH0sXHJcbiAgICAgICAgICAgIHRleHQ6IGBCdWlsZGluZ3MgJHt0b1JvbWFuKGkpfWAsXHJcbiAgICAgICAgICAgIHRvb2x0aXBEZXNjOiBcIkluY3JlYXNlIGJ1aWxkaW5nIGVmZmVjdHMgYnkgMyVcIixcclxuICAgICAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuYWRkUG9uZGVycygxMDApO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBwb25kZXJzOiBwb25kZXJzLFxyXG4gICAgcmVzZXRQb25kZXJzXHJcbn07IiwiY29uc3QgcHJlc3RpZ2UgPSB7XHJcbiAgICAnbWF4Q2xvbmVzJzoge1xyXG4gICAgICAgIHRleHQ6ICdDcmFtcGVkJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01heCBDbG9uZXMgKCsxKScsXHJcbiAgICAgICAgY29zdDogMixcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdjbG9uZUJvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdIYW5keW1hbicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdDbG9uZSBQcm9kdWN0aXZpdHkgKCs1JSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyaW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ1BpY2tlcicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdHYXRoZXJpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnbWFzb25yeUJvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdSb2NrZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnTWFzb25yeSBFZmZpY2llbmN5ICgrMTAlKScsXHJcbiAgICAgICAgY29zdDogMSxcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdjYXJwZW50cnlCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnQ2hvcHBlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdDYXJwZW50cnkgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAndGhpbmtpbmdCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnV2l6ZW5lZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdUaGlua2luZyBFZmZpY2llbmN5ICgrMTAlKScsXHJcbiAgICAgICAgY29zdDogMSxcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdmYXJtaW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ1BydW5lZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGYXJtaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2Zpc2hpbmdCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnSG9va2VkJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0Zpc2hpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnaHVudGluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdUcmFja2VyJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0h1bnRpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2hlYXBlckJ1aWxkaW5ncyc6IHtcclxuICAgICAgICB0ZXh0OiAnUmlja2V0eScsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdCdWlsZGluZyBDb3N0ICgtNSUpJyxcclxuICAgICAgICBjb3N0OiAyLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ3N0b3JhZ2VTcGFjZSc6IHtcclxuICAgICAgICB0ZXh0OiAnU3R1ZmZlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTdG9yYWdlIFNwYWNlICgrNSUpJyxcclxuICAgICAgICBjb3N0OiAyLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBoYXNQcmVzdGlnZShwcmVzKSB7XHJcbiAgICByZXR1cm4gZ2V0TGV2ZWxPZlByZXN0aWdlKHByZXMpID4gMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TGV2ZWxPZlByZXN0aWdlKHByZXMpIHtcclxuICAgIHJldHVybiBwcmVzdGlnZVtwcmVzXS5sZXZlbDtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHByZXN0aWdlLFxyXG4gICAgaGFzUHJlc3RpZ2UsXHJcbiAgICBnZXRMZXZlbE9mUHJlc3RpZ2VcclxufTsiLCIvLyBTdGF0ZSBvZiBlYWNoIHJlc291cmNlXHJcblxyXG4vLyBUT0RPOiBBREQgUkVRVUlSRU1FTlRTIEZPUiBFQUNIIFRPIE1BS0UgVEhFTSBWSVNJQkxFXHJcbi8vIG9yIGp1c3QgZGlzcGxheSB0aGVtIHdoZW4geW91IGdldCB5b3VyIGZpcnN0IG9uZT9cclxuY29uc3QgcmVzb3VyY2VzID0ge1xyXG4gICAgXCJjbG9uZXNcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJtYWtlQ2xvbmVcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgbWF4OiAwXHJcbiAgICB9LFxyXG5cclxuICAgIFwic3RpY2tzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyU3RpY2tzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogdHJ1ZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4ax8JOAnCBHYXRoZXJpbmcgU3RpY2tzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThrEgR2F0aGVyIFN0aWNrc1wiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgJ0nLFxyXG4gICAgICAgIG1heDogNTBcclxuICAgIH0sXHJcbiAgICBcInZpbmVzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyVmluZXNcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk42v8JOAqiBHYXRoZXJpbmcgVmluZXNcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JONryBHYXRoZXIgVmluZXNcIixcclxuICAgICAgICBcInRvb2xzXCI6IFt7IFwidG9vbFwiOiBcIkF4ZVwiLCBcInZhbFwiOiAxLjUgfV0sXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqicsXHJcbiAgICAgICAgbWF4OiA1MFxyXG4gICAgfSxcclxuICAgIFwicm9ja3NcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJSb2Nrc1wiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTipbwk4CpIEdhdGhlcmluZyBSb2Nrc1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4qWIEdhdGhlciBSb2Nrc1wiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgIG1heDogMzBcclxuICAgIH0sXHJcbiAgICBcImZpc2hcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJGaXNoXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOGnfCThp/wk4aeIPCTgYMgR29uZSBGaXNoaW5nXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThp3wk4af8JOGniBHbyBGaXNoXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOBgycsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJTcGVhclwiLCBcInZhbFwiOiAxIH0sIHsgXCJ0b29sXCI6IFwiRmlzaGluZyBSb2RcIiwgXCJ2YWxcIjogMiB9XSxcclxuICAgICAgICBtYXg6IDEwXHJcbiAgICB9LFxyXG4gICAgXCJ3b29kXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyV29vZFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgKggQ2hvcHBpbmcgV29vZFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4yPIENob3AgV29vZFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqCcsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJBeGVcIiwgXCJ2YWxcIjogMS41IH0sIHsgXCJ0b29sXCI6IFwiQ2hhaW5zYXdcIiwgXCJ2YWxcIjogMyB9XSxcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgbWF4OiA0MFxyXG4gICAgfSxcclxuICAgIFwicG9uZGVyXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyUG9uZGVyXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAgSBQb25kZXJpbmdcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAgSBQb25kZXJcIixcclxuICAgICAgICBlbW9qaTogJ/CTgIEnLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJvcmVcIjoge1xyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyT3JlXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOJuPCTgYQgTWluaW5nIE9yZVwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4m4IE1pbmUgT3JlXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4GEJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJzYW5kXCI6IHtcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclNhbmRcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CpIFNjb29waW5nIFNhbmRcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAqSBTY29vcCBTYW5kXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJ3aGVhdFwiOiB7XHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJXaGVhdFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgKkgSGFydmVzdGluZyBXaGVhdFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4CpIEhhcnZlc3QgV2hlYXRcIixcclxuICAgICAgICBlbW9qaTogJ/CTgJ0nLFxyXG4gICAgICAgIG1heDogMjBcclxuICAgIH0sXHJcbiAgICAnZnJlc2h3YXRlcic6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJGcmVzaHdhdGVyJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2hpZGVzJzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckhpZGVzJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAjicsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcblxyXG4gICAgfSxcclxuICAgICdjbGF5Jzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckNsYXknLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnaGVyYnMnOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVySGVyYnMnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnZ2FtZSc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJHYW1lJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ/CTg5rwk4COIEh1bnRpbmcnLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICfwk4COIEh1bnQnLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAjicsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2h1c2tzJzoge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGlkOiAnZ2F0aGVySHVza3MnLFxyXG4gICAgICAgIGlzR2V0dGluZzogZmFsc2UsXHJcbiAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVUZXh0OiAnJyxcclxuICAgICAgICBkZWZhdWx0VGV4dDogXCJcIixcclxuICAgICAgICBlbW9qaTogJ1gnLFxyXG4gICAgICAgICdtYXgnOiAxMDAwXHJcbiAgICB9LFxyXG4gICAgJ3Zpb2xlbmNlJzoge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGlkOiAnZ2F0aGVyVmlvbGVuY2UnLFxyXG4gICAgICAgIGlzR2V0dGluZzogZmFsc2UsXHJcbiAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVUZXh0OiAnJyxcclxuICAgICAgICBkZWZhdWx0VGV4dDogJycsXHJcbiAgICAgICAgZW1vamk6ICcnLFxyXG4gICAgICAgIG1heDogMTAwXHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIC8vIHJldHVybiByZXNvdXJjZXNbcmVzb3VyY2VdICE9PSBudWxsO1xyXG4gICAgcmV0dXJuIHJlc291cmNlIGluIHJlc291cmNlcztcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQoaWQpIHtcclxuICAgIGZvciAobGV0IHIgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKHJlc291cmNlc1tyXS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlc1tyXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRSZXNvdXJjZXMoKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG4gICAgICAgIHZhbC52YWx1ZSA9IDA7XHJcbiAgICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICByZXNvdXJjZXM6IHJlc291cmNlcyxcclxuICAgIGlzUmVzb3VyY2UsXHJcbiAgICBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQsXHJcbiAgICByZXNldFJlc291cmNlc1xyXG59OyIsImNvbnN0IHNraWxscyA9IHtcclxuICAgIGdhdGhlcmluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydzdGlja3MnLCAndmluZXMnLCAnc2FuZCcsICdoZXJicycsICdiZXJyaWVzJ11cclxuICAgIH0sXHJcbiAgICBtYXNvbnJ5OiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3JvY2tzJywgJ29yZScsICdjbGF5J10sXHJcbiAgICAgICAgbmVlZFRvb2xzOiBbeyAnUGlja2F4ZSc6IFsnb3JlJ10gfV1cclxuICAgIH0sXHJcbiAgICBjYXJwZW50cnk6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnd29vZCcsICdoYW5kbGUnLCAnc3RhZmYnLCAnZmlzaGluZ3JvZCddLFxyXG4gICAgICAgIG5lZWRUb29sczogW3sgJ0F4ZSc6IFsnd29vZCddIH1dXHJcbiAgICB9LFxyXG4gICAgdGhpbmtpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsncG9uZGVyJ11cclxuICAgIH0sXHJcbiAgICAvLyBzbWl0aGluZzoge1xyXG4gICAgLy8gICAgIGV4cDogMCxcclxuICAgIC8vICAgICBsZXZlbDogMCxcclxuICAgIC8vICAgICBhZmZlY3RlZFJlc291cmNlczogWydheGUnLCAncGlja2F4ZScsICdzcGVhcicsICdnbGFzcycsICdpcm9uJywgJ3NpbHZlcicsICdnb2xkJ11cclxuICAgIC8vIH0sXHJcbiAgICBmYXJtaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3doZWF0JywgJ2ZyZXNod2F0ZXInXVxyXG4gICAgfSxcclxuICAgIGNvbWJhdDoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWyd2aW9sZW5jZSddXHJcbiAgICB9LFxyXG4gICAgZmlzaGluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydmaXNoJ11cclxuICAgIH0sXHJcbiAgICBodW50aW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2hpZGVzJywgJ2dhbWUnXVxyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBza2lsbHM6IHNraWxsc1xyXG59OyIsImNvbnN0IHsgY3JhZnRlZFJlc291cmNlcywgcmVzZXRDcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1aWxkaW5ncywgcmVzZXRCdWlsZGluZ3MgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpO1xyXG5jb25zdCB7IHBvbmRlcnMsIHJlc2V0UG9uZGVycyB9ID0gcmVxdWlyZShcIi4vanNvbi9wb25kZXJcIik7XHJcbmNvbnN0IHsgYnV0dG9ucyB9ID0gcmVxdWlyZShcIi4vanNvbi9idXR0b25zXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcywgcmVzZXRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuXHJcbmNvbnN0IHsgc2F2ZUdhbWUsIGxvYWRHYW1lIH0gPSByZXF1aXJlKFwiLi9zYXZpbmdcIik7XHJcbmNvbnN0IHsgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucywgaW5jcmVhc2VNYXRlcmlhbCwgY3JhZnRBbGxSZXNvdXJjZXMsIGNyYWZ0UmVzb3VyY2UsIGNhbGNJbmNyZWFzZSwgdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzLCBpbmNyZWFzZU1heCwgc2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnV5TWF4QnVpbGRpbmdzLCBidXlCdWlsZGluZywgfSA9IHJlcXVpcmUoJy4vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgc2VsZWN0QWJpbGl0eSwgcmVzZXRQZXJrcyB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IGNsZWFyU2lkZWJhciwgZ2V0TWF4IH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IG1ha2VWaXNpYmxlIH0gPSByZXF1aXJlKCcuL21ha2VWaXNpYmxlJyk7XHJcbmNvbnN0IHsgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdXR0b25WaXNpYmlsaXR5Jyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlIH0gPSByZXF1aXJlKCcuL2dldENyYWZ0ZWRSZXNvdXJjZScpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgYnV5RmFjdG9yeSwgYXR0ZW1wdE1hbnVmYWN0dXJlLCB1cGdyYWRlQnVsaywgYWxsTWF0ZXJpYWxzIH0gPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkLCBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL3BvbmRlclwiKTtcclxuY29uc3QgeyBoYXNUb29sLCBhZGRUb29sIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgZ2V0QXRlRmlzaCwgc2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG90YWwsIGNsZWFySm9iQXNzaWdubWVudHMsIHJlc2V0QWxsSm9icyB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlLCByZXNldFN0YWdlcyB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuY29uc3QgeyByZWNhbGNNYXhDbG9uZXMgfSA9IHJlcXVpcmUoJy4vcmVjYWxjTWF4Q2xvbmVzJyk7XHJcbmNvbnN0IHsgaW5pdGlhbGl6ZVJlc291cmNlVGFncywgdXBkYXRlU2lkZWJhciwgdXBkYXRlRGlzcGxheVZhbHVlIH0gPSByZXF1aXJlKCcuL3NpZGViYXInKTtcclxuY29uc3QgeyBwcmVzdGlnZSB9ID0gcmVxdWlyZSgnLi9qc29uL3ByZXN0aWdlJyk7XHJcbmNvbnN0IHsgdHJpZ2dlckZsb2F0VXBUZXh0IH0gPSByZXF1aXJlKCcuL3RyaWdnZXJGbG9hdFVwVGV4dCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJvdW5jZUFuaW1hdGlvbiB9ID0gcmVxdWlyZSgnLi91cGRhdGVCb3VuY2VBbmltYXRpb24nKTtcclxuY29uc3QgeyB1cGRhdGVUb29sdGlwLCBoaWRlVG9vbHRpcCB9ID0gcmVxdWlyZSgnLi91cGRhdGVUb29sdGlwJyk7XHJcbmNvbnN0IHsgY2FuQ3JhZnQgfSA9IHJlcXVpcmUoJy4vY2FuQ3JhZnQnKTtcclxuY29uc3QgeyBjYWxjdWxhdGVXaW5DaGFuY2UsIGNvbWJhdCwgc3dpdGNoU3RhbmNlIH0gPSByZXF1aXJlKCcuL2NvbWJhdCcpO1xyXG5jb25zdCB7IHNob3dUYWIsIGdldEN1cnJlbnRUYWIgfSA9IHJlcXVpcmUoJy4vc2hvd1RhYicpO1xyXG5jb25zdCB7IGdldFNmeFZvbHVtZSwgZ2V0TXVzaWNWb2x1bWUsIHNldE11c2ljVm9sdW1lLCBzZXRTZnhWb2x1bWUsIHBsYXlTb3VuZCB9ID0gcmVxdWlyZSgnLi9hdWRpbycpO1xyXG5jb25zdCB7IGdlbmVyYXRlUmFuZG9tQnVpbGRpbmcgfSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVSYW5kb21CdWlsZGluZycpO1xyXG5jb25zdCB7IGNoYW5nZU1lc3NhZ2UsIG1lc3NhZ2VFbGVtZW50IH0gPSByZXF1aXJlKCcuL2NoYW5nZU1lc3NhZ2UnKTtcclxuY29uc3QgeyBnZW5lcmF0ZUJ1dHRvbnMgfSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVCdXR0b25zJyk7XHJcbmNvbnN0IHsgdG9nZ2xlUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2F0aGVyaW5nJyk7XHJcbmNvbnN0IHsgR2FtZVNpbXVsYXRvciB9ID0gcmVxdWlyZSgnLi9HYW1lU2ltdWxhdG9yJyk7XHJcbmNvbnN0IHsgaW5pdGlhbGl6ZUFwcCB9ID0gcmVxdWlyZSgnQGZpcmViYXNlL2FwcCcpO1xyXG5jb25zdCB7IGdldEFuYWx5dGljcyB9ID0gcmVxdWlyZSgnQGZpcmViYXNlL2FuYWx5dGljcycpO1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBzZXRUb3RhbFRpbWUodGltZSkge1xyXG4gICAgdG90YWxfdGltZSA9IHRpbWU7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCB0b29sc1RvU3RhZ2VzID0ge1xyXG4gICAgJ1NoYXJwUm9ja3MnOiAnY3JhZnRSb2NrcycsXHJcbiAgICAnU3BlYXInOiAnZmlzaGluZycsXHJcbiAgICBcIkZpc2hpbmdSb2RcIjogJ2Zpc2hpbmcnLFxyXG4gICAgJ0F4ZSc6ICd3b29kJyxcclxuICAgIFwiUGlja2F4ZVwiOiAnb3JlJ1xyXG59O1xyXG5cclxuLy8gVXBkYXRlIHZpc2liaWxpdHkgb2YgYXNzZXRzXHJcbmNvbnN0IHZpc2liaWxpdHlSdWxlcyA9IFtcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKFwic3RpY2tzXCIsIHJlc291cmNlcykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKFwic3RpY2tcIilcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnc3RpY2tzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCd2aW5lcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdyb2NrcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoXCJyb2Nrc1wiLCByZXNvdXJjZXMpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7IG1ha2VWaXNpYmxlKFwidGFiLWJ1dHRvblwiKTsgbWFrZVZpc2libGUoJ2NyYWZ0Um9ja3MnKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnc3BlYXInLCBjcmFmdGVkUmVzb3VyY2VzKSA+IDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnc3BlYXInKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbChcImZpc2hcIiwgcmVzb3VyY2VzKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2Zpc2hpbmcnKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBoYXNUb29sKFwiQXhlXCIpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3dvb2QnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgncm9wZScpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgncm9wZScpXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdmaXNoJywgcmVzb3VyY2VzKSA+PSA1ICYmICFnZXRBdGVGaXNoKCksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnZWF0RmlzaCcpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0QXRlRmlzaCgpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4geyBtYWtlVmlzaWJsZSgnY2xvbmUnKTsgbWFrZVZpc2libGUoJ3BvbmRlci10YWInKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ3BvbmRlckZpbmlzaCcpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbmF2aWdhdGVUbygnc3RhZ2UyLmh0bWwnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IHJlY2FsY01heENsb25lcygpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gaXNQb25kZXJlZCgnYmlnZ2VySHV0JyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiByZWNhbGNNYXhDbG9uZXMoKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlckhvdXNlJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiByZWNhbGNNYXhDbG9uZXMoKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gcmVjYWxjTWF4Q2xvbmVzKClcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdldmVuQmlnZ2VyU2hlbHRlcicpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gcmVjYWxjTWF4Q2xvbmVzKClcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnY2xvbmVzJykgPj0gMzAsIC8vIDMwIGlzIHdoZXJlIHJhdGVzIHN0YXJ0IHRvIHNsb3cgZG93blxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3ByZXN0aWdlJylcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnY2xheScpID4gMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdjbGF5JylcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiAhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZ2dsZS1iYXNpY3MnKSAmJiBpc1BvbmRlcmVkKCdvcmdhbml6YXRpb24nKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IGluaXRpYWxpemVSZXNvdXJjZVRhZ3ModHJ1ZSlcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBwYXNzZWRTdGFnZSgnY29tYmF0VGFiJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBjYWxjdWxhdGVXaW5DaGFuY2UoKVxyXG4gICAgfVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG5cclxuICAgIGZvciAobGV0IGkgPSB2aXNpYmlsaXR5UnVsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCBydWxlID0gdmlzaWJpbGl0eVJ1bGVzW2ldO1xyXG4gICAgICAgIGlmIChydWxlLmNvbmRpdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHJ1bGUuYWN0aW9uKCk7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcnVsZSBmcm9tIHRoZSBhcnJheVxyXG4gICAgICAgICAgICB2aXNpYmlsaXR5UnVsZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCB0b29sIGluIHRvb2xzVG9TdGFnZXMpIHtcclxuICAgICAgICBpZiAoIWhhc1Rvb2wodG9vbCkgJiYgZ2V0Q3JhZnRlZFJlc291cmNlKHRvb2wpID4gMCkge1xyXG4gICAgICAgICAgICBhZGRUb29sKHRvb2wpO1xyXG4gICAgICAgICAgICBtYWtlVmlzaWJsZSh0b29sc1RvU3RhZ2VzW3Rvb2xdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCk7XHJcbiAgICAgICAgLy8gdXBkYXRlQm91bmNlQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRIb3ZlckJ1dHRvbiAhPT0gbnVsbCkgdXBkYXRlVG9vbHRpcChjdXJyZW50SG92ZXJCdXR0b24pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGVycik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuLy8gTVVTSUMgTUFOQUdFUlxyXG5cclxuY29uc3QgYXVkaW9GaWxlcyA9IFtcclxuICAgICcuL2F1ZGlvL3NvbmcxLndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nMi53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzMud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc0LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nNS53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzYud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc3LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nOC53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzkud2F2JyxcclxuICAgICcuL2F1ZGlvL3NvbmcxMC53YXYnLFxyXG5cclxuXTtcclxuXHJcbmxldCBjdXJyZW50QXVkaW8gPSBudWxsO1xyXG5sZXQgdGltZW91dElkID0gbnVsbDtcclxuXHJcbmZ1bmN0aW9uIHBsYXlSYW5kb21UcmFjaygpIHtcclxuICAgIC8vIFN0b3AgY3VycmVudCBhdWRpbyBpZiBwbGF5aW5nXHJcbiAgICBpZiAoY3VycmVudEF1ZGlvKSB7XHJcbiAgICAgICAgY3VycmVudEF1ZGlvLnBhdXNlKCk7XHJcbiAgICAgICAgY3VycmVudEF1ZGlvLmN1cnJlbnRUaW1lID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZWxlY3QgYSByYW5kb20gdHJhY2tcclxuICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXVkaW9GaWxlcy5sZW5ndGgpO1xyXG4gICAgY3VycmVudEF1ZGlvID0gbmV3IEF1ZGlvKGF1ZGlvRmlsZXNbcmFuZG9tSW5kZXhdKTtcclxuICAgIGN1cnJlbnRBdWRpby52b2x1bWUgPSBnZXRNdXNpY1ZvbHVtZSgpO1xyXG4gICAgLy8gUGxheSB0aGUgc2VsZWN0ZWQgdHJhY2tcclxuICAgIGN1cnJlbnRBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgLy8gU2NoZWR1bGUgdGhlIG5leHQgdHJhY2tcclxuICAgIHNjaGVkdWxlTmV4dFRyYWNrKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNjaGVkdWxlTmV4dFRyYWNrKCkge1xyXG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIHRpbWVvdXRcclxuICAgIGlmICh0aW1lb3V0SWQpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBXaGVuIHRoZSBjdXJyZW50IHRyYWNrIGVuZHMsIHdhaXQgZm9yIHVwIHRvIDMwIHNlY29uZHMgYmVmb3JlIHBsYXlpbmcgdGhlIG5leHRcclxuICAgIGNvbnN0IHNpbGVuY2VEdXJhdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAzMDAwMCArIDUwMDA7IC8vIFJhbmRvbSBzaWxlbmNlIGR1cmF0aW9uIDUgLSAzNSBzZWNvbmRzXHJcbiAgICBjdXJyZW50QXVkaW8ub25lbmRlZCA9ICgpID0+IHtcclxuICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KHBsYXlSYW5kb21UcmFjaywgc2lsZW5jZUR1cmF0aW9uKTtcclxuICAgIH07XHJcbn1cclxuXHJcbi8qIEhPVEtFWVMgKi9cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgc3dpdGNoIChldmVudC5rZXkpIHtcclxuICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgc2hvd1RhYigncHJvZHVjdGlvblRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJykpIHNob3dUYWIoJ2V4cGVyaW1lbnRUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnMyc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpKSBzaG93VGFiKCdwb25kZXJUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNCc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnam9icy10YWInKSkgc2hvd1RhYignam9ic1RhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc1JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpKSBzaG93VGFiKCdza2lsbHNUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncGVya3NUYWInKSkgc2hvd1RhYigncGVya3NUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNyc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnZmFjdG9yeVRhYicpKSBzaG93VGFiKCdmYWN0b3J5VGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzgnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ2NvbWJhdFRhYicpKSBzaG93VGFiKCdjb21iYXRUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50VGFiKCkgPT09ICdjb21iYXRUYWInKSBzd2l0Y2hTdGFuY2UoJ2FnZ3Jlc3NpdmUnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYic6XHJcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50VGFiKCkgPT09ICdjb21iYXRUYWInKSBzd2l0Y2hTdGFuY2UoJ2JhbGFuY2VkJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgICAgICBpZiAoZ2V0Q3VycmVudFRhYigpID09PSAnY29tYmF0VGFiJykgc3dpdGNoU3RhbmNlKCdjYXJlZnVsJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2YnOlxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50VGFiKCkgPT09ICdjb21iYXRUYWInICYmICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnRDb21iYXQnKS5kaXNhYmxlZCkgY29tYmF0KCk7XHJcbiAgICAgICAgICAgIGVsc2UgdG9nZ2xlUmVzb3VyY2UoJ2Zpc2gnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICAgIHRvZ2dsZVJlc291cmNlKCdzdGlja3MnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncm9ja3MnKSkgdG9nZ2xlUmVzb3VyY2UoJ3JvY2tzJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3ZpbmVzJykpIHRvZ2dsZVJlc291cmNlKCd2aW5lcycpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd3JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCd3b29kJykpIHRvZ2dsZVJlc291cmNlKCd3b29kJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ28nOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ29yZScpKSB0b2dnbGVSZXNvdXJjZSgnb3JlJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3AnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSkgdG9nZ2xlUmVzb3VyY2UoJ3BvbmRlcicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdFc2NhcGUnOlxyXG4gICAgICAgICAgICB0b2dnbGVPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBEQVJLIE1PREUgKi9cclxuLy8gY29uc3QgZGFya01vZGVUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhcmtNb2RlVG9nZ2xlXCIpO1xyXG5jb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcclxuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrLW1vZGUnKTtcclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBkYXJrTW9kZVRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJyk7XHJcbmxldCBpc0RhcmsgPSB0cnVlO1xyXG5cclxuXHJcbi8qIENVVFNDRU5FUyAqL1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGVhdEZpc2goKSB7XHJcbiAgICBpZiAoIWdldEF0ZUZpc2goKSAmJiBnZXRNYXRlcmlhbCgnZmlzaCcsIHJlc291cmNlcykgPj0gMSkge1xyXG4gICAgICAgIC8vIGVhdCBhIGZpc2ggYW5kIGJsYWNrb3V0XHJcbiAgICAgICAgY29uc3QgZmlzaEF1ZGlvID0gbmV3IEF1ZGlvKCcuL2F1ZGlvL2Zpc2gud2F2Jyk7XHJcbiAgICAgICAgZmlzaEF1ZGlvLnZvbHVtZSA9IGdldFNmeFZvbHVtZSgpO1xyXG4gICAgICAgIGZpc2hBdWRpby5wbGF5KCk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoJ2Zpc2gnLCAtMSk7XHJcbiAgICAgICAgLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIHRvIHN0YXJ0IHRoZSBzZXF1ZW5jZVxyXG4gICAgICAgIGZhZGVUb0JsYWNrKCk7XHJcbiAgICAgICAgLy8gSGlkZSBmaXNoIGJ1dHRvblxyXG4gICAgICAgIHNldEF0ZUZpc2godHJ1ZSk7XHJcbiAgICAgICAgY29uc3QgZmlzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWF0RmlzaFwiKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjaGFuZ2VNZXNzYWdlKFwiWW91IGFyZSB3aXRoIHlvdXJzZWxmIGluIGEgZm9yZXN0LlwiLCAnd2l0aCB5b3Vyc2VsZicsICdZb3UgZmVlbCBwZWNraXNoIGZvciBzb21lIHNlYWZvb2QuJyk7XHJcbiAgICAgICAgICAgIGluY3JlYXNlTWF4KCdjbG9uZXMnLCAxKTtcclxuICAgICAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnY2xvbmVzJywgMSk7XHJcbiAgICAgICAgfSwgMTAwMCk7IC8vIGRlbGF5IG9mIDFzXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZmFkZVRvQmxhY2soKSB7XHJcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuICAgIGNvbnN0IG92ZXJsYXlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktdGV4dCcpO1xyXG4gICAgY29uc3Qgb3ZlcmxheUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LWJ1dHRvbicpO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgb3ZlcmxheVRleHQuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDIwMDApO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvdmVybGF5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIG92ZXJsYXlCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDUwMDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlT3ZlcmxheSgpIHtcclxuICAgIGNvbnN0IG92ZXJsYXlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktdGV4dCcpO1xyXG4gICAgb3ZlcmxheVRleHQuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuXHJcbiAgICBjb25zdCBvdmVybGF5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktYnV0dG9uJyk7XHJcbiAgICBvdmVybGF5QnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcblxyXG4gICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5Jyk7XHJcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgY29uc3QgaXNla2FpQnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpc2VrYWlCdXR0b25zJyk7XHJcbiAgICAvLyBpc2VrYWlCdXR0b25zLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZCA9PiBpc2VrYWlCdXR0b25zLnJlbW92ZUNoaWxkKGNoaWxkKSk7XHJcbiAgICBpc2VrYWlCdXR0b25zLmlubmVySFRNTCA9ICcnO1xyXG4gICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5hdmlnYXRlVG8odXJsKSB7XHJcbiAgICAvLyBUcmlnZ2VyIHRoZSBvdmVybGF5IHRvIGZhZGUgaW5cclxuICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhZ2UtdHJhbnNpdGlvbi1vdmVybGF5Jyk7XHJcbiAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2ZhZGUtaW4nKTtcclxuXHJcbiAgICAvLyBXYWl0IGZvciB0aGUgZmFkZSBpbiB0byBjb21wbGV0ZSBiZWZvcmUgY2hhbmdpbmcgdGhlIHBhZ2VcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gICAgfSwgMzAwKTsgLy8gVGhpcyBkdXJhdGlvbiBzaG91bGQgbWF0Y2ggdGhlIENTUyBvcGFjaXR5IHRyYW5zaXRpb25cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TWVzc2FnZSgpIHtcclxuICAgIHJldHVybiBtZXNzYWdlRWxlbWVudDtcclxufVxyXG5cclxuXHJcbi8qIEdBTUUgTE9PUCAqL1xyXG5cclxuXHJcbmxldCBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gNTA7XHJcbmxldCBsYXN0X3RpbWUgPSBudWxsO1xyXG5sZXQgdG90YWxfdGltZSA9IDA7XHJcbmxldCBhY2N1bXVsYXRlZF9sYWcgPSAwO1xyXG5jb25zdCBmaWRlbGl0eSA9IDEwO1xyXG5cclxuZnVuY3Rpb24gbG9vcChjdXJyZW50X3RpbWUpIHtcclxuICAgIGlmIChsYXN0X3RpbWUgPT09IG51bGwpIGxhc3RfdGltZSA9IGN1cnJlbnRfdGltZTtcclxuXHJcbiAgICBjb25zdCBkZWx0YV90aW1lID0gY3VycmVudF90aW1lIC0gbGFzdF90aW1lO1xyXG5cclxuICAgIHRvdGFsX3RpbWUgKz0gZGVsdGFfdGltZTtcclxuICAgIGFjY3VtdWxhdGVkX2xhZyArPSBkZWx0YV90aW1lO1xyXG5cclxuICAgIGxhc3RfdGltZSA9IGN1cnJlbnRfdGltZTtcclxuXHJcbiAgICAvLyBDYXRjaCB1cCBhbGwgdGhlIG1pc3NlZCB0aWNrc1xyXG4gICAgbGV0IG5vcm1hbFJhdGUgPSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lO1xyXG5cclxuICAgIC8vIHNpbXVsYXRlIHdpdGggbGVzcyBmaWRlbGl0eSB0byBtYWtlIHVwIHRpbWVcclxuICAgIGlmIChhY2N1bXVsYXRlZF9sYWcgPj0gZmlkZWxpdHkgKiBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKSB7XHJcbiAgICAgICAgbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSA9IGFjY3VtdWxhdGVkX2xhZyAvIGZpZGVsaXR5O1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKGFjY3VtdWxhdGVkX2xhZyA+PSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKSB7XHJcblxyXG4gICAgICAgIGFjY3VtdWxhdGVkX2xhZyAtPSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lO1xyXG4gICAgICAgIHVwZGF0ZShtaWxsaXNlY29uZHNfcGVyX2ZyYW1lLCB0b3RhbF90aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gbm9ybWFsUmF0ZTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcclxufVxyXG5cclxuXHJcbmxldCB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSA9IDA7XHJcbmxldCB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPSAwO1xyXG5jb25zdCBzYXZlX3JhdGUgPSAxMF8wMDA7XHJcbmNvbnN0IG1hbnVmYWN0dXJlX3JhdGUgPSAxXzAwMDtcclxuZnVuY3Rpb24gdXBkYXRlKGRlbHRhX3RpbWUsIHRvdGFsX3RpbWUpIHtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtpLCBrZXldIG9mIE9iamVjdC5lbnRyaWVzKGFsbE1hdGVyaWFscykpIHtcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKGtleSwgY2FsY0luY3JlYXNlKGtleSwgZGVsdGFfdGltZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcygpO1xyXG4gICAgcmVuZGVyKCk7XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgZ2FtZSBldmVyeSAxMCBzZWNvbmRzXHJcbiAgICB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSArPSBkZWx0YV90aW1lO1xyXG4gICAgdGltZV9zaW5jZV9tYW51ZmF0dXJlICs9IGRlbHRhX3RpbWU7XHJcbiAgICB0b3RhbF90aW1lICs9IGRlbHRhX3RpbWU7XHJcbiAgICBpZiAodGltZV9zaW5jZV9sYXN0X3NhdmUgPj0gc2F2ZV9yYXRlKSB7XHJcbiAgICAgICAgc2F2ZUdhbWUoKTtcclxuICAgICAgICB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFudWZhY3R1cmUgZXZlcnkgc2Vjb25kXHJcbiAgICBpZiAocGFzc2VkU3RhZ2UoJ2ZhY3RvcnlUYWInKSAmJiB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPj0gbWFudWZhY3R1cmVfcmF0ZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtYW51ZmFjdHVyaW5nIGF0dGVtcHQnLCB0aW1lX3NpbmNlX21hbnVmYXR1cmUsIG1hbnVmYWN0dXJlX3JhdGUpO1xyXG4gICAgICAgIHRpbWVfc2luY2VfbWFudWZhdHVyZSA9IDA7XHJcbiAgICAgICAgYXR0ZW1wdE1hbnVmYWN0dXJlKCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vLyB3aW5kb3cuc2V0SW50ZXJ2YWwocmVuZGVyLCAxMDApIC8vIFVwZGF0ZSB2aXN1YWxzIDEwIHRpbWVzIHBlciBzZWNvbmRcclxuLy8gd2luZG93LnNldEludGVydmFsKHRpY2ssIDEwMDApOyAvLyBFdmVyeSB0aWNrIGxhc3RzIGZvciAxIHNlY29uZFxyXG4vLyB3aW5kb3cuc2V0SW50ZXJ2YWwoc2F2ZUdhbWUsIDEwMDAwKTsgLy8gU2F2ZSB0aGUgZ2FtZSBldmVyeSAxMCBzZWNvbmRzXHJcbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFdlIHVzZSBhIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHNob3J0aGFuZCBiZWNhdXNlIHNhdmVnYW1lIHJldHVybnMgYSBzdHJpbmdcclxuICAgIGlmICghY3VycmVudGx5RGVsZXRpbmcpIHNhdmVHYW1lKCk7XHJcbn07XHJcblxyXG5cclxuLy8gY29uc3QgbXlSZXNvdXJjZXMgPSB7fTtcclxuXHJcbi8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkUmVzb3VyY2VCdG5cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VGb3JtXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbi8vIH0pO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGFkZFJlc291cmNlKCkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZU5hbWVcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBhY3RpdmVUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZUFjdGl2ZVRleHRcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBkZWZhdWx0VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VEZWZhdWx0VGV4dFwiKS52YWx1ZTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5UZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5UZXh0XCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYnRuVG9vbHRpcERlc2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRvb2x0aXBEZXNjXCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYnRuVG9vbHRpcENvc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRvb2x0aXBDb3N0XCIpLnZhbHVlO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHZhciBuZXdSZXNvdXJjZSA9IG15UmVzb3VyY2VzW3Jlc291cmNlTmFtZV0gPSB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgaWQ6IFwiZ2F0aGVyXCIgKyByZXNvdXJjZU5hbWUsXHJcbiAgICAgICAgaXNHZXR0aW5nOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVUZXh0OiBhY3RpdmVUZXh0LFxyXG4gICAgICAgIGRlZmF1bHRUZXh0OiBkZWZhdWx0VGV4dCxcclxuICAgICAgICAvLyAuLi4gQWRkIG90aGVyIGF0dHJpYnV0ZXMgYXMgZmV0Y2hlZCBmcm9tIGZvcm0gLi4uXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgYnV0dG9uIG9iamVjdFxyXG4gICAgdmFyIG5ld0J1dHRvbiA9IGJ1dHRvbnNbXCJnYXRoZXJcIiArIHJlc291cmNlTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlc291cmNlTmFtZS5zbGljZSgxKV0gPSB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwICcsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogYnRuVGV4dCxcclxuICAgICAgICB0b29sdGlwRGVzYzogYnRuVG9vbHRpcERlc2MsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6IGJ0blRvb2x0aXBDb3N0LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlIC8vIEJ5IGRlZmF1bHQsIG1ha2luZyB0aGlzIGFsd2F5cyB2aXNpYmxlLiBNb2RpZnkgYXMgbmVlZGVkLlxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhuZXdSZXNvdXJjZSk7XHJcbiAgICBjb25zb2xlLmxvZyhuZXdCdXR0b24pO1xyXG5cclxuICAgIC8vIEhpZGUgZm9ybSBvbmNlIHJlc291cmNlIGlzIGFkZGVkXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlRm9ybVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgLy8gT3B0aW9uYWxseSwgeW91IGNhbiB1cGRhdGUgdGhlIFVJIHRvIHNob3cgdGhlIGFkZGVkIHJlc291cmNlXHJcbiAgICAvLyB1cGRhdGVVSShyZXNvdXJjZU5hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVVSShyZXNvdXJjZU5hbWUpIHtcclxuICAgIC8vIEhlcmUgeW91IGNhbiBjcmVhdGUgYSBuZXcgRE9NIGVsZW1lbnQgdG8gZGlzcGxheSB0aGUgYWRkZWQgcmVzb3VyY2VcclxuICAgIGNvbnN0IHJlc291cmNlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHJlc291cmNlRGl2LmlubmVySFRNTCA9IGAke3Jlc291cmNlTmFtZX06ICR7cmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWV9YDtcclxuXHJcbiAgICAvLyBBcHBlbmQgdG8gc29tZSBjb250YWluZXJcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVzb3VyY2VEaXYpO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZU9wdGlvbnMoKSB7XHJcbiAgICBwbGF5U291bmQoJy4vYXVkaW8vb3B0aW9ucy53YXYnLCB0cnVlKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcHRpb25zTWVudScpO1xyXG4gICAgb3B0aW9uc01lbnUuc3R5bGUuZGlzcGxheSA9IG9wdGlvbnNNZW51LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICdibG9jaycgOiAnbm9uZSc7XHJcbn1cclxuXHJcblxyXG5sZXQgY3VycmVudGx5RGVsZXRpbmcgPSBmYWxzZTtcclxuXHJcbi8vIEltcG9ydCB0aGUgZnVuY3Rpb25zIHlvdSBuZWVkIGZyb20gdGhlIFNES3MgeW91IG5lZWRcclxuLy8gaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCB9IGZyb20gXCJmaXJlYmFzZS9hcHBcIjtcclxuLy8gaW1wb3J0IHsgZ2V0QW5hbHl0aWNzIH0gZnJvbSBcImZpcmViYXNlL2FuYWx5dGljc1wiO1xyXG4vLyBUT0RPOiBBZGQgU0RLcyBmb3IgRmlyZWJhc2UgcHJvZHVjdHMgdGhhdCB5b3Ugd2FudCB0byB1c2VcclxuLy8gaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3Mvd2ViL3NldHVwI2F2YWlsYWJsZS1saWJyYXJpZXNcclxuXHJcblxyXG4vLyBBZnRlciBhbGwgaGFzIGJlZW4gbG9hZGVkXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoZXZlbnQpID0+IHtcclxuXHJcbiAgICAvLyBZb3VyIHdlYiBhcHAncyBGaXJlYmFzZSBjb25maWd1cmF0aW9uXHJcbiAgICAvLyBGb3IgRmlyZWJhc2UgSlMgU0RLIHY3LjIwLjAgYW5kIGxhdGVyLCBtZWFzdXJlbWVudElkIGlzIG9wdGlvbmFsXHJcbiAgICBjb25zdCBmaXJlYmFzZUNvbmZpZyA9IHtcclxuICAgICAgICBhcGlLZXk6IFwiQUl6YVN5Q290c1pVZnBVM2RCU0FSaHZpdjNvS3RsbkV5djdlX2drXCIsXHJcbiAgICAgICAgYXV0aERvbWFpbjogXCJjbG9uZS1leHBlcmltZW50LmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgICAgIHByb2plY3RJZDogXCJjbG9uZS1leHBlcmltZW50XCIsXHJcbiAgICAgICAgc3RvcmFnZUJ1Y2tldDogXCJjbG9uZS1leHBlcmltZW50LmFwcHNwb3QuY29tXCIsXHJcbiAgICAgICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiMTAyODc2ODQ0MTY3NFwiLFxyXG4gICAgICAgIGFwcElkOiBcIjE6MTAyODc2ODQ0MTY3NDp3ZWI6MmJmMDkwNmU1YTk0ZjViMjQwMGRiM1wiLFxyXG4gICAgICAgIG1lYXN1cmVtZW50SWQ6IFwiRy1NNDVCSkxYSkZSXCJcclxuICAgIH07XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBGaXJlYmFzZVxyXG4gICAgY29uc3QgYXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7XHJcbiAgICBjb25zdCBhbmFseXRpY3MgPSBnZXRBbmFseXRpY3MoYXBwKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zKHBvbmRlcnMpO1xyXG4gICAgLy8gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpO1xyXG5cclxuICAgIGxvYWRHYW1lKCk7IC8vIEdldCBhbGwgbmV3IG5ldyBidWlsZGluZ3MgYW5kIGFkZCB0aGVtIHdpdGggYnV0dG9uc1xyXG4gICAgZ2VuZXJhdGVCdXR0b25zKCk7IC8vIENhbGwgdGhpcyBvbmNlIG9uIHBhZ2UgbG9hZCBvciBnYW1lIGluaXRpYWxpemF0aW9uXHJcbiAgICBtYWtlRmFjdG9yeUJ1dHRvbnMoKTtcclxuXHJcbiAgICBpbml0aWFsaXplUmVzb3VyY2VUYWdzKCk7XHJcblxyXG4gICAgbG9hZEdhbWUoKTsgLy8gQWN0dWFsbHkgbG9hZCB0aGUgZ2FtZVxyXG5cclxuICAgIGNsZWFyU2lkZWJhcigpO1xyXG4gICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncyhpc1BvbmRlcmVkKCdvcmdhbml6YXRpb24nKSk7IC8vIGNoZWNrIGlmIHdlIG5lZWQgZ3JvdXBzXHJcblxyXG4gICAgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpO1xyXG5cclxuICAgIHVwZGF0ZVNpZGViYXIoKTtcclxuXHJcbiAgICBzaG93VGFiKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICByZXF1aXJlKCcuL3RyYWRlJykuZ2VuZXJhdGVUcmFkZVRhYmxlKHJlc291cmNlcyk7XHJcblxyXG5cclxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgMzA7ICsraSlcclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhnZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nKCkpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgcmVzb3VyY2Uga2V5IGZyb20gYW4gSUQuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIGEgcmVzb3VyY2UgZS5nLiBnYXRoZXJHYW1lXHJcbiAgICAgKiBAcmV0dXJucyBSZXNvdXJjZSBrZXkgZS5nLiBnYW1lXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldFJLZXlGcm9tSUQoaWQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtyLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VzW3JdLmlkLCBpZCk7XHJcbiAgICAgICAgICAgIGlmICh2YWwuaWQgPT09IGlkKSByZXR1cm4gcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICdlcnJvciAnICsgaWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIGNyYWZ0ZWQgcmVzb3VyY2Uga2V5IGZyb20gYW4gSUQuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIGEgcmVzb3VyY2UgZS5nLiBjcmFmdEhhbmRsZVxyXG4gICAgICogQHJldHVybnMgUmVzb3VyY2Uga2V5IGUuZy4gaGFuZGxlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldENSS2V5RnJvbUlEKGlkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbciwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhjcmFmdGVkUmVzb3VyY2VzKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyLCB2YWwsIGlkKTtcclxuICAgICAgICAgICAgaWYgKHZhbC5pZCA9PT0gaWQpIHJldHVybiByO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJ2Vycm9yICcgKyBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZW5lcmFsIGRvY3VtZW50IGNsaWNrIGhhbmRsZXJcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyBTdGFydCB0aGUgbXVzaWMgcGxheWJhY2tcclxuICAgICAgICAvLyBXZSBuZWVkIHRvIHdhaXQgZm9yIGEgY2xpY2sgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2F1dG9wbGF5L1xyXG4gICAgICAgIGlmIChjdXJyZW50QXVkaW8gPT09IG51bGwpIHBsYXlSYW5kb21UcmFjaygpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCJidXR0b25cIikpIHtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBvbmUgb2Ygb3VyIGJ1dHRvbnMgd2FzIGNsaWNrZWRcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2xpY2tlZCcsIGJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdG9vbHRpcHMgXHJcbiAgICAgICAgICAgIC8vIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd0b29sdGlwJykpIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAgICAgLy8gdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLy8gQlVJTERJTkcgQlVUVE9OU1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJykgJiYgYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpICE9PSAndW5kZWZpbmVkJyAmJiBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdwdXJjaGFzYWJsZScpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgdmFyIGJ1aWxkaW5nID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IGV2ZW50LnBhZ2VZO1xyXG5cclxuICAgICAgICAgICAgICAgIHBsYXlTb3VuZCgnLi9hdWRpby9idWlsZGluZy53YXYnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBidWlsZGluZ1N0cmluZyA9IGNhcGl0YWxpemVGaXJzdChidWlsZGluZykuc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSBidXlNYXhCdWlsZGluZ3MoYnVpbGRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgKyR7Y291bnR9ICR7YnVpbGRpbmdTdHJpbmd9c2AsICdhcXVhJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYCsxICR7YnVpbGRpbmdTdHJpbmd9YCwgJ2FxdWEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gUE9OREVSIEJVVFRPTlNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd1bmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdW5sb2NrQXR0ciA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3VubG9jaycpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb25kZXJzW3VubG9ja0F0dHJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhblVubG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA8IHBvbmRlcnNbdW5sb2NrQXR0cl0uY29zdFttYXRlcmlhbF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ2Fubm90IHVubG9jayBcIiArIHVubG9ja0F0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuVW5sb2NrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVubG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBwb25kZXJzW3VubG9ja0F0dHJdLmNvc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwobWF0ZXJpYWwsIC1wb25kZXJzW3VubG9ja0F0dHJdLmNvc3RbbWF0ZXJpYWxdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb25kZXJzW3VubG9ja0F0dHJdLmlzUG9uZGVyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlVmlzaWJsZSh1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhpcyBidXR0b24gZGlzYXBwZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vcG9uZGVyLndhdicsIHRydWUpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVW5sb2NraW5nIFwiICsgdW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggdGhlIHBhZ2Ugd2hlbiBidXlpbmcgb3JnYW5pemVkIHN0b3JhZ2UgdG8gZ2VuZXJhdGUgdGhlIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5sb2NrQXR0ciA9PT0gJ29yZ2FuaXphdGlvbicpIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gT1RIRVIgQlVUVE9OU1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmlkLnNsaWNlKDAsIDYpID09PSBcImdhdGhlclwiKSB0b2dnbGVSZXNvdXJjZShnZXRSS2V5RnJvbUlEKGJ1dHRvbi5pZCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZC5zbGljZSgwLCA1KSA9PT0gJ2NyYWZ0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYXlTb3VuZCgnLi9hdWRpby9jcmFmdC53YXYnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjciA9IGdldENSS2V5RnJvbUlEKGJ1dHRvbi5pZCk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuQ3JhZnQoY3IpKSB0cmlnZ2VyRmxvYXRVcFRleHQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZLCBgKyR7Y3J9YCwgJ2FxdWEnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIGNyYWZ0QWxsUmVzb3VyY2VzKGNyKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGNyYWZ0UmVzb3VyY2UoY3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdzYXZlQnV0dG9uJykgc2F2ZUdhbWUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdlYXRGaXNoJykgZWF0RmlzaCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ292ZXJsYXktYnV0dG9uJykgaGlkZU92ZXJsYXkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdkZWxldGVTYXZlQnV0dG9uJyAmJiBjb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB5b3VyIHNhdmUgZGF0YT8gVGhpcyB3aWxsIHJlc2V0IGFsbCB5b3VyIHByb2dyZXNzLlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUdhbWUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2NsZWFySm9iQXNzaWdubWVudHMnKSBjbGVhckpvYkFzc2lnbm1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdkYXJrTW9kZVRvZ2dsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2RhcmstbW9kZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBkYXJrTW9kZVRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNEYXJrID0gIWlzRGFyaztcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgZGFya01vZGVUb2dnbGUudGV4dENvbnRlbnQgPSBpc0RhcmsgPyBcIkxpZ2h0IE1vZGVcIiA6IFwiRGFyayBNb2RlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ3ByZXN0aWdlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzZWthaSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnc3RhcnRDb21iYXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tYmF0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3RpZXJPbmVCdXR0b24nKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgbGV0IHBlcmsgPSBidXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBYmlsaXR5KHBlcmspO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQubWF0Y2hlcyhcIiNhbG9uZVwiKSkge1xyXG4gICAgICAgICAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAxKTtcclxuICAgICAgICAgICAgbGV0IHRleHQgPSAnKzEgQ2xvbmUnO1xyXG5cclxuICAgICAgICAgICAgLy8gSGFyZGNvZGVkIGluc3RlYWQgdG8gYXZvaWQgaW5jcmVhc2UgYWZmZWN0ZWQgYnkgcHJvZHVjdGl2aXR5IGJvbnVzZXNcclxuICAgICAgICAgICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnKSA8IGdldE1heCgnY2xvbmVzJykpIHsgcmVzb3VyY2VzWydjbG9uZXMnXS52YWx1ZSArPSAxOyB9XHJcbiAgICAgICAgICAgIGVsc2UgdGV4dCA9ICdNYXggQ2xvbmVzJztcclxuXHJcbiAgICAgICAgICAgIHBsYXlTb3VuZCh0ZXh0ID09PSAnKzEgQ2xvbmUnID8gJy4vYXVkaW8vY2xvbmUud2F2JyA6ICcuL2F1ZGlvL2ZhaWxjbG9uZS53YXYnKTtcclxuXHJcblxyXG4gICAgICAgICAgICBjb25zdCB4ID0gZXZlbnQucGFnZVg7IC8vIFggY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuICAgICAgICAgICAgY29uc3QgeSA9IGV2ZW50LnBhZ2VZOyAvLyBZIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGV4dCA9PT0gJysxIENsb25lJyA/ICdncmVlbicgOiAncmVkJztcclxuICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIHRleHQsIGNvbG9yKTtcclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKCdjbG9uZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2UgZmFjdG9yeSBidXR0b25zIG9mIGJ1eSBuZXcgZmFjdG9yeSBhbmQgYnV5IGJ1bGsgdXBncmFkZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbWFrZUZhY3RvcnlCdXR0b25zKCkge1xyXG4gICAgICAgIGNvbnN0IGZhY3RvcnlCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZhY3RvcnlCdXR0b25zJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Rvb2x0aXAnKTtcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLmlkID0gJ2J1eUZhY3RvcnlCdXR0b24nO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24udGV4dENvbnRlbnQgPSAnQnV5IE5ldyBGYWN0b3J5JztcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCAnVGhlIGZhY3RvcnkgbXVzdCBncm93IScpO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsICc1MCBzaWx2ZXInKTtcclxuICAgICAgICBmYWN0b3J5QnV0dG9ucy5hcHBlbmRDaGlsZChidXlGYWN0b3J5QnV0dG9uKTtcclxuXHJcbiAgICAgICAgLy8gQnV5IG5ldyBmYWN0b3J5IGJ1dHRvblxyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdidXlpbmcgZmFjdG9yeScpO1xyXG4gICAgICAgICAgICBidXlGYWN0b3J5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZ3JhZGVCdWxrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLmlkID0gJ3VwZ3JhZGVCdWxrQnV0dG9uJztcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi50ZXh0Q29udGVudCA9ICdVcGdyYWRlIEJ1bGsnO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCAnQ3JhZnQgbW9yZSByZXNvdXJjZXMgcGVyIHNlY29uZCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCAnMiDihpIgNDogMzAgc2lsdmVyJyk7XHJcbiAgICAgICAgZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQodXBncmFkZUJ1bGtCdXR0b24pO1xyXG5cclxuICAgICAgICAvLyBVcGdyYWRlIGJ1bGsgYnV0dG9uXHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwZ3JhZGluZyBidWxrJyk7XHJcbiAgICAgICAgICAgIHVwZ3JhZGVCdWxrKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3B0aW9ucyBtZW51XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3B0aW9uc0J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlT3B0aW9ucyk7XHJcblxyXG5cclxuICAgIC8vIEFkanVzdCBtdXNpYyB2b2x1bWVcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtdXNpY1ZvbHVtZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBzZXRNdXNpY1ZvbHVtZSh0aGlzLnZhbHVlKTtcclxuICAgICAgICBjdXJyZW50QXVkaW8udm9sdW1lID0gZ2V0TXVzaWNWb2x1bWUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkanVzdCBzZnggdm9sdW1lXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2Z4Vm9sdW1lJykuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHNldFNmeFZvbHVtZSh0aGlzLnZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgLy8gU3RhcnQgdGhlIG1haW4gZ2FtZXBsYXkgbG9vcFxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgdG9vbHRpcCB3aGVuIGhvdmVyaW5nIG92ZXIgYSBidXR0b25cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b29sdGlwJykuZm9yRWFjaChidXR0b24gPT4ge1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgb24gbW91c2UgZW50ZXJcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAgICAgY3VycmVudEhvdmVyQnV0dG9uID0gYnV0dG9uO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgLy8gVE9ETzogbW92ZSB0aGlzIGV2ZW50IGxpc3RlbmVyXHJcbiAgICAgICAgLy8gVXBkYXRlIG9uIG9uY2xpY2sgZm9yIHB1cmNoYXNlc1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdvbmNsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhpZGUgb24gbW91c2UgbGVhdmVcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgaGlkZVRvb2x0aXAoKTsgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDsgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGpvYnMgY291bnRlclxyXG4gICAgdXBkYXRlVG90YWwoKTtcclxuICAgIC8vIFVwZGF0ZSB0aGUgYm91bmNlIGFuaW1hdGlvbiBmb3IgYWxvbmVcclxuICAgIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG5cclxuXHJcbiAgICAvLyBTZXQgY2xvbmVzIHRvIG1heCB0byBiZSBuaWNlXHJcbiAgICBzZXRNYXRlcmlhbCgnY2xvbmVzJywgZ2V0TWF4KCdjbG9uZXMnKSk7XHJcblxyXG4gICAgLy8gY29uc3Qgc2ltdWxhdG9yID0gbmV3IEdhbWVTaW11bGF0b3IoKTtcclxuICAgIC8vIHNpbXVsYXRvci5ydW5TaW11bGF0aW9uKDEwXzAwMCk7IC8vIFJ1biB0aGUgc2ltdWxhdGlvbiBmb3IgMyBob3Vyc1xyXG5cclxufSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV4dCBmaWJvbmFjY2kgbnVtYmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIEEgZmlib25hY2NpIG51bWJlclxyXG4gKiBAcmV0dXJucyBUaGUgZmlib25hY2NpIG51bWJlciBhZnRlciBuXHJcbiAqL1xyXG5mdW5jdGlvbiBuZXh0Rmlib25hY2NpKG4pIHtcclxuICAgIGxldCBhID0gbiAqICgxICsgTWF0aC5zcXJ0KDUpKSAvIDIuMDtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKGEpO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBwcmV2aW91cyBmaWJvbmFjY2kgbnVtYmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIEEgZmlib25hY2NpIG51bWJlclxyXG4gKiBAcmV0dXJucyBUaGUgZmlib25hY2NpIG51bWJlciBiZWZvcmUgblxyXG4gKi9cclxuZnVuY3Rpb24gcHJldkZpYm9uYWNjaShuKSB7XHJcbiAgICBsZXQgYSA9IG4gLyAoKDEgKyBNYXRoLnNxcnQoNSkpIC8gMi4wKTtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKGEpO1xyXG59XHJcblxyXG5jb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuY29uc3Qgb3ZlcmxheVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS10ZXh0Jyk7XHJcbmNvbnN0IG92ZXJsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1idXR0b24nKTtcclxuY29uc3Qgb3ZlcmxheUJhY2tCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1iYWNrLWJ1dHRvbicpOyAvLyBHZXQgdGhlIFwiR28gQmFja1wiIGJ1dHRvblxyXG4vKipcclxuICogVGhlIGlzZWthaSBmdW5jdGlvbiwgY2FsbGVkIHVwb24gY2xpY2tpbmcgdGhlIFwiSXNla2FpXCIgYnV0dG9uXHJcbiAqIFxyXG4gKiBBbHNvIGhhbmRsZXMgcmVzZXR0aW5nIGFsbCByZXNvdXJjZXMsIGNyYWZ0ZWQgcmVzb3VyY2VzLCBwb25kZXJzLCBwZXJrcywgYnVpbGRpbmdzLCBhbmQgb3ZlcmFsbCBwcm9ncmVzcy5cclxuICovXHJcbmZ1bmN0aW9uIGlzZWthaSgpIHtcclxuXHJcbiAgICAvLyBIYW5kbGUgdGhlIGlzZWthaSBpdHNlbGZcclxuICAgIG92ZXJsYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaHVza3NEdWUgPSBnZXRNYXRlcmlhbCgnY2xvbmVzJykgKyBnZXRNYXRlcmlhbCgnaHVza3MnKTtcclxuXHJcbiAgICAgICAgLy8gUmVzZXQgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkIHdoZW4gXCJDb250aW51ZVwiIGlzIGNsaWNrZWRcclxuICAgICAgICByZXNldFJlc291cmNlcygpO1xyXG4gICAgICAgIHJlc2V0Q3JhZnRlZFJlc291cmNlcygpO1xyXG4gICAgICAgIHJlc2V0UG9uZGVycygpO1xyXG4gICAgICAgIHJlc2V0UGVya3MoKTtcclxuICAgICAgICByZXNldEJ1aWxkaW5ncygpO1xyXG4gICAgICAgIHJlc2V0QWxsSm9icygpO1xyXG4gICAgICAgIHJlc2V0U3RhZ2VzKCk7XHJcblxyXG5cclxuICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vaXNla2FpY29uZmlybS53YXYnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IG1heCBvZiBhbGwgcmVzb3VyY2VzIHRvIDEwMCAodGlueSBib29zdClcclxuICAgICAgICBmb3IgKGxldCBbciwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIHZhbC5tYXggPSAxMDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBHaXZlIGh1c2tzIGFmdGVyd2FyZHNcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdodXNrcycsIGh1c2tzRHVlKTtcclxuXHJcblxyXG4gICAgICAgIC8vIENsb3NlIHRoZSBvdmVybGF5XHJcbiAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICBsZXQgbGFzdEJ1aWxkaW5nID0gbnVsbDtcclxuICAgICAgICBjb25zdCBuZXdCdWlsZGluZ3NDb3VudCA9IDU7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdCdWlsZGluZ3NDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbUJ1aWxkaW5nID0gZ2VuZXJhdGVSYW5kb21CdWlsZGluZygpO1xyXG4gICAgICAgICAgICBidWlsZGluZ3NbcmFuZG9tQnVpbGRpbmcubmFtZS5zcGxpdCgnICcpLmpvaW4oJ18nKV0gPSByYW5kb21CdWlsZGluZztcclxuICAgICAgICAgICAgbGFzdEJ1aWxkaW5nID0gcmFuZG9tQnVpbGRpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoYW5nZU1lc3NhZ2UoJ1lvdSBhcmUgaW4gYW5vdGhlciB3b3JsZC4nLCAnYW5vdGhlcicsIGBZb3UgZmVlbCBhIG5lZWQgdG8gYWNxdWlyZSAke09iamVjdC52YWx1ZXMobGFzdEJ1aWxkaW5nLmNvc3QpLmpvaW4oJywnKX1gKTtcclxuICAgICAgICBpbml0aWFsaXplUmVzb3VyY2VUYWdzKGZhbHNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIG92ZXJsYXlCYWNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIC8vIEp1c3QgY2xvc2UgdGhlIG92ZXJsYXkgd2l0aG91dCBleGVjdXRpbmcgcmVzZXQgZnVuY3Rpb25zXHJcbiAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaXNla2FpQXVkaW8gPSBuZXcgQXVkaW8oJy4vYXVkaW8vaXNla2FpLndhdicpO1xyXG4gICAgaXNla2FpQXVkaW8udm9sdW1lID0gZ2V0U2Z4Vm9sdW1lKCk7XHJcbiAgICBpc2VrYWlBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgLy8gQ29udmVydCBjbG9uZXMgdG8gaHVza3NcclxuICAgIGNvbnN0IG9sZEh1c2tWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdodXNrc0lzZWthaVZhbHVlJyk7XHJcbiAgICBsZXQgaHVza1ZhbHVlO1xyXG4gICAgaWYgKG9sZEh1c2tWYWx1ZSkgaHVza1ZhbHVlID0gb2xkSHVza1ZhbHVlO1xyXG4gICAgZWxzZSBodXNrVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICBodXNrVmFsdWUuaWQgPSAnaHVza3NJc2VrYWlWYWx1ZSc7XHJcbiAgICBodXNrVmFsdWUuaW5uZXJIVE1MID0gYEh1c2tzOiAgJHtnZXRNYXRlcmlhbCgnaHVza3MnKX0gPGJyPiBZb3Ugd2lsbCBnZXQgJHtnZXRNYXRlcmlhbCgnY2xvbmVzJyl9IEh1c2tzIHBvc3QtaXNla2FpLjxicj5Zb3Ugd2lsbCByZWNlaXZlIDUgcmFuZG9tbHkgZ2VuZXJhdGVkIG5ldyBidWlsZGluZ3MsIHVuaXF1ZSB0byB0aGlzIG5ldyB3b3JsZC5gO1xyXG5cclxuICAgIGh1c2tWYWx1ZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgb3ZlcmxheS5wcmVwZW5kKGh1c2tWYWx1ZSk7XHJcbiAgICAvLyBPdmVybGF5XHJcbiAgICBvdmVybGF5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdNaWRuaWdodEJsdWUnO1xyXG4gICAgb3ZlcmxheVRleHQudGV4dENvbnRlbnQgPSAnWW91IHN0ZXAgdGhyb3VnaCB0byBhbm90aGVyIHdvcmxkLic7XHJcblxyXG4gICAgZmFkZVRvQmxhY2soKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgb3ZlcmxheUJhY2tCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDUwMDApO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByZXN0aWdlQnV0dG9ucygpIHtcclxuXHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lzZWthaUJ1dHRvbnMnKTtcclxuICAgICAgICBsZXQgaSA9IDE7XHJcbiAgICAgICAgT2JqZWN0LmtleXMocHJlc3RpZ2UpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGI+JHtwcmVzdGlnZVtrZXldLnRleHR9PC9iPjxicj5MZXZlbDogJHtwcmVzdGlnZVtrZXldLmxldmVsfTxicj5Db3N0OiAke3ByZXN0aWdlW2tleV0uY29zdH1gO1xyXG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIHByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBEZXNjJywgcHJlc3RpZ2Vba2V5XS50b29sdGlwRGVzYyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd0b29sdGlwJyk7IC8vIEFkZCBhIGNsYXNzIGZvciBzdHlsaW5nIGlmIG5lZWRlZFxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZ3JpZENvbHVtbiA9IChpICUgNCArIDEpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5ncmlkUm93ID0gTWF0aC5mbG9vcihpIC8gNCArIDEpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgLy8gT3B0aW9uYWw6IEFkZCBhbiBldmVudCBsaXN0ZW5lciBpZiB5b3Ugd2FudCB0byBoYW5kbGUgY2xpY2tzXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFlvdSBjYW4gaW1wbGVtZW50IHdoYXQgaGFwcGVucyB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEJ1dHRvbiAke2tleX0gd2FzIGNsaWNrZWRgKTtcclxuICAgICAgICAgICAgICAgIGlmIChnZXRNYXRlcmlhbCgnaHVza3MnKSA8IHByZXN0aWdlW2tleV0uY29zdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5sZXZlbCsrO1xyXG4gICAgICAgICAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnaHVza3MnLCAtcHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuICAgICAgICAgICAgICAgIHByZXN0aWdlW2tleV0uY29zdCA9IG5leHRGaWJvbmFjY2kocHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgcHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gYDxiPiR7cHJlc3RpZ2Vba2V5XS50ZXh0fTwvYj48YnI+TGV2ZWw6ICR7cHJlc3RpZ2Vba2V5XS5sZXZlbH08YnI+Q29zdDogJHtwcmVzdGlnZVtrZXldLmNvc3R9YDtcclxuICAgICAgICAgICAgICAgIGh1c2tWYWx1ZS50ZXh0Q29udGVudCA9ICdIdXNrczogJyArIGdldE1hdGVyaWFsKCdodXNrcycpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gUmlnaHQtY2xpY2sgdG8gZGVjcmVhc2UgbGV2ZWxcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIC8vIFlvdSBjYW4gaW1wbGVtZW50IHdoYXQgaGFwcGVucyB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEJ1dHRvbiAke2tleX0gd2FzIHJpZ2h0IGNsaWNrZWRgKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmVzdGlnZVtrZXldLmxldmVsIDw9IDApIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHByZXN0aWdlW2tleV0ubGV2ZWwtLTtcclxuICAgICAgICAgICAgICAgIHByZXN0aWdlW2tleV0uY29zdCA9IHByZXZGaWJvbmFjY2kocHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgcHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoJ2h1c2tzJywgcHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gYDxiPiR7cHJlc3RpZ2Vba2V5XS50ZXh0fTwvYj48YnI+TGV2ZWw6ICR7cHJlc3RpZ2Vba2V5XS5sZXZlbH08YnI+Q29zdDogJHtwcmVzdGlnZVtrZXldLmNvc3R9YDtcclxuICAgICAgICAgICAgICAgIGh1c2tWYWx1ZS50ZXh0Q29udGVudCA9ICdIdXNrczogJyArIGdldE1hdGVyaWFsKCdodXNrcycpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEhvdmVyQnV0dG9uID0gYnV0dG9uO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkgeyBoaWRlVG9vbHRpcCgpOyBjdXJyZW50SG92ZXJCdXR0b24gPSBudWxsOyB9KTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdG8gY3JlYXRlIGJ1dHRvbnNcclxuICAgIHNldFRpbWVvdXQoY3JlYXRlUHJlc3RpZ2VCdXR0b25zLCA1MDAwKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4geyBodXNrVmFsdWUuc3R5bGUub3BhY2l0eSA9ICcxJzsgfSwgNTAwMCk7XHJcblxyXG59XHJcblxyXG52YXIgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAgIHVwZGF0ZVVJLFxyXG4gICAgc2V0VG90YWxUaW1lLFxyXG4gICAgY2hhbmdlTWVzc2FnZSxcclxuXHJcbiAgICBnZXRNZXNzYWdlLFxyXG4gICAgdG90YWxfdGltZSxcclxuICAgIGN1cnJlbnRIb3ZlckJ1dHRvbixcclxuICAgIGRlbGV0ZUdhbWUsXHJcbiAgICBpc2VrYWksXHJcbiAgICB1cGRhdGVcclxufTtcclxuZnVuY3Rpb24gZGVsZXRlR2FtZSgpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzYXZlJyk7IGN1cnJlbnRseURlbGV0aW5nID0gdHJ1ZTsgbG9jYXRpb24ucmVsb2FkKCk7XHJcbn1cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxud2luZG93LmRlbGV0ZUdhbWUgPSBkZWxldGVHYW1lO1xyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5pc2VrYWkgPSBpc2VrYWk7IiwiXHJcbmNvbnN0IHsgc2V0U3RhZ2UsIHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnV0dG9uVmlzaWJpbGl0eScpO1xyXG5cclxuLyoqXHJcbiAqIE1ha2UgZXZlcnl0aGluZyB3aXRoIHRoZSBjbGFzcyBcInN0YWdlXCIgdmlzaWJsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2VcclxuICovXHJcbmZ1bmN0aW9uIG1ha2VWaXNpYmxlKHN0YWdlKSB7XHJcbiAgICBpZiAoIXBhc3NlZFN0YWdlKHN0YWdlKSkge1xyXG4gICAgICAgIHNldFN0YWdlKHN0YWdlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHN0YWdlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiICsgc3RhZ2UpO1xyXG4gICAgc3RhZ2VFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgfSk7XHJcbiAgICB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCk7XHJcbn1cclxuZXhwb3J0cy5tYWtlVmlzaWJsZSA9IG1ha2VWaXNpYmxlOyIsImNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgcGVya3MgfSA9IHJlcXVpcmUoJy4vanNvbi9wZXJrcycpO1xyXG5sZXQgbXlQZXJrcyA9IFtdO1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGVya05hbWUgXHJcbiAqIEByZXR1cm5zIGJvb2xlYW5cclxuICovXHJcbmZ1bmN0aW9uIGhhc1BlcmsocGVya05hbWUpIHtcclxuICAgIHJldHVybiBteVBlcmtzLmluY2x1ZGVzKHBlcmtOYW1lKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsUGVya3MoKSB7XHJcbiAgICByZXR1cm4gbXlQZXJrcztcclxufVxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwZXJrTmFtZSBQZXJrIHRvIGFkZFxyXG4gKi9cclxuZnVuY3Rpb24gYWRkUGVyayhwZXJrTmFtZSkge1xyXG4gICAgbXlQZXJrcy5wdXNoKHBlcmtOYW1lKTtcclxuXHJcbiAgICAvLyBEbyBhbGwgdGhlIG9uZS10aW1lIHVwZGF0ZXNcclxuICAgIHN3aXRjaCAocGVya05hbWUpIHtcclxuICAgICAgICBjYXNlICdBcmNoaXRlY3QnOlxyXG4gICAgICAgICAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJykuYnVpbGRpbmdzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBiIG9mIE9iamVjdC5rZXlzKGJ1aWxkaW5ncykpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QnKS5yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChiKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aWVyTnVtIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UGVya0Zyb21UaWVyKHRpZXJOdW0pIHtcclxuICAgIGZvciAobGV0IHBlcmsgaW4gcGVya3NbJ3RpZXInICsgdGllck51bV0pIHtcclxuICAgICAgICBpZiAoaGFzUGVyayhwZXJrKSkgcmV0dXJuIHBlcms7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gcGVyayBmb3IgdGhpcyB0aWVyXHJcbiAgICByZXR1cm4gJyc7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzZWxlY3RBYmlsaXR5KGFiaWxpdHlOYW1lKSB7XHJcbiAgICBpZiAoaGFzUGVyayhhYmlsaXR5TmFtZSkpIHJldHVybjtcclxuXHJcbiAgICBsZXQgY29uZmlybVNlbGVjdGlvbiA9IHdpbmRvdy5jb25maXJtKFwiRG8geW91IHdhbnQgdG8gc2VsZWN0IFwiICsgYWJpbGl0eU5hbWUgKyBcIj8gVGhpcyBkZWNpc2lvbiBjYW5ub3QgYmUgZWFzaWx5IGNoYW5nZWQuXCIpO1xyXG5cclxuICAgIGlmICghY29uZmlybVNlbGVjdGlvbikgcmV0dXJuO1xyXG4gICAgYWRkUGVyayhhYmlsaXR5TmFtZSk7XHJcblxyXG4gICAgLy8gZm9yIChsZXQgaSA9IDE7IGkgPD0gMTsgKytpKVxyXG4gICAgcmVxdWlyZSgnLi9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbicpLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKGFiaWxpdHlOYW1lKTtcclxuXHJcbiAgICAvLyBteVBlcmtzLnB1c2goYWJpbGl0eU5hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFBlcmtzKCkge1xyXG4gICAgbXlQZXJrcyA9IFtdO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGhhc1BlcmssXHJcbiAgICBhZGRQZXJrLFxyXG4gICAgc2VsZWN0QWJpbGl0eSxcclxuICAgIGdldFBlcmtGcm9tVGllcixcclxuICAgIGdldEFsbFBlcmtzLFxyXG4gICAgcmVzZXRQZXJrc1xyXG59OyIsImxldCBwbGF5ZXJVaWQgPSBudWxsO1xyXG5cclxuLy8gR2V0IFVzZXIgSURcclxuZnVuY3Rpb24gZ2V0UGxheWVyVWlkKCkge1xyXG4gICAgcmV0dXJuIHBsYXllclVpZDtcclxufVxyXG5cclxuLy8gRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYSB1bmlxdWUgVUlEXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVW5pcXVlSUQoKSB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKS50b1N0cmluZygzNikgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgNSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZ2V0UGxheWVyVWlkLFxyXG4gICAgZ2VuZXJhdGVVbmlxdWVJRFxyXG59OyIsIi8vIERFUEVORFMgT046IGpzb24vYnV0dG9ucy5qc1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKCcuL2pzb24vcG9uZGVyJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnV0dG9ucyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1dHRvbnMnKTtcclxuXHJcbmZ1bmN0aW9uIGlzUG9uZGVyZWQoaWQpIHtcclxuICAgIC8vIENoZWNrIGlmIHRoZSBpZCBleGlzdHMgaW4gdGhlIHVubG9ja3MgbWFwXHJcbiAgICAvLyBJZiB0aGUgaWQgZG9lc24ndCBleGlzdCBpbiB0aGUgbWFwLCByZXR1cm4gZmFsc2VcclxuXHJcbiAgICByZXR1cm4gcG9uZGVyc1tpZF0gPyBwb25kZXJzW2lkXS5pc1BvbmRlcmVkIDogZmFsc2U7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjYW5VbmxvY2sodW5sb2NrSWQpIHtcclxuICAgIC8vIEdldCB0aGUga2V5IGZyb20gdGhpcyBpZFxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB1bmxvY2s/ICcsIHVubG9ja0lkKTtcclxuICAgIHZhciB1bmxvY2tLZXkgPSAnJztcclxuICAgIGZvciAobGV0IHVubG9jayBpbiBwb25kZXJzKSB7XHJcbiAgICAgICAgaWYgKHBvbmRlcnNbdW5sb2NrXS5pZCA9PT0gdW5sb2NrSWQpIHtcclxuICAgICAgICAgICAgdW5sb2NrS2V5ID0gdW5sb2NrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodW5sb2NrS2V5ID09PSAnJykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcImludmFsaWQgdW5sb2NrIGlkOiBcIiwgdW5sb2NrSWQpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIHJlc291cmNlc1xyXG4gICAgdmFyIGNhbkJ1eSA9IHRydWU7XHJcbiAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBwb25kZXJzW3VubG9ja0tleV0uY29zdCkge1xyXG4gICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA8IHBvbmRlcnNbdW5sb2NrS2V5XS5jb3N0W21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkNhbm5vdCB1bmxvY2sgXCIgKyB1bmxvY2tJZCk7XHJcbiAgICAgICAgICAgIGNhbkJ1eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB3ZSB1bmxvY2sgJywgdW5sb2NrSWQsIGNhbkJ1eSk7XHJcbiAgICByZXR1cm4gY2FuQnV5O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVQb25kZXJCdXR0b25zKHBvbmRlck9iamVjdHMpIHtcclxuICAgIC8vIGNvbnN0IGdlbmVyYXRlZEJ1dHRvbnMgPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtwb25kZXJLZXksIHBvbmRlck9ial0gb2YgT2JqZWN0LmVudHJpZXMocG9uZGVyT2JqZWN0cykpIHtcclxuXHJcbiAgICAgICAgY29uc3QgYnV0dG9uS2V5ID0gYHBvbmRlciR7Y2FwaXRhbGl6ZUZpcnN0KHBvbmRlcktleSl9YDsgLy8gZS5nLiBwb25kZXJGaXNoaW5nXHJcblxyXG4gICAgICAgIC8vIGxldCB0b29sdGlwQ29zdCA9IE9iamVjdC5lbnRyaWVzKHBvbmRlck9iai5jb3N0KS5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYCR7YW1vdW50LnRvRml4ZWQoMCl9ICR7bWF0ZXJpYWx9YCkuam9pbignPGJyPicpO1xyXG4gICAgICAgIGxldCB0b29sdGlwQ29zdCA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuZ2VuZXJhdGVUb29sdGlwQ29zdChwb25kZXJPYmouY29zdCk7XHJcbiAgICAgICAgYnV0dG9uc1tidXR0b25LZXldID0ge1xyXG4gICAgICAgICAgICBjbGFzczogJ3Rvb2x0aXAgdW5sb2NrJyxcclxuICAgICAgICAgICAgdGV4dDogcG9uZGVyT2JqLnRleHQgfHwgJ1BvbmRlciBhIE15c3Rlcnk/JyxcclxuICAgICAgICAgICAgdG9vbHRpcERlc2M6IHBvbmRlck9iai50b29sdGlwRGVzYyB8fCBcIldobyBrbm93cyB3aGF0IHlvdSdsbCBkaXNjb3ZlclwiLFxyXG4gICAgICAgICAgICB0b29sdGlwQ29zdDogdG9vbHRpcENvc3QsXHJcbiAgICAgICAgICAgIHRhYjogJ3BvbmRlcicsXHJcbiAgICAgICAgICAgIHVubG9jazogcG9uZGVyS2V5LFxyXG4gICAgICAgICAgICByZXF1aXJlbWVudDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4vaGVscGVyJykuZ2V0TWF4KCdwb25kZXInKSA+PSBwb25kZXJzW3BvbmRlcktleV0uY29zdFsncG9uZGVyJ10gLyAyO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGlkZTogKCkgPT4gaXNQb25kZXJlZChwb25kZXJLZXkpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uS2V5LCBidXR0b25zW2J1dHRvbktleV0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyByZXR1cm4gZ2VuZXJhdGVkQnV0dG9ucztcclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2FuVW5sb2NrLFxyXG4gICAgaXNQb25kZXJlZCxcclxuICAgIGdlbmVyYXRlUG9uZGVyQnV0dG9uc1xyXG59OyIsIlxyXG5jb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoXCIuL2pzb24vcHJlc3RpZ2VcIik7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZShcIi4vcG9uZGVyXCIpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKFwiLi9zdGFnZXNcIik7XHJcbmNvbnN0IHsgdXBkYXRlQm91bmNlQW5pbWF0aW9uIH0gPSByZXF1aXJlKFwiLi91cGRhdGVCb3VuY2VBbmltYXRpb25cIik7XHJcblxyXG5mdW5jdGlvbiByZWNhbGNNYXhDbG9uZXMoKSB7XHJcbiAgICBsZXQgbWF4Q2xvbmVzID0gMDtcclxuICAgIGlmIChwYXNzZWRTdGFnZSgnY2xvbmUnKSkgbWF4Q2xvbmVzICs9IDE7XHJcblxyXG4gICAgY29uc3QgYnVpbGRpbmdzID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIikuYnVpbGRpbmdzO1xyXG4gICAgLy8gY29uc29sZS5sb2cocGFzc2VkU3RhZ2UoJ2Nsb25lJyksIG1heENsb25lcyk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIGJ1aWxkaW5nXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleSwgYnVpbGRpbmcsIGJ1aWxkaW5nLmVmZmVjdHMpO1xyXG4gICAgICAgIGlmIChidWlsZGluZy5lZmZlY3RzICYmIGJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddKVxyXG4gICAgICAgICAgICBtYXhDbG9uZXMgKz0gYnVpbGRpbmcuZWZmZWN0c1snY2xvbmVzJ10gKiBidWlsZGluZy5jb3VudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb25kZXIgYm9udXNlc1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ3NoZWx0ZXInXS5jb3VudDtcclxuICAgIGlmIChpc1BvbmRlcmVkKCdiaWdnZXJIdXQnKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ2h1dCddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlckhvdXNlJykpIG1heENsb25lcyArPSAyICogYnVpbGRpbmdzWydob3VzZSddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpKSBtYXhDbG9uZXMgKz0gNCAqIGJ1aWxkaW5nc1sndGVlcGVlJ10uY291bnQ7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnZXZlbkJpZ2dlclNoZWx0ZXInKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ3NoZWx0ZXInXS5jb3VudDtcclxuXHJcbiAgICBpZiAoaGFzUHJlc3RpZ2UoJ21heENsb25lcycpKSBtYXhDbG9uZXMgKz0gMSAqIGdldExldmVsT2ZQcmVzdGlnZSgnbWF4Q2xvbmVzJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtYXhDbG9uZXMpO1xyXG4gICAgLy8gcmV0dXJuIG1heENsb25lcztcclxuICAgIHJlcXVpcmUoXCIuL3Jlc291cmNlc1wiKS5zZXRNYXgoJ2Nsb25lcycsIG1heENsb25lcyk7XHJcbiAgICB1cGRhdGVCb3VuY2VBbmltYXRpb24oKTtcclxufVxyXG5cclxuZXhwb3J0cy5yZWNhbGNNYXhDbG9uZXMgPSByZWNhbGNNYXhDbG9uZXM7IiwiLyoqXHJcbiAqIFJlY2FsY3VsYXRlcyB0aGUgY29zdCBvZiBhIGJ1aWxkaW5nXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ0tleSBUaGUgYnVpbGRpbmcgd2UgcmVjYWxjdWxhdGUgdGhlIGNvc3Qgb2ZcclxuICovXHJcbmZ1bmN0aW9uIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGJ1aWxkaW5nS2V5KSB7XHJcbiAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJykuYnVpbGRpbmdzO1xyXG4gICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuICAgIGlmIChidWlsZGluZyAmJiBidWlsZGluZy5jb3N0ICYmIGJ1aWxkaW5nLnJhdGlvKSB7XHJcbiAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhidWlsZGluZywgYnVpbGRpbmcuYmFzZWNvc3RbbWF0ZXJpYWxdLCBidWlsZGluZy5yYXRpbywgYnVpbGRpbmcuY291bnQpO1xyXG4gICAgICAgICAgICBidWlsZGluZ1snY29zdCddW21hdGVyaWFsXSA9IE1hdGgucm91bmQoYnVpbGRpbmcuYmFzZWNvc3RbbWF0ZXJpYWxdICogTWF0aC5wb3coYnVpbGRpbmcucmF0aW8sIGJ1aWxkaW5nLmNvdW50KSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVxdWlyZSgnLi9wZXJrcycpLmhhc1BlcmsoJ0FyY2hpdGVjdCcpKSBidWlsZGluZy5jb3N0W21hdGVyaWFsXSAqPSAwLjc1OyAvLyAyNSUgcmVkdWN0aW9uIGZvciBhcmNoaXRlY3RzXHJcbiAgICAgICAgICAgIGlmIChyZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKS5oYXNQcmVzdGlnZSgnY2hlYXBlckJ1aWxkaW5ncycpKVxyXG4gICAgICAgICAgICAgICAgYnVpbGRpbmcuY29zdFttYXRlcmlhbF0gKj0gTWF0aC5wb3coMC45NSwgcmVxdWlyZSgnLi9qc29uL3ByZXN0aWdlJykuZ2V0TGV2ZWxPZlByZXN0aWdlKCdjaGVhcGVyQnVpbGRpbmdzJykpOyAvLyA1JSByZWR1Y3Rpb25cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIHRvb2x0aXAgY29zdFxyXG4gICAgY29uc3QgbXlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGJ1aWxkaW5nS2V5KTtcclxuICAgIHZhciBuZXdUZXh0ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KGJ1aWxkaW5nLmNvc3QpO1xyXG4gICAgaWYgKG15QnV0dG9uKSB7XHJcbiAgICAgICAgbXlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIG5ld1RleHQpO1xyXG4gICAgICAgIGNvbnN0IGVmZmVjdFN0cmluZyA9IHJlcXVpcmUoJy4vYnVpbGRpbmdzJykuZ2VuZXJhdGVFZmZlY3RTdHJpbmcoYnVpbGRpbmcpO1xyXG4gICAgICAgIG15QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWVmZmVjdCcsIGVmZmVjdFN0cmluZyk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSB7IHRocm93IFwiQnV0dG9uIG5vdCBmb3VuZCBmb3IgXCIgKyBidWlsZGluZ0tleTsgfVxyXG5cclxufVxyXG5leHBvcnRzLnJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0ID0gcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3Q7IiwiXHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcblxyXG5jb25zdCB7IGdldFdvcmtlcnMsIHVwZGF0ZVRvdGFsIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNUb29sLCB9ID0gcmVxdWlyZSgnLi90b29scycpO1xyXG5jb25zdCB7IGNhbGNDcmFmdEJvbnVzLCBnZXRNYXggfSA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGNhbGNJbmNyZWFzZSB9ID0gcmVxdWlyZShcIi4vY2FsY0luY3JlYXNlXCIpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIsIGFiYnJldmlhdGVOdW1iZXIgfSA9IHJlcXVpcmUoXCIuL3NpZGViYXJcIik7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTsgLy8gVXNlZCBmb3IgZXZhbCBmdW5jdGlvbnNcclxuY29uc3QgeyB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoXCIuL3NpZGViYXJcIik7XHJcbmNvbnN0IHsgdXBkYXRlU2tpbGxzIH0gPSByZXF1aXJlKFwiLi9za2lsbHNcIik7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKFwiLi9yZWNhbGNNYXhDbG9uZXNcIik7XHJcbi8vIGNvbnNvbGUubG9nKGNhcGl0YWxpemVGaXJzdCk7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBqb2IgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2VBZmZlY3RlZEJ5Sm9iKGpvYiwgcmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IHNraWxsID0gc2tpbGxzW2pvYl07XHJcbiAgICBpZiAoIXNraWxsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgaWYgKHNraWxsLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlJ3MgYSB0b29sIHJlcXVpcmVtZW50IGZvciB0aGlzIHJlc291cmNlXHJcbiAgICAgICAgaWYgKHNraWxsLm5lZWRUb29scyAmJiBBcnJheS5pc0FycmF5KHNraWxsLm5lZWRUb29scykpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgdG9vbE9iaiBvZiBza2lsbC5uZWVkVG9vbHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRvb2wgaW4gdG9vbE9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sT2JqW3Rvb2xdLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaGFzIHRoaXMgdG9vbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm93LCBqdXN0IHJldHVybmluZyB0cnVlIHRvIGluZGljYXRlIHRoZSByZXNvdXJjZSBpcyBhZmZlY3RlZCBhbmQgYSB0b29sIGlzIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgeW91IG1heSB3YW50IHRvIHJlcGxhY2UgdGhpcyB3aXRoIGEgY2hlY2sgdG8gc2VlIGlmIHRoZSBwbGF5ZXIgcG9zc2Vzc2VzIHRoZSByZXF1aXJlZCB0b29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNUb29sKHRvb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBuZWVkZWQgYSB0b29sIGJ1dCBub3QgZm9yIHRoaXNcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIG5vIHRvb2wgcmVxdWlyZW1lbnQgd2FzIGZvdW5kIGZvciB0aGUgcmVzb3VyY2UsIGl0J3Mgc3RpbGwgYWZmZWN0ZWQgYnkgdGhlIGpvYlxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjU2Vjb25kc1JlbWFpbmluZyhyZXNvdXJjZU5hbWUsIG5lZWRlZCkge1xyXG4gICAgaWYgKG5lZWRlZCA8PSBnZXRNYXRlcmlhbChyZXNvdXJjZU5hbWUpKSByZXR1cm4gMDtcclxuXHJcbiAgICAvLyBIb3cgbXVjaCBwZXIgc2Vjb25kXHJcbiAgICBjb25zdCBpbmNyZWFzZSA9IGNhbGNJbmNyZWFzZShyZXNvdXJjZU5hbWUsIDEwMDApO1xyXG4gICAgaWYgKGluY3JlYXNlID09IDApIHJldHVybiAtMTsgLy8gV29uJ3QgZGlzcGxheVxyXG5cclxuICAgIC8vIERpZmZlcmVuY2Ugb3ZlciB0aW1lXHJcbiAgICBjb25zdCB0aW1lUmVtYWluaW5nID0gTWF0aC5jZWlsKG5lZWRlZCAtIGdldE1hdGVyaWFsKHJlc291cmNlTmFtZSkpIC8gaW5jcmVhc2U7XHJcblxyXG4gICAgcmV0dXJuIHRpbWVSZW1haW5pbmc7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgcmVzb3VyY2VzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG5leHBvcnRzLnJlc291cmNlc0NvbnRhaW5lciA9IHJlc291cmNlc0NvbnRhaW5lcjtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRNYXgobWF0ZXJpYWwsIG51bSkge1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS5tYXggPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNyZWFzZU1heChtYXRlcmlhbCwgbnVtKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImluY3JlYXNlIG1heCBcIiwgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLm1heCArPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWwgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRNYXRlcmlhbChtYXRlcmlhbCwgbnVtKSB7XHJcbiAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlID0gbnVtO1xyXG4gICAgdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKTtcclxuICAgIHVwZGF0ZVRvdGFsKCk7XHJcbn1cclxuLy8gR2VuZXJpYyBpbmNyZWFzZVxyXG5mdW5jdGlvbiBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCBudW0pIHtcclxuICAgIC8vIEVuc3VyZSB3ZSBhY3R1YWxseSBuZWVkIHRvIGRvIGFueXRoaW5nXHJcbiAgICBpZiAobnVtID09IDAgfHwgTnVtYmVyLmlzTmFOKG51bSkpIHJldHVybjtcclxuICAgIG1hdGVyaWFsID0gbWF0ZXJpYWwudG9Mb3dlckNhc2UoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbmNyZWFzZSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgLy8gaWYgKE1hdGguYWJzKG51bSkgPiA1KSBjb25zb2xlLmxvZygnY2hhbmdpbmcnLCBtYXRlcmlhbCwgJ2J5JywgbnVtKTtcclxuXHJcbiAgICAvLyBUaGlzIGNoZWNrIGVuc3VyZXMgdGhhdCB0aGUgbWF0ZXJpYWwga2V5IGV4aXN0cyBpbiB0aGUgcmVzb3VyY2VzIG1hcC5cclxuICAgIGlmIChtYXRlcmlhbCBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBpZiAobWF0ZXJpYWwgPT09ICdjbG9uZXMnKSByZWNhbGNNYXhDbG9uZXMoKTtcclxuICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwpIDwgZ2V0TWF4KG1hdGVyaWFsKSAmJiBudW0gPiAwKSB7IC8vIEFkZGluZyByZXNvdXJjZXNcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2Zhc3RlclJlc291cmNlR2FpbicpKSBudW0gKj0gMS4wNTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAgICAgICAgIHVwZGF0ZVNraWxscyhtYXRlcmlhbCwgbnVtKTtcclxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsID09PSAndmlvbGVuY2UnKSByZXF1aXJlKFwiLi9jb21iYXRcIikucmVmcmVzaFZhbHVlcygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMCkgeyAvLyBTdWJ0cmFjdGluZyByZXNvdXJjZXNcclxuICAgICAgICAgICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAgICAgfSBlbHNlIHsgLy8gQWxyZWFkeSBhdCBtYXhcclxuICAgICAgICAgICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSA9IGdldE1heChtYXRlcmlhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShtYXRlcmlhbCk7XHJcbiAgICAgICAgLy8gcmVhc3NpZ25Kb2JzQmFzZWRPblJlc291cmNlcygpO1xyXG5cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG1hdGVyaWFsIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnY3JhZnRpbmcgYSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpO1xyXG4gICAgICAgIHVwZGF0ZVNraWxscyhtYXRlcmlhbCwgbnVtKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIENyZWF0aW5nIGEgbmV3IG1hdGVyaWFsXHJcbiAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0pIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW21hdGVyaWFsXSkgY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG5cclxuICAgICAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY3JhZnRlZCBtYXRlcmlhbHMgaGF2ZSBubyBtYXgsIGEgbGEgS2l0dGVucyBHYW1lXHJcblxyXG59XHJcbi8vIEdsb2JhbGx5IGRpc3BsYXkgZm9yIGRldiBwdXJwb3Nlc1xyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5pbmNyZWFzZU1hdGVyaWFsID0gaW5jcmVhc2VNYXRlcmlhbDtcclxuLy8gQHRzLWlnbm9yZVxyXG53aW5kb3cuaW5jcmVhc2VNYXggPSBpbmNyZWFzZU1heDtcclxuXHJcblxyXG5mdW5jdGlvbiB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMoKSB7XHJcbiAgICAvLyBjb25zdCByZXNvdXJjZXMgPSBbXCJjbG9uZXNcIiwgXCJzdGlja3NcIiwgXCJ2aW5lc1wiLCBcInJvY2tzXCIsIFwiZmlzaFwiLCBcIndvb2RcIiwgXCJwb25kZXJcIl07XHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImluY3JlYXNlIG9mIFwiICsgcmVzb3VyY2UpO1xyXG4gICAgICAgIGNvbnN0IHJhdGUgPSBjYWxjSW5jcmVhc2UocmVzb3VyY2UsIDEwMDApO1xyXG4gICAgICAgIHZhciByYXRlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3Jlc291cmNlfUluY3JlYXNlUmF0ZWApO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAocmF0ZUVsZW1lbnQpIHJhdGVFbGVtZW50LnRleHRDb250ZW50ID0gcmF0ZTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFxyXG4gKiBAcmV0dXJucyBCdXR0b25cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihjb25maWcpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgYnV0dG9uLmNsYXNzTmFtZSA9IGNvbmZpZy5jbGFzcyArICcgdG9vbHRpcCc7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdpZCcsIGNvbmZpZy5pZCk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdyZXF1aXJlbWVudCcsIGNvbmZpZy5yZXF1aXJlZFN0YWdlKTtcclxuICAgIGNvbnN0IHJlc291cmNlTmFtZSA9IE9iamVjdC5rZXlzKGNyYWZ0ZWRSZXNvdXJjZXMpLmZpbmQoa2V5ID0+IGNyYWZ0ZWRSZXNvdXJjZXNba2V5XSA9PT0gY29uZmlnKTtcclxuICAgIC8vIGNvbnN0IGNsZWFuQ291bnQgPSBwYXJzZUZsb2F0KGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS52YWx1ZSkudG9GaXhlZCgwKTtcclxuICAgIC8vIGJ1dHRvbi5pbm5lckhUTUwgPSBgJHtjb25maWcudGV4dCB8fCBjYXBpdGFsaXplRmlyc3QocmVzb3VyY2VOYW1lKX06IDxzcGFuIGlkPVwiJHtyZXNvdXJjZU5hbWUgKyBcIlZhbHVlXCJ9XCI+JHtjbGVhbkNvdW50fTwvc3Bhbj5gO1xyXG4gICAgYnV0dG9uLmlubmVySFRNTCA9IGAke2NvbmZpZy50ZXh0IHx8IGNhcGl0YWxpemVGaXJzdChyZXNvdXJjZU5hbWUpfWA7XHJcbiAgICAvLyBidXR0b24udG9vbHRpcERlc2MgPSBjb25maWcudG9vbHRpcERlc2M7IFxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgYnV0dG9uLnRhYiA9ICdleHBlcmltZW50JztcclxuXHJcbiAgICByZXR1cm4gYnV0dG9uO1xyXG59XHJcblxyXG5cclxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMnKTtcclxuZnVuY3Rpb24gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpIHtcclxuXHJcbiAgICAvLyBGb3IgZWFjaCByZXNvdXJjZSwgY3JlYXRlIGEgYnV0dG9uIHVzaW5nIHRoZSBjYXB0dXJlZCBjb3VudHNcclxuICAgIGZvciAobGV0IG5hbWUgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG5cclxuICAgICAgICAvLyBjb25maWcuY291bnQgPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihjcmFmdGVkUmVzb3VyY2VzW25hbWVdKTtcclxuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsIGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0udG9vbHRpcERlc2MgfHwgXCJcIik7XHJcbiAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBnZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uY29zdCkgfHwgXCJcIik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rvb2x0aXAgY29zdCcsIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JykpO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgICAgIGNvbnN0IHJlcVJlc3VsdCA9IHBhc3NlZFN0YWdlKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVtZW50JykpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlcVJlc3VsdCwgYnV0dG9uLmdldEF0dHJpYnV0ZSgncmVxdWlyZW1lbnQnKSwgT2JqZWN0LnZhbHVlcyhnZXRBbGxTdGFnZXMoKSkpO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoYXQgdGhlIGJ1ZyBpcyBoZXJlXHJcbiAgICAgICAgaWYgKHJlcVJlc3VsdCkgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgIGVsc2UgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG5cclxuXHJcbiAgICAgICAgYnV0dG9uc1tjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmlkXSA9IGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9uKG5hbWUpIHtcclxuXHJcbiAgICBjb25zdCBidXR0b24gPSBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY3JhZnRlZFJlc291cmNlc1tuYW1lXSk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsIGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0udG9vbHRpcERlc2MpO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBnZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uY29zdCkpO1xyXG5cclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgYnV0dG9uc1tjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmlkXSA9IGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV07XHJcblxyXG59XHJcblxyXG4vLyBDYWxsIHRoZSBmdW5jdGlvbiB0byByZXBsYWNlIDxwPiBlbGVtZW50cyB3aXRoIHRoZSBidXR0b25zXHJcbi8vIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbignc3RpY2tzJyk7XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVRvb2x0aXBDb3N0KHJlcXVpcmVtZW50cykge1xyXG4gICAgaWYgKHJlcXVpcmVtZW50cyA9PT0gbnVsbCkgcmV0dXJuICcnO1xyXG4gICAgdmFyIHN0ciA9ICcnO1xyXG4gICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcmVxdWlyZW1lbnRzKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IHJlcXVpcmVtZW50c1ttYXRlcmlhbF07LyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi87XHJcbiAgICAgICAgY29uc3QgY29sb3JDbGFzcyA9IGhhc0Vub3VnaCA/ICdlbm91Z2gnIDogJ25vdC1lbm91Z2gnO1xyXG4gICAgICAgIHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLSR7bWF0ZXJpYWx9ICR7Y29sb3JDbGFzc31cIj4ke2FiYnJldmlhdGVOdW1iZXIocmVxdWlyZW1lbnRzW21hdGVyaWFsXSl9ICR7bWF0ZXJpYWx9PC9zcGFuPjxicj5gO1xyXG5cclxuICAgIH1cclxuICAgIHJldHVybiBzdHI7XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgZW1vamlEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vtb2ppRGlzcGxheScpO1xyXG5mdW5jdGlvbiB1cGRhdGVFbW9qaURpc3BsYXkoKSB7XHJcbiAgICBsZXQgZW1vamlTdHIgPSBcIlwiO1xyXG5cclxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgam9iQ291bnRzIG1hcCB0byBnZXQgZWFjaCBqb2IgYW5kIGl0cyBjb3VudFxyXG4gICAgZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gbGV0IHJlc291cmNlID0gcmVzb3VyY2VzW2dldEFmZmVjdGVkUmVzb3VyY2VzKGpvYilbMF1dO1xyXG4gICAgICAgIGxldCBjb3VudCA9IGdldFdvcmtlcnMocmVzb3VyY2UpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlLCBjb3VudCk7XHJcbiAgICAgICAgaWYgKGNvdW50ID09PSB1bmRlZmluZWQgfHwgY291bnQgPT0gMCkgY29udGludWU7XHJcbiAgICAgICAgbGV0IGVtb2ppID0gcmVzb3VyY2VzW3Jlc291cmNlXS5lbW9qaSB8fCAn8JOAnyc7ICAvLyBnZXQgdGhlIGVtb2ppIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGpvYiBmcm9tIHRoZSByZXNvdXJjZXMgbWFwXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coam9iLCBlbW9qaSk7XHJcbiAgICAgICAgaWYgKGVtb2ppKSB7XHJcbiAgICAgICAgICAgIGVtb2ppU3RyICs9IGA8c3BhbiBjbGFzcz0ndG9vbHRpcCcgdG9vbHRpcGRlc2M9JyR7cmVzb3VyY2V9Jz4ke2Vtb2ppLnJlcGVhdChjb3VudCl9PC9zcGFuPmA7ICAvLyByZXBlYXQgdGhlIGVtb2ppIGJhc2VkIG9uIHRoZSBjb3VudFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbW9qaURpc3BsYXkuaW5uZXJIVE1MID0gZW1vamlTdHI7ICAvLyB1cGRhdGUgdGhlIGVtb2ppRGlzcGxheSBkaXYgd2l0aCB0aGUgZ2VuZXJhdGVkIGVtb2ppIHN0cmluZ1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkanVzdEZvbnRTaXplKCkge1xyXG4gICAgICAgIGxldCBmb250U2l6ZSA9IDQ4OyAgLy8gU3RhcnRpbmcgZm9udCBzaXplXHJcblxyXG4gICAgICAgIGVtb2ppRGlzcGxheS5zdHlsZS5mb250U2l6ZSA9IGAke2ZvbnRTaXplfXB4YDtcclxuXHJcbiAgICAgICAgd2hpbGUgKChlbW9qaURpc3BsYXkub2Zmc2V0V2lkdGggPiA2MDApICYmIGZvbnRTaXplID4gMzApIHtcclxuICAgICAgICAgICAgLy8gMTAgaXMgYSBtaW5pbXVtIGZvbnQtc2l6ZSB0aHJlc2hvbGQgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wXHJcbiAgICAgICAgICAgIGZvbnRTaXplIC09IDE7IC8vIGRlY3JlYXNlIHRoZSBmb250IHNpemVcclxuICAgICAgICAgICAgZW1vamlEaXNwbGF5LnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udFNpemV9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gd2hlbmV2ZXIgdGhlIGNvbnRlbnQgb2YgI2Vtb2ppRGlzcGxheSBjaGFuZ2VzXHJcbiAgICBhZGp1c3RGb250U2l6ZSgpO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB1cGRhdGVFbW9qaURpc3BsYXkgZXZlcnkgdGltZSBqb2JDb3VudHMgaXMgdXBkYXRlZDpcclxuLy8gRm9yIGV4YW1wbGU6XHJcbi8vIGpvYkNvdW50cy5zZXQoJ2Zpc2hpbmcnLCA0KTtcclxudXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcblxyXG5cclxuY29uc3QgYXV0b0NyYWZ0VGFibGUgPSB7XHJcbiAgICAnc3RpY2tzJzogJ2hhbmRsZScsXHJcbiAgICAnd29vZCc6ICdwYXBlcicsXHJcbiAgICAncm9ja3MnOiAnc2hhcnByb2NrcycsXHJcbiAgICAndmluZXMnOiAncm9wZScsXHJcbiAgICAnc2FuZCc6ICdnbGFzcycsXHJcbiAgICAnb3JlJzogJ2dvbGQnLFxyXG4gICAgJ2NsYXknOiAnYnJpY2tzJ1xyXG59O1xyXG5cclxuZnVuY3Rpb24gY3JhZnRBbGxSZXNvdXJjZXMocmVzb3VyY2VLZXkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29zdCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcbiAgICAgICAgbGV0IHN1ZmZpY2llbnRSZXNvdXJjZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtYXQgaW4gY29zdCkge1xyXG4gICAgICAgICAgICAvLyBpZiAoZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIDwgY29zdFttYXRdKSB7XHJcbiAgICAgICAgICAgIHN1ZmZpY2llbnRSZXNvdXJjZXMucHVzaChnZXRNYXRlcmlhbChtYXQsIHJlc291cmNlcykgLyBjb3N0W21hdF0pO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtaW4gPSBNYXRoLmZsb29yKE1hdGgubWluKC4uLnN1ZmZpY2llbnRSZXNvdXJjZXMpKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXNvdXJjZUtleSwgbWluKTtcclxuICAgICAgICBjcmFmdFJlc291cmNlUXVhbnRpdHkocmVzb3VyY2VLZXksIG1pbik7XHJcblxyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBjcmFmdGFsbCBmb3I6ICcsIHJlc291cmNlS2V5LCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyYWZ0UmVzb3VyY2VRdWFudGl0eShyZXNvdXJjZUtleSwgcXVhbnRpdHkpIHtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZUtleSkpIHRocm93IFwiSW52YWxpZCBjcmFmdCBmb3IgbWlzc2luZyByZXNvdXJjZTogXCIgKyByZXNvdXJjZUtleTtcclxuXHJcbiAgICBpZiAoIWNhbkNyYWZ0KHJlc291cmNlS2V5KSkgcmV0dXJuOyAvLyBUYWtlcyBjYXJlIG9mIHF1YW50aXR5IDwgMVxyXG4gICAgbGV0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgcXVhbnRpdHkgPSBNYXRoLmZsb29yKHF1YW50aXR5KTsgLy8gTWFrZSBzdXJlIHRoZSBxdWFudGl0eSBpcyBhIHdob2xlIG51bWJlclxyXG5cclxuICAgIGZvciAoY29uc3QgW21hdCwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhjb3N0KSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjcmFmdGluZyBxdWFudGl0eTonLCBtYXQsIHZhbCk7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChtYXQsIC12YWwgKiBxdWFudGl0eSk7XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKG1hdCk7XHJcbiAgICB9XHJcbiAgICBpbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlS2V5LCBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSkgKiBxdWFudGl0eSk7XHJcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguZmxvb3IocXVhbnRpdHkpOyArK2kpIHsgLy8gT25seSBjcmFmdCB3aG9sZSBudW1iZXIsIHNvIDEuNCBvbmx5IHJ1bnMgb25jZVxyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdjcmFmdGluZycsIHF1YW50aXR5LCByZXNvdXJjZUtleSwgY29zdCk7XHJcbiAgICAvLyAgICAgY3JhZnRPbmUocmVzb3VyY2VLZXksIGNvc3QsIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlKSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSA9IHRydWU7XHJcblxyXG4gICAgdXBkYXRlRGlzcGxheVZhbHVlKHJlc291cmNlS2V5KTtcclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cykge1xyXG4gICAgZm9yIChjb25zdCBbbWF0LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNvc3QpKSB7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChtYXQsIC12YWwpO1xyXG4gICAgfVxyXG4gICAgaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZUtleSwgY3JhZnRCb251cyk7XHJcblxyXG59XHJcbi8vIENyYWZ0IGZ1bmN0aW9uXHJcbmZ1bmN0aW9uIGNyYWZ0UmVzb3VyY2UocmVzb3VyY2VLZXkpIHtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZUtleSkpIHRocm93IFwiSW52YWxpZCBjcmFmdCBmb3IgbWlzc2luZyByZXNvdXJjZTogXCIgKyByZXNvdXJjZUtleTtcclxuXHJcbiAgICBpZiAoIWNhbkNyYWZ0KHJlc291cmNlS2V5KSkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjb3N0ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY29zdDtcclxuICAgIGxldCBjcmFmdEJvbnVzID0gY2FsY0NyYWZ0Qm9udXMocmVzb3VyY2VLZXkpO1xyXG5cclxuXHJcbiAgICBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cyk7XHJcblxyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlKSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSA9IHRydWU7XHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUocmVzb3VyY2VLZXkpO1xyXG59XHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaW5jcmVhc2VNYXRlcmlhbCxcclxuICAgIHNldE1heCxcclxuICAgIGluY3JlYXNlTWF4LFxyXG4gICAgY3JhZnRBbGxSZXNvdXJjZXMsXHJcbiAgICBjcmFmdFJlc291cmNlLFxyXG4gICAgdXBkYXRlRW1vamlEaXNwbGF5LFxyXG4gICAgZ2VuZXJhdGVUb29sdGlwQ29zdCxcclxuICAgIGNhbGNTZWNvbmRzUmVtYWluaW5nLFxyXG4gICAgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucyxcclxuICAgIGNhbGNJbmNyZWFzZSxcclxuICAgIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyxcclxuICAgIGNyYWZ0UmVzb3VyY2VRdWFudGl0eSxcclxuICAgIHNldE1hdGVyaWFsXHJcblxyXG59OyIsIi8vIERFUEVORFMgT046IHJlc291cmNlcy5qc1xyXG5jb25zdCB7IGNhbGNJbmNyZWFzZSwgdXBkYXRlRW1vamlEaXNwbGF5IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGFkZFRvb2wsIGdldEFsbFRvb2xzIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgYWxsVmlzaWJsZUJ1dHRvbnMsIHNldFZpc2libGVCdXR0b24sIGdldE1heCB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBtYWtlVmlzaWJsZSB9ID0gcmVxdWlyZSgnLi9tYWtlVmlzaWJsZScpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyBnZXRBbGxQZXJrcywgYWRkUGVyaywgaGFzUGVyaywgc2VsZWN0QWJpbGl0eSB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQgfSA9IHJlcXVpcmUoJy4vcG9uZGVyJyk7XHJcbmNvbnN0IHsgam9iQ291bnRzLCBzZXRDb25uZWN0aW9ucywgZ2V0Q29ubmVjdGlvbnMsIGRpc3RyaWJ1dGVXb3JrZXJzLCB1cGRhdGVEaXNwbGF5IH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyB0b3RhbF90aW1lIH0gPSByZXF1aXJlKCcuL21haW4nKTtcclxuY29uc3QgeyBzZXRBdGVGaXNoLCBnZXRBdGVGaXNoIH0gPSByZXF1aXJlKCcuL2F0ZUZpc2gnKTtcclxuXHJcblxyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoXCIuL2pzb24vc2tpbGxzXCIpO1xyXG5jb25zdCB7IGdldEFsbFN0YWdlcyB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuY29uc3QgeyBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmcsIGxvYWRGYWN0b3J5IH0gPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcclxuY29uc3QgeyByZWNhbGNNYXhDbG9uZXMgfSA9IHJlcXVpcmUoJy4vcmVjYWxjTWF4Q2xvbmVzJyk7XHJcbmNvbnN0IHsgdXBkYXRlU2lkZWJhciB9ID0gcmVxdWlyZSgnLi9zaWRlYmFyJyk7XHJcbmNvbnN0IHsgcHJlc3RpZ2UgfSA9IHJlcXVpcmUoJy4vanNvbi9wcmVzdGlnZScpO1xyXG5jb25zdCB7IHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0IH0gPSByZXF1aXJlKCcuL3JlY2FsY3VsYXRlQnVpbGRpbmdDb3N0Jyk7XHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50Jyk7XHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdMaXN0IH0gPSByZXF1aXJlKCcuL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IHBvcHVsYXRlU2tpbGxzVGFibGUgfSA9IHJlcXVpcmUoJy4vc2tpbGxzJyk7XHJcbmNvbnN0IHsgZ2V0QW5hbHl0aWNzLCBsb2dFdmVudCB9ID0gcmVxdWlyZSgnQGZpcmViYXNlL2FuYWx5dGljcycpO1xyXG5jb25zdCB7IGdlbmVyYXRlVW5pcXVlSUQgfSA9IHJlcXVpcmUoJy4vcGxheWVyVWlkJyk7XHJcbi8vIGltcG9ydCBqb2JDb3VudHM7XHJcbi8qIFNBVklORyAqL1xyXG4vLyB2YXIgc2F2ZSA9IHtcclxuLy8gICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4vLyAgICAgY3JhZnRlZFJlc291cmNlczogY3JhZnRlZFJlc291cmNlcyxcclxuLy8gICAgIHNraWxsczogc2tpbGxzLFxyXG4vLyAgICAgcGxheWVyVG9vbHM6IHBsYXllclRvb2xzXHJcbi8vIH1cclxuXHJcbmZ1bmN0aW9uIHNhdmVHYW1lKCkge1xyXG4gICAgbGV0IHNhdmUgPSB7XHJcbiAgICAgICAgc2tpbGxzOiB7fSwgLy8gVGhpcyB3aWxsIGhvbGQgdGhlIGV4cGVyaWVuY2UgYW5kIGxldmVsIGZvciBlYWNoIHNraWxsXHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlczoge30sIC8vIFRoaXMgd2lsbCBob2xkIHRoZSB2YWx1ZSBmb3IgZWFjaCBjcmFmdGVkIGl0ZW1cclxuICAgICAgICByZXNvdXJjZXM6IHt9LFxyXG4gICAgICAgIHRvb2xzOiBbXSxcclxuICAgICAgICBzdGFnZXM6IFtdLFxyXG4gICAgICAgIHVubG9ja3M6IHt9LFxyXG4gICAgICAgIGpvYnM6IHt9LFxyXG4gICAgICAgIGJ1aWxkaW5nczoge30sXHJcbiAgICAgICAgdGltZToge30sXHJcbiAgICAgICAgYWxsVmlzaWJsZUJ1dHRvbnM6IFtdLFxyXG4gICAgICAgIG1lc3NhZ2U6IFtdLFxyXG4gICAgICAgIGNvbm5lY3Rpb25zOiBuZXcgTWFwKCksXHJcbiAgICAgICAgcGVya3M6IFtdLFxyXG4gICAgICAgIGZhY3Rvcmllczoge30sXHJcbiAgICAgICAgcHJlc3RpZ2U6IHt9LFxyXG4gICAgICAgIG5ld0J1aWxkaW5nczoge31cclxuICAgIH07XHJcblxyXG4gICAgLy8gRXh0cmFjdCBleHAgYW5kIGxldmVsIGZyb20gc2tpbGxzIGFuZCBzYXZlIHRvIHNhdmUuc2tpbGxzXHJcbiAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICBzYXZlLnNraWxsc1tza2lsbF0gPSB7XHJcbiAgICAgICAgICAgIGV4cDogc2tpbGxzW3NraWxsXS5leHAsXHJcbiAgICAgICAgICAgIGxldmVsOiBza2lsbHNbc2tpbGxdLmxldmVsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHRyYWN0IHZhbHVlIGZyb20gY3JhZnRlZFJlc291cmNlcyBhbmQgc2F2ZSB0byBzYXZlLmNyYWZ0ZWRJdGVtc1xyXG4gICAgZm9yIChsZXQgaXRlbSBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKCFzYXZlLmNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICAgICAgc2F2ZS5jcmFmdGVkUmVzb3VyY2VzW2l0ZW1dID0geyB2YWx1ZTogMCwgY3JhZnRlZE9uY2U6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0udmFsdWUgPSBnZXRDcmFmdGVkUmVzb3VyY2UoaXRlbSk7XHJcbiAgICAgICAgc2F2ZS5jcmFmdGVkUmVzb3VyY2VzW2l0ZW1dLmNyYWZ0ZWRPbmNlID0gY3JhZnRlZFJlc291cmNlc1tpdGVtXS5jcmFmdGVkT25jZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaXRlbSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgaXRlbSBleGlzdHMgaW4gdGhlIHNhdmUucmVzb3VyY2VzIG9iamVjdC4gSWYgbm90LCBpbml0aWFsaXplIGl0LlxyXG4gICAgICAgIGlmICghc2F2ZS5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICAgICAgc2F2ZS5yZXNvdXJjZXNbaXRlbV0gPSB7IHZhbHVlOiAwLCBtYXg6IDAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNhdmUucmVzb3VyY2VzW2l0ZW1dLnZhbHVlID0gZ2V0TWF0ZXJpYWwoaXRlbSwgcmVzb3VyY2VzKTtcclxuICAgICAgICBzYXZlLnJlc291cmNlc1tpdGVtXS5tYXggPSBnZXRNYXgoaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZS50b29scyA9IGdldEFsbFRvb2xzKCk7XHJcbiAgICBzYXZlLnN0YWdlcyA9IGdldEFsbFN0YWdlcygpO1xyXG4gICAgc2F2ZS5qb2JzID0gam9iQ291bnRzO1xyXG4gICAgdHJ5IHsgc2F2ZS5wZXJrcyA9IFtuZXcgU2V0KGdldEFsbFBlcmtzKCkpXTsgfVxyXG4gICAgY2F0Y2ggKGUpIHsgc2F2ZS5wZXJrcyA9IFtdOyBjb25zb2xlLmVycm9yKCdzYXZpbmcgcGVya3MgZXJyb3InLCBlKTsgfVxyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHNhdmUuY29ubmVjdGlvbnMgPSBBcnJheS5mcm9tKGdldENvbm5lY3Rpb25zKCkuZW50cmllcygpKTtcclxuXHJcbiAgICBmb3IgKGxldCB1IGluIHBvbmRlcnMpIHtcclxuICAgICAgICBzYXZlLnVubG9ja3NbdV0gPSBpc1BvbmRlcmVkKHUpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBsYXN0TmV3QnVpbGRpbmcgPSBudWxsO1xyXG4gICAgZm9yIChsZXQgYiBpbiBidWlsZGluZ3MpIHtcclxuICAgICAgICBzYXZlLmJ1aWxkaW5nc1tiXSA9IGJ1aWxkaW5nc1tiXS5jb3VudDtcclxuICAgICAgICBpZiAoYnVpbGRpbmdzW2JdLmhhc093blByb3BlcnR5KCduYW1lJykpIHtcclxuICAgICAgICAgICAgLy8gc2F2ZSBuZXcgYnVpbGRpbmcgZGF0YSBcclxuICAgICAgICAgICAgc2F2ZS5uZXdCdWlsZGluZ3NbYl0gPSBidWlsZGluZ3NbYl07XHJcbiAgICAgICAgICAgIGxhc3ROZXdCdWlsZGluZyA9IGJ1aWxkaW5nc1tiXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coYWxsVmlzaWJsZUJ1dHRvbnMudmFsdWVzKCkpO1xyXG4gICAgZm9yIChsZXQgYSBpbiBhbGxWaXNpYmxlQnV0dG9ucykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgICAgIHNhdmUuYWxsVmlzaWJsZUJ1dHRvbnMucHVzaChhKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzYXZlLmFsbFZpc2libGVCdXR0b25zKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHRyYWN0VGV4dEZyb21IVE1MKGh0bWxTdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbFN0cmluZztcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBkaXYudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgY29uc3Qgc3BhblRleHQgPSBkaXYucXVlcnlTZWxlY3Rvcignc3BhbicpLnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICByZXR1cm4gW3RleHRDb250ZW50LCBzcGFuVGV4dF07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0TWVzc2FnZVRvb2x0aXAoKSB7XHJcbiAgICAgICAgLy8gR2V0IG1vc3QgcmVjZW50IGJ1aWxkaW5nXHJcbiAgICAgICAgLy8gcmV0dXJuIG1lc3NhZ2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWxvbmVcIikuZ2V0QXR0cmlidXRlKCd0b29sdGlwRGVzYycpO1xyXG4gICAgICAgIGNvbnN0IG5lZWRzID0gJ1lvdSBmZWVsIGEgc3RyYW5nZSwgY29uc3RydWN0aXZlIHVyZ2UgdG8gYWNxdWlyZSAnICsgT2JqZWN0LmtleXMobGFzdE5ld0J1aWxkaW5nLmNvc3QpLmpvaW4oJywgJyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2UgdG9vbHRpcDonLCBuZWVkcyk7XHJcbiAgICAgICAgcmV0dXJuIG5lZWRzO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmcpKSB7XHJcbiAgICAgICAgc2F2ZS5mYWN0b3JpZXNba2V5XSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBodG1sU3RyaW5nID0gcmVxdWlyZSgnLi9tYWluJykuZ2V0TWVzc2FnZSgpLmlubmVySFRNTDtcclxuICAgIGNvbnN0IG1lc3NhZ2VUb29sdGlwID0gZ2V0TWVzc2FnZVRvb2x0aXAoKTtcclxuICAgIGNvbnN0IG1lc3NhZ2VBcnJheSA9IGV4dHJhY3RUZXh0RnJvbUhUTUwoaHRtbFN0cmluZyk7IC8vIFttZXNzYWdlLCBzcGFuXVxyXG4gICAgbWVzc2FnZUFycmF5LnB1c2gobWVzc2FnZVRvb2x0aXApO1xyXG4gICAgc2F2ZS5tZXNzYWdlID0gbWVzc2FnZUFycmF5O1xyXG5cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhwcmVzdGlnZSkpIHtcclxuICAgICAgICBzYXZlLnByZXN0aWdlW2tleV0gPSB7IGNvc3Q6IHZhbC5jb3N0LCBsZXZlbDogdmFsLmxldmVsIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coY29tYmluZWRUZXh0KTsgLy8gXCJZb3UgZmluZCB5b3Vyc2VsZiBhbG9uZSBpbiBhIGZvcmVzdFwiXHJcbiAgICAvLyBjb25zb2xlLmxvZyhzcGFuVGV4dCk7IC8vIFwiYWxvbmVcIlxyXG5cclxuXHJcbiAgICBzYXZlLnRpbWVbJ3RvdGFsX3RpbWUnXSA9IHRvdGFsX3RpbWU7XHJcbiAgICBzYXZlLnRpbWVbJ3RpbWVfb2Zfc2F2ZSddID0gRGF0ZS5ub3coKTtcclxuICAgIC8vIFlvdSBjYW4gbm93IHVzZSB0aGUgc2F2ZSBvYmplY3QgdG8gc3RvcmUgdGhlIGRhdGEgc29tZXdoZXJlIG9yIGRpc3BsYXkgaXQgdG8gdGhlIHVzZXJcclxuXHJcbiAgICBjb25zb2xlLmxvZyhzYXZlKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHNhdmUpKTtcclxuXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNhdmVcIiwgSlNPTi5zdHJpbmdpZnkoc2F2ZSkpO1xyXG4gICAgbG9nRXZlbnQoZ2V0QW5hbHl0aWNzKCksICdzYXZlJywgc2F2ZSk7XHJcbiAgICByZXR1cm4gc2F2ZTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGxvYWRCdWlsZGluZ3Moc2F2ZWdhbWUpIHtcclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLm5ld0J1aWxkaW5ncyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCBiIGluIHNhdmVnYW1lLm5ld0J1aWxkaW5ncykge1xyXG4gICAgICAgICAgICBidWlsZGluZ3NbYl0gPSBzYXZlZ2FtZS5uZXdCdWlsZGluZ3NbYl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuYnVpbGRpbmdzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAobGV0IGIgaW4gc2F2ZWdhbWUuYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGIsIHNhdmVnYW1lLmJ1aWxkaW5nc1tiXSk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGluZ3NbYl0uY291bnQgPSBzYXZlZ2FtZS5idWlsZGluZ3NbYl07XHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgYnV0dG9uIHRleHRcclxuICAgICAgICAgICAgICAgIGlmIChidWlsZGluZ3NbYl0uY291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChiLCBidWlsZGluZ3NbYl0uY291bnQsIGJ1aWxkaW5nc1tiXS5lbW9qaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY29zdHMgb2YgYWxsIHRoZSBidWlsZGluZ3NcclxuICAgICAgICAgICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2Vycm9yIHdpdGggYnVpbGRpbmcnLCBiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkR2FtZSgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBHYW1lXCIpO1xyXG5cclxuICAgIC8vIEdldCBVc2VyIElEXHJcbiAgICBpZiAoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwbGF5ZXJfdWlkJykpIHtcclxuICAgICAgICBjb25zdCBuZXdVaWQgPSBnZW5lcmF0ZVVuaXF1ZUlEKCk7IC8vIFJlcGxhY2Ugd2l0aCB5b3VyIFVJRCBnZW5lcmF0aW9uIGxvZ2ljXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BsYXllcl91aWQnLCBuZXdVaWQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGxheWVyVWlkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BsYXllcl91aWQnKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICB2YXIgc2F2ZWdhbWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2F2ZVwiKSk7XHJcbiAgICBjb25zb2xlLmxvZyhzYXZlZ2FtZSk7XHJcblxyXG4gICAgbG9nRXZlbnQoZ2V0QW5hbHl0aWNzKCksICdsb2FkJywgeyBzYXZlZ2FtZTogc2F2ZWdhbWUsIHBsYXllclVpZDogcGxheWVyVWlkIH0pO1xyXG5cclxuICAgIGlmIChzYXZlZ2FtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIE5FVyBHQU1FXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5yZXNvdXJjZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBmb3IgKGxldCBpIGluIHNhdmVnYW1lLnJlc291cmNlcykge1xyXG4gICAgICAgICAgICBpZiAoaS52YWx1ZU9mKCkgPT09IFwidW5kZWZpbmVkXCIgfHwgaSA9PT0gbnVsbCB8fCByZXNvdXJjZXNbaV0gPT09IG51bGwpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbaV0udmFsdWUgPSBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0udmFsdWU7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1tpXS5tYXggPSBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0ubWF4O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVwZGF0aW5nIHJlc291cmNlcyBmb3IgXCIgKyBpICsgXCIgdG8gXCIgKyBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0udmFsdWUsIHNhdmVnYW1lLnJlc291cmNlc1tpXS5tYXgpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW2ldLnZhbHVlICE9IDApIHJlcXVpcmUoJy4vc2lkZWJhcicpLnVwZGF0ZURpc3BsYXlWYWx1ZShpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5za2lsbHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBzYXZlZ2FtZS5za2lsbHMpIHtcclxuICAgICAgICAgICAgc2tpbGxzW2ldLmV4cCA9IHNhdmVnYW1lLnNraWxsc1tpXS5leHA7XHJcbiAgICAgICAgICAgIHNraWxsc1tpXS5sZXZlbCA9IHNhdmVnYW1lLnNraWxsc1tpXS5sZXZlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IG9mIE9iamVjdC5rZXlzKHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIGNyYWZ0ZWQnLCBrZXksIHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXNba2V5XSwgY3JhZnRlZFJlc291cmNlc1trZXldKTtcclxuICAgICAgICAgICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzW2tleV0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWUgPSBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlKSkgY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlID0gMDtcclxuICAgICAgICAgICAgY3JhZnRlZFJlc291cmNlc1trZXldLmNyYWZ0ZWRPbmNlID0gc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlc1trZXldLmNyYWZ0ZWRPbmNlO1xyXG4gICAgICAgICAgICByZXF1aXJlKCcuL3NpZGViYXInKS51cGRhdGVEaXNwbGF5VmFsdWUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS50b29scyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBwbGF5ZXJUb29scyA9IHNhdmVnYW1lLnRvb2xzO1xyXG4gICAgICAgIC8vIFVuaW9uIHRoZSB0b29sIGxpc3RzIHRvZ2V0aGVyXHJcbiAgICAgICAgbGV0IHVuaW9uID0gWy4uLm5ldyBTZXQoWy4uLmdldEFsbFRvb2xzKCksIC4uLnNhdmVnYW1lLnRvb2xzXSldO1xyXG4gICAgICAgIC8vIHBsYXllclRvb2xzID0gdW5pb247XHJcbiAgICAgICAgZm9yIChsZXQgdG9vbCBpbiB1bmlvbikge1xyXG4gICAgICAgICAgICBhZGRUb29sKHRvb2wpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZm9yIChsZXQgdCBpbiBwbGF5ZXJUb29scykge1xyXG4gICAgICAgIC8vICAgICB1cGRhdGVUb29sVUkocGxheWVyVG9vbHNbdF0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnN0YWdlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCBzIGluIHNhdmVnYW1lLnN0YWdlcykge1xyXG4gICAgICAgICAgICBtYWtlVmlzaWJsZShzYXZlZ2FtZS5zdGFnZXNbc10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuam9icyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBqb2JDb3VudHMgPSBzYXZlZ2FtZS5qb2JzO1xyXG4gICAgICAgIGZvciAobGV0IGogaW4gc2F2ZWdhbWUuam9icykge1xyXG4gICAgICAgICAgICBqb2JDb3VudHNbal0gPSBzYXZlZ2FtZS5qb2JzW2pdO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhqKTtcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheShqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnVubG9ja3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgdSBpbiBzYXZlZ2FtZS51bmxvY2tzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBwb25kZXJzW3VdLmlzUG9uZGVyZWQgPSBzYXZlZ2FtZS51bmxvY2tzW3VdO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignT2xkIHNhdmUgZGF0YSBpbmNsdWRlcyBvYnNvbGV0ZSBwb25kZXInLCB1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNQb25kZXJlZCgnc2tpbGxzVGFibGUnKSkge1xyXG4gICAgICAgIHBvcHVsYXRlU2tpbGxzVGFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQZXJrcyBiZWZvcmUgYnVpbGRpbmdzIHRvIHVwZGF0ZSBjb3N0c1xyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5wZXJrcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBteVBlcmtzID0gc2F2ZWdhbWUucGVya3M7XHJcbiAgICAgICAgZm9yIChsZXQgW2ksIHBlcmtdIG9mIE9iamVjdC5lbnRyaWVzKHNhdmVnYW1lLnBlcmtzKSkge1xyXG4gICAgICAgICAgICBhZGRQZXJrKHBlcmspO1xyXG4gICAgICAgICAgICByZXF1aXJlKCcuL3NlbGVjdENvcnJlY3RQZXJrQnV0dG9uJykuc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24ocGVyayk7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KGkpID4gMTAwKSBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUucHJlc3RpZ2UgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHNhdmVnYW1lLnByZXN0aWdlKSkge1xyXG5cclxuICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5jb3N0ID0gdmFsWydjb3N0J107XHJcbiAgICAgICAgICAgIHByZXN0aWdlW2tleV0ubGV2ZWwgPSB2YWxbJ2xldmVsJ107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxvYWRCdWlsZGluZ3Moc2F2ZWdhbWUpO1xyXG5cclxuXHJcbiAgICAvLyBBZnRlciBwb25kZXJzIGFuZCBidWlsZGluZ3Mgd2UgY2FuIHJlY2FsY3VsYXRlIG1heCBjbG9uZXNcclxuICAgIHJlY2FsY01heENsb25lcygpO1xyXG4gICAgdXBkYXRlQnVpbGRpbmdMaXN0KCk7XHJcblxyXG5cclxuICAgIC8vIElmIHdlIGhhdmUgYSBjbG9uZSwgdGhlbiB3ZSBhdGUgZmlzaFxyXG4gICAgc2V0QXRlRmlzaChyZXNvdXJjZXMuY2xvbmVzLm1heCA+PSAxKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdhdGVmaXNoJywgYXRlRmlzaCk7XHJcbiAgICBpZiAoZ2V0QXRlRmlzaCgpKSB7XHJcbiAgICAgICAgY29uc3QgZmlzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWF0RmlzaFwiKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hhbmdlIHRoZSBtZXNzYWdlIHRvIHRoZSBsYXRlc3Qgb25lXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLm1lc3NhZ2UgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gW2Z1bGwgbWVzc2FnZSwgc3BhbiwgdG9vbHRpcF1cclxuICAgICAgICByZXF1aXJlKCcuL2NoYW5nZU1lc3NhZ2UnKS5jaGFuZ2VNZXNzYWdlKHNhdmVnYW1lLm1lc3NhZ2VbMF0sIHNhdmVnYW1lLm1lc3NhZ2VbMV0sIHNhdmVnYW1lLm1lc3NhZ2VbMl0gPyBzYXZlZ2FtZS5tZXNzYWdlWzJdIDogbnVsbCk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgcmVzb3VyY2VzIGVhcm5lZCB3aGlsZSBhd2F5XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnRpbWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9tYWluJykuc2V0VG90YWxUaW1lKHNhdmVnYW1lLnRpbWVbdG90YWxfdGltZV0pO1xyXG4gICAgICAgIGNvbnN0IHRpbWVfZGlmZmVyZW5jZSA9IERhdGUubm93KCkgLSBzYXZlZ2FtZS50aW1lWyd0aW1lX29mX3NhdmUnXTtcclxuICAgICAgICBmb3IgKGxldCByIGluIHJlc291cmNlcykge1xyXG4gICAgICAgICAgICBjb25zdCBpbmMgPSBjYWxjSW5jcmVhc2UociwgdGltZV9kaWZmZXJlbmNlKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW3JdLnZhbHVlICs9IGluYztcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cociwgdGltZV9kaWZmZXJlbmNlLCBpbmMpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW3JdLnZhbHVlID4gcmVzb3VyY2VzW3JdLm1heCkgcmVzb3VyY2VzW3JdLnZhbHVlID0gcmVzb3VyY2VzW3JdLm1heDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyk7XHJcbiAgICAgICAgZm9yIChsZXQgYSBpbiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucykge1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5jb25uZWN0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBzZXRDb25uZWN0aW9ucyhuZXcgTWFwKHNhdmVnYW1lLmNvbm5lY3Rpb25zKSk7XHJcblxyXG4gICAgICAgIGlmIChnZXRDb25uZWN0aW9ucygpLnNpemUgPT09IDApIHNldENvbm5lY3Rpb25zKG5ldyBNYXAoKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coZ2V0Q29ubmVjdGlvbnMoKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZvciAobGV0IGpvYiBpbiBqb2JDb3VudHMpIHtcclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2IsIGpvYkNvdW50c1tqb2JdKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVFbW9qaURpc3BsYXkoKTtcclxuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5mYWN0b3JpZXMgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhzYXZlZ2FtZS5mYWN0b3JpZXMpKVxyXG4gICAgICAgICAgICBpZiAodmFsID4gMClcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdmFsOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEZhY3Rvcnkoa2V5KTtcclxuXHJcblxyXG5cclxufVxyXG5cclxuXHJcbi8vIHNhdmUgdGhlIHRpbWUgd2hlbiB0aGUgcGxheWVyIGV4aXRzIHRoZSBicm93c2VyIHRhYlxyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiBzYXZlR2FtZSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzYXZlR2FtZSxcclxuICAgIGxvYWRHYW1lXHJcbn07XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5zYXZlR2FtZSA9IHNhdmVHYW1lOyIsIi8qKlxyXG4gKiBTZWxlY3QgdGhlIHBlcmsgYnV0dG9uIHRoYXQgd2UndmUgY2hvc2VuIGFuZCBkaXNhYmxlIHRoZSBvdGhlcnNcclxuICogQHBhcmFtIHtzdHJpbmd9IGFiaWxpdHlOYW1lIE5hbWUgb2YgdGhlIGNob3NlbiBwZXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBzZWxlY3RDb3JyZWN0UGVya0J1dHRvbihhYmlsaXR5TmFtZSkge1xyXG4gICAgLy8gRGlzYWJsZSBhbGwgYnV0dG9uc1xyXG4gICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGllck9uZUJ1dHRvbicpO1xyXG4gICAgbGV0IHNlbGVjdGVkQnV0dG9uO1xyXG4gICAgdHJ5IHsgc2VsZWN0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHthYmlsaXR5TmFtZX1QZXJrYCk7IH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICBpZiAoc2VsZWN0ZWRCdXR0b24pIHtcclxuICAgICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBFbmFibGUgYW5kIGhpZ2hsaWdodCB0aGUgc2VsZWN0ZWQgYnV0dG9uXHJcbiAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWRCdXR0b24sIGFiaWxpdHlOYW1lKTtcclxuICAgICAgICBzZWxlY3RlZEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgc2VsZWN0ZWRCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBidXR0b24gZm91bmQgd2l0aCBhYmlsaXR5IG5hbWU6ICcgKyBhYmlsaXR5TmFtZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zZWxlY3RDb3JyZWN0UGVya0J1dHRvbiA9IHNlbGVjdENvcnJlY3RQZXJrQnV0dG9uOyIsImNvbnN0IHsgZHJhd0FsbENvbm5lY3Rpb25zIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyB1cGRhdGVTaWRlYmFyIH0gPSByZXF1aXJlKCcuL3NpZGViYXInKTtcclxuY29uc3QgeyByZWZyZXNoVmFsdWVzLCBjb21iYXQsIHBhdXNlQW5pbWF0aW9uLCBiYXR0bGVSZXN1bHQsIHNpbXVsYXRlQmF0dGxlIH0gPSByZXF1aXJlKCcuL2NvbWJhdCcpO1xyXG5jb25zdCB7IGdldFNmeFZvbHVtZSwgcGxheVNvdW5kIH0gPSByZXF1aXJlKCcuL2F1ZGlvJyk7XHJcblxyXG5mdW5jdGlvbiBnZXRDdXJyZW50VGFiKCkge1xyXG4gICAgbGV0IHRhYiA9ICcnO1xyXG4gICAgZm9yIChsZXQgY29udGVudCBvZiB0YWJDb250YWluZXJzKSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICB0YWIgPSBjb250ZW50LmlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0YWI7XHJcbn1cclxuZXhwb3J0cy5nZXRDdXJyZW50VGFiID0gZ2V0Q3VycmVudFRhYjtcclxuLy8gU3dpdGNoIHRhYnNcclxubGV0IHRhYkNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi1jb250ZW50ID4gLmNvbnRlbnRcIik7IC8vIERpcmVjdCBjaGlsZHJlbiBvbmx5XHJcblxyXG5mdW5jdGlvbiBzaG93VGFiKHRhYk5hbWUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwic2hvdyB0YWI6IFwiICsgdGFiTmFtZSk7XHJcbiAgICAvLyBHZXQgYWxsIG1haW4gY29udGFpbmVyIGRpdnMgYW5kIGhpZGUgdGhlbVxyXG4gICAgbGV0IHByZXZUYWIgPSBnZXRDdXJyZW50VGFiKCk7XHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09IHByZXZUYWIpIHJldHVybjtcclxuXHJcbiAgICBwbGF5U291bmQoJy4vYXVkaW8vdGFiLndhdicpO1xyXG5cclxuXHJcbiAgICBsZXQgcHJldlRhYkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmV2VGFiKTtcclxuICAgIGlmIChwcmV2VGFiRWxlbWVudCkge1xyXG4gICAgICAgIHByZXZUYWJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHByZXZUYWJFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICB9XHJcbiAgICAvLyBHZXQgYWxsIHRhYiBidXR0b25zIGFuZCByZW1vdmUgdGhlIGFjdGl2ZSBjbGFzc1xyXG4gICAgbGV0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi1idXR0b25cIik7XHJcbiAgICBmb3IgKGxldCB0YWIgb2YgdGFicykge1xyXG4gICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNob3cgdGhlIGNsaWNrZWQgdGFiJ3MgbWFpbiBjb250YWluZXIgZGl2IGFuZCBtYWtlIHRoZSB0YWIgYnV0dG9uIGFjdGl2ZVxyXG4gICAgbGV0IGFjdGl2ZUNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJOYW1lKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHNldFRpbWVvdXQoKCkgPT4geyBhY3RpdmVDb250ZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7IH0sIDEwMCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBhY3RpdmVDb250ZW50LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICB9LCAyMDApO1xyXG5cclxuXHJcbiAgICAvLyBHZXQgdGhlIGNsaWNrZWQgdGFiIGJ1dHRvbiBhbmQgbWFrZSBpdCBhY3RpdmVcclxuICAgIGNvbnN0IHRhYlN0cmluZyA9IGAjJHt0YWJOYW1lfUJ1dHRvbmA7XHJcbiAgICBsZXQgYWN0aXZlVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YWJTdHJpbmcpO1xyXG5cclxuICAgIGlmIChhY3RpdmVUYWJCdXR0b24pIGFjdGl2ZVRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgIGlmICh0YWJOYW1lID09PSAnam9ic1RhYicpXHJcbiAgICAgICAgZHJhd0FsbENvbm5lY3Rpb25zKCk7XHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09ICdjb21iYXRUYWInKSB7XHJcbiAgICAgICAgcmVmcmVzaFZhbHVlcygpO1xyXG4gICAgICAgIC8vIGlmIChnZXRJbkNvbWJhdCgpKSB7XHJcbiAgICAgICAgLy8gICAgIC8vIElmIHJldHVybmluZyB0byB0aGUgY29tYmF0VGFiIGFuZCBjb21iYXQgd2FzIGluIHByb2dyZXNzLCByZXN1bWUgY29tYmF0XHJcbiAgICAgICAgLy8gICAgIGNvbWJhdCgpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBXaGVuIHJldHVybmluZyB0byB0aGUgY29tYmF0VGFiLCByZXNvbHZlIHRoZSBiYXR0bGUgaWYgaXQgaGFzbid0IGJlZW4gcmVzb2x2ZWQgeWV0XHJcbiAgICAgICAgaWYgKGJhdHRsZVJlc3VsdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzaW11bGF0ZUJhdHRsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgY29uc29sZS5sb2cocHJldlRhYiwgJz4nLCB0YWJOYW1lKTtcclxuXHJcbiAgICAvLyB1cGRhdGVTaWRlYmFyKCk7XHJcbn1cclxuZXhwb3J0cy5zaG93VGFiID0gc2hvd1RhYjtcclxuIiwiY29uc3QgeyBjYWxjSW5jcmVhc2UgfSA9IHJlcXVpcmUoXCIuL2NhbGNJbmNyZWFzZVwiKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9yZXNvdXJjZXNcIik7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUdyb3VwVmlzaWJpbGl0eShncm91cE5hbWUpIHtcclxuICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRvZ2dsZS0ke2dyb3VwTmFtZX1gKTsgLy8gRW5zdXJlIHlvdSBoYXZlIHRoaXMgYnV0dG9uIHdpdGggdGhlIGlkICd0b2dnbGUtZ3JvdXBOYW1lJ1xyXG5cclxuICAgIEFycmF5LmZyb20oZ3JvdXAuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1AnKSBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGdyb3VwIGlzIGN1cnJlbnRseSBoaWRkZW5cclxuICAgIGlmICh0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdhcnJvdy1kb3duJykpIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctZG93bicpO1xyXG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhcnJvdy1yaWdodCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctcmlnaHQnKTtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYXJyb3ctZG93bicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIGEgZ3JvdXAgY29udGFpbmVyXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlR3JvdXBDb250YWluZXIoZ3JvdXBOYW1lKSB7XHJcbiAgICBjb25zdCBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZ3JvdXBDb250YWluZXIuY2xhc3NOYW1lID0gJ3Jlc291cmNlR3JvdXAnO1xyXG4gICAgZ3JvdXBDb250YWluZXIuaWQgPSBgZ3JvdXAtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi50ZXh0Q29udGVudCA9IGdyb3VwTmFtZS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgdG9nZ2xlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0b2dnbGVHcm91cFZpc2liaWxpdHkoZ3JvdXBOYW1lKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc05hbWUgPSAndG9nZ2xlLWJ1dHRvbiBhcnJvdy1kb3duJztcclxuICAgIHRvZ2dsZUJ1dHRvbi5pZCA9IGB0b2dnbGUtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2dnbGVCdXR0b24pO1xyXG4gICAgcmV0dXJuIGdyb3VwQ29udGFpbmVyO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIEl0ZXJhdGVzIG92ZXIgZWFjaCBncm91cCBhbmQgcmVzb3VyY2UgdG8gY3JlYXRlIHRhZ3NcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJlc291cmNlVGFncyh3aXRoR3JvdXBzKSB7XHJcbiAgICAvLyBpZiAoaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJykpIHdpdGhHcm91cHMgPSB0cnVlO1xyXG4gICAgY29uc29sZS5sb2coXCJpbml0aWFsemluZyByZXNvdXJjZSB0YWdzXCIpO1xyXG4gICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgLy8gRGVmaW5lIGdyb3VwcyBmb3IgeW91ciByZXNvdXJjZXNcclxuICAgIGNvbnN0IHJlc291cmNlR3JvdXBzID0ge1xyXG4gICAgICAgIHNwZWNpYWw6IFsnY2xvbmVzJywgJ2h1c2tzJywgJ3BvbmRlcicsICd2aW9sZW5jZSddLFxyXG4gICAgICAgIGZvb2Q6IFsnYmVycmllcycsICdmaXNoJywgJ2dhbWUnLCAnd2hlYXQnLCAnYnJlYWQnLCAnZnJlc2h3YXRlciddLFxyXG4gICAgICAgIG1hdGVyaWFsczogWydzdGlja3MnLCAndmluZXMnLCAncm9ja3MnLCAnd29vZCcsICdzYW5kJywgJ2NsYXknLCAnaGlkZXMnLCAnaGVyYnMnXSxcclxuICAgICAgICB0b29sczogWydzaGFycHJvY2tzJywgJ3JvcGUnLCAnaGFuZGxlJywgJ2Zpc2hpbmdyb2QnLCAncGlja2F4ZScsICdheGUnLCAnc3BlYXInLCAnc3RhZmYnXSxcclxuICAgICAgICBhZHZhbmNlZDogWydnbGFzcycsICdwYXBlcicsICdjcmF0ZXMnLCAnbWVkaWNpbmUnLCAnbGVhdGhlciddLFxyXG4gICAgICAgIG1ldGFsOiBbJ29yZScsICdnb2xkJywgJ2lyb24nLCAnc2lsdmVyJywgJ3N0ZWVsJ10sXHJcbiAgICAgICAgY29uc3RydWN0aW9uOiBbJ2JyaWNrcycsICdiZWFtcycsICduYWlscycsICdzbGFicycsICdjb25jcmV0ZSddLFxyXG4gICAgICAgIC8vIC4uLiBBZGQgb3RoZXIgZ3JvdXBzIGFzIG5lY2Vzc2FyeVxyXG4gICAgfTtcclxuICAgIGZvciAobGV0IFtncm91cE5hbWUsIGdyb3VwT2ZSZXNvdXJjZXNdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlR3JvdXBzKSkge1xyXG5cclxuICAgICAgICBncm91cE9mUmVzb3VyY2VzLmZvckVhY2gocmVzb3VyY2VOYW1lID0+IHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZS0nICsgcmVzb3VyY2VOYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghd2l0aEdyb3VwcykgZ3JvdXBOYW1lID0gbnVsbDsgLy8gU2V0IGdyb3VwIHRvIHJlc291cmNlc1xyXG5cclxuICAgICAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSBwYXJlbnRFbGVtZW50ID0gY3JlYXRlUmVzb3VyY2VUYWcocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwYXJlbnRFbGVtZW50KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBlbGVtZW50IGlmIHdlIHNob3VsZCwgb3RoZXJ3aXNlIGNyZWF0ZSBhIHJlc291cmNlIHRhZ1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZU5hbWUsIHNob3VsZEhpZGUocmVzb3VyY2VOYW1lKSwgZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKSk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRIaWRlKHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNob3VsZEhpZGUpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2hvdWxkSGlkZShyZXNvdXJjZU5hbWUpIHtcclxuXHJcbiAgICB2YXIgc2hvdWxkSGlkZSA9IHRydWU7XHJcbiAgICAvLyBmb3IgKGxldCBjIGluIHBhcmVudEVsZW1lbnQuY2xhc3NMaXN0KSB7XHJcbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coJ2hhcyBwYXNzZWQnLCByZXNvdXJjZU5hbWUsIHBhc3NlZFN0YWdlKGMpKTtcclxuICAgIC8vICAgICBpZiAocmVxdWlyZSgnLi9zdGFnZXMnKS5wYXNzZWRTdGFnZShjKSkgeyBzaG91bGRIaWRlID0gZmFsc2U7IGNvbnNvbGUubG9nKCdkb250IGhpZGUnLCByZXNvdXJjZU5hbWUsIGMpOyB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgaWYgKGdldE1hdGVyaWFsKHJlc291cmNlTmFtZSkgPiAwKSB7XHJcbiAgICAgICAgc2hvdWxkSGlkZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSAmJiByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS5pc1Zpc2libGUpIHsgc2hvdWxkSGlkZSA9IGZhbHNlOyB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ3Nob3VsZCBoaWRlPycsIHJlc291cmNlTmFtZSwgc2hvdWxkSGlkZSk7XHJcbiAgICByZXR1cm4gc2hvdWxkSGlkZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFiYnJldmlhdGVOdW1iZXIobnVtKSB7XHJcbiAgICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicpIHJldHVybiBudW07XHJcbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIHVuaXQpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAxMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMikgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMSkgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMDApIHJldHVybiByb3VuZFRvRGVjaW1hbHModmFsdWUsIDApICsgdW5pdDtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSkgKyB1bml0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJvdW5kVG9EZWNpbWFscyhudW1iZXIsIGRlY2ltYWxzKSB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcclxuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQobnVtYmVyICogZmFjdG9yKSAvIGZhY3RvcikudG9GaXhlZChkZWNpbWFscyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG51bSA8IDFlMykgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyhudW0sIDEpOyAvLyBJZiBsZXNzIHRoYW4gMSwwMDBcclxuICAgIGlmIChudW0gPCAxZTYpIHJldHVybiBmb3JtYXQobnVtIC8gMWUzLCAnSycpOyAvLyBUaG91c2FuZHNcclxuICAgIGlmIChudW0gPCAxZTkpIHJldHVybiBmb3JtYXQobnVtIC8gMWU2LCAnTScpOyAvLyBNaWxsaW9uc1xyXG4gICAgaWYgKG51bSA8IDFlMTIpIHJldHVybiBmb3JtYXQobnVtIC8gMWU5LCAnQicpOyAvLyBCaWxsaW9uc1xyXG4gICAgLy8gQWRkIG1vcmUgY2FzZXMgZm9yIGxhcmdlciBudW1iZXJzIGlmIG5lZWRlZFxyXG5cclxuICAgIGlmIChudW0gPT09IEluZmluaXR5KSBudW0gPSAn4oieJztcclxuICAgIHJldHVybiBudW0udG9TdHJpbmcoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIHJlc291cmNlIGNvdW50IGFuZCBtYXhlcyBvZiBhbGwgcmVzb3VyY2VzXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlU2lkZWJhcigpIHtcclxuICAgIGNvbnN0IGFsbE1hdGVyaWFscyA9IHJlcXVpcmUoJy4vZmFjdG9yeScpLmFsbE1hdGVyaWFscztcclxuICAgIEFycmF5LmZyb20oYWxsTWF0ZXJpYWxzKS5mb3JFYWNoKHIgPT4geyB1cGRhdGVEaXNwbGF5VmFsdWUocik7IH0pO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIGZvciAoY29uc3QgW2luZGV4LCByZXNvdXJjZU5hbWVdIG9mIE9iamVjdC5lbnRyaWVzKGFsbE1hdGVyaWFscykpIHtcclxuICAgIC8vICAgICBpZiAocmVzb3VyY2VzW3Jlc291cmNlTmFtZV0pIGNvbnRpbnVlO1xyXG4gICAgLy8gICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2UtJyArIHJlc291cmNlTmFtZSk7XHJcbiAgICAvLyAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7IGNvbnNvbGUud2Fybignbm8gcGFyZW50IGVsZW1lbnQgZm91bmQgZm9yJywgcmVzb3VyY2VOYW1lKTsgcmV0dXJuOyB9XHJcblxyXG4gICAgLy8gICAgIGlmIChzaG91bGRIaWRlKHJlc291cmNlTmFtZSkpIHtcclxuICAgIC8vICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBjb25zdCBkaXNwbGF5RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHJlc291cmNlTmFtZSArICdWYWx1ZScpO1xyXG4gICAgLy8gICAgIGlmIChkaXNwbGF5RWxlbSkge1xyXG4gICAgLy8gICAgICAgICAvLyBjb25zb2xlLmxvZyhhYmJyZXZpYXRlTnVtYmVyKHJlc291cmNlRGF0YSkpO1xyXG4gICAgLy8gICAgICAgICB2YXIgY29sb3IgPSAnI2ZmZic7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IGFtb3VudCA9IGdldE1hdGVyaWFsKHJlc291cmNlTmFtZSk7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IG1heCA9IGdldE1heChyZXNvdXJjZU5hbWUpO1xyXG4gICAgLy8gICAgICAgICAvLyBcclxuICAgIC8vICAgICAgICAgaWYgKGFtb3VudCA9PT0gbWF4KSBjb2xvciA9ICcjZmNjJztcclxuICAgIC8vICAgICAgICAgLy8gXHJcbiAgICAvLyAgICAgICAgIGVsc2UgaWYgKGFtb3VudCAvIG1heCA+IC42KSBjb2xvciA9ICcjZWViJztcclxuXHJcbiAgICAvLyAgICAgICAgIGRpc3BsYXlFbGVtLmlubmVySFRNTCA9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiR7Y29sb3J9XCI+JHthYmJyZXZpYXRlTnVtYmVyKGFtb3VudCl9IC8gJHthYmJyZXZpYXRlTnVtYmVyKG1heCl9IDwvc3Bhbj5gO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbn1cclxuXHJcblxyXG4vLyBDcmVhdGUgYWxsIG91ciByZXNvdXJjZSB0YWdzIGluIHRoZSBzaWRlYmFyXHJcbmNvbnN0IHJlc291cmNlc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZXMnKTtcclxuZnVuY3Rpb24gY3JlYXRlUmVzb3VyY2VUYWcocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpIHtcclxuICAgIC8vIGlmICghcmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHRocm93IFwiSW52YWxpZCByZXNvdXJjZTogXCIgKyByZXNvdXJjZU5hbWU7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHJlc291cmNlIHRhZyBmb3IgXCIsIHJlc291cmNlTmFtZSwgZ3JvdXBOYW1lKTtcclxuICAgIGxldCBncm91cENvbnRhaW5lcjtcclxuICAgIGlmIChncm91cE5hbWUpIHtcclxuICAgICAgICBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBncm91cC0ke2dyb3VwTmFtZX1gKTtcclxuICAgICAgICBpZiAoIWdyb3VwQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGdyb3VwQ29udGFpbmVyID0gY3JlYXRlUmVzb3VyY2VHcm91cENvbnRhaW5lcihncm91cE5hbWUpO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXBDb250YWluZXIpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYXBwZW5kaW5nJywgZ3JvdXBDb250YWluZXIsIHJlc291cmNlc0NvbnRhaW5lciwgcmVzb3VyY2VzQ29udGFpbmVyLmNoaWxkRWxlbWVudENvdW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZXMnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhncm91cENvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXNwbGF5TmFtZSA9IGNhcGl0YWxpemVGaXJzdChyZXNvdXJjZU5hbWUpLnNwbGl0KCdfJykuam9pbignICcpO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5jbGFzc05hbWUgPSBgcmVzb3VyY2VgO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmlkID0gYHJlc291cmNlLSR7cmVzb3VyY2VOYW1lfWA7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlTmFtZVNwYW4uY2xhc3NOYW1lID0gJ3Jlc291cmNlTmFtZSc7XHJcbiAgICByZXNvdXJjZU5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7cmVzb3VyY2VEaXNwbGF5TmFtZX06YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVZhbHVlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmNsYXNzTmFtZSA9ICdyZXNvdXJjZVZhbHVlJztcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmlkID0gYCR7cmVzb3VyY2VOYW1lfVZhbHVlYDtcclxuICAgIGxldCBtYXggPSAoZ2V0TWF4KHJlc291cmNlTmFtZSkgJiYgZ2V0TWF4KHJlc291cmNlTmFtZSkgPCBJbmZpbml0eSkgPyBnZXRNYXgocmVzb3VyY2VOYW1lKS50b0ZpeGVkKDIpIDogJ+KInic7XHJcblxyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4udGV4dENvbnRlbnQgPSBgJHtnZXRNYXRlcmlhbChyZXNvdXJjZU5hbWUpLnRvRml4ZWQoMil9IC8gJHttYXh9YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVJhdGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VSYXRlU3Bhbi5jbGFzc05hbWUgPSAncmVzb3VyY2VSYXRlJztcclxuICAgIHJlc291cmNlUmF0ZVNwYW4uaW5uZXJIVE1MID0gYCgrXHJcbiAgICAgICAgICAgIDxzcGFuIGlkPVwiJHtyZXNvdXJjZU5hbWV9SW5jcmVhc2VSYXRlXCI+MDwvc3Bhbj4vcylgO1xyXG5cclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZU5hbWVTcGFuKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZVZhbHVlU3Bhbik7XHJcbiAgICByZXNvdXJjZUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzb3VyY2VSYXRlU3Bhbik7XHJcblxyXG4gICAgZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQocmVzb3VyY2VFbGVtZW50KTtcclxuXHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBvcmRlcmluZ1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgb3JkZXIgb2YgYSByZXNvdXJjZVxyXG4gICAgZnVuY3Rpb24gY2hhbmdlUmVzb3VyY2VPcmRlcihyZXNvdXJjZUlkLCBuZXdPcmRlcikge1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVzb3VyY2VJZCk7XHJcbiAgICAgICAgaWYgKHJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlLnN0eWxlLm9yZGVyID0gbmV3T3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtY2xvbmVzXCIsIDEpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXN0aWNrc1wiLCAyKTsgLy8gTW92ZSBcIlN0aWNrc1wiIHRvIG9yZGVyIDJcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS12aW5lc1wiLCAzKTsgLy8gTW92ZSBcIlZpbmVzXCIgdG8gb3JkZXIgM1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXJvY2tzXCIsIDQpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWZpc2hcIiwgNSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZnJlc2h3YXRlclwiLCA2KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS13b29kXCIsIDcpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLW9yZVwiLCA4KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1zYW5kXCIsIDkpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWNsYXlcIiwgMTApO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXdoZWF0XCIsIDExKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1oaWRlc1wiLCAxMik7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZ2FtZVwiLCAxMyk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtaGVyYnNcIiwgMTQpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWJlcnJpZXNcIiwgMTUpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXBvbmRlclwiLCA1MCk7XHJcblxyXG4gICAgcmV0dXJuIHJlc291cmNlRWxlbWVudDtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgdXBkYXRlU2lkZWJhcixcclxuICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MsXHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUsXHJcbiAgICBhYmJyZXZpYXRlTnVtYmVyXHJcbn07XHJcbi8qKlxyXG4gKiBVcGRhdGVzIHRoZSBkaXNwbGF5IHZhbHVlIG9mIG9uZSByZXNvdXJjZSwgYSBzcGVjaWZpYyB1cGRhdGVTaWRlYmFyKClcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSByZXNvdXJjZXNDb250YWluZXIucXVlcnlTZWxlY3RvcihgIyR7bWF0ZXJpYWx9VmFsdWVgKTtcclxuICAgIGNvbnN0IGVsZW1lbnRJbmNyZWFzZSA9IHJlc291cmNlc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGAjJHttYXRlcmlhbH1JbmNyZWFzZVJhdGVgKTtcclxuICAgIC8vIGNvbnN0IGNyYWZ0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBidXR0b24jY3JhZnQke2NhcGl0YWxpemVGaXJzdChtYXRlcmlhbCl9YCk7XHJcbiAgICAvLyB0cnkgeyBpZiAoIWVsZW1lbnQpIGNyZWF0ZVJlc291cmNlVGFnKG1hdGVyaWFsKTsgfVxyXG4gICAgLy8gY2F0Y2ggKGVycm9yKSB7IH1cclxuICAgIC8vIGNvbnNvbGUubG9nKG1hdGVyaWFsLCBlbGVtZW50LCBjcmFmdGVkQnV0dG9uKTtcclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gbGV0IG1heCA9IChnZXRNYXgobWF0ZXJpYWwpICYmIGdldE1heChtYXRlcmlhbCkgPCBJbmZpbml0eSkgPyBnZXRNYXgobWF0ZXJpYWwpLnRvRml4ZWQoMSkgOiAn4oieJztcclxuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGAke2FiYnJldmlhdGVOdW1iZXIoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwpKX0gLyAke2FiYnJldmlhdGVOdW1iZXIoZ2V0TWF4KG1hdGVyaWFsKSl9YDtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50SW5jcmVhc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluYyA9IGNhbGNJbmNyZWFzZShtYXRlcmlhbCwgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmMsIGVsZW1lbnRJbmNyZWFzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5jID09PSAwIHx8IE51bWJlci5pc05hTihpbmMpKSBlbGVtZW50SW5jcmVhc2UucGFyZW50RWxlbWVudC5pbm5lckhUTUwgPSBgPHNwYW4gaWQ9XCIke21hdGVyaWFsfUluY3JlYXNlUmF0ZVwiPjwvc3Bhbj5gO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBlbGVtZW50SW5jcmVhc2UucGFyZW50RWxlbWVudC5pbm5lckhUTUwgPSBgKDxzcGFuIGlkPVwiJHttYXRlcmlhbH1JbmNyZWFzZVJhdGVcIj4ke2NhbGNJbmNyZWFzZShtYXRlcmlhbCwgMTAwMCkudG9GaXhlZCgxKX08L3NwYW4+L3MpYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRlcmlhbCwgc2hvdWxkSGlkZShtYXRlcmlhbCksIGdldE1hdGVyaWFsKG1hdGVyaWFsKSk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRIaWRlKG1hdGVyaWFsKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlbGVtZW50LCBtYXRlcmlhbCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0pIHtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0uaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRlYmFyVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpLnF1ZXJ5U2VsZWN0b3IoJyNyZXNvdXJjZS0nICsgbWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBpZiAoY3JhZnRlZEJ1dHRvbikge1xyXG4gICAgLy8gICAgIGNvbnN0IGNvdW50U3BhbiA9IGNyYWZ0ZWRCdXR0b24ucXVlcnlTZWxlY3RvcihgIyR7bWF0ZXJpYWx9VmFsdWVgKTtcclxuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZygnY3JhZnRlZCBidXR0b24gd2FzIGZvdW5kJywgY291bnRTcGFuLCBtYXRlcmlhbCwgZ2V0Q3JhZnRlZFJlc291cmNlKG1hdGVyaWFsKSk7XHJcbiAgICAvLyAgICAgaWYgKGNvdW50U3BhbikgY291bnRTcGFuLnRleHRDb250ZW50ID0gZ2V0Q3JhZnRlZFJlc291cmNlKG1hdGVyaWFsKS50b0ZpeGVkKDApO1xyXG4gICAgLy8gICAgIGVsc2UgY29uc29sZS53YXJuKGBSZXNvdXJjZSBidXR0b24gZm91bmQgYnV0IG5vIGNvdW50IHNwYW4gZm9yOiAke21hdGVyaWFsfWApO1xyXG4gICAgLy8gfVxyXG59XHJcbiIsImNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcbmNvbnN0IHsgdHJpZ2dlckZsb2F0VXBUZXh0IH0gPSByZXF1aXJlKCcuL3RyaWdnZXJGbG9hdFVwVGV4dCcpO1xyXG5cclxuZnVuY3Rpb24gaW52ZXJ0U2tpbGxzVG9SZXNvdXJjZXMoc2tpbGxzKSB7XHJcbiAgICBsZXQgcmVzb3VyY2VUb1NraWxsTWFwID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBbc2tpbGwsIGRhdGFdIG9mIE9iamVjdC5lbnRyaWVzKHNraWxscykpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHJlc291cmNlIG9mIGRhdGEuYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgaWYgKCFyZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzb3VyY2VUb1NraWxsTWFwW3Jlc291cmNlXS5wdXNoKHNraWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc291cmNlVG9Ta2lsbE1hcDtcclxufVxyXG5jb25zdCByZXNvdXJjZVRvU2tpbGxNYXAgPSBpbnZlcnRTa2lsbHNUb1Jlc291cmNlcyhza2lsbHMpO1xyXG5jb25zb2xlLmxvZyhyZXNvdXJjZVRvU2tpbGxNYXApO1xyXG4vKipcclxuICogVXBkYXRlIHRoZSByZWxldmFudCBza2lsbCBvZiBhIHJlc291cmNlIGluY3JlYXNlZCBieSBudW1cclxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlIFdoaWNoIHJlc291cmNlIHdhcyB1cGRhdGVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gSG93IG11Y2ggdGhlIHJlc291cmNlIGluY3JlYXNlZFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlU2tpbGxzKHJlc291cmNlLCBudW0pIHtcclxuICAgIG51bSA9IE1hdGguYWJzKG51bSk7XHJcbiAgICBpZiAocmVxdWlyZSgnLi9wb25kZXInKS5pc1BvbmRlcmVkKCdmYXN0ZXJTa2lsbHMnKSkgbnVtICo9IDEuMDU7XHJcblxyXG4gICAgaWYgKCFyZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdKSByZXR1cm47XHJcbiAgICBjb25zdCBza2lsbCA9IHJlc291cmNlVG9Ta2lsbE1hcFtyZXNvdXJjZV1bMF0udG9TdHJpbmcoKTtcclxuICAgIC8vIG1heCBsZXZlbCAxMDBcclxuICAgIGlmIChza2lsbHNbc2tpbGxdLmxldmVsID49IDEwMCkge1xyXG4gICAgICAgIHNraWxsc1tza2lsbF0ubGV2ZWwgPSAxMDA7XHJcbiAgICAgICAgc2tpbGxzW3NraWxsXS5leHAgPSAwO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIFxyXG4gICAgc2tpbGxzW3NraWxsXS5leHAgKz0gbnVtIC8gTWF0aC5wb3coMS40LCBza2lsbHNbc2tpbGxdLmxldmVsKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgc2tpbGw6XCIgKyBza2lsbCArIFwiIHRvIFwiICsgc2tpbGxzW3NraWxsXS5leHApXHJcbiAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPj0gMTAwKSB7XHJcblxyXG4gICAgICAgIHNraWxsc1tza2lsbF0ubGV2ZWwgKz0gMTtcclxuICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCA9IDA7XHJcblxyXG4gICAgICAgIC8vIExldmVsdXAgcG9wdXBcclxuICAgICAgICBsZXQgbGV2ZWx1cCA9IGBMZXZlbCB1cCEgJHtza2lsbH0g4oaSICR7c2tpbGxzW3NraWxsXS5sZXZlbH1gO1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJlc3RpZ2UnKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQocmVjdC54LCByZWN0LnksIGxldmVsdXAsICcjRjREMDNGJyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgc2tpbGxzIHRhYmxlIHZpc3VhbGl6YXRpb25cclxuICAgIGlmIChyZXF1aXJlKCcuL3N0YWdlcycpLnBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpKSB7XHJcbiAgICAgICAgcG9wdWxhdGVTa2lsbHNUYWJsZSgpO1xyXG4gICAgfVxyXG59XHJcbmxldCBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gZmFsc2U7XHJcbi8qKlxyXG4gKiBEcmF3IHRoZSBza2lsbHMgdGFibGUgYW5kIGluaXRpYWxpemUgaWYgbmVlZGVkXHJcbiAqL1xyXG5mdW5jdGlvbiBwb3B1bGF0ZVNraWxsc1RhYmxlKCkge1xyXG4gICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tpbGxzVGFibGUnKTtcclxuXHJcbiAgICAvLyBJZiB0aGUgdGFibGUgaXMgZW1wdHksIGNyZWF0ZSB0aGUgcm93cyBhbmQgcHJvZ3Jlc3MgYmFyc1xyXG4gICAgaWYgKCFoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIHRhYmxlIGZvciB0aGUgZmlyc3QgdGltZVwiKTtcclxuICAgICAgICBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAvLyBcclxuICAgICAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICAgICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgICAgICAgICAgdHIuaWQgPSAndHItJyArIHNraWxsO1xyXG4gICAgICAgICAgICBsZXQgdGRQcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgIHRkUHJvZ3Jlc3Muc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncHJvZ3Jlc3NCYXInKTtcclxuICAgICAgICAgICAgLy8gaWYgKGlzRGFyaykge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMyMjhCMjInO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyM1MEM4NzgnO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLmhlaWdodCA9ICcyMHB4JztcclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdkYXRhLXNraWxsJywgc2tpbGwpOyAvLyBBc3NpZ24gYSBkYXRhIGF0dHJpYnV0ZSBmb3IgaWRlbnRpZmljYXRpb25cclxuXHJcbiAgICAgICAgICAgIGxldCBza2lsbFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnRleHRDb250ZW50ID0gJ1tsZXZlbCAnICsgc2tpbGxzW3NraWxsXS5sZXZlbCArICddICAgJyArIHNraWxsO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc2V0QXR0cmlidXRlKCdpZCcsICdsZXZlbC0nICsgc2tpbGwpO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUubGVmdCA9ICcxMHB4JztcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTUwJSknO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA9PSAwICYmIHNraWxsc1tza2lsbF0ubGV2ZWwgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdHIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZFByb2dyZXNzLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyKTtcclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5hcHBlbmRDaGlsZChza2lsbFRleHQpO1xyXG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFByb2dyZXNzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBEaXNwbGF5IGV2ZXJ5dGhpbmcgd2UgY2FuXHJcbiAgICAgICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPiAwIHx8IHNraWxsc1tza2lsbF0ubGV2ZWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ci0nICsgc2tpbGwpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucHJvZ3Jlc3NCYXJbZGF0YS1za2lsbD1cIiR7c2tpbGx9XCJdYCk7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0Jhcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNraWxsc1tza2lsbF0uZXhwICsgJyUnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNraWxsTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGV2ZWwtXCIgKyBza2lsbCk7XHJcbiAgICAgICAgICAgICAgICBza2lsbE5hbWUudGV4dENvbnRlbnQgPSAnW2xldmVsICcgKyBza2lsbHNbc2tpbGxdLmxldmVsICsgJ10gICAnICsgc2tpbGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHVwZGF0ZVNraWxscyxcclxuICAgIHBvcHVsYXRlU2tpbGxzVGFibGVcclxuXHJcbn07IiwibGV0IHN0YWdlcyA9IFtdO1xyXG5mdW5jdGlvbiBzZXRTdGFnZShzdGFnZSkge1xyXG4gICAgc3RhZ2VzLnB1c2goc3RhZ2UpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2UgU3RhZ2UgdG8gY2hlY2tcclxuICogQHJldHVybnMgYm9vbGVhbiBpZiBzdGFnZSBpbiBzdGFnZXNcclxuICovXHJcbmZ1bmN0aW9uIHBhc3NlZFN0YWdlKHN0YWdlKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdGFnZXMpLmluY2x1ZGVzKHN0YWdlKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBbGxTdGFnZXMoKSB7XHJcbiAgICByZXR1cm4gc3RhZ2VzO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFN0YWdlcygpIHtcclxuICAgIHdoaWxlIChzdGFnZXMubGVuZ3RoID4gMClcclxuICAgICAgICBzdGFnZXMucG9wKCk7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZXRTdGFnZSxcclxuICAgIHBhc3NlZFN0YWdlLFxyXG4gICAgZ2V0QWxsU3RhZ2VzLFxyXG4gICAgcmVzZXRTdGFnZXNcclxufTsiLCIvKiBUT09MUyAqL1xyXG5cclxuXHJcbi8vIExpc3QgdG8gaG9sZCB0aGUgdG9vbHNcclxubGV0IHBsYXllclRvb2xzID0gWydCYXJlIEhhbmRzJ107XHJcblxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdG9vbCBpcyBwcmVzZW50IGluIHRoZSBsaXN0IFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9vbCBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNUb29sKHRvb2wpIHtcclxuICAgIHJldHVybiBwbGF5ZXJUb29scy5pbmNsdWRlcyh0b29sKTtcclxufVxyXG5cclxuLy8gRnVuY3Rpb24gdG8gYWRkIGEgdG9vbCBpZiBpdCdzIG5vdCBhbHJlYWR5IHByZXNlbnRcclxuZnVuY3Rpb24gYWRkVG9vbCh0b29sKSB7XHJcbiAgICAvLyBJZ25vcmUgdG9vbHMgdGhhdCBhcmUganVzdCBudW1iZXJzXHJcbiAgICBpZiAoIWlzTmFOKHRvb2wpICYmIC8vIHVzZSB0eXBlIGNvZXJjaW9uIHRvIHBhcnNlIHRoZSBfZW50aXJldHlfIG9mIHRoZSBzdHJpbmcgKGBwYXJzZUZsb2F0YCBhbG9uZSBkb2VzIG5vdCBkbyB0aGlzKS4uLlxyXG4gICAgICAgICFpc05hTihwYXJzZUZsb2F0KHRvb2wpKSkgLy8gLi4uYW5kIGVuc3VyZSBzdHJpbmdzIG9mIHdoaXRlc3BhY2UgZmFpbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaGFzVG9vbCh0b29sKSkge1xyXG4gICAgICAgIHBsYXllclRvb2xzLnB1c2godG9vbCk7XHJcblxyXG4gICAgICAgIHVwZGF0ZVRvb2xVSSh0b29sKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsVG9vbHMoKSB7XHJcbiAgICByZXR1cm4gcGxheWVyVG9vbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvb2xVSSh0b29sKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIFVJXHJcbiAgICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvb2xzLWxpc3RcIik7XHJcbiAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b29sKSk7XHJcbiAgICBpZiAodWwpIHVsLmFwcGVuZENoaWxkKGxpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9vbFZhbHVlRm9yUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIGlmICghcmVzb3VyY2UpIHJldHVybiAxO1xyXG4gICAgaWYgKCFyZXNvdXJjZS50b29scykgcmV0dXJuIDE7XHJcblxyXG4gICAgLy8gU29ydCB0aGUgdG9vbHMgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiB0aGVpciB2YWxcclxuICAgIGNvbnN0IHNvcnRlZFRvb2xzID0gcmVzb3VyY2UudG9vbHMuc29ydCgoYSwgYikgPT4gYi52YWwgLSBhLnZhbCk7XHJcblxyXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzb3J0ZWQgdG9vbHNcclxuICAgIGZvciAobGV0IHRvb2wgb2Ygc29ydGVkVG9vbHMpIHtcclxuICAgICAgICBpZiAoaGFzVG9vbCh0b29sLnRvb2wpKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBwbGF5ZXIgaGFzIHRoZSB0b29sLCByZXR1cm4gaXRzIGFzc29jaWF0ZWQgdmFsdWVcclxuICAgICAgICAgICAgcmV0dXJuIHRvb2wudmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSWYgbm9uZSBvZiB0aGUgdG9vbHMgYXJlIGZvdW5kLCByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWVcclxuICAgIHJldHVybiAxO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGhhc1Rvb2wsXHJcbiAgICBhZGRUb29sLFxyXG4gICAgZ2V0QWxsVG9vbHMsXHJcbiAgICBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZVxyXG59OyIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcblxyXG5jb25zdCByZXNvdXJjZUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2VMaXN0Jyk7XHJcbmNvbnN0IGdvbGRBbW91bnRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnb2xkQW1vdW50Jyk7XHJcbi8vIGxldCBnb2xkQW1vdW50ID0gMTAwMDsgLy8gU2FtcGxlIHN0YXJ0aW5nIGFtb3VudFxyXG4vLyBjb25zdCB0cmFkZUJvbnVzID0gMC45OyAvLyAxMCUgZGlzY291bnRcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVHJhZGVUYWJsZShyZXNvdXJjZXMpIHtcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgMTA7IC8vIFJhbmRvbSBwcmljZSBiZXR3ZWVuIDEwIGFuZCAxMTAgZm9yIHRoaXMgZXhhbXBsZS5cclxuXHJcbiAgICAgICAgcm93LmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cmVzb3VyY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cHJpY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiIHN0eWxlPVwiZGlzcGxheTpmbGV4OyBmbGV4LWRpcmVjdGlvbjpyb3c7XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV5QnRuXCIgZGF0YS1yZXNvdXJjZT1cIiR7cmVzb3VyY2V9XCIgZGF0YS1wcmljZT1cIiR7cHJpY2V9XCI+QnV5PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2VsbEJ0blwiIGRhdGEtcmVzb3VyY2U9XCIke3Jlc291cmNlfVwiIGRhdGEtcHJpY2U9XCIke3ByaWNlfVwiPlNlbGw8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICByZXNvdXJjZUxpc3QuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgYnV5IGFuZCBzZWxsIGJ1dHRvbnNcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXlCdG4nKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1yZXNvdXJjZScpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcGFyc2VGbG9hdChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJpY2UnKSk7XHJcbiAgICAgICAgICAgIGJ1eVJlc291cmNlKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxsQnRuJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzb3VyY2UnKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXByaWNlJykpO1xyXG4gICAgICAgICAgICBzZWxsUmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNpbWlsYXJseSwgeW91IGNhbiBhZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBzZWxsIGJ1dHRvbnMgaGVyZVxyXG59XHJcblxyXG5leHBvcnRzLmdlbmVyYXRlVHJhZGVUYWJsZSA9IGdlbmVyYXRlVHJhZGVUYWJsZTtcclxuXHJcbmV4cG9ydHMuYnV5UmVzb3VyY2UgPSBidXlSZXNvdXJjZTtcclxuZXhwb3J0cy5zZWxsUmVzb3VyY2UgPSBzZWxsUmVzb3VyY2U7XHJcblxyXG5mdW5jdGlvbiBidXlSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpIHtcclxuXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSBwcmljZSkge1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIC1wcmljZSk7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgZ29sZEFtb3VudEVsLnRleHRDb250ZW50ID0gZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKTtcclxuICAgICAgICAvLyBhbGVydChgWW91IGJvdWdodCAke3Jlc291cmNlfSBmb3IgJHtwcmljZS50b0ZpeGVkKDIpfSBnb2xkIWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBhbGVydChcIllvdSBkb24ndCBoYXZlIGVub3VnaCBnb2xkIVwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2VsbFJlc291cmNlKHJlc291cmNlLCBwcmljZSkge1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKHJlc291cmNlLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSAxKSB7XHJcblxyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIHByaWNlKTtcclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC0xKTtcclxuICAgICAgICBnb2xkQW1vdW50RWwudGV4dENvbnRlbnQgPSBnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gYWxlcnQoYFlvdSBzb2xkICR7cmVzb3VyY2V9IGZvciAke3ByaWNlLnRvRml4ZWQoMil9IGdvbGQhYCk7XHJcbn0iLCJmdW5jdGlvbiB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgdGV4dCwgY29sb3IpIHtcclxuICAgIGNvbnN0IGZsb2F0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZmxvYXRUZXh0LnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS5sZWZ0ID0gYCR7eH1weGA7XHJcbiAgICBmbG9hdFRleHQuc3R5bGUudG9wID0gYCR7eSAtIDMwfXB4YDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS5jb2xvciA9IGNvbG9yO1xyXG4gICAgZmxvYXRUZXh0LmNsYXNzTGlzdC5hZGQoJ2Zsb2F0LXVwLWZhZGUtb3V0Jyk7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmbG9hdFRleHQpO1xyXG5cclxuICAgIC8vIFJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBET00gYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcclxuICAgIGZsb2F0VGV4dC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgZmxvYXRUZXh0LnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy50cmlnZ2VyRmxvYXRVcFRleHQgPSB0cmlnZ2VyRmxvYXRVcFRleHQ7XHJcbiIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlQm91bmNlQW5pbWF0aW9uKCkge1xyXG4gICAgY29uc3QgYWxvbmVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fsb25lJyk7XHJcblxyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnKSA8IGdldE1heCgnY2xvbmVzJykpIHtcclxuICAgICAgICAvLyBBcHBseSB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgYWxvbmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2JvdW5jaW5nJyk7XHJcblxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgcGx1cyBhbiBhZGRpdGlvbmFsIGRlbGF5LCB0aGVuIGNoZWNrIHRoZSBjb25kaXRpb24gYWdhaW5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBhbmltYXRpb24gY2xhc3MgdG8gcmVzZXRcclxuICAgICAgICAgICAgYWxvbmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvdW5jaW5nJyk7XHJcbiAgICAgICAgICAgIHZvaWQgYWxvbmVFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgLy8gUmVjdXJzaXZlIGNhbGwgdG8gcmUtY2hlY2sgdGhlIGNvbmRpdGlvbiBhbmQgcG90ZW50aWFsbHkgcmVhcHBseSB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG4gICAgICAgIH0sIDExMDAwKTsgLy8gV2FpdCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24gKDFzKSArIGRlbGF5ICgxMHMpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgYW5pbWF0aW9uIGNsYXNzIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldFxyXG4gICAgICAgIGFsb25lRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdib3VuY2luZycpO1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnRzLnVwZGF0ZUJvdW5jZUFuaW1hdGlvbiA9IHVwZGF0ZUJvdW5jZUFuaW1hdGlvbjsiLCJjb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYnVpbGRpbmdOYW1lLCBidWlsZGluZ0NvdW50LCBlbW9qaSkge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7YnVpbGRpbmdOYW1lfWApLnRleHRDb250ZW50ID0gYCR7ZW1vaml9ICR7Y2FwaXRhbGl6ZUZpcnN0KGJ1aWxkaW5nTmFtZSkuc3BsaXQoJ18nKS5qb2luKCcgJyl9ICgke2J1aWxkaW5nQ291bnR9KWA7XHJcblxyXG59XHJcbmV4cG9ydHMudXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCA9IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQ7IiwiY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyB1cGRhdGVUb29sdGlwLCBoaWRlVG9vbHRpcCB9ID0gcmVxdWlyZSgnLi91cGRhdGVUb29sdGlwJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBmaXRDaGFyVG9DZWxsIH0gPSByZXF1aXJlKCcuL2ZpdENoYXJUb0NlbGwnKTtcclxuXHJcbmNvbnN0IGJ1aWxkaW5nTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWlsZGluZ0xpc3QnKTtcclxuLy8gZnVuY3Rpb24gdXBkYXRlQnVpbGRpbmdMaXN0KCkge1xyXG4vLyAgICAgYnVpbGRpbmdMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4vLyAgICAgbGV0IGkgPSAwO1xyXG4vLyAgICAgY29uc3QgZ3JpZFNpemUgPSA2O1xyXG4vLyAgICAgY29uc3QgbWF4Q2VsbFdpZHRoID0gMzY7XHJcbi8vICAgICBjb25zdCBtYXhDZWxsSGVpZ2h0ID0gNDg7XHJcbi8vICAgICBjb25zdCBpbml0aWFsRm9udFNpemUgPSAzNjsgLy8gc3RhcnRpbmcgZm9udCBzaXplXHJcblxyXG4vLyAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5ncykpIHtcclxuLy8gICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbC5jb3VudDsgKytqLCArK2kpIHtcclxuLy8gICAgICAgICAgICAgbGV0IGNvbCA9IChpICUgZ3JpZFNpemUgKyAxKS50b1N0cmluZygpO1xyXG4vLyAgICAgICAgICAgICBsZXQgcm93ID0gTWF0aC5mbG9vcihpIC8gZ3JpZFNpemUgKyAxKS50b1N0cmluZygpO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBiZXN0IGZvbnQgc2l6ZSBmb3IgdGhpcyBjaGFyYWN0ZXJcclxuLy8gICAgICAgICAgICAgLy8gY29uc3QgZm9udFNpemUgPSBmaXRDaGFyVG9DZWxsKHZhbC5lbW9qaSB8fCAnPycsIG1heENlbGxXaWR0aCwgbWF4Q2VsbEhlaWdodCwgaW5pdGlhbEZvbnRTaXplKTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIEFkZCB0aGUgc3BhbiB3aXRoIHRoZSBjYWxjdWxhdGVkIGZvbnQgc2l6ZVxyXG4vLyAgICAgICAgICAgICAvLyBhZGRUb0J1aWxkaW5nTGlzdChjb2wsIHJvdywgaW5pdGlhbEZvbnRTaXplLCBrZXksIHZhbC5lbW9qaSk7XHJcbi8vICAgICAgICAgICAgIGJ1aWxkaW5nTGlzdC5pbm5lckhUTUwgKz0gYDxzcGFuIGNsYXNzID0gJ3Rvb2x0aXAnIHN0eWxlPSdncmlkLWNvbHVtbjoke2NvbH07IGdyaWQtcm93OiR7cm93fTsgZm9udC1zaXplOiR7aW5pdGlhbEZvbnRTaXplfXB4JyB0b29sdGlwRGVzYz0nJHtrZXl9Jz4ke3ZhbC5lbW9qaSB8fCAnPyd9PC9zcGFuPmA7XHJcblxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gICAgIGJ1aWxkaW5nTGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLnRvb2x0aXAnKS5mb3JFYWNoKChzcGFuKSA9PiB7XHJcbi8vICAgICAgICAgc3Bhbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xyXG4vLyAgICAgICAgICAgICB1cGRhdGVUb29sdGlwKHNwYW4pO1xyXG4vLyAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgIHNwYW4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcclxuLy8gICAgICAgICAgICAgaGlkZVRvb2x0aXAoKTtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgIH0pO1xyXG4vLyB9XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVCdWlsZGluZ0xpc3QoKSB7XHJcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGNvbnN0IGdyaWRTaXplID0gNjtcclxuICAgIGNvbnN0IGluaXRpYWxGb250U2l6ZSA9IDM2OyAvLyBTdGFydGluZyBmb250IHNpemVcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmdzKSkge1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsLmNvdW50OyArK2osICsraSkge1xyXG4gICAgICAgICAgICBsZXQgY29sID0gKGkgJSBncmlkU2l6ZSArIDEpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGxldCByb3cgPSBNYXRoLmZsb29yKGkgLyBncmlkU2l6ZSArIDEpLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICBzcGFuLmNsYXNzTmFtZSA9ICd0b29sdGlwJztcclxuICAgICAgICAgICAgc3Bhbi5zdHlsZS5ncmlkQ29sdW1uID0gY29sO1xyXG4gICAgICAgICAgICBzcGFuLnN0eWxlLmdyaWRSb3cgPSByb3c7XHJcbiAgICAgICAgICAgIHNwYW4uc3R5bGUuZm9udFNpemUgPSBgJHtpbml0aWFsRm9udFNpemV9cHhgO1xyXG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnLCBrZXkpO1xyXG4gICAgICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gdmFsLmVtb2ppIHx8ICc/JztcclxuXHJcbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHNwYW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDbGVhciB0aGUgZXhpc3RpbmcgY29udGVudCBhbmQgYXBwZW5kIHRoZSBuZXcgY29udGVudFxyXG4gICAgYnVpbGRpbmdMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgYnVpbGRpbmdMaXN0LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcclxuXHJcbiAgICAvLyBFdmVudCBkZWxlZ2F0aW9uIGZvciB0b29sdGlwc1xyXG4gICAgYnVpbGRpbmdMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rvb2x0aXAnKSkge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgYnVpbGRpbmdMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rvb2x0aXAnKSkge1xyXG4gICAgICAgICAgICBoaWRlVG9vbHRpcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHRydWUpO1xyXG59XHJcblxyXG5leHBvcnRzLnVwZGF0ZUJ1aWxkaW5nTGlzdCA9IHVwZGF0ZUJ1aWxkaW5nTGlzdDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBidWlsZGluZ1xyXG4gKi9cclxuLy8gZnVuY3Rpb24gYWRkVG9CdWlsZGluZ0xpc3Qoa2V5LCBlbW9qaSkge1xyXG4vLyAgICAgYnVpbGRpbmdMaXN0LmlubmVySFRNTCArPSBgPHNwYW4gY2xhc3MgPSAndG9vbHRpcCcgc3R5bGU9J2dyaWQtY29sdW1uOiR7Y29sfTsgZ3JpZC1yb3c6JHtyb3d9OyBmb250LXNpemU6JHtmb250c2l6ZX1weCcgdG9vbHRpcERlc2M9JyR7a2V5fSc+JHtlbW9qaSB8fCAnPyd9PC9zcGFuPmA7XHJcblxyXG4vLyB9XHJcbi8vIGV4cG9ydHMuYWRkVG9CdWlsZGluZ0xpc3QgPSBhZGRUb0J1aWxkaW5nTGlzdDsiLCJjb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoJy4vanNvbi9idXR0b25zJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBnZXRCdWlsZGluZ0NvdW50IH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCwgY2FuVW5sb2NrIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnIH0gPSByZXF1aXJlKFwiLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgaXNCdXR0b25JZFZpc2libGUsIHNldFZpc2libGVCdXR0b24gfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgY2FuQ3JhZnQgfSA9IHJlcXVpcmUoJy4vY2FuQ3JhZnQnKTtcclxuY29uc3QgeyBjYW5CdXlCdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9jYW5CdXlCdWlsZGluZycpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG4vKipcclxuICogQ2hhbmdlcyB0aGUgc3RhdGVzIG9mIGJ1dHRvbnMgYmV0d2VlbiAnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgYW5kICdidXR0b24tZGlzYWJsZWQnXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCkge1xyXG4gICAgY29uc3Qgc2VsZWN0QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFjY29yZGluZ2x5XHJcblxyXG4gICAgc2VsZWN0QnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29uZmlnID0gYnV0dG9uc1tidXR0b24uaWRdOyAvKiBnZXQgdGhlIGJ1dHRvbidzIGNvbmZpZ3VyYXRpb24gdXNpbmcgaXRzIGRhdGEgYXR0cmlidXRlIG9yIElELCBldGMuICovO1xyXG4gICAgICAgIGlmICghYnV0dG9uQ29uZmlnKSB7IC8qY29uc29sZS53YXJuKCdubyBidXR0b24gY29uZmlnIGZvdW5kIGZvcicsIGJ1dHRvbiwgYnV0dG9uLmlkKTsgKi9yZXR1cm47IH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcuZGF0YV9idWlsZGluZywgYnV0dG9uQ29uZmlnLnJlcXVpcmVtZW50KTtcclxuICAgICAgICAvLyBSZXNldCBhbGwgc3RhdGVzIGZpcnN0XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgIGlmIChidXR0b24uaWQgJiYgaXNCdXR0b25JZFZpc2libGUoYnV0dG9uLmlkKSkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcbiAgICAgICAgLy8gSWYgcmVxdWlyZW1lbnQgaXMgbWV0LCBpdCBzaG91bGQgYmUgdmlzaWJsZVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIGxldCBnZXRNYXRlcmlhbCA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKS5nZXRNYXRlcmlhbDtcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5yZXF1aXJlbWVudCAmJiBidXR0b25Db25maWcucmVxdWlyZW1lbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAgICAgICAgIC8vIGFsd2F5cyBwdXJjaGFzYWJsZSBnYXRoZXIgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgJiYgIWJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiA9PT0gJ3Byb2R1Y3Rpb24nKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcG9uZGVyIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZCAmJiBidXR0b24uaWQgPT09ICdnYXRoZXJQb25kZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHBvbmRlciB1bmxvY2tzXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiBidXR0b25Db25maWcudGFiID09PSAncG9uZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbi5jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWQgJiYgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndW5sb2NrJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVubG9jayhidXR0b24uaWQpKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGEgcG9uZGVyIGJ1dHRvbiBpcyB1bmxvY2tlZCwgaGlkZSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNQb25kZXJlZChidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKSkpIHN0YXRlID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbiwgc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyB0YWIgYnV0dG9ucyBhbHdheXMgZWl0aGVyIGhpZGRlbiBvciBlbmFibGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiBidXR0b25Db25maWcudGFiID09PSAndGFicycpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICd2aXNpYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIHdpdGggY2hlY2tpbmcgcmVxdWlyZW1lbnQgb2YgYnV0dG9uOiAnLCBidXR0b25Db25maWcsIGVycik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmlkICYmIGJ1dHRvbkNvbmZpZy5pZC5zbGljZSgwLCA1KSA9PT0gJ2NyYWZ0Jykge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHVubG9ja2VkIHRoZSBidXR0b24sIG5ldmVyIGRpc3BsYXkgaXRcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UpO1xyXG4gICAgICAgICAgICAvLyBpZiAoYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UgJiYgIXBhc3NlZFN0YWdlKGJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgc3RhdGUgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8gbmV2ZXIgaGlkZSB0aGlzIGJ1dHRvbiBvbmNlIGl0cyBiZWVuIHVubG9ja2VkXHJcbiAgICAgICAgICAgIGlmIChidXR0b25Db25maWcuY3JhZnRlZE9uY2UpIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAgICAgdmFyIGNyYWZ0ZWQgPSBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbkNvbmZpZy5pZCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNyYWZ0ZWQpO1xyXG4gICAgICAgICAgICBpZiAoY3JhZnRlZC52YWx1ZSA+IDApIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBjYW4gYWZmb3JkIHRoaXMgY3JhZnQsIGl0IHNob3VsZCBiZSBwdXJjaGFzYWJsZVxyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyhjcmFmdGVkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coa2V5KTtcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChjYW5DcmFmdChrZXkpKVxyXG4gICAgICAgICAgICAgICAgaWYgKCFidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSB8fCBidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSAmJiBwYXNzZWRTdGFnZShidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSkpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgIGVsc2Ugc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGNhbiBhZmZvcmQgdGhpcyBidWlsZGluZywgaXQgc2hvdWxkIGJlIHB1cmNoYXNhYmxlXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBwdXJjaGFzZWQgYSBidWlsZGluZywgaXQgc2hvdWxkIGJlIHZpc2libGVcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHN0YXRlID0gZ2V0QnVpbGRpbmdDb3VudChidXR0b25Db25maWcuZGF0YV9idWlsZGluZykgPyAnYnV0dG9uLWRpc2FibGVkJyA6IHN0YXRlO1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBidWlsZGluZyBjb3N0XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBzdGF0ZSA9IGNhbkJ1eUJ1aWxkaW5nKGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSA/ICdwdXJjaGFzYWJsZScgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGhpZGRlbiBpcyBtZXQsIGl0IHNob3VsZCBiZSBoaWRkZW5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmhpZGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBidXR0b25Db25maWcuaGlkZSgpID8gJ2hpZGRlbicgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIGN1cnJlbnQgc3RhdGVcclxuICAgICAgICBpZiAoc3RhdGUgIT09ICcnKSBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QtcHVyY2hhc2FibGUsIGRpc2FibGUgdGhlIGJ1dHRvblxyXG4gICAgICAgIC8vIGJ1dHRvbi5kaXNhYmxlZCA9IHN0YXRlID09PSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgZm9yIHRoaXMgYnV0dG9uIGlmIGl0cyBhY3RpdmVcclxuICAgICAgICAvLyBpZiAoYnV0dG9uID09PSBjdXJyZW50SG92ZXJCdXR0b24pIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAvLyBJZiB0aGUgc3RhdGUgaXMgaGlkZGVuLCBzZXQgdGhlIGJ1dHRvbidzIGRpc3BsYXkgdG8gbm9uZVxyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGwgdmlzaWJsZSAnLCBidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7IC8vIFRoaXMgd2lsbCByZXZlcnQgaXQgYmFjayB0byBpdHMgb3JpZ2luYWwgZGlzcGxheSBzdGF0ZSBvciBkZWZhdWx0IChlLmcuLCAnYmxvY2snIG9yICdpbmxpbmUtYmxvY2snKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJykuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGpvYiA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICBjb25zdCByZXFQb25kZXIgPSAocmVxdWlyZSgnLi9qb2JSZXF1aXJlZFBvbmRlcnMnKS5qb2JSZXF1aXJlZFBvbmRlcnMpW2pvYl07XHJcbiAgICAgICAgaWYgKHJlcVBvbmRlciA9PT0gbnVsbCB8fCByZXFQb25kZXIgPT09IHVuZGVmaW5lZCkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKGlzUG9uZGVyZWQocmVxUG9uZGVyKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKHJlcVBvbmRlciA9PT0gJ25vdC11bmxvY2thYmxlJykgc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICBlbHNlIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhqb2IsIGJ1dHRvbiwgcmVxUG9uZGVyLCBzdGF0ZSk7XHJcbiAgICAgICAgLy8gYnV0dG9uLmNsYXNzTGlzdC5cclxuICAgICAgICBpZiAoc3RhdGUgPT09ICdoaWRkZW4nKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoaWRpbmcnLCBidXR0b24pO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWxsIHZpc2libGUgJywgYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgc2V0VmlzaWJsZUJ1dHRvbihidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gVGhpcyB3aWxsIHJldmVydCBpdCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBkaXNwbGF5IHN0YXRlIG9yIGRlZmF1bHQgKGUuZy4sICdibG9jaycgb3IgJ2lubGluZS1ibG9jaycpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVCdXR0b25WaXNpYmlsaXR5ID0gdXBkYXRlQnV0dG9uVmlzaWJpbGl0eTsiLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIGdldFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNhbGNTZWNvbmRzUmVtYWluaW5nIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgdG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkeW5hbWljLXRvb2x0aXAnKTtcclxuZnVuY3Rpb24gc2hvd1Rvb2x0aXAodGFyZ2V0LCBkZXNjLCBlZmZlY3QsIGNvc3QpIHtcclxuICAgIGxldCBjb250ZW50ID0gJyc7XHJcblxyXG4gICAgaWYgKGRlc2MpIHtcclxuICAgICAgICBjb250ZW50ICs9IGA8c3BhbiA+JHtkZXNjfTwvc3Bhbj48aHI+YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWZmZWN0KSB7XHJcbiAgICAgICAgY29udGVudCArPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjojNGNmXCI+JHtlZmZlY3R9PC9zcGFuPjxocj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NNYXRlcmlhbHMoaHRtbFN0cmluZywgcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gUmVndWxhciBleHByZXNzaW9uIHRvIGV4dHJhY3QgbWF0ZXJpYWwgYW5kIGFtb3VudFxyXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL2NsYXNzPVwidG9vbHRpcC0oXFx3KykgLis/XCI+KFtcXGQuXStbS01dPylcXHMoXFx3Kyk8L2c7XHJcbiAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgIGxldCBwcm9jZXNzZWRTdHJpbmcgPSAnJztcclxuXHJcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoaHRtbFN0cmluZykpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbWF0Y2hbMV07XHJcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudFRleHQgPSBtYXRjaFsyXTtcclxuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VBbW91bnQoYW1vdW50VGV4dCk7IC8vIENvbnZlcnQgJzEyMUsnIHRvIDEyMTAwMCwgZm9yIGV4YW1wbGVcclxuXHJcbiAgICAgICAgICAgIC8vIFBlcmZvcm0geW91ciBsb2dpYyBoZXJlXHJcbiAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IGFtb3VudDtcclxuICAgICAgICAgICAgdmFyIGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICAgICAgaWYgKGdldE1heChtYXRlcmlhbCkgPCBhbW91bnQpIGNvbG9yQ2xhc3MgPSAnZXhjZWVkcy1tYXgnO1xyXG5cclxuICAgICAgICAgICAgcHJvY2Vzc2VkU3RyaW5nICs9IGA8c3BhbiBjbGFzcz1cInRvb2x0aXAtJHttYXRlcmlhbH0gJHtjb2xvckNsYXNzfVwiPiR7YW1vdW50VGV4dH0gJHttYXRlcmlhbH08L3NwYW4+YDtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWNvbmRzUmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0pIHNlY29uZHNSZW1haW5pbmcgPSBjYWxjU2Vjb25kc1JlbWFpbmluZyhtYXRlcmlhbCwgYW1vdW50KTtcclxuICAgICAgICAgICAgaWYgKHNlY29uZHNSZW1haW5pbmcgPiAwICYmIGNvbG9yQ2xhc3MgIT0gJ2V4Y2VlZHMtbWF4Jykge1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkU3RyaW5nICs9IGA8c3BhbiBjbGFzcz1cInRpbWUtcmVtYWluaW5nXCI+KCR7c2Vjb25kc1JlbWFpbmluZy50b0ZpeGVkKDApfSBzZWNvbmRzKTwvc3Bhbj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb2Nlc3NlZFN0cmluZyArPSBgPGJyPmA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBwYXJzZSBhbW91bnRzIGxpa2UgJzEyMUsnIGludG8gbnVtYmVyc1xyXG4gICAgZnVuY3Rpb24gcGFyc2VBbW91bnQoYW1vdW50VGV4dCkge1xyXG4gICAgICAgIGxldCBhbW91bnQgPSBwYXJzZUZsb2F0KGFtb3VudFRleHQpO1xyXG4gICAgICAgIGlmIChhbW91bnRUZXh0LmluY2x1ZGVzKCdLJykpIHtcclxuICAgICAgICAgICAgYW1vdW50ICo9IDFlMztcclxuICAgICAgICB9IGVsc2UgaWYgKGFtb3VudFRleHQuaW5jbHVkZXMoJ00nKSkge1xyXG4gICAgICAgICAgICBhbW91bnQgKj0gMWU2O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYW1vdW50VGV4dC5pbmNsdWRlcygnQicpKSB7XHJcbiAgICAgICAgICAgIGFtb3VudCAqPSAxZTk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY29zdCBvZiB0b29sdGlwOicsIGNvc3QpO1xyXG4gICAgICAgIGlmIChjb3N0LnRvU3RyaW5nKCkuaW5jbHVkZXMoJ3NwYW4nKSkge1xyXG4gICAgICAgICAgICAvLyBjb250ZW50ICs9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiNGNEQwM0ZcIj4ke2Nvc3R9PC9zcGFuPjxicj5gO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncnVubmluZyBwcm9jbWF0IGZvciAnLCBjb3N0KTtcclxuICAgICAgICAgICAgY29udGVudCArPSBwcm9jZXNzTWF0ZXJpYWxzKGNvc3QsIHJlc291cmNlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW21hdGVyaWFsLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGNvc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBtYXRlcmlhbCA9IHJlcTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IGFtb3VudDsgLyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi8vKiBZb3VyIGxvZ2ljIHRvIGNoZWNrIGlmIHRoZXJlJ3MgZW5vdWdoIG9mIHRoZSBtYXRlcmlhbCAqLztcclxuICAgICAgICAgICAgICAgIHZhciBjb2xvckNsYXNzID0gaGFzRW5vdWdoID8gJ2Vub3VnaCcgOiAnbm90LWVub3VnaCc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWF4KG1hdGVyaWFsKSA8IGFtb3VudCkgY29sb3JDbGFzcyA9ICdleGNlZWRzLW1heCc7XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHthbW91bnQudG9GaXhlZCgwKX0gJHttYXRlcmlhbH08L3NwYW4+YDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kc1JlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkgc2Vjb25kc1JlbWFpbmluZyA9IGNhbGNTZWNvbmRzUmVtYWluaW5nKG1hdGVyaWFsLCBhbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2Vjb25kc1JlbWFpbmluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kc1JlbWFpbmluZyA+IDAgJiYgY29sb3JDbGFzcyAhPSAnZXhjZWVkcy1tYXgnKSB7IHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0aW1lLXJlbWFpbmluZ1wiPigkeyhzZWNvbmRzUmVtYWluaW5nKS50b0ZpeGVkKDApfSBzZWNvbmRzKTwvc3Bhbj5gOyB9XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxicj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gc3RyO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBpZiAoY29zdCAhPT0gdW5kZWZpbmVkICYmIGNvc3QgIT09ICd1bmRlZmluZWQnKSBjb250ZW50ICs9IGNvc3Q7XHJcbiAgICAgICAgLy8gY29uc29sZS5lcnJvcihcIkNvdWxkbid0IG1ha2Ugbm9ybWFsIGNvc3QgZm9yIGJ1dHRvbjogXCIsIHRhcmdldCwgY29zdCwgZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2codGFyZ2V0LCBjb250ZW50KTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuaW5uZXJIVE1MID0gY29udGVudDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUubGVmdCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQgKyA1KSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLnRvcCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gdG9vbHRpcC5vZmZzZXRIZWlnaHQgLyAyKSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlVG9vbHRpcCgpIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxufVxyXG5leHBvcnRzLmhpZGVUb29sdGlwID0gaGlkZVRvb2x0aXA7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVUb29sdGlwKGJ1dHRvbikge1xyXG4gICAgY29uc3QgZGVzYyA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJykgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnKTtcclxuICAgIGNvbnN0IGVmZmVjdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1lZmZlY3QnKTtcclxuICAgIC8vIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpO1xyXG4gICAgY29uc3QgY29uZmlnID0gZ2V0UmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbi5pZCkgfHwgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZChidXR0b24uaWQpIHx8IGJ1aWxkaW5nc1tidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJyldIHx8IHBvbmRlcnNbYnV0dG9uLmdldEF0dHJpYnV0ZSgndW5sb2NrJyldO1xyXG4gICAgLy8gY29uc29sZS5sb2coY29uZmlnKTtcclxuICAgIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcpIHx8IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JykgfHwgKGNvbmZpZyAmJiBjb25maWcuY29zdCk7XHJcbiAgICBzaG93VG9vbHRpcChidXR0b24sIGRlc2MsIGVmZmVjdCwgY29zdCk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVUb29sdGlwID0gdXBkYXRlVG9vbHRpcDtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtjbG9uZV9pZGxlXCJdID0gc2VsZltcIndlYnBhY2tDaHVua2Nsb25lX2lkbGVcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFsxM10sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDgwOCkpKVxuX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsImV4cG9ydHMiLCJHYW1lU2ltdWxhdG9yIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiZ2FtZVN0YXRlIiwicmVzb3VyY2VzIiwiY2xvbmVzIiwic3RpY2tzIiwidmluZXMiLCJyb2NrcyIsImZpc2giLCJ3b29kIiwicG9uZGVyIiwib3JlIiwic2FuZCIsIndoZWF0IiwiZnJlc2h3YXRlciIsImhpZGVzIiwiY2xheSIsImhlcmJzIiwiZ2FtZSIsImh1c2tzIiwidmlvbGVuY2UiLCJzaGFycHJvY2tzIiwicm9wZSIsImhhbmRsZSIsInN0YWZmIiwiZmlzaGluZ3JvZCIsInNwZWFyIiwiYXhlIiwicGlja2F4ZSIsImdsYXNzIiwicGFwZXIiLCJnb2xkIiwiaXJvbiIsInNpbHZlciIsImJyaWNrcyIsImJyZWFkIiwic3RlZWwiLCJiZWFtcyIsImNyYXRlcyIsIm5haWxzIiwic2xhYnMiLCJtZWRpY2luZSIsImxlYXRoZXIiLCJjb25jcmV0ZSIsIm1heGVzIiwiYnVpbGRpbmdzIiwiYW5pbWFsX3BlbiIsImJha2VyeSIsImJhcm4iLCJiYXJyYWNrcyIsImNhbXBmaXJlIiwiZGVzayIsImRyeWluZ19yYWNrcyIsImZpc2hfdHJhcHMiLCJmaXNoZXJ5IiwiZm9yZ2UiLCJnYXJkZW4iLCJncm92ZSIsImhlcmJhbGlzdF9odXQiLCJob3NwaXRhbCIsImhvdXNlIiwiaHV0IiwiaXJyaWdhdGlvbiIsImxpYnJhcnkiLCJsdW1iZXJfeWFyZCIsIm1hcmtldHBsYWNlIiwibWlsaXRhcnlfc2Nob29sIiwibWluZSIsIm9ic2VydmF0b3J5IiwicmVzZXJ2b2lyIiwicm9ja19yb2xlIiwic2FuZF9zY29vcCIsInNoZWQiLCJzaGVsdGVyIiwic3RvY2twaWxlIiwic3RvbmVfZGVwb3QiLCJzdG9uZV9xdWFycnkiLCJ0YW5uZXJ5IiwidGVlcGVlIiwidGVsZXNjb3BlIiwidG93ZXIiLCJ0cmFwcyIsInZpbmV5YXJkIiwid2FyZWhvdXNlIiwid2F0ZXJfcHVtcCIsIndpbmRtaWxsIiwid29ya3Nob3AiLCJ0aW1lIiwibG9nIiwiYnVpbGRpbmdzQ29uc3QiLCJidXlCdWlsZGluZyIsImJ1aWxkaW5nTmFtZSIsImNvc3QiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJiYXNlY29zdCIsIk1hdGgiLCJwb3ciLCJyYXRpbyIsImNhbkJ1eSIsImMiLCJzdG9yYWdlIiwiaW5jbHVkZXMiLCJyIiwidmFsIiwiZWZmZWN0cyIsInNpbXVsYXRlVGljayIsInBlcmZvcm1BY3Rpb25zIiwidXBkYXRlUmVzb3VyY2VzIiwibG9nR2FtZVN0YXRlIiwiaG91c2luZyIsImJ1aWxkaW5nUHJpb3JpdHkiLCJiIiwidmFsdWVzIiwiZXJyb3IiLCJjb25zb2xlIiwicmVzb3VyY2VzVG9HYXRoZXIiLCJpIiwiZ2F0aGVyaW5nIiwibGVuZ3RoIiwia2V5cyIsInJhbmRvbSIsInB1c2giLCJ3YXJuIiwic3RhdGVDb3B5IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicnVuU2ltdWxhdGlvbiIsImR1cmF0aW9uIiwib3V0cHV0UmVzdWx0cyIsImNzdkRhdGEiLCJkYXRhIiwiYnVpbGRpbmdzS2V5cyIsInJlc291cmNlc0tleXMiLCJoZWFkZXIiLCJmaWx0ZXIiLCJjc3YiLCJqb2luIiwiZm9yRWFjaCIsInJvdyIsIm1hcCIsImhhc093blByb3BlcnR5IiwiY29udmVydFRvQ1NWIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibGluayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsInRleHRDb250ZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwidGFibGUiLCJhdGVGaXNoIiwibW9kdWxlIiwic2V0QXRlRmlzaCIsImJvb2wiLCJnZXRBdGVGaXNoIiwibXVzaWNWb2x1bWUiLCJnZXRNdXNpY1ZvbHVtZSIsInNmeFZvbHVtZSIsImdldFNmeFZvbHVtZSIsInNldE11c2ljVm9sdW1lIiwidm9sIiwic2V0U2Z4Vm9sdW1lIiwicGxheVNvdW5kIiwiZmlsZW5hbWUiLCJpc1NmeCIsImF1ZGlvIiwiQXVkaW8iLCJ2b2x1bWUiLCJwbGF5IiwiaXNQb3BCdWlsZGluZyIsImluY3JlYXNlTWF0ZXJpYWwiLCJpbmNyZWFzZU1heCIsInVwZGF0ZVRvdGFsIiwiaGFzUGVyayIsImdldE1hdGVyaWFsIiwicGFzc2VkU3RhZ2UiLCJyZWNhbGNNYXhDbG9uZXMiLCJ1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50IiwicmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QiLCJjYW5CdXlCdWlsZGluZyIsImlzUG9uZGVyZWQiLCJ1cGRhdGVCdWlsZGluZ0xpc3QiLCJjYXBpdGFsaXplRmlyc3QiLCJwb25kZXJzIiwibG9nRXZlbnQiLCJnZXRBbmFseXRpY3MiLCJnZXRQbGF5ZXJVaWQiLCJidWlsZGluZyIsImNvdW50IiwicmVzb3VyY2UiLCJhbW91bnQiLCJlbW9qaSIsImJ1aWxkaW5nX25hbWUiLCJ1c2VyX2lkIiwiZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0IiwibWF0ZXJpYWwiLCJ0b0ZpeGVkIiwiY3JlYXRlQnVpbGRpbmdCdXR0b24iLCJidWlsZGluZ0tleSIsImNvc3RzIiwicmVxdWlyZW1lbnRGdW5jdGlvbiIsImNvc3RDb25kaXRpb24iLCJldmVyeSIsImZsb29yIiwiY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbiIsInRvb2x0aXBEZXNjIiwiYnV5TWF4QnVpbGRpbmdzIiwiZ2VuZXJhdGVFZmZlY3RTdHJpbmciLCJlZmZlY3RQYXJ0cyIsImJvb3N0IiwicGVyY2VudGFnZUJvb3N0Iiwicm91bmQiLCJwb25kZXJJZCIsInN0YXJ0c1dpdGgiLCJjcmFmdGVkUmVzb3VyY2VzIiwic2tpbGxzIiwiZ2V0V29ya2VycyIsImdldEZhY3RvcnlQcm9kdWN0aW9uIiwiaGFzUHJlc3RpZ2UiLCJnZXRMZXZlbE9mUHJlc3RpZ2UiLCJoYXNUb29sIiwicGVya0Jvb3N0cyIsInNraWxsQm9vc3RzIiwicmVzb3VyY2VUb29sTWFwIiwiY2FsY0luY3JlYXNlIiwicmVzb3VyY2VOYW1lIiwiZGVsdGFfdGltZSIsInRvdGFsIiwiaXNHZXR0aW5nIiwicGVyayIsImFwcGx5UGVya0Jvb3N0IiwiY2xvbmVNdWx0Iiwic2tpbGwiLCJib29zdHMiLCJhZmZlY3RlZFJlc291cmNlcyIsInNraWxsUmF0aW8iLCJtdWx0IiwibGV2ZWwiLCJhcHBseVNraWxsQm9vc3QiLCJib29zdERhdGEiLCJpbmNyZWFzZSIsImFwcGx5UG9uZGVyQm9udXNlcyIsInRvb2xOYW1lIiwibG9nMTAiLCJhcHBseVRvb2xCb29zdCIsInNxcnQiLCJwYXJzZUZsb2F0IiwiY2FuQ3JhZnQiLCJyZXNvdXJjZUtleSIsInJlcXVpcmVtZW50cyIsIm1hdCIsInN0ciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJtZXNzYWdlRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2hhbmdlTWVzc2FnZSIsIm5ld01lc3NhZ2UiLCJjbG9uZVdvcmRzIiwidG9vbHRpcCIsIm1vZGlmaWVkTWVzc2FnZSIsInJlcGxhY2UiLCJpbm5lckhUTUwiLCJsb290VGFibGUiLCJwcm9iYWJpbGl0eSIsInF1YW50aXR5IiwiY3Vyckxvb3QiLCJnZXRDdXJyTG9vdCIsImdlbmVyYXRlTG9vdCIsImxvb3QiLCJhcmVuYSIsImNyZWF0ZUJhbGxzIiwidGVhbSIsImJhbGwiLCJjbGFzc05hbWUiLCJzdHlsZSIsImxlZnQiLCJ0b3AiLCJwbGF5ZXJUcm9vcHMiLCJlbmVteVRyb29wcyIsImFuaW1hdGlvbnMiLCJhbmltVGltZSIsInN0YXJ0QW5pbWF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsInRhcmdldFgiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIm9mZnNldFdpZHRoIiwiYW5pbWF0ZSIsInRyYW5zZm9ybSIsImZpbGwiLCJmaW5pc2hlZCIsInRoZW4iLCJyZW1vdmUiLCJ1cGRhdGUiLCJzZXRUaW1lb3V0IiwicGxheWVyQmFsbHMiLCJlbmVteUJhbGxzIiwiaGFzUmV3YXJkZWQiLCJjaGVja0ZvcldpbiIsImJhdHRsZVJlc3VsdCIsImNvbWJhdFJlc3VsdCIsImZpZ2h0QnV0dG9uIiwiZGlzYWJsZWQiLCJzdGFuY2VNdWx0IiwiZ2V0U3RhbmNlIiwibG9vdE5hbWUiLCJwbGF5ZXJXb25QcmV2aW91c0JhdHRsZSIsImVuZW15TWlnaHQiLCJnZXROZXh0QmF0dGxlTWlnaHQiLCJyZWZyZXNoVmFsdWVzIiwiaXNDb2xsaWRpbmciLCJiYWxsMSIsImJhbGwyIiwicmVjdDEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0MiIsInJpZ2h0IiwiYm90dG9tIiwicGxheWVyIiwiZW5lbXkiLCJqIiwicGxheWVyQmFsbCIsImVuZW15QmFsbCIsImdldEN1cnJFbmVteU1pZ2h0IiwiY2FsY3VsYXRlUGxheWVyTWlnaHQiLCJjaGFuY2VTcHJlYWQiLCJkZXRlY3RDb2xsaXNpb25zIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsY1JvdW5kaW5nIiwicGxheWVyTWlnaHQiLCJwbGF5ZXJSb3VuZGluZyIsImNlaWwiLCJlbmVteVJvdW5kaW5nIiwiaGlnaGVyUm91bmRpbmciLCJtYXgiLCJwbGF5ZXJDb3VudCIsImVuZW15Q291bnQiLCJ0b1N0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJtaWdodCIsInBsYXllck1pZ2h0RWxlbWVudCIsImVuZW15TWlnaHRFbGVtZW50IiwiY2FsY3VsYXRlV2luQ2hhbmNlIiwiY2hhbmNlIiwic2V0QXR0cmlidXRlIiwiY2hhbmNlRWxlbWVudCIsImNvbG9yIiwic3RhbmNlIiwic3RhbmNlQnV0dG9ucyIsInN3aXRjaFN0YW5jZSIsIm5ld1N0YW5jZSIsImVsZW1lbnQiLCJzZXRTdGFuY2UiLCJsb290TGlzdCIsIndpbmRvdyIsImNvbWJhdCIsInBhdXNlQW5pbWF0aW9uIiwicGF1c2UiLCJzaW11bGF0ZUJhdHRsZSIsInBsYXllckNoYW5jZSIsImNhbGN1bGF0ZUJhdHRsZVJlc3VsdCIsInNldEVuZW15TWlnaHQiLCJzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcCIsImFsbE1hdGVyaWFscyIsImFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZyIsImFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZyIsInVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nIiwib2xkUHJvZHVjZWQiLCJuZXdQcm9kdWNlZCIsIkFycmF5IiwiZnJvbSIsImNyZWF0ZUZhY3RvcnlEaXYiLCJmYWN0b3JpZXNDb250YWluZXIiLCJmYWN0b3J5RGl2IiwibGVmdFRleHQiLCJhZGQiLCJyaWdodFNlbGVjdCIsIm9wdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjdXJyZW50UHJvZHVjZWQiLCJnZXRBdHRyaWJ1dGUiLCJhcnJvdyIsInNlbGVjdEVsZW1lbnQiLCJ0ZXh0IiwiaW5pdGlhbE9wdGlvbiIsInNlbGVjdGVkIiwiYWRkSW5pdGlhbE9wdGlvbiIsIm1hbnVmYWN0dXJlQnVsayIsImJ1bGtVcGdyYWRlQ29zdCIsIm5ld0ZhY3RvcnlTaWx2ZXJDb3N0IiwiYXR0ZW1wdE1hbnVmYWN0dXJlIiwiZmFjdG9yeSIsImdvYWxSZXNvdXJjZSIsInRyYWNlIiwiYXJyIiwibnVtIiwibWluIiwibWFudWZhY3R1cmUiLCJidXlGYWN0b3J5IiwiYnV5RmFjdG9yeUJ1dHRvbiIsInVwZ3JhZGVCdWxrIiwibG9hZEZhY3RvcnkiLCJjcmFmdGluZyIsImRpdiIsImZpdENoYXJUb0NlbGwiLCJjaGFyIiwiY2VsbFdpZHRoIiwiY2VsbEhlaWdodCIsImluaXRpYWxGb250U2l6ZSIsInNwYW4iLCJmb250U2l6ZSIsInBvc2l0aW9uIiwid2hpdGVTcGFjZSIsInZpc2liaWxpdHkiLCJjdXJyZW50Rm9udFNpemUiLCJvZmZzZXRIZWlnaHQiLCJyZW1vdmVDaGlsZCIsInNpZGViYXJQYXJlbnQiLCJlbW9qaUdhdGhlckRpdiIsInRvZ2dsZVJlc291cmNlIiwiZ2F0aGVyQXVkaW8iLCJzaWRlYmFyVGV4dCIsInJlc291cmNlQnV0dG9uIiwiZGVmYXVsdFRleHQiLCJmb250V2VpZ2h0IiwickJ1dHRvbiIsInN0b3BBbGxHYXRoZXJpbmciLCJhY3RpdmVUZXh0IiwiYnV0dG9ucyIsImdlbmVyYXRlVG9vbHRpcENvc3QiLCJzaG93VGFiIiwiZ2VuZXJhdGVCdXR0b25zIiwiYnV0dG9uIiwiY3JlYXRlQ29sdW1ucyIsInBhcmVudCIsImNvbDEiLCJjb2wyIiwiY29sMyIsIndpZHRoIiwiZGlzcGxheSIsInByZXBlbmQiLCJ0YWJzQ29udGFpbmVyIiwicHJvZHVjdGlvbkNvbnRhaW5lciIsImV4cGVyaW1lbnRDb250YWluZXIiLCJwb25kZXJDb250YWluZXIiLCJleHBlcmltZW50Q29sdW1ucyIsInBvbmRlckNvbHVtbnMiLCJwcm9kdWN0aW9uQ29sdW1uSW5kZXgiLCJleHBlcmltZW50Q29sdW1uSW5kZXgiLCJwb25kZXJDb2x1bW5JbmRleCIsImJ0biIsImJ1dHRvbkVsZW1lbnQiLCJpZCIsImNsYXNzIiwic3BsaXQiLCJ0b29sdGlwRWZmZWN0IiwidW5sb2NrIiwiZGF0YV9idWlsZGluZyIsImNyYWZ0ZWRSZXNvdXJjZSIsImZpbmQiLCJ0b29sdGlwQ29zdCIsInRhYiIsImdyaWRDb2x1bW4iLCJyZXF1aXJlbWVudCIsImVyciIsInBvc3NpYmxlUmVzb3VyY2VzIiwicG9zc2libGVDcmFmdGVkUmVzb3VyY2VzIiwiZ2V0UmFuZG9tTnVtYmVyIiwiZ2V0UmFuZG9tRW1vamkiLCJyYW5nZXMiLCJzdGFydCIsImVuZCIsInJhbmRvbVJhbmdlIiwicmFuZG9tVW5pY29kZSIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJhZGplY3RpdmVzIiwiYnVpbGRpbmdOYW1lcyIsIm5vdW5zIiwidmVyYnMiLCJwcmVwb3NpdGlvbnMiLCJjb25qdW5jdGlvbnMiLCJnZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nIiwicmFuZG9tTmFtZSIsInJhbmRvbUFkamVjdGl2ZSIsInJhbmRvbUJ1aWxkaW5nTmFtZSIsImdlbmVyYXRlQnVpbGRpbmdOYW1lIiwicmFuZG9tRGVzY3JpcHRpb24iLCJyYW5kb21BZGplY3RpdmUyIiwicmFuZG9tTm91biIsInJhbmRvbVZlcmIiLCJyYW5kb21QcmVwb3NpdGlvbiIsInJhbmRvbUNvbmp1bmN0aW9uIiwiZGVzY3JpcHRpb24iLCJnZW5lcmF0ZUJ1aWxkaW5nRGVzY3JpcHRpb24iLCJudW1SZXNvdXJjZXMiLCJyYW5kb21Db3N0cyIsIm51bUNyYWZ0ZWRSZXNvdXJjZXMiLCJyYW5kb21FZmZlY3RzIiwibnVtRWZmZWN0cyIsInJhbmRvbVJlc291cmNlIiwicmFuZG9tRWZmZWN0VmFsdWUiLCJyYW5kb21Cb29zdHMiLCJudW1Cb29zdHMiLCJyYW5kb21Cb29zdFZhbHVlIiwibmFtZSIsImdldENyYWZ0ZWRSZXNvdXJjZSIsInRvTG93ZXJDYXNlIiwiaXNSZXNvdXJjZSIsImFsbFZpc2libGVCdXR0b25zIiwiU2V0IiwiZ2V0TWF4IiwiYmFzZU1heCIsIkluZmluaXR5IiwiY2FsY0NyYWZ0Qm9udXMiLCJpc0J1dHRvbklkVmlzaWJsZSIsImhhcyIsInNldFZpc2libGVCdXR0b24iLCJjbGVhclNpZGViYXIiLCJ0cmlnZ2VyRmxvYXRVcFRleHQiLCJqb2JDb3VudHMiLCJqb2JzVGFiIiwiZ2V0VG90YWxKb2JzIiwiam9iRGl2IiwiZGVjcmVtZW50RGl2Iiwiam9iTmFtZVNwYW4iLCJpbmNyZW1lbnREaXYiLCJldmVudCIsImpvYlR5cGUiLCJjbG9zZXN0IiwieCIsInBhZ2VYIiwieSIsInBhZ2VZIiwic2hpZnRLZXkiLCJkaWZmZXJlbmNlIiwiY3RybEtleSIsImRpc3RyaWJ1dGVXb3JrZXJzIiwidXBkYXRlRGlzcGxheSIsIm51bVdvcmtlcnMiLCJ3b3JrZXJzRGlzdHJpYnV0aW9uIiwiTWFwIiwidG90YWxXb3JrZXJzIiwibnVtYmVyT2ZSZXNvdXJjZXMiLCJwZXJSZXNvdXJjZSIsInNldCIsIm1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2UiLCJyZW1haW5pbmdXb3JrZXJzIiwiZ2V0IiwiYWZmZWN0ZWRSZXNvdXJjZSIsImpvYkJ1dHRvbiIsInJlc291cmNlRGlzcGxheSIsImpvYkJ1dHRvblJlY3QiLCJyZXNvdXJjZVJlY3QiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvcGFjaXR5Iiwic2Nyb2xsWCIsInNjcm9sbFkiLCJlYXNpbmciLCJvbmZpbmlzaCIsInRoaXNKb2JCdXR0b24iLCJqb2JFbGVtZW50IiwiY29ubmVjdGlvbnMiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiZHJhd0xpbmUiLCJzdGFydEVsZW1lbnQiLCJlbmRYIiwiZW5kWSIsInJlY3QiLCJzdGFydFgiLCJzdGFydFkiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJjb250ZXh0IiwiZnJvbVgiLCJmcm9tWSIsInRvWCIsInRvWSIsInJhZGl1cyIsImFuZ2xlIiwieF9jZW50ZXIiLCJ5X2NlbnRlciIsImF0YW4yIiwiY29zIiwic2luIiwiUEkiLCJjbG9zZVBhdGgiLCJkcmF3QXJyb3doZWFkIiwic3dpdGNoSm9iIiwib2xkSm9iSWQiLCJuZXdKb2JJZCIsIndvcmtlcnMiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjbGVhckpvYkFzc2lnbm1lbnRzIiwiY2xlYXJSZWN0IiwicmVhc3NpZ25Kb2JzQmFzZWRPblJlc291cmNlcyIsInVuZGVmaW5lZCIsImRhdGFKb2IiLCJvbGRJZCIsIm5ld0lkIiwibWF4ZWRPdXQiLCJyZXNvdXJjZUFycmF5IiwiZHJhd0FsbENvbm5lY3Rpb25zIiwib2xkQnV0dG9uIiwibmV3QnV0dG9uIiwibmV3WCIsIm5ld1kiLCJvZmZzZXRUb3AiLCJzZXRDb25uZWN0aW9ucyIsIm5ld0Nvbm5lY3Rpb25zIiwiZ2V0Q29ubmVjdGlvbnMiLCJyZXNldEFsbEpvYnMiLCJ3YXRlciIsImFsbCIsImdldEJ1aWxkaW5nQ291bnQiLCJnZXRCb29zdCIsInJlc2V0QnVpbGRpbmdzIiwiaGlkZSIsImNyYWZ0ZWRPbmNlIiwicmVxdWlyZWRTdGFnZSIsInRvb2x0aXBjb3N0IiwiZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCIsImdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnIiwiY29uZmlnIiwiayIsInJlc2V0Q3JhZnRlZFJlc291cmNlcyIsInBlcmtzIiwidG9Sb21hbiIsInJvbWFuTnVtZXJhbHMiLCJudW1lcmFsIiwicmVzdWx0IiwiYWRkUG9uZGVycyIsInJlc2V0UG9uZGVycyIsInByZXN0aWdlIiwicHJlcyIsImlzVmlzaWJsZSIsImdldFJlc291cmNlQ29uZmlnQnlJZCIsInJlc2V0UmVzb3VyY2VzIiwiZXhwIiwibWFzb25yeSIsIm5lZWRUb29scyIsImNhcnBlbnRyeSIsInRoaW5raW5nIiwiZmFybWluZyIsImZpc2hpbmciLCJodW50aW5nIiwic2F2ZUdhbWUiLCJsb2FkR2FtZSIsImFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMiLCJjcmFmdEFsbFJlc291cmNlcyIsImNyYWZ0UmVzb3VyY2UiLCJ1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMiLCJzZXRNYXRlcmlhbCIsInNlbGVjdEFiaWxpdHkiLCJyZXNldFBlcmtzIiwibWFrZVZpc2libGUiLCJ1cGRhdGVCdXR0b25WaXNpYmlsaXR5IiwiZ2VuZXJhdGVQb25kZXJCdXR0b25zIiwiYWRkVG9vbCIsInJlc2V0U3RhZ2VzIiwiaW5pdGlhbGl6ZVJlc291cmNlVGFncyIsInVwZGF0ZVNpZGViYXIiLCJ1cGRhdGVEaXNwbGF5VmFsdWUiLCJ1cGRhdGVCb3VuY2VBbmltYXRpb24iLCJ1cGRhdGVUb29sdGlwIiwiaGlkZVRvb2x0aXAiLCJnZXRDdXJyZW50VGFiIiwiaW5pdGlhbGl6ZUFwcCIsInRvb2xzVG9TdGFnZXMiLCJ2aXNpYmlsaXR5UnVsZXMiLCJjb25kaXRpb24iLCJhY3Rpb24iLCJsb2NhdGlvbiIsImF1ZGlvRmlsZXMiLCJjdXJyZW50QXVkaW8iLCJ0aW1lb3V0SWQiLCJwbGF5UmFuZG9tVHJhY2siLCJjdXJyZW50VGltZSIsInJhbmRvbUluZGV4IiwiY2xlYXJUaW1lb3V0Iiwic2lsZW5jZUR1cmF0aW9uIiwib25lbmRlZCIsInNjaGVkdWxlTmV4dFRyYWNrIiwidG9nZ2xlT3B0aW9ucyIsInRvZ2dsZSIsImlzRGFyayIsImZhZGVUb0JsYWNrIiwib3ZlcmxheSIsIm92ZXJsYXlUZXh0Iiwib3ZlcmxheUJ1dHRvbiIsIm1pbGxpc2Vjb25kc19wZXJfZnJhbWUiLCJsYXN0X3RpbWUiLCJ0b3RhbF90aW1lIiwiYWNjdW11bGF0ZWRfbGFnIiwibG9vcCIsImN1cnJlbnRfdGltZSIsIm5vcm1hbFJhdGUiLCJ0aW1lX3NpbmNlX2xhc3Rfc2F2ZSIsInRpbWVfc2luY2VfbWFudWZhdHVyZSIsInNhdmVfcmF0ZSIsIm1hbnVmYWN0dXJlX3JhdGUiLCJydWxlIiwic3BsaWNlIiwidG9vbCIsImN1cnJlbnRIb3ZlckJ1dHRvbiIsInJlbmRlciIsIm9wdGlvbnNNZW51Iiwib25iZWZvcmV1bmxvYWQiLCJjdXJyZW50bHlEZWxldGluZyIsImFwcCIsImFwaUtleSIsImF1dGhEb21haW4iLCJwcm9qZWN0SWQiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJmYWN0b3J5QnV0dG9ucyIsInVwZ3JhZGVCdWxrQnV0dG9uIiwibWFrZUZhY3RvcnlCdXR0b25zIiwidGFyZ2V0IiwibWF0Y2hlcyIsImJ1aWxkaW5nU3RyaW5nIiwidW5sb2NrQXR0ciIsImNhblVubG9jayIsInJlbG9hZCIsImdldFJLZXlGcm9tSUQiLCJjciIsImdldENSS2V5RnJvbUlEIiwiZmlzaEF1ZGlvIiwiZWF0RmlzaCIsImNvbmZpcm0iLCJkZWxldGVHYW1lIiwiZGFya01vZGVUb2dnbGUiLCJpc2VrYWkiLCJlIiwib3ZlcmxheUJhY2tCdXR0b24iLCJodXNrc0R1ZSIsImxhc3RCdWlsZGluZyIsInJhbmRvbUJ1aWxkaW5nIiwiaXNla2FpQXVkaW8iLCJvbGRIdXNrVmFsdWUiLCJodXNrVmFsdWUiLCJidXR0b25Db250YWluZXIiLCJncmlkUm93IiwibiIsImEiLCJuZXh0Rmlib25hY2NpIiwicHJldmVudERlZmF1bHQiLCJwcmV2Rmlib25hY2NpIiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsInVwZGF0ZVVJIiwicmVzb3VyY2VEaXYiLCJzZXRUb3RhbFRpbWUiLCJnZXRNZXNzYWdlIiwic2V0U3RhZ2UiLCJzdGFnZSIsIm15UGVya3MiLCJwZXJrTmFtZSIsImFkZFBlcmsiLCJhYmlsaXR5TmFtZSIsImdldFBlcmtGcm9tVGllciIsInRpZXJOdW0iLCJnZXRBbGxQZXJrcyIsImdlbmVyYXRlVW5pcXVlSUQiLCJEYXRlIiwibm93Iiwic3Vic3RyIiwidW5sb2NrSWQiLCJ1bmxvY2tLZXkiLCJwb25kZXJPYmplY3RzIiwicG9uZGVyS2V5IiwicG9uZGVyT2JqIiwiYnV0dG9uS2V5IiwibWF4Q2xvbmVzIiwibXlCdXR0b24iLCJuZXdUZXh0IiwiZWZmZWN0U3RyaW5nIiwiYWJicmV2aWF0ZU51bWJlciIsInVwZGF0ZVNraWxscyIsInJlc291cmNlc0NvbnRhaW5lciIsIk51bWJlciIsImlzTmFOIiwiY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uIiwiY29udGFpbmVyIiwiZW1vamlEaXNwbGF5IiwidXBkYXRlRW1vamlEaXNwbGF5IiwiZW1vamlTdHIiLCJyZXBlYXQiLCJhZGp1c3RGb250U2l6ZSIsImNyYWZ0UmVzb3VyY2VRdWFudGl0eSIsInNldE1heCIsInN1ZmZpY2llbnRSZXNvdXJjZXMiLCJjcmFmdEJvbnVzIiwiY3JhZnRPbmUiLCJjYWxjU2Vjb25kc1JlbWFpbmluZyIsIm5lZWRlZCIsInJhdGUiLCJyYXRlRWxlbWVudCIsImdldEFsbFRvb2xzIiwiZ2V0QWxsU3RhZ2VzIiwicG9wdWxhdGVTa2lsbHNUYWJsZSIsInNhdmUiLCJ0b29scyIsInN0YWdlcyIsInVubG9ja3MiLCJqb2JzIiwibWVzc2FnZSIsImZhY3RvcmllcyIsIm5ld0J1aWxkaW5ncyIsIml0ZW0iLCJ1IiwibGFzdE5ld0J1aWxkaW5nIiwiaHRtbFN0cmluZyIsIm1lc3NhZ2VUb29sdGlwIiwibmVlZHMiLCJnZXRNZXNzYWdlVG9vbHRpcCIsIm1lc3NhZ2VBcnJheSIsImV4dHJhY3RUZXh0RnJvbUhUTUwiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsIm5ld1VpZCIsInBsYXllclVpZCIsInNhdmVnYW1lIiwidmFsdWVPZiIsInVuaW9uIiwicyIsImxvYWRCdWlsZGluZ3MiLCJ0aW1lX2RpZmZlcmVuY2UiLCJpbmMiLCJzaXplIiwiam9iIiwic2VsZWN0Q29ycmVjdFBlcmtCdXR0b24iLCJzZWxlY3RlZEJ1dHRvbiIsInJlbW92ZUF0dHJpYnV0ZSIsImNvbnRlbnQiLCJ0YWJDb250YWluZXJzIiwidGFiTmFtZSIsInByZXZUYWIiLCJwcmV2VGFiRWxlbWVudCIsInRhYnMiLCJhY3RpdmVDb250ZW50IiwidGFiU3RyaW5nIiwiYWN0aXZlVGFiQnV0dG9uIiwic2hvdWxkSGlkZSIsImZvcm1hdCIsInVuaXQiLCJyb3VuZFRvRGVjaW1hbHMiLCJudW1iZXIiLCJkZWNpbWFscyIsImZhY3RvciIsImNyZWF0ZVJlc291cmNlVGFnIiwiZ3JvdXBOYW1lIiwiZ3JvdXBDb250YWluZXIiLCJ0b2dnbGVCdXR0b24iLCJvbmNsaWNrIiwiZ3JvdXAiLCJjaGlsZHJlbiIsInRhZ05hbWUiLCJ0b2dnbGVHcm91cFZpc2liaWxpdHkiLCJjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyIiwicmVzb3VyY2VEaXNwbGF5TmFtZSIsInJlc291cmNlRWxlbWVudCIsInJlc291cmNlTmFtZVNwYW4iLCJyZXNvdXJjZVZhbHVlU3BhbiIsInJlc291cmNlUmF0ZVNwYW4iLCJjaGFuZ2VSZXNvdXJjZU9yZGVyIiwicmVzb3VyY2VJZCIsIm5ld09yZGVyIiwib3JkZXIiLCJlbGVtZW50SW5jcmVhc2UiLCJwYXJlbnRFbGVtZW50Iiwid2l0aEdyb3VwcyIsInJlc291cmNlR3JvdXBzIiwic3BlY2lhbCIsImZvb2QiLCJtYXRlcmlhbHMiLCJhZHZhbmNlZCIsIm1ldGFsIiwiY29uc3RydWN0aW9uIiwiZ3JvdXBPZlJlc291cmNlcyIsInJlc291cmNlVG9Ta2lsbE1hcCIsImludmVydFNraWxsc1RvUmVzb3VyY2VzIiwiaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSIsInByb2dyZXNzQmFyIiwidHIiLCJ0ZFByb2dyZXNzIiwic2tpbGxUZXh0IiwiYWJzIiwibGV2ZWx1cCIsInBvcCIsInBsYXllclRvb2xzIiwidWwiLCJsaSIsImNyZWF0ZVRleHROb2RlIiwidXBkYXRlVG9vbFVJIiwiZ2V0VG9vbFZhbHVlRm9yUmVzb3VyY2UiLCJzb3J0ZWRUb29scyIsInNvcnQiLCJyZXNvdXJjZUxpc3QiLCJnb2xkQW1vdW50RWwiLCJidXlSZXNvdXJjZSIsInByaWNlIiwic2VsbFJlc291cmNlIiwiZ2VuZXJhdGVUcmFkZVRhYmxlIiwiZmxvYXRUZXh0IiwiYWxvbmVFbGVtZW50IiwiYnVpbGRpbmdDb3VudCIsImJ1aWxkaW5nTGlzdCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNvbCIsImJ1dHRvbkNvbmZpZyIsInN0YXRlIiwiY3JhZnRlZCIsInJlcVBvbmRlciIsImRlc2MiLCJlZmZlY3QiLCJwYXJzZUFtb3VudCIsImFtb3VudFRleHQiLCJyZWdleCIsIm1hdGNoIiwicHJvY2Vzc2VkU3RyaW5nIiwiZXhlYyIsImNvbG9yQ2xhc3MiLCJzZWNvbmRzUmVtYWluaW5nIiwicHJvY2Vzc01hdGVyaWFscyIsInNob3dUb29sdGlwIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJPIiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiZnVsZmlsbGVkIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiYmluZCIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlUm9vdCI6IiJ9