(()=>{var e,t={3520:(e,t,o)=>{t.GameSimulator=class{constructor(){this.gameState={resources:{clones:0,sticks:0,vines:0,rocks:0,fish:0,wood:0,ponder:0,ore:0,sand:0,wheat:0,freshwater:0,hides:0,clay:0,herbs:0,game:0,husks:0,violence:0,sharprocks:0,rope:0,handle:0,staff:0,fishingrod:0,spear:0,axe:0,pickaxe:0,glass:0,paper:0,gold:0,iron:0,silver:0,bricks:0,bread:0,steel:0,beams:0,crates:0,nails:0,slabs:0,medicine:0,leather:0,concrete:0},maxes:{clones:0,sticks:50,vines:50,rocks:30,fish:10,wood:40,ponder:20,ore:20,sand:20,wheat:20,freshwater:50,hides:50,clay:50,herbs:50,game:50,husks:1e3,violence:100},buildings:{animal_pen:0,bakery:0,barn:0,barracks:0,campfire:0,desk:0,drying_racks:0,fish_traps:0,fishery:0,forge:0,garden:0,grove:0,herbalist_hut:0,hospital:0,house:0,hut:0,irrigation:0,library:0,lumber_yard:0,marketplace:0,military_school:0,mine:0,observatory:0,reservoir:0,rock_role:0,sand_scoop:0,shed:0,shelter:0,stockpile:0,stone_depot:0,stone_quarry:0,tannery:0,teepee:0,telescope:0,tower:0,traps:0,vineyard:0,warehouse:0,water_pump:0,windmill:0,workshop:0},time:0},this.log=[]}buildingsConst=o(5882).buildings;buyBuilding(e){let t={};for(const[o,s]of Object.entries(this.buildingsConst[e].basecost))t[o]=s*Math.pow(this.buildingsConst[e].ratio,this.gameState.buildings[e]);let o=!0;for(let e in t)if(this.gameState.resources[e]<t[e])return void(o=!1);if(o){for(let e in t)this.gameState.resources[e]-=t[e];if(this.gameState.buildings[e]+=1,this.storage.includes(e))for(const[t,o]of Object.entries(this.buildingsConst[e].effects))this.gameState.maxes[t]+=o}}simulateTick(){this.performActions(),this.updateResources(),this.gameState.time+=1,this.logGameState()}housing=["hut","shelter","house","barracks","hospital","teepee"];storage=["shed","stockpile","workshop","warehouse","drying_racks","water_pump","military_school","barn","herbalist_hut","mine","bakery","animal_pen","reservoir","stone_depot"];buildingPriority=[...this.housing,...this.storage];performActions(){for(let e of Object.values(this.buildingPriority))try{this.buyBuilding(e)}catch(t){console.error("Failed to buy",e,t)}}resourcesToGather=["sticks"];updateResources(){for(let[e,t]of Object.entries(this.resourcesToGather)){let e=0;"sticks"!==t&&"vines"!==t&&"wood"!==t&&"rocks"!==t&&"fish"!==t&&"ore"!==t||(e=1),this.gameState.resources[t]+=(e+.25*this.gameState.resources.clones)/this.resourcesToGather.length,Object.keys(this.gameState.maxes).includes(t)&&this.gameState.resources[t]>this.gameState.maxes[t]&&(this.gameState.resources[t]=this.gameState.maxes[t],"vines"===t&&Math.random()>.5&&(this.gameState.resources.rope+=this.gameState.resources.vines/3,this.gameState.resources.vines=0),"wood"===t&&Math.random()>.5&&(this.gameState.resources.paper+=this.gameState.resources.wood/12,this.gameState.resources.wood=0),"ore"===t&&Math.random()>.5&&(Math.random()>.5?(this.gameState.resources.iron+=this.gameState.resources.ore/20,this.gameState.resources.ore=0):(this.gameState.resources.gold+=this.gameState.resources.ore/100,this.gameState.resources.ore=0)),"sand"===t&&Math.random()>.5&&(this.gameState.resources.paper+=this.gameState.resources.sand/10,this.gameState.resources.sand=0),"clay"===t&&Math.random()>.5&&(this.gameState.resources.bricks+=this.gameState.resources.clay/15,this.gameState.resources.clay=0))}this.gameState.resources.sticks>=10&&!this.resourcesToGather.includes("vines")&&(this.resourcesToGather.push("vines"),console.warn(this.resourcesToGather)),this.gameState.resources.vines>=10&&!this.resourcesToGather.includes("rocks")&&(this.resourcesToGather.push("rocks"),console.warn(this.resourcesToGather)),this.gameState.resources.rocks>=10&&!this.resourcesToGather.includes("fish")&&(this.resourcesToGather.push("fish"),console.warn(this.resourcesToGather)),this.gameState.resources.fish>=10&&!this.resourcesToGather.includes("wood")&&(this.resourcesToGather.push("wood"),console.warn(this.resourcesToGather)),this.gameState.resources.wood>=10&&!this.resourcesToGather.includes("ore")&&(this.resourcesToGather.push("ore"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=1&&!this.resourcesToGather.includes("ponder")&&(this.resourcesToGather.push("ponder"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=3&&!this.resourcesToGather.includes("sand")&&(this.resourcesToGather.push("sand"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=4&&!this.resourcesToGather.includes("clay")&&(this.resourcesToGather.push("clay"),console.warn(this.resourcesToGather)),this.gameState.resources.clones=this.gameState.buildings.shelter+this.gameState.buildings.hut+2*this.gameState.buildings.house+3*this.gameState.buildings.hospital+2*this.gameState.buildings.teepee+this.gameState.buildings.barracks}logGameState(){const e=JSON.parse(JSON.stringify(this.gameState));this.log.push({time:this.gameState.time,...e})}runSimulation(e){for(let t=0;t<e;t++)this.simulateTick();this.outputResults()}outputResults(){const e=function(e){const t=Object.keys(e[0].buildings),o=Object.keys(e[0].resources),s=(Object.keys(e[0].maxes),[...Object.keys(e[0]).filter((e=>"buildings"!==e&&"resources"!==e)),...t,...o]),n=[s.join(",")];return e.forEach((e=>{const t=s.map((t=>e.buildings&&e.buildings.hasOwnProperty(t)?e.buildings[t]:e.resources&&e.resources.hasOwnProperty(t)?e.resources[t]:e[t]));n.push(t.join(","))})),n.join("\n")}(this.log),t=new Blob([e],{type:"text/csv"}),o=URL.createObjectURL(t),s=document.createElement("a");s.href=o,s.download="data.csv",s.textContent="Download CSV",document.body.appendChild(s),console.table(this.log)}}},1621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},5098:e=>{let t=.5;function o(){return t}let s=.5;function n(){return s}e.exports={setMusicVolume:function(e){t=e},getMusicVolume:o,setSfxVolume:function(e){s=e},getSfxVolume:n,playSound:function(e,t){const s=new Audio(e);s.volume=t?o():n(),s.play()}}},5151:(e,t,o)=>{const{buildings:s,isPopBuilding:n}=o(5882),{increaseMaterial:i,increaseMax:r}=o(9594),{updateTotal:a}=o(5150),{hasPerk:c}=o(134),{getMaterial:l}=o(3924),{passedStage:u}=o(8751),{recalcMaxClones:d}=o(6995),{updateBuildingButtonCount:f}=o(2607),{recalculateBuildingCost:h}=o(8022),{canBuyBuilding:p}=o(5023),{isPondered:g}=o(4369),{updateBuildingList:m}=o(2831),{capitalizeFirst:b}=o(6681),{ponders:y}=o(6397),{logEvent:v,getAnalytics:k}=o(9013),{getPlayerUid:w}=o(9476),{triggerFloatUpText:x}=o(8727),{makeVisible:S}=o(1123);function C(e){console.log("Buying building "+e);const t=s[e];if(p(e)){u("buildings")||S("buildings"),t.count++;for(const e in t.cost)i(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))r(e,o),"clones"===e&&(d(),a());for(const[e,o]of Object.entries(t.boost)){const t=document.getElementById(`${e}IncreaseRate`);if(!t)continue;const o=t.getBoundingClientRect();x(o.right,o.bottom,"+speed","aqua")}f(e,t.count,JSON.parse(JSON.stringify(t.emoji))),h(e),m(),v(k(),"building_purchase",{building_name:e,user_id:w()})}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){try{const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e){return function(){const t=Object.entries(e).every((([e,t])=>l(e)>=Math.floor(t/2)));return u("clones")&&t}}(o.cost);return console.log("create building button:",o,JSON.parse(JSON.stringify(o.emoji))),{class:"tooltip "+e,tab:"production",text:`${JSON.parse(JSON.stringify(o.emoji))} ${b(e)} (${o.count})`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}}catch(o){console.error("Could not create building button for",e,t,o)}},buyMaxBuildings:function(e){let t=0;for(s[e];p(e);)C(e),++t;return v(k(),"building_purchase_max",{building_name:e,user_id:w(),count:t}),t},buyBuilding:C,generateEffectString:function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));for(const[t,o]of Object.entries(y))g(t)&&t.startsWith("effectiveBuildings")&&(e*=1.03);t.push(`+${e.toFixed(2)}% ${o} production`)}return t.join("<br>")},updateBuildingList:m}},8121:(e,t,o)=>{const{resources:s}=o(2587),{skills:n}=o(2324),{getWorkers:i}=o(5150),{hasPerk:r}=o(134),{isPondered:a}=o(4369),{getFactoryProduction:c,getFactoryConsumption:l}=o(1051),{hasPrestige:u,getLevelOfPrestige:d}=o(6425),{getMaterial:f}=o(3924),{ponders:h}=o(6397),{canCraft:p}=o(7064),g={Lumberjack:["wood","sticks"],Miner:["rocks","ore"],Botanist:["vines","herbs","wheat"]},m={gathering:["gatheringBoost"],masonry:["masonryBoost"],carpentry:["carpentryBoost"],thinking:["thinkingBoost"],farming:["farmingBoost"],fishing:["fishingBoost"],hunting:["huntingBoost"]},b={wood:"axe",ore:"pickaxe",fish:"fishingrod",game:"spear",ponder:"paper",sticks:"staff"};t.calcIncrease=function(e,t){var y=0;if(a("eatBread")&&f("bread")>0&&"bread"===e)return parseFloat((-1*t/1e3).toFixed(3));const v=o(5882).buildings;"clones"===e&&a("autoClone")&&(y=1),s[e]&&s[e].isGetting&&(y+=1),y+=(r("Leader")?.375:.25)*i(e)||0,u("cloneBoost")&&i(e)>0&&(y*=1.05*i(e)*d("cloneBoost")),y=function(e,t){for(const[o,s]of Object.entries(g))s.includes(t)&&r(o)&&(e*=1.75);return e}(y,e),y=function(e,t){for(const[o,s]of Object.entries(m))if(n[o].affectedResources.includes(t)){s.forEach((t=>{u(t)&&(e*=1.1*d(t))}));let t=1.06,i=1+(Math.pow(t,n[o].level)-1)/100;e*=i}return e}(y,e);for(const t of Object.keys(v)){const s=o(5882).getBoost(t,e);if(s){var k=Math.pow(s,v[t].count);for(const[e,t]of Object.entries(h))a(e)&&e.startsWith("effectiveBuildings")&&(k*=1.03);y*=k}}return a("eatBread")&&f("bread")>0&&"bread"!==e&&(y*=1.1),y=function(e,t){const o=b[t];return o&&f(o)>10&&(e*=1+Math.log10(f(o)/10)),e}(y=function(e,t){for(const[o,s]of Object.entries(h))a(o)&&(o.startsWith("fasterResourceGain")&&(e*=1.05),o.startsWith("fasterPonder")&&"ponder"===t&&(e*=1.05));return e}(y,e),e),f("husks")>10&&(y*=1+Math.log(f("husks")/10)),y=Math.sqrt(y),y+=p(e)?c(e):0,y-=l(e),parseFloat((y*t/1e3).toFixed(3))}},5023:(e,t,o)=>{const{resources:s}=o(2587),{getMaterial:n}=o(3924),{passedStage:i}=o(8751),{getMax:r}=o(8078);function a(e){for(const t in e)if(e[t]>r(t))return!1;return!0}t.canBuyBuilding=function(e){let t=!0;const r=o(5882).buildings[e];for(const e in r.cost)if(r.cost[e]>n(e,s)){t=!1;break}return r.effects&&r.effects.clones&&!i("clone")&&(t=!1),t},t.canStoreBuilding=function(e){return a(o(5882).buildings[e].cost)},t.canAffordCost=a},7064:(e,t,o)=>{const{craftedResources:s}=o(3371),{getMaterial:n}=o(3924);t.canCraft=function(e){if(!s[e])return!1;let t=s[e].cost;for(const[e,o]of Object.entries(t))if(n(e)<o)return!1;return!0}},6681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},7169:(e,t)=>{const o=document.getElementById("message");t.messageElement=o,t.changeMessage=function(e,t,s="You feel peckish for some seafood"){null===s&&(s="You feel peckish for some seafood");const n=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="${s}" tooltipcost="Click to clone yourself.">${t}</span>`);o.innerHTML=n}},4856:(e,t,o)=>{const{getMaterial:s}=o(3924),{increaseMaterial:n}=o(9594),{setMaterial:i}=o(3671),r={husks:{probability:.05,quantity:1},nails:{probability:.1,quantity:50},slabs:{probability:.2,quantity:50},beams:{probability:.1,quantity:60},axe:{probability:.15,quantity:5},spear:{probability:1,quantity:5},gold:{probability:.1,quantity:10},iron:{probability:.15,quantity:50},silver:{probability:.05,quantity:20},steel:{probability:.1,quantity:30},bricks:{probability:.15,quantity:80}};let a={};function c(){return a}function l(){let e={};for(const t in r)if(Math.random()<r[t].probability){const o=Math.floor(r[t].quantity*(.4*Math.random()+.8));o>0&&(e[t]=o)}return a=e,console.log(a),e}const u=document.getElementById("arena");function d(e,t){for(let o=0;o<t;o++){const t=document.createElement("div");t.className=`ball ${e}`,t.style.left=("player"===e?10:90)+"%",t.style.top=10+30*o+"px",u.appendChild(t),"player"===e?f.push(t):h.push(t)}}let f=[],h=[],p=[];const g=3e3;function m(){document.querySelectorAll(".ball").forEach((e=>{const t=e.classList.contains("player")?u.offsetWidth:-u.offsetWidth;p.push(e.animate([{transform:`translateX(${t}px)`}],{duration:g,fill:"none"}).finished.then((()=>{e.remove()})))})),k(),setTimeout((()=>{const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0!==e&&0!==t){for(const e of document.querySelectorAll(".ball"))e.remove();d("player",e),d("enemy",t),m()}}),g-100)}let b=!1;function y(){if(b)return;const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0===e&&t>0?S="enemy":0===t&&e>0&&(S="player"),null!==S){const e=document.getElementById("combatResult");if(e.textContent="player"===S?"You won!":"enemy"===S?"The Enemy won!":"It's a draw! Huh? That's not supposed to happen!",i("violence",0),setTimeout((()=>{x.disabled=!1}),g/2),"player"===S){b=!0;let t=1;"aggressive"===q()&&(t=.75),"careful"===q()&&(t=1.25);for(const[o,s]of Object.entries(a))n(o,s*t),e.innerHTML+=`<br>+${s*t} ${o}`;l()}return console.log("battle result was",S),function(e){if(null===e)return T;e?T*=1.3:T/=1.1,T<200&&(T=200)}(null===S||"player"===S),D(),!0}return!1}function v(e,t){const o=e.getBoundingClientRect(),s=t.getBoundingClientRect();return!(o.right<s.left||o.left>s.right||o.bottom<s.top||o.top>s.bottom)}function k(){!function(e,t){for(let n=0;n<e.length;n++)for(let e=0;e<t.length;e++)v(f[n],h[e])&&(o=f[n],s=h[e],Math.random()<1/(1+Math.pow(10,(M()-B())/C))?s.remove():o.remove());var o,s}(f,h),y()||b||requestAnimationFrame(k)}function w(){const e=B(),t=M(),o=Math.ceil(e/12),s=Math.ceil(t/12),n=Math.max(o,s),i=Math.floor(e/n),r=Math.floor(t/n);return document.getElementById("approximateBall").textContent=n.toString(),[i,r]}const x=document.querySelector("button#startCombat");let S=null;const C=200;function B(){let e=s("violence")+s("spear")+s("medicine");return"aggressive"===q()?e*=1.2:"careful"===q()&&(e*=.8),e}let T=400;function M(){return T}const j=document.getElementById("playerMight"),E=document.getElementById("enemyMight");function A(){const e=B(),t=M(),o=1/(1+Math.pow(10,(t-e)/C));j.textContent=e.toFixed(0),j.setAttribute("tooltipdesc",`${s("violence").toFixed(0)} violence + ${s("spear").toFixed(0)} spears + ${s("medicine").toFixed(0)} medicine`),E.textContent=t.toFixed(0);const n=document.getElementById("chanceToWin");return n.textContent=(100*o).toFixed(1)+"%",n.style.color=`hsl(${(120*o).toString(10)},100%,50%)`,o}let $="balanced";function q(){return $}const O=document.querySelectorAll("button.stance");function P(e){console.log("switch stance to ",e),O.forEach((e=>{e.disabled=!1})),document.querySelector(`#${e}Stance`).disabled=!0,function(e){$=e}(e),D()}function D(){Object.keys(c()).length<1&&l();const e=document.getElementById("lootList");e.innerHTML="";for(const[t,o]of Object.entries(c()))e.innerHTML+=`<span>${t} (${o})</span> <br>`;E.textContent=M().toString(),w(),A()}window.switchStance=P,e.exports={combat:function(){S=null;for(const e of document.querySelectorAll(".ball"))e.remove();let[e,t]=w();d("player",e),d("enemy",t),document.getElementById("combatResult").textContent="",x.disabled=!0,b=!1,m()},calculateWinChance:A,refreshValues:D,pauseAnimation:function(){p.forEach((e=>{e.pause()}))},battleResult:S,simulateBattle:function(){S=function(){const e=B(),t=M(),o=1/(1+Math.pow(10,(t-e)/C));return Math.random()<o?"player":"enemy"}(),y()},switchStance:P,getCurrEnemyMight:M,setEnemyMight:function(e){T=e}}},1051:(e,t,o)=>{const{getSfxVolume:s,playSound:n}=o(5098),{canCraft:i}=o(7064),{getMaterial:r}=o(3924),{craftedResources:a}=o(3371),{resources:c}=o(2587);var l={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},u=[];Object.keys(c).forEach((e=>u.push(e))),Object.keys(a).forEach((e=>u.push(e))),console.log("All materials: ",u);let d={},f={};function h(e,t){e&&"none"!==e&&(d[e]--,Array.from(a[e].cost).forEach((e=>{f[e.resource]-=e.amount}))),d[t]?d[t]++:d[t]=1,a[t]&&Array.from(a[t].cost).forEach((e=>{f[e.resource]+=e.amount}))}function p(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const s=document.createElement("span");s.classList.add("factoryCost");const i=document.createElement("select");Object.keys(l).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,i.appendChild(t)})),i.setAttribute("data-produced","none"),i.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=i.value;n("./audio/factoryoption.wav"),h(e,t),this.setAttribute("data-produced",t),t&&"none"!==t&&(document.querySelector(`#resource-${t}`).style.color="thistle",s.innerHTML="",s.innerHTML+=`${o(9594).generateTooltipCost(a[i.value].cost)}`)}));const r=document.createElement("span");return r.innerHTML="&#8594;",t.appendChild(s),t.appendChild(r),t.appendChild(i),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.selected=!0,e.appendChild(o)}(i),e.appendChild(t),t}var g=50;e.exports={createFactoryDiv:p,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,s=l[t];s&&t&&i(t)&&function(e,t){console.trace();let s=[];e.forEach((e=>s.push(r(e)/a[t].cost[e])));let n=Math.min(...s);console.log(n,...s),n*=1,o(9594).craftResourceQuantity(t,n)}(s,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");r("silver")<g?console.log("Not enough silver!"):(o(9594).increaseMaterial("silver",-g),p(),n("./audio/factorybuild.wav"),g*=1.2,e.setAttribute("tooltipCost",`${g.toFixed(0)} silver`))},allMaterials:u,getFactoryProduction:function(e){let t=d[e];return(Number.isNaN(t)||void 0===t)&&(t=0),t},getFactoryConsumption:function(e){let t=f[e];return void 0===t&&(t=0),t},loadFactory:function(e){console.log("loading a factory for ",e);let t=p();if(e)try{t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(9594).generateTooltipCost(a[e].cost)}`}catch(e){console.warn(e)}const s=document.getElementById("buyFactoryButton");s&&(s.setAttribute("tooltipCost",`${g.toFixed(0)} silver`),h("none",e)),g*=1.2},activeFactoriesProducing:d,addProducing:function(e){d[e]?d[e]++:d[e]=1},addConsuming:function(e,t){f[e]?f[e]+=t:f[e]=t},removeConsuming:function(e,t){f[e]-=t,f[e]<0&&(f[e]=0)},removeProducing:function(e){d[e]--,d[e]<0&&(f[e]=0)}}},7531:(e,t)=>{t.fitCharToCell=function(e,t,o,s){const n=document.createElement("span");n.textContent=e,n.style.fontSize=`${s}px`,n.style.position="absolute",n.style.whiteSpace="nowrap",n.style.visibility="hidden",document.body.appendChild(n);let i=s;for(;n.offsetWidth<t&&n.offsetHeight<o&&(i++,n.style.fontSize=`${i}px`,!(i>=1e3)););return document.body.removeChild(n),i}},215:(e,t,o)=>{const{resources:s}=o(2587),{capitalizeFirst:n}=o(6681),{getSfxVolume:i}=o(5098),{updateDisplayValue:r}=o(5453),a=document.querySelector("#resources");const c=document.querySelector("#emojiGatherDisplay");t.toggleResource=function(e){const t=new Audio("./audio/gather.wav");t.volume=i(),t.play();const o=s[e],l=document.querySelector("#resources").querySelector("#resource-"+e),u=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));c.textContent="𓀟",o.isGetting?(o.isGetting=!1,u.classList.remove("gathering"),u.textContent=o.defaultText,l&&(l.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(s)){t.isGetting=!1;const o=document.querySelector("#gather"+n(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const s=a.querySelector("#resource-"+e);s&&(s.style.fontWeight="normal"),r(e)}}(),o.isGetting=!0,u.textContent=o.activeText,l&&(l.style.fontWeight="bold"),c.textContent=o.emoji,console.log(o.emoji),u.classList.add("gathering"))}},429:(e,t,o)=>{const{craftedResources:s,getCraftedResourceConfigById:n}=o(3371),{buildings:i}=o(5882),{buttons:r}=o(2054),{generateTooltipCost:a}=o(9594),{createBuildingButton:c}=o(5151),{hasPerk:l}=o(134),{recalculateBuildingCost:u}=o(8022),{showTab:d}=o(2093),{updateDisplayValue:f}=o(5453),{addProducing:h,removeProducing:p,addConsuming:g,removeConsuming:m}=o(1051);function b(e,t){const o=document.createElement("button");return o.id=t,o.className=e.class,o.textContent=e.text.split("_").join(" "),e.tooltipDesc&&o.setAttribute("data-tooltip-desc",e.tooltipDesc),e.tooltipEffect&&o.setAttribute("data-tooltip-effect",e.tooltipEffect),o.setAttribute("unlock",e.unlock),o.setAttribute("data_building",e.data_building),o}t.generateButtons=function(){console.log("Generating buttons"),console.trace();for(let e in i){const t=c(e,i);r[e]=t}const e=document.getElementById("tabs"),t=document.getElementById("productionTab"),o=document.getElementById("experimentTab").querySelector(".button-columns"),s=document.getElementById("ponderTab"),n=function(e){const t=[];for(let o=0;o<3;o++){const o=document.createElement("div");o.style.width="33.33%",o.style.display="inline-block",o.classList.add("visible"),e.prepend(o),t.push(o)}return t}(o);let a=1,l=0,f=1;for(let o in r){const c=r[o],h=b(c,o);h.setAttribute("data-tooltip-cost",c.tooltipCost),c.showTab&&h.addEventListener("click",(()=>{d(c.showTab),console.log("Switching to tab: "+c.showTab)})),"production"===c.tab?(h.style.gridColumn=a.toString(),a=a%4+1,t.appendChild(h)):"experiment"===c.tab?(n[l].appendChild(h),l=(l+1)%3):"tabs"===c.tab?e.appendChild(h):"ponder"===c.tab?(h.style.gridColumn=f.toString(),f=f%4+1,s.appendChild(h)):"job"===c.tab||document.getElementById(c.tab).appendChild(c),Object.keys(i).find((e=>e===o))&&u(o);try{c.requirement()||(h.style.display="none")}catch(e){}}}},6900:(e,t,o)=>{const{capitalizeFirst:s}=o(6681),{craftedResources:n}=o(3371),{resources:i}=o(2587),r=Object.keys(i).filter((e=>"husks"!==e)),a=Object.keys(n);function c(e,t){return Math.random()*(t-e)+e}function l(){const e=[{start:78107,end:78142},{start:78307,end:78367}],t=e[Math.floor(Math.random()*e.length)],o=Math.floor(c(t.start,t.end+1));return String.fromCodePoint(o)}const u=["bustling","majestic","ancient","elegant","hidden","glorious","enchanted","whispering","mystical","luminous","radiant","spectacular","dazzling","serenade","celestial","vibrant","imposing","venerable","immaculate","enigmatic","harmonious","ethereal","resplendent","tranquil","serene","awe-inspiring","peaceful","picturesque","captivating"],d=["Sanctuary","Citadel","Haven","Monastery","Outpost","Observatory","Stronghold","Palace","Temple","Manor","Keep","Chateau","Acropolis","Cathedral","Villa","Fortress","Bastion","Lighthouse","Castle","Coliseum","Pyramid","Mansion","Estate","Museum","Tower","Hall","Library","Gallery","Bazaar"],f=["sanctuary","citadel","haven","monastery","outpost","observatory","stronghold","palace","temple","manor"],h=["provides","enhances","imbues","radiates","embodies","inspires","evokes","exudes","bestows","creates"],p=["with","through","amidst","beneath","above","alongside"],g=["and","while","as","although","yet"];function m(e,t){return e<t?t:Math.round(e/t)*t}t.generateRandomBuilding=function(){const e=function(){const e=u[Math.floor(Math.random()*u.length)],t=d[Math.floor(Math.random()*d.length)];return`${s(e)} ${t}`}(),t=function(){const e=u[Math.floor(Math.random()*u.length)],t=u[Math.floor(Math.random()*u.length)],o=f[Math.floor(Math.random()*f.length)],n=h[Math.floor(Math.random()*h.length)],i=p[Math.floor(Math.random()*p.length)],r=g[Math.floor(Math.random()*g.length)];let a="";switch(Math.floor(6*Math.random())){case 0:a=`${e} ${o} that ${n} an aura of splendor.`;break;case 1:a=`${s(i)} its ${e} appearance, the ${o} ${n} an aura of ${t}.`;break;case 2:a=`${s(e)} ${o} ${n} gracefully, exuding an enchanting atmosphere.`;break;case 3:a=`The ${o} is ${e} and ${n} with a sense of wonder.`;break;case 4:a=`Amidst the ${e} surroundings, the ${o} ${n} tranquility and beauty.`;break;case 5:a=`An ${e} ${o} that ${n} an aura of charm ${r} mystique.`;break;default:a=`${s(e)} ${o} that ${n} an aura of splendor.`}return a}(),o=c(1,3),n={};for(let e=0;e<o;e++)n[r[Math.floor(Math.random()*r.length)]]=m(Math.floor(100*Math.random()*(5-o)),10);const i=c(0,1);for(let e=0;e<i;e++)n[a[Math.floor(Math.random()*a.length)]]=m(Math.floor(50*Math.random()),5);const b={},y=c(0,1);for(let e=0;e<y;e++){const e=r[Math.floor(Math.random()*r.length)];let t=Math.floor(c(30,200));"clones"===e?t=Math.floor(c(1,3)):"husks"===e&&(t=Math.floor(c(1,10))),b[e]=m(t,10)}const v={},k=c(0===y?1:0,1);for(let e=0;e<k;e++){const e=r[Math.floor(Math.random()*r.length)],t=c(1.01,1.2);v[e]=m(t,5)}return{name:e,description:t,basecost:n,cost:n,effects:b,boost:v,count:0,ratio:c(1.3,1.6),emoji:l()}}},6590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(3371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},3924:(e,t,o)=>{const{getCraftedResource:s}=o(6590);t.getMaterial=function(e,t){return t||(t=o(2587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},8078:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(6425),{resources:i,isResource:r}=o(2587),{skills:a}=o(2324),{isPondered:c}=o(4369),{passedStage:l}=o(8751),{updateBounceAnimation:u}=o(5994);let d=new Set(["gatherSticks"]);t.allVisibleButtons=d,e.exports={getMax:function(e){if(r(e)){let t=i[e].basemax,r=t;for(const[t,s]of Object.entries(o(5882).buildings))s.effects&&s.effects[e]&&(r+=s.effects[e]*s.count);if(s("storageSpace")&&"clones"!==e)r+=t*(1.05*n("storageSpace"));else if("clones"===e){l("clone")&&(r+=1);const e=o(5882).buildings;c("biggerShelter")&&(r+=1*e.shelter.count),c("biggerHut")&&(r+=1*e.hut.count),c("biggerHouse")&&(r+=2*e.house.count),c("biggerTeepee")&&(r+=4*e.teepee.count),c("evenBiggerShelter")&&(r+=1*e.shelter.count),s("maxClones")&&(r+=1*n("maxClones"))}return r}return 1/0},calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return d.has(e)},setVisibleButton:function(e){d.add(e)},clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},6842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combatTab",hunting:"hunting"}},5150:(e,t,o)=>{const{skills:s}=o(2324),{resources:n}=o(2587),{getMaterial:i}=o(3924),{isPondered:r}=o(4369),{getMax:a}=o(8078),{triggerFloatUpText:c}=o(8727),{playSound:l}=o(5098),u={};for(let e in s)u[e]=0;const d=document.getElementById("jobsTab");let f=0;function h(){var e=0;for(let t in u)e+=u[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),t.style.gridColumn=f%2+1,++f,d.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(l("./audio/job.wav"),i("clones",n)>h()){const o=e.clientX,s=e.clientY;if(e.shiftKey){let e=i("clones",n)-h();u[t]+=e,c(o,s,`+${e} workers`,"green")}else if(e.ctrlKey){let e=Math.min(10,i("clones",n)-h());u[t]+=e,c(o,s,`+${e} workers`,"green")}else u[t]++,c(o,s,"+1 worker","green");g(t,u[t]),b(t),y()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job"),o=e.clientX,s=e.clientY;if(l("./audio/job.wav"),e.shiftKey){let e=u[t];u[t]=0,e>0&&c(o,s,`-${e} workers`,"red")}else if(e.ctrlKey){let e=Math.min(10,u[t]);u[t]-=e,c(o,s,`-${e} workers`,"red")}else u[t]>0&&(u[t]--,c(o,s,"-1 worker","red"));g(t,u[t]),b(t),y()}))}));let p=new Map;function g(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let t of o)p.set(t,r),r>0&&m(e,t);let a=t-r*i;for(let t of o)a>0&&(p.set(t,p.get(t)+1),a--,m(e,t))}function m(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const s=document.getElementById(`resource-${t}`);if(!s||"none"===s.style.display)return;const n=o.getBoundingClientRect(),i=s.getBoundingClientRect(),r=document.createElement("div");r.style.position="absolute",r.style.width="10px",r.style.height="10px",r.style.borderRadius="50%",r.style.backgroundColor="white",r.style.opacity=".8",r.style.left=`${n.left+window.scrollX}px`,r.style.top=`${n.top+window.scrollY}px`,document.body.appendChild(r),r.animate([{transform:`translate(${i.left-n.left}px, ${i.top-n.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{r.style.display="none"}}function b(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${u[e]}`),o(9594).updateEmojiDisplay()}function y(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+h()+" / "+a("clones")}let v=new Map,k=document.getElementById("lineCanvas"),w=k.getContext("2d");function x(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;w.beginPath(),w.moveTo(n,i),w.lineTo(t,o),w.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,u=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.lineTo(a,c),e.closePath(),e.fill()}(w,n,i,t,o,10)}function S(e,t){let o=u[e];u[e]=0,u[t]+=o,b(e),b(t)}k.width=window.innerWidth,k.height=window.innerHeight,e.exports={clearJobAssignments:function(){w.clearRect(0,0,k.width,k.height),v=new Map},reassignJobsBasedOnResources:function(){try{const e=v.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,l=s[e].affectedResources;if(!l)return;for(const e of l)if(void 0!==n[e]&&i(e)<n[e].max){c=!1;break}c&&u[e]>0&&(S(r,a),g(r,u[r]),g(a,u[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:S,drawAllConnections:function(){w.clearRect(0,0,k.width,k.height);try{for(let[e,t]of v.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,x(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return p.get(e)},updateTotal:y,setConnections:function(e){v=e},getConnections:function(){return v},distributeWorkers:g,updateDisplay:b,jobCounts:u,resetAllJobs:function(){for(let e in s)u[e]=0,g(e,0),y(),b(e)}}},5882:(e,t,o)=>{const{hasPerk:s}=o(134),{recalcMaxClones:n}=o(6995),{recalculateBuildingCost:i}=o(8022),{updateBuildingButtonCount:r}=o(2607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},tepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},hospital:{basecost:{concrete:10,medicine:20,fish:20},effects:{clones:3},boost:{},count:0,ratio:1.7,tooltipDesc:"Keep yourself safe.",emoji:"+"},barracks:{basecost:{spear:20,violence:1,wood:200},effects:{clones:1,violence:20},boost:{},count:0,ratio:1.5,tooltipDesc:"A hall of raucous soldiers.",emoji:"𓈏"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.2,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30,wood:40},effects:{wood:100},ratio:1.2,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_rack:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.2,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.4,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,bread:10,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},reservoir:{basecost:{rocks:100,clay:50,water:10},effects:{water:100},boost:{},count:0,ratio:1.3,tooltipDesc:"A hole filled with water. Useful.",emoji:"𓈞"},stone_depot:{basecost:{rocks:200},effects:{rocks:250},boost:{},count:0,ratio:1.2,tooltipDesc:"A big stack of rocks.",emoji:"𓈓"},warehouse:{basecost:{crates:10,concrete:20},effects:{wood:100,rocks:100,clay:100,sand:100},boost:{},count:0,ratio:1.3,tooltipDesc:"Put stuff in a box inside a larger box.",emoji:"𓇦"},military_school:{basecost:{bricks:20,violence:10},effects:{violence:100},boost:{violence:1.05},count:0,ratio:1.4,tooltipDesc:"Learn the art of hurting others.",emoji:"𓇻"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_trap:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.02},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{fish:50},boost:{},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},irrigation:{basecost:{freshwater:20},effects:{},boost:{wheat:1.05},count:0,ratio:1.2,tooltipDesc:"Wetten your wheat with water.",emoji:"𓈗"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,gold:1},effects:{},boost:{all:1.05},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"𓇬"},garden:{basecost:{beams:20,herbs:20,freshwater:10},effects:{},boost:{herbs:1.1,sticks:1.05},count:0,ratio:1.3,tooltipDesc:"Nice nature, carefully cultivated.",emoji:"𓆷"},sand_scoop:{basecost:{beams:10,iron:5},effects:{},boost:{sand:1.1},count:0,ratio:1.2,tooltipDesc:"Scoop the sand from the shore? Sure!",emoji:"𓄛"},traps:{basecost:{nails:10,sticks:20,herbs:20,vines:15},effects:{},boost:{game:1.1},count:0,ratio:1.2,tooltipDesc:"Watch your step!",emoji:"𓄦"},rock_role:{basecost:{slabs:20,freshwater:30,vines:15},effects:{},boost:{rocks:1.2},count:0,ratio:1.3,tooltipDesc:"In order to gather the rock you must become the rock.",emoji:"𓆇"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,r(e,0),i(e);n()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"tepee":case"hospital":case"barracks":return!0;default:return!1}}}},2054:(e,t,o)=>{const{passedStage:s}=o(8751),{getMaterial:n}=o(3924),{hasTool:i}=o(2609),{resources:r}=o(2587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"Free",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button active",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},combatTabButton:{class:"tab-button",text:"Combat",showTab:"combatTab",tab:"tabs",requirement:()=>s("combatTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},3371:(e,t,o)=>{const{getMaterial:s}=o(3924),{getCraftedResource:n}=o(6590),{resources:i}=o(2587),{passedStage:r}=o(8751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together (+ stick production)",tooltipCost:"Handles: 2",class:"rocks"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life (+ fish production)",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rope",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle (+ wood production)",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds (+ ore production)",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory (+ ponder production)",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},bread:{id:"craftBreadButton",value:0,cost:{wheat:13},craftedOnce:!1,requiredStage:"agriculture",tooltipDesc:"I'm gonna grind your wheat to make my bread!",tooltipcost:"",class:"agriculture"},steel:{class:"factory",value:0,cost:{iron:5}},beams:{class:"factory",value:0,cost:{wood:10}},crates:{class:"factory",value:0,cost:{wood:15}},nails:{class:"factory",value:0,cost:{iron:1}},slabs:{class:"factory",value:0,cost:{rocks:20}},medicine:{class:"factory",value:0,cost:{herbs:50}},leather:{class:"factory",value:0,cost:{hides:10}},concrete:{class:"factory",value:0,cost:{sand:32}},wood:{class:"factory",value:0,cost:{sticks:8}},sticks:{class:"factory",value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null},resetCraftedResources:function(){for(const[e,t]of Object.entries(a))t.value=0,t.craftedOnce=!1}}},7055:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},6397:(e,t,o)=>{const{capitalizeFirst:s}=o(6681);let n={"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combatTab:{id:"ponderCombatTab",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factory:{id:"ponderFactory",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double Tepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}},eatBread:{id:"ponderEatBread",requirement:()=>!0,isPondered:!1,text:"Eat Bread",tooltipDesc:"Eating some bread will help you work faster",cost:{ponder:400,bread:30}}};function i(e){const t=[{value:1e3,numeral:"M"},{value:900,numeral:"CM"},{value:500,numeral:"D"},{value:400,numeral:"CD"},{value:100,numeral:"C"},{value:90,numeral:"XC"},{value:50,numeral:"L"},{value:40,numeral:"XL"},{value:10,numeral:"X"},{value:9,numeral:"IX"},{value:5,numeral:"V"},{value:4,numeral:"IV"},{value:1,numeral:"I"}];let o="";for(const s of t)for(;e>=s.value;)o+=s.numeral,e-=s.value;return o}!function(e){for(let e=1;e<=100;e++)n[`fasterResourceGain${e}`]={id:`ponderFasterResourceGain${e}`,isPondered:!1,cost:{ponder:40*Math.pow(3,e-1)},requirement:()=>!0,text:`Productivity ${i(e)}`,tooltipDesc:"Just work harder. Bonus to resource gain"};for(let e=1;e<=100;e++)n[`fasterPonder${e}`]={id:`ponderFasterPonder${e}`,isPondered:!1,cost:{ponder:10*Math.pow(5,e-1)},text:`Think Harder ${i(e)}`,tooltipDesc:"Small boost to pondering speed",requirement:()=>!0};for(let e=1;e<=100;e++)n[`effectiveBuildings${e}`]={id:`ponderEffectiveBuildings${e}`,isPondered:!1,cost:{ponder:30*Math.pow(3,e-1)},text:`Buildings ${i(e)}`,tooltipDesc:"Increase building effects by a small amount",requirement:()=>!0}}(),e.exports={ponders:n,resetPonders:function(){for(const[e,t]of Object.entries(n))t.isPondered=!1},getPonderConfig:function(e){for(const[t,o]of Object.entries(n))if(o.id===e)return o;return null}}},6425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o,setPrestigeCost:function(e,o){t[e].cost=o},setPrestigeLevel:function(e,o){t[e].level=o}}},2587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,basemax:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",basemax:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",basemax:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",basemax:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],basemax:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,basemax:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,basemax:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",basemax:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",basemax:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",basemax:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",basemax:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",basemax:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",basemax:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",basemax:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",basemax:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",basemax:1e3},violence:{value:0,id:"gatherViolence",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"",basemax:100}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0},getBaseMax:function(e){return t[e].basemax}}},2324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:["violence"]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,resetCraftedResources:n}=o(3371),{buildings:i,resetBuildings:r}=o(5882),{ponders:a,resetPonders:c}=o(6397),{buttons:l}=o(2054),{resources:u,resetResources:d}=o(2587),{saveGame:f,loadGame:h}=o(502),{appendCraftedResourceButtons:p,increaseMaterial:g,craftAllResources:m,craftResource:b,calcIncrease:y,updateResourceIncreaseRates:v,increaseMax:k}=o(9594),{buyMaxBuildings:w,buyBuilding:x}=o(5151),{selectAbility:S,resetPerks:C}=o(134),{clearSidebar:B,getMax:T}=o(8078),{makeVisible:M}=o(1123),{updateButtonVisibility:j}=o(7667),{getCraftedResource:E}=o(6590),{getMaterial:A}=o(3924),{buyFactory:$,attemptManufacture:q,upgradeBulk:O,allMaterials:P}=o(1051),{isPondered:D,generatePonderButtons:R}=o(4369),{hasTool:L,addTool:I}=o(2609),{getAteFish:F,setAteFish:G}=o(1621),{updateTotal:V,clearJobAssignments:H,resetAllJobs:_}=o(5150),{capitalizeFirst:N}=o(6681),{passedStage:W,resetStages:z}=o(8751),{recalcMaxClones:J}=o(6995),{initializeResourceTags:U,updateSidebar:Y,updateDisplayValue:K}=o(5453),{prestige:X}=o(6425),{triggerFloatUpText:Q}=o(8727),{updateBounceAnimation:Z}=o(5994),{updateTooltip:ee,hideTooltip:te}=o(8208),{canCraft:oe}=o(7064),{calculateWinChance:se,combat:ne,switchStance:ie}=o(4856),{showTab:re,getCurrentTab:ae}=o(2093),{getSfxVolume:ce,getMusicVolume:le,setMusicVolume:ue,setSfxVolume:de,playSound:fe}=o(5098),{generateRandomBuilding:he}=o(6900),{changeMessage:pe,messageElement:ge}=o(7169),{generateButtons:me}=o(429),{toggleResource:be}=o(215),{GameSimulator:ye}=o(3520),{initializeApp:ve}=o(5752),{getAnalytics:ke}=o(9013),{setMaterial:we}=o(3671),{recalculateAllBuildingCosts:xe}=o(8022),{setPetals:Se,startPetalRendering:Ce}=o(6124),Be={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},Te=[{condition:()=>A("sticks",u)>=1,action:()=>M("stick")},{condition:()=>A("sticks",u)>=10,action:()=>M("vines")},{condition:()=>A("vines",u)>=10,action:()=>M("rocks")},{condition:()=>A("rocks",u)>=1,action:()=>{M("tab-button"),M("craftRocks")}},{condition:()=>E("spear",s)>0,action:()=>M("spear")},{condition:()=>A("fish",u)>=1,action:()=>M("fishing")},{condition:()=>L("Axe"),action:()=>M("wood")},{condition:()=>E("rope")>=1,action:()=>M("rope")},{condition:()=>A("fish",u)>=5&&!F(),action:()=>M("eatFish")},{condition:()=>F(),action:()=>{M("clone"),M("ponder-tab")}},{condition:()=>D("ponderFinish"),action:()=>(document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>D("biggerShelter"),action:()=>J()},{condition:()=>D("biggerHut"),action:()=>J()},{condition:()=>D("biggerHouse"),action:()=>J()},{condition:()=>D("biggerTeepee"),action:()=>J()},{condition:()=>D("evenBiggerShelter"),action:()=>J()},{condition:()=>A("clones")>=30,action:()=>M("prestige")},{condition:()=>A("clay")>0,action:()=>M("clay")},{condition:()=>!document.getElementById("toggle-basics")&&D("organization"),action:()=>U(!0)},{condition:()=>W("combatTab"),action:()=>se()},{condition:()=>W("factory"),action:()=>M("factory-button")}],Me=["./audio/song1.wav","./audio/song2.wav","./audio/song3.wav","./audio/song4.wav","./audio/song5.wav","./audio/song6.wav","./audio/song7.wav","./audio/song8.wav","./audio/song9.wav","./audio/song10.wav"];let je=null,Ee=null;function Ae(){je&&(je.pause(),je.currentTime=0);const e=Math.floor(Math.random()*Me.length);je=new Audio(Me[e]),je.volume=le(),je.play(),function(){Ee&&clearTimeout(Ee);const e=3e4*Math.random()+5e3;je.onended=()=>{Ee=setTimeout(Ae,e)}}()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":re("productionTab");break;case"2":W("tab-button")&&re("experimentTab");break;case"3":W("ponder-tab")&&re("ponderTab");break;case"4":W("jobs-tab")&&re("jobsTab");break;case"5":W("skillsTable")&&re("skillsTab");break;case"6":W("perksTab")&&re("perksTab");break;case"7":W("combatTab")&&re("combatTab");break;case"a":"combatTab"===ae()&&ie("aggressive");break;case"b":"combatTab"===ae()&&ie("balanced");break;case"c":"combatTab"===ae()&&ie("careful");break;case"f":"combatTab"!==ae()||document.getElementById("startCombat").disabled?be("fish"):ne();break;case"s":be("sticks");break;case"r":W("rocks")&&be("rocks");break;case"v":W("vines")&&be("vines");break;case"w":W("wood")&&be("wood");break;case"o":W("ore")&&be("ore");break;case"p":W("ponder-tab")&&be("ponder");break;case"Escape":Ne();break;case" ":e.target===document.body&&e.preventDefault(),W("clone")&&ze(e)}}));const $e=document.body;$e.classList.toggle("dark-mode");let qe=!0;function Oe(){Je.style.display="flex",Je.style.opacity="1",setTimeout((()=>{Ue.style.opacity="1"}),2e3),setTimeout((()=>{Ye.style.display="block",Ye.style.opacity="1"}),5e3)}let Pe=50,De=null,Re=0,Le=0;function Ie(e){null===De&&(De=e);const t=e-De;Re+=t,Le+=t,De=e;let o=Pe;for(Le>=10*Pe&&(Pe=Le/10);Le>=Pe;)Le-=Pe,_e(Pe);Pe=o,requestAnimationFrame(Ie)}let Fe=0,Ge=0;const Ve=1e4,He=1e3;function _e(e){for(const t of[...new Set(Object.values(P))])g(t,y(t,e));!function(){for(let e=Te.length-1;e>=0;e--){const t=Te[e];t.condition()&&(t.action(),Te.splice(e,1))}for(let e in Be)!L(e)&&E(e)>0&&(I(e),M(Be[e]));try{j(),null!==Qe&&ee(Qe)}catch(e){console.warn(e)}}(),Fe+=e,Ge+=e,Re+=e,Fe>=Ve&&(f(),Fe=0),W("factoryTab")&&Ge>=He&&(console.log("manufacturing attempt",Ge,He),Ge=0,q())}function Ne(){fe("./audio/options.wav",!1);const e=document.getElementById("optionsMenu");e.style.display="none"===e.style.display?"block":"none"}let We=!1;function ze(e){let t="+1 Clone";A("clones")<T("clones")?u.clones.value+=1:t="Max Clones",fe("+1 Clone"===t?"./audio/clone.wav":"./audio/failclone.wav");const o=e.pageX||10,s=e.pageY||120;Q(o,s,t,"+1 Clone"===t?"green":"red"),V(),K("clones")}document.addEventListener("DOMContentLoaded",(e=>{const t=ve({apiKey:"AIzaSyCotsZUfpU3dBSARhviv3oKtlnEyv7e_gk",authDomain:"clone-experiment.firebaseapp.com",projectId:"clone-experiment",storageBucket:"clone-experiment.appspot.com",messagingSenderId:"1028768441674",appId:"1:1028768441674:web:2bf0906e5a94f5b2400db3",measurementId:"G-M45BJLXJFR"});ke(t),R(a),h(),me(),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),$()}))}(),p(),U(),h(),B(),U(D("organization")),Y(),re("productionTab"),o(7864).generateTradeTable(u),document.addEventListener("click",(e=>{if(null===je&&Ae(),e.target.matches("button")){const n=e.target;if(n.getAttribute("data_building")&&"undefined"!==n.getAttribute("data_building")&&n.classList.contains("purchasable")){var t=n.getAttribute("data_building");const o=e.clientX,s=e.clientY;fe("./audio/building.wav",!1);const i=N(t).split("_").join(" ");if(e.shiftKey){let e=w(t);Q(o,s,`+${e} ${i}s`,"aqua")}else x(t),Q(o,s,`+1 ${i}`,"aqua")}else if(n.classList.contains("unlock")){const e=n.getAttribute("unlock");if(console.log(e),a[e]){var o=!0;for(let t in a[e].cost)if(A(t,u)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)g(t,-a[e].cost[t]);a[e].isPondered=!0,M(e),n.display="none",fe("./audio/ponder.wav",!1),"organization"===e&&(f(),location.reload()),e.startsWith("ponderEffectiveBuildings")&&xe()}}}else if("undefined"!==n.id)if("gather"===n.id.slice(0,6))be(function(e){for(const[t,o]of Object.entries(u))if(o.id===e)return t;return"error "+e}(n.id));else if("craft"===n.id.slice(0,5)){fe("./audio/craft.wav",!1);let t=function(e){for(const[t,o]of Object.entries(s))if(console.log(t,o,e),o.id===e)return t;return"error "+e}(n.id);oe(t)&&Q(e.clientX,e.clientY,`+${t}`,"aqua"),e.shiftKey?m(t):b(t)}else"saveButton"===n.id?(fe("./audio/options.wav"),f()):"eatFish"===n.id?function(){if(!F()&&A("fish",u)>=1){const e=new Audio("./audio/fish.wav");e.volume=ce(),e.play(),g("fish",-1),Ue.textContent="That fish didn't taste too good, hopefully you won't need to pilot any airplanes. Who's that standing there?",Oe(),G(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{pe("You are with yourself in a forest.","with yourself","You feel peckish for some seafood."),k("clones",1),g("clones",1)}),1e3)}}():"overlay-button"===n.id?(Ue.style.opacity="0",Ye.style.opacity="0",Je.style.opacity="0",setTimeout((()=>{Je.style.display="none"}),1e3),document.getElementById("isekaiButtons").innerHTML=""):"deleteSaveButton"===n.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?Ze():"clearJobAssignments"===n.id?H():"darkModeToggle"===n.id?($e.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),qe=!qe,darkModeToggle.textContent=qe?"Light Mode":"Dark Mode"):"prestige"===n.id?Xe():"startCombat"===n.id&&ne();if(n.classList.contains("tierOneButton")){let e=n.textContent;S(e)}}e.target.matches("#alone")&&ze(e)})),document.getElementById("optionsButton").addEventListener("click",Ne),document.getElementById("musicVolume").value=le(),document.getElementById("musicVolume").addEventListener("input",(function(){ue(this.value),je.volume=le()})),document.getElementById("sfxVolume").value=ce(),document.getElementById("sfxVolume").addEventListener("input",(function(){de(this.value)})),document.querySelector('input[name="petals"]').addEventListener("click",(e=>{e.target.checked?Se(10):Se(0)})),requestAnimationFrame(Ie),requestAnimationFrame(Ce),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){ee(e),Qe=e})),e.addEventListener("onclick",(function(){ee(e)})),e.addEventListener("mouseleave",(function(){te(),Qe=null}))})),V(),Z(),we("clones",T("clones"))}));const Je=document.getElementById("overlay"),Ue=document.getElementById("overlay-text"),Ye=document.getElementById("overlay-button"),Ke=document.getElementById("overlay-back-button");function Xe(){Ye.addEventListener("click",(()=>{console.log("isekai button clicked");const t=A("clones")+A("husks");d(),n(),c(),C(),r(),_(),z(),fe("./audio/isekaiconfirm.wav",!1);for(let[e,t]of Object.entries(u))t.max=100;g("husks",t),Je.style.display="none";let o=null;for(let t=0;t<e;t++){const e=he();i[e.name.split(" ").join("_")]=e,o=e}pe("You are in another world.","another",`You feel a need to acquire ${Object.values(o.cost).join(",")}`),U(!1),f(),location.reload()}));const e=4;Ke.addEventListener("click",(()=>{console.log("back button clicked"),Je.style.display="none"}));const t=new Audio("./audio/isekai.wav");t.volume=ce(),t.play();const o=document.getElementById("husksIsekaiValue");let s;s=o||document.createElement("p"),s.id="husksIsekaiValue",s.innerHTML=`Husks:  ${A("husks")} <br> You will get ${A("clones")} Husks post-isekai.<br>You will receive ${e} randomly generated new buildings, unique to this new world.`,s.style.opacity="0",Je.prepend(s),Je.style.backgroundColor="MidnightBlue",Ue.textContent="You step through to another world.",Oe(),setTimeout((()=>{Ke.style.display="block"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(X).forEach((o=>{const n=document.createElement("button");n.innerHTML=`<b>${X[o].text}</b><br>Level: ${X[o].level}<br>Cost: ${X[o].cost}`,n.setAttribute("tooltipCost",X[o].cost),n.setAttribute("tooltipDesc",X[o].tooltipDesc),n.classList.add("tooltip"),n.style.gridColumn=(t%4+1).toString(),n.style.gridRow=Math.floor(t/4+1).toString(),++t,n.addEventListener("click",(()=>{console.log(`Button ${o} was clicked`),A("husks")<X[o].cost||(X[o].level++,g("husks",-X[o].cost),X[o].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(X[o].cost),n.setAttribute("tooltipCost",X[o].cost),n.innerHTML=`<b>${X[o].text}</b><br>Level: ${X[o].level}<br>Cost: ${X[o].cost}`,s.textContent="Husks: "+A("husks"),ee(n))})),n.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${o} was right clicked`),X[o].level<=0||(X[o].level--,X[o].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(X[o].cost),n.setAttribute("tooltipCost",X[o].cost),g("husks",X[o].cost),n.innerHTML=`<b>${X[o].text}</b><br>Level: ${X[o].level}<br>Cost: ${X[o].cost}`,s.textContent="Husks: "+A("husks"),ee(n))})),e.appendChild(n),n.addEventListener("mouseenter",(function(e){ee(n),Qe=n})),n.addEventListener("mouseleave",(function(){te(),Qe=null}))}))}),5e3),setTimeout((()=>{s.style.opacity="1"}),5e3)}var Qe=null;function Ze(){localStorage.removeItem("save"),We=!0,location.reload()}e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${u[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){Re=e},changeMessage:pe,getMessage:function(){return ge},total_time:Re,currentHoverButton:Qe,deleteGame:Ze,isekai:Xe,update:_e},window.deleteGame=Ze,window.isekai=Xe},1123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(8751),{updateButtonVisibility:i}=o(7667);t.makeVisible=function(e){n(e)||s(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),i()}},134:(e,t,o)=>{const{buildings:s}=o(5882),{perks:n}=o(7055);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e){const e=o(5882).buildings;for(let t of Object.keys(e))o(8022).recalculateBuildingCost(t)}}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(1495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i},resetPerks:function(){i=[]}}},6124:(e,t)=>{let o=[];class s{constructor(e){this.petalImg=e,this.x=Math.random()*n.width,this.y=Math.random()*n.height*2-n.height,this.w=25+15*Math.random(),this.h=20+10*Math.random(),this.opacity=this.w/40,this.flip=Math.random(),this.xSpeed=1.5+2*Math.random(),this.ySpeed=1+1*Math.random(),this.flipSpeed=.03*Math.random()}draw(){if(this.y>n.height||this.x>n.width)switch(this.x=-this.petalImg.width,this.y=Math.random()*n.height*2-n.height,this.xSpeed=1.5+2*Math.random(),this.ySpeed=1+1*Math.random(),this.flip=Math.random(),(new Date).getMinutes()%5){default:case 1:this.petalImg.src="./petal.png";break;case 2:this.petalImg.src="./pollen.png";break;case 3:this.petalImg.src="./fall.png";break;case 4:this.petalImg.src="./snowflake.png"}i.globalAlpha=this.opacity,i.drawImage(this.petalImg,this.x,this.y,this.w*(.6+Math.abs(Math.cos(this.flip))/3),this.h*(.8+Math.abs(Math.sin(this.flip))/5))}animate(){this.x+=this.xSpeed,this.y+=this.ySpeed,this.flip+=this.flipSpeed,this.draw()}}const n=document.querySelector("canvas#fullscreen");n.width=window.outerWidth,n.height=window.outerHeight;const i=n.getContext("2d");t.startPetalRendering=function e(){i.clearRect(0,0,n.width,n.height),o.forEach((e=>e.animate())),window.requestAnimationFrame(e)},t.setPetals=function(e){const t=new Image;o=[];for(let n=0;n<e;++n)o.push(new s(t))}},9476:e=>{e.exports={getPlayerUid:function(){return null},generateUniqueID:function(){return Date.now().toString(36)+Math.random().toString(36).substr(2,5)}}},4369:(e,t,o)=>{const{capitalizeFirst:s}=o(6681),{ponders:n}=o(6397),{getMaterial:i}=o(3924),{resources:r}=o(2587),{buttons:a}=o(2054);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;let r=o(9594).generateTooltipCost(i.cost);a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:r,tab:"ponder",unlock:t,requirement:()=>o(8078).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},6995:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(6425),{isPondered:i}=o(4369),{passedStage:r}=o(8751),{updateBounceAnimation:a}=o(5994);t.recalcMaxClones=function(){let e=o(2587).getBaseMax("clones");r("clone")&&(e+=1);const t=o(5882).buildings;for(const[o,s]of Object.entries(t))s.effects&&s.effects.clones&&(e+=s.effects.clones*s.count);i("biggerShelter")&&(e+=1*t.shelter.count),i("biggerHut")&&(e+=1*t.hut.count),i("biggerHouse")&&(e+=2*t.house.count),i("biggerTeepee")&&(e+=4*t.teepee.count),i("evenBiggerShelter")&&(e+=1*t.shelter.count),s("maxClones")&&(e+=1*n("maxClones")),o(5722).setMax("clones",e),a()}},8022:(e,t,o)=>{function s(e){let t=o(5882).buildings[e];if(t&&t.cost&&t.ratio)for(let e in t.cost)console.log(t,t.basecost[e],t.ratio,t.count),t.cost[e]=Math.round(t.basecost[e]*Math.pow(t.ratio,t.count)),o(134).hasPerk("Architect")&&(t.cost[e]*=.75);const s=document.querySelector("#"+e);var n=o(9594).generateTooltipCost(t.cost);if(!s)throw"Button not found for "+e;{s.setAttribute("data-tooltip-cost",n);const e=o(5151).generateEffectString(t);s.setAttribute("data-tooltip-effect",e)}}t.recalculateBuildingCost=s,t.recalculateAllBuildingCosts=function(){console.log("recalculateAllBuildingCosts");const e=o(5882).buildings;for(let t of Object.keys(e))s(t)}},9594:(e,t,o)=>{const{resources:s}=o(2587),{craftedResources:n}=o(3371),{buttons:i}=o(2054),{skills:r}=o(2324),{getWorkers:a,updateTotal:c}=o(5150),{hasTool:l}=o(2609),{calcCraftBonus:u,getMax:d}=o(8078),{canCraft:f}=o(7064),{capitalizeFirst:h}=o(6681),{getMaterial:p}=o(3924),{isPondered:g}=o(4369),{calcIncrease:m}=o(8121),{updateSidebar:b,abbreviateNumber:y}=o(5453),{passedStage:v}=o(8751),{updateDisplayValue:k}=o(5453),{updateSkills:w}=o(8491),{recalcMaxClones:x}=o(6995),{triggerFloatUpText:S}=o(8727),{addProducing:C,addConsuming:B,removeProducing:T,removeConsuming:M}=o(1051),j=document.getElementById("resources");function E(e,t){s[e].max+=t;const o=document.getElementById(`${e}Value`).getBoundingClientRect();S(o.right,o.bottom,"+max","green"),b(),c()}function A(e,t){0==t||Number.isNaN(t)||((e=e.toLowerCase())in s?(p(e)<d(e)&&t>0?(g("fasterResourceGain")&&(t*=1.05),s[e].value+=t,w(e,t),"violence"===e&&o(4856).refreshValues()):s[e].value=t<0?Math.max(s[e].value+t,0):d(e),k(e)):e in n?(n[e].value=Math.max(n[e].value+t,0),k(e),w(e,t)):(s[e]&&(s[e].value+=t),n[e]&&(n[e].value+=t),b()))}function $(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(n).find((t=>n[t]===e));return t.innerHTML=`${e.text||h(o)}`,t.tab="experiment",t}t.resourcesContainer=j,window.increaseMaterial=A,window.increaseMax=E;const q=document.querySelector("#craftedResourceButtons");function O(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${p(o,s)>=e[o]?"enough":"not-enough"}">${y(e[o])} ${o}</span><br>`;return t}const P=document.getElementById("emojiDisplay");function D(){let e="";function t(){return Math.floor(55*Math.random()+200)}for(const[o,n]of Object.entries(r)){let i="";switch(o){case"gathering":i="rgb(227, 254, 210)";break;case"masonry":i="#ccc4c7";break;case"carpentry":i="#f0e7c9";break;case"hunting":i="#c9f0d4";break;case"fishing":i="#b5d6eb";break;case"thinking":i="#b5bceb";break;case"farming":i="#ede4c0";break;case"combat":i="#edc3c0";break;default:const e=t(),o=t();i=`rgb(${e}, ${t()}, ${o})`}for(const t of Object.values(n.affectedResources)){const o=a(t);if(void 0===o||0==o)continue;const n=s[t].emoji||"𓀟";n&&(e+=`<span class='tooltip' style='color:${i};'tooltipdesc='${t}' tooltipcost=''>${n.repeat(o)}</span>`)}}P.innerHTML=e}function R(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!f(e))return;let o=n[e].cost;t=Math.floor(t);for(const[e,s]of Object.entries(o))console.log("crafting quantity:",e,s),A(e,-s*t),k(e);A(e,u(e)*t),n[e].craftedOnce||(n[e].craftedOnce=!0),k(e)}D(),e.exports={increaseMaterial:A,increaseMax:E,craftAllResources:function(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(p(e,s)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),R(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}},craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;f(e)&&(!function(e,t,o){for(const[e,o]of Object.entries(t))A(e,-o);A(e,o)}(e,n[e].cost,u(e)),n[e].craftedOnce||(n[e].craftedOnce=!0),k(e))},updateEmojiDisplay:D,generateTooltipCost:O,calcSecondsRemaining:function(e,t){if(t<=p(e))return 0;const o=m(e,1e3);return 0==o?-1:(t-p(e))/o},appendCraftedResourceButtons:function(){for(let e in n){console.log("generating button for crafted resource",e);const t=$(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",O(n[e].cost)||"");const o=document.createElement("div");o.className=`factory-${e}`,o.classList.add("factory-button"),o.classList.add("hidden");const s=document.createElement("button");s.textContent="+",s.addEventListener("click",(t=>{C(e);for(const[t,o]of Object.entries(n[e].cost))B(t,o);k(e)})),console.log("added plus button for",e);const r=document.createElement("button");r.textContent="-",r.addEventListener("click",(t=>{T(e);for(const[t,o]of Object.entries(n[e].cost))M(t,o);k(e)})),o.appendChild(s),o.appendChild(r);const a=document.createElement("div");a.style.display="flex",a.style.flexDirection="row",a.appendChild(t),a.appendChild(o),q.appendChild(a),i[n[e].id]=n[e]}},calcIncrease:m,updateResourceIncreaseRates:function(){for(let t in s){const o=m(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:R}},502:(e,t,o)=>{const{calcIncrease:s,updateEmojiDisplay:n}=o(9594),{addTool:i,getAllTools:r}=o(2609),{allVisibleButtons:a,setVisibleButton:c,getMax:l}=o(8078),{makeVisible:u}=o(1123),{getCraftedResource:d}=o(6590),{getMaterial:f}=o(3924),{getAllPerks:h,addPerk:p,hasPerk:g,selectAbility:m}=o(134),{isPondered:b}=o(4369),{jobCounts:y,setConnections:v,getConnections:k,distributeWorkers:w,updateDisplay:x}=o(5150),{total_time:S}=o(808),{setAteFish:C,getAteFish:B}=o(1621),{craftedResources:T}=o(3371),{buildings:M}=o(5882),{ponders:j}=o(6397),{resources:E}=o(2587),{skills:A}=o(2324),{getAllStages:$}=o(8751),{activeFactoriesProducing:q,loadFactory:O}=o(1051),{recalcMaxClones:P}=o(6995),{updateSidebar:D}=o(5453),{prestige:R,setPrestigeCost:L,setPrestigeLevel:I}=o(6425),{recalculateBuildingCost:F}=o(8022),{updateBuildingButtonCount:G}=o(2607),{updateBuildingList:V}=o(5151),{populateSkillsTable:H}=o(8491),{getAnalytics:_,logEvent:N}=o(9013),{generateUniqueID:W}=o(9476),{getMusicVolume:z,getSfxVolume:J,setSfxVolume:U,setMusicVolume:Y}=o(5098),{setPetals:K}=o(6124);function X(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{},newBuildings:{},audioVolume:{}};for(let t in A)e.skills[t]={exp:A[t].exp,level:A[t].level};for(let t in T)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=d(t),e.craftedResources[t].craftedOnce=T[t].craftedOnce;for(let t in E)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=f(t,E),e.resources[t].max=l(t);e.tools=r(),e.stages=$(),e.jobs=y;try{e.perks=[new Set(h())]}catch(t){e.perks=[],console.error("saving perks error",t)}e.audioVolume={music:z(),sfx:J()},e.connections=Array.from(k().entries());for(let t in j)e.unlocks[t]=b(t);let t=null;for(let o in M)e.buildings[o]=M[o].count,M[o].hasOwnProperty("name")&&(e.newBuildings[o]=M[o],t=M[o]);for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries(q))e.factories[t]=o;const s=o(808).getMessage().innerHTML,n=function(){let e="You feel peckish for some seafood.";return t&&t.cost&&(e="You feel a strange, constructive urge to acquire "+Object.keys(t.cost).join(", ")),console.log("message tooltip:",e),e}(),i=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(s);i.push(n),e.message=i;for(const[t,o]of Object.entries(R))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=S,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),N(_(),"save",e),e}e.exports={saveGame:X,loadGame:function(){if(console.log("Loading Game"),!localStorage.getItem("player_uid")){const e=W();localStorage.setItem("player_uid",e)}const e=localStorage.getItem("player_uid");var t=JSON.parse(localStorage.getItem("save"));if(console.log(t),N(_(),"load",{savegame:t,playerUid:e}),null!==t){if(void 0!==t.resources)for(let e in t.resources)if("undefined"!==e.valueOf()&&null!==e&&null!==E[e]){try{o(3671).setMaterial(e,t.resources[e].value)}catch(t){console.warn("error with loading resource",e,t)}console.log("Updating resources for "+e+" to "+t.resources[e].value,t.resources[e].max);try{0!=E[e].value&&o(5453).updateDisplayValue(e)}catch(e){}}if(K(10),void 0!==t.skills)for(let e in t.skills)A[e].exp=t.skills[e].exp,A[e].level=t.skills[e].level;if(void 0!==t.craftedResources)for(var a of Object.keys(t.craftedResources))if(T[a]){T[a].value=t.craftedResources[a].value,Number.isNaN(T[a].value)&&(T[a].value=0),T[a].craftedOnce=t.craftedResources[a].craftedOnce;try{o(5453).updateDisplayValue(a)}catch(e){}}if(void 0!==t.tools){let e=[...new Set([...r(),...t.tools])];for(let t in e)i(t)}if(void 0!==t.stages)for(let e in t.stages)u(t.stages[e]);if(void 0!==t.jobs)for(let e in t.jobs)y[e]=t.jobs[e],x(e);if(void 0!==t.unlocks)for(let e in t.unlocks)try{j[e].isPondered=t.unlocks[e]}catch(t){console.warn("Old save data includes obsolete ponder",e)}if(b("skillsTable")&&H(),void 0!==t.perks)for(let[e,s]of Object.entries(t.perks))if(p(s),o(1495).selectCorrectPerkButton(s),parseFloat(e)>100)break;if(void 0!==t.prestige)for(const[e,o]of Object.entries(t.prestige))try{L(e,o.cost),I(e,o.level)}catch(t){console.warn("error with loading prestige",e,t)}if(function(e){if(void 0!==e.newBuildings)for(let t in e.newBuildings)try{M[t]=e.newBuildings[t]}catch(e){console.warn("error with building",t,e)}if(void 0!==e.buildings){for(let t in e.buildings)try{M[t].count=e.buildings[t],M[t].count>0&&(G(t,M[t].count,M[t].emoji),F(t))}catch(e){console.warn("error with building",t,e)}D()}}(t),P(),V(),C(E.clones.max>=1),B()&&(document.querySelector("#eatFish").style.display="none"),void 0!==t.message&&o(7169).changeMessage(t.message[0],t.message[1],t.message[2]?t.message[2]:null),void 0!==t.time){o(808).setTotalTime(t.time[S]);const e=Date.now()-t.time.time_of_save;for(let t in E){const o=s(t,e);E[t].value+=o,E[t].value>E[t].max&&(E[t].value=E[t].max)}}if(void 0!==t.allVisibleButtons){console.log(t.allVisibleButtons);for(let e in t.allVisibleButtons)c(e)}void 0!==t.connections&&(v(new Map(t.connections)),0===k().size&&v(new Map),console.log(k()));for(let e in y)w(e,y[e]);if(n(),void 0!==t.factories)for(const[e,o]of Object.entries(t.factories))if(o>0)for(let t=1;t<o;++t)O(e);void 0!==t.audioVolume&&(Y(t.audioVolume.music),U(t.audioVolume.sfx))}}},window.saveGame=X},1495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},3671:(e,t,o)=>{const{updateTotal:s}=o(5150),{updateDisplayValue:n}=o(5453),{resources:i}=o(2587);t.setMaterial=function(e,t){void 0!==i[e]&&(i[e].value=t,n(e),s())}},5722:(e,t,o)=>{const{resources:s}=o(2587),{updateTotal:n}=o(5150),{updateDisplayValue:i}=o(5453);t.setMax=function(e,t){void 0!==s[e]&&(s[e].max=t,i(e),n())}},2093:(e,t,o)=>{const{drawAllConnections:s}=o(5150),{updateSidebar:n}=o(5453),{refreshValues:i,combat:r,pauseAnimation:a,battleResult:c,simulateBattle:l}=o(4856),{getSfxVolume:u,playSound:d}=o(5098);function f(){let e="";for(let t of h)t.classList.contains("active")&&(e=t.id);return e}t.getCurrentTab=f;let h=document.querySelectorAll(".tab-content > .content");t.showTab=function(e){console.log("show tab: "+e);let t=f();const o=document.getElementById(e);if(o.classList.add("active"),e===t)return;d("./audio/tab.wav");let n=document.getElementById(t);n&&(n.classList.remove("active"),n.style.opacity="0");let r=document.querySelectorAll(".tab-button");for(let e of r)e.classList.remove("active");setTimeout((()=>{o.classList.add("active")}),100),setTimeout((()=>{o.style.opacity="1"}),200);const a=`#${e}Button`;let u=document.querySelector(a);u&&u.classList.add("active"),"jobsTab"===e&&s(),"combatTab"===e&&(i(),null===c&&l());const h=document.querySelector("canvas#fullscreen"),p=document.body,g=document.documentElement;h.height=Math.min(p.scrollHeight,p.offsetHeight,g.clientHeight,g.scrollHeight,g.offsetHeight),setTimeout((()=>{h.width=document.documentElement.scrollWidth,h.height=Math.max(p.scrollHeight,p.offsetHeight,g.clientHeight,g.scrollHeight,g.offsetHeight),console.log("changed canvas dimensions",h.width,h.height)}),100),console.log(t,">",e)}},5453:(e,t,o)=>{const{calcIncrease:s}=o(8121),{capitalizeFirst:n}=o(6681),{getFactoryProduction:i}=o(1051),{getMaterial:r}=o(3924),{getMax:a}=o(8078),{getCraftedResourceConfigById:c,craftedResources:l}=o(3371),{resources:u}=o(2587);function d(e){var t=!0;return r(e)>0&&(t=!1,u[e]&&(u[e].isVisible=!0)),u[e]&&u[e].isVisible&&(t=!1),t}function f(e){if("number"!=typeof e)return e;function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const h=document.getElementById("resources");function p(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),h.appendChild(o))):o=document.getElementById("resources");const s=n(e).split("_").join(" "),i=document.createElement("p");i.className="resource",i.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${s}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let u=a(e)&&a(e)<1/0?a(e).toFixed(2):"∞";l.textContent=`${r(e).toFixed(2)} / ${u}`;const d=document.createElement("span");return d.className="resourceRate",d.innerHTML=`<span id="${e}IncreaseRate"></span>)`,i.appendChild(c),i.appendChild(l),i.appendChild(d),o.appendChild(i),i}function g(e){const t=h.querySelector(`#${e}Value`),o=h.querySelector(`#${e}IncreaseRate`);if(t){try{const n=r(e),i=a(e);if(t.textContent=`${f(n)} / ${f(i)}`,t.style.color="white",n/i>.6&&(t.style.color="#ffc"),n/i>.8&&(t.style.color="#fec"),n/i>.95&&(t.style.color="#fcc"),o){const t=s(e,1e3);0===t||Number.isNaN(t)?o.parentElement.innerHTML=`<span id="${e}IncreaseRate"></span>`:o.parentElement.innerHTML=`${t>=0?"+":"-"}<span id="${e}IncreaseRate">${t.toFixed(2)}</span>/s`}d(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(u[e]&&u[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}const c=document.querySelector(`#craft${n(e)}Button`);if(c){c.textContent=`${l[e].text||n(e)}`;let t=i(e);NaN!==t&&void 0!==t||(t=0),t>0&&(c.textContent+=`(${t})`)}}e.exports={updateSidebar:function(){const e=o(1051).allMaterials;Array.from(e).forEach((e=>{g(e)}))},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder","violence"],food:["berries","fish","game","wheat","bread","freshwater"],materials:["sticks","vines","rocks","wood","sand","clay","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,s]of Object.entries(t))s.forEach((t=>{let s=document.getElementById("resource-"+t);e||(o=null),s||(s=p(t,o)),d(t)?s.style.display="none":s.style.display=""}))},updateDisplayValue:g,abbreviateNumber:f}},8491:(e,t,o)=>{const{skills:s}=o(2324),{triggerFloatUpText:n}=o(8727),i=function(e){let t={};for(const[o,s]of Object.entries(e))for(const e of s.affectedResources)t[e]||(t[e]=[]),t[e].push(o);return t}(s);console.log(i);let r=!1;function a(){const e=document.getElementById("skillsTable");if(r)for(let e in s){(s[e].exp>0||s[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=s[e].exp+"%",document.querySelector("#level-"+e).textContent=`[level ${s[e].level}] (${Math.floor(s[e].exp).toFixed(0)}%)   ${e}`)}else{console.log("Generating table for the first time"),r=!0;for(let t in s){let o=document.createElement("tr");o.id="tr-"+t;let n=document.createElement("td");n.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent=`[level ${s[t].level} (${s[t].exp}%)]   ${t}`,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==s[t].exp&&0==s[t].level&&(o.style.display="none"),n.appendChild(i),n.appendChild(r),o.appendChild(n),e.appendChild(o)}}}e.exports={updateSkills:function(e,t){if(t=Math.abs(t),o(4369).isPondered("fasterSkills")&&(t*=1.05),!i[e])return;const r=i[e][0].toString();if(s[r].level>=100)return s[r].level=100,void(s[r].exp=0);if(s[r].exp+=t/Math.pow(1.4,s[r].level),s[r].exp>=100){s[r].level+=1,s[r].exp=0;let e=`Level up! ${r} → ${s[r].level}`;const t=document.getElementById("prestige").getBoundingClientRect();n(t.x,t.y,e,"#F4D03F")}o(8751).passedStage("skillsTable")&&a()},populateSkillsTable:a}},8751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},2609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},7864:(e,t,o)=>{const{getMaterial:s}=o(3924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){s("gold",o(2587).resources)>=t&&(o(9594).increaseMaterial("gold",-t),o(9594).increaseMaterial(e,t),i.textContent=s("gold",o(2587).resources))}function a(e,t){s(e,o(2587).resources)>=1&&(o(9594).increaseMaterial("gold",t),o(9594).increaseMaterial(e,-1),i.textContent=s("gold",o(2587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},8727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,s){const n=document.createElement("div");n.textContent=o,n.style.left=`${window.scrollX+e}px`,n.style.top=window.scrollY+t-30+"px",n.style.color=s,n.classList.add("float-up-fade-out"),document.body.appendChild(n),n.addEventListener("animationend",(()=>{n.remove()}))}},5994:(e,t,o)=>{const{getMaterial:s}=o(3924),{getMax:n}=o(8078);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");s("clones")<n("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},2607:(e,t,o)=>{const{capitalizeFirst:s}=o(6681);t.updateBuildingButtonCount=function(e,t,o){document.getElementById(`${e}`).textContent=`${o} ${s(e).split("_").join(" ")} (${t})`}},2831:(e,t,o)=>{const{buildings:s}=o(5882),{updateTooltip:n,hideTooltip:i}=o(8208),{fitCharToCell:r}=o(7531),a=document.getElementById("buildingList");t.updateBuildingList=function(){const e=document.createDocumentFragment();let t=0;for(const[o,n]of Object.entries(s))for(let s=0;s<n.count;++s,++t){let s=(t%6+1).toString(),i=Math.floor(t/6+1).toString();const r=document.createElement("span");r.className="tooltip",r.style.gridColumn=s,r.style.gridRow=i,r.style.fontSize="36px",r.setAttribute("tooltipDesc",o),r.textContent=n.emoji||"?",e.appendChild(r)}a.innerHTML="",a.appendChild(e),a.addEventListener("mouseenter",(e=>{e.target.classList.contains("tooltip")&&n(e.target)}),!0),a.addEventListener("mouseleave",(e=>{e.target.classList.contains("tooltip")&&i()}),!0)}},7667:(e,t,o)=>{const{buttons:s}=o(2054),{getCraftedResourceConfigById:n}=o(3371),{getBuildingCount:i}=o(5882),{isPondered:r,canUnlock:a}=o(4369),{getCraftedResourceKeyByConfig:c}=o(3371),{isButtonIdVisible:l,setVisibleButton:u}=o(8078),{canCraft:d}=o(7064),{canBuyBuilding:f,canStoreBuilding:h,canAffordCost:p}=o(5023),{passedStage:g}=o(8751),{ponders:m,getPonderConfig:b}=o(6397);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled","cant-afford");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),"hidden"!=o&&(o=p(b(e.id).cost)?o:"cant-afford"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var m=n(t.id);m.value>0&&(o="button-disabled");const e=c(m);d(e)&&(o=!t.requiredStage||t.requiredStage&&g(t.requiredStage)?"purchasable":"hidden")}t.data_building&&("hidden"==o&&i(t.data_building)&&(o="cant-afford"),"hidden"!=o&&(o=h(t.data_building)?"button-disabled":"cant-afford"),o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(6842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(s),e.style.display="")}))}},8208:(e,t,o)=>{const{getCraftedResourceConfigById:s}=o(3371),{buildings:n}=o(5882),{ponders:i}=o(6397),{resources:r,getResourceConfigById:a}=o(2587),{calcSecondsRemaining:c}=o(9594),{getMax:l}=o(8078),{getMaterial:u}=o(3924),d=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){d.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||s(e.id)||n[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],h=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||f&&f.cost;!function(e,t,o,s){let n="";function i(e){let t=parseFloat(e);return e.includes("K")?t*=1e3:e.includes("M")?t*=1e6:e.includes("B")&&(t*=1e9),t}if(t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#4cf">${o}</span><hr>`),s)try{if(s.toString().includes("span"))n+=function(e,t){const o=/class="tooltip-(\w+) .+?">([\d.]+[KM]?)\s(\w+)</g;let s,n="";for(;null!==(s=o.exec(e));){const e=s[1],o=s[2],a=i(o);var r=u(e,t)>=a?"enough":"not-enough";l(e)<a&&(r="exceeds-max"),n+=`<span class="tooltip-${e} ${r}">${o} ${e}</span>`;let d=0;t[e]&&(d=c(e,a)),d>0&&"exceeds-max"!=r&&(n+=`<span class="time-remaining">(${d.toFixed(0)} seconds)</span>`),n+="<br>"}return n}(s,r);else{var a="";for(const[e,t]of Object.entries(s)){var f=u(e,r)>=t?"enough":"not-enough";l(e)<t&&(f="exceeds-max"),a+=`<span class="tooltip-${e} ${f}">${t.toFixed(0)} ${e}</span>`;let o=0;r[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=f&&(a+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),a+="<br>"}n+=a}}catch(e){void 0!==s&&"undefined"!==s&&(n+=s)}d.innerHTML=n;const h=e.getBoundingClientRect();d.style.left=h.right+5+"px",d.style.top=h.bottom-d.offsetHeight+"px",d.style.display="block"}(e,t,o,h)}}},o={};function s(e){var n=o[e];if(void 0!==n)return n.exports;var i=o[e]={exports:{}};return t[e](i,i.exports,s),i.exports}s.m=t,e=[],s.O=(t,o,n,i)=>{if(!o){var r=1/0;for(u=0;u<e.length;u++){for(var[o,n,i]=e[u],a=!0,c=0;c<o.length;c++)(!1&i||r>=i)&&Object.keys(s.O).every((e=>s.O[e](o[c])))?o.splice(c--,1):(a=!1,i<r&&(r=i));if(a){e.splice(u--,1);var l=n();void 0!==l&&(t=l)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[o,n,i]},s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={179:0};s.O.j=t=>0===e[t];var t=(t,o)=>{var n,i,[r,a,c]=o,l=0;if(r.some((t=>0!==e[t]))){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);if(c)var u=c(s)}for(t&&t(o);l<r.length;l++)i=r[l],s.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return s.O(u)},o=self.webpackChunkclone_idle=self.webpackChunkclone_idle||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var n=s.O(void 0,[13],(()=>s(808)));n=s.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,