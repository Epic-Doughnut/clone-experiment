(()=>{var e,t={3520:(e,t,o)=>{t.GameSimulator=class{constructor(){this.gameState={resources:{clones:0,sticks:0,vines:0,rocks:0,fish:0,wood:0,ponder:0,ore:0,sand:0,wheat:0,freshwater:0,hides:0,clay:0,herbs:0,game:0,husks:0,violence:0,sharprocks:0,rope:0,handle:0,staff:0,fishingrod:0,spear:0,axe:0,pickaxe:0,glass:0,paper:0,gold:0,iron:0,silver:0,bricks:0,bread:0,steel:0,beams:0,crates:0,nails:0,slabs:0,medicine:0,leather:0,concrete:0},maxes:{clones:0,sticks:50,vines:50,rocks:30,fish:10,wood:40,ponder:20,ore:20,sand:20,wheat:20,freshwater:50,hides:50,clay:50,herbs:50,game:50,husks:1e3,violence:100},buildings:{animal_pen:0,bakery:0,barn:0,barracks:0,campfire:0,desk:0,drying_racks:0,fish_traps:0,fishery:0,forge:0,garden:0,grove:0,herbalist_hut:0,hospital:0,house:0,hut:0,irrigation:0,library:0,lumber_yard:0,marketplace:0,military_school:0,mine:0,observatory:0,reservoir:0,rock_role:0,sand_scoop:0,shed:0,shelter:0,stockpile:0,stone_depot:0,stone_quarry:0,tannery:0,teepee:0,telescope:0,tower:0,traps:0,vineyard:0,warehouse:0,water_pump:0,windmill:0,workshop:0},time:0},this.log=[]}buildingsConst=o(5882).buildings;buyBuilding(e){let t={};for(const[o,s]of Object.entries(this.buildingsConst[e].basecost))t[o]=s*Math.pow(this.buildingsConst[e].ratio,this.gameState.buildings[e]);let o=!0;for(let e in t)if(this.gameState.resources[e]<t[e])return void(o=!1);if(o){for(let e in t)this.gameState.resources[e]-=t[e];if(this.gameState.buildings[e]+=1,this.storage.includes(e))for(const[t,o]of Object.entries(this.buildingsConst[e].effects))this.gameState.maxes[t]+=o}}simulateTick(){this.performActions(),this.updateResources(),this.gameState.time+=1,this.logGameState()}housing=["hut","shelter","house","barracks","hospital","teepee"];storage=["shed","stockpile","workshop","warehouse","drying_racks","water_pump","military_school","barn","herbalist_hut","mine","bakery","animal_pen","reservoir","stone_depot"];buildingPriority=[...this.housing,...this.storage];performActions(){for(let e of Object.values(this.buildingPriority))try{this.buyBuilding(e)}catch(t){console.error("Failed to buy",e,t)}}resourcesToGather=["sticks"];updateResources(){for(let[e,t]of Object.entries(this.resourcesToGather)){let e=0;"sticks"!==t&&"vines"!==t&&"wood"!==t&&"rocks"!==t&&"fish"!==t&&"ore"!==t||(e=1),this.gameState.resources[t]+=(e+.25*this.gameState.resources.clones)/this.resourcesToGather.length,Object.keys(this.gameState.maxes).includes(t)&&this.gameState.resources[t]>this.gameState.maxes[t]&&(this.gameState.resources[t]=this.gameState.maxes[t],"vines"===t&&Math.random()>.5&&(this.gameState.resources.rope+=this.gameState.resources.vines/3,this.gameState.resources.vines=0),"wood"===t&&Math.random()>.5&&(this.gameState.resources.paper+=this.gameState.resources.wood/12,this.gameState.resources.wood=0),"ore"===t&&Math.random()>.5&&(Math.random()>.5?(this.gameState.resources.iron+=this.gameState.resources.ore/20,this.gameState.resources.ore=0):(this.gameState.resources.gold+=this.gameState.resources.ore/100,this.gameState.resources.ore=0)),"sand"===t&&Math.random()>.5&&(this.gameState.resources.paper+=this.gameState.resources.sand/10,this.gameState.resources.sand=0),"clay"===t&&Math.random()>.5&&(this.gameState.resources.bricks+=this.gameState.resources.clay/15,this.gameState.resources.clay=0))}this.gameState.resources.sticks>=10&&!this.resourcesToGather.includes("vines")&&(this.resourcesToGather.push("vines"),console.warn(this.resourcesToGather)),this.gameState.resources.vines>=10&&!this.resourcesToGather.includes("rocks")&&(this.resourcesToGather.push("rocks"),console.warn(this.resourcesToGather)),this.gameState.resources.rocks>=10&&!this.resourcesToGather.includes("fish")&&(this.resourcesToGather.push("fish"),console.warn(this.resourcesToGather)),this.gameState.resources.fish>=10&&!this.resourcesToGather.includes("wood")&&(this.resourcesToGather.push("wood"),console.warn(this.resourcesToGather)),this.gameState.resources.wood>=10&&!this.resourcesToGather.includes("ore")&&(this.resourcesToGather.push("ore"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=1&&!this.resourcesToGather.includes("ponder")&&(this.resourcesToGather.push("ponder"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=3&&!this.resourcesToGather.includes("sand")&&(this.resourcesToGather.push("sand"),console.warn(this.resourcesToGather)),this.gameState.resources.clones>=4&&!this.resourcesToGather.includes("clay")&&(this.resourcesToGather.push("clay"),console.warn(this.resourcesToGather)),this.gameState.resources.clones=this.gameState.buildings.shelter+this.gameState.buildings.hut+2*this.gameState.buildings.house+3*this.gameState.buildings.hospital+2*this.gameState.buildings.teepee+this.gameState.buildings.barracks}logGameState(){const e=JSON.parse(JSON.stringify(this.gameState));this.log.push({time:this.gameState.time,...e})}runSimulation(e){for(let t=0;t<e;t++)this.simulateTick();this.outputResults()}outputResults(){const e=function(e){const t=Object.keys(e[0].buildings),o=Object.keys(e[0].resources),s=(Object.keys(e[0].maxes),[...Object.keys(e[0]).filter((e=>"buildings"!==e&&"resources"!==e)),...t,...o]),n=[s.join(",")];return e.forEach((e=>{const t=s.map((t=>e.buildings&&e.buildings.hasOwnProperty(t)?e.buildings[t]:e.resources&&e.resources.hasOwnProperty(t)?e.resources[t]:e[t]));n.push(t.join(","))})),n.join("\n")}(this.log),t=new Blob([e],{type:"text/csv"}),o=URL.createObjectURL(t),s=document.createElement("a");s.href=o,s.download="data.csv",s.textContent="Download CSV",document.body.appendChild(s),console.table(this.log)}}},1621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},5098:e=>{let t=.5;function o(){return t}let s=.5;function n(){return s}e.exports={setMusicVolume:function(e){t=e},getMusicVolume:o,setSfxVolume:function(e){s=e},getSfxVolume:n,playSound:function(e,t){const s=new Audio(e);s.volume=t?o():n(),s.play()}}},5151:(e,t,o)=>{const{buildings:s,isPopBuilding:n}=o(5882),{increaseMaterial:i,increaseMax:r}=o(9594),{updateTotal:a}=o(5150),{hasPerk:c}=o(134),{getMaterial:l}=o(3924),{passedStage:u}=o(8751),{recalcMaxClones:d}=o(6995),{updateBuildingButtonCount:f}=o(2607),{recalculateBuildingCost:h}=o(8022),{canBuyBuilding:p}=o(5023),{isPondered:g}=o(4369),{updateBuildingList:m}=o(2831),{capitalizeFirst:b}=o(6681),{ponders:y}=o(6397),{logEvent:v,getAnalytics:k}=o(9013),{getPlayerUid:w}=o(9476),{triggerFloatUpText:x}=o(8727),{makeVisible:S}=o(1123),{updateButtonVisibility:C}=o(7667);function B(e){const t=s[e];if(p(e)){u("buildings")||S("buildings"),t.count++;for(const e in t.cost)i(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))r(e,o),"clones"===e&&(d(),a());for(const[e,o]of Object.entries(t.boost)){const t=document.getElementById(`${e}IncreaseRate`);if(!t)continue;const o=t.getBoundingClientRect();x(o.right,o.bottom,"+speed","aqua")}f(e,t.count,JSON.parse(JSON.stringify(t.emoji))),h(e),C(),m(),v(k(),"building_purchase",{building_name:e,user_id:w()})}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){try{const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e){return function(){const t=Object.entries(e).every((([e,t])=>l(e)>=Math.floor(t/2)));return u("clones")&&t}}(o.cost);return{class:"tooltip "+e,tab:"production",text:`${JSON.parse(JSON.stringify(o.emoji))} ${b(e)} (${o.count})`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}}catch(o){console.error("Could not create building button for",e,t,o)}},buyMaxBuildings:function(e){let t=0;for(s[e];p(e);)B(e),++t;return v(k(),"building_purchase_max",{building_name:e,user_id:w(),count:t}),t},buyBuilding:B,generateEffectString:function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));for(const[t,o]of Object.entries(y))g(t)&&t.startsWith("effectiveBuildings")&&(e*=1.03);t.push(`+${e.toFixed(2)}% ${o} production`)}return t.join("<br>")},updateBuildingList:m}},8121:(e,t,o)=>{const{resources:s}=o(2587),{allMaterials:n}=o(4732),{skills:i}=o(2324),{hasPrestige:r,getLevelOfPrestige:a}=o(6425),{ponders:c}=o(6397),{getWorkers:l}=o(5150),{hasPerk:u}=o(134),{isPondered:d}=o(4369),{getFactoryProduction:f,getFactoryConsumption:h}=o(1051),{getMaterial:p}=o(3924),{canCraft:g}=o(7064),{setRate:m}=o(7941);const b={Lumberjack:["wood","sticks"],Miner:["rocks","ore"],Botanist:["vines","herbs","wheat"]},y={gathering:["gatheringBoost"],masonry:["masonryBoost"],carpentry:["carpentryBoost"],thinking:["thinkingBoost"],farming:["farmingBoost"],fishing:["fishingBoost"],hunting:["huntingBoost"]},v={wood:"axe",ore:"pickaxe",fish:"fishingrod",game:"spear",ponder:"paper",sticks:"staff"};function k(e,t){var n=0;const m=o(5882).buildings;"clones"===e&&d("autoClone")&&(n=1),s[e]&&s[e].isGetting&&(n+=1),n+=(u("Leader")?.375:.25)*l(e)||0,r("cloneBoost")&&l(e)>0&&(n*=1.05*l(e)*a("cloneBoost")),n=function(e,t){for(const[o,s]of Object.entries(b))s.includes(t)&&u(o)&&(e*=1.75);return e}(n,e),n=function(e,t){for(const[o,s]of Object.entries(y))if(i[o].affectedResources.includes(t)){s.forEach((t=>{r(t)&&(e*=1.1*a(t))}));let t=1.06,n=1+(Math.pow(t,i[o].level)-1)/100;e*=n}return e}(n,e);for(const t of Object.keys(m)){const s=o(5882).getBoost(t,e);if(s){var k=Math.pow(s,m[t].count);for(const[e,t]of Object.entries(c))d(e)&&e.startsWith("effectiveBuildings")&&(k*=1.03);n*=k}}return d("eatBread")&&p("bread")>0&&("bread"!==e?n*=1.1:"bread"===e&&(n=-1)),n=function(e,t){for(const[o,s]of Object.entries(c))d(o)&&(o.startsWith("fasterResourceGain")&&(e*=1.05),o.startsWith("fasterPonder")&&"ponder"===t&&(e*=1.05));return e}(n,e),n=function(e,t){const o=v[t];return o&&p(o)>10&&(e*=1+Math.log10(p(o)/10)),e}(n,e),p("husks")>10&&(n*=1+Math.log(p("husks")/10)),n=Math.sqrt(n),n+=g(e)?f(e):0,n-=h(e),parseFloat((n*t/1e3).toFixed(3))}t.calcIncrease=k,t.updateRates=function(){Array.from(n).forEach((e=>{m(e,k(e,1e3))}))}},5023:(e,t,o)=>{const{resources:s}=o(2587),{getMaterial:n}=o(3924),{passedStage:i}=o(8751),{getMax:r}=o(8078);function a(e){for(const t in e)if(e[t]>r(t))return!1;return!0}t.canBuyBuilding=function(e){let t=!0;const r=o(5882).buildings[e];for(const e in r.cost)if(r.cost[e]>n(e,s)){t=!1;break}return r.effects&&r.effects.clones&&!i("clone")&&(t=!1),t},t.canStoreBuilding=function(e){return a(o(5882).buildings[e].cost)},t.canAffordCost=a},7064:(e,t,o)=>{const{craftedResources:s}=o(3371),{getMaterial:n}=o(3924);t.canCraft=function(e){if(!s[e])return!1;let t=s[e].cost;for(const[e,o]of Object.entries(t))if(n(e)<o)return!1;return!0}},6681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},7169:(e,t)=>{const o=document.getElementById("message");t.messageElement=o,t.changeMessage=function(e,t,s="You feel peckish for some seafood"){null===s&&(s="You feel peckish for some seafood");const n=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="${s}" tooltipcost="Click to clone yourself.">${t}</span>`);o.innerHTML=n}},4856:(e,t,o)=>{const{getMaterial:s}=o(3924),{increaseMaterial:n}=o(9594),{setMaterial:i}=o(3671),r={husks:{probability:.05,quantity:1},nails:{probability:.1,quantity:50},slabs:{probability:.2,quantity:50},beams:{probability:.1,quantity:60},axe:{probability:.15,quantity:5},spear:{probability:1,quantity:5},gold:{probability:.1,quantity:10},iron:{probability:.15,quantity:50},silver:{probability:.05,quantity:20},steel:{probability:.1,quantity:30},bricks:{probability:.15,quantity:80}};let a={};function c(){return a}function l(){let e={};for(const t in r)if(Math.random()<r[t].probability){const o=Math.floor(r[t].quantity*(.4*Math.random()+.8));o>0&&(e[t]=o)}return a=e,e}const u=document.getElementById("arena");function d(e,t){for(let o=0;o<t;o++){const t=document.createElement("div");t.className=`ball ${e}`,t.style.left=("player"===e?10:90)+"%",t.style.top=10+30*o+"px",u.appendChild(t),"player"===e?f.push(t):h.push(t)}}let f=[],h=[],p=[];const g=3e3;function m(){document.querySelectorAll(".ball").forEach((e=>{const t=e.classList.contains("player")?u.offsetWidth:-u.offsetWidth;p.push(e.animate([{transform:`translateX(${t}px)`}],{duration:g,fill:"none"}).finished.then((()=>{e.remove()})))})),k(),setTimeout((()=>{const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0!==e&&0!==t){for(const e of document.querySelectorAll(".ball"))e.remove();d("player",e),d("enemy",t),m()}}),g-100)}let b=!1;function y(){if(b)return;const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0===e&&t>0?S="enemy":0===t&&e>0&&(S="player"),null!==S){const e=document.getElementById("combatResult");if(e.textContent="player"===S?"You won!":"enemy"===S?"The Enemy won!":"It's a draw! Huh? That's not supposed to happen!",i("violence",0),setTimeout((()=>{x.disabled=!1}),g/2),"player"===S){b=!0;let t=1;"aggressive"===q()&&(t=.75),"careful"===q()&&(t=1.25);for(const[o,s]of Object.entries(a))n(o,s*t),e.innerHTML+=`<br>+${s*t} ${o}`;l()}return null===(o=null===S||"player"===S)||(o?M*=1.3:M/=1.1,M<200&&(M=200)),R(),!0}var o;return!1}function v(e,t){const o=e.getBoundingClientRect(),s=t.getBoundingClientRect();return!(o.right<s.left||o.left>s.right||o.bottom<s.top||o.top>s.bottom)}function k(){!function(e,t){for(let n=0;n<e.length;n++)for(let e=0;e<t.length;e++)v(f[n],h[e])&&(o=f[n],s=h[e],Math.random()<1/(1+Math.pow(10,(T()-B())/C))?s.remove():o.remove());var o,s}(f,h),y()||b||requestAnimationFrame(k)}function w(){const e=B(),t=T(),o=Math.ceil(e/12),s=Math.ceil(t/12),n=Math.max(o,s),i=Math.floor(e/n),r=Math.floor(t/n);return document.getElementById("approximateBall").textContent=n.toString(),[i,r]}const x=document.querySelector("button#startCombat");let S=null;const C=200;function B(){let e=s("violence")+s("spear")+s("medicine");return"aggressive"===q()?e*=1.2:"careful"===q()&&(e*=.8),e}let M=400;function T(){return M}const j=document.getElementById("playerMight"),E=document.getElementById("enemyMight");function A(){const e=B(),t=T(),o=1/(1+Math.pow(10,(t-e)/C));j.textContent=e.toFixed(0),j.setAttribute("tooltipdesc",`${s("violence").toFixed(0)} violence + ${s("spear").toFixed(0)} spears + ${s("medicine").toFixed(0)} medicine`),E.textContent=t.toFixed(0);const n=document.getElementById("chanceToWin");return n.textContent=(100*o).toFixed(1)+"%",n.style.color=`hsl(${(120*o).toString(10)},100%,50%)`,o}let $="balanced";function q(){return $}const D=document.querySelectorAll("button.stance");function O(e){D.forEach((e=>{e.disabled=!1})),document.querySelector(`#${e}Stance`).disabled=!0,function(e){$=e}(e),R()}function R(){Object.keys(c()).length<1&&l();const e=document.getElementById("lootList");e.innerHTML="";for(const[t,o]of Object.entries(c()))e.innerHTML+=`<span>${t} (${o})</span> <br>`;E.textContent=T().toString(),w(),A()}window.switchStance=O,e.exports={combat:function(){S=null;for(const e of document.querySelectorAll(".ball"))e.remove();let[e,t]=w();d("player",e),d("enemy",t),document.getElementById("combatResult").textContent="",x.disabled=!0,b=!1,m()},calculateWinChance:A,refreshValues:R,pauseAnimation:function(){p.forEach((e=>{e.pause()}))},battleResult:S,simulateBattle:function(){S=function(){const e=B(),t=T(),o=1/(1+Math.pow(10,(t-e)/C));return Math.random()<o?"player":"enemy"}(),y()},switchStance:O,getCurrEnemyMight:T,setEnemyMight:function(e){M=e}}},1051:(e,t,o)=>{const{playSound:s}=o(5098),{canCraft:n}=o(7064),{getMaterial:i}=o(3924),{craftedResources:r}=o(3371);var a={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]};let c={},l={};function u(e,t){e&&"none"!==e&&(c[e]--,Array.from(r[e].cost).forEach((e=>{l[e.resource]-=e.amount}))),c[t]?c[t]++:c[t]=1,r[t]&&Array.from(r[t].cost).forEach((e=>{l[e.resource]+=e.amount}))}function d(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const n=document.createElement("span");n.classList.add("factoryCost");const i=document.createElement("select");Object.keys(a).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,i.appendChild(t)})),i.setAttribute("data-produced","none"),i.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=i.value;s("./audio/factoryoption.wav"),u(e,t),this.setAttribute("data-produced",t),t&&"none"!==t&&(document.querySelector(`#resource-${t}`).style.color="thistle",n.innerHTML="",n.innerHTML+=`${o(9594).generateTooltipCost(r[i.value].cost)}`)}));const c=document.createElement("span");return c.innerHTML="&#8594;",t.appendChild(n),t.appendChild(c),t.appendChild(i),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.selected=!0,e.appendChild(o)}(i),e.appendChild(t),t}var f=50;e.exports={createFactoryDiv:d,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,s=a[t];s&&t&&n(t)&&function(e,t){console.trace();let s=[];e.forEach((e=>s.push(i(e)/r[t].cost[e])));let n=Math.min(...s);n*=1,o(9594).craftResourceQuantity(t,n)}(s,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");i("silver"),o(9594).increaseMaterial("silver",-f),d(),s("./audio/factorybuild.wav"),f*=1.2,e.setAttribute("tooltipCost",`${f.toFixed(0)} silver`)},getFactoryProduction:function(e){let t=c[e];return(Number.isNaN(t)||void 0===t)&&(t=0),t},getFactoryConsumption:function(e){let t=l[e];return void 0===t&&(t=0),t},loadFactory:function(e){let t=d();if(e)try{t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(9594).generateTooltipCost(r[e].cost)}`}catch(e){console.warn(e)}const s=document.getElementById("buyFactoryButton");s&&(s.setAttribute("tooltipCost",`${f.toFixed(0)} silver`),u("none",e)),f*=1.2},activeFactoriesProducing:c,addProducing:function(e){c[e]?c[e]++:c[e]=1},addConsuming:function(e,t){l[e]?l[e]+=t:l[e]=t},removeConsuming:function(e,t){l[e]-=t,l[e]<0&&(l[e]=0)},removeProducing:function(e){c[e]--,c[e]<0&&(l[e]=0)}}},7531:(e,t)=>{t.fitCharToCell=function(e,t,o,s){const n=document.createElement("span");n.textContent=e,n.style.fontSize=`${s}px`,n.style.position="absolute",n.style.whiteSpace="nowrap",n.style.visibility="hidden",document.body.appendChild(n);let i=s;for(;n.offsetWidth<t&&n.offsetHeight<o&&(i++,n.style.fontSize=`${i}px`,!(i>=1e3)););return document.body.removeChild(n),i}},215:(e,t,o)=>{const{resources:s}=o(2587),{capitalizeFirst:n}=o(6681),{getSfxVolume:i}=o(5098),{updateDisplayValue:r}=o(5453),{updateRates:a}=o(8121),c=document.querySelector("#resources");const l=document.querySelector("#emojiGatherDisplay");t.toggleResource=function(e){const t=new Audio("./audio/gather.wav");t.volume=i(),t.play();const o=s[e],a=document.querySelector("#resources").querySelector("#resource-"+e),u=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));l.textContent="𓀟",o.isGetting?(o.isGetting=!1,u.classList.remove("gathering"),u.textContent=o.defaultText,a&&(a.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(s)){t.isGetting=!1;const o=document.querySelector("#gather"+n(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const s=c.querySelector("#resource-"+e);s&&(s.style.fontWeight="normal"),r(e)}}(),o.isGetting=!0,u.textContent=o.activeText,a&&(a.style.fontWeight="bold"),l.textContent=o.emoji,u.classList.add("gathering")),r(e)}},429:(e,t,o)=>{const{craftedResources:s,getCraftedResourceConfigById:n}=o(3371),{buildings:i}=o(5882),{buttons:r}=o(2054),{generateTooltipCost:a}=o(9594),{createBuildingButton:c}=o(5151),{hasPerk:l}=o(134),{recalculateBuildingCost:u}=o(8022),{showTab:d}=o(2093),{updateDisplayValue:f}=o(5453),{addProducing:h,removeProducing:p,addConsuming:g,removeConsuming:m}=o(1051);function b(e,t){const o=document.createElement("button");return o.id=t,o.className=e.class,o.textContent=e.text.split("_").join(" "),e.tooltipDesc&&o.setAttribute("data-tooltip-desc",e.tooltipDesc),e.tooltipEffect&&o.setAttribute("data-tooltip-effect",e.tooltipEffect),o.setAttribute("unlock",e.unlock),o.setAttribute("data_building",e.data_building),o}t.generateButtons=function(){console.trace();for(let e in i){const t=c(e,i);r[e]=t}const e=document.getElementById("tabs"),t=document.getElementById("productionTab"),o=document.getElementById("experimentTab").querySelector(".button-columns"),s=document.getElementById("ponderTab"),n=function(e){const t=[];for(let o=0;o<3;o++){const o=document.createElement("div");o.style.width="33.33%",o.style.display="inline-block",o.classList.add("visible"),e.prepend(o),t.push(o)}return t}(o);let a=1,l=0,f=1;for(let o in r){const c=r[o],h=b(c,o);h.setAttribute("data-tooltip-cost",c.tooltipCost),c.showTab&&h.addEventListener("click",(()=>{d(c.showTab)})),"production"===c.tab?(h.style.gridColumn=a.toString(),a=a%4+1,t.appendChild(h)):"experiment"===c.tab?(n[l].appendChild(h),l=(l+1)%3):"tabs"===c.tab?e.appendChild(h):"ponder"===c.tab?(h.style.gridColumn=f.toString(),f=f%4+1,s.appendChild(h)):"job"===c.tab||document.getElementById(c.tab).appendChild(c),Object.keys(i).find((e=>e===o))&&u(o);try{c.requirement()||(h.style.display="none")}catch(e){}}}},6900:(e,t,o)=>{const{capitalizeFirst:s}=o(6681),{craftedResources:n}=o(3371),{resources:i}=o(2587),r=Object.keys(i).filter((e=>"husks"!==e)),a=Object.keys(n);function c(e,t){return Math.random()*(t-e)+e}function l(){const e=[{start:78107,end:78142},{start:78307,end:78367}],t=e[Math.floor(Math.random()*e.length)],o=Math.floor(c(t.start,t.end+1));return String.fromCodePoint(o)}const u=["bustling","majestic","ancient","elegant","hidden","glorious","enchanted","whispering","mystical","luminous","radiant","spectacular","dazzling","serenade","celestial","vibrant","imposing","venerable","immaculate","enigmatic","harmonious","ethereal","resplendent","tranquil","serene","awe-inspiring","peaceful","picturesque","captivating"],d=["Sanctuary","Citadel","Haven","Monastery","Outpost","Observatory","Stronghold","Palace","Temple","Manor","Keep","Chateau","Acropolis","Cathedral","Villa","Fortress","Bastion","Lighthouse","Castle","Coliseum","Pyramid","Mansion","Estate","Museum","Tower","Hall","Library","Gallery","Bazaar"],f=["sanctuary","citadel","haven","monastery","outpost","observatory","stronghold","palace","temple","manor"],h=["provides","enhances","imbues","radiates","embodies","inspires","evokes","exudes","bestows","creates"],p=["with","through","amidst","beneath","above","alongside"],g=["and","while","as","although","yet"];function m(e,t){return e<t?t:Math.round(e/t)*t}t.generateRandomBuilding=function(){const e=function(){const e=u[Math.floor(Math.random()*u.length)],t=d[Math.floor(Math.random()*d.length)];return`${s(e)} ${t}`}(),t=function(){const e=u[Math.floor(Math.random()*u.length)],t=u[Math.floor(Math.random()*u.length)],o=f[Math.floor(Math.random()*f.length)],n=h[Math.floor(Math.random()*h.length)],i=p[Math.floor(Math.random()*p.length)],r=g[Math.floor(Math.random()*g.length)];let a="";switch(Math.floor(6*Math.random())){case 0:a=`${e} ${o} that ${n} an aura of splendor.`;break;case 1:a=`${s(i)} its ${e} appearance, the ${o} ${n} an aura of ${t}.`;break;case 2:a=`${s(e)} ${o} ${n} gracefully, exuding an enchanting atmosphere.`;break;case 3:a=`The ${o} is ${e} and ${n} with a sense of wonder.`;break;case 4:a=`Amidst the ${e} surroundings, the ${o} ${n} tranquility and beauty.`;break;case 5:a=`An ${e} ${o} that ${n} an aura of charm ${r} mystique.`;break;default:a=`${s(e)} ${o} that ${n} an aura of splendor.`}return a}(),o=c(1,3),n={};for(let e=0;e<o;e++)n[r[Math.floor(Math.random()*r.length)]]=m(Math.floor(100*Math.random()*(5-o)),10);const i=c(0,1);for(let e=0;e<i;e++)n[a[Math.floor(Math.random()*a.length)]]=m(Math.floor(50*Math.random()),5);const b={},y=c(0,1);for(let e=0;e<y;e++){const e=r[Math.floor(Math.random()*r.length)];let t=Math.floor(c(30,200));"clones"===e?t=Math.floor(c(1,3)):"husks"===e&&(t=Math.floor(c(1,10))),b[e]=m(t,10)}const v={},k=c(0===y?1:0,1);for(let e=0;e<k;e++){const e=r[Math.floor(Math.random()*r.length)],t=c(1.01,1.2);v[e]=m(t,5)}return{name:e,description:t,basecost:n,cost:n,effects:b,boost:v,count:0,ratio:c(1.3,1.6),emoji:l()}}},6590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(3371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},3924:(e,t,o)=>{const{getCraftedResource:s}=o(6590);t.getMaterial=function(e,t){return t||(t=o(2587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},8078:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(6425),{resources:i,isResource:r}=o(2587),{skills:a}=o(2324),{isPondered:c}=o(4369),{passedStage:l}=o(8751),{updateBounceAnimation:u}=o(5994);let d=new Set(["gatherSticks"]);t.allVisibleButtons=d,e.exports={getMax:function(e){if(r(e)){let t=i[e].basemax,r=t;for(const[t,s]of Object.entries(o(5882).buildings))s.effects&&s.effects[e]&&(r+=s.effects[e]*s.count);if(s("storageSpace")&&"clones"!==e)r+=t*(1.05*n("storageSpace"));else if("clones"===e){l("clone")&&(r+=1);const e=o(5882).buildings;c("biggerShelter")&&(r+=1*e.shelter.count),c("biggerHut")&&(r+=1*e.hut.count),c("biggerHouse")&&(r+=2*e.house.count),c("biggerTeepee")&&(r+=4*e.teepee.count),c("evenBiggerShelter")&&(r+=1*e.shelter.count),s("maxClones")&&(r+=1*n("maxClones"))}return r}return 1/0},calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return d.has(e)},setVisibleButton:function(e){d.add(e)},clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},6842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combatTab",hunting:"hunting"}},5150:(e,t,o)=>{const{skills:s}=o(2324),{resources:n}=o(2587),{getMaterial:i}=o(3924),{getMax:r}=o(8078),{triggerFloatUpText:a}=o(8727),{playSound:c}=o(5098),l={};for(let e in s)l[e]=0;const u=document.getElementById("jobsTab");let d=0;function f(){var e=0;for(let t in l)e+=l[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),t.style.gridColumn=d%2+1,++d,u.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(c("./audio/job.wav"),i("clones",n)>f()){const o=e.clientX,s=e.clientY;if(e.shiftKey){let e=i("clones",n)-f();l[t]+=e,a(o,s,`+${e} workers`,"green")}else if(e.ctrlKey){let e=Math.min(10,i("clones",n)-f());l[t]+=e,a(o,s,`+${e} workers`,"green")}else l[t]++,a(o,s,"+1 worker","green");p(t,l[t]),m(t),b()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job"),o=e.clientX,s=e.clientY;if(c("./audio/job.wav"),e.shiftKey){let e=l[t];l[t]=0,e>0&&a(o,s,`-${e} workers`,"red")}else if(e.ctrlKey){let e=Math.min(10,l[t]);l[t]-=e,a(o,s,`-${e} workers`,"red")}else l[t]>0&&(l[t]--,a(o,s,"-1 worker","red"));p(t,l[t]),m(t),b()}))}));let h=new Map;function p(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let t of o)h.set(t,r),r>0&&g(e,t);let a=t-r*i;for(let t of o)a>0&&(h.set(t,h.get(t)+1),a--,g(e,t))}function g(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const s=document.getElementById(`resource-${t}`);if(!s||"none"===s.style.display)return;const n=o.getBoundingClientRect(),i=s.getBoundingClientRect(),r=document.createElement("div");r.style.position="absolute",r.style.width="10px",r.style.height="10px",r.style.borderRadius="50%",r.style.backgroundColor="white",r.style.opacity=".8",r.style.left=`${n.left+window.scrollX}px`,r.style.top=`${n.top+window.scrollY}px`,document.body.appendChild(r),r.animate([{transform:`translate(${i.left-n.left}px, ${i.top-n.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{r.style.display="none"}}function m(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${l[e]}`),o(9594).updateEmojiDisplay()}function b(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+f()+" / "+r("clones")}let y=new Map,v=document.getElementById("lineCanvas"),k=v.getContext("2d");function w(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;k.beginPath(),k.moveTo(n,i),k.lineTo(t,o),k.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,u=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.lineTo(a,c),e.closePath(),e.fill()}(k,n,i,t,o,10)}function x(e,t){let o=l[e];l[e]=0,l[t]+=o,m(e),m(t)}v.width=window.innerWidth,v.height=window.innerHeight,e.exports={clearJobAssignments:function(){k.clearRect(0,0,v.width,v.height),y=new Map},reassignJobsBasedOnResources:function(){try{const e=y.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,u=s[e].affectedResources;if(!u)return;for(const e of u)if(void 0!==n[e]&&i(e)<n[e].max){c=!1;break}c&&l[e]>0&&(x(r,a),p(r,l[r]),p(a,l[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:x,drawAllConnections:function(){k.clearRect(0,0,v.width,v.height);try{for(let[e,t]of y.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,w(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return h.get(e)},updateTotal:b,setConnections:function(e){y=e},getConnections:function(){return y},distributeWorkers:p,updateDisplay:m,jobCounts:l,resetAllJobs:function(){for(let e in s)l[e]=0,p(e,0),b(),m(e)}}},4732:(e,t,o)=>{const{resources:s}=o(2587),{craftedResources:n}=o(3371);var i=[];Object.keys(s).forEach((e=>i.push(e))),Object.keys(n).forEach((e=>i.push(e))),t.allMaterials=i},5882:(e,t,o)=>{const{hasPerk:s}=o(134),{recalcMaxClones:n}=o(6995),{recalculateBuildingCost:i}=o(8022),{updateBuildingButtonCount:r}=o(2607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},tepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},hospital:{basecost:{concrete:10,medicine:20,fish:20},effects:{clones:3},boost:{},count:0,ratio:1.7,tooltipDesc:"Keep yourself safe.",emoji:"+"},barracks:{basecost:{spear:20,violence:1,wood:200},effects:{clones:1,violence:20},boost:{},count:0,ratio:1.5,tooltipDesc:"A hall of raucous soldiers.",emoji:"𓈏"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.2,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30,wood:40},effects:{wood:100},ratio:1.2,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_rack:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.2,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.4,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,bread:10,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},reservoir:{basecost:{rocks:100,clay:50,water:10},effects:{water:100},boost:{},count:0,ratio:1.3,tooltipDesc:"A hole filled with water. Useful.",emoji:"𓈞"},stone_depot:{basecost:{rocks:200},effects:{rocks:250},boost:{},count:0,ratio:1.2,tooltipDesc:"A big stack of rocks.",emoji:"𓈓"},warehouse:{basecost:{crates:10,concrete:20},effects:{wood:100,rocks:100,clay:100,sand:100},boost:{},count:0,ratio:1.3,tooltipDesc:"Put stuff in a box inside a larger box.",emoji:"𓇦"},military_school:{basecost:{bricks:20,violence:10},effects:{violence:100},boost:{violence:1.05},count:0,ratio:1.4,tooltipDesc:"Learn the art of hurting others.",emoji:"𓇻"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_trap:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.02},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{fish:50},boost:{},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},irrigation:{basecost:{freshwater:20},effects:{},boost:{wheat:1.05},count:0,ratio:1.2,tooltipDesc:"Wetten your wheat with water.",emoji:"𓈗"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,gold:1},effects:{},boost:{all:1.05},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"𓇬"},garden:{basecost:{beams:20,herbs:20,freshwater:10},effects:{},boost:{herbs:1.1,sticks:1.05},count:0,ratio:1.3,tooltipDesc:"Nice nature, carefully cultivated.",emoji:"𓆷"},sand_scoop:{basecost:{beams:10,iron:5},effects:{},boost:{sand:1.1},count:0,ratio:1.2,tooltipDesc:"Scoop the sand from the shore? Sure!",emoji:"𓄛"},traps:{basecost:{nails:10,sticks:20,herbs:20,vines:15},effects:{},boost:{game:1.1},count:0,ratio:1.2,tooltipDesc:"Watch your step!",emoji:"𓄦"},rock_role:{basecost:{slabs:20,freshwater:30,vines:15},effects:{},boost:{rocks:1.2},count:0,ratio:1.3,tooltipDesc:"In order to gather the rock you must become the rock.",emoji:"𓆇"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,r(e,0),i(e);n()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"tepee":case"hospital":case"barracks":return!0;default:return!1}}}},2054:(e,t,o)=>{const{passedStage:s}=o(8751),{getMaterial:n}=o(3924),{hasTool:i}=o(2609),{resources:r}=o(2587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"Free",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button active",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},combatTabButton:{class:"tab-button",text:"Combat",showTab:"combatTab",tab:"tabs",requirement:()=>s("combatTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},3371:e=>{const t={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together (+ stick production)",tooltipCost:"Handles: 2",class:"rocks"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life (+ fish production)",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rope",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle (+ wood production)",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds (+ ore production)",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory (+ ponder production)",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},bread:{id:"craftBreadButton",value:0,cost:{wheat:13},craftedOnce:!1,requiredStage:"agriculture",tooltipDesc:"I'm gonna grind your wheat to make my bread!",tooltipcost:"",class:"agriculture"},steel:{id:"craftSteelButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{iron:5}},beams:{id:"craftBeamsButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{wood:10}},crates:{id:"craftCratesButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{wood:15}},nails:{id:"craftNailsButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{iron:1}},slabs:{id:"craftSlabsButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{rocks:20}},medicine:{id:"craftMedicineButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{herbs:50}},leather:{id:"craftLeatherButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{hides:10}},concrete:{id:"craftConcreteButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{sand:32}},wood:{id:"craftWoodButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{sticks:8}},sticks:{id:"craftSticksButton",tooltipDesc:"Can only be crafted with a factory",requiredStage:"factory",class:"factory",value:0,cost:{wood:.1}}};e.exports={craftedResources:t,getCraftedResourceConfigById:function(e){for(const[o,s]of Object.entries(t))if(s.id===e)return s;return null},getCraftedResourceKeyByConfig:function(e){for(let o in t)if(t[o].id===e.id)return o;return null},resetCraftedResources:function(){for(const[e,o]of Object.entries(t))o.value=0,o.craftedOnce=!1}}},7941:(e,t,o)=>{const{allMaterials:s}=o(4732);var n={};function i(){console.log("Showing global rates"),console.log(n)}function r(e,t){n[e]=t}window.showGlobalRates=i,s.forEach((e=>{r(e,0)})),e.exports={setRate:r,getRate:function(e){return n[e]},showGlobalRates:i}},7055:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},6397:(e,t,o)=>{const{capitalizeFirst:s}=o(6681);let n={"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combatTab:{id:"ponderCombatTab",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factory:{id:"ponderFactory",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double Tepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}},eatBread:{id:"ponderEatBread",requirement:()=>!0,isPondered:!1,text:"Eat Bread",tooltipDesc:"Eating some bread will help you work faster",cost:{ponder:400,bread:30}}};function i(e){const t=[{value:1e3,numeral:"M"},{value:900,numeral:"CM"},{value:500,numeral:"D"},{value:400,numeral:"CD"},{value:100,numeral:"C"},{value:90,numeral:"XC"},{value:50,numeral:"L"},{value:40,numeral:"XL"},{value:10,numeral:"X"},{value:9,numeral:"IX"},{value:5,numeral:"V"},{value:4,numeral:"IV"},{value:1,numeral:"I"}];let o="";for(const s of t)for(;e>=s.value;)o+=s.numeral,e-=s.value;return o}!function(e){for(let e=1;e<=100;e++)n[`fasterResourceGain${e}`]={id:`ponderFasterResourceGain${e}`,isPondered:!1,cost:{ponder:40*Math.pow(3,e-1)},requirement:()=>!0,text:`Productivity ${i(e)}`,tooltipDesc:"Just work harder. Bonus to resource gain"};for(let e=1;e<=100;e++)n[`fasterPonder${e}`]={id:`ponderFasterPonder${e}`,isPondered:!1,cost:{ponder:10*Math.pow(5,e-1)},text:`Think Harder ${i(e)}`,tooltipDesc:"Small boost to pondering speed",requirement:()=>!0};for(let e=1;e<=100;e++)n[`effectiveBuildings${e}`]={id:`ponderEffectiveBuildings${e}`,isPondered:!1,cost:{ponder:30*Math.pow(3,e-1)},text:`Buildings ${i(e)}`,tooltipDesc:"Increase building effects by a small amount",requirement:()=>!0}}(),e.exports={ponders:n,resetPonders:function(){for(const[e,t]of Object.entries(n))t.isPondered=!1},getPonderConfig:function(e){for(const[t,o]of Object.entries(n))if(o.id===e)return o;return null}}},6425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o,setPrestigeCost:function(e,o){t[e].cost=o},setPrestigeLevel:function(e,o){t[e].level=o}}},2587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,basemax:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",basemax:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",basemax:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",basemax:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],basemax:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,basemax:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,basemax:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",basemax:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",basemax:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",basemax:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",basemax:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",basemax:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",basemax:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",basemax:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",basemax:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",basemax:1e3},violence:{value:0,id:"gatherViolence",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"",basemax:100}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0},getBaseMax:function(e){return t[e].basemax}}},2324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:["violence"]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,resetCraftedResources:n}=o(3371),{buildings:i,resetBuildings:r}=o(5882),{ponders:a,resetPonders:c}=o(6397),{buttons:l}=o(2054),{resources:u,resetResources:d}=o(2587),{saveGame:f,loadGame:h}=o(502),{appendCraftedResourceButtons:p,increaseMaterial:g,craftAllResources:m,craftResource:b,updateResourceIncreaseRates:y,increaseMax:v}=o(9594),{buyMaxBuildings:k,buyBuilding:w}=o(5151),{selectAbility:x,resetPerks:S}=o(134),{clearSidebar:C,getMax:B}=o(8078),{makeVisible:M}=o(1123),{updateButtonVisibility:T}=o(7667),{getCraftedResource:j}=o(6590),{getMaterial:E}=o(3924),{buyFactory:A,attemptManufacture:$}=o(1051),{isPondered:q,generatePonderButtons:D}=o(4369),{hasTool:O,addTool:R}=o(2609),{getAteFish:P,setAteFish:L}=o(1621),{updateTotal:I,clearJobAssignments:F,resetAllJobs:G}=o(5150),{capitalizeFirst:V}=o(6681),{passedStage:H,resetStages:_}=o(8751),{recalcMaxClones:N}=o(6995),{initializeResourceTags:W,updateSidebar:z,updateDisplayValue:J}=o(5453),{prestige:U}=o(6425),{triggerFloatUpText:Y}=o(8727),{updateBounceAnimation:K}=o(5994),{updateTooltip:X,hideTooltip:Q}=o(8208),{canCraft:Z}=o(7064),{calculateWinChance:ee,combat:te,switchStance:oe}=o(4856),{showTab:se,getCurrentTab:ne}=o(2093),{getSfxVolume:ie,getMusicVolume:re,setMusicVolume:ae,setSfxVolume:ce,playSound:le}=o(5098),{generateRandomBuilding:ue}=o(6900),{changeMessage:de,messageElement:fe}=o(7169),{generateButtons:he}=o(429),{toggleResource:pe}=o(215),{GameSimulator:ge}=o(3520),{initializeApp:me}=o(5752),{getAnalytics:be}=o(9013),{setMaterial:ye}=o(3671),{recalculateAllBuildingCosts:ve}=o(8022),{setPetals:ke,startPetalRendering:we}=o(6124),{getRate:xe}=o(7941),{allMaterials:Se}=o(4732),{updateRates:Ce}=o(8121),Be={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},Me=[{condition:()=>E("sticks",u)>=1,action:()=>M("stick")},{condition:()=>E("sticks",u)>=10,action:()=>M("vines")},{condition:()=>E("vines",u)>=10,action:()=>M("rocks")},{condition:()=>E("rocks",u)>=1,action:()=>{M("tab-button"),M("craftRocks")}},{condition:()=>j("spear",s)>0,action:()=>M("spear")},{condition:()=>E("fish",u)>=1,action:()=>M("fishing")},{condition:()=>O("Axe"),action:()=>M("wood")},{condition:()=>j("rope")>=1,action:()=>M("rope")},{condition:()=>E("fish",u)>=5&&!P(),action:()=>M("eatFish")},{condition:()=>P(),action:()=>{M("clone"),M("ponder-tab")}},{condition:()=>q("ponderFinish"),action:()=>(document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>q("biggerShelter"),action:()=>N()},{condition:()=>q("biggerHut"),action:()=>N()},{condition:()=>q("biggerHouse"),action:()=>N()},{condition:()=>q("biggerTeepee"),action:()=>N()},{condition:()=>q("evenBiggerShelter"),action:()=>N()},{condition:()=>E("clones")>=30,action:()=>M("prestige")},{condition:()=>E("clay")>0,action:()=>M("clay")},{condition:()=>!document.getElementById("toggle-basics")&&q("organization"),action:()=>W(!0)},{condition:()=>H("combatTab"),action:()=>ee()},{condition:()=>H("factory"),action:()=>M("factory-button")}],Te=["./audio/song1.wav","./audio/song2.wav","./audio/song3.wav","./audio/song4.wav","./audio/song5.wav","./audio/song6.wav","./audio/song7.wav","./audio/song8.wav","./audio/song9.wav","./audio/song10.wav"];let je=null,Ee=null;function Ae(){je&&(je.pause(),je.currentTime=0);const e=Math.floor(Math.random()*Te.length);je=new Audio(Te[e]),je.volume=re(),je.play(),function(){Ee&&clearTimeout(Ee);const e=3e4*Math.random()+5e3;je.onended=()=>{Ee=setTimeout(Ae,e)}}()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":se("productionTab");break;case"2":H("tab-button")&&se("experimentTab");break;case"3":H("ponder-tab")&&se("ponderTab");break;case"4":H("jobs-tab")&&se("jobsTab");break;case"5":H("skillsTable")&&se("skillsTab");break;case"6":H("perksTab")&&se("perksTab");break;case"7":H("combatTab")&&se("combatTab");break;case"a":"combatTab"===ne()&&oe("aggressive");break;case"b":"combatTab"===ne()&&oe("balanced");break;case"c":"combatTab"===ne()&&oe("careful");break;case"f":"combatTab"!==ne()||document.getElementById("startCombat").disabled?pe("fish"):te();break;case"s":pe("sticks");break;case"r":H("rocks")&&pe("rocks");break;case"v":H("vines")&&pe("vines");break;case"w":H("wood")&&pe("wood");break;case"o":H("ore")&&pe("ore");break;case"p":H("ponder-tab")&&pe("ponder");break;case"Escape":ze();break;case" ":e.target===document.body&&e.preventDefault(),H("clone")&&Ue(e)}}));const $e=document.body;$e.classList.toggle("dark-mode");let qe=!0;function De(){Ye.style.display="flex",Ye.style.opacity="1",setTimeout((()=>{Ke.style.opacity="1"}),2e3),setTimeout((()=>{Xe.style.display="block",Xe.style.opacity="1"}),5e3)}let Oe=50,Re=null,Pe=0,Le=0;function Ie(e){null===Re&&(Re=e);const t=e-Re;Pe+=t,Le+=t,Re=e;let o=Oe;for(Le>=10*Oe&&(Oe=Le/10);Le>=Oe;)Le-=Oe,We(Oe);Oe=o,requestAnimationFrame(Ie)}let Fe=0,Ge=0,Ve=0;const He=1e4,_e=1e3,Ne=1e3;function We(e){Array.from(Se).forEach((t=>{g(t,xe(t)*e/1e3)})),Ve+=e,Ne<Ve&&(function(){for(let e=Me.length-1;e>=0;e--){const t=Me[e];t.condition()&&(t.action(),Me.splice(e,1))}for(let e in Be)!O(e)&&j(e)>0&&(R(e),M(Be[e]));try{T(),Ce(),null!==et&&X(et)}catch(e){console.warn(e)}}(),Ve=0),Fe+=e,Ge+=e,Pe+=e,Fe>=He&&(f(),Fe=0),H("factoryTab")&&Ge>=_e&&(Ge=0,$())}function ze(){le("./audio/options.wav",!1);const e=document.getElementById("optionsMenu");e.style.display="none"===e.style.display?"block":"none"}let Je=!1;function Ue(e){let t="+1 Clone";E("clones")<B("clones")?u.clones.value+=1:t="Max Clones",le("+1 Clone"===t?"./audio/clone.wav":"./audio/failclone.wav");const o=e.pageX||10,s=e.pageY||120;Y(o,s,t,"+1 Clone"===t?"green":"red"),I(),J("clones")}document.addEventListener("DOMContentLoaded",(e=>{const t=me({apiKey:"AIzaSyCotsZUfpU3dBSARhviv3oKtlnEyv7e_gk",authDomain:"clone-experiment.firebaseapp.com",projectId:"clone-experiment",storageBucket:"clone-experiment.appspot.com",messagingSenderId:"1028768441674",appId:"1:1028768441674:web:2bf0906e5a94f5b2400db3",measurementId:"G-M45BJLXJFR"});be(t),D(a),h(),he(),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{A()}))}(),p(),W(),h(),C(),W(q("organization")),z(),se("productionTab"),o(7864).generateTradeTable(u),document.addEventListener("click",(e=>{if(null===je&&Ae(),e.target.matches("button")){const n=e.target;if(n.getAttribute("data_building")&&"undefined"!==n.getAttribute("data_building")&&n.classList.contains("purchasable")){var t=n.getAttribute("data_building");const o=e.clientX,s=e.clientY;le("./audio/building.wav",!1);const i=V(t).split("_").join(" ");if(e.shiftKey){let e=k(t);Y(o,s,`+${e} ${i}s`,"aqua")}else w(t),Y(o,s,`+1 ${i}`,"aqua")}else if(n.classList.contains("unlock")){const e=n.getAttribute("unlock");if(a[e]){var o=!0;for(let t in a[e].cost)if(E(t,u)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)g(t,-a[e].cost[t]);a[e].isPondered=!0,M(e),n.display="none",le("./audio/ponder.wav",!1),"organization"===e&&(f(),location.reload()),e.startsWith("ponderEffectiveBuildings")&&ve()}}}else if("undefined"!==n.id)if("gather"===n.id.slice(0,6))pe(function(e){for(const[t,o]of Object.entries(u))if(o.id===e)return t;return"error "+e}(n.id));else if("craft"===n.id.slice(0,5)){le("./audio/craft.wav",!1);let t=function(e){for(const[t,o]of Object.entries(s))if(o.id===e)return t;return"error "+e}(n.id);Z(t)&&Y(e.clientX,e.clientY,`+${t}`,"aqua"),e.shiftKey?m(t):b(t)}else"saveButton"===n.id?(le("./audio/options.wav"),f()):"eatFish"===n.id?function(){if(!P()&&E("fish",u)>=1){const e=new Audio("./audio/fish.wav");e.volume=ie(),e.play(),g("fish",-1),Ke.textContent="That fish didn't taste too good, hopefully you won't need to pilot any airplanes. Who's that standing there?",De(),L(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{de("You are with yourself in a forest.","with yourself","You feel peckish for some seafood."),v("clones",1),g("clones",1)}),1e3)}}():"overlay-button"===n.id?(Ke.style.opacity="0",Xe.style.opacity="0",Ye.style.opacity="0",setTimeout((()=>{Ye.style.display="none"}),1e3),document.getElementById("isekaiButtons").innerHTML=""):"deleteSaveButton"===n.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?tt():"clearJobAssignments"===n.id?F():"darkModeToggle"===n.id?($e.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),qe=!qe,darkModeToggle.textContent=qe?"Light Mode":"Dark Mode"):"prestige"===n.id?Ze():"startCombat"===n.id&&te();if(n.classList.contains("tierOneButton")){let e=n.textContent;x(e)}}e.target.matches("#alone")&&Ue(e),z()})),document.getElementById("optionsButton").addEventListener("click",ze),document.getElementById("musicVolume").value=re(),document.getElementById("musicVolume").addEventListener("input",(function(){ae(this.value),je.volume=re()})),document.getElementById("sfxVolume").value=ie(),document.getElementById("sfxVolume").addEventListener("input",(function(){ce(this.value)})),requestAnimationFrame(Ie),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){X(e),et=e})),e.addEventListener("onclick",(function(){X(e)})),e.addEventListener("mouseleave",(function(){Q(),et=null}))})),I(),K(),ye("clones",B("clones"))}));const Ye=document.getElementById("overlay"),Ke=document.getElementById("overlay-text"),Xe=document.getElementById("overlay-button"),Qe=document.getElementById("overlay-back-button");function Ze(){Xe.addEventListener("click",(()=>{const t=E("clones")+E("husks");d(),n(),c(),S(),r(),G(),_(),le("./audio/isekaiconfirm.wav",!1);for(let[e,t]of Object.entries(u))t.max=100;g("husks",t),Ye.style.display="none";let o=null;for(let t=0;t<e;t++){const e=ue();i[e.name.split(" ").join("_")]=e,o=e}de("You are in another world.","another",`You feel a need to acquire ${Object.values(o.cost).join(",")}`),W(!1),f(),location.reload()}));const e=4;Qe.addEventListener("click",(()=>{Ye.style.display="none"}));const t=new Audio("./audio/isekai.wav");t.volume=ie(),t.play();const o=document.getElementById("husksIsekaiValue");let s;s=o||document.createElement("p"),s.id="husksIsekaiValue",s.innerHTML=`Husks:  ${E("husks")} <br> You will get ${E("clones")} Husks post-isekai.<br>You will receive ${e} randomly generated new buildings, unique to this new world.`,s.style.opacity="0",Ye.prepend(s),Ye.style.backgroundColor="MidnightBlue",Ke.textContent="You step through to another world.",De(),setTimeout((()=>{Qe.style.display="block"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(U).forEach((o=>{const n=document.createElement("button");n.innerHTML=`<b>${U[o].text}</b><br>Level: ${U[o].level}<br>Cost: ${U[o].cost}`,n.setAttribute("tooltipCost",U[o].cost),n.setAttribute("tooltipDesc",U[o].tooltipDesc),n.classList.add("tooltip"),n.style.gridColumn=(t%4+1).toString(),n.style.gridRow=Math.floor(t/4+1).toString(),++t,n.addEventListener("click",(()=>{E("husks")<U[o].cost||(U[o].level++,g("husks",-U[o].cost),U[o].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(U[o].cost),n.setAttribute("tooltipCost",U[o].cost),n.innerHTML=`<b>${U[o].text}</b><br>Level: ${U[o].level}<br>Cost: ${U[o].cost}`,s.textContent="Husks: "+E("husks"),X(n))})),n.addEventListener("contextmenu",(e=>{e.preventDefault(),U[o].level<=0||(U[o].level--,U[o].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(U[o].cost),n.setAttribute("tooltipCost",U[o].cost),g("husks",U[o].cost),n.innerHTML=`<b>${U[o].text}</b><br>Level: ${U[o].level}<br>Cost: ${U[o].cost}`,s.textContent="Husks: "+E("husks"),X(n))})),e.appendChild(n),n.addEventListener("mouseenter",(function(e){X(n),et=n})),n.addEventListener("mouseleave",(function(){Q(),et=null}))}))}),5e3),setTimeout((()=>{s.style.opacity="1"}),5e3)}var et=null;function tt(){localStorage.removeItem("save"),Je=!0,location.reload()}e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${u[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){Pe=e},changeMessage:de,getMessage:function(){return fe},total_time:Pe,currentHoverButton:et,deleteGame:tt,isekai:Ze,update:We},window.deleteGame=tt,window.isekai=Ze},1123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(8751),{updateButtonVisibility:i}=o(7667);t.makeVisible=function(e){n(e)||s(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),i()}},134:(e,t,o)=>{const{buildings:s}=o(5882),{perks:n}=o(7055);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e){const e=o(5882).buildings;for(let t of Object.keys(e))o(8022).recalculateBuildingCost(t)}}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(1495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i},resetPerks:function(){i=[]}}},6124:(e,t)=>{let o=[];class s{constructor(e){this.petalImg=e,this.x=Math.random()*n.width,this.y=Math.random()*n.height*2-n.height,this.w=25+15*Math.random(),this.h=20+10*Math.random(),this.opacity=this.w/40,this.flip=Math.random(),this.xSpeed=1.5+2*Math.random(),this.ySpeed=1+1*Math.random(),this.flipSpeed=.03*Math.random()}draw(){if(this.y>n.height||this.x>n.width)switch(this.x=-this.petalImg.width,this.y=Math.random()*n.height*2-n.height,this.xSpeed=1.5+2*Math.random(),this.ySpeed=1+1*Math.random(),this.flip=Math.random(),(new Date).getMinutes()%5){default:case 1:this.petalImg.src="./petal.png";break;case 2:this.petalImg.src="./pollen.png";break;case 3:this.petalImg.src="./fall.png";break;case 4:this.petalImg.src="./snowflake.png"}i.globalAlpha=this.opacity,i.drawImage(this.petalImg,this.x,this.y,this.w*(.6+Math.abs(Math.cos(this.flip))/3),this.h*(.8+Math.abs(Math.sin(this.flip))/5))}animate(){this.x+=this.xSpeed,this.y+=this.ySpeed,this.flip+=this.flipSpeed,this.draw()}}const n=document.querySelector("canvas#fullscreen");n.width=window.outerWidth,n.height=window.outerHeight;const i=n.getContext("2d");t.startPetalRendering=function e(){i.clearRect(0,0,n.width,n.height),o.forEach((e=>e.animate())),window.requestAnimationFrame(e)},t.setPetals=function(e){const t=new Image;o=[];for(let n=0;n<e;++n)o.push(new s(t))}},9476:e=>{e.exports={getPlayerUid:function(){return null},generateUniqueID:function(){return Date.now().toString(36)+Math.random().toString(36).substr(2,5)}}},4369:(e,t,o)=>{const{capitalizeFirst:s}=o(6681),{ponders:n}=o(6397),{getMaterial:i}=o(3924),{resources:r}=o(2587),{buttons:a}=o(2054);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;let r=o(9594).generateTooltipCost(i.cost);a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:r,tab:"ponder",unlock:t,requirement:()=>o(8078).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},6995:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(6425),{isPondered:i}=o(4369),{passedStage:r}=o(8751),{updateBounceAnimation:a}=o(5994);t.recalcMaxClones=function(){let e=o(2587).getBaseMax("clones");r("clone")&&(e+=1);const t=o(5882).buildings;for(const[o,s]of Object.entries(t))s.effects&&s.effects.clones&&(e+=s.effects.clones*s.count);i("biggerShelter")&&(e+=1*t.shelter.count),i("biggerHut")&&(e+=1*t.hut.count),i("biggerHouse")&&(e+=2*t.house.count),i("biggerTeepee")&&(e+=4*t.teepee.count),i("evenBiggerShelter")&&(e+=1*t.shelter.count),s("maxClones")&&(e+=1*n("maxClones")),o(5722).setMax("clones",e),a()}},8022:(e,t,o)=>{function s(e){let t=o(5882).buildings[e];if(t&&t.cost&&t.ratio)for(let e in t.cost)t.cost[e]=Math.round(t.basecost[e]*Math.pow(t.ratio,t.count)),o(134).hasPerk("Architect")&&(t.cost[e]*=.75);const s=document.querySelector("#"+e);var n=o(9594).generateTooltipCost(t.cost);if(!s)throw"Button not found for "+e;{s.setAttribute("data-tooltip-cost",n);const e=o(5151).generateEffectString(t);s.setAttribute("data-tooltip-effect",e)}}t.recalculateBuildingCost=s,t.recalculateAllBuildingCosts=function(){const e=o(5882).buildings;for(let t of Object.keys(e))s(t)}},9594:(e,t,o)=>{const{resources:s}=o(2587),{craftedResources:n}=o(3371),{buttons:i}=o(2054),{skills:r}=o(2324),{getWorkers:a,updateTotal:c}=o(5150),{hasTool:l}=o(2609),{calcCraftBonus:u,getMax:d}=o(8078),{canCraft:f}=o(7064),{capitalizeFirst:h}=o(6681),{getMaterial:p}=o(3924),{isPondered:g}=o(4369),{calcIncrease:m}=o(8121),{updateSidebar:b,abbreviateNumber:y}=o(5453),{passedStage:v}=o(8751),{updateDisplayValue:k}=o(5453),{updateSkills:w}=o(8491),{recalcMaxClones:x}=o(6995),{triggerFloatUpText:S}=o(8727),{addProducing:C,addConsuming:B,removeProducing:M,removeConsuming:T}=o(1051),{updateButtonVisibility:j}=o(7667),E=document.getElementById("resources");function A(e,t){s[e].max+=t;const o=document.getElementById(`${e}Value`).getBoundingClientRect();S(o.right,o.bottom,"+max","green"),b(),c()}function $(e,t){0==t||Number.isNaN(t)||((e=e.toLowerCase())in s?(p(e)<d(e)&&t>0?(s[e].value+=t,w(e,t),"violence"===e&&o(4856).refreshValues()):s[e].value=t<0?Math.max(s[e].value+t,0):d(e),k(e)):e in n?(n[e].value=Math.max(n[e].value+t,0),k(e),w(e,t)):(s[e]&&(s[e].value+=t),n[e]&&(n[e].value+=t),b()))}function q(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(n).find((t=>n[t]===e));return t.innerHTML=`${e.text||h(o)}`,t.tab="experiment",t}t.resourcesContainer=E,window.increaseMaterial=$,window.increaseMax=A;const D=document.querySelector("#craftedResourceButtons");function O(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${p(o,s)>=e[o]?"enough":"not-enough"}">${y(e[o])} ${o}</span><br>`;return t}const R=document.getElementById("emojiDisplay");function P(){let e="";function t(){return Math.floor(55*Math.random()+200)}for(const[o,n]of Object.entries(r)){let i="";switch(o){case"gathering":i="rgb(227, 254, 210)";break;case"masonry":i="#ccc4c7";break;case"carpentry":i="#f0e7c9";break;case"hunting":i="#c9f0d4";break;case"fishing":i="#b5d6eb";break;case"thinking":i="#b5bceb";break;case"farming":i="#ede4c0";break;case"combat":i="#edc3c0";break;default:const e=t(),o=t();i=`rgb(${e}, ${t()}, ${o})`}for(const t of Object.values(n.affectedResources)){const o=a(t);if(void 0===o||0==o)continue;const n=s[t].emoji||"𓀟";n&&(e+=`<span class='tooltip' style='color:${i};'tooltipdesc='${t}' tooltipcost=''>${n.repeat(o)}</span>`)}}R.innerHTML=e}function L(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!f(e))return;let o=n[e].cost;t=Math.floor(t);for(const[e,s]of Object.entries(o))$(e,-s*t),k(e);$(e,u(e)*t),n[e].craftedOnce||(n[e].craftedOnce=!0),k(e)}P(),e.exports={increaseMaterial:$,increaseMax:A,craftAllResources:function(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(p(e,s)/t[e]);L(e,Math.floor(Math.min(...o)))}catch(e){}},craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;f(e)&&(!function(e,t,o){for(const[e,o]of Object.entries(t))$(e,-o);$(e,o)}(e,n[e].cost,u(e)),n[e].craftedOnce||(n[e].craftedOnce=!0),k(e),j())},updateEmojiDisplay:P,generateTooltipCost:O,calcSecondsRemaining:function(e,t){if(t<=p(e))return 0;const o=m(e,1e3);return 0==o?-1:(t-p(e))/o},appendCraftedResourceButtons:function(){for(let e in n){const t=q(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",O(n[e].cost)||"");const o=document.createElement("div");o.className=`factory-${e}`,o.classList.add("factory-button"),o.classList.add("hidden");const s=document.createElement("button");s.textContent="+",s.addEventListener("click",(t=>{C(e);for(const[t,o]of Object.entries(n[e].cost))B(t,o);k(e)}));const r=document.createElement("button");r.textContent="-",r.addEventListener("click",(t=>{M(e);for(const[t,o]of Object.entries(n[e].cost))T(t,o);k(e)})),o.appendChild(s),o.appendChild(r);const a=document.createElement("div");a.style.display="flex",a.style.flexDirection="row",a.appendChild(t),a.appendChild(o),D.appendChild(a),i[n[e].id]=n[e]}},calcIncrease:m,updateResourceIncreaseRates:function(){for(let t in s){const o=m(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:L}},502:(e,t,o)=>{const{calcIncrease:s,updateEmojiDisplay:n}=o(9594),{addTool:i,getAllTools:r}=o(2609),{allVisibleButtons:a,setVisibleButton:c,getMax:l}=o(8078),{makeVisible:u}=o(1123),{getCraftedResource:d}=o(6590),{getMaterial:f}=o(3924),{getAllPerks:h,addPerk:p,hasPerk:g,selectAbility:m}=o(134),{isPondered:b}=o(4369),{jobCounts:y,setConnections:v,getConnections:k,distributeWorkers:w,updateDisplay:x}=o(5150),{total_time:S}=o(808),{setAteFish:C,getAteFish:B}=o(1621),{craftedResources:M}=o(3371),{buildings:T}=o(5882),{ponders:j}=o(6397),{resources:E}=o(2587),{skills:A}=o(2324),{getAllStages:$}=o(8751),{activeFactoriesProducing:q,loadFactory:D}=o(1051),{recalcMaxClones:O}=o(6995),{updateSidebar:R}=o(5453),{prestige:P,setPrestigeCost:L,setPrestigeLevel:I}=o(6425),{recalculateBuildingCost:F}=o(8022),{updateBuildingButtonCount:G}=o(2607),{updateBuildingList:V}=o(5151),{populateSkillsTable:H}=o(8491),{getAnalytics:_,logEvent:N}=o(9013),{generateUniqueID:W}=o(9476),{getMusicVolume:z,getSfxVolume:J,setSfxVolume:U,setMusicVolume:Y}=o(5098),{setPetals:K}=o(6124);function X(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{},newBuildings:{},audioVolume:{}};for(let t in A)e.skills[t]={exp:A[t].exp,level:A[t].level};for(let t in M)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=d(t),e.craftedResources[t].craftedOnce=M[t].craftedOnce;for(let t in E)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=f(t,E),e.resources[t].max=l(t);e.tools=r(),e.stages=$(),e.jobs=y;try{e.perks=[new Set(h())]}catch(t){e.perks=[],console.error("saving perks error",t)}e.audioVolume={music:z(),sfx:J()},e.connections=Array.from(k().entries());for(let t in j)e.unlocks[t]=b(t);let t=null;for(let o in T)e.buildings[o]=T[o].count,T[o].hasOwnProperty("name")&&(e.newBuildings[o]=T[o],t=T[o]);for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries(q))e.factories[t]=o;const s=o(808).getMessage().innerHTML,n=function(){let e="You feel peckish for some seafood.";return t&&t.cost&&(e="You feel a strange, constructive urge to acquire "+Object.keys(t.cost).join(", ")),e}(),i=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(s);i.push(n),e.message=i;for(const[t,o]of Object.entries(P))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=S,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),N(_(),"save",e),e}e.exports={saveGame:X,loadGame:function(){if(!localStorage.getItem("player_uid")){const e=W();localStorage.setItem("player_uid",e)}const e=localStorage.getItem("player_uid");var t=JSON.parse(localStorage.getItem("save"));if(console.log(t),N(_(),"load",{savegame:t,playerUid:e}),null!==t){if(void 0!==t.resources)for(let e in t.resources)if("undefined"!==e.valueOf()&&null!==e&&null!==E[e]){try{o(3671).setMaterial(e,t.resources[e].value)}catch(t){console.warn("error with loading resource",e,t)}try{0!=E[e].value&&o(5453).updateDisplayValue(e)}catch(e){}}if(K(10),void 0!==t.skills)for(let e in t.skills)A[e].exp=t.skills[e].exp,A[e].level=t.skills[e].level;if(void 0!==t.craftedResources)for(var a of Object.keys(t.craftedResources))if(M[a]){M[a].value=t.craftedResources[a].value,Number.isNaN(M[a].value)&&(M[a].value=0),M[a].craftedOnce=t.craftedResources[a].craftedOnce;try{o(5453).updateDisplayValue(a)}catch(e){}}if(void 0!==t.tools){let e=[...new Set([...r(),...t.tools])];for(let t in e)i(t)}if(void 0!==t.stages)for(let e in t.stages)u(t.stages[e]);if(void 0!==t.jobs)for(let e in t.jobs)y[e]=t.jobs[e],x(e);if(void 0!==t.unlocks)for(let e in t.unlocks)try{j[e].isPondered=t.unlocks[e]}catch(t){console.warn("Old save data includes obsolete ponder",e)}if(b("skillsTable")&&H(),void 0!==t.perks)for(let[e,s]of Object.entries(t.perks))if(p(s),o(1495).selectCorrectPerkButton(s),parseFloat(e)>100)break;if(void 0!==t.prestige)for(const[e,o]of Object.entries(t.prestige))try{L(e,o.cost),I(e,o.level)}catch(t){console.warn("error with loading prestige",e,t)}if(function(e){if(void 0!==e.newBuildings)for(let t in e.newBuildings)try{T[t]=e.newBuildings[t]}catch(e){console.warn("error with building",t,e)}if(void 0!==e.buildings){for(let t in e.buildings)try{T[t].count=e.buildings[t],T[t].count>0&&(G(t,T[t].count,T[t].emoji),F(t))}catch(e){console.warn("error with building",t,e)}R()}}(t),O(),V(),C(E.clones.max>=1),B()&&(document.querySelector("#eatFish").style.display="none"),void 0!==t.message&&o(7169).changeMessage(t.message[0],t.message[1],t.message[2]?t.message[2]:null),void 0!==t.time){o(808).setTotalTime(t.time[S]);const e=Date.now()-t.time.time_of_save;for(let t in E){const o=s(t,e);E[t].value+=o,E[t].value>E[t].max&&(E[t].value=E[t].max)}}if(void 0!==t.allVisibleButtons)for(let e in t.allVisibleButtons)c(e);void 0!==t.connections&&(v(new Map(t.connections)),0===k().size&&v(new Map));for(let e in y)w(e,y[e]);if(n(),void 0!==t.factories)for(const[e,o]of Object.entries(t.factories))if(o>0)for(let t=1;t<o;++t)D(e);void 0!==t.audioVolume&&(Y(t.audioVolume.music),U(t.audioVolume.sfx))}}},window.saveGame=X},1495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},3671:(e,t,o)=>{const{updateTotal:s}=o(5150),{updateDisplayValue:n}=o(5453),{resources:i}=o(2587);t.setMaterial=function(e,t){void 0!==i[e]&&(i[e].value=t,n(e),s())}},5722:(e,t,o)=>{const{resources:s}=o(2587),{updateTotal:n}=o(5150),{updateDisplayValue:i}=o(5453);t.setMax=function(e,t){void 0!==s[e]&&(s[e].max=t,i(e),n())}},2093:(e,t,o)=>{const{drawAllConnections:s}=o(5150),{refreshValues:n,battleResult:i,simulateBattle:r}=o(4856),{playSound:a}=o(5098);function c(){let e="";for(let t of l)t.classList.contains("active")&&(e=t.id);return e}t.getCurrentTab=c;let l=document.querySelectorAll(".tab-content > .content");t.showTab=function(e){let t=c();const o=document.getElementById(e);if(o.classList.add("active"),e===t)return;a("./audio/tab.wav");let l=document.getElementById(t);l&&(l.classList.remove("active"),l.style.opacity="0");let u=document.querySelectorAll(".tab-button");for(let e of u)e.classList.remove("active");setTimeout((()=>{o.classList.add("active")}),100),setTimeout((()=>{o.style.opacity="1"}),200);const d=`#${e}Button`;let f=document.querySelector(d);f&&f.classList.add("active"),"jobsTab"===e&&s(),"combatTab"===e&&(n(),null===i&&r());const h=document.querySelector("canvas#fullscreen"),p=document.body,g=document.documentElement;h.height=Math.min(p.scrollHeight,p.offsetHeight,g.clientHeight,g.scrollHeight,g.offsetHeight),setTimeout((()=>{h.width=document.documentElement.scrollWidth,h.height=Math.max(p.scrollHeight,p.offsetHeight,g.clientHeight,g.scrollHeight,g.offsetHeight)}),100)}},5453:(e,t,o)=>{const{calcIncrease:s,updateRates:n}=o(8121),{capitalizeFirst:i}=o(6681),{getFactoryProduction:r}=o(1051),{getMaterial:a}=o(3924),{getMax:c}=o(8078),{craftedResources:l}=o(3371),{setRate:u}=o(7941),{resources:d}=o(2587);function f(e){var t=!0;return a(e)>0&&(t=!1,d[e]&&(d[e].isVisible=!0)),d[e]&&d[e].isVisible&&(t=!1),t}function h(e){if("number"!=typeof e)return e;function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const p=document.getElementById("resources");function g(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),p.appendChild(o))):o=document.getElementById("resources");const s=i(e).split("_").join(" "),n=document.createElement("p");n.className="resource",n.id=`resource-${e}`;const r=document.createElement("span");r.className="resourceName",r.textContent=`${s}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let u=c(e)&&c(e)<1/0?c(e).toFixed(2):"∞";l.textContent=`${a(e).toFixed(2)} / ${u}`;const d=document.createElement("span");return d.className="resourceRate",d.innerHTML=`<span id="${e}IncreaseRate"></span>)`,n.appendChild(r),n.appendChild(l),n.appendChild(d),o.appendChild(n),n}function m(e){const t=p.querySelector(`#${e}Value`),o=p.querySelector(`#${e}IncreaseRate`);if(t){try{const n=a(e),i=c(e);if(t.textContent=`${h(n)} / ${h(i)}`,t.style.color="white",n/i>.6&&(t.style.color="#ffc"),n/i>.8&&(t.style.color="#fec"),n/i>.95&&(t.style.color="#fcc"),o){const t=s(e,1e3);u(e,t),0===t||Number.isNaN(t)?o.parentElement.innerHTML=`<span id="${e}IncreaseRate"></span>`:o.parentElement.innerHTML=`${t>=0?"+":""}<span id="${e}IncreaseRate">${t.toFixed(2)}</span>/s`}f(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(d[e]&&d[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}const n=document.querySelector(`#craft${i(e)}Button`);if(n){n.textContent=`${l[e].text||i(e)}`;let t=r(e);NaN!==t&&void 0!==t||(t=0),t>0&&(n.textContent+=`(${t})`),u(e,t)}}e.exports={updateSidebar:function(){const e=o(4732).allMaterials;Array.from(e).forEach((e=>{m(e)}))},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder","violence"],food:["berries","fish","game","wheat","bread","freshwater"],materials:["sticks","vines","rocks","wood","sand","clay","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,s]of Object.entries(t))s.forEach((t=>{let s=document.getElementById("resource-"+t);e||(o=null),s||(s=g(t,o)),f(t)?s.style.display="none":s.style.display=""}))},updateDisplayValue:m,abbreviateNumber:h}},8491:(e,t,o)=>{const{skills:s}=o(2324),{triggerFloatUpText:n}=o(8727),i=function(e){let t={};for(const[o,s]of Object.entries(e))for(const e of s.affectedResources)t[e]||(t[e]=[]),t[e].push(o);return t}(s);let r=!1;function a(){const e=document.getElementById("skillsTable");if(r)for(let e in s){(s[e].exp>0||s[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=s[e].exp+"%",document.querySelector("#level-"+e).textContent=`[level ${s[e].level}] (${Math.floor(s[e].exp).toFixed(0)}%)   ${e}`)}else{console.log("Generating table for the first time"),r=!0;for(let t in s){let o=document.createElement("tr");o.id="tr-"+t;let n=document.createElement("td");n.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent=`[level ${s[t].level} (${s[t].exp}%)]   ${t}`,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==s[t].exp&&0==s[t].level&&(o.style.display="none"),n.appendChild(i),n.appendChild(r),o.appendChild(n),e.appendChild(o)}}}e.exports={updateSkills:function(e,t){if(t=Math.abs(t),o(4369).isPondered("fasterSkills")&&(t*=1.05),!i[e])return;const r=i[e][0].toString();if(s[r].level>=100)return s[r].level=100,void(s[r].exp=0);if(s[r].exp+=t/Math.pow(1.4,s[r].level),s[r].exp>=100){s[r].level+=1,s[r].exp=0;let e=`Level up! ${r} → ${s[r].level}`;const t=document.getElementById("prestige").getBoundingClientRect();n(t.x,t.y,e,"#F4D03F")}o(8751).passedStage("skillsTable")&&a()},populateSkillsTable:a}},8751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},2609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},7864:(e,t,o)=>{const{getMaterial:s}=o(3924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){s("gold",o(2587).resources)>=t&&(o(9594).increaseMaterial("gold",-t),o(9594).increaseMaterial(e,t),i.textContent=s("gold",o(2587).resources))}function a(e,t){s(e,o(2587).resources)>=1&&(o(9594).increaseMaterial("gold",t),o(9594).increaseMaterial(e,-1),i.textContent=s("gold",o(2587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},8727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,s){const n=document.createElement("div");n.textContent=o,n.style.left=`${window.scrollX+e}px`,n.style.top=window.scrollY+t-30+"px",n.style.color=s,n.classList.add("float-up-fade-out"),document.body.appendChild(n),n.addEventListener("animationend",(()=>{n.remove()}))}},5994:(e,t,o)=>{const{getMaterial:s}=o(3924),{getMax:n}=o(8078);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");s("clones")<n("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},2607:(e,t,o)=>{const{capitalizeFirst:s}=o(6681);t.updateBuildingButtonCount=function(e,t,o){document.getElementById(`${e}`).textContent=`${o} ${s(e).split("_").join(" ")} (${t})`}},2831:(e,t,o)=>{const{buildings:s}=o(5882),{updateTooltip:n,hideTooltip:i}=o(8208),{fitCharToCell:r}=o(7531),a=document.getElementById("buildingList");t.updateBuildingList=function(){const e=document.createDocumentFragment();let t=0;for(const[o,n]of Object.entries(s))for(let s=0;s<n.count;++s,++t){let s=(t%6+1).toString(),i=Math.floor(t/6+1).toString();const r=document.createElement("span");r.className="tooltip",r.style.gridColumn=s,r.style.gridRow=i,r.style.fontSize="36px",r.setAttribute("tooltipDesc",o),r.textContent=n.emoji||"?",e.appendChild(r)}a.innerHTML="",a.appendChild(e),a.addEventListener("mouseenter",(e=>{e.target.classList.contains("tooltip")&&n(e.target)}),!0),a.addEventListener("mouseleave",(e=>{e.target.classList.contains("tooltip")&&i()}),!0)}},7667:(e,t,o)=>{const{buttons:s}=o(2054),{getCraftedResourceConfigById:n}=o(3371),{getBuildingCount:i}=o(5882),{isPondered:r,canUnlock:a}=o(4369),{getCraftedResourceKeyByConfig:c}=o(3371),{isButtonIdVisible:l,setVisibleButton:u}=o(8078),{canCraft:d}=o(7064),{canBuyBuilding:f,canStoreBuilding:h,canAffordCost:p}=o(5023),{passedStage:g}=o(8751),{ponders:m,getPonderConfig:b}=o(6397);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled","cant-afford");var o="hidden";if(e.id&&l(e.id)&&(o="button-disabled"),e.classList&&e.classList.contains("factory"))g("factory")?(e.classList.add("cant-afford"),e.disabled=!0):e.classList.add("hidden");else{try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),"hidden"!=o&&(o=p(b(e.id).cost)?o:"cant-afford"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var m=n(t.id);m.value>0&&(o="button-disabled");const e=c(m);d(e)&&(o=!t.requiredStage||t.requiredStage&&g(t.requiredStage)?"purchasable":"hidden")}t.data_building&&("hidden"==o&&i(t.data_building)&&(o="cant-afford"),"hidden"!=o&&(o=h(t.data_building)?"button-disabled":"cant-afford"),o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(6842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(s),e.style.display="")}))}},8208:(e,t,o)=>{const{getCraftedResourceConfigById:s}=o(3371),{buildings:n}=o(5882),{ponders:i}=o(6397),{resources:r,getResourceConfigById:a}=o(2587),{calcSecondsRemaining:c}=o(9594),{getMax:l}=o(8078),{getMaterial:u}=o(3924),d=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){d.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||s(e.id)||n[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],h=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||f&&f.cost;!function(e,t,o,s){let n="";function i(e){let t=parseFloat(e);return e.includes("K")?t*=1e3:e.includes("M")?t*=1e6:e.includes("B")&&(t*=1e9),t}if(t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#4cf">${o}</span><hr>`),s)try{if(s.toString().includes("span"))n+=function(e,t){const o=/class="tooltip-(\w+) .+?">([\d.]+[KM]?)\s(\w+)</g;let s,n="";for(;null!==(s=o.exec(e));){const e=s[1],o=s[2],a=i(o);var r=u(e,t)>=a?"enough":"not-enough";l(e)<a&&(r="exceeds-max"),n+=`<span class="tooltip-${e} ${r}">${o} ${e}</span>`;let d=0;t[e]&&(d=c(e,a)),d>0&&"exceeds-max"!=r&&(n+=`<span class="time-remaining">(${d.toFixed(0)} seconds)</span>`),n+="<br>"}return n}(s,r);else{var a="";for(const[e,t]of Object.entries(s)){var f=u(e,r)>=t?"enough":"not-enough";l(e)<t&&(f="exceeds-max"),a+=`<span class="tooltip-${e} ${f}">${t.toFixed(0)} ${e}</span>`;let o=0;r[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=f&&(a+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),a+="<br>"}n+=a}}catch(e){void 0!==s&&"undefined"!==s&&(n+=s)}d.innerHTML=n;const h=e.getBoundingClientRect();d.style.left=h.right+5+"px",d.style.top=h.bottom-d.offsetHeight+"px",d.style.display="block"}(e,t,o,h)}}},o={};function s(e){var n=o[e];if(void 0!==n)return n.exports;var i=o[e]={exports:{}};return t[e](i,i.exports,s),i.exports}s.m=t,e=[],s.O=(t,o,n,i)=>{if(!o){var r=1/0;for(u=0;u<e.length;u++){for(var[o,n,i]=e[u],a=!0,c=0;c<o.length;c++)(!1&i||r>=i)&&Object.keys(s.O).every((e=>s.O[e](o[c])))?o.splice(c--,1):(a=!1,i<r&&(r=i));if(a){e.splice(u--,1);var l=n();void 0!==l&&(t=l)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[o,n,i]},s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={179:0};s.O.j=t=>0===e[t];var t=(t,o)=>{var n,i,[r,a,c]=o,l=0;if(r.some((t=>0!==e[t]))){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);if(c)var u=c(s)}for(t&&t(o);l<r.length;l++)i=r[l],s.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return s.O(u)},o=self.webpackChunkclone_idle=self.webpackChunkclone_idle||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var n=s.O(void 0,[13],(()=>s(808)));n=s.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RGYsRUFBSTIzQixFQUFTejNCLE9BQVFGLElBQ3pCKzRCLEVBQVVwQixFQUFTMzNCLEdBQ2hCcTNCLEVBQW9CYSxFQUFFWSxFQUFpQkMsSUFBWUQsRUFBZ0JDLElBQ3JFRCxFQUFnQkMsR0FBUyxLQUUxQkQsRUFBZ0JDLEdBQVcsRUFFNUIsT0FBTzFCLEVBQW9CSyxFQUFFcFYsRUFBTyxFQUdqQytXLEVBQXFCQyxLQUE2Qix1QkFBSUEsS0FBNkIsd0JBQUssR0FDNUZELEVBQW1CLzNCLFFBQVEwM0IsRUFBcUJPLEtBQUssS0FBTSxJQUMzREYsRUFBbUJoNUIsS0FBTzI0QixFQUFxQk8sS0FBSyxLQUFNRixFQUFtQmg1QixLQUFLazVCLEtBQUtGLEcsS0M3Q3ZGLElBQUlHLEVBQXNCbkMsRUFBb0JLLE9BQUV4a0IsRUFBVyxDQUFDLEtBQUssSUFBT21rQixFQUFvQixPQUM1Rm1DLEVBQXNCbkMsRUFBb0JLLEVBQUU4QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL0dhbWVTaW11bGF0b3IuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvYXRlRmlzaC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9hdWRpby5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9idWlsZGluZ3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FsY0luY3JlYXNlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NhbkJ1eUJ1aWxkaW5nLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NhbkNyYWZ0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NhcGl0YWxpemVGaXJzdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jaGFuZ2VNZXNzYWdlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NvbWJhdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9mYWN0b3J5LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2ZpdENoYXJUb0NlbGwuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2F0aGVyaW5nLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2dlbmVyYXRlQnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9nZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2dldENyYWZ0ZWRSZXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9nZXRNYXRlcmlhbC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvam9iUmVxdWlyZWRQb25kZXJzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pvYnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9hbGxNYXRlcmlhbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9idWlsZGluZ3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9idXR0b25zLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vY3JhZnRlZFJlc291cmNlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2N1cnJlbnRSYXRlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3BlcmtzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vcG9uZGVyLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vcHJlc3RpZ2UuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9za2lsbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvbWFpbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9tYWtlVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9wZXJrcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9wZXRhbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcGxheWVyVWlkLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9yZWNhbGNNYXhDbG9uZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NhdmluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zZXRNYXRlcmlhbC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zZXRNYXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvc2hvd1RhYi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zaWRlYmFyLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NraWxscy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zdGFnZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdG9vbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdHJhZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdHJpZ2dlckZsb2F0VXBUZXh0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJvdW5jZUFuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJ1aWxkaW5nTGlzdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVCdXR0b25WaXNpYmlsaXR5LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZVRvb2x0aXAuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsImNsYXNzIEdhbWVTaW11bGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlczoge1xyXG4gICAgICAgICAgICAgICAgY2xvbmVzOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RpY2tzOiAwLFxyXG4gICAgICAgICAgICAgICAgdmluZXM6IDAsXHJcbiAgICAgICAgICAgICAgICByb2NrczogMCxcclxuICAgICAgICAgICAgICAgIGZpc2g6IDAsXHJcbiAgICAgICAgICAgICAgICB3b29kOiAwLFxyXG4gICAgICAgICAgICAgICAgcG9uZGVyOiAwLFxyXG4gICAgICAgICAgICAgICAgb3JlOiAwLFxyXG4gICAgICAgICAgICAgICAgc2FuZDogMCxcclxuICAgICAgICAgICAgICAgIHdoZWF0OiAwLFxyXG4gICAgICAgICAgICAgICAgZnJlc2h3YXRlcjogMCxcclxuICAgICAgICAgICAgICAgIGhpZGVzOiAwLFxyXG4gICAgICAgICAgICAgICAgY2xheTogMCxcclxuICAgICAgICAgICAgICAgIGhlcmJzOiAwLFxyXG4gICAgICAgICAgICAgICAgZ2FtZTogMCxcclxuICAgICAgICAgICAgICAgIGh1c2tzOiAwLFxyXG4gICAgICAgICAgICAgICAgdmlvbGVuY2U6IDAsXHJcbiAgICAgICAgICAgICAgICBzaGFycHJvY2tzOiAwLFxyXG4gICAgICAgICAgICAgICAgcm9wZTogMCxcclxuICAgICAgICAgICAgICAgIGhhbmRsZTogMCxcclxuICAgICAgICAgICAgICAgIHN0YWZmOiAwLFxyXG4gICAgICAgICAgICAgICAgZmlzaGluZ3JvZDogMCxcclxuICAgICAgICAgICAgICAgIHNwZWFyOiAwLFxyXG4gICAgICAgICAgICAgICAgYXhlOiAwLFxyXG4gICAgICAgICAgICAgICAgcGlja2F4ZTogMCxcclxuICAgICAgICAgICAgICAgIGdsYXNzOiAwLFxyXG4gICAgICAgICAgICAgICAgcGFwZXI6IDAsXHJcbiAgICAgICAgICAgICAgICBnb2xkOiAwLFxyXG4gICAgICAgICAgICAgICAgaXJvbjogMCxcclxuICAgICAgICAgICAgICAgIHNpbHZlcjogMCxcclxuICAgICAgICAgICAgICAgIGJyaWNrczogMCxcclxuICAgICAgICAgICAgICAgIGJyZWFkOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RlZWw6IDAsXHJcbiAgICAgICAgICAgICAgICBiZWFtczogMCxcclxuICAgICAgICAgICAgICAgIGNyYXRlczogMCxcclxuICAgICAgICAgICAgICAgIG5haWxzOiAwLFxyXG4gICAgICAgICAgICAgICAgc2xhYnM6IDAsXHJcbiAgICAgICAgICAgICAgICBtZWRpY2luZTogMCxcclxuICAgICAgICAgICAgICAgIGxlYXRoZXI6IDAsXHJcbiAgICAgICAgICAgICAgICBjb25jcmV0ZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWF4ZXM6IHtcclxuICAgICAgICAgICAgICAgIFwiY2xvbmVzXCI6IDAsXHJcbiAgICAgICAgICAgICAgICBcInN0aWNrc1wiOiA1MCxcclxuICAgICAgICAgICAgICAgIFwidmluZXNcIjogNTAsXHJcbiAgICAgICAgICAgICAgICBcInJvY2tzXCI6IDMwLFxyXG4gICAgICAgICAgICAgICAgXCJmaXNoXCI6IDEwLFxyXG4gICAgICAgICAgICAgICAgXCJ3b29kXCI6IDQwLFxyXG4gICAgICAgICAgICAgICAgXCJwb25kZXJcIjogMjAsXHJcbiAgICAgICAgICAgICAgICBcIm9yZVwiOiAyMCxcclxuICAgICAgICAgICAgICAgIFwic2FuZFwiOiAyMCxcclxuICAgICAgICAgICAgICAgIFwid2hlYXRcIjogMjAsXHJcbiAgICAgICAgICAgICAgICAnZnJlc2h3YXRlcic6IDUwLFxyXG4gICAgICAgICAgICAgICAgJ2hpZGVzJzogNTAsXHJcbiAgICAgICAgICAgICAgICAnY2xheSc6IDUwLFxyXG4gICAgICAgICAgICAgICAgJ2hlcmJzJzogNTAsXHJcbiAgICAgICAgICAgICAgICAnZ2FtZSc6IDUwLFxyXG4gICAgICAgICAgICAgICAgJ2h1c2tzJzogMTAwMCxcclxuICAgICAgICAgICAgICAgICd2aW9sZW5jZSc6IDEwMFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgYnVpbGRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBhbmltYWxfcGVuOiAwLFxyXG4gICAgICAgICAgICAgICAgYmFrZXJ5OiAwLFxyXG4gICAgICAgICAgICAgICAgYmFybjogMCxcclxuICAgICAgICAgICAgICAgIGJhcnJhY2tzOiAwLFxyXG4gICAgICAgICAgICAgICAgY2FtcGZpcmU6IDAsXHJcbiAgICAgICAgICAgICAgICBkZXNrOiAwLFxyXG4gICAgICAgICAgICAgICAgZHJ5aW5nX3JhY2tzOiAwLFxyXG4gICAgICAgICAgICAgICAgZmlzaF90cmFwczogMCxcclxuICAgICAgICAgICAgICAgIGZpc2hlcnk6IDAsXHJcbiAgICAgICAgICAgICAgICBmb3JnZTogMCxcclxuICAgICAgICAgICAgICAgIGdhcmRlbjogMCxcclxuICAgICAgICAgICAgICAgIGdyb3ZlOiAwLFxyXG4gICAgICAgICAgICAgICAgaGVyYmFsaXN0X2h1dDogMCxcclxuICAgICAgICAgICAgICAgIGhvc3BpdGFsOiAwLFxyXG4gICAgICAgICAgICAgICAgaG91c2U6IDAsXHJcbiAgICAgICAgICAgICAgICBodXQ6IDAsXHJcbiAgICAgICAgICAgICAgICBpcnJpZ2F0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgbGlicmFyeTogMCxcclxuICAgICAgICAgICAgICAgIGx1bWJlcl95YXJkOiAwLFxyXG4gICAgICAgICAgICAgICAgbWFya2V0cGxhY2U6IDAsXHJcbiAgICAgICAgICAgICAgICBtaWxpdGFyeV9zY2hvb2w6IDAsXHJcbiAgICAgICAgICAgICAgICBtaW5lOiAwLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2YXRvcnk6IDAsXHJcbiAgICAgICAgICAgICAgICByZXNlcnZvaXI6IDAsXHJcbiAgICAgICAgICAgICAgICByb2NrX3JvbGU6IDAsXHJcbiAgICAgICAgICAgICAgICBzYW5kX3Njb29wOiAwLFxyXG4gICAgICAgICAgICAgICAgc2hlZDogMCxcclxuICAgICAgICAgICAgICAgIHNoZWx0ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICBzdG9ja3BpbGU6IDAsXHJcbiAgICAgICAgICAgICAgICBzdG9uZV9kZXBvdDogMCxcclxuICAgICAgICAgICAgICAgIHN0b25lX3F1YXJyeTogMCxcclxuICAgICAgICAgICAgICAgIHRhbm5lcnk6IDAsXHJcbiAgICAgICAgICAgICAgICB0ZWVwZWU6IDAsXHJcbiAgICAgICAgICAgICAgICB0ZWxlc2NvcGU6IDAsXHJcbiAgICAgICAgICAgICAgICB0b3dlcjogMCxcclxuICAgICAgICAgICAgICAgIHRyYXBzOiAwLFxyXG4gICAgICAgICAgICAgICAgdmluZXlhcmQ6IDAsXHJcbiAgICAgICAgICAgICAgICB3YXJlaG91c2U6IDAsXHJcbiAgICAgICAgICAgICAgICB3YXRlcl9wdW1wOiAwLFxyXG4gICAgICAgICAgICAgICAgd2luZG1pbGw6IDAsXHJcbiAgICAgICAgICAgICAgICB3b3Jrc2hvcDogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGltZTogMFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5sb2cgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBidWlsZGluZ3NDb25zdCA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKS5idWlsZGluZ3M7XHJcbiAgICBidXlCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgICAgICAvLyBTaW1pbGFyIGxvZ2ljIHRvIHRoZSBvcmlnaW5hbCBidXlCdWlsZGluZyxcclxuICAgICAgICAvLyBidXQgd29ya3Mgb24gdGhpcy5nYW1lU3RhdGUgaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGdhbWUgc3RhdGVcclxuICAgICAgICAvLyBDYWxjdWxhdGUgY29zdHNcclxuICAgICAgICBsZXQgY29zdCA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuYnVpbGRpbmdzQ29uc3RbYnVpbGRpbmdOYW1lXS5iYXNlY29zdCkpIHtcclxuICAgICAgICAgICAgY29zdFtrZXldID0gdmFsdWUgKiBNYXRoLnBvdyh0aGlzLmJ1aWxkaW5nc0NvbnN0W2J1aWxkaW5nTmFtZV0ucmF0aW8sIHRoaXMuZ2FtZVN0YXRlLmJ1aWxkaW5nc1tidWlsZGluZ05hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coY29zdCk7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgZW5vdWdoIHJlc291cmNlcyBhcmUgYXZhaWxhYmxlXHJcbiAgICAgICAgbGV0IGNhbkJ1eSA9IHRydWU7XHJcbiAgICAgICAgZm9yIChsZXQgYyBpbiBjb3N0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXNbY10gPCBjb3N0W2NdKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5CdXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQnV5IGJ1aWxkaW5nIGlmIGVub3VnaCByZXNvdXJjZXMgYXJlIGF2YWlsYWJsZVxyXG4gICAgICAgIGlmIChjYW5CdXkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYyBpbiBjb3N0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXNbY10gLT0gY29zdFtjXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5idWlsZGluZ3NbYnVpbGRpbmdOYW1lXSArPSAxO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmFnZS5pbmNsdWRlcyhidWlsZGluZ05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbmNyZWFzZSB0aGUgbWF4IHN0b3JhZ2VcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW3IsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5idWlsZGluZ3NDb25zdFtidWlsZGluZ05hbWVdLmVmZmVjdHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUubWF4ZXNbcl0gKz0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNpbXVsYXRlVGljaygpIHtcclxuICAgICAgICAvLyBTaW11bGF0ZSBhIHNpbmdsZSB0aWNrIG9mIHRoZSBnYW1lXHJcbiAgICAgICAgdGhpcy5wZXJmb3JtQWN0aW9ucygpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUmVzb3VyY2VzKCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUudGltZSArPSAxOyAvLyBJbmNyZW1lbnQgdGltZVxyXG4gICAgICAgIHRoaXMubG9nR2FtZVN0YXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaG91c2luZyA9IFsnaHV0JywgJ3NoZWx0ZXInLCAnaG91c2UnLCAnYmFycmFja3MnLCAnaG9zcGl0YWwnLCAndGVlcGVlJ107XHJcbiAgICBzdG9yYWdlID0gWydzaGVkJywgJ3N0b2NrcGlsZScsICd3b3Jrc2hvcCcsICd3YXJlaG91c2UnLCAnZHJ5aW5nX3JhY2tzJywgJ3dhdGVyX3B1bXAnLCAnbWlsaXRhcnlfc2Nob29sJywgJ2Jhcm4nLCAnaGVyYmFsaXN0X2h1dCcsICdtaW5lJywgJ2Jha2VyeScsICdhbmltYWxfcGVuJywgJ3Jlc2Vydm9pcicsICdzdG9uZV9kZXBvdCddO1xyXG4gICAgYnVpbGRpbmdQcmlvcml0eSA9IFsuLi50aGlzLmhvdXNpbmcsIC4uLnRoaXMuc3RvcmFnZV07XHJcbiAgICBwZXJmb3JtQWN0aW9ucygpIHtcclxuICAgICAgICAvLyBEZWZpbmUgcGxheWVyIGFjdGlvbnMgaGVyZSwgZS5nLiwgYnV5IGJ1aWxkaW5ncywgY3JhZnQgcmVzb3VyY2VzXHJcbiAgICAgICAgZm9yIChsZXQgYiBvZiBPYmplY3QudmFsdWVzKHRoaXMuYnVpbGRpbmdQcmlvcml0eSkpIHtcclxuICAgICAgICAgICAgdHJ5IHsgdGhpcy5idXlCdWlsZGluZyhiKTsgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGJ1eScsIGIsIGVycm9yKTsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAuLi4gb3RoZXIgYWN0aW9ucyAuLi5cclxuICAgIH1cclxuXHJcbiAgICByZXNvdXJjZXNUb0dhdGhlciA9IFsnc3RpY2tzJ107XHJcbiAgICB1cGRhdGVSZXNvdXJjZXMoKSB7XHJcbiAgICAgICAgLy8gVXBkYXRlIHJlc291cmNlcyBiYXNlZCBvbiBidWlsZGluZ3MsIGFjdGlvbnMsIGV0Yy5cclxuICAgICAgICAvLyBFeGFtcGxlOlxyXG5cclxuICAgICAgICBmb3IgKGxldCBbaSwga2V5XSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnJlc291cmNlc1RvR2F0aGVyKSkge1xyXG4gICAgICAgICAgICBsZXQgZ2F0aGVyaW5nID0gMDtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3N0aWNrcycgfHwga2V5ID09PSAndmluZXMnIHx8IGtleSA9PT0gJ3dvb2QnIHx8IGtleSA9PT0gJ3JvY2tzJyB8fCBrZXkgPT09ICdmaXNoJyB8fCBrZXkgPT09ICdvcmUnKSBnYXRoZXJpbmcgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXNba2V5XSArPSAoZ2F0aGVyaW5nICsgLjI1ICogdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmNsb25lcykgLyB0aGlzLnJlc291cmNlc1RvR2F0aGVyLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmdhbWVTdGF0ZS5tYXhlcykuaW5jbHVkZXMoa2V5KSAmJiB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXNba2V5XSA+IHRoaXMuZ2FtZVN0YXRlLm1heGVzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1trZXldID0gdGhpcy5nYW1lU3RhdGUubWF4ZXNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd2aW5lcycgJiYgTWF0aC5yYW5kb20oKSA+IDAuNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENyYWZ0IHZpbmVzIGludG8gcm9wZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1sncm9wZSddICs9IHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy52aW5lcyAvIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLnZpbmVzID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd3b29kJyAmJiBNYXRoLnJhbmRvbSgpID4gMC41KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JhZnQgd29vZCBpbnRvIHBhcGVyXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzWydwYXBlciddICs9IHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy53b29kIC8gMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLndvb2QgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ29yZScgJiYgTWF0aC5yYW5kb20oKSA+IDAuNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyYWZ0IG9yZSBpbnRvIGlyb24gb3IgZ29sZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1snaXJvbiddICs9IHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5vcmUgLyAyMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLm9yZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXNbJ2dvbGQnXSArPSB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMub3JlIC8gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMub3JlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnc2FuZCcgJiYgTWF0aC5yYW5kb20oKSA+IDAuNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyYWZ0IHNhbmQgaW50byBwYXBlclxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1sncGFwZXInXSArPSB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuc2FuZCAvIDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5zYW5kID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdjbGF5JyAmJiBNYXRoLnJhbmRvbSgpID4gMC41KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JhZnQgY2xheSBpbnRvIGJyaWNrc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlc1snYnJpY2tzJ10gKz0gdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmNsYXkgLyAxNTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xheSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLnN0aWNrcyA+PSAxMCAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygndmluZXMnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlc1RvR2F0aGVyLnB1c2goJ3ZpbmVzJyk7IC8vIFB1c2ggJ3ZpbmVzJyBvbmx5IGlmIGl0J3Mgbm90IGFscmVhZHkgaW4gdGhlIGFycmF5XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLnJlc291cmNlc1RvR2F0aGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy52aW5lcyA+PSAxMCAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygncm9ja3MnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlc1RvR2F0aGVyLnB1c2goJ3JvY2tzJyk7IC8vIFB1c2ggJ3ZpbmVzJyBvbmx5IGlmIGl0J3Mgbm90IGFscmVhZHkgaW4gdGhlIGFycmF5XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLnJlc291cmNlc1RvR2F0aGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5yb2NrcyA+PSAxMCAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygnZmlzaCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIucHVzaCgnZmlzaCcpOyAvLyBQdXNoICd2aW5lcycgb25seSBpZiBpdCdzIG5vdCBhbHJlYWR5IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5yZXNvdXJjZXNUb0dhdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuZmlzaCA+PSAxMCAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygnd29vZCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIucHVzaCgnd29vZCcpOyAvLyBQdXNoICd2aW5lcycgb25seSBpZiBpdCdzIG5vdCBhbHJlYWR5IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5yZXNvdXJjZXNUb0dhdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMud29vZCA+PSAxMCAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygnb3JlJykpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5wdXNoKCdvcmUnKTsgLy8gUHVzaCAndmluZXMnIG9ubHkgaWYgaXQncyBub3QgYWxyZWFkeSBpbiB0aGUgYXJyYXlcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKHRoaXMucmVzb3VyY2VzVG9HYXRoZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbG9uZXMgPj0gMSAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygncG9uZGVyJykpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5wdXNoKCdwb25kZXInKTsgLy8gUHVzaCAndmluZXMnIG9ubHkgaWYgaXQncyBub3QgYWxyZWFkeSBpbiB0aGUgYXJyYXlcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKHRoaXMucmVzb3VyY2VzVG9HYXRoZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmNsb25lcyA+PSAzICYmICF0aGlzLnJlc291cmNlc1RvR2F0aGVyLmluY2x1ZGVzKCdzYW5kJykpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5wdXNoKCdzYW5kJyk7IC8vIFB1c2ggJ3ZpbmVzJyBvbmx5IGlmIGl0J3Mgbm90IGFscmVhZHkgaW4gdGhlIGFycmF5XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLnJlc291cmNlc1RvR2F0aGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbG9uZXMgPj0gNCAmJiAhdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5pbmNsdWRlcygnY2xheScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIucHVzaCgnY2xheScpOyAvLyBQdXNoICd2aW5lcycgb25seSBpZiBpdCdzIG5vdCBhbHJlYWR5IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5yZXNvdXJjZXNUb0dhdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5zdGlja3MgKz0gKDEgKyAuMjUgKiB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzKSAvIHRoaXMucmVzb3VyY2VzVG9HYXRoZXIubGVuZ3RoO1xyXG4gICAgICAgIC8vIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy52aW5lcyArPSAoMSArIC4yNSAqIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbG9uZXMpIC8gdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5sZW5ndGg7XHJcbiAgICAgICAgLy8gdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLnNhbmQgKz0gKC4yNSAqIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbG9uZXMpIC8gdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5sZW5ndGg7XHJcbiAgICAgICAgLy8gdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmNsYXkgKz0gKC4yNSAqIHRoaXMuZ2FtZVN0YXRlLnJlc291cmNlcy5jbG9uZXMpIC8gdGhpcy5yZXNvdXJjZXNUb0dhdGhlci5sZW5ndGg7XHJcbiAgICAgICAgLy8gdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLnJvY2tzICs9ICgxICsgLjI1ICogdGhpcy5nYW1lU3RhdGUucmVzb3VyY2VzLmNsb25lcykgLyB0aGlzLnJlc291cmNlc1RvR2F0aGVyLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yZXNvdXJjZXMuY2xvbmVzID0gdGhpcy5nYW1lU3RhdGUuYnVpbGRpbmdzLnNoZWx0ZXIgK1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5idWlsZGluZ3MuaHV0ICtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYnVpbGRpbmdzLmhvdXNlICogMiArXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJ1aWxkaW5ncy5ob3NwaXRhbCAqIDMgK1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5idWlsZGluZ3MudGVlcGVlICogMiArXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJ1aWxkaW5ncy5iYXJyYWNrcztcclxuICAgICAgICAvLyAuLi4gb3RoZXIgcmVzb3VyY2UgdXBkYXRlcyAuLi5cclxuICAgIH1cclxuXHJcbiAgICBsb2dHYW1lU3RhdGUoKSB7XHJcbiAgICAgICAgLy8gTG9nIGEgZGVlcCBjb3B5IG9mIHRoZSBjdXJyZW50IHN0YXRlIGZvciBsYXRlciBhbmFseXNpc1xyXG4gICAgICAgIGNvbnN0IHN0YXRlQ29weSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5nYW1lU3RhdGUpKTtcclxuICAgICAgICB0aGlzLmxvZy5wdXNoKHsgdGltZTogdGhpcy5nYW1lU3RhdGUudGltZSwgLi4uc3RhdGVDb3B5IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJ1blNpbXVsYXRpb24oZHVyYXRpb24pIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR1cmF0aW9uOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zaW11bGF0ZVRpY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vdXRwdXRSZXN1bHRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3V0cHV0UmVzdWx0cygpIHtcclxuICAgICAgICAvLyBPdXRwdXQgdGhlIHJlc3VsdHMgaW4gYSBmb3JtYXQgc3VpdGFibGUgZm9yIHZpc3VhbGl6YXRpb25cclxuICAgICAgICAvLyBFeGFtcGxlOiBjb25zb2xlIGxvZ2dpbmcsIGZvciBtb3JlIGFkdmFuY2VkIHVzZSBjYXNlcywgY29uc2lkZXIgZ2VuZXJhdGluZyBDU1Ygb3IgSlNPTiBmaWxlc1xyXG4gICAgICAgIC8vIGNvbnNvbGUudGFibGUodGhpcy5sb2cpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb0NTVihkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGhlYWRlciByb3cgd2l0aCBrZXlzIGZyb20gYnVpbGRpbmdzIGFuZCByZXNvdXJjZXNcclxuICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdzS2V5cyA9IE9iamVjdC5rZXlzKGRhdGFbMF0uYnVpbGRpbmdzKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VzS2V5cyA9IE9iamVjdC5rZXlzKGRhdGFbMF0ucmVzb3VyY2VzKTtcclxuICAgICAgICAgICAgY29uc3QgbWF4ZXNLZXlzID0gT2JqZWN0LmtleXMoZGF0YVswXS5tYXhlcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG90aGVyS2V5cyA9IE9iamVjdC5rZXlzKGRhdGFbMF0pLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnYnVpbGRpbmdzJyAmJiBrZXkgIT09ICdyZXNvdXJjZXMnKTtcclxuICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gWy4uLm90aGVyS2V5cywgLi4uYnVpbGRpbmdzS2V5cywgLi4ucmVzb3VyY2VzS2V5c107XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjc3YgPSBbaGVhZGVyLmpvaW4oJywnKV07XHJcblxyXG4gICAgICAgICAgICBkYXRhLmZvckVhY2goKHJvdykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gaGVhZGVyLm1hcCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGtleSBpcyBpbiBidWlsZGluZ3Mgb3IgcmVzb3VyY2VzIGFuZCBoYW5kbGUgYWNjb3JkaW5nbHlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm93LmJ1aWxkaW5ncyAmJiByb3cuYnVpbGRpbmdzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5idWlsZGluZ3Nba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJvdy5yZXNvdXJjZXMgJiYgcm93LnJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3cucmVzb3VyY2VzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvd1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY3N2LnB1c2godmFsdWVzLmpvaW4oJywnKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNzdi5qb2luKCdcXG4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNzdkRhdGEgPSBjb252ZXJ0VG9DU1YodGhpcy5sb2cpO1xyXG5cclxuICAgICAgICAvLyBTdGVwIDM6IENyZWF0ZSBhIGRhdGEgVVJJIGZvciB0aGUgQ1NWIHN0cmluZ1xyXG4gICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbY3N2RGF0YV0sIHsgdHlwZTogJ3RleHQvY3N2JyB9KTtcclxuICAgICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cclxuICAgICAgICAvLyBTdGVwIDQ6IENyZWF0ZSBhIGRvd25sb2FkYWJsZSBsaW5rXHJcbiAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsaW5rLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgbGluay5kb3dubG9hZCA9ICdkYXRhLmNzdic7XHJcbiAgICAgICAgbGluay50ZXh0Q29udGVudCA9ICdEb3dubG9hZCBDU1YnO1xyXG5cclxuICAgICAgICAvLyBBcHBlbmQgdGhlIGxpbmsgdG8gdGhlIGRvY3VtZW50XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICBjb25zb2xlLnRhYmxlKHRoaXMubG9nKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0cy5HYW1lU2ltdWxhdG9yID0gR2FtZVNpbXVsYXRvcjtcclxuLy8gd2luZG93LnJ1blNpbXVsYXRpb24gPSBzaW11bGF0b3IucnVuU2ltdWxhdGlvbjtcclxuIiwidmFyIGF0ZUZpc2ggPSBmYWxzZTtcclxuXHJcbmZ1bmN0aW9uIHNldEF0ZUZpc2goYm9vbCkge1xyXG4gICAgYXRlRmlzaCA9IGJvb2w7XHJcbiAgICByZXR1cm4gYXRlRmlzaDtcclxufVxyXG5mdW5jdGlvbiBnZXRBdGVGaXNoKCkge1xyXG4gICAgcmV0dXJuIGF0ZUZpc2g7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYXRlRmlzaCxcclxuICAgIHNldEF0ZUZpc2gsXHJcbiAgICBnZXRBdGVGaXNoXHJcbn07IiwibGV0IG11c2ljVm9sdW1lID0gMC41O1xyXG5cclxuXHJcbmZ1bmN0aW9uIHNldE11c2ljVm9sdW1lKHZvbCkge1xyXG4gICAgbXVzaWNWb2x1bWUgPSB2b2w7XHJcbn1cclxuZnVuY3Rpb24gZ2V0TXVzaWNWb2x1bWUoKSB7XHJcbiAgICByZXR1cm4gbXVzaWNWb2x1bWU7XHJcbn1cclxuXHJcbmxldCBzZnhWb2x1bWUgPSAwLjU7XHJcblxyXG5mdW5jdGlvbiBzZXRTZnhWb2x1bWUodm9sKSB7XHJcbiAgICBzZnhWb2x1bWUgPSB2b2w7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2Z4Vm9sdW1lKCkge1xyXG4gICAgcmV0dXJuIHNmeFZvbHVtZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheVNvdW5kKGZpbGVuYW1lLCBpc011c2ljKSB7XHJcbiAgICBjb25zdCBhdWRpbyA9IG5ldyBBdWRpbyhmaWxlbmFtZSk7XHJcbiAgICBhdWRpby52b2x1bWUgPSBpc011c2ljID8gZ2V0TXVzaWNWb2x1bWUoKSA6IGdldFNmeFZvbHVtZSgpO1xyXG4gICAgYXVkaW8ucGxheSgpO1xyXG5cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZXRNdXNpY1ZvbHVtZSxcclxuICAgIGdldE11c2ljVm9sdW1lLFxyXG4gICAgc2V0U2Z4Vm9sdW1lLFxyXG4gICAgZ2V0U2Z4Vm9sdW1lLFxyXG4gICAgcGxheVNvdW5kXHJcbn07IiwiY29uc3QgeyBidWlsZGluZ3MsIGlzUG9wQnVpbGRpbmcgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBpbmNyZWFzZU1hdGVyaWFsLCBpbmNyZWFzZU1heCwgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG90YWwgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IGhhc1BlcmsgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZSgnLi9yZWNhbGNNYXhDbG9uZXMnKTtcclxuXHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50Jyk7XHJcbmNvbnN0IHsgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgfSA9IHJlcXVpcmUoJy4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QnKTtcclxuY29uc3QgeyBjYW5CdXlCdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9jYW5CdXlCdWlsZGluZycpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQgfSA9IHJlcXVpcmUoJy4vcG9uZGVyJyk7XHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdMaXN0IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1aWxkaW5nTGlzdCcpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKCcuL2pzb24vcG9uZGVyJyk7XHJcbmNvbnN0IHsgbG9nRXZlbnQsIGdldEFuYWx5dGljcyB9ID0gcmVxdWlyZSgnQGZpcmViYXNlL2FuYWx5dGljcycpO1xyXG5jb25zdCB7IGdldFBsYXllclVpZCB9ID0gcmVxdWlyZSgnLi9wbGF5ZXJVaWQnKTtcclxuY29uc3QgeyB0cmlnZ2VyRmxvYXRVcFRleHQgfSA9IHJlcXVpcmUoJy4vdHJpZ2dlckZsb2F0VXBUZXh0Jyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuXHJcbi8qIEJVSUxESU5HUyAqL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlZmZlY3Qgb2YgYSBidWlsZGluZ1xyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmcgVGhlIGJ1aWxkaW5nIG9iamVjdFxyXG4gKiBAcmV0dXJucyBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlZmZlY3Qgb2YgdGhlIGJ1aWxkaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUVmZmVjdFN0cmluZyhidWlsZGluZylcclxue1xyXG4gICAgbGV0IGVmZmVjdFBhcnRzID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgW3Jlc291cmNlLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuZWZmZWN0cykpXHJcbiAgICB7XHJcbiAgICAgICAgZWZmZWN0UGFydHMucHVzaChgKyR7dmFsdWV9IG1heCAke3Jlc291cmNlfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IFtyZXNvdXJjZSwgYm9vc3RdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmJvb3N0KSlcclxuICAgIHtcclxuICAgICAgICBsZXQgcGVyY2VudGFnZUJvb3N0ID0gTWF0aC5yb3VuZCgoYm9vc3QgLSAxKSAqIDEwMCk7XHJcblxyXG5cclxuICAgICAgICAvLyBBcHBseSBwb25kZXIgYm9udXNlc1xyXG4gICAgICAgIGZvciAoY29uc3QgW3BvbmRlcklkLCBwb25kZXJdIG9mIE9iamVjdC5lbnRyaWVzKHBvbmRlcnMpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQocG9uZGVySWQpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBFZmZlY3RpdmUgYnVpbGRpbmdzIGluY3JlYXNlcyB5b3VyIGJvbnVzIGJ5IDMlIHBlciBwb25kZXIgbGV2ZWxcclxuICAgICAgICAgICAgICAgIGlmIChwb25kZXJJZC5zdGFydHNXaXRoKCdlZmZlY3RpdmVCdWlsZGluZ3MnKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJjZW50YWdlQm9vc3QgKj0gMS4wMztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHtwZXJjZW50YWdlQm9vc3QudG9GaXhlZCgyKX0lICR7cmVzb3VyY2V9IHByb2R1Y3Rpb25gKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVmZmVjdFBhcnRzLmpvaW4oJzxicj4nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb3N0IG9mIHRoZSBidWlsZGluZ1xyXG4gKiBAcGFyYW0ge09iamVjdH0gY29zdCBUaGUgYnVpbGRpbmcgY29zdCBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb3N0IG9mIHRoZSBidWlsZGluZyBzZXBhcmF0ZWQgYnkgbmV3IGxpbmVzXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QoY29zdClcclxue1xyXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGNvc3QpLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHthbW91bnQudG9GaXhlZCgyKX0gJHttYXRlcmlhbH1gKS5qb2luKCdcXG4nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGJ1dHRvbiBmb3IgYSBidWlsZGluZ1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdLZXkgVGhlIG5hbWUgb2YgdGhlIGJ1aWxkaW5nXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBidWlsZGluZ3MgTWFpbiBidWlsZGluZ3Mgb2JqZWN0XHJcbiAqIEByZXR1cm5zIFRoZSBidWlsZGluZyBidXR0b25cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uKGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpXHJcbntcclxuICAgIHRyeVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuXHJcbiAgICAgICAgLy8gRGVlcCBjb3B5IGJhc2Vjb3N0IHRvIGNyZWF0ZSBjb3N0XHJcbiAgICAgICAgYnVpbGRpbmdbJ2Nvc3QnXSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYnVpbGRpbmcuYmFzZWNvc3QpKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29zdHMgPSBPYmplY3QuZW50cmllcyhidWlsZGluZy5jb3N0KVxyXG4gICAgICAgICAgICAubWFwKChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IGAke21hdGVyaWFsfTogJHthbW91bnR9YClcclxuICAgICAgICAgICAgLmpvaW4oJywgJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcXVpcmVtZW50RnVuY3Rpb24gPSBjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uKGJ1aWxkaW5nLmNvc3QpO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyZWF0ZSBidWlsZGluZyBidXR0b246JywgYnVpbGRpbmcsIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYnVpbGRpbmcuZW1vamkpKSk7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0ge1xyXG4gICAgICAgICAgICAnY2xhc3MnOiAndG9vbHRpcCAnICsgYnVpbGRpbmdLZXksXHJcbiAgICAgICAgICAgICd0YWInOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgICAgICd0ZXh0JzogYCR7SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidWlsZGluZy5lbW9qaSkpfSAke2NhcGl0YWxpemVGaXJzdChidWlsZGluZ0tleSl9ICgke2J1aWxkaW5nLmNvdW50fSlgLFxyXG4gICAgICAgICAgICAndG9vbHRpcERlc2MnOiBidWlsZGluZ3NbYnVpbGRpbmdLZXldLnRvb2x0aXBEZXNjIHx8IFwiQSBteXN0ZXJpb3VzIGJ1aWxkaW5nIHdpdGggdW50b2xkIGJlbmVmaXRzLlwiLFxyXG4gICAgICAgICAgICAndG9vbHRpcENvc3QnOiBjb3N0cyxcclxuICAgICAgICAgICAgJ3JlcXVpcmVtZW50JzogKCkgPT4gcmVxdWlyZW1lbnRGdW5jdGlvbigpLFxyXG4gICAgICAgICAgICAnZGF0YV9idWlsZGluZyc6IGJ1aWxkaW5nS2V5LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBidXR0b247XHJcbiAgICB9IGNhdGNoIChlcnJvcilcclxuICAgIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgY3JlYXRlIGJ1aWxkaW5nIGJ1dHRvbiBmb3InLCBidWlsZGluZ0tleSwgYnVpbGRpbmdzLCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhIGJ1aWxkaW5nIHNob3VsZCBiZSB2aXNpYmxlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb3N0cyBUaGUgY29zdHMgb2YgdGhlIGJ1aWxkaW5nXHJcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgYSBidWlsZGluZyBzaG91bGQgYmUgdmlzaWJsZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbihjb3N0cylcclxue1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgY29zdENvbmRpdGlvbiA9IE9iamVjdC5lbnRyaWVzKGNvc3RzKVxyXG4gICAgICAgICAgICAuZXZlcnkoKFttYXRlcmlhbCwgYW1vdW50XSkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzRW5vdWdoUmVzb3VyY2UgPSBnZXRNYXRlcmlhbChtYXRlcmlhbCkgPj0gTWF0aC5mbG9vcihhbW91bnQgLyAyKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBDaGVja2luZyAke21hdGVyaWFsfTogTmVlZCAke01hdGguZmxvb3IoYW1vdW50IC8gMil9LCBIYXZlICR7Z2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcyl9LCBSZXN1bHQ6ICR7aGFzRW5vdWdoUmVzb3VyY2V9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzRW5vdWdoUmVzb3VyY2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFzc2VkU3RhZ2UoJ2Nsb25lcycpICYmIGNvc3RDb25kaXRpb247XHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEJ1eXMgYSBidWlsZGluZyBpZiBwb3NzaWJsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdOYW1lIFRoZSBuYW1lIG9mIHRoZSBidWlsZGluZ1xyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSlcclxue1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIkJ1eWluZyBidWlsZGluZyBcIiArIGJ1aWxkaW5nTmFtZSk7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG5cclxuXHJcblxyXG4gICAgaWYgKCFjYW5CdXlCdWlsZGluZyhidWlsZGluZ05hbWUpKSByZXR1cm47XHJcblxyXG4gICAgaWYgKCFwYXNzZWRTdGFnZSgnYnVpbGRpbmdzJykpIG1ha2VWaXNpYmxlKCdidWlsZGluZ3MnKTtcclxuICAgIC8vIEFjdHVhbGx5IGJ1aWxkIHRoZSBidWlsZGluZ1xyXG4gICAgYnVpbGRpbmcuY291bnQrKztcclxuXHJcbiAgICAvLyBTdWJ0cmFjdCB0aGUgY29zdFxyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBidWlsZGluZy5jb3N0KVxyXG4gICAge1xyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1idWlsZGluZy5jb3N0W3Jlc291cmNlXSk7XHJcbiAgICB9XHJcbiAgICAvLyBBZGQgdGhlIGVmZmVjdHNcclxuICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmVmZmVjdHMpKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdib3VnaHQgYnVpbGRpbmcgZWZmZWN0cycsIHJlc291cmNlLCBhbW91bnQpO1xyXG4gICAgICAgIGluY3JlYXNlTWF4KHJlc291cmNlLCBhbW91bnQpO1xyXG4gICAgICAgIC8vIFVwZGF0ZSBtYXggY2xvbmVzIGFmdGVyIHVwZGF0aW5nIHRoZSBjb3VudFxyXG4gICAgICAgIGlmIChyZXNvdXJjZSA9PT0gJ2Nsb25lcycpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZWNhbGNNYXhDbG9uZXMoKTtcclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmJvb3N0KSlcclxuICAgIHtcclxuICAgICAgICAvLyBHZXQgdGhlIHJhdGUgb2YgY2hhbmdlIGZvciB0aGlzIHJlc291cmNlXHJcbiAgICAgICAgY29uc3QgcmF0ZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtrZXl9SW5jcmVhc2VSYXRlYCk7XHJcbiAgICAgICAgaWYgKCFyYXRlRWxlbWVudCkgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IHJhdGVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dChyZWN0LnJpZ2h0LCByZWN0LmJvdHRvbSwgYCtzcGVlZGAsICdhcXVhJyk7XHJcbiAgICB9XHJcbiAgICAvLyBVcGRhdGUgYnV0dG9uIHRleHRcclxuICAgIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYnVpbGRpbmdOYW1lLCBidWlsZGluZy5jb3VudCwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidWlsZGluZy5lbW9qaSkpKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGNvc3Qgb2YgdGhlIGJ1aWxkaW5nXHJcbiAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChidWlsZGluZ05hbWUpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSBhbGwgdGhlIG90aGVyIGJ1dHRvbnNcclxuICAgIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKTtcclxuXHJcbiAgICB1cGRhdGVCdWlsZGluZ0xpc3QoKTtcclxuXHJcbiAgICBsb2dFdmVudChnZXRBbmFseXRpY3MoKSwgJ2J1aWxkaW5nX3B1cmNoYXNlJywge1xyXG4gICAgICAgIGJ1aWxkaW5nX25hbWU6IGJ1aWxkaW5nTmFtZSxcclxuICAgICAgICB1c2VyX2lkOiBnZXRQbGF5ZXJVaWQoKSAvLyBSZXBsYWNlIHdpdGggdGhlIHVzZXIncyBJRCBvciBhIHVuaXF1ZSBpZGVudGlmaWVyXHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEJ1eXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGJ1aWxkaW5ncyB0aGF0IGNhbiBiZSBwdXJjaGFzZWRcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nTmFtZSBUaGUgbmFtZSBvZiB0aGUgYnVpbGRpbmdcclxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBidWlsZGluZ3MgdGhhdCB3ZXJlIHB1cmNoYXNlZFxyXG4gKi9cclxuZnVuY3Rpb24gYnV5TWF4QnVpbGRpbmdzKGJ1aWxkaW5nTmFtZSlcclxue1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcbiAgICAvLyBUT0RPIHVwZGF0ZSB3aXRoIGNvb2wgZm9ybXVsYVxyXG4gICAgLy8gTWF0aC5mbG9vcihNYXRoLmxvZygoY3VycmVuY3kgKiAoYnVpbGRpbmcucmF0aW8gLSAxKSkgLyAoYnVpbGRpbmcuYmFzZWNvc3QgKiBNYXRoLnBvdyhidWlsZGluZy5yYXRpbywgYnVpbGRpbmcuY291bnQpKSkgLyBNYXRoLmxvZyhidWlsZGluZy5yYXRpbykpO1xyXG4gICAgd2hpbGUgKGNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkpXHJcbiAgICB7XHJcbiAgICAgICAgYnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKTtcclxuICAgICAgICArK2k7XHJcbiAgICB9XHJcbiAgICBsb2dFdmVudChnZXRBbmFseXRpY3MoKSwgJ2J1aWxkaW5nX3B1cmNoYXNlX21heCcsIHtcclxuICAgICAgICBidWlsZGluZ19uYW1lOiBidWlsZGluZ05hbWUsXHJcbiAgICAgICAgdXNlcl9pZDogZ2V0UGxheWVyVWlkKCksXHJcbiAgICAgICAgY291bnQ6IGlcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGk7XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdCxcclxuICAgIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uLFxyXG4gICAgYnV5TWF4QnVpbGRpbmdzLFxyXG4gICAgYnV5QnVpbGRpbmcsXHJcbiAgICBnZW5lcmF0ZUVmZmVjdFN0cmluZyxcclxuICAgIHVwZGF0ZUJ1aWxkaW5nTGlzdFxyXG59OyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuY29uc3QgeyBhbGxNYXRlcmlhbHMgfSA9IHJlcXVpcmUoXCIuL2pzb24vYWxsTWF0ZXJpYWxzXCIpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoXCIuL2pzb24vcHJlc3RpZ2VcIik7XHJcbmNvbnN0IHsgcG9uZGVycyB9ID0gcmVxdWlyZShcIi4vanNvbi9wb25kZXJcIik7XHJcblxyXG5jb25zdCB7IGdldFdvcmtlcnMgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IGhhc1BlcmsgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldEZhY3RvcnlQcm9kdWN0aW9uLCBnZXRGYWN0b3J5Q29uc3VtcHRpb24gfSA9IHJlcXVpcmUoXCIuL2ZhY3RvcnlcIik7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGNhbkNyYWZ0IH0gPSByZXF1aXJlKFwiLi9jYW5DcmFmdFwiKTtcclxuY29uc3QgeyBzZXRSYXRlIH0gPSByZXF1aXJlKCcuL2pzb24vY3VycmVudFJhdGVzJyk7XHJcblxyXG4vLyBDbG9uZXMgd29yayBhdCAxLzQgdGhlIHNwZWVkIGJ5IGRlZmF1bHRcclxudmFyIGNsb25lTXVsdCA9IDAuMjU7XHJcblxyXG4vLyBQZXJrc1xyXG5cclxuY29uc3QgcGVya0Jvb3N0cyA9IHtcclxuICAgICdMdW1iZXJqYWNrJzogWyd3b29kJywgJ3N0aWNrcyddLFxyXG4gICAgJ01pbmVyJzogWydyb2NrcycsICdvcmUnXSxcclxuICAgICdCb3RhbmlzdCc6IFsndmluZXMnLCAnaGVyYnMnLCAnd2hlYXQnXSxcclxuICAgIC8vIEFkZCBvdGhlciBwZXJrcyBhcyBuZWVkZWRcclxufTtcclxuXHJcblxyXG5mdW5jdGlvbiBhcHBseVBlcmtCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtwZXJrLCByZXNvdXJjZXNdIG9mIE9iamVjdC5lbnRyaWVzKHBlcmtCb29zdHMpKSB7XHJcbiAgICAgICAgaWYgKHJlc291cmNlcy5pbmNsdWRlcyhyZXNvdXJjZU5hbWUpICYmIGhhc1BlcmsocGVyaykpIHtcclxuICAgICAgICAgICAgdG90YWwgKj0gMS43NTsgLy8gNzUlIGJvbnVzIHRvIHNwZWNpZmljXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG4vLyBTa2lsbHNcclxuXHJcbmNvbnN0IHNraWxsQm9vc3RzID0ge1xyXG4gICAgJ2dhdGhlcmluZyc6IFsnZ2F0aGVyaW5nQm9vc3QnXSxcclxuICAgICdtYXNvbnJ5JzogWydtYXNvbnJ5Qm9vc3QnXSxcclxuICAgICdjYXJwZW50cnknOiBbJ2NhcnBlbnRyeUJvb3N0J10sXHJcbiAgICAndGhpbmtpbmcnOiBbJ3RoaW5raW5nQm9vc3QnXSxcclxuICAgICdmYXJtaW5nJzogWydmYXJtaW5nQm9vc3QnXSxcclxuICAgICdmaXNoaW5nJzogWydmaXNoaW5nQm9vc3QnXSxcclxuICAgICdodW50aW5nJzogWydodW50aW5nQm9vc3QnXSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGFwcGx5U2tpbGxCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtza2lsbCwgYm9vc3RzXSBvZiBPYmplY3QuZW50cmllcyhza2lsbEJvb3N0cykpIHtcclxuICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5hZmZlY3RlZFJlc291cmNlcy5pbmNsdWRlcyhyZXNvdXJjZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIGJvb3N0cy5mb3JFYWNoKGJvb3N0ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNQcmVzdGlnZShib29zdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbCAqPSAxLjEgKiBnZXRMZXZlbE9mUHJlc3RpZ2UoYm9vc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IHNraWxsUmF0aW8gPSAxLjA2O1xyXG4gICAgICAgICAgICBsZXQgbXVsdCA9IDEgKyAoTWF0aC5wb3coc2tpbGxSYXRpbywgc2tpbGxzW3NraWxsXS5sZXZlbCkgLSAxKSAvIDEwMDtcclxuICAgICAgICAgICAgdG90YWwgKj0gbXVsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZygnc2tpbGxzJywgcmVzb3VyY2VOYW1lLCB0b3RhbCk7XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIFRvb2xzXHJcblxyXG5jb25zdCByZXNvdXJjZVRvb2xNYXAgPSB7XHJcbiAgICAnd29vZCc6ICdheGUnLFxyXG4gICAgJ29yZSc6ICdwaWNrYXhlJyxcclxuICAgICdmaXNoJzogJ2Zpc2hpbmdyb2QnLFxyXG4gICAgJ2dhbWUnOiAnc3BlYXInLFxyXG4gICAgJ3BvbmRlcic6ICdwYXBlcicsXHJcbiAgICAnc3RpY2tzJzogJ3N0YWZmJyxcclxuICAgIC8vIEFkZCBtb3JlIG1hcHBpbmdzIGFzIG5lZWRlZFxyXG59O1xyXG5cclxuZnVuY3Rpb24gYXBwbHlUb29sQm9vc3QodG90YWwsIHJlc291cmNlTmFtZSkge1xyXG4gICAgY29uc3QgdG9vbE5hbWUgPSByZXNvdXJjZVRvb2xNYXBbcmVzb3VyY2VOYW1lXTtcclxuICAgIGlmICh0b29sTmFtZSAmJiBnZXRNYXRlcmlhbCh0b29sTmFtZSkgPiAxMCkge1xyXG4gICAgICAgIHRvdGFsICo9IDEgKyBNYXRoLmxvZzEwKGdldE1hdGVyaWFsKHRvb2xOYW1lKSAvIDEwKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlTmFtZSwgdG9vbE5hbWUsIHRvdGFsKTtcclxuICAgIHJldHVybiB0b3RhbDtcclxufVxyXG5cclxuLy8gQXBwbHkgcG9uZGVyIGJvbnVzZXNcclxuZnVuY3Rpb24gYXBwbHlQb25kZXJCb251c2VzKHRvdGFsLCByZXNvdXJjZU5hbWUpIHtcclxuICAgIGZvciAoY29uc3QgW3BvbmRlcklkLCBwb25kZXJdIG9mIE9iamVjdC5lbnRyaWVzKHBvbmRlcnMpKSB7XHJcbiAgICAgICAgaWYgKGlzUG9uZGVyZWQocG9uZGVySWQpKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAocG9uZGVySWQuc3RhcnRzV2l0aCgnZmFzdGVyUmVzb3VyY2VHYWluJykpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsICo9IDEuMDU7IFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocG9uZGVySWQuc3RhcnRzV2l0aCgnZmFzdGVyUG9uZGVyJykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdwb25kZXInKSB0b3RhbCAqPSAxLjA1O1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgdGhlIGFtb3VudCBhIHJlc291cmNlIHNob3VsZCBpbmNyZWFzZSBieSBpbiBhIGdpdmVuIHRpbWUgcGVyaW9kXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZU5hbWUgVGhlIHJlc291cmNlIHRvIGNhbGN1bGF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsdGFfdGltZSBIb3cgbXVjaCB0aW1lIGhhcyBlbGFwc2VkXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhbW91bnQgdGhhdCByZXNvdXJjZSBzaG91bGQgaW5jcmVhc2UgYnlcclxuKi9cclxuZnVuY3Rpb24gY2FsY0luY3JlYXNlKHJlc291cmNlTmFtZSwgZGVsdGFfdGltZSkge1xyXG4gICAgdmFyIHRvdGFsID0gMDtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdjYWxjSW5jcmVhc2UnLCByZXNvdXJjZU5hbWUsIGRlbHRhX3RpbWUpO1xyXG5cclxuICAgIC8vIGlmIChyZXNvdXJjZU5hbWUgPT09ICdicmVhZCcgJiYgaXNQb25kZXJlZCgnZWF0QnJlYWQnKSkgcmV0dXJuIHBhcnNlRmxvYXQoKC0xICogZGVsdGFfdGltZSAvIDEwMDApLnRvRml4ZWQoMykpO1xyXG5cclxuICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpLmJ1aWxkaW5ncztcclxuXHJcbiAgICBpZiAocmVzb3VyY2VOYW1lID09PSAnY2xvbmVzJyAmJiBpc1BvbmRlcmVkKCdhdXRvQ2xvbmUnKSkgdG90YWwgPSAxO1xyXG5cclxuICAgIC8vIEdhdGhlcmluZyBwZXJzb25hbGx5XHJcbiAgICBpZiAocmVzb3VyY2VzW3Jlc291cmNlTmFtZV0gJiYgcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgdG90YWwgKz0gMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBqb2JzXHJcbiAgICBsZXQgbGVhZGVyTXVsdCA9IGhhc1BlcmsoJ0xlYWRlcicpID8gY2xvbmVNdWx0ICogMS41IDogY2xvbmVNdWx0O1xyXG4gICAgdG90YWwgKz0gbGVhZGVyTXVsdCAqIGdldFdvcmtlcnMocmVzb3VyY2VOYW1lKSB8fCAwO1xyXG4gICAgaWYgKGhhc1ByZXN0aWdlKCdjbG9uZUJvb3N0JykgJiYgZ2V0V29ya2VycyhyZXNvdXJjZU5hbWUpID4gMCkgdG90YWwgKj0gMS4wNSAqIGdldFdvcmtlcnMocmVzb3VyY2VOYW1lKSAqIGdldExldmVsT2ZQcmVzdGlnZSgnY2xvbmVCb29zdCcpO1xyXG5cclxuXHJcbiAgICAvLyBBcHBseSBwZXJrcyBwcm9kdWN0aW9uIGJvb3N0XHJcbiAgICB0b3RhbCA9IGFwcGx5UGVya0Jvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpO1xyXG4gICAgLy8gQXBwbHkgc2tpbGxzIHRvIGFsbCBjbG9uZXNcclxuICAgIHRvdGFsID0gYXBwbHlTa2lsbEJvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpO1xyXG5cclxuICAgIC8vIEFkZCBib251c2VzIGZyb20gYnVpbGRpbmdzIGFsb25nIHdpdGggZWZmZWN0aXZlQnVpbGRpbmdzIHBvbmRlclxyXG4gICAgZm9yIChjb25zdCBidWlsZGluZyBvZiBPYmplY3Qua2V5cyhidWlsZGluZ3MpKSB7XHJcbiAgICAgICAgY29uc3QgYm9vc3REYXRhID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIikuZ2V0Qm9vc3QoYnVpbGRpbmcsIHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgaWYgKGJvb3N0RGF0YSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGluY3JlYXNlID0gTWF0aC5wb3coYm9vc3REYXRhLCBidWlsZGluZ3NbYnVpbGRpbmddLmNvdW50KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBbcG9uZGVySWQsIHBvbmRlcl0gb2YgT2JqZWN0LmVudHJpZXMocG9uZGVycykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKHBvbmRlcklkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb25kZXJJZC5zdGFydHNXaXRoKCdlZmZlY3RpdmVCdWlsZGluZ3MnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZSAqPSAxLjAzOyBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdG90YWwgKj0gaW5jcmVhc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnYnVpbGRpbmcgYm9vc3RzJywgcmVzb3VyY2VOYW1lLCB0b3RhbCk7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnZWF0QnJlYWQnKSAmJiBnZXRNYXRlcmlhbCgnYnJlYWQnKSA+IDApIHtcclxuICAgICAgICBpZiAocmVzb3VyY2VOYW1lICE9PSAnYnJlYWQnKSB0b3RhbCAqPSAxLjE7XHJcbiAgICAgICAgZWxzZSBpZiAocmVzb3VyY2VOYW1lID09PSAnYnJlYWQnKSB0b3RhbCA9IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVzYWdlOiBBcHBseSBwb25kZXJzIHRvIHRoZSAndG90YWwnIHZhbHVlXHJcbiAgICB0b3RhbCA9IGFwcGx5UG9uZGVyQm9udXNlcyh0b3RhbCwgcmVzb3VyY2VOYW1lKTtcclxuICAgIC8vIGlmIChpc1BvbmRlcmVkKCdmYXN0ZXJSZXNvdXJjZUdhaW4nKSkgdG90YWwgKj0gMS4wNTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdwb25kZXIgYm9vc3RzJywgcmVzb3VyY2VOYW1lLCB0b3RhbCk7XHJcblxyXG5cclxuICAgIC8vIENoZWNrIHRvb2xzXHJcbiAgICB0b3RhbCA9IGFwcGx5VG9vbEJvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Rvb2wgYm9vc3RzJywgcmVzb3VyY2VOYW1lLCB0b3RhbCk7XHJcbiAgICAvLyBOZWVkIGF0IGxlYXN0IDEwIGh1c2tzIHRvIGJvb3N0IG1hdGhlbWF0aWNhbGx5IChsbigxKSA9IDApXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2h1c2tzJykgPiAxMCkgdG90YWwgKj0gMSArIE1hdGgubG9nKGdldE1hdGVyaWFsKCdodXNrcycpIC8gMTApO1xyXG5cclxuICAgIC8vIERpbWluaXNoaW5nIHJldHVybnNcclxuICAgIHRvdGFsID0gTWF0aC5zcXJ0KHRvdGFsKTtcclxuXHJcbiAgICAvLyBGYWN0b3JpZXMgZG9uJ3QgZGltaW5pc2hcclxuICAgIHRvdGFsICs9IGNhbkNyYWZ0KHJlc291cmNlTmFtZSkgPyBnZXRGYWN0b3J5UHJvZHVjdGlvbihyZXNvdXJjZU5hbWUpIDogMDtcclxuICAgIHRvdGFsIC09IGdldEZhY3RvcnlDb25zdW1wdGlvbihyZXNvdXJjZU5hbWUpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3NxcnQnLCByZXNvdXJjZU5hbWUsIHRvdGFsKTtcclxuICAgIC8vIENvbnZlcnQgZnJvbSBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoKHRvdGFsICogZGVsdGFfdGltZSAvIDEwMDApLnRvRml4ZWQoMykpO1xyXG59XHJcbmV4cG9ydHMuY2FsY0luY3JlYXNlID0gY2FsY0luY3JlYXNlO1xyXG5mdW5jdGlvbiB1cGRhdGVSYXRlcygpXHJcbntcclxuICAgIEFycmF5LmZyb20oYWxsTWF0ZXJpYWxzKS5mb3JFYWNoKChrZXkpID0+IHsgc2V0UmF0ZShrZXksIGNhbGNJbmNyZWFzZShrZXksIDEwMDApKTsgfSk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVSYXRlcyA9IHVwZGF0ZVJhdGVzO1xyXG4iLCJjb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgZ2V0TWF4IH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ05hbWVcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICBsZXQgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKS5idWlsZGluZ3M7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG5cclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgIGlmIChidWlsZGluZy5jb3N0W3Jlc291cmNlXSA+IGdldE1hdGVyaWFsKHJlc291cmNlLCByZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIGNhbkJ1eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FuJ3QgYnV5IGNsb25pbmcgYnVpbGRpbmdzIGJlZm9yZSBjbG9uZXMgdW5sb2NrZWRcclxuICAgIGlmIChidWlsZGluZy5lZmZlY3RzICYmIGJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddICYmICFwYXNzZWRTdGFnZSgnY2xvbmUnKSkgY2FuQnV5ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB3ZSBidXkgJyxidWlsZGluZ05hbWUsY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuZXhwb3J0cy5jYW5CdXlCdWlsZGluZyA9IGNhbkJ1eUJ1aWxkaW5nO1xyXG5cclxuZnVuY3Rpb24gY2FuU3RvcmVCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIHJlc291cmNlc1xyXG4gICAgY29uc3QgYnVpbGRpbmdzID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpLmJ1aWxkaW5ncztcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG4gICAgcmV0dXJuIGNhbkFmZm9yZENvc3QoYnVpbGRpbmcuY29zdCk7XHJcblxyXG59XHJcbmV4cG9ydHMuY2FuU3RvcmVCdWlsZGluZyA9IGNhblN0b3JlQnVpbGRpbmc7XHJcblxyXG5mdW5jdGlvbiBjYW5BZmZvcmRDb3N0KGNvc3QpIHtcclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gY29zdCkge1xyXG4gICAgICAgIGlmIChjb3N0W3Jlc291cmNlXSA+IGdldE1heChyZXNvdXJjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmV4cG9ydHMuY2FuQWZmb3JkQ29zdCA9IGNhbkFmZm9yZENvc3Q7IiwiY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcmVzb3VyY2UgY2FuIGJlIGNyYWZ0ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZUtleSBUaGUga2V5IG9mIHRoZSByZXNvdXJjZSB0byBjaGVjay5cclxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgcmVzb3VyY2UgY2FuIGJlIGNyYWZ0ZWQsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmZ1bmN0aW9uIGNhbkNyYWZ0KHJlc291cmNlS2V5KSB7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgbGV0IHJlcXVpcmVtZW50cyA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgYWxsIHJlcXVpcmVtZW50cyBhcmUgbWV0XHJcbiAgICAvLyB0cnkge1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VLZXksIHJlcXVpcmVtZW50cyk7XHJcbiAgICBmb3IgKGNvbnN0IFttYXQsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVxdWlyZW1lbnRzKSlcclxuICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0KSA8IHZhbClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIGluIGNhbGN1bGF0aW5nIHJlcXVpcmVtZW50czogJywgcmVzb3VyY2VLZXksIHJlcXVpcmVtZW50cywgZXJyKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5leHBvcnRzLmNhbkNyYWZ0ID0gY2FuQ3JhZnQ7IiwiLyoqXHJcbiAqIENhcGl0YWxpemVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmdcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBzdHJpbmdFeGFtcGxlXHJcbiAqIEByZXR1cm5zIFN0cmluZ0V4YW1wbGVcclxuICovXHJcbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdChzdHIpIHtcclxuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XHJcbn1cclxuZXhwb3J0cy5jYXBpdGFsaXplRmlyc3QgPSBjYXBpdGFsaXplRmlyc3Q7IiwiLy8gRXhhbXBsZSB1c2FnZVxyXG4vLyBuYXZpZ2F0ZVRvKCduZXh0LXBhZ2UuaHRtbCcpO1xyXG4vLyBNZXNzYWdlIFxyXG5jb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJyk7XHJcbmV4cG9ydHMubWVzc2FnZUVsZW1lbnQgPSBtZXNzYWdlRWxlbWVudDtcclxuZnVuY3Rpb24gY2hhbmdlTWVzc2FnZShuZXdNZXNzYWdlLCBjbG9uZVdvcmRzLCB0b29sdGlwID0gJ1lvdSBmZWVsIHBlY2tpc2ggZm9yIHNvbWUgc2VhZm9vZCcpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKG5ld01lc3NhZ2UsIGNsb25lV29yZHMsIHRvb2x0aXApO1xyXG4gICAgaWYgKHRvb2x0aXAgPT09IG51bGwpIHRvb2x0aXAgPSAnWW91IGZlZWwgcGVja2lzaCBmb3Igc29tZSBzZWFmb29kJztcclxuICAgIGNvbnN0IG1vZGlmaWVkTWVzc2FnZSA9IG5ld01lc3NhZ2UucmVwbGFjZShjbG9uZVdvcmRzLCBgPHNwYW4gY2xhc3M9J3Rvb2x0aXAnIGlkPVwiYWxvbmVcIiB0b29sdGlwRGVzYz1cIiR7dG9vbHRpcH1cIiB0b29sdGlwY29zdD1cIkNsaWNrIHRvIGNsb25lIHlvdXJzZWxmLlwiPiR7Y2xvbmVXb3Jkc308L3NwYW4+YCk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSBtb2RpZmllZE1lc3NhZ2U7XHJcbn1cclxuZXhwb3J0cy5jaGFuZ2VNZXNzYWdlID0gY2hhbmdlTWVzc2FnZTsiLCJjb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9nZXRNYXRlcmlhbFwiKTtcclxuY29uc3QgeyBpbmNyZWFzZU1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9yZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgc2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL3NldE1hdGVyaWFsXCIpO1xyXG5cclxuXHJcbmNvbnN0IGxvb3RUYWJsZSA9IHtcclxuICAgIGh1c2tzOiB7IHByb2JhYmlsaXR5OiAwLjA1LCBxdWFudGl0eTogMSB9LFxyXG5cclxuICAgIG5haWxzOiB7IHByb2JhYmlsaXR5OiAwLjEwLCBxdWFudGl0eTogNTAgfSxcclxuICAgIHNsYWJzOiB7IHByb2JhYmlsaXR5OiAwLjIwLCBxdWFudGl0eTogNTAgfSxcclxuICAgIGJlYW1zOiB7IHByb2JhYmlsaXR5OiAwLjEwLCBxdWFudGl0eTogNjAgfSxcclxuXHJcbiAgICBheGU6IHsgcHJvYmFiaWxpdHk6IDAuMTUsIHF1YW50aXR5OiA1IH0sXHJcbiAgICBzcGVhcjogeyBwcm9iYWJpbGl0eTogMSwgcXVhbnRpdHk6IDUgfSxcclxuXHJcbiAgICBnb2xkOiB7IHByb2JhYmlsaXR5OiAuMSwgcXVhbnRpdHk6IDEwIH0sXHJcbiAgICBpcm9uOiB7IHByb2JhYmlsaXR5OiAwLjE1LCBxdWFudGl0eTogNTAgfSxcclxuICAgIHNpbHZlcjogeyBwcm9iYWJpbGl0eTogMC4wNSwgcXVhbnRpdHk6IDIwIH0sXHJcbiAgICBzdGVlbDogeyBwcm9iYWJpbGl0eTogMC4xMCwgcXVhbnRpdHk6IDMwIH0sXHJcblxyXG4gICAgYnJpY2tzOiB7IHByb2JhYmlsaXR5OiAwLjE1LCBxdWFudGl0eTogODAgfSxcclxuXHJcbn07XHJcblxyXG5sZXQgY3Vyckxvb3QgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIGdldEN1cnJMb290KClcclxue1xyXG4gICAgcmV0dXJuIGN1cnJMb290O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUxvb3QoKVxyXG57XHJcbiAgICBsZXQgbG9vdCA9IHt9O1xyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBsb290VGFibGUpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCBsb290VGFibGVbcmVzb3VyY2VdLnByb2JhYmlsaXR5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSBNYXRoLmZsb29yKGxvb3RUYWJsZVtyZXNvdXJjZV0ucXVhbnRpdHkgKiAoTWF0aC5yYW5kb20oKSAqIC40ICsgLjgpKTsgLy8gR2V0IGxvb3QgODAlIC0gMTIwJVxyXG4gICAgICAgICAgICBpZiAocXVhbnRpdHkgPiAwKSBsb290W3Jlc291cmNlXSA9IHF1YW50aXR5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGN1cnJMb290ID0gbG9vdDtcclxuICAgIC8vY29uc29sZS5sb2coY3Vyckxvb3QpO1xyXG4gICAgcmV0dXJuIGxvb3Q7XHJcbn1cclxuXHJcblxyXG5cclxuLy8gc2NyaXB0LmpzXHJcbmNvbnN0IGFyZW5hID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FyZW5hJyk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUJhbGxzKHRlYW0sIGNvdW50KVxyXG57XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgYmFsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGJhbGwuY2xhc3NOYW1lID0gYGJhbGwgJHt0ZWFtfWA7XHJcbiAgICAgICAgYmFsbC5zdHlsZS5sZWZ0ID0gYCR7dGVhbSA9PT0gJ3BsYXllcicgPyAxMCA6IDkwfSVgOyAvLyBTdGFydGluZyBwb3NpdGlvbnNcclxuICAgICAgICBiYWxsLnN0eWxlLnRvcCA9IGAkezEwICsgaSAqIDMwfXB4YDtcclxuICAgICAgICBhcmVuYS5hcHBlbmRDaGlsZChiYWxsKTtcclxuICAgICAgICBpZiAodGVhbSA9PT0gJ3BsYXllcicpIHBsYXllclRyb29wcy5wdXNoKGJhbGwpO1xyXG4gICAgICAgIGVsc2UgZW5lbXlUcm9vcHMucHVzaChiYWxsKTtcclxuICAgIH1cclxufVxyXG5sZXQgcGxheWVyVHJvb3BzID0gW107XHJcbmxldCBlbmVteVRyb29wcyA9IFtdO1xyXG5sZXQgYW5pbWF0aW9ucyA9IFtdO1xyXG5jb25zdCBhbmltVGltZSA9IDMwMDA7XHJcbmZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKClcclxue1xyXG5cclxuICAgIGNvbnN0IGJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKTtcclxuICAgIGJhbGxzLmZvckVhY2goYmFsbCA9PlxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGlzcGxheWVyVGVhbSA9IGJhbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdwbGF5ZXInKTtcclxuICAgICAgICBjb25zdCB0YXJnZXRYID0gaXNwbGF5ZXJUZWFtID8gYXJlbmEub2Zmc2V0V2lkdGggOiAtYXJlbmEub2Zmc2V0V2lkdGg7IC8vIFRhcmdldCBwb3NpdGlvbnNcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhiYWxsLCB0YXJnZXRYKTtcclxuICAgICAgICBhbmltYXRpb25zLnB1c2goYmFsbC5hbmltYXRlKFtcclxuICAgICAgICAgICAgeyB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKCR7dGFyZ2V0WH1weClgIH1cclxuICAgICAgICBdLCB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiBhbmltVGltZSxcclxuICAgICAgICAgICAgZmlsbDogJ25vbmUnXHJcbiAgICAgICAgfSkuZmluaXNoZWQudGhlbigoKSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFsbC5yZW1vdmUoKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9KTtcclxuICAgIHVwZGF0ZSgpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT5cclxuICAgIHtcclxuICAgICAgICBjb25zdCBwbGF5ZXJCYWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGF5ZXInKS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgZW5lbXlCYWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5lbmVteScpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgaWYgKHBsYXllckJhbGxzID09PSAwIHx8IGVuZW15QmFsbHMgPT09IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGJhbGwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhbGwucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5lZWQgdG8gYmF0dGxlIGFnYWluXHJcbiAgICAgICAgY3JlYXRlQmFsbHMoJ3BsYXllcicsIHBsYXllckJhbGxzKTtcclxuICAgICAgICBjcmVhdGVCYWxscygnZW5lbXknLCBlbmVteUJhbGxzKTtcclxuICAgICAgICBzdGFydEFuaW1hdGlvbigpO1xyXG5cclxuICAgIH0sIGFuaW1UaW1lIC0gMTAwKTsgLy8gTmVlZCB0byBleGVjdXRlIGJlZm9yZSB0aGUgYmFsbHMgYXJlIGRlbGV0ZWRcclxufVxyXG5cclxubGV0IGhhc1Jld2FyZGVkID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGNoZWNrRm9yV2luKClcclxue1xyXG4gICAgaWYgKGhhc1Jld2FyZGVkKSByZXR1cm47XHJcbiAgICBjb25zdCBwbGF5ZXJCYWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGF5ZXInKS5sZW5ndGg7XHJcbiAgICBjb25zdCBlbmVteUJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVuZW15JykubGVuZ3RoO1xyXG5cclxuICAgIGlmIChwbGF5ZXJCYWxscyA9PT0gMCAmJiBlbmVteUJhbGxzID4gMCkgYmF0dGxlUmVzdWx0ID0gJ2VuZW15JztcclxuICAgIGVsc2UgaWYgKGVuZW15QmFsbHMgPT09IDAgJiYgcGxheWVyQmFsbHMgPiAwKSBiYXR0bGVSZXN1bHQgPSAncGxheWVyJztcclxuXHJcbiAgICBpZiAoYmF0dGxlUmVzdWx0ICE9PSBudWxsKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGNvbWJhdFJlc3VsdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21iYXRSZXN1bHQnKTtcclxuICAgICAgICBpZiAoYmF0dGxlUmVzdWx0ID09PSBcInBsYXllclwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29tYmF0UmVzdWx0LnRleHRDb250ZW50ID0gXCJZb3Ugd29uIVwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYmF0dGxlUmVzdWx0ID09PSBcImVuZW15XCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb21iYXRSZXN1bHQudGV4dENvbnRlbnQgPSBcIlRoZSBFbmVteSB3b24hXCI7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb21iYXRSZXN1bHQudGV4dENvbnRlbnQgPSBcIkl0J3MgYSBkcmF3ISBIdWg/IFRoYXQncyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuIVwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29uc3VtZSBhbGwgb3VyIHZpb2xlbmNlXHJcbiAgICAgICAgc2V0TWF0ZXJpYWwoJ3Zpb2xlbmNlJywgMCk7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZmlnaHRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9LCBhbmltVGltZSAvIDIpO1xyXG5cclxuICAgICAgICAvLyBSZXdhcmQgdGhlIHBsYXllciB0aGVpciBsb290IGlmIHRoZXkgd29uXHJcbiAgICAgICAgaWYgKGJhdHRsZVJlc3VsdCA9PT0gXCJwbGF5ZXJcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhhc1Jld2FyZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IHN0YW5jZU11bHQgPSAxO1xyXG4gICAgICAgICAgICBpZiAoZ2V0U3RhbmNlKCkgPT09ICdhZ2dyZXNzaXZlJykgc3RhbmNlTXVsdCA9IC43NTtcclxuICAgICAgICAgICAgaWYgKGdldFN0YW5jZSgpID09PSAnY2FyZWZ1bCcpIHN0YW5jZU11bHQgPSAxLjI1O1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBbbG9vdE5hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhjdXJyTG9vdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwobG9vdE5hbWUsIHZhbHVlICogc3RhbmNlTXVsdCk7XHJcbiAgICAgICAgICAgICAgICBjb21iYXRSZXN1bHQuaW5uZXJIVE1MICs9IGA8YnI+KyR7dmFsdWUgKiBzdGFuY2VNdWx0fSAke2xvb3ROYW1lfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ2VuZXJhdGVMb290KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGN1bGF0ZUVuZW15TWlnaHQoKTtcclxuICAgICAgICByZWZyZXNoVmFsdWVzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkZXRlY3RDb2xsaXNpb25zKHBsYXllciwgZW5lbXkpXHJcbntcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxheWVyLmxlbmd0aDsgaSsrKVxyXG4gICAge1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZW5lbXkubGVuZ3RoOyBqKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoaXNDb2xsaWRpbmcocGxheWVyVHJvb3BzW2ldLCBlbmVteVRyb29wc1tqXSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY29sbGlzaW9uXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVDb2xsaXNpb24ocGxheWVyVHJvb3BzW2ldLCBlbmVteVRyb29wc1tqXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQ29sbGlkaW5nKGJhbGwxLCBiYWxsMilcclxue1xyXG4gICAgY29uc3QgcmVjdDEgPSBiYWxsMS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IHJlY3QyID0gYmFsbDIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgcmV0dXJuICEoXHJcbiAgICAgICAgcmVjdDEucmlnaHQgPCByZWN0Mi5sZWZ0IHx8XHJcbiAgICAgICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0IHx8XHJcbiAgICAgICAgcmVjdDEuYm90dG9tIDwgcmVjdDIudG9wIHx8XHJcbiAgICAgICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tXHJcbiAgICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDb2xsaXNpb24ocGxheWVyQmFsbCwgZW5lbXlCYWxsKVxyXG57XHJcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDEgLyAoMSArIE1hdGgucG93KDEwLCAoZ2V0Q3VyckVuZW15TWlnaHQoKSAtIGNhbGN1bGF0ZVBsYXllck1pZ2h0KCkpIC8gY2hhbmNlU3ByZWFkKSkpIGVuZW15QmFsbC5yZW1vdmUoKTtcclxuICAgIGVsc2UgcGxheWVyQmFsbC5yZW1vdmUoKTtcclxuXHJcbn1cclxuXHJcbi8vIENhbGwgdGhpcyBmdW5jdGlvbiBjb250aW51b3VzbHksIGUuZy4sIHVzaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG5mdW5jdGlvbiB1cGRhdGUoKVxyXG57XHJcbiAgICBkZXRlY3RDb2xsaXNpb25zKHBsYXllclRyb29wcywgZW5lbXlUcm9vcHMpO1xyXG4gICAgaWYgKCFjaGVja0ZvcldpbigpICYmICFoYXNSZXdhcmRlZCkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNSb3VuZGluZygpXHJcbntcclxuICAgIGNvbnN0IHBsYXllck1pZ2h0ID0gY2FsY3VsYXRlUGxheWVyTWlnaHQoKTtcclxuICAgIGNvbnN0IGVuZW15TWlnaHQgPSBnZXRDdXJyRW5lbXlNaWdodCgpO1xyXG5cclxuICAgIGNvbnN0IGJhbGxDb3VudCA9IDEyO1xyXG4gICAgY29uc3QgcGxheWVyUm91bmRpbmcgPSBNYXRoLmNlaWwocGxheWVyTWlnaHQgLyBiYWxsQ291bnQpO1xyXG4gICAgY29uc3QgZW5lbXlSb3VuZGluZyA9IE1hdGguY2VpbChlbmVteU1pZ2h0IC8gYmFsbENvdW50KTtcclxuXHJcbiAgICBjb25zdCBoaWdoZXJSb3VuZGluZyA9IE1hdGgubWF4KHBsYXllclJvdW5kaW5nLCBlbmVteVJvdW5kaW5nKTtcclxuICAgIGNvbnN0IHBsYXllckNvdW50ID0gTWF0aC5mbG9vcihwbGF5ZXJNaWdodCAvIGhpZ2hlclJvdW5kaW5nKTtcclxuICAgIGNvbnN0IGVuZW15Q291bnQgPSBNYXRoLmZsb29yKGVuZW15TWlnaHQgLyBoaWdoZXJSb3VuZGluZyk7XHJcblxyXG4gICAgY29uc3QgYXBwcm94RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHByb3hpbWF0ZUJhbGwnKTtcclxuICAgIGFwcHJveEVsZW1lbnQudGV4dENvbnRlbnQgPSBoaWdoZXJSb3VuZGluZy50b1N0cmluZygpO1xyXG5cclxuICAgIHJldHVybiBbcGxheWVyQ291bnQsIGVuZW15Q291bnRdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXVzZUFuaW1hdGlvbigpXHJcbntcclxuICAgIC8vIGNvbnN0IGJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKTtcclxuICAgIGFuaW1hdGlvbnMuZm9yRWFjaChiYWxsID0+XHJcbiAgICB7XHJcbiAgICAgICAgYmFsbC5wYXVzZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IGZpZ2h0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uI3N0YXJ0Q29tYmF0Jyk7XHJcblxyXG5sZXQgYmF0dGxlUmVzdWx0ID0gbnVsbDsgLy8gVmFyaWFibGUgdG8gc3RvcmUgYmF0dGxlIHJlc3VsdFxyXG5cclxuY29uc3QgY2hhbmNlU3ByZWFkID0gMjAwOyAvLyBMYXJnZXIgbWVhbnMgc21hbGxlciBhcm1pZXMgaGF2ZSBhIGhpZ2hlciBjaGFuY2UgdG8gYmVhdCBsYXJnZXIgYXJtaWVzXHJcbmZ1bmN0aW9uIHNpbXVsYXRlQmF0dGxlKClcclxue1xyXG4gICAgLy8gUGVyZm9ybSB0aGUgYmF0dGxlIHNpbXVsYXRpb24gbG9naWMgaGVyZVxyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlQmF0dGxlUmVzdWx0KClcclxuICAgIHtcclxuICAgICAgICBjb25zdCBwbGF5ZXJNaWdodCA9IGNhbGN1bGF0ZVBsYXllck1pZ2h0KCk7XHJcbiAgICAgICAgY29uc3QgZW5lbXlNaWdodCA9IGdldEN1cnJFbmVteU1pZ2h0KCk7XHJcbiAgICAgICAgY29uc3QgcGxheWVyQ2hhbmNlID0gMSAvICgxICsgTWF0aC5wb3coMTAsIChlbmVteU1pZ2h0IC0gcGxheWVyTWlnaHQpIC8gY2hhbmNlU3ByZWFkKSk7XHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEgdG8gc2ltdWxhdGUgdGhlIGJhdHRsZSBvdXRjb21lXHJcbiAgICAgICAgY29uc3QgcmFuZG9tT3V0Y29tZSA9IE1hdGgucmFuZG9tKCk7XHJcblxyXG4gICAgICAgIGlmIChyYW5kb21PdXRjb21lIDwgcGxheWVyQ2hhbmNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICdwbGF5ZXInOyAvLyBQbGF5ZXIgd2luc1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICdlbmVteSc7IC8vIEVuZW15IHdpbnNcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSByZXN1bHQgYW5kIHN0b3JlIGl0IGluIHRoZSBiYXR0bGVSZXN1bHQgdmFyaWFibGVcclxuICAgIGJhdHRsZVJlc3VsdCA9IGNhbGN1bGF0ZUJhdHRsZVJlc3VsdCgpO1xyXG4gICAgY2hlY2tGb3JXaW4oKTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogTWFpbiBjb21iYXQgZnVuY3Rpb24sIHN0YXJ0IGV2ZXJ5dGhpbmdcclxuICovXHJcbmZ1bmN0aW9uIGNvbWJhdCgpXHJcbntcclxuICAgIGJhdHRsZVJlc3VsdCA9IG51bGw7XHJcbiAgICAvLyBSZW1vdmUgYWxsIGJhbGxzXHJcbiAgICBmb3IgKGNvbnN0IGJhbGwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKSlcclxuICAgIHtcclxuICAgICAgICBiYWxsLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgLy8gUm91bmQgZG93biB0aGUgYmFsbHMgdG8gMTJcclxuICAgIGxldCBbcGxheWVyQ291bnQsIGVuZW15Q291bnRdID0gY2FsY1JvdW5kaW5nKCk7XHJcblxyXG4gICAgY3JlYXRlQmFsbHMoJ3BsYXllcicsIHBsYXllckNvdW50KTtcclxuICAgIGNyZWF0ZUJhbGxzKCdlbmVteScsIGVuZW15Q291bnQpO1xyXG5cclxuXHJcbiAgICBjb25zdCBjb21iYXRSZXN1bHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tYmF0UmVzdWx0Jyk7XHJcbiAgICBjb21iYXRSZXN1bHQudGV4dENvbnRlbnQgPSAnJztcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBmaWdodEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICBoYXNSZXdhcmRlZCA9IGZhbHNlO1xyXG5cclxuXHJcblxyXG4gICAgc3RhcnRBbmltYXRpb24oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlUGxheWVyTWlnaHQoKVxyXG57XHJcbiAgICBsZXQgbWlnaHQgPSBnZXRNYXRlcmlhbCgndmlvbGVuY2UnKSArIGdldE1hdGVyaWFsKCdzcGVhcicpICsgZ2V0TWF0ZXJpYWwoJ21lZGljaW5lJyk7XHJcbiAgICBpZiAoZ2V0U3RhbmNlKCkgPT09ICdhZ2dyZXNzaXZlJykgbWlnaHQgKj0gMS4yO1xyXG4gICAgZWxzZSBpZiAoZ2V0U3RhbmNlKCkgPT09ICdjYXJlZnVsJykgbWlnaHQgKj0gMC44O1xyXG4gICAgcmV0dXJuIG1pZ2h0O1xyXG59XHJcblxyXG4vL2NvbnNvbGUubG9nXHJcbmxldCBlbmVteU1pZ2h0ID0gNDAwOyAvLyBJbml0aWFsaXplIGVuZW15IG1pZ2h0IGFzIGEgZ2xvYmFsIHZhcmlhYmxlXHJcblxyXG5mdW5jdGlvbiBnZXROZXh0QmF0dGxlTWlnaHQocGxheWVyV29uUHJldmlvdXNCYXR0bGUpXHJcbntcclxuXHJcbiAgICBpZiAocGxheWVyV29uUHJldmlvdXNCYXR0bGUgPT09IG51bGwpIHJldHVybiBlbmVteU1pZ2h0O1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBsYXllciB3b24gdGhlIHByZXZpb3VzIGJhdHRsZVxyXG4gICAgaWYgKHBsYXllcldvblByZXZpb3VzQmF0dGxlKVxyXG4gICAge1xyXG4gICAgICAgIC8vIEluY3JlYXNlIHRoZSBkaWZmaWN1bHR5IGZvciB0aGUgbmV4dCBiYXR0bGVcclxuICAgICAgICBlbmVteU1pZ2h0ICo9IDEuMzsgLy8gWW91IGNhbiBhZGp1c3QgdGhlIGluY3JlbWVudCBhcyBuZWVkZWRcclxuICAgIH0gZWxzZVxyXG4gICAge1xyXG4gICAgICAgIC8vIERlY3JlYXNlIHRoZSBkaWZmaWN1bHR5IGZvciB0aGUgbmV4dCBiYXR0bGVcclxuICAgICAgICBlbmVteU1pZ2h0IC89IDEuMTsgLy8gWW91IGNhbiBhZGp1c3QgdGhlIGRlY3JlbWVudCBhcyBuZWVkZWRcclxuICAgIH1cclxuXHJcbiAgICAvLyBFbnN1cmUgdGhlIGJhc2VNaWdodCBkb2Vzbid0IGdvIGJlbG93IGEgbWluaW11bSB2YWx1ZVxyXG4gICAgaWYgKGVuZW15TWlnaHQgPCAyMDApXHJcbiAgICB7XHJcbiAgICAgICAgZW5lbXlNaWdodCA9IDIwMDsgLy8gU2V0IGEgbWluaW11bSBtaWdodCB2YWx1ZVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkanVzdCB0aGUgZGlmZmljdWx0eSBiYXNlZCBvbiB0aGUgcGxheWVyJ3MgbGV2ZWxcclxuICAgIC8vIEZvciBleGFtcGxlLCB5b3UgY2FuIG1ha2UgYmF0dGxlcyBwcm9ncmVzc2l2ZWx5IGhhcmRlciBhcyB0aGUgcGxheWVyJ3MgbGV2ZWwgaW5jcmVhc2VzXHJcbiAgICAvLyBiYXNlTWlnaHQgKz0gcGxheWVyTGV2ZWwgKiAxMDsgLy8gQWRqdXN0IHRoaXMgZm9ybXVsYSBhcyBuZWVkZWRcclxuXHJcbiAgICByZXR1cm4gZW5lbXlNaWdodDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHNldEVuZW15TWlnaHQobWlnaHQpXHJcbntcclxuICAgIGVuZW15TWlnaHQgPSBtaWdodDsgLy8gVXBkYXRlIHRoZSBnbG9iYWwgZW5lbXlNaWdodCB2YXJpYWJsZVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDdXJyRW5lbXlNaWdodCgpXHJcbntcclxuICAgIHJldHVybiBlbmVteU1pZ2h0OyAvLyBSZXR1cm4gdGhlIGdsb2JhbCBlbmVteU1pZ2h0IHZhcmlhYmxlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZUVuZW15TWlnaHQoKVxyXG57XHJcbiAgICAvL2NvbnNvbGUubG9nKCdiYXR0bGUgcmVzdWx0IHdhcycsIGJhdHRsZVJlc3VsdCk7XHJcbiAgICBjb25zdCBtaWdodCA9IGdldE5leHRCYXR0bGVNaWdodChiYXR0bGVSZXN1bHQgPT09IG51bGwgfHwgYmF0dGxlUmVzdWx0ID09PSAncGxheWVyJyk7XHJcbiAgICByZXR1cm4gbWlnaHQ7XHJcbn1cclxuXHJcbmNvbnN0IHBsYXllck1pZ2h0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXJNaWdodCcpO1xyXG5jb25zdCBlbmVteU1pZ2h0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmVteU1pZ2h0Jyk7XHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVdpbkNoYW5jZSgpXHJcbntcclxuXHJcbiAgICBjb25zdCBwbGF5ZXJNaWdodCA9IGNhbGN1bGF0ZVBsYXllck1pZ2h0KCk7XHJcbiAgICBjb25zdCBlbmVteU1pZ2h0ID0gZ2V0Q3VyckVuZW15TWlnaHQoKTtcclxuXHJcbiAgICAvLyBjb25zdCBbcGxheWVyQ291bnQsIGVuZW15Q291bnRdID0gY2FsY1JvdW5kaW5nKCk7XHJcblxyXG4gICAgLy8gVGhpcyBudW1iZXIgaXMgYSBkaXJ0eSBsaWUsIGJ1dCB0aGUgdHJ1dGggaXMgdG9vIGhhcmRcclxuICAgIGNvbnN0IGNoYW5jZSA9IDEgLyAoMSArIE1hdGgucG93KDEwLCAoZW5lbXlNaWdodCAtIHBsYXllck1pZ2h0KSAvIGNoYW5jZVNwcmVhZCkpO1xyXG5cclxuXHJcbiAgICBwbGF5ZXJNaWdodEVsZW1lbnQudGV4dENvbnRlbnQgPSBwbGF5ZXJNaWdodC50b0ZpeGVkKDApO1xyXG4gICAgcGxheWVyTWlnaHRFbGVtZW50LnNldEF0dHJpYnV0ZSgndG9vbHRpcGRlc2MnLCBgJHtnZXRNYXRlcmlhbCgndmlvbGVuY2UnKS50b0ZpeGVkKDApfSB2aW9sZW5jZSArICR7Z2V0TWF0ZXJpYWwoJ3NwZWFyJykudG9GaXhlZCgwKX0gc3BlYXJzICsgJHtnZXRNYXRlcmlhbCgnbWVkaWNpbmUnKS50b0ZpeGVkKDApfSBtZWRpY2luZWApO1xyXG5cclxuICAgIGVuZW15TWlnaHRFbGVtZW50LnRleHRDb250ZW50ID0gZW5lbXlNaWdodC50b0ZpeGVkKDApO1xyXG5cclxuICAgIGNvbnN0IGNoYW5jZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmNlVG9XaW4nKTtcclxuICAgIGNoYW5jZUVsZW1lbnQudGV4dENvbnRlbnQgPSAoY2hhbmNlICogMTAwKS50b0ZpeGVkKDEpICsgJyUnO1xyXG5cclxuICAgIGNoYW5jZUVsZW1lbnQuc3R5bGUuY29sb3IgPSAoYGhzbCgkeyhjaGFuY2UgKiAxMjApLnRvU3RyaW5nKDEwKX0sMTAwJSw1MCUpYCk7XHJcblxyXG4gICAgcmV0dXJuIGNoYW5jZTtcclxufVxyXG5cclxubGV0IHN0YW5jZSA9ICdiYWxhbmNlZCc7XHJcblxyXG5mdW5jdGlvbiBnZXRTdGFuY2UoKVxyXG57XHJcbiAgICByZXR1cm4gc3RhbmNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRTdGFuY2UobmV3U3RhbmNlKVxyXG57XHJcbiAgICBzdGFuY2UgPSBuZXdTdGFuY2U7XHJcbn1cclxuXHJcbmNvbnN0IHN0YW5jZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24uc3RhbmNlJyk7XHJcbmZ1bmN0aW9uIHN3aXRjaFN0YW5jZShuZXdTdGFuY2UpXHJcbntcclxuICAgIC8vY29uc29sZS5sb2coJ3N3aXRjaCBzdGFuY2UgdG8gJywgbmV3U3RhbmNlKTtcclxuICAgIHN0YW5jZUJ1dHRvbnMuZm9yRWFjaChlbGVtZW50ID0+XHJcbiAgICB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH0pO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7bmV3U3RhbmNlfVN0YW5jZWApLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIHNldFN0YW5jZShuZXdTdGFuY2UpO1xyXG4gICAgcmVmcmVzaFZhbHVlcygpO1xyXG59XHJcbi8vIEB0cy1pZ25vcmVcclxud2luZG93LnN3aXRjaFN0YW5jZSA9IHN3aXRjaFN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBSZWZyZXNoIGFsbCB0aGUgdmFsdWVzIG9mIHRoZSBjb21iYXQgVUksIGluY2x1ZGluZyBjaGFuY2UgdG8gd2luLCBsb290cywgYW5kIGVuZW15IG1pZ2h0XHJcbiAqL1xyXG5mdW5jdGlvbiByZWZyZXNoVmFsdWVzKClcclxue1xyXG4gICAgLy8gY29uc29sZS5sb2coZ2V0Q3Vyckxvb3QoKSk7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoZ2V0Q3Vyckxvb3QoKSkubGVuZ3RoIDwgMSkgZ2VuZXJhdGVMb290KCk7XHJcblxyXG4gICAgY29uc3QgbG9vdExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9vdExpc3QnKTtcclxuICAgIGxvb3RMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgZm9yIChjb25zdCBbcmVzb3VyY2UsIHF1YW50aXR5XSBvZiBPYmplY3QuZW50cmllcyhnZXRDdXJyTG9vdCgpKSlcclxuICAgIHtcclxuICAgICAgICBsb290TGlzdC5pbm5lckhUTUwgKz0gYDxzcGFuPiR7cmVzb3VyY2V9ICgke3F1YW50aXR5fSk8L3NwYW4+IDxicj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGVuZW15TWlnaHRFbGVtZW50LnRleHRDb250ZW50ID0gZ2V0Q3VyckVuZW15TWlnaHQoKS50b1N0cmluZygpO1xyXG4gICAgY2FsY1JvdW5kaW5nKCk7XHJcbiAgICBjYWxjdWxhdGVXaW5DaGFuY2UoKTtcclxufVxyXG5cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuLy8gc2V0dXBHYW1lKDUsIDUpOyAvLyA1IGJhbGxzIGZvciBlYWNoIHRlYW1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjb21iYXQsXHJcbiAgICBjYWxjdWxhdGVXaW5DaGFuY2UsXHJcbiAgICByZWZyZXNoVmFsdWVzLFxyXG4gICAgcGF1c2VBbmltYXRpb24sXHJcbiAgICBiYXR0bGVSZXN1bHQsXHJcbiAgICBzaW11bGF0ZUJhdHRsZSxcclxuICAgIHN3aXRjaFN0YW5jZSxcclxuICAgIGdldEN1cnJFbmVteU1pZ2h0LFxyXG4gICAgc2V0RW5lbXlNaWdodCxcclxufTsiLCJjb25zdCB7IHBsYXlTb3VuZCB9ID0gcmVxdWlyZSgnLi9hdWRpbycpO1xyXG5jb25zdCB7IGNhbkNyYWZ0IH0gPSByZXF1aXJlKCcuL2NhbkNyYWZ0Jyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG4vLyBBc3N1bWluZyB0aGVzZSBhcmUgZGVmaW5lZCBnbG9iYWxseVxyXG4vLyB2YXIgbWFudWZhY3R1cmVkTWFwID0ge1xyXG4vLyAgICAgY2xheTogWydicmlja3MnXSxcclxuLy8gICAgIGhlcmJzOiBbJ21lZGljaW5lJ10sXHJcbi8vICAgICBoaWRlczogWydsZWF0aGVyJ10sXHJcbi8vICAgICBpcm9uOiBbJ3N0ZWVsJywgJ25haWxzJ10sXHJcbi8vICAgICBvcmU6IFsnaXJvbicsICdzaWx2ZXInLCAnZ29sZCddLFxyXG4vLyAgICAgc2FuZDogWydnbGFzcycsICdjb25jcmV0ZSddLFxyXG4vLyAgICAgcm9ja3M6IFsnc2xhYnMnXSxcclxuLy8gICAgIHZpbmVzOiBbJ3JvcGUnXSxcclxuLy8gICAgIHdvb2Q6IFsncGFwZXInLCAnYmVhbXMnLCAnY3JhdGVzJ10sXHJcbi8vIH07XHJcblxyXG52YXIgc3dpdGNoZWRNYW51ZmFjdHVyZWRNYXAgPSB7XHJcbiAgICAnYmVhbXMnOiBbJ3dvb2QnXSxcclxuICAgICdicmlja3MnOiBbJ2NsYXknXSxcclxuICAgICdjb25jcmV0ZSc6IFsnc2FuZCddLFxyXG4gICAgJ2NyYXRlcyc6IFsnd29vZCddLFxyXG4gICAgJ2dsYXNzJzogWydzYW5kJ10sXHJcbiAgICAnZ29sZCc6IFsnb3JlJ10sXHJcbiAgICAnaGFuZGxlJzogWydzdGlja3MnXSxcclxuICAgICdpcm9uJzogWydvcmUnXSxcclxuICAgICdsZWF0aGVyJzogWydoaWRlcyddLFxyXG4gICAgJ21lZGljaW5lJzogWydoZXJicyddLFxyXG4gICAgJ25haWxzJzogWydpcm9uJ10sXHJcbiAgICAncGFwZXInOiBbJ3dvb2QnXSxcclxuICAgICdzaGFycHJvY2tzJzogWydyb2NrcyddLFxyXG4gICAgJ3NpbHZlcic6IFsnb3JlJ10sXHJcbiAgICAnc2xhYnMnOiBbJ3JvY2tzJ10sXHJcbiAgICAnc3BlYXInOiBbJ3N0YWZmJywgJ3NoYXJwcm9ja3MnLCAncm9wZSddLFxyXG4gICAgJ3N0YWZmJzogWydoYW5kbGUnLCAncm9wZSddLFxyXG4gICAgJ3N0ZWVsJzogWydpcm9uJ10sXHJcbiAgICAnc3RpY2tzJzogWyd3b29kJ10sXHJcbiAgICAncm9wZSc6IFsndmluZXMnXSxcclxuICAgICd3b29kJzogWydzdGlja3MnXSxcclxufTtcclxuXHJcblxyXG5cclxubGV0IGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZyA9IHt9O1xyXG5sZXQgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nID0ge307XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUHJvZHVjaW5nKHJlc291cmNlKVxyXG57XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nO1xyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzQ29uc3VtaW5nKHJlc291cmNlKVxyXG57XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRQcm9kdWNpbmcocmVzb3VyY2UpXHJcbntcclxuICAgIGlmIChhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbcmVzb3VyY2VdKSBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbcmVzb3VyY2VdKys7XHJcbiAgICBlbHNlIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tyZXNvdXJjZV0gPSAxO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb25zdW1pbmcocmVzb3VyY2UsIGFtb3VudClcclxue1xyXG4gICAgaWYgKGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tyZXNvdXJjZV0pIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tyZXNvdXJjZV0gKz0gYW1vdW50O1xyXG4gICAgZWxzZSBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbcmVzb3VyY2VdID0gYW1vdW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVDb25zdW1pbmcocmVzb3VyY2UsIGFtb3VudClcclxue1xyXG4gICAgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW3Jlc291cmNlXSAtPSBhbW91bnQ7XHJcbiAgICBpZiAoYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW3Jlc291cmNlXSA8IDApIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tyZXNvdXJjZV0gPSAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVQcm9kdWNpbmcocmVzb3VyY2UpXHJcbntcclxuICAgIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tyZXNvdXJjZV0tLTtcclxuICAgIGlmIChhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbcmVzb3VyY2VdIDwgMCkgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW3Jlc291cmNlXSA9IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZhY3RvcnlDb25zdW1wdGlvbihyZXNvdXJjZSlcclxue1xyXG4gICAgbGV0IHJldCA9IGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tyZXNvdXJjZV07XHJcbiAgICBpZiAocmV0ID09PSB1bmRlZmluZWQpIHJldCA9IDA7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0RmFjdG9yeUNvbnN1bXB0aW9uJywgcmVzb3VyY2UsIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tyZXNvdXJjZV0sIHJldCk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGYWN0b3J5UHJvZHVjdGlvbihyZXNvdXJjZSlcclxue1xyXG4gICAgbGV0IHJldCA9IGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tyZXNvdXJjZV07XHJcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHJldCkgfHwgcmV0ID09PSB1bmRlZmluZWQpIHJldCA9IDA7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0RmFjdG9yeVByb2R1Y3Rpb24nLCByZXNvdXJjZSwgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW3Jlc291cmNlXSwgcmV0KTtcclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8vIEZ1bmN0aW9uIHRvIHVwZGF0ZSByZXNvdXJjZSBwcm9kdWN0aW9uIGFuZCBjb25zdW1wdGlvblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIHVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nKG9sZFByb2R1Y2VkLCBuZXdQcm9kdWNlZClcclxue1xyXG4gICAgLy8gaWYgKG5ld1Byb2R1Y2VkID09PSBudWxsKSByZXR1cm47XHJcbiAgICAvLyBJZiB0aGlzIGZhY3Rvcnkgd2FzIHByZXZpb3VzbHkgcHJvZHVjaW5nIHNvbWV0aGluZywgcmVkdWNlIHRoZSBjb3VudFxyXG4gICAgaWYgKG9sZFByb2R1Y2VkICYmIG9sZFByb2R1Y2VkICE9PSAnbm9uZScpXHJcbiAgICB7XHJcbiAgICAgICAgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW29sZFByb2R1Y2VkXS0tO1xyXG4gICAgICAgIEFycmF5LmZyb20oY3JhZnRlZFJlc291cmNlc1tvbGRQcm9kdWNlZF0uY29zdCkuZm9yRWFjaCgoY29zdCkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSAtPSBjb3N0LmFtb3VudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHByb2R1Y3Rpb24gY291bnQgZm9yIHRoZSBuZXcgcmVzb3VyY2VcclxuICAgIGlmIChhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbbmV3UHJvZHVjZWRdKSBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbbmV3UHJvZHVjZWRdKys7XHJcbiAgICBlbHNlIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tuZXdQcm9kdWNlZF0gPSAxO1xyXG4gICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXNbbmV3UHJvZHVjZWRdKVxyXG4gICAge1xyXG4gICAgICAgIEFycmF5LmZyb20oY3JhZnRlZFJlc291cmNlc1tuZXdQcm9kdWNlZF0uY29zdCkuZm9yRWFjaCgoY29zdCkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSArPSBjb3N0LmFtb3VudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ2FsbCB0aGlzIHdoZW5ldmVyIGEgZmFjdG9yeSdzIHNldHRpbmdzIGNoYW5nZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIG9uRmFjdG9yeU1vZGlmaWVkKGZhY3RvcnlJbmRleCwgbmV3UHJvZHVjZWQpXHJcbntcclxuICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2ZhY3RvcnktJHtmYWN0b3J5SW5kZXh9IC5yaWdodFNlbGVjdGApO1xyXG4gICAgdXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmcocmlnaHRTZWxlY3QuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJyksIG5ld1Byb2R1Y2VkKTtcclxuICAgIHJpZ2h0U2VsZWN0LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsIG5ld1Byb2R1Y2VkKTtcclxufVxyXG4vLyBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5mb3JFYWNoKChyZXNvdXJjZSkgPT4ge1xyXG4vLyAgICAgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW3Jlc291cmNlXSA9IDA7XHJcbi8vICAgICBBcnJheS5mcm9tKGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VdLmNvc3QpLmZvckVhY2goKGNvc3QpID0+IHtcclxuLy8gICAgICAgICBpZiAoIWFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSkge1xyXG4vLyAgICAgICAgICAgICBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0gPSAwO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0pO1xyXG4vLyB9KTtcclxuZnVuY3Rpb24gY3JlYXRlRmFjdG9yeURpdigpXHJcbntcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHJlc291cmNlIHRyYWNraW5nIG9iamVjdHNcclxuXHJcblxyXG4gICAgY29uc3QgZmFjdG9yaWVzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY3RvcmllcycpO1xyXG4gICAgY29uc3QgZmFjdG9yeURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZmFjdG9yeURpdi5jbGFzc05hbWUgPSAnZmFjdG9yeSc7XHJcblxyXG4gICAgY29uc3QgbGVmdFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBsZWZ0VGV4dC5jbGFzc0xpc3QuYWRkKCdmYWN0b3J5Q29zdCcpO1xyXG4gICAgY29uc3QgcmlnaHRTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuXHJcbiAgICAvLyBQb3B1bGF0ZSB0aGUgcmlnaHQgZHJvcGRvd25cclxuICAgIE9iamVjdC5rZXlzKHN3aXRjaGVkTWFudWZhY3R1cmVkTWFwKS5mb3JFYWNoKHJlc291cmNlID0+XHJcbiAgICB7XHJcblxyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IHJlc291cmNlO1xyXG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHJlc291cmNlO1xyXG4gICAgICAgIHJpZ2h0U2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIHJpZ2h0U2VsZWN0LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsICdub25lJyk7XHJcblxyXG5cclxuICAgIHJpZ2h0U2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHByb2R1Y2VkIHJlc291cmNlIGZvciB0aGlzIGZhY3RvcnlcclxuICAgICAgICBjb25zdCBjdXJyZW50UHJvZHVjZWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoY3VycmVudFByb2R1Y2VkICE9PSAnbm9uZScpIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNyZXNvdXJjZS0ke2N1cnJlbnRQcm9kdWNlZH1gKS5zdHlsZS5jb2xvciA9ICcnO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdQcm9kdWNlZCA9IHJpZ2h0U2VsZWN0LnZhbHVlO1xyXG5cclxuICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vZmFjdG9yeW9wdGlvbi53YXYnKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHJlc291cmNlIHRyYWNraW5nXHJcbiAgICAgICAgdXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmcoY3VycmVudFByb2R1Y2VkLCBuZXdQcm9kdWNlZCk7XHJcblxyXG4gICAgICAgIC8vIE5vdyB1cGRhdGUgdGhlIGRhdGFzZXQgZm9yIHRoZSBuZXh0IGNoYW5nZSBldmVudFxyXG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJywgbmV3UHJvZHVjZWQpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKG5ld1Byb2R1Y2VkICYmIG5ld1Byb2R1Y2VkICE9PSAnbm9uZScpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNyZXNvdXJjZS0ke25ld1Byb2R1Y2VkfWApLnN0eWxlLmNvbG9yID0gJ3RoaXN0bGUnO1xyXG4gICAgICAgICAgICBsZWZ0VGV4dC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgbGVmdFRleHQuaW5uZXJIVE1MICs9IGAke3JlcXVpcmUoJy4vcmVzb3VyY2VzJykuZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW3JpZ2h0U2VsZWN0LnZhbHVlXS5jb3N0KX1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIGluaXRpYWwgb3B0aW9uIGZvciBsZWZ0IHNlbGVjdFxyXG4gICAgZnVuY3Rpb24gYWRkSW5pdGlhbE9wdGlvbihzZWxlY3RFbGVtZW50LCB0ZXh0KVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBpbml0aWFsT3B0aW9uLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICAgICAgLy8gaW5pdGlhbE9wdGlvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmRDaGlsZChpbml0aWFsT3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIGFycm93LmlubmVySFRNTCA9ICcmIzg1OTQ7JzsgLy8gUmlnaHQgYXJyb3cgSFRNTCBlbnRpdHlcclxuXHJcbiAgICBmYWN0b3J5RGl2LmFwcGVuZENoaWxkKGxlZnRUZXh0KTtcclxuICAgIGZhY3RvcnlEaXYuYXBwZW5kQ2hpbGQoYXJyb3cpO1xyXG4gICAgZmFjdG9yeURpdi5hcHBlbmRDaGlsZChyaWdodFNlbGVjdCk7XHJcblxyXG4gICAgYWRkSW5pdGlhbE9wdGlvbihyaWdodFNlbGVjdCwgJ1NlbGVjdCBhIFJlc291cmNlJyk7XHJcblxyXG4gICAgZmFjdG9yaWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGZhY3RvcnlEaXYpO1xyXG5cclxuICAgIHJldHVybiBmYWN0b3J5RGl2O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbG9hZEZhY3RvcnkoY3JhZnRpbmcpXHJcbntcclxuICAgIC8vY29uc29sZS5sb2coXCJsb2FkaW5nIGEgZmFjdG9yeSBmb3IgXCIsIGNyYWZ0aW5nKTtcclxuICAgIGxldCBkaXYgPSBjcmVhdGVGYWN0b3J5RGl2KCk7XHJcbiAgICBpZiAoY3JhZnRpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgZGl2LnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdCcpLnZhbHVlID0gY3JhZnRpbmc7XHJcblxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNyZXNvdXJjZS0ke2NyYWZ0aW5nfWApLnN0eWxlLmNvbG9yID0gJ3RoaXN0bGUnO1xyXG4gICAgICAgICAgICBkaXYucXVlcnlTZWxlY3RvcignLmZhY3RvcnlDb3N0JykuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgIGRpdi5xdWVyeVNlbGVjdG9yKCcuZmFjdG9yeUNvc3QnKS5pbm5lckhUTUwgKz0gYCR7cmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbY3JhZnRpbmddLmNvc3QpfWA7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBidXlGYWN0b3J5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1eUZhY3RvcnlCdXR0b24nKTtcclxuXHJcbiAgICBpZiAoYnV5RmFjdG9yeUJ1dHRvbilcclxuICAgIHtcclxuXHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgYCR7bmV3RmFjdG9yeVNpbHZlckNvc3QudG9GaXhlZCgwKX0gc2lsdmVyYCk7XHJcbiAgICAgICAgdXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmcoJ25vbmUnLCBjcmFmdGluZyk7XHJcbiAgICB9XHJcbiAgICBuZXdGYWN0b3J5U2lsdmVyQ29zdCAqPSAxLjI7XHJcbn1cclxuXHJcblxyXG4vLyBsZXQgbWFudWZhY3R1cmVCdWxrID0gMjtcclxubGV0IGJ1bGtVcGdyYWRlQ29zdCA9IDMwO1xyXG5sZXQgbWFudWZhY3R1cmVCb251cyA9IDE7XHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gY29zdFJlc291cmNlcyBBbGwgcmVzb3VyY2VzIHJlcXVpcmVkIGZvciB0aGUgY3JhZnRcclxuICogQHBhcmFtIHtzdHJpbmd9IGdvYWxSZXNvdXJjZSBXaGF0IHdlJ2xsIGJlIGNyYWZ0aW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBtYW51ZmFjdHVyZShjb3N0UmVzb3VyY2VzLCBnb2FsUmVzb3VyY2UpXHJcbntcclxuICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICAgIC8vIENhbGN1bGF0ZSBob3cgbWFueSB3ZSBjYW4gYWZmb3JkXHJcbiAgICBsZXQgYXJyID0gW107XHJcbiAgICBjb3N0UmVzb3VyY2VzLmZvckVhY2gocmVzb3VyY2UgPT4gYXJyLnB1c2goZ2V0TWF0ZXJpYWwocmVzb3VyY2UpIC8gY3JhZnRlZFJlc291cmNlc1tnb2FsUmVzb3VyY2VdLmNvc3RbcmVzb3VyY2VdKSk7XHJcbiAgICBsZXQgbnVtID0gTWF0aC5taW4oLi4uYXJyKTtcclxuICAgIC8vY29uc29sZS5sb2cobnVtLCAuLi5hcnIpO1xyXG4gICAgbnVtICo9IG1hbnVmYWN0dXJlQm9udXM7XHJcbiAgICAvLyBUaGUgZmFjdG9yaWVzIGdldCB0byBiZSBoYWxmIHByaWNlIG9mIG5vcm1hbCBjcmFmdGluZyBiYyBlZmZpY2llbmN5XHJcbiAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmNyYWZ0UmVzb3VyY2VRdWFudGl0eShnb2FsUmVzb3VyY2UsIG51bSk7XHJcbiAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKGdvYWxSZXNvdXJjZSwgbnVtKTtcclxuICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1jcmFmdGVkUmVzb3VyY2VzW2dvYWxSZXNvdXJjZV0uY29zdCk7XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIHVwZ3JhZGVCdWxrKCkge1xyXG4vLyAgICAgaWYgKGdldE1hdGVyaWFsKCdzaWx2ZXInKSA8IGJ1bGtVcGdyYWRlQ29zdCkgcmV0dXJuO1xyXG4vLyAgICAgLy8gbWFudWZhY3R1cmVCdWxrICs9IDI7XHJcbi8vICAgICBidWxrVXBncmFkZUNvc3QgKz0gMTA7XHJcblxyXG5cclxuLy8gICAgIHBsYXlTb3VuZCgnLi9hdWRpby9mYWN0b3J5YnVsay53YXYnKTtcclxuXHJcblxyXG4vLyAgICAgY29uc3QgdXBCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBncmFkZUJ1bGtCdXR0b24nKTtcclxuLy8gICAgIHVwQnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBgJHttYW51ZmFjdHVyZUJ1bGt9IOKGkiAke21hbnVmYWN0dXJlQnVsayArIDJ9OiAke2J1bGtVcGdyYWRlQ29zdC50b0ZpeGVkKDApfSBzaWx2ZXJgKTtcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gYXR0ZW1wdE1hbnVmYWN0dXJlKClcclxue1xyXG4gICAgY29uc3QgZmFjdG9yaWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZhY3RvcnknKTtcclxuICAgIGZhY3Rvcmllcy5mb3JFYWNoKGZhY3RvcnkgPT5cclxuICAgIHtcclxuXHJcbiAgICAgICAgLy8gY29uc3QgbGVmdFNlbGVjdCA9IGZhY3RvcnkucXVlcnlTZWxlY3Rvcignc3BhbjpmaXJzdC1jaGlsZCcpO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZmFjdG9yeS5xdWVyeVNlbGVjdG9yKCdzZWxlY3Q6bGFzdC1jaGlsZCcpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCBnb2FsUmVzb3VyY2UgPSByaWdodFNlbGVjdC52YWx1ZTtcclxuICAgICAgICBjb25zdCByZXNvdXJjZXMgPSBzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcFtnb2FsUmVzb3VyY2VdO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgZmFjdG9yeVwiLCBnb2FsUmVzb3VyY2UpO1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXMgJiYgZ29hbFJlc291cmNlICYmIGNhbkNyYWZ0KGdvYWxSZXNvdXJjZSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtYW51ZmFjdHVyZShyZXNvdXJjZXMsIGdvYWxSZXNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG59XHJcblxyXG52YXIgbmV3RmFjdG9yeVNpbHZlckNvc3QgPSA1MDtcclxuZnVuY3Rpb24gYnV5RmFjdG9yeSgpXHJcbntcclxuICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5RmFjdG9yeUJ1dHRvbicpO1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdzaWx2ZXInKSA8IG5ld0ZhY3RvcnlTaWx2ZXJDb3N0KVxyXG4gICAge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ05vdCBlbm91Z2ggc2lsdmVyIScpOyByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFzIGVub3VnaCBzaWx2ZXIgdG8gYWZmb3JkIGZhY3RvcnlcclxuICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnc2lsdmVyJywgLW5ld0ZhY3RvcnlTaWx2ZXJDb3N0KTtcclxuICAgIGNyZWF0ZUZhY3RvcnlEaXYoKTtcclxuXHJcblxyXG4gICAgcGxheVNvdW5kKCcuL2F1ZGlvL2ZhY3RvcnlidWlsZC53YXYnKTtcclxuXHJcbiAgICBuZXdGYWN0b3J5U2lsdmVyQ29zdCAqPSAxLjI7XHJcbiAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBgJHtuZXdGYWN0b3J5U2lsdmVyQ29zdC50b0ZpeGVkKDApfSBzaWx2ZXJgKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjcmVhdGVGYWN0b3J5RGl2LFxyXG4gICAgYXR0ZW1wdE1hbnVmYWN0dXJlLFxyXG4gICAgYnV5RmFjdG9yeSxcclxuXHJcbiAgICBnZXRGYWN0b3J5UHJvZHVjdGlvbixcclxuICAgIGdldEZhY3RvcnlDb25zdW1wdGlvbixcclxuICAgIGxvYWRGYWN0b3J5LFxyXG4gICAgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nLFxyXG4gICAgYWRkUHJvZHVjaW5nLFxyXG4gICAgYWRkQ29uc3VtaW5nLFxyXG4gICAgcmVtb3ZlQ29uc3VtaW5nLFxyXG4gICAgcmVtb3ZlUHJvZHVjaW5nXHJcbn07XHJcbiIsImZ1bmN0aW9uIGZpdENoYXJUb0NlbGwoY2hhciwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0LCBpbml0aWFsRm9udFNpemUpIHtcclxuICAgIC8vIENyZWF0ZSBhIHRlbXBvcmFyeSBzcGFuIGVsZW1lbnQgdG8gbWVhc3VyZSB0aGUgY2hhcmFjdGVyXHJcbiAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgc3Bhbi50ZXh0Q29udGVudCA9IGNoYXI7XHJcbiAgICBzcGFuLnN0eWxlLmZvbnRTaXplID0gYCR7aW5pdGlhbEZvbnRTaXplfXB4YDtcclxuICAgIHNwYW4uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnOyAvLyBzbyBpdCBkb2Vzbid0IGFmZmVjdCB0aGUgbGF5b3V0XHJcbiAgICBzcGFuLnN0eWxlLndoaXRlU3BhY2UgPSAnbm93cmFwJzsgLy8gdG8gcHJldmVudCBsaW5lIGJyZWFrc1xyXG4gICAgc3Bhbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7IC8vIHRvIGtlZXAgaXQgaGlkZGVuXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNwYW4pO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZSBzcGFuIGZpdHMgd2l0aGluIHRoZSBkaW1lbnNpb25zLCBhbmQgYWRqdXN0IGZvbnQgc2l6ZSBpZiBub3RcclxuICAgIGxldCBjdXJyZW50Rm9udFNpemUgPSBpbml0aWFsRm9udFNpemU7XHJcbiAgICB3aGlsZSAoc3Bhbi5vZmZzZXRXaWR0aCA8IGNlbGxXaWR0aCAmJiBzcGFuLm9mZnNldEhlaWdodCA8IGNlbGxIZWlnaHQpIHtcclxuICAgICAgICBjdXJyZW50Rm9udFNpemUrKztcclxuICAgICAgICBzcGFuLnN0eWxlLmZvbnRTaXplID0gYCR7Y3VycmVudEZvbnRTaXplfXB4YDtcclxuXHJcbiAgICAgICAgLy8gT3B0aW9uYWw6IHN0b3AgaWYgdGhlIGZvbnQgc2l6ZSBnZXRzIHRvbyBzbWFsbFxyXG4gICAgICAgIGlmIChjdXJyZW50Rm9udFNpemUgPj0gMTAwMCkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xlYW4gdXA6IHJlbW92ZSB0aGUgdGVtcG9yYXJ5IHNwYW4gZWxlbWVudFxyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzcGFuKTtcclxuXHJcbiAgICByZXR1cm4gY3VycmVudEZvbnRTaXplO1xyXG59XHJcbmV4cG9ydHMuZml0Q2hhclRvQ2VsbCA9IGZpdENoYXJUb0NlbGw7XHJcbiIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IGdldFNmeFZvbHVtZSB9ID0gcmVxdWlyZSgnLi9hdWRpbycpO1xyXG5jb25zdCB7IHVwZGF0ZURpc3BsYXlWYWx1ZSB9ID0gcmVxdWlyZSgnLi9zaWRlYmFyJyk7XHJcbmNvbnN0IHsgdXBkYXRlUmF0ZXMgfSA9IHJlcXVpcmUoJy4vY2FsY0luY3JlYXNlJyk7XHJcblxyXG4vKiBHQVRIRVJJTkcgTUFURVJJQUxTKi9cclxuY29uc3Qgc2lkZWJhclBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG5mdW5jdGlvbiBzdG9wQWxsR2F0aGVyaW5nKClcclxue1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpXHJcbiAgICB7XHJcbiAgICAgICAgdmFsLmlzR2V0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IHJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dhdGhlclwiICsgY2FwaXRhbGl6ZUZpcnN0KGtleSkpO1xyXG4gICAgICAgIGlmIChyQnV0dG9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgckJ1dHRvbi50ZXh0Q29udGVudCA9IHZhbC5kZWZhdWx0VGV4dDtcclxuICAgICAgICAgICAgckJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdnYXRoZXJpbmcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCBzaWRlYmFyIHRvIG5vdCBib2xkXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhclRleHQgPSBzaWRlYmFyUGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXNvdXJjZS0nICsga2V5KTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKGtleSk7XHJcbiAgICAgICAgLy8gdXBkYXRlUmF0ZXMoKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBlbW9qaUdhdGhlckRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbW9qaUdhdGhlckRpc3BsYXknKTtcclxuZnVuY3Rpb24gdG9nZ2xlUmVzb3VyY2UocmVzb3VyY2VLZXkpXHJcbntcclxuXHJcbiAgICBjb25zdCBnYXRoZXJBdWRpbyA9IG5ldyBBdWRpbygnLi9hdWRpby9nYXRoZXIud2F2Jyk7XHJcbiAgICBnYXRoZXJBdWRpby52b2x1bWUgPSBnZXRTZnhWb2x1bWUoKTtcclxuICAgIGdhdGhlckF1ZGlvLnBsYXkoKTtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlc1tyZXNvdXJjZUtleV07XHJcblxyXG5cclxuICAgIGNvbnN0IHNpZGViYXJQYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc291cmNlc1wiKTtcclxuXHJcbiAgICBjb25zdCBzaWRlYmFyVGV4dCA9IHNpZGViYXJQYXJlbnQucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyByZXNvdXJjZUtleSk7XHJcbiAgICBjb25zdCByZXNvdXJjZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYXRoZXInICsgcmVzb3VyY2VLZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXNvdXJjZUtleS5zbGljZSgxKSk7XHJcbiAgICBlbW9qaUdhdGhlckRpdi50ZXh0Q29udGVudCA9ICfwk4CfJzsgLy8gRGVmYXVsdCBlbW9qaSDwk4CfXHJcblxyXG5cclxuICAgIGlmICghcmVzb3VyY2UuaXNHZXR0aW5nKVxyXG4gICAge1xyXG4gICAgICAgIHN0b3BBbGxHYXRoZXJpbmcoKTsgLy8gU3RvcCBhbGwgZ2F0aGVyaW5nIGFjdGlvbnNcclxuICAgICAgICByZXNvdXJjZS5pc0dldHRpbmcgPSB0cnVlO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi50ZXh0Q29udGVudCA9IHJlc291cmNlLmFjdGl2ZVRleHQ7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChzaWRlYmFyVGV4dCkgc2lkZWJhclRleHQuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZW1vamlHYXRoZXJEaXYudGV4dENvbnRlbnQgPSByZXNvdXJjZS5lbW9qaTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKHJlc291cmNlLmVtb2ppKTtcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdnYXRoZXJpbmcnKTtcclxuICAgIH0gZWxzZVxyXG4gICAge1xyXG4gICAgICAgIHJlc291cmNlLmlzR2V0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2dhdGhlcmluZycpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi50ZXh0Q29udGVudCA9IHJlc291cmNlLmRlZmF1bHRUZXh0O1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcclxuICAgIH1cclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShyZXNvdXJjZUtleSk7XHJcbn1cclxuZXhwb3J0cy50b2dnbGVSZXNvdXJjZSA9IHRvZ2dsZVJlc291cmNlO1xyXG4iLCJjb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMsIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgZ2VuZXJhdGVUb29sdGlwQ29zdCB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBjcmVhdGVCdWlsZGluZ0J1dHRvbiB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgfSA9IHJlcXVpcmUoJy4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QnKTtcclxuY29uc3QgeyBzaG93VGFiIH0gPSByZXF1aXJlKCcuL3Nob3dUYWInKTtcclxuY29uc3QgeyB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IGFkZFByb2R1Y2luZywgcmVtb3ZlUHJvZHVjaW5nLCBhZGRDb25zdW1pbmcsIHJlbW92ZUNvbnN1bWluZyB9ID0gcmVxdWlyZSgnLi9mYWN0b3J5Jyk7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTdHlsZWRDb2x1bW5zKHBhcmVudClcclxue1xyXG4gICAgY29uc3QgY29sdW1ucyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgY29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29sLnN0eWxlLndpZHRoID0gJzMzLjMzJSc7XHJcbiAgICAgICAgY29sLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICBjb2wuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgICAgIHBhcmVudC5wcmVwZW5kKGNvbCk7XHJcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sdW1ucztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQnV0dG9uRWxlbWVudChidG4sIGtleSlcclxue1xyXG4gICAgY29uc3QgYnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG5cclxuICAgIGJ1dHRvbkVsZW1lbnQuaWQgPSBrZXk7XHJcbiAgICBidXR0b25FbGVtZW50LmNsYXNzTmFtZSA9IGJ0bi5jbGFzcztcclxuICAgIGJ1dHRvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBidG4udGV4dC5zcGxpdCgnXycpLmpvaW4oJyAnKTtcclxuXHJcbiAgICAvLyBidXR0b25FbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgaWYgKGJ0bi50b29sdGlwRGVzYykgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgYnRuLnRvb2x0aXBEZXNjKTtcclxuICAgIGlmIChidG4udG9vbHRpcEVmZmVjdCkgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1lZmZlY3QnLCBidG4udG9vbHRpcEVmZmVjdCk7XHJcbiAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgndW5sb2NrJywgYnRuLnVubG9jayk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnLCBidG4uZGF0YV9idWlsZGluZyk7XHJcbiAgICByZXR1cm4gYnV0dG9uRWxlbWVudDtcclxufVxyXG5cclxuLyogQlVUVE9OUyBHRU5FUkFURSAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1dHRvbnMoKVxyXG57XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZyhcIkdlbmVyYXRpbmcgYnV0dG9uc1wiKTtcclxuICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICAgIC8vIENyZWF0ZSB0aGUgY29sdW1uc1xyXG4gICAgZm9yIChsZXQgYnVpbGRpbmdLZXkgaW4gYnVpbGRpbmdzKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1aWxkaW5nQnV0dG9uKGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpO1xyXG4gICAgICAgIGJ1dHRvbnNbYnVpbGRpbmdLZXldID0gYnV0dG9uO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTWFkZSBidXR0b24gZm9yIFwiICsgYnVpbGRpbmdLZXkpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgY29uc3QgdGFic0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJzJyk7XHJcbiAgICBjb25zdCBwcm9kdWN0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2R1Y3Rpb25UYWInKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGV4cGVyaW1lbnRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhwZXJpbWVudFRhYicpLnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24tY29sdW1ucycpO1xyXG4gICAgY29uc3QgcG9uZGVyQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvbmRlclRhYicpO1xyXG5cclxuICAgIC8vIFlvdSBjYW4gYWRkIG1vcmUgY29udGFpbmVycyBmb3IgZGlmZmVyZW50IHRhYnMgYXMgbmVlZGVkXHJcbiAgICAvLyBjb25zdCBwcm9kdWN0aW9uQ29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMocHJvZHVjdGlvbkNvbnRhaW5lcik7XHJcbiAgICBjb25zdCBleHBlcmltZW50Q29sdW1ucyA9IGNyZWF0ZVN0eWxlZENvbHVtbnMoZXhwZXJpbWVudENvbnRhaW5lcik7XHJcblxyXG4gICAgLy8gU2ltaWxhcmx5LCBjcmVhdGUgY29sdW1ucyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuICAgIGxldCBwcm9kdWN0aW9uQ29sdW1uSW5kZXggPSAxO1xyXG4gICAgbGV0IGV4cGVyaW1lbnRDb2x1bW5JbmRleCA9IDA7XHJcbiAgICBsZXQgcG9uZGVyQ29sdW1uSW5kZXggPSAxO1xyXG5cclxuICAgIC8vIEFkZCBjb3VudGVycyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuICAgIGZvciAobGV0IGtleSBpbiBidXR0b25zKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGJ0biA9IGJ1dHRvbnNba2V5XTtcclxuICAgICAgICBjb25zdCBidXR0b25FbGVtZW50ID0gY3JlYXRlQnV0dG9uRWxlbWVudChidG4sIGtleSk7XHJcblxyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGJ0bi50b29sdGlwQ29zdCk7XHJcblxyXG4gICAgICAgIGlmIChidG4uc2hvd1RhYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaG93VGFiKGJ0bi5zaG93VGFiKTtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJTd2l0Y2hpbmcgdG8gdGFiOiBcIiArIGJ0bi5zaG93VGFiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFwcGVuZCB0byB0aGUgYXBwcm9wcmlhdGUgY29sdW1uIGJhc2VkIG9uIHRoZSB0YWIgcHJvcGVydHlcclxuICAgICAgICBpZiAoYnRuLnRhYiA9PT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9zdHlsZT0nZ3JpZC1jb2x1bW46JHtjb2x9OyBncmlkLXJvdzoke3Jvd307XHJcbiAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZ3JpZENvbHVtbiA9IHByb2R1Y3Rpb25Db2x1bW5JbmRleC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAvLyBidXR0b25FbGVtZW50LnN0eWxlLmdyaWRSb3cgPSAnMCc7XHJcbiAgICAgICAgICAgIHByb2R1Y3Rpb25Db2x1bW5JbmRleCA9IChwcm9kdWN0aW9uQ29sdW1uSW5kZXgpICUgNCArIDE7XHJcbiAgICAgICAgICAgIHByb2R1Y3Rpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIC8vIHByb2R1Y3Rpb25Db2x1bW5zW3Byb2R1Y3Rpb25Db2x1bW5JbmRleF0uYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIC8vIHByb2R1Y3Rpb25Db2x1bW5JbmRleCA9IChwcm9kdWN0aW9uQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAnZXhwZXJpbWVudCcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uc1tleHBlcmltZW50Q29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uSW5kZXggPSAoZXhwZXJpbWVudENvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnRuLnRhYiA9PT0gJ3RhYnMnKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICB0YWJzQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnRuLnRhYiA9PT0gJ3BvbmRlcicpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBidXR0b25FbGVtZW50LnN0eWxlLmdyaWRDb2x1bW4gPSBwb25kZXJDb2x1bW5JbmRleC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBwb25kZXJDb2x1bW5JbmRleCA9IChwb25kZXJDb2x1bW5JbmRleCkgJSA0ICsgMTtcclxuICAgICAgICAgICAgcG9uZGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnRuLnRhYiA9PT0gJ2pvYicpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nIGJ1dCBjYXRjaCB0aGUgam9ic1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChidG4udGFiKS5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbW9yZSBjb25kaXRpb25zIGZvciBvdGhlciB0YWJzIGFzIG5lZWRlZFxyXG4gICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwIGZvciBidWlsZGluZ3NcclxuICAgICAgICBjb25zdCBidWlsZGluZyA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChidWlsZGluZyA9PiBidWlsZGluZyA9PT0ga2V5KTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBIaWRlIHRoZSBidXR0b25zIHdlIHNob3VsZG4ndCBzZWUgeWV0XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnRuKTtcclxuICAgICAgICB0cnlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICghYnRuLnJlcXVpcmVtZW50KCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkVsZW1lbnQsIGJ0bi5yZXF1aXJlbWVudCgpKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignRXJyb3Igd2l0aCByZXF1aXJlbWVudCB3aGlsZSBnZW5lcmF0aW5nIGJ1dHRvbnM6ICcsIGJ0biwgZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5nZW5lcmF0ZUJ1dHRvbnMgPSBnZW5lcmF0ZUJ1dHRvbnM7XHJcbiIsImNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKFwiLi9jYXBpdGFsaXplRmlyc3RcIik7XHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9jcmFmdGVkUmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9yZXNvdXJjZXNcIik7XHJcblxyXG4vLyBEZWZpbmUgYSBsaXN0IG9mIHBvc3NpYmxlIGJ1aWxkaW5nIG5hbWVzLCBjb3N0cywgYW5kIGRlc2NyaXB0aW9uc1xyXG5jb25zdCBwb3NzaWJsZVJlc291cmNlcyA9IE9iamVjdC5rZXlzKHJlc291cmNlcykuZmlsdGVyKGtleSA9PiBrZXkgIT09ICdodXNrcycpO1xyXG5jb25zdCBwb3NzaWJsZUNyYWZ0ZWRSZXNvdXJjZXMgPSBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKTtcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gbWluIGFuZCBtYXhcclxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBMb3dlciBib3VuZCBvZiB0aGUgcmFuZG9tIG51bWJlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFVwcGVyIGJvdW5kIG9mIHRoZSByYW5kb20gbnVtYmVyXHJcbiAqIEByZXR1cm5zIEEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIG1pbiBhbmQgbWF4XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIobWluLCBtYXgpIHtcclxuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGUgYSByYW5kb20gZW1vamkgaW4gdGhlIGVneXB0aWFuIGhlaXJvZ2x5cGhpYyBzZXQgKDB4MTMxMWItMHgxMzEzZSAmIDB4MTMxZTMtMHgxMzIxRilcclxuICogQHJldHVybnMgQSByYW5kb20gZW1vamkgaW4gdGhlIGVneXB0aWFuIGhlaXJvZ2x5cGhpYyBzZXRcclxuICovXHJcbmZ1bmN0aW9uIGdldFJhbmRvbUVtb2ppKCkge1xyXG4gIC8vIERlZmluZSB0aGUgVW5pY29kZSByYW5nZXMgZm9yIHJhbmRvbSBlbW9qaXNcclxuICBjb25zdCByYW5nZXMgPSBbXHJcbiAgICB7IHN0YXJ0OiAweDEzMTFCLCBlbmQ6IDB4MTMxM0UgfSxcclxuICAgIHsgc3RhcnQ6IDB4MTMxRTMsIGVuZDogMHgxMzIxRiB9LFxyXG4gIF07XHJcblxyXG4gIC8vIENob29zZSBhIHJhbmRvbSByYW5nZVxyXG4gIGNvbnN0IHJhbmRvbVJhbmdlID0gcmFuZ2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmdlcy5sZW5ndGgpXTtcclxuXHJcbiAgLy8gR2VuZXJhdGUgYSByYW5kb20gVW5pY29kZSBjaGFyYWN0ZXIgd2l0aGluIHRoZSBzZWxlY3RlZCByYW5nZVxyXG4gIGNvbnN0IHJhbmRvbVVuaWNvZGUgPSBNYXRoLmZsb29yKGdldFJhbmRvbU51bWJlcihyYW5kb21SYW5nZS5zdGFydCwgcmFuZG9tUmFuZ2UuZW5kICsgMSkpO1xyXG5cclxuICAvLyBDb252ZXJ0IHRoZSBVbmljb2RlIGNvZGUgcG9pbnQgdG8gYSBKYXZhU2NyaXB0IHN0cmluZ1xyXG4gIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChyYW5kb21Vbmljb2RlKTtcclxufVxyXG5cclxuY29uc3QgYWRqZWN0aXZlcyA9IFtcclxuICAnYnVzdGxpbmcnLFxyXG4gICdtYWplc3RpYycsXHJcbiAgJ2FuY2llbnQnLFxyXG4gICdlbGVnYW50JyxcclxuICAnaGlkZGVuJyxcclxuICAnZ2xvcmlvdXMnLFxyXG4gICdlbmNoYW50ZWQnLFxyXG4gICd3aGlzcGVyaW5nJyxcclxuICAnbXlzdGljYWwnLFxyXG4gICdsdW1pbm91cycsXHJcbiAgJ3JhZGlhbnQnLFxyXG4gICdzcGVjdGFjdWxhcicsXHJcbiAgJ2RhenpsaW5nJyxcclxuICAnc2VyZW5hZGUnLFxyXG4gICdjZWxlc3RpYWwnLFxyXG4gICd2aWJyYW50JyxcclxuICAnaW1wb3NpbmcnLFxyXG4gICd2ZW5lcmFibGUnLFxyXG4gICdpbW1hY3VsYXRlJyxcclxuICAnZW5pZ21hdGljJyxcclxuICAnaGFybW9uaW91cycsXHJcbiAgJ2V0aGVyZWFsJyxcclxuICAncmVzcGxlbmRlbnQnLFxyXG4gICd0cmFucXVpbCcsXHJcbiAgJ3NlcmVuZScsXHJcbiAgJ2F3ZS1pbnNwaXJpbmcnLFxyXG4gICdwZWFjZWZ1bCcsXHJcbiAgJ3BpY3R1cmVzcXVlJyxcclxuICAnY2FwdGl2YXRpbmcnLFxyXG5dO1xyXG5cclxuY29uc3QgYnVpbGRpbmdOYW1lcyA9IFtcclxuICAnU2FuY3R1YXJ5JyxcclxuICAnQ2l0YWRlbCcsXHJcbiAgJ0hhdmVuJyxcclxuICAnTW9uYXN0ZXJ5JyxcclxuICAnT3V0cG9zdCcsXHJcbiAgJ09ic2VydmF0b3J5JyxcclxuICAnU3Ryb25naG9sZCcsXHJcbiAgJ1BhbGFjZScsXHJcbiAgJ1RlbXBsZScsXHJcbiAgJ01hbm9yJyxcclxuICAnS2VlcCcsXHJcbiAgJ0NoYXRlYXUnLFxyXG4gICdBY3JvcG9saXMnLFxyXG4gICdDYXRoZWRyYWwnLFxyXG4gICdWaWxsYScsXHJcbiAgJ0ZvcnRyZXNzJyxcclxuICAnQmFzdGlvbicsXHJcbiAgJ0xpZ2h0aG91c2UnLFxyXG4gICdDYXN0bGUnLFxyXG4gICdDb2xpc2V1bScsXHJcbiAgJ1B5cmFtaWQnLFxyXG4gICdNYW5zaW9uJyxcclxuICAnRXN0YXRlJyxcclxuICAnTXVzZXVtJyxcclxuICAnVG93ZXInLFxyXG4gICdIYWxsJyxcclxuICAnTGlicmFyeScsXHJcbiAgJ0dhbGxlcnknLFxyXG4gICdCYXphYXInLFxyXG5dO1xyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGEgcmFuZG9tIGJ1aWxkaW5nIG5hbWUgYnkgY29tYmluaW5nIGFuIGFkamVjdGl2ZSBhbmQgYSBidWlsZGluZyBuYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1aWxkaW5nTmFtZSgpIHtcclxuICBjb25zdCByYW5kb21BZGplY3RpdmUgPSBhZGplY3RpdmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFkamVjdGl2ZXMubGVuZ3RoKV07XHJcbiAgY29uc3QgcmFuZG9tQnVpbGRpbmdOYW1lID0gYnVpbGRpbmdOYW1lc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBidWlsZGluZ05hbWVzLmxlbmd0aCldO1xyXG4gIHJldHVybiBgJHtjYXBpdGFsaXplRmlyc3QocmFuZG9tQWRqZWN0aXZlKX0gJHtyYW5kb21CdWlsZGluZ05hbWV9YDtcclxufVxyXG5cclxuXHJcbmNvbnN0IG5vdW5zID0gW1xyXG4gICdzYW5jdHVhcnknLFxyXG4gICdjaXRhZGVsJyxcclxuICAnaGF2ZW4nLFxyXG4gICdtb25hc3RlcnknLFxyXG4gICdvdXRwb3N0JyxcclxuICAnb2JzZXJ2YXRvcnknLFxyXG4gICdzdHJvbmdob2xkJyxcclxuICAncGFsYWNlJyxcclxuICAndGVtcGxlJyxcclxuICAnbWFub3InLFxyXG5dO1xyXG5cclxuY29uc3QgdmVyYnMgPSBbXHJcbiAgJ3Byb3ZpZGVzJyxcclxuICAnZW5oYW5jZXMnLFxyXG4gICdpbWJ1ZXMnLFxyXG4gICdyYWRpYXRlcycsXHJcbiAgJ2VtYm9kaWVzJyxcclxuICAnaW5zcGlyZXMnLFxyXG4gICdldm9rZXMnLFxyXG4gICdleHVkZXMnLFxyXG4gICdiZXN0b3dzJyxcclxuICAnY3JlYXRlcycsXHJcbl07XHJcblxyXG5jb25zdCBwcmVwb3NpdGlvbnMgPSBbXHJcbiAgJ3dpdGgnLFxyXG4gICd0aHJvdWdoJyxcclxuICAnYW1pZHN0JyxcclxuICAnYmVuZWF0aCcsXHJcbiAgJ2Fib3ZlJyxcclxuICAnYWxvbmdzaWRlJyxcclxuXTtcclxuXHJcbmNvbnN0IGNvbmp1bmN0aW9ucyA9IFtcclxuICAnYW5kJyxcclxuICAnd2hpbGUnLFxyXG4gICdhcycsXHJcbiAgJ2FsdGhvdWdoJyxcclxuICAneWV0JyxcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSBkZXNjcmlwdGlvbiBvZiBhIGJ1aWxkaW5nXHJcbiAqIEByZXR1cm5zIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBkZXNjcmlwdGlvbiBvZiBhIGJ1aWxkaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1aWxkaW5nRGVzY3JpcHRpb24oKSB7XHJcbiAgY29uc3QgcmFuZG9tQWRqZWN0aXZlID0gYWRqZWN0aXZlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhZGplY3RpdmVzLmxlbmd0aCldO1xyXG4gIGNvbnN0IHJhbmRvbUFkamVjdGl2ZTIgPSBhZGplY3RpdmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFkamVjdGl2ZXMubGVuZ3RoKV07XHJcblxyXG4gIGNvbnN0IHJhbmRvbU5vdW4gPSBub3Vuc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBub3Vucy5sZW5ndGgpXTtcclxuICBjb25zdCByYW5kb21WZXJiID0gdmVyYnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmVyYnMubGVuZ3RoKV07XHJcbiAgY29uc3QgcmFuZG9tUHJlcG9zaXRpb24gPSBwcmVwb3NpdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcHJlcG9zaXRpb25zLmxlbmd0aCldO1xyXG4gIGNvbnN0IHJhbmRvbUNvbmp1bmN0aW9uID0gY29uanVuY3Rpb25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbmp1bmN0aW9ucy5sZW5ndGgpXTtcclxuXHJcbiAgY29uc3Qgc2VudGVuY2VTdHJ1Y3R1cmUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KTsgLy8gSG93IG1hbnkgc2VudGVuY2Ugc3RydWN0dXJlcyB3ZSBoYXZlXHJcblxyXG4gIGxldCBkZXNjcmlwdGlvbiA9ICcnO1xyXG5cclxuICBzd2l0Y2ggKHNlbnRlbmNlU3RydWN0dXJlKSB7XHJcbiAgICBjYXNlIDA6XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gYCR7cmFuZG9tQWRqZWN0aXZlfSAke3JhbmRvbU5vdW59IHRoYXQgJHtyYW5kb21WZXJifSBhbiBhdXJhIG9mIHNwbGVuZG9yLmA7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICBkZXNjcmlwdGlvbiA9IGAke2NhcGl0YWxpemVGaXJzdChyYW5kb21QcmVwb3NpdGlvbil9IGl0cyAke3JhbmRvbUFkamVjdGl2ZX0gYXBwZWFyYW5jZSwgdGhlICR7cmFuZG9tTm91bn0gJHtyYW5kb21WZXJifSBhbiBhdXJhIG9mICR7cmFuZG9tQWRqZWN0aXZlMn0uYDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gYCR7Y2FwaXRhbGl6ZUZpcnN0KHJhbmRvbUFkamVjdGl2ZSl9ICR7cmFuZG9tTm91bn0gJHtyYW5kb21WZXJifSBncmFjZWZ1bGx5LCBleHVkaW5nIGFuIGVuY2hhbnRpbmcgYXRtb3NwaGVyZS5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMzpcclxuICAgICAgZGVzY3JpcHRpb24gPSBgVGhlICR7cmFuZG9tTm91bn0gaXMgJHtyYW5kb21BZGplY3RpdmV9IGFuZCAke3JhbmRvbVZlcmJ9IHdpdGggYSBzZW5zZSBvZiB3b25kZXIuYDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDQ6XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gYEFtaWRzdCB0aGUgJHtyYW5kb21BZGplY3RpdmV9IHN1cnJvdW5kaW5ncywgdGhlICR7cmFuZG9tTm91bn0gJHtyYW5kb21WZXJifSB0cmFucXVpbGl0eSBhbmQgYmVhdXR5LmA7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1OlxyXG4gICAgICBkZXNjcmlwdGlvbiA9IGBBbiAke3JhbmRvbUFkamVjdGl2ZX0gJHtyYW5kb21Ob3VufSB0aGF0ICR7cmFuZG9tVmVyYn0gYW4gYXVyYSBvZiBjaGFybSAke3JhbmRvbUNvbmp1bmN0aW9ufSBteXN0aXF1ZS5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gYCR7Y2FwaXRhbGl6ZUZpcnN0KHJhbmRvbUFkamVjdGl2ZSl9ICR7cmFuZG9tTm91bn0gdGhhdCAke3JhbmRvbVZlcmJ9IGFuIGF1cmEgb2Ygc3BsZW5kb3IuYDtcclxuICB9XHJcblxyXG4gIHJldHVybiBkZXNjcmlwdGlvbjtcclxufVxyXG5mdW5jdGlvbiByb3VuZFRvTmVhcmVzdChudW1iZXIsIHJvdW5kKSB7XHJcbiAgaWYgKG51bWJlciA8IHJvdW5kKSB7XHJcbiAgICByZXR1cm4gcm91bmQ7IC8vIEhhbmRsZSB0aGUgZWRnZSBjYXNlXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlciAvIHJvdW5kKSAqIHJvdW5kO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogR2VuZXJhdGUgYSByYW5kb20gYnVpbGRpbmdcclxuICogQHJldHVybnMgQSBidWlsZGluZyBvYmplY3QgY29udGFpbmluZyBhIG5hbWUsIGRlc2NyaXB0aW9uLCBlZmZlY3RzLCBib29zdHMsIGFuZCBjb3N0XHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nKCkge1xyXG4gIC8vIFJhbmRvbWx5IHNlbGVjdCBhIG5hbWUsIGRlc2NyaXB0aW9uLCBhbmQgY29zdCBmb3IgdGhlIGJ1aWxkaW5nXHJcbiAgY29uc3QgcmFuZG9tTmFtZSA9IGdlbmVyYXRlQnVpbGRpbmdOYW1lKCk7XHJcbiAgY29uc3QgcmFuZG9tRGVzY3JpcHRpb24gPSBnZW5lcmF0ZUJ1aWxkaW5nRGVzY3JpcHRpb24oKTtcclxuXHJcbiAgLy8gUmFuZG9tbHkgY2hvb3NlIDEtMyByYW5kb20gcmVzb3VyY2VzIGZvciB0aGUgY29zdFxyXG4gIGNvbnN0IG51bVJlc291cmNlcyA9IGdldFJhbmRvbU51bWJlcigxLCAzKTtcclxuICBjb25zdCByYW5kb21Db3N0cyA9IHt9O1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUmVzb3VyY2VzOyBpKyspIHtcclxuICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgcmVwZWF0cywgaXQncyB0aGUgc2FtZSBhcyByb2xsaW5nIG9uZSBmZXdlciBjb3N0XHJcbiAgICBjb25zdCByYW5kb21SZXNvdXJjZSA9IHBvc3NpYmxlUmVzb3VyY2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlUmVzb3VyY2VzLmxlbmd0aCldO1xyXG4gICAgcmFuZG9tQ29zdHNbcmFuZG9tUmVzb3VyY2VdID0gcm91bmRUb05lYXJlc3QoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwICogKDUgLSBudW1SZXNvdXJjZXMpKSwgMTApOyAvLyBGZXdlciByZXNvdXJjZXMgbWVhbnMgbW9yZSBleHBlbnNpdmVcclxuICB9XHJcblxyXG4gIC8vIDAtMSBjcmFmdGVkIHJlc291cmNlc1xyXG4gIGNvbnN0IG51bUNyYWZ0ZWRSZXNvdXJjZXMgPSBnZXRSYW5kb21OdW1iZXIoMCwgMSk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DcmFmdGVkUmVzb3VyY2VzOyBpKyspIHtcclxuICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgcmVwZWF0cywgaXQncyB0aGUgc2FtZSBhcyByb2xsaW5nIG9uZSBmZXdlciBjb3N0XHJcbiAgICBjb25zdCByYW5kb21SZXNvdXJjZSA9IHBvc3NpYmxlQ3JhZnRlZFJlc291cmNlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZUNyYWZ0ZWRSZXNvdXJjZXMubGVuZ3RoKV07XHJcbiAgICByYW5kb21Db3N0c1tyYW5kb21SZXNvdXJjZV0gPSByb3VuZFRvTmVhcmVzdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MCksIDUpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIEdlbmVyYXRlIHJhbmRvbSBlZmZlY3RzXHJcbiAgY29uc3QgcmFuZG9tRWZmZWN0cyA9IHt9O1xyXG4gIGNvbnN0IG51bUVmZmVjdHMgPSBnZXRSYW5kb21OdW1iZXIoMCwgMSk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1FZmZlY3RzOyBpKyspIHtcclxuICAgIGNvbnN0IHJhbmRvbVJlc291cmNlID0gcG9zc2libGVSZXNvdXJjZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVSZXNvdXJjZXMubGVuZ3RoKV07XHJcbiAgICBsZXQgcmFuZG9tRWZmZWN0VmFsdWUgPSBNYXRoLmZsb29yKGdldFJhbmRvbU51bWJlcigzMCwgMjAwKSk7IC8vIEFkanVzdCB0aGUgcmFuZ2UgYXMgbmVlZGVkXHJcbiAgICBpZiAocmFuZG9tUmVzb3VyY2UgPT09ICdjbG9uZXMnKSByYW5kb21FZmZlY3RWYWx1ZSA9IE1hdGguZmxvb3IoZ2V0UmFuZG9tTnVtYmVyKDEsIDMpKTtcclxuICAgIGVsc2UgaWYgKHJhbmRvbVJlc291cmNlID09PSAnaHVza3MnKSByYW5kb21FZmZlY3RWYWx1ZSA9IE1hdGguZmxvb3IoZ2V0UmFuZG9tTnVtYmVyKDEsIDEwKSk7XHJcbiAgICByYW5kb21FZmZlY3RzW3JhbmRvbVJlc291cmNlXSA9IHJvdW5kVG9OZWFyZXN0KHJhbmRvbUVmZmVjdFZhbHVlLCAxMCk7XHJcbiAgfVxyXG5cclxuICAvLyBHZW5lcmF0ZSByYW5kb20gYm9vc3RzXHJcbiAgY29uc3QgcmFuZG9tQm9vc3RzID0ge307XHJcbiAgY29uc3QgbnVtQm9vc3RzID0gZ2V0UmFuZG9tTnVtYmVyKG51bUVmZmVjdHMgPT09IDAgPyAxIDogMCwgMSk7IC8vIEVuc3VyZSB0aGUgYnVpbGRpbmcgZG9lcyAqc29tZXRoaW5nKlxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQm9vc3RzOyBpKyspIHtcclxuICAgIGNvbnN0IHJhbmRvbVJlc291cmNlID0gcG9zc2libGVSZXNvdXJjZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVSZXNvdXJjZXMubGVuZ3RoKV07XHJcbiAgICBjb25zdCByYW5kb21Cb29zdFZhbHVlID0gZ2V0UmFuZG9tTnVtYmVyKDEuMDEsIDEuMik7IC8vIEFkanVzdCB0aGUgcmFuZ2UgYXMgbmVlZGVkXHJcbiAgICByYW5kb21Cb29zdHNbcmFuZG9tUmVzb3VyY2VdID0gcm91bmRUb05lYXJlc3QocmFuZG9tQm9vc3RWYWx1ZSwgNSk7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgYSByYW5kb20gYnVpbGRpbmcgb2JqZWN0XHJcbiAgY29uc3QgcmFuZG9tQnVpbGRpbmcgPSB7XHJcbiAgICBuYW1lOiByYW5kb21OYW1lLFxyXG4gICAgZGVzY3JpcHRpb246IHJhbmRvbURlc2NyaXB0aW9uLFxyXG4gICAgYmFzZWNvc3Q6IHJhbmRvbUNvc3RzLFxyXG4gICAgY29zdDogcmFuZG9tQ29zdHMsXHJcbiAgICBlZmZlY3RzOiByYW5kb21FZmZlY3RzLFxyXG4gICAgYm9vc3Q6IHJhbmRvbUJvb3N0cyxcclxuICAgIGNvdW50OiAwLFxyXG4gICAgcmF0aW86IGdldFJhbmRvbU51bWJlcigxLjMsIDEuNiksXHJcbiAgICBlbW9qaTogZ2V0UmFuZG9tRW1vamkoKSxcclxuICB9O1xyXG5cclxuICByZXR1cm4gcmFuZG9tQnVpbGRpbmc7XHJcbn1cclxuZXhwb3J0cy5nZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nID0gZ2VuZXJhdGVSYW5kb21CdWlsZGluZzsiLCIvKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwsIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuXHJcbiAgICBtYXRlcmlhbCA9IG1hdGVyaWFsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBMb2FkIGNyYWZ0ZWRSZXNvdXJjZXMgaWYgbm90IHByb3ZpZGVkXHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXMpIGNyYWZ0ZWRSZXNvdXJjZXMgPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpLmNyYWZ0ZWRSZXNvdXJjZXM7XHJcblxyXG4gICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSByZXR1cm4gY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgfHwgMDtcclxuICAgIGVsc2UgcmV0dXJuIDA7XHJcblxyXG59XHJcbmV4cG9ydHMuZ2V0Q3JhZnRlZFJlc291cmNlID0gZ2V0Q3JhZnRlZFJlc291cmNlO1xyXG4iLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuLy8gY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuLy8gR2V0IGZ1bmN0aW9uIGZvciBtYXRlcmlhbHNcclxuLyoqXHJcbiAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIG1hdGVyaWFsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKiBAcmV0dXJucyBWYWx1ZSBvZiBtYXRlcmlhbFxyXG4qL1xyXG5mdW5jdGlvbiBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSB7XHJcbiAgICBpZiAoIXJlc291cmNlcykgcmVzb3VyY2VzID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcztcclxuICAgIGlmIChyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG1hdGVyaWFsOlwiLCBtYXRlcmlhbCk7ICAvLyBGb3IgZGVidWdnaW5nXHJcbiAgICAgICAgcmV0dXJuIGdldENyYWZ0ZWRSZXNvdXJjZShtYXRlcmlhbCwgbnVsbCk7XHJcblxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ2V0TWF0ZXJpYWwgPSBnZXRNYXRlcmlhbDsiLCJjb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoJy4vanNvbi9wcmVzdGlnZScpO1xyXG5jb25zdCB7IHJlc291cmNlcywgaXNSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQgfSA9IHJlcXVpcmUoJy4vcG9uZGVyJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgdXBkYXRlQm91bmNlQW5pbWF0aW9uIH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJvdW5jZUFuaW1hdGlvbicpO1xyXG5cclxuXHJcblxyXG5cclxubGV0IGFsbFZpc2libGVCdXR0b25zID0gbmV3IFNldChbJ2dhdGhlclN0aWNrcyddKTtcclxuZXhwb3J0cy5hbGxWaXNpYmxlQnV0dG9ucyA9IGFsbFZpc2libGVCdXR0b25zO1xyXG5cclxuXHJcbi8vIENhbGN1bGF0ZSB0aGUgZmluYWwgbnVtYmVyIG9mIGNyYWZ0ZWQgZ29vZHMgZnJvbSBib251c2VzXHJcbmZ1bmN0aW9uIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSB7XHJcbiAgICBsZXQgdG90YWwgPSAxO1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2VLZXkpKSB7XHJcbiAgICAgICAgICAgIGxldCBza2lsbFJhdGlvID0gMS4wNjtcclxuICAgICAgICAgICAgdmFyIG11bHQgPSAxICsgKE1hdGgucG93KHNraWxsUmF0aW8sIHNraWxsc1tza2lsbF0ubGV2ZWwpIC0gMSkgLyAxMDA7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTXVsdGlwbHlpbmcgZ2FpbiBieSBcIiArIG11bHQpO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBtdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGdldEFmZmVjdGVkUmVzb3VyY2VzKHNraWxsKSB7XHJcbiAgICBpZiAoc2tpbGxzW3NraWxsXSkge1xyXG4gICAgICAgIHJldHVybiBza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7ICAvLyBvciBhbiBlbXB0eSBhcnJheSBbXSwgYmFzZWQgb24geW91ciBwcmVmZXJlbmNlXHJcbn1cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWwgXHJcbiAqIEByZXR1cm5zIE1heCBvZiBtYXRlcmlhbCBvciBJbmZpbml0eVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TWF4KG1hdGVyaWFsKSB7XHJcbiAgICBpZiAoaXNSZXNvdXJjZShtYXRlcmlhbCkpIHtcclxuICAgICAgICBsZXQgYmFzZU1heCA9IHJlc291cmNlc1ttYXRlcmlhbF0uYmFzZW1heDsgLy8gU3RhdGljIGJhc2UgbWF4IHZhbHVlXHJcbiAgICAgICAgbGV0IG1heCA9IGJhc2VNYXg7XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBidWlsZGluZ10gb2YgT2JqZWN0LmVudHJpZXMocmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpLmJ1aWxkaW5ncykpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGtleSwgYnVpbGRpbmcsIGJ1aWxkaW5nLmVmZmVjdHMpO1xyXG4gICAgICAgICAgICBpZiAoYnVpbGRpbmcuZWZmZWN0cyAmJiBidWlsZGluZy5lZmZlY3RzW21hdGVyaWFsXSlcclxuICAgICAgICAgICAgICAgIG1heCArPSBidWlsZGluZy5lZmZlY3RzW21hdGVyaWFsXSAqIGJ1aWxkaW5nLmNvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzUHJlc3RpZ2UoJ3N0b3JhZ2VTcGFjZScpICYmIG1hdGVyaWFsICE9PSAnY2xvbmVzJykge1xyXG4gICAgICAgICAgICBtYXggKz0gYmFzZU1heCAqICgxLjA1ICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdzdG9yYWdlU3BhY2UnKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtYXRlcmlhbCA9PT0gJ2Nsb25lcycpIHtcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdjbG9uZScpKSBtYXggKz0gMTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpLmJ1aWxkaW5ncztcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocGFzc2VkU3RhZ2UoJ2Nsb25lJyksIG1heENsb25lcyk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gUG9uZGVyIGJvbnVzZXNcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSkgbWF4ICs9IDEgKiBidWlsZGluZ3NbJ3NoZWx0ZXInXS5jb3VudDtcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlckh1dCcpKSBtYXggKz0gMSAqIGJ1aWxkaW5nc1snaHV0J10uY291bnQ7XHJcbiAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKCdiaWdnZXJIb3VzZScpKSBtYXggKz0gMiAqIGJ1aWxkaW5nc1snaG91c2UnXS5jb3VudDtcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpKSBtYXggKz0gNCAqIGJ1aWxkaW5nc1sndGVlcGVlJ10uY291bnQ7XHJcbiAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKCdldmVuQmlnZ2VyU2hlbHRlcicpKSBtYXggKz0gMSAqIGJ1aWxkaW5nc1snc2hlbHRlciddLmNvdW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKGhhc1ByZXN0aWdlKCdtYXhDbG9uZXMnKSkgbWF4ICs9IDEgKiBnZXRMZXZlbE9mUHJlc3RpZ2UoJ21heENsb25lcycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1heDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY2xlYXJTaWRlYmFyKCkge1xyXG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG4gICAgc2lkZWJhci5pbm5lckhUTUwgPSAnJztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGlzQnV0dG9uSWRWaXNpYmxlKGlkKSB7XHJcbiAgICByZXR1cm4gYWxsVmlzaWJsZUJ1dHRvbnMuaGFzKGlkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VmlzaWJsZUJ1dHRvbihpZCkge1xyXG4gICAgYWxsVmlzaWJsZUJ1dHRvbnMuYWRkKGlkKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBnZXRNYXgsXHJcbiAgICBjYWxjQ3JhZnRCb251cyxcclxuICAgIGlzQnV0dG9uSWRWaXNpYmxlLFxyXG4gICAgc2V0VmlzaWJsZUJ1dHRvbixcclxuICAgIGNsZWFyU2lkZWJhcixcclxufTtcclxuXHJcbiIsIi8qKlxyXG4gKiBBIG1hcCBvZiBhbGwgam9icyB0aGF0IHJlcXVpcmUgYSBwb25kZXIgdG8gYmUgdW5sb2NrZWRcclxuICpcclxuICogSm9iOiBSZXF1aXJlZFBvbmRlclxyXG4gKi9cclxuY29uc3Qgam9iUmVxdWlyZWRQb25kZXJzID0ge1xyXG4gICAgJ3RoaW5raW5nJzogJ3RoaW5raW5nJyxcclxuICAgICdmaXNoaW5nJzogJ2Zpc2hpbmcnLFxyXG4gICAgJ3NtaXRoaW5nJzogJ25vdC11bmxvY2thYmxlJyxcclxuICAgICdmYXJtaW5nJzogJ2FncmljdWx0dXJlJyxcclxuICAgICdjb21iYXQnOiAnY29tYmF0VGFiJyxcclxuICAgICdodW50aW5nJzogJ2h1bnRpbmcnXHJcbn07XHJcbmV4cG9ydHMuam9iUmVxdWlyZWRQb25kZXJzID0gam9iUmVxdWlyZWRQb25kZXJzO1xyXG4iLCIvLyBAdHMtbm9jaGVja1xyXG4vLyBERVBFTkRTIE9OOiBza2lsbHMuanMsIHBvbmRlci5qc1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuXHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBnZXRNYXggfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgdHJpZ2dlckZsb2F0VXBUZXh0IH0gPSByZXF1aXJlKCcuL3RyaWdnZXJGbG9hdFVwVGV4dCcpO1xyXG5jb25zdCB7IHBsYXlTb3VuZCB9ID0gcmVxdWlyZSgnLi9hdWRpbycpO1xyXG5cclxuLyogSk9CUyBGVU5DVElPTkFMSVRZICovXHJcblxyXG5cclxuY29uc3Qgam9iQ291bnRzID0ge307XHJcbmZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgam9iQ291bnRzW3NraWxsXSA9IDA7XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3Qgam9ic1RhYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2JzVGFiJyk7XHJcbmxldCBpID0gMDtcclxuT2JqZWN0LmtleXMoc2tpbGxzKS5mb3JFYWNoKHNraWxsID0+IHtcclxuICAgIGNvbnN0IGpvYkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgam9iRGl2LmNsYXNzTGlzdC5hZGQoJ2pvYi1idXR0b24nKTtcclxuICAgIGpvYkRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJywgc2tpbGwpO1xyXG4gICAgam9iRGl2LmlkID0gJ2pvYi1idXR0b24tJyArIHNraWxsO1xyXG5cclxuICAgIGNvbnN0IGRlY3JlbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGVjcmVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2J0bi1kZWNyZW1lbnQnKTtcclxuICAgIGRlY3JlbWVudERpdi50ZXh0Q29udGVudCA9ICctJztcclxuICAgIGpvYkRpdi5hcHBlbmRDaGlsZChkZWNyZW1lbnREaXYpO1xyXG5cclxuICAgIGNvbnN0IGpvYk5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgam9iTmFtZVNwYW4uY2xhc3NMaXN0LmFkZCgnam9iLW5hbWUnKTtcclxuICAgIGpvYk5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7c2tpbGwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBza2lsbC5zbGljZSgxKX06IDBgO1xyXG4gICAgam9iRGl2LmFwcGVuZENoaWxkKGpvYk5hbWVTcGFuKTtcclxuXHJcbiAgICBjb25zdCBpbmNyZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGluY3JlbWVudERpdi5jbGFzc0xpc3QuYWRkKCdidG4taW5jcmVtZW50Jyk7XHJcbiAgICBpbmNyZW1lbnREaXYudGV4dENvbnRlbnQgPSAnKyc7XHJcbiAgICBqb2JEaXYuYXBwZW5kQ2hpbGQoaW5jcmVtZW50RGl2KTtcclxuXHJcbiAgICBqb2JEaXYuc3R5bGUuZ3JpZENvbHVtbiA9IGkgJSAyICsgMTtcclxuICAgICsraTtcclxuICAgIGpvYnNUYWIuYXBwZW5kQ2hpbGQoam9iRGl2KTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnRuLWluY3JlbWVudCcpLmZvckVhY2goYnRuID0+IHtcclxuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGNvbnN0IGpvYlR5cGUgPSB0aGlzLmNsb3Nlc3QoJy5qb2ItYnV0dG9uJykuZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpO1xyXG4gICAgICAgIHBsYXlTb3VuZCgnLi9hdWRpby9qb2Iud2F2Jyk7XHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnLCByZXNvdXJjZXMpID4gZ2V0VG90YWxKb2JzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFg7IC8vIFggY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuICAgICAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFk7IC8vIFkgY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpZmZlcmVuY2UgPSBnZXRNYXRlcmlhbCgnY2xvbmVzJywgcmVzb3VyY2VzKSAtIGdldFRvdGFsSm9icygpO1xyXG4gICAgICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdICs9IGRpZmZlcmVuY2U7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYCske2RpZmZlcmVuY2V9IHdvcmtlcnNgLCAnZ3JlZW4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgMTAgb3IgbWF4IGNsb25lc1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpZmZlcmVuY2UgPSBNYXRoLm1pbigxMCwgZ2V0TWF0ZXJpYWwoJ2Nsb25lcycsIHJlc291cmNlcykgLSBnZXRUb3RhbEpvYnMoKSk7XHJcbiAgICAgICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0gKz0gZGlmZmVyZW5jZTtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgKyR7ZGlmZmVyZW5jZX0gd29ya2Vyc2AsICdncmVlbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdKys7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgJysxIHdvcmtlcicsICdncmVlbicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh3b3JrZXJzRGlzdHJpYnV0aW9uKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idG4tZGVjcmVtZW50JykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGpvYlR5cGUgPSB0aGlzLmNsb3Nlc3QoJy5qb2ItYnV0dG9uJykuZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYOyAvLyBYIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFk7IC8vIFkgY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vam9iLndhdicpO1xyXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICBsZXQgbnVtV29ya2VycyA9IGpvYkNvdW50c1tqb2JUeXBlXTtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChudW1Xb3JrZXJzID4gMCkgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGAtJHtudW1Xb3JrZXJzfSB3b3JrZXJzYCwgJ3JlZCcpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuY3RybEtleSkge1xyXG4gICAgICAgICAgICAvLyBTdWJ0cmFjdCAxMCBvciBtYXggY2xvbmVzXHJcbiAgICAgICAgICAgIGxldCBkaWZmZXJlbmNlID0gTWF0aC5taW4oMTAsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSAtPSBkaWZmZXJlbmNlO1xyXG4gICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYC0ke2RpZmZlcmVuY2V9IHdvcmtlcnNgLCAncmVkJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChqb2JDb3VudHNbam9iVHlwZV0gPiAwKSB7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXS0tO1xyXG5cclxuICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksICctMSB3b3JrZXInLCAncmVkJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXkoam9iVHlwZSk7XHJcbiAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXRUb3RhbEpvYnMoKSB7XHJcbiAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgZm9yIChsZXQgaiBpbiBqb2JDb3VudHMpIHtcclxuICAgICAgICB0b3RhbCArPSBqb2JDb3VudHNbal07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIEdsb2JhbCBmb3Igd2hpY2ggcmVzb3VyY2UgZWFjaCBjbG9uZSBnYXRoZXJzXHJcbmxldCB3b3JrZXJzRGlzdHJpYnV0aW9uID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBkaXN0cmlidXRlV29ya2Vycyhza2lsbCwgdG90YWxXb3JrZXJzKSB7XHJcbiAgICBpZiAoIXNraWxsc1tza2lsbF0pIHJldHVybiBudWxsOyAgLy8gUmV0dXJuIG51bGwgaWYgdGhlIHNraWxsIGRvZXNuJ3QgZXhpc3RcclxuXHJcbiAgICBsZXQgYWZmZWN0ZWRSZXNvdXJjZXMgPSBza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG5cclxuICAgIC8vIEZpbHRlciBhZmZlY3RlZFJlc291cmNlcyB0byBvbmx5IGNvbnRhaW4ga2V5cyB0aGF0IGFyZSBwcmVzZW50IGluIHRoZSByZXNvdXJjZXMgbWFwXHJcbiAgICBhZmZlY3RlZFJlc291cmNlcyA9IGFmZmVjdGVkUmVzb3VyY2VzLmZpbHRlcihyZXNvdXJjZSA9PiByZXNvdXJjZSBpbiByZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIGxldCBhO1xyXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhZmZlY3RlZFJlc291cmNlcy5sZW5ndGg7IGEgPSBhZmZlY3RlZFJlc291cmNlc1tpXSkge1xyXG5cclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhhKTtcclxuICAgIC8vICAgICBpZiAoIXJlc291cmNlc1thXSkge1xyXG5cclxuICAgIC8vICAgICAgICAgY29uc3QgaW5kZXggPSBhZmZlY3RlZFJlc291cmNlcy5pbmRleE9mKGEpO1xyXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhhLCBpbmRleCk7XHJcbiAgICAvLyAgICAgICAgIGxldCB4ID0gYWZmZWN0ZWRSZXNvdXJjZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICArK2k7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gY29uc29sZS5sb2coYWZmZWN0ZWRSZXNvdXJjZXMpO1xyXG4gICAgbGV0IG51bWJlck9mUmVzb3VyY2VzID0gYWZmZWN0ZWRSZXNvdXJjZXMubGVuZ3RoO1xyXG5cclxuICAgIC8vIEluaXRpYWwgZXZlbiBkaXN0cmlidXRpb25cclxuICAgIGxldCBwZXJSZXNvdXJjZSA9IE1hdGguZmxvb3IodG90YWxXb3JrZXJzIC8gbnVtYmVyT2ZSZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIEV2ZW5seSBkaXN0cmlidXRlIHdvcmtlcnMgYW1vbmcgdGhlIGFmZmVjdGVkIHJlc291cmNlc1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2Ugb2YgYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICB3b3JrZXJzRGlzdHJpYnV0aW9uLnNldChyZXNvdXJjZSwgcGVyUmVzb3VyY2UpO1xyXG4gICAgICAgIGlmIChwZXJSZXNvdXJjZSA+IDApIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoc2tpbGwsIHJlc291cmNlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGlzdHJpYnV0ZSBhbnkgcmVtYWluaW5nIHdvcmtlcnMgZHVlIHRvIHJvdW5kaW5nXHJcbiAgICBsZXQgcmVtYWluaW5nV29ya2VycyA9IHRvdGFsV29ya2VycyAtIChwZXJSZXNvdXJjZSAqIG51bWJlck9mUmVzb3VyY2VzKTtcclxuICAgIGZvciAobGV0IHJlc291cmNlIG9mIGFmZmVjdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKHJlbWFpbmluZ1dvcmtlcnMgPiAwKSB7XHJcbiAgICAgICAgICAgIHdvcmtlcnNEaXN0cmlidXRpb24uc2V0KHJlc291cmNlLCB3b3JrZXJzRGlzdHJpYnV0aW9uLmdldChyZXNvdXJjZSkgKyAxKTtcclxuICAgICAgICAgICAgcmVtYWluaW5nV29ya2Vycy0tO1xyXG4gICAgICAgICAgICBtb3ZlQmFsbEZyb21Kb2JUb1Jlc291cmNlKHNraWxsLCByZXNvdXJjZSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cod29ya2Vyc0Rpc3RyaWJ1dGlvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoam9iVHlwZSwgYWZmZWN0ZWRSZXNvdXJjZSkge1xyXG4gICAgLy8gRmluZCB0aGUgam9iIGJ1dHRvblxyXG4gICAgY29uc3Qgam9iQnV0dG9uID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpKVxyXG4gICAgICAgIC5maW5kKGJ0biA9PiBidG4uZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpID09PSBqb2JUeXBlKTtcclxuXHJcbiAgICBpZiAoIWpvYkJ1dHRvbiB8fCBqb2JCdXR0b24uc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47IC8vIEpvYiBidXR0b24gbm90IGZvdW5kXHJcblxyXG5cclxuICAgIGNvbnN0IHJlc291cmNlRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByZXNvdXJjZS0ke2FmZmVjdGVkUmVzb3VyY2V9YCk7XHJcbiAgICBpZiAoIXJlc291cmNlRGlzcGxheSB8fCByZXNvdXJjZURpc3BsYXkuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47IC8vIFJlc291cmNlIGRpc3BsYXkgbm90IGZvdW5kXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHBvc2l0aW9uc1xyXG4gICAgY29uc3Qgam9iQnV0dG9uUmVjdCA9IGpvYkJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IHJlc291cmNlUmVjdCA9IHJlc291cmNlRGlzcGxheS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBiYWxsIGVsZW1lbnRcclxuICAgIGNvbnN0IGJhbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGJhbGwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgYmFsbC5zdHlsZS53aWR0aCA9ICcxMHB4JztcclxuICAgIGJhbGwuc3R5bGUuaGVpZ2h0ID0gJzEwcHgnO1xyXG4gICAgYmFsbC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnNTAlJztcclxuICAgIGJhbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcclxuICAgIGJhbGwuc3R5bGUub3BhY2l0eSA9ICcuOCc7XHJcbiAgICBiYWxsLnN0eWxlLmxlZnQgPSBgJHtqb2JCdXR0b25SZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWH1weGA7XHJcbiAgICBiYWxsLnN0eWxlLnRvcCA9IGAke2pvYkJ1dHRvblJlY3QudG9wICsgd2luZG93LnNjcm9sbFl9cHhgO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChiYWxsKTtcclxuXHJcbiAgICAvLyBBbmltYXRlIHRoZSBiYWxsXHJcbiAgICBjb25zdCBhbmltYXRpb24gPSBiYWxsLmFuaW1hdGUoW1xyXG4gICAgICAgIHsgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7cmVzb3VyY2VSZWN0LmxlZnQgLSBqb2JCdXR0b25SZWN0LmxlZnR9cHgsICR7cmVzb3VyY2VSZWN0LnRvcCAtIGpvYkJ1dHRvblJlY3QudG9wfXB4KWAgfVxyXG4gICAgXSwge1xyXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLCAvLyBBbmltYXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgLy8gZmlsbDogJ2ZvcndhcmRzJyAvLyBLZWVwIHRoZSBiYWxsIGF0IHRoZSBlbmQgcG9zaXRpb24gYWZ0ZXIgYW5pbWF0aW9uXHJcbiAgICAgICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKC4yMywtMC4zNCwwLDEuMDYpJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRXZlbnQgbGlzdGVuZXIgdG8gaGlkZSB0aGUgYmFsbCBhZnRlciBhbmltYXRpb25cclxuICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcclxuICAgICAgICBiYWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldFdvcmtlcnMocmVzb3VyY2VOYW1lKSB7XHJcbiAgICByZXR1cm4gd29ya2Vyc0Rpc3RyaWJ1dGlvbi5nZXQocmVzb3VyY2VOYW1lKTtcclxufVxyXG5cclxuLy8gY29uc3QgYWxsSm9iQnV0dG9uYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpO1xyXG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpIHtcclxuICAgIGNvbnN0IHRoaXNKb2JCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuam9iLWJ1dHRvbltkYXRhLWpvYj1cIiR7am9iVHlwZX1cIl1gKTtcclxuICAgIGlmICghdGhpc0pvYkJ1dHRvbikgY29uc29sZS53YXJuKFwiQ291bGRuJ3QgZmluZCBqb2IgYnV0dG9uIGZvciBqb2I6IFwiLCBqb2JUeXBlKTtcclxuICAgIGNvbnN0IGpvYkVsZW1lbnQgPSB0aGlzSm9iQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoYC5qb2ItbmFtZWApO1xyXG4gICAgaWYgKGpvYkVsZW1lbnQpIGpvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHtqb2JUeXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgam9iVHlwZS5zbGljZSgxKX06ICR7am9iQ291bnRzW2pvYlR5cGVdfWA7XHJcblxyXG4gICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS51cGRhdGVFbW9qaURpc3BsYXkoKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgdG90YWwgYXNzaWduZWQgY2xvbmVzIGNvdW50ZXJcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvdGFsKCkge1xyXG4gICAgY29uc3QgdG90YWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2pvYnMtdG90YWwnKTtcclxuICAgIHRvdGFsRWxlbWVudC50ZXh0Q29udGVudCA9IFwiQXNzaWduZWQgQ2xvbmVzOiBcIiArIGdldFRvdGFsSm9icygpICsgXCIgLyBcIiArIGdldE1heCgnY2xvbmVzJyk7XHJcbn1cclxuXHJcblxyXG5sZXQgc3RhcnRCdXR0b24gPSBudWxsO1xyXG5sZXQgY29ubmVjdGlvbnMgPSBuZXcgTWFwKCk7ICAvLyBNYXAgdG8gc3RvcmUgY29ubmVjdGlvbnNcclxubGV0IG1hbmFnZW1lbnQgPSB7ICdjb25uZWN0aW9ucyc6IGNvbm5lY3Rpb25zLCAnbWlucyc6IHt9LCAnbWF4ZXMnOiB7fSwgJ3RyaWdnZXJzJzoge30gfTtcclxubGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lQ2FudmFzJyk7XHJcblxyXG5mdW5jdGlvbiBzZXRDb25uZWN0aW9ucyhuZXdDb25uZWN0aW9ucykge1xyXG4gICAgY29ubmVjdGlvbnMgPSBuZXdDb25uZWN0aW9ucztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29ubmVjdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gY29ubmVjdGlvbnM7XHJcbn1cclxuXHJcbi8vIGlmIChjYW52YXMpIHtcclxuLy8gQHRzLWlnbm9yZVxyXG5sZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbi8vIEB0cy1pZ25vcmVcclxuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuLy8gfVxyXG5cclxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgIGxldCBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpvYi1idXR0b24nKTtcclxuXHJcbi8vICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuLy8gICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4vLyAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLmJ0bi1kZWNyZW1lbnQnKSB8fCBlLnRhcmdldC5jbG9zZXN0KCcuYnRuLWluY3JlbWVudCcpKSByZXR1cm47XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoIWlzUG9uZGVyZWQoJ21hbmFnZW1lbnQnKSkgcmV0dXJuO1xyXG5cclxuLy8gICAgICAgICAgICAgbGV0IGpvYkJ1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5qb2ItYnV0dG9uJyk7XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoam9iQnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0QnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24gPSBqb2JCdXR0b247XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XHJcbi8vICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0QnV0dG9uLmlkICYmIGpvYkJ1dHRvbi5pZCkgeyAvLyBFbnN1cmUgYm90aCBJRHMgYXJlIGF2YWlsYWJsZVxyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLnNldChzdGFydEJ1dHRvbi5pZCwgam9iQnV0dG9uLmlkKTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gRHJhdyBhbGwgY29ubmVjdGlvbnNcclxuLy8gICAgICAgICAgICAgICAgICAgICBkcmF3QWxsQ29ubmVjdGlvbnMoKTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXRcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbiA9IG51bGw7XHJcbi8vICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ01pc3NpbmcgSUQgZm9yIG9uZSBvZiB0aGUgYnV0dG9uczonLCBzdGFydEJ1dHRvbiwgam9iQnV0dG9uKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NsaWNrZWQgZWxlbWVudCBpcyBub3QgaW5zaWRlIGEgam9iIGJ1dHRvbjonLCBlLnRhcmdldCk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9KTtcclxuXHJcbi8vICAgICB9KTtcclxuXHJcbi8vICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkge1xyXG4vLyAgICAgICAgIGlmIChzdGFydEJ1dHRvbikge1xyXG4vLyAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBEcmF3IGV4aXN0aW5nIGNvbm5lY3Rpb25zXHJcbi8vICAgICAgICAgICAgIGRyYXdBbGxDb25uZWN0aW9ucygpO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gRHJhdyB0aGUgbGluZSBmcm9tIHN0YXJ0QnV0dG9uIHRvIGN1cnJlbnQgbW91c2UgcG9zaXRpb25cclxuLy8gICAgICAgICAgICAgZHJhd0xpbmUoc3RhcnRCdXR0b24sIGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgXHJcbiAqL1xyXG5mdW5jdGlvbiBkcmF3QWxsQ29ubmVjdGlvbnMoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICB0cnkge1xyXG5cclxuXHJcbiAgICAgICAgZm9yIChsZXQgW29sZElkLCBuZXdJZF0gb2YgY29ubmVjdGlvbnMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGxldCBvbGRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvbGRJZCk7XHJcbiAgICAgICAgICAgIGxldCBuZXdCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuZXdJZCk7XHJcbiAgICAgICAgICAgIGxldCByZWN0ID0gbmV3QnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBsZXQgbmV3WCA9IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyO1xyXG4gICAgICAgICAgICBsZXQgbmV3WSA9IDA7XHJcbiAgICAgICAgICAgIGlmIChyZWN0LmJvdHRvbSA+IG9sZEJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20pIG5ld1kgPSBuZXdCdXR0b24ub2Zmc2V0VG9wIC0gMTA7XHJcbiAgICAgICAgICAgIGVsc2UgbmV3WSA9IG5ld0J1dHRvbi5vZmZzZXRUb3AgKyBuZXdCdXR0b24ub2Zmc2V0SGVpZ2h0ICsgMTA7XHJcbiAgICAgICAgICAgIGRyYXdMaW5lKG9sZEJ1dHRvbiwgbmV3WCwgbmV3WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGNvbnNvbGUud2FybignZHJhd0FsbENvbm5lY3Rpb25zJywgZXJyb3IpOyB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCBcclxuICogQHBhcmFtIHsqfSBjb250ZXh0IFxyXG4gKiBAcGFyYW0geyp9IGZyb21YIFxyXG4gKiBAcGFyYW0geyp9IGZyb21ZIFxyXG4gKiBAcGFyYW0geyp9IHRvWCBcclxuICogQHBhcmFtIHsqfSB0b1kgXHJcbiAqIEBwYXJhbSB7Kn0gcmFkaXVzIFxyXG4gKi9cclxuZnVuY3Rpb24gZHJhd0Fycm93aGVhZChjb250ZXh0LCBmcm9tWCwgZnJvbVksIHRvWCwgdG9ZLCByYWRpdXMpIHtcclxuICAgIGxldCB4X2NlbnRlciA9IHRvWDtcclxuICAgIGxldCB5X2NlbnRlciA9IHRvWTtcclxuXHJcbiAgICBsZXQgYW5nbGU7XHJcbiAgICBsZXQgeDtcclxuICAgIGxldCB5O1xyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgYW5nbGUgPSBNYXRoLmF0YW4yKHRvWSAtIGZyb21ZLCB0b1ggLSBmcm9tWCk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIFxyXG4gKiBAcGFyYW0geyp9IHN0YXJ0RWxlbWVudCBcclxuICogQHBhcmFtIHsqfSBlbmRYIFxyXG4gKiBAcGFyYW0geyp9IGVuZFkgXHJcbiAqL1xyXG5mdW5jdGlvbiBkcmF3TGluZShzdGFydEVsZW1lbnQsIGVuZFgsIGVuZFkpIHtcclxuICAgIGxldCByZWN0ID0gc3RhcnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgLy8gbGV0IG9mZnNldCA9IE1hdGgucmFuZG9tKCkgKiAxMDAgKyAxMDBcclxuICAgIGxldCBzdGFydFggPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjsgLy8gLSBvZmZzZXQ7XHJcbiAgICAvLyBlbmRYIC09IG9mZnNldDtcclxuICAgIGxldCBzdGFydFkgPSBzY3JvbGxZICsgcmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblxyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4Lm1vdmVUbyhzdGFydFgsIHN0YXJ0WSk7XHJcbiAgICBjdHgubGluZVRvKGVuZFgsIGVuZFkpO1xyXG4gICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIC8vIERyYXcgYXJyb3cgYXQgdGhlIGVuZCBvZiB0aGUgbGluZVxyXG4gICAgZHJhd0Fycm93aGVhZChjdHgsIHN0YXJ0WCwgc3RhcnRZLCBlbmRYLCBlbmRZLCAxMCk7ICAvLyBhZGp1c3QgdGhlIGxhc3QgcGFyYW1ldGVyIGZvciBhcnJvdyBzaXplXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFySm9iQXNzaWdubWVudHMoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBjb25uZWN0aW9ucyA9IG5ldyBNYXAoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhc3NpZ25Kb2JzQmFzZWRPblJlc291cmNlcygpIHtcclxuICAgIC8vIEZvciBlYWNoIGNvbm5lY3Rpb25cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZW50cmllcyA9IGNvbm5lY3Rpb25zLmVudHJpZXMoKTtcclxuICAgICAgICBpZiAoZW50cmllcyA9PT0gdW5kZWZpbmVkKSB0aHJvdyAnRW50cmllcyBpcyB1bmRlZmluZWQnO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBbb2xkSm9iSWQsIG5ld0pvYklkXSBvZiBlbnRyaWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBvbGRKb2JCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvbGRKb2JJZCk7XHJcbiAgICAgICAgICAgIGxldCBkYXRhSm9iID0gb2xkSm9iQnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9sZElkID0gb2xkSm9iSWQucmVwbGFjZSgnam9iLWJ1dHRvbi0nLCAnJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0lkID0gbmV3Sm9iSWQucmVwbGFjZSgnam9iLWJ1dHRvbi0nLCAnJyk7XHJcbiAgICAgICAgICAgIGxldCBtYXhlZE91dCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVzb3VyY2VBcnJheSA9IHNraWxsc1tkYXRhSm9iXS5hZmZlY3RlZFJlc291cmNlcztcclxuICAgICAgICAgICAgaWYgKCFyZXNvdXJjZUFycmF5KSByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlQXJyYXkpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2YgcmVzb3VyY2VBcnJheSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlc1tyXSAhPT0gdW5kZWZpbmVkICYmIGdldE1hdGVyaWFsKHIpIDwgcmVzb3VyY2VzW3JdLm1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHIsIGdldE1hdGVyaWFsKHIpLCByZXNvdXJjZXNbcl0ubWF4KTtcclxuICAgICAgICAgICAgICAgICAgICBtYXhlZE91dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobWF4ZWRPdXQgJiYgam9iQ291bnRzW2RhdGFKb2JdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoSm9iKG9sZElkLCBuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRlV29ya2VycyhvbGRJZCwgam9iQ291bnRzW29sZElkXSk7XHJcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRlV29ya2VycyhuZXdJZCwgam9iQ291bnRzW25ld0lkXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmIChyZXNvdXJjZXNbYWZmZWN0ZWRSZXNvdXJjZV0uY3VycmVudFZhbHVlID49IHJlc291cmNlc1thZmZlY3RlZFJlc291cmNlXS5tYXhWYWx1ZSkge1xyXG4gICAgICAgICAgICAvLyAgICAgc3dpdGNoSm9iKG9sZEpvYklkLCBuZXdKb2JJZCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLndhcm4oJ3JlYXNzaWduSm9icycsIGVycm9yKTsgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc3dpdGNoSm9iKG9sZEpvYklkLCBuZXdKb2JJZCkge1xyXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzd2l0Y2hlcyB3b3JrZXJzIGZyb20gb2xkSm9iIHRvIG5ld0pvYi5cclxuICAgIC8vIERlcGVuZGluZyBvbiB5b3VyIGFwcGxpY2F0aW9uIHN0cnVjdHVyZSwgeW91IGNhbiBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbiBhY2NvcmRpbmdseS5cclxuICAgIC8vIEZvciBleGFtcGxlLCByZWR1Y2UgdGhlIGNvdW50IG9mIHdvcmtlcnMgaW4gb2xkSm9iIGFuZCBpbmNyZWFzZSBpbiBuZXdKb2IuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhgU3dpdGNoaW5nIHdvcmtlcnMgZnJvbSAke29sZEpvYklkfSB0byAke25ld0pvYklkfWApO1xyXG5cclxuICAgIGxldCB3b3JrZXJzID0gam9iQ291bnRzW29sZEpvYklkXTtcclxuICAgIGpvYkNvdW50c1tvbGRKb2JJZF0gPSAwO1xyXG4gICAgam9iQ291bnRzW25ld0pvYklkXSArPSB3b3JrZXJzO1xyXG4gICAgdXBkYXRlRGlzcGxheShvbGRKb2JJZCk7XHJcbiAgICB1cGRhdGVEaXNwbGF5KG5ld0pvYklkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRBbGxKb2JzKCkge1xyXG4gICAgLy8gam9iQ291bnRzID0ge307XHJcbiAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICBqb2JDb3VudHNbc2tpbGxdID0gMDtcclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhza2lsbCwgMCk7XHJcbiAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICB1cGRhdGVEaXNwbGF5KHNraWxsKTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjbGVhckpvYkFzc2lnbm1lbnRzLFxyXG4gICAgcmVhc3NpZ25Kb2JzQmFzZWRPblJlc291cmNlcyxcclxuICAgIHN3aXRjaEpvYixcclxuICAgIGRyYXdBbGxDb25uZWN0aW9ucyxcclxuICAgIGdldFdvcmtlcnMsXHJcbiAgICB1cGRhdGVUb3RhbCxcclxuICAgIHNldENvbm5lY3Rpb25zLFxyXG4gICAgZ2V0Q29ubmVjdGlvbnMsXHJcbiAgICBkaXN0cmlidXRlV29ya2VycyxcclxuICAgIHVwZGF0ZURpc3BsYXksXHJcbiAgICBqb2JDb3VudHMsXHJcbiAgICByZXNldEFsbEpvYnNcclxufTsiLCJjb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuXHJcbnZhciBhbGxNYXRlcmlhbHMgPSBbXTtcclxuT2JqZWN0LmtleXMocmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG5PYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG4vL2NvbnNvbGUubG9nKFwiQWxsIG1hdGVyaWFsczogXCIsIGFsbE1hdGVyaWFscyk7XHJcblxyXG5leHBvcnRzLmFsbE1hdGVyaWFscyA9IGFsbE1hdGVyaWFsczsiLCJjb25zdCB7IGhhc1BlcmsgfSA9IHJlcXVpcmUoXCIuLi9wZXJrc1wiKTtcclxuY29uc3QgeyByZWNhbGNNYXhDbG9uZXMgfSA9IHJlcXVpcmUoXCIuLi9yZWNhbGNNYXhDbG9uZXNcIik7XHJcbmNvbnN0IHsgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgfSA9IHJlcXVpcmUoXCIuLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdFwiKTtcclxuY29uc3QgeyB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50IH0gPSByZXF1aXJlKFwiLi4vdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudFwiKTtcclxuXHJcbmNvbnN0IGJ1aWxkaW5ncyA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhPVVNJTkdcclxuICAgICAqL1xyXG4gICAgXCJzaGVsdGVyXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJzdGlja3NcIjogMzAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcImNsb25lc1wiOiAxIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRm9yIHdoZW4geW91IG5lZWQgYSBob21lIGF3YXkgZnJvbSBob21lLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn5YWrJ1xyXG4gICAgfSxcclxuICAgICdodXQnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3N0aWNrcyc6IDUwLCAndmluZXMnOiAzMCB9LFxyXG4gICAgICAgICdlZmZlY3RzJzogeyAnY2xvbmVzJzogMSB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS40LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSBjb3p5LCBpZHlsbGljIGNodW5rIG9mIHdvb2QuJyxcclxuICAgICAgICBlbW9qaTogJ+WGgidcclxuICAgIH0sXHJcbiAgICBcImhvdXNlXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJ3b29kXCI6IDUwLCBcInJvY2tzXCI6IDIwLCAnZmlzaCc6IDEwIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJjbG9uZXNcIjogMiB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkV2ZXJ5IGNsb25lJ3MgZHJlYW0uIE1pbnVzIHRoZSB3aGl0ZSBwaWNrZXQgZmVuY2UuXCIsXHJcbiAgICAgICAgZW1vamk6ICfku4snXHJcbiAgICB9LFxyXG4gICAgJ3RlcGVlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICd3b29kJzogMTAsICdoaWRlcyc6IDI1LCAnZmlzaCc6IDE1IH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnY2xvbmVzJzogMiB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldyYXAgc29tZSBoaWRlcyBhcm91bmQgc29tZSB3b29kIGFuZCBjYWxsIGl0IGEgaG9tZS5cIixcclxuICAgICAgICBlbW9qaTogJ+eptCdcclxuICAgIH0sXHJcbiAgICAnaG9zcGl0YWwnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgY29uY3JldGU6IDEwLCBtZWRpY2luZTogMjAsIGZpc2g6IDIwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnY2xvbmVzJzogMyB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS43LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnS2VlcCB5b3Vyc2VsZiBzYWZlLicsXHJcbiAgICAgICAgZW1vamk6ICcrJ1xyXG4gICAgfSxcclxuICAgICdiYXJyYWNrcyc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyBzcGVhcjogMjAsIHZpb2xlbmNlOiAxLCB3b29kOiAyMDAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdjbG9uZXMnOiAxLCAndmlvbGVuY2UnOiAyMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSBoYWxsIG9mIHJhdWNvdXMgc29sZGllcnMuJyxcclxuICAgICAgICBlbW9qaTogJ/CTiI8nXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU1RPUkFHRVxyXG4gICAgICovXHJcbiAgICBcInNoZWRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcIndvb2RcIjogNDAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcIndvb2RcIjogNTAsIFwic3RpY2tzXCI6IDUwLCBcInJvY2tzXCI6IDIwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlIHVsdGltYXRlIHN0b3JhZ2Ugc29sdXRpb24gZm9yIHRoZSBwYWNrIHJhdCBpbiB5b3UuXCIsXHJcbiAgICAgICAgZW1vamk6ICfkuKonXHJcbiAgICB9LFxyXG4gICAgJ3N0b2NrcGlsZSc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyByb2NrczogMzAsIHdvb2Q6IDQwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyB3b29kOiAxMDAgfSxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJDaHVjayBhIGJ1bmNoIG9mIGxvZ3MgaW4gYSBwaWxlLCB3aGF0IGNvdWxkIGhhcHBlbj9cIixcclxuICAgICAgICBlbW9qaTogJ+WTgSdcclxuICAgIH0sXHJcbiAgICBcImRyeWluZ19yYWNrXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJzdGlja3NcIjogMzAsIFwiZmlzaFwiOiA1IH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJmaXNoXCI6IDIwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQWlyIGRyeWluZzogTmF0dXJlJ3Mgd2F5IG9mIHByZXNlcnZpbmcgZm9vZC5cIixcclxuICAgICAgICBlbW9qaTogJ+WbmydcclxuICAgIH0sXHJcbiAgICBcIndvcmtzaG9wXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJ3b29kXCI6IDQwLCBcInN0aWNrc1wiOiAyMCwgXCJyb2Nrc1wiOiAxMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7ICdyb2Nrcyc6IDUwLCAnb3JlJzogNTAsICdzYW5kJzogMTAwLCAnY2xheSc6IDUwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRElZJ3MgZHJlYW0gZGVzdGluYXRpb24uXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk46wJ1xyXG4gICAgfSxcclxuICAgICdiYXJuJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHsgJ3dvb2QnOiAzMCwgJ3doZWF0JzogNSB9LFxyXG4gICAgICAgICdlZmZlY3RzJzogeyAnd2hlYXQnOiAxMDAsICd2aW5lcyc6IDQwIH0sXHJcbiAgICAgICAgJ2Jvb3N0Jzoge30sXHJcbiAgICAgICAgJ2NvdW50JzogMCxcclxuICAgICAgICAncmF0aW8nOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSGF5LCB3aGF0J3MgaW4gdGhhdCBidWlsZGluZz9cIixcclxuICAgICAgICBlbW9qaTogJ/CTj4YnXHJcbiAgICB9LFxyXG4gICAgJ2hlcmJhbGlzdF9odXQnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3N0aWNrcyc6IDUwLCAndmluZXMnOiA1MCwgJ2hlcmJzJzogNTAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdoZXJicyc6IDEwMCwgJ3ZpbmVzJzogMTAwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ2hlcmJzJzogMS4yLCB2aW5lczogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHBsYWNlIGZvciBicmV3aW5nIGFuZCBzdGV3aW5nLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOPgydcclxuICAgIH0sXHJcbiAgICBcImJha2VyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA4MCxcclxuICAgICAgICAgICAgXCJicmVhZFwiOiAxMCxcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgJ3doZWF0JzogMjAwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjI1LFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJGcmVzaGx5IGJha2VkIGJyZWFkLCBob3QgYW5kIHJlYWR5LlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOPlidcclxuXHJcbiAgICB9LFxyXG4gICAgXCJhbmltYWxfcGVuXCI6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBzdGlja3M6IDUwLFxyXG4gICAgICAgICAgICBnYW1lOiAyMCxcclxuICAgICAgICAgICAgZmlzaDogMjVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ2dhbWUnOiAxMDAsICdoaWRlcyc6IDMwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBwbGFjZSB0byBwdXQgdGhvc2UgbGVzc2VyIHRoYW4geW91LlwiLFxyXG4gICAgICAgIGVtb2ppOiAn55q/J1xyXG4gICAgfSxcclxuICAgICdyZXNlcnZvaXInOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgcm9ja3M6IDEwMCxcclxuICAgICAgICAgICAgY2xheTogNTAsXHJcbiAgICAgICAgICAgIHdhdGVyOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnd2F0ZXInOiAxMDAgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIGhvbGUgZmlsbGVkIHdpdGggd2F0ZXIuIFVzZWZ1bC5cIixcclxuICAgICAgICBlbW9qaTogJ/CTiJ4nXHJcbiAgICB9LFxyXG4gICAgJ3N0b25lX2RlcG90Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIHJvY2tzOiAyMDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ3JvY2tzJzogMjUwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBiaWcgc3RhY2sgb2Ygcm9ja3MuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4iTJ1xyXG4gICAgfSxcclxuICAgICd3YXJlaG91c2UnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgY3JhdGVzOiAxMCxcclxuICAgICAgICAgICAgY29uY3JldGU6IDIwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICd3b29kJzogMTAwLCAncm9ja3MnOiAxMDAsICdjbGF5JzogMTAwLCAnc2FuZCc6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnUHV0IHN0dWZmIGluIGEgYm94IGluc2lkZSBhIGxhcmdlciBib3guJyxcclxuICAgICAgICBlbW9qaTogJ/CTh6YnXHJcbiAgICB9LFxyXG4gICAgJ21pbGl0YXJ5X3NjaG9vbCc6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBicmlja3M6IDIwLFxyXG4gICAgICAgICAgICB2aW9sZW5jZTogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ3Zpb2xlbmNlJzogMTAwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3Zpb2xlbmNlJzogMS4wNSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdMZWFybiB0aGUgYXJ0IG9mIGh1cnRpbmcgb3RoZXJzLicsXHJcbiAgICAgICAgZW1vamk6ICfwk4e7J1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQUk9EVUNUSU9OIEJPT1NUXHJcbiAgICAgKi9cclxuICAgIFwiZ3JvdmVcIjoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICd3b29kJzogMjAsICd2aW5lcyc6IDIwIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3dvb2QnOiAxLjA1LCAnc3RpY2tzJzogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIG5pY2UgZ3JvdmUgb2YgdHJlZXMgdG8gZmluZCB3b29kIGZhc3Rlci5cIixcclxuICAgICAgICBlbW9qaTogJ/CThq3wk4atJ1xyXG4gICAgfSxcclxuICAgIFwiZmlzaF90cmFwXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiZmlzaFwiOiAxLjA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmlzaGluZyBtYWRlIGVhc3kuIE5vIHBhdGllbmNlIHJlcXVpcmVkLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn5LqVJ1xyXG4gICAgfSxcclxuICAgIFwibWluZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMzAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAzMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIm9yZVwiOiAxLjA1LCAncm9ja3MnOiAxLjA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRGlnIGRlZXAgYW5kIGZpbmQgeW91ciBpbm5lciBvcmUuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qNJ1xyXG4gICAgfSxcclxuICAgIFwiY2FtcGZpcmVcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDIwLFxyXG4gICAgICAgICAgICBcInN0aWNrc1wiOiAyMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjogeyAnYWxsJzogMS4wMiB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXaGVyZSBzdG9yaWVzIGFyZSB0b2xkIGFuZCBtYXJzaG1hbGxvd3MgYXJlIHRvYXN0ZWQuXCIsXHJcbiAgICAgICAgZW1vamk6ICfngasnXHJcbiAgICB9LFxyXG4gICAgXCJsdW1iZXJfeWFyZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMDAsXHJcbiAgICAgICAgICAgIFwiaXJvblwiOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXb29kIHlvdSBsaWtlIHNvbWUgbW9yZSB3b29kP1wiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOMjydcclxuICAgIH0sXHJcbiAgICBcInN0b25lX3F1YXJyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiUm9jayBvbiB3aXRoIHlvdXIgYmFkIHNlbGYhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qOJ1xyXG4gICAgfSxcclxuICAgIFwiZmlzaGVyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA0MCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDE1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnZmlzaCc6IDUwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmlzaCBhcmUgZnJpZW5kcy4gQW5kIGZvb2QuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4ykJ1xyXG4gICAgfSxcclxuICAgICdpcnJpZ2F0aW9uJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIGZyZXNod2F0ZXI6IDIwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyB3aGVhdDogMS4wNSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV2V0dGVuIHlvdXIgd2hlYXQgd2l0aCB3YXRlci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTiJcnXHJcbiAgICB9LFxyXG4gICAgXCJ2aW5leWFyZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMCxcclxuICAgICAgICAgICAgXCJ2aW5lc1wiOiA1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInZpbmVzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZvciB0aGUgZmluZXN0IHZpbmVzLiBXaGF0IGVsc2Ugd291bGQgaXQgZ3Jvdz9cIixcclxuICAgICAgICBlbW9qaTogJ/CfnIwnXHJcbiAgICB9LFxyXG4gICAgXCJmb3JnZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNDAsXHJcbiAgICAgICAgICAgIFwib3JlXCI6IDIwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwib3JlXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIk1lbHQsIG1vbGQsIGFuZCBtYWtlIG1hcnZlbG91cyBtZXRhbHMuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qrJ1xyXG4gICAgfSxcclxuICAgICd3YXRlcl9wdW1wJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHtcclxuICAgICAgICAgICAgJ3JvY2tzJzogMzAsXHJcbiAgICAgICAgICAgICdyb3BlJzogMSxcclxuICAgICAgICAgICAgJ3dvb2QnOiAxMCxcclxuICAgICAgICAgICAgJ3doZWF0JzogMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICdmcmVzaHdhdGVyJzogMzAgfSxcclxuICAgICAgICAnYm9vc3QnOiB7XHJcbiAgICAgICAgICAgICdmcmVzaHdhdGVyJzogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgICdyYXRpbyc6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGcmVzaCB3YXRlciBvbiBkZW1hbmQhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+CJ1xyXG4gICAgfSxcclxuICAgICd0b3dlcic6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7XHJcbiAgICAgICAgICAgICdicmlja3MnOiAyMCxcclxuICAgICAgICAgICAgJ3JvY2tzJzogMTAsXHJcbiAgICAgICAgICAgICd3b29kJzogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgICdlZmZlY3RzJzoge30sXHJcbiAgICAgICAgJ2Jvb3N0JzogeyAnaGlkZXMnOiAxLjA1LCAnZ2FtZSc6IDEuMSB9LFxyXG4gICAgICAgICdjb3VudCc6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTZWUgdGhpbmdzIGZyb20gYWZhci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTiqInXHJcbiAgICB9LFxyXG4gICAgXCJ0YW5uZXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDYwLFxyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnaGlkZXMnOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJUcmVhdCBoaWRlcyB0byBtYWtlIHF1YWxpdHkgbGVhdGhlci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTg5QnXHJcbiAgICB9LFxyXG4gICAgXCJtYXJrZXRwbGFjZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwiZ29sZFwiOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIGFsbDogMS4wNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yNSxcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiQSBidXN0bGluZyBodWIgb2YgdHJhZGUgYW5kIGJhcnRlci5cIixcclxuICAgICAgICBlbW9qaTogJ+KCvydcclxuICAgIH0sXHJcbiAgICBcIndpbmRtaWxsXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDEwMCxcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA2MCxcclxuICAgICAgICAgICAgXCJ3aGVhdFwiOiA1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIndoZWF0XCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJHcmluZCBncmFpbnMgZWZmaWNpZW50bHkgd2l0aCB3aW5kIHBvd2VyLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOHrCdcclxuICAgIH0sXHJcbiAgICAnZ2FyZGVuJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIGJlYW1zOiAyMCxcclxuICAgICAgICAgICAgaGVyYnM6IDIwLFxyXG4gICAgICAgICAgICBmcmVzaHdhdGVyOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ2hlcmJzJzogMS4xLCAnc3RpY2tzJzogMS4wNSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTmljZSBuYXR1cmUsIGNhcmVmdWxseSBjdWx0aXZhdGVkLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOGtydcclxuICAgIH0sXHJcbiAgICAnc2FuZF9zY29vcCc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyBiZWFtczogMTAsIGlyb246IDUgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyAnc2FuZCc6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTY29vcCB0aGUgc2FuZCBmcm9tIHRoZSBzaG9yZT8gU3VyZSEnLFxyXG4gICAgICAgIGVtb2ppOiAn8JOEmydcclxuICAgIH0sXHJcbiAgICAndHJhcHMnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgbmFpbHM6IDEwLCBzdGlja3M6IDIwLCBoZXJiczogMjAsIHZpbmVzOiAxNSB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdnYW1lJzogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXYXRjaCB5b3VyIHN0ZXAhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4SmJ1xyXG4gICAgfSxcclxuICAgICdyb2NrX3JvbGUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgc2xhYnM6IDIwLCBmcmVzaHdhdGVyOiAzMCwgdmluZXM6IDE1IH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3JvY2tzJzogMS4yIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0luIG9yZGVyIHRvIGdhdGhlciB0aGUgcm9jayB5b3UgbXVzdCBiZWNvbWUgdGhlIHJvY2suJyxcclxuICAgICAgICBlbW9qaTogJ/CThocnXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBPTkRFUlxyXG4gICAgICovXHJcbiAgICAndGVsZXNjb3BlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIGdsYXNzOiAxLFxyXG4gICAgICAgICAgICB3b29kOiAxMCxcclxuICAgICAgICAgICAgcG9uZGVyOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgcG9uZGVyOiAxLjA1IH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJMb29rLCB1cCBpbiB0aGUgc2t5ISBJdCdzIGEgc3RhciFcIixcclxuICAgICAgICBlbW9qaTogJ/CTjKknXHJcbiAgICB9LFxyXG4gICAgXCJvYnNlcnZhdG9yeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiYnJpY2tzXCI6IDcwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMzAsXHJcbiAgICAgICAgICAgIFwiZ2xhc3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDUwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlN0YXJnYXppbmcgaGFzIG5ldmVyIGJlZW4gc28uLi4gcHJvZHVjdGl2ZT9cIixcclxuICAgICAgICBlbW9qaTogJ+KYhidcclxuICAgIH0sXHJcbiAgICBcImxpYnJhcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogNzAsXHJcbiAgICAgICAgICAgIFwicGFwZXJcIjogMjUsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDI1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcInBvbmRlclwiOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJLbm93bGVkZ2UgaXMgcG93ZXIuIEFuZCBhIGZpcmUgaGF6YXJkIGlmIG5vdCBzdG9yZWQgcHJvcGVybHkuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwn5WuJ1xyXG4gICAgfSxcclxuICAgIFwiZGVza1wiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxNSxcclxuICAgICAgICAgICAgXCJzdGlja3NcIjogMjAsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcInBvbmRlclwiOiAzMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjogeyBcInBvbmRlclwiOiAxLjA1IH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgd3JpdGVyJ3MgYmxvY2sgaXMgbm8gbWF0Y2ggZm9yIGFybW9yLXBpZXJjaW5nIHBlbmNpbHMhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qsJ1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0QnVpbGRpbmdDb3VudChidWlsZGluZ05hbWUpIHtcclxuICAgIHJldHVybiBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXS5jb3VudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdOYW1lIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2UgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Qm9vc3QoYnVpbGRpbmdOYW1lLCByZXNvdXJjZSkge1xyXG4gICAgY29uc3QgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXTtcclxuXHJcbiAgICBpZiAoYnVpbGRpbmcgJiYgYnVpbGRpbmcuYm9vc3QpIHtcclxuICAgICAgICBpZiAoYnVpbGRpbmcuYm9vc3RbcmVzb3VyY2VdKSByZXR1cm4gYnVpbGRpbmcuYm9vc3RbcmVzb3VyY2VdO1xyXG4gICAgICAgIGlmIChidWlsZGluZy5ib29zdFsnYWxsJ10pIHJldHVybiBidWlsZGluZy5ib29zdFsnYWxsJ107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiByZXNldEJ1aWxkaW5ncygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcbiAgICAgICAgdmFsWydjb3VudCddID0gMDtcclxuICAgICAgICAvLyBVcGRhdGUgYnV0dG9uIHRleHRcclxuICAgICAgICB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50KGtleSwgMCk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgY29zdCBvZiB0aGUgYnVpbGRpbmdcclxuICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXkpO1xyXG5cclxuICAgIH1cclxuICAgIC8vIFVwZGF0ZSBtYXggY2xvbmVzIGFmdGVyIHVwZGF0aW5nIHRoZSBjb3VudFxyXG4gICAgcmVjYWxjTWF4Q2xvbmVzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUG9wQnVpbGRpbmcoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICBzd2l0Y2ggKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ3NoZWx0ZXInOlxyXG4gICAgICAgIGNhc2UgJ2h1dCc6XHJcbiAgICAgICAgY2FzZSAnaG91c2UnOlxyXG4gICAgICAgIGNhc2UgJ3RlcGVlJzpcclxuICAgICAgICBjYXNlICdob3NwaXRhbCc6XHJcbiAgICAgICAgY2FzZSAnYmFycmFja3MnOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYnVpbGRpbmdzLFxyXG4gICAgZ2V0QnVpbGRpbmdDb3VudCxcclxuICAgIGdldEJvb3N0LFxyXG4gICAgcmVzZXRCdWlsZGluZ3MsXHJcbiAgICBpc1BvcEJ1aWxkaW5nXHJcbn07IiwiY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4uL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgaGFzVG9vbCB9ID0gcmVxdWlyZSgnLi4vdG9vbHMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcblxyXG4vKiBCVVRUT05TICovXHJcbmNvbnN0IGJ1dHRvbnMgPSB7XHJcblxyXG4gICAgLyogUFJPRFVDVElPTiBUQUIgKi9cclxuICAgICdnYXRoZXJTdGlja3MnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0YXJ0VmlzaWJsZScsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTgJ0gR2F0aGVyIFN0aWNrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGaXZlLCBTaXgsIFBpY2sgdXAgc3RpY2tzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZSAvLyBUaGlzIGJ1dHRvbiBpcyBhbHdheXMgdmlzaWJsZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJWaW5lcyc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgc3RpY2snLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk42vIEdhdGhlciBWaW5lcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTb21lIHZpbmVzIGFyZSBydWJiZXJ5LCBvdGhlcnMgYXJlIGd1bW15LicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3N0aWNrcycsIHJlc291cmNlcykgPj0gMTAgfHwgcGFzc2VkU3RhZ2UoJ3ZpbmVzJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyUm9ja3MnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0aWNrJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOKlvCTgKkgR2F0aGVyIFJvY2tzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ05vdCBhIHNpbmdsZSB3aW5kb3cgdG8gdGhyb3cgdGhlbSB0aHJvdWdoLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCB8fCBwYXNzZWRTdGFnZSgncm9ja3MnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJGaXNoJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBmaXNoaW5nJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOGnSDwk4afIPCThp4gR28gRmlzaCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdHb3QgYW55IHR1bmE/JyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBoYXNUb29sKCdTcGVhcicpIHx8IGhhc1Rvb2woXCJGaXNoaW5nIFJvZFwiKSB8fCBwYXNzZWRTdGFnZSgnZmlzaGluZycpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlcldvb2QnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd3b29kVG9nZ2xlIHdvb2QnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4yPIENob3AgV29vZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBbiBheGUgaHVydHMgd2F5IGxlc3MgdGhhbiB1c2luZyB5b3VyIGhhbmRzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnQXhlJykgfHwgcGFzc2VkU3RhZ2UoJ3dvb2QnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJPcmUnOiB7XHJcbiAgICAgICAgXCJjbGFzc1wiOiBcInRvb2x0aXAgXCIsXHJcbiAgICAgICAgXCJ0YWJcIjogXCJwcm9kdWN0aW9uXCIsXHJcbiAgICAgICAgXCJ0ZXh0XCI6IFwi8JOJuCBNaW5lIE9yZVwiLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJEaWdneSBEaWdneSBIb2xlXCIsXHJcbiAgICAgICAgXCJ0b29sdGlwQ29zdFwiOiBcIkZyZWVcIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnUGlja2F4ZScpIHx8IHBhc3NlZFN0YWdlKCdvcmUnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qIFRBQlMgKi9cclxuICAgICdwcm9kdWN0aW9uVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbiBhY3RpdmUnLFxyXG4gICAgICAgIHRleHQ6ICdQcm9kdWN0aW9uJyxcclxuICAgICAgICBzaG93VGFiOiAncHJvZHVjdGlvblRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZXhwZXJpbWVudFRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdFeHBlcmltZW50JyxcclxuICAgICAgICBzaG93VGFiOiAnZXhwZXJpbWVudFRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAncG9uZGVyVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1BvbmRlcicsXHJcbiAgICAgICAgc2hvd1RhYjogJ3BvbmRlclRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnam9ic1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdKb2JzJyxcclxuICAgICAgICBzaG93VGFiOiAnam9ic1RhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdqb2JzLXRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ3NraWxsc1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdTa2lsbHMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdza2lsbHNUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnc2tpbGxzVGFibGUnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdwZXJrc1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdQZXJrcycsXHJcbiAgICAgICAgc2hvd1RhYjogJ3BlcmtzVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BlcmtzVGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZmFjdG9yeVRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdGYWN0b3JpZXMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdmYWN0b3J5VGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ2ZhY3RvcnlUYWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdjb21iYXRUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiBcIkNvbWJhdFwiLFxyXG4gICAgICAgIHNob3dUYWI6ICdjb21iYXRUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnY29tYmF0VGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgLyogUE9OREVSIFRBQiAqL1xyXG4gICAgJ2dhdGhlclBvbmRlcic6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAnLFxyXG4gICAgICAgIHRleHQ6ICdQb25kZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnV3JhcCB5b3VyIGhlYWQgYXJvdW5kIHRoZSBncmVhdCBteXN0ZXJpZXMnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnVGltZScsXHJcbiAgICAgICAgdGFiOiAncG9uZGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGJ1dHRvbnM6IGJ1dHRvbnNcclxufTsiLCIvKiBDUkFGVElORyBSRVNPVVJDRVMgKi9cclxuY29uc3QgY3JhZnRlZFJlc291cmNlcyA9IHtcclxuICAgICdzaGFycHJvY2tzJzoge1xyXG4gICAgICAgIHRleHQ6ICdTaGFycCBSb2NrcycsXHJcbiAgICAgICAgaWQ6ICdjcmFmdFNoYXJwcm9ja3NCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3JvY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdDcmFmdCBhIHJvY2sgdXNpbmcgbm90aGluZyBidXQgcm9ja3MhJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1JvY2tzOiA1JyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ3JvcGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFJvcGVCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3ZpbmVzJzogMyB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdUaGUgYmFzaXMgb2YgYXR0YWNoaW5nIHRoaW5ncyB0byBvdGhlciB0aGluZ3MuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1ZpbmVzOiAzJyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ2hhbmRsZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0SGFuZGxlQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdzdGlja3MnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NoZWFyIG9mZiB0aGF0IGJhcmsgdG8gaG9sZCBpdCBiZXR0ZXInLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU2hhcnAgUm9ja3M6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAnY3JhZnRSb2NrcydcclxuICAgICAgICAvLyB0b29sOiAnU2hhcnAgUm9jaydcclxuICAgIH0sXHJcbiAgICAnc3RhZmYnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFN0YWZmQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdoYW5kbGUnOiAyLCAncm9wZSc6IDEgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU3RpY2sgc29tZSBzaGVhcmVkIHN0aWNrcyB0b2dldGhlciAoKyBzdGljayBwcm9kdWN0aW9uKScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdIYW5kbGVzOiAyJyxcclxuICAgICAgICBjbGFzczogJ3JvY2tzJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdmaXNoaW5ncm9kJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRGaXNoaW5ncm9kQnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnRmlzaGluZyBSb2QnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3N0YWZmJzogMSwgJ3JvcGUnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwiZmlzaGluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSB3ZWFwb24gZmVhcmVkIGJ5IHVuZGVyd2F0ZXIgbGlmZSAoKyBmaXNoIHByb2R1Y3Rpb24pJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdmaXNoaW5nJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdzcGVhcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0U3BlYXJCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHtcclxuICAgICAgICAgICAgJ3N0YWZmJzogMSxcclxuICAgICAgICAgICAgJ3NoYXJwcm9ja3MnOiAxLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb3BlXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIGxvbmcgYW5kIHBvaW50eSBzdGljaycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTdGFmZnM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnYXhlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRBeGVCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ2hhbmRsZSc6IDEsICdyb3BlJzogMSwgJ3NoYXJwcm9ja3MnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwic3BlYXJcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1B1dCBhIHJvY2sgc3RyYWlnaHQgdGhyb3VnaCB0aGF0IGhhbmRsZSAoKyB3b29kIHByb2R1Y3Rpb24pJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1NwZWFyczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdzcGVhcidcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAncGlja2F4ZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0UGlja2F4ZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDoge1xyXG4gICAgICAgICAgICAnaGFuZGxlJzogMSxcclxuICAgICAgICAgICAgJ3NoYXJwcm9ja3MnOiAzLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJzcGVhclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU2FkbHkgbm90IG1hZGUgb2YgZGlhbW9uZHMgKCsgb3JlIHByb2R1Y3Rpb24pJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0F4ZXM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAnc3BlYXInXHJcbiAgICB9LFxyXG5cclxuICAgICdnbGFzcyc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0R2xhc3NCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3NhbmQnOiAxMCB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1lvdSBjYW4gc2VlIHJpZ2h0IHRocm91Z2ggaXQhJyxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcImdsYXNzQmxvd2luZ1wiLFxyXG4gICAgICAgIGNsYXNzOiAnZ2xhc3NCbG93aW5nJ1xyXG4gICAgfSxcclxuICAgICdwYXBlcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0UGFwZXJCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3dvb2QnOiAxMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ091dHNvdXJjZSB5b3VyIG1lbW9yeSAoKyBwb25kZXIgcHJvZHVjdGlvbiknLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicGFwZXJcIixcclxuICAgICAgICBjbGFzczogJ3BhcGVyJ1xyXG4gICAgfSxcclxuICAgICdnb2xkJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRHb2xkQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiAxMDAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJtZXRhbFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGVyZSdzIHNvbWUgeWVsbG93IGJpdHMgaW4gdGhpcyBvcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdtZXRhbFdvcmtpbmcnXHJcbiAgICB9LFxyXG4gICAgJ2lyb24nOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdElyb25CdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ29yZSc6IDIwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwibWV0YWxXb3JraW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHN0dXJkeS1sb29raW5nIGJpdHMgaW4gdGhpcyBvcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdtZXRhbFdvcmtpbmcnXHJcbiAgICB9LFxyXG4gICAgJ3NpbHZlcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0U2lsdmVyQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiA1MCB9LFxyXG5cclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJtZXRhbFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGVyZSdzIHNvbWUgc2hpbnkgZ3JheSBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdicmlja3MnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEJyaWNrc0J1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnY2xheSc6IDE1IH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwiY2xheVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkxlYXZlIHNvbWUgY2xheSBieSB0aGUgZmlyZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ2NsYXknXHJcbiAgICB9LFxyXG4gICAgJ2JyZWFkJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRCcmVhZEJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyB3aGVhdDogMTMgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogJ2FncmljdWx0dXJlJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJJJ20gZ29ubmEgZ3JpbmQgeW91ciB3aGVhdCB0byBtYWtlIG15IGJyZWFkIVwiLFxyXG4gICAgICAgIHRvb2x0aXBjb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ2FncmljdWx0dXJlJ1xyXG4gICAgfSxcclxuICAgICdzdGVlbCc6IHsgaWQ6ICdjcmFmdFN0ZWVsQnV0dG9uJywgdG9vbHRpcERlc2M6ICdDYW4gb25seSBiZSBjcmFmdGVkIHdpdGggYSBmYWN0b3J5JywgcmVxdWlyZWRTdGFnZTogJ2ZhY3RvcnknLCBjbGFzczogJ2ZhY3RvcnknLCB2YWx1ZTogMCwgY29zdDogeyAnaXJvbic6IDUgfSB9LFxyXG4gICAgJ2JlYW1zJzogeyBpZDogJ2NyYWZ0QmVhbXNCdXR0b24nLCB0b29sdGlwRGVzYzogJ0NhbiBvbmx5IGJlIGNyYWZ0ZWQgd2l0aCBhIGZhY3RvcnknLCByZXF1aXJlZFN0YWdlOiAnZmFjdG9yeScsIGNsYXNzOiAnZmFjdG9yeScsIHZhbHVlOiAwLCBjb3N0OiB7ICd3b29kJzogMTAgfSB9LFxyXG4gICAgJ2NyYXRlcyc6IHsgaWQ6ICdjcmFmdENyYXRlc0J1dHRvbicsIHRvb2x0aXBEZXNjOiAnQ2FuIG9ubHkgYmUgY3JhZnRlZCB3aXRoIGEgZmFjdG9yeScsIHJlcXVpcmVkU3RhZ2U6ICdmYWN0b3J5JywgY2xhc3M6ICdmYWN0b3J5JywgdmFsdWU6IDAsIGNvc3Q6IHsgJ3dvb2QnOiAxNSB9IH0sXHJcbiAgICAnbmFpbHMnOiB7IGlkOiAnY3JhZnROYWlsc0J1dHRvbicsIHRvb2x0aXBEZXNjOiAnQ2FuIG9ubHkgYmUgY3JhZnRlZCB3aXRoIGEgZmFjdG9yeScsIHJlcXVpcmVkU3RhZ2U6ICdmYWN0b3J5JywgY2xhc3M6ICdmYWN0b3J5JywgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiAxIH0gfSxcclxuICAgICdzbGFicyc6IHsgaWQ6ICdjcmFmdFNsYWJzQnV0dG9uJywgdG9vbHRpcERlc2M6ICdDYW4gb25seSBiZSBjcmFmdGVkIHdpdGggYSBmYWN0b3J5JywgcmVxdWlyZWRTdGFnZTogJ2ZhY3RvcnknLCBjbGFzczogJ2ZhY3RvcnknLCB2YWx1ZTogMCwgY29zdDogeyAncm9ja3MnOiAyMCB9IH0sXHJcbiAgICAnbWVkaWNpbmUnOiB7IGlkOiAnY3JhZnRNZWRpY2luZUJ1dHRvbicsIHRvb2x0aXBEZXNjOiAnQ2FuIG9ubHkgYmUgY3JhZnRlZCB3aXRoIGEgZmFjdG9yeScsIHJlcXVpcmVkU3RhZ2U6ICdmYWN0b3J5JywgY2xhc3M6ICdmYWN0b3J5JywgdmFsdWU6IDAsIGNvc3Q6IHsgJ2hlcmJzJzogNTAgfSB9LFxyXG4gICAgJ2xlYXRoZXInOiB7IGlkOiAnY3JhZnRMZWF0aGVyQnV0dG9uJywgdG9vbHRpcERlc2M6ICdDYW4gb25seSBiZSBjcmFmdGVkIHdpdGggYSBmYWN0b3J5JywgcmVxdWlyZWRTdGFnZTogJ2ZhY3RvcnknLCBjbGFzczogJ2ZhY3RvcnknLCB2YWx1ZTogMCwgY29zdDogeyAnaGlkZXMnOiAxMCB9IH0sXHJcbiAgICAnY29uY3JldGUnOiB7IGlkOiAnY3JhZnRDb25jcmV0ZUJ1dHRvbicsIHRvb2x0aXBEZXNjOiAnQ2FuIG9ubHkgYmUgY3JhZnRlZCB3aXRoIGEgZmFjdG9yeScsIHJlcXVpcmVkU3RhZ2U6ICdmYWN0b3J5JywgY2xhc3M6ICdmYWN0b3J5JywgdmFsdWU6IDAsIGNvc3Q6IHsgJ3NhbmQnOiAzMiB9IH0sXHJcbiAgICAnd29vZCc6IHsgaWQ6ICdjcmFmdFdvb2RCdXR0b24nLCB0b29sdGlwRGVzYzogJ0NhbiBvbmx5IGJlIGNyYWZ0ZWQgd2l0aCBhIGZhY3RvcnknLCByZXF1aXJlZFN0YWdlOiAnZmFjdG9yeScsIGNsYXNzOiAnZmFjdG9yeScsIHZhbHVlOiAwLCBjb3N0OiB7ICdzdGlja3MnOiA4IH0gfSxcclxuICAgICdzdGlja3MnOiB7IGlkOiAnY3JhZnRTdGlja3NCdXR0b24nLCB0b29sdGlwRGVzYzogJ0NhbiBvbmx5IGJlIGNyYWZ0ZWQgd2l0aCBhIGZhY3RvcnknLCByZXF1aXJlZFN0YWdlOiAnZmFjdG9yeScsIGNsYXNzOiAnZmFjdG9yeScsIHZhbHVlOiAwLCBjb3N0OiB7ICd3b29kJzogLjEgfSB9LFxyXG5cclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoaWQpIHtcclxuICAgIGZvciAoY29uc3QgW2MsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoY3JhZnRlZFJlc291cmNlcykpIHtcclxuICAgICAgICBpZiAodmFsLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyhjb25maWcpIHtcclxuICAgIGZvciAobGV0IGsgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGspO1xyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW2tdLmlkID09PSBjb25maWcuaWQpIHJldHVybiBrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0Q3JhZnRlZFJlc291cmNlcygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhjcmFmdGVkUmVzb3VyY2VzKSkge1xyXG4gICAgICAgIHZhbC52YWx1ZSA9IDA7XHJcbiAgICAgICAgdmFsLmNyYWZ0ZWRPbmNlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY3JhZnRlZFJlc291cmNlcyxcclxuICAgIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQsXHJcbiAgICBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyxcclxuICAgIHJlc2V0Q3JhZnRlZFJlc291cmNlc1xyXG59OyIsImNvbnN0IHsgYWxsTWF0ZXJpYWxzIH0gPSByZXF1aXJlKCcuL2FsbE1hdGVyaWFscycpO1xyXG52YXIgZ2xvYmFsUmF0ZXMgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIHNob3dHbG9iYWxSYXRlcygpXHJcbntcclxuICAgIGNvbnNvbGUubG9nKFwiU2hvd2luZyBnbG9iYWwgcmF0ZXNcIik7XHJcbiAgICBjb25zb2xlLmxvZyhnbG9iYWxSYXRlcyk7XHJcbn1cclxuLy8gTWFrZSB2aXNpYmxlIGluIGNvbnNvbGVcclxud2luZG93LnNob3dHbG9iYWxSYXRlcyA9IHNob3dHbG9iYWxSYXRlcztcclxuLy8gSW5pdGlhbGl6ZSBrZXlzXHJcbmFsbE1hdGVyaWFscy5mb3JFYWNoKChrZXkpID0+XHJcbnsgc2V0UmF0ZShrZXksIDApOyB9KTtcclxuXHJcbmZ1bmN0aW9uIHNldFJhdGUoa2V5LCB2YWx1ZSlcclxue1xyXG4gICAgZ2xvYmFsUmF0ZXNba2V5XSA9IHZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSYXRlKGtleSlcclxue1xyXG4gICAgcmV0dXJuIGdsb2JhbFJhdGVzW2tleV07XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2V0UmF0ZTogc2V0UmF0ZSxcclxuICAgIGdldFJhdGU6IGdldFJhdGUsXHJcbiAgICBzaG93R2xvYmFsUmF0ZXM6IHNob3dHbG9iYWxSYXRlcyxcclxufTsiLCJcclxuXHJcbi8qKlxyXG4gKiBUaWVyIDEgKDQwMCBwb25kZXIpOlxyXG4gKiBcclxuICogTHVtYmVyamFja1xyXG4gKiAgKzI1JSB3b29kIHByb2R1Y3Rpb25cclxuICogICsyNSUgc3RpY2tzIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIE1pbmVyXHJcbiAqICArMjUlIHN0b25lICYgb3JlIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIEJvdGFuaXN0XHJcbiAqICArMjUlIHZpbmVzICYgaGVyYnMgJiB3aGVhdCBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBMZWFkZXJcclxuICogIDUwJSBjbG9uZSBlZmZlY3RpdmVuZXNzXHJcbiAqIFxyXG4gKiBBcmNoaXRlY3RcclxuICogIC0yNSUgYnVpbGRpbmcgY29zdFxyXG4gKiBcclxuICogXHJcbiAqIFRpZXIgMiAoMTUwMCBwb25kZXIpOlxyXG4gKiBcclxuICogVGhpbmtlclxyXG4gKiAgKzUwJSBwb25kZXIgcHJvZHVjdGlvbiBhbmQgc3RvcmFnZVxyXG4gKiAgLTI1JSBwb25kZXIgY29zdFxyXG4gKiBcclxuICogR2VuZXJhbFxyXG4gKiAgKzUwJSBjb21iYXQgc3RyZW5ndGhcclxuICogICsyNSUgY2xvbmUgZWZmZWN0aXZlbmVzc1xyXG4gKiBcclxuICogTWVyY2hhbnRcclxuICogIC0yNSUgdHJhZGUgcHJpY2VcclxuICogICsyNSUgY2hhbmNlIG9mIHJhcmUgdHJhZGVcclxuICogXHJcbiAqIEdlbmVyYWxpc3RcclxuICogICsxMCUgZ2xvYmFsIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIFNwZWNpYWxpc3RcclxuICogICsxMDAlIHNraWxsIGdhaW5cclxuICogICsxMCUgc2tpbGwgYm9udXMgdG8gcmVzb3VyY2VzXHJcbiAqIFxyXG4gKiBcclxuICogXHJcbiAqIFxyXG4gKi9cclxuY29uc3QgcGVya3MgPSB7XHJcbiAgICAndGllcjEnOiBbJ0x1bWJlcmphY2snLCAnTWluZXInLCAnQm90YW5pc3QnLCAnTGVhZGVyJywgJ0FyY2hpdGVjdCddLFxyXG4gICAgJ3RpZXIyJzogWydUaGlua2VyJywgJ0dlbmVyYWwnLCAnTWVyY2hhbnQnLCAnR2VuZXJhbGlzdCcsICdTcGVjaWFsaXN0J10sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHBlcmtzOiBwZXJrc1xyXG59OyIsImNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKFwiLi4vY2FwaXRhbGl6ZUZpcnN0XCIpO1xyXG5cclxubGV0IHBvbmRlcnMgPSB7XHJcbiAgICAvLyAncG9uZGVyMSc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlclBvbmRlcjEnLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDEwIH0sXHJcbiAgICAvLyAgICAgdGV4dDogXCJUaGluayBIYXJkZXJcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCI1JSBib29zdCB0byBwb25kZXJpbmdcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuXHJcbiAgICAvLyB9LFxyXG4gICAgJ2pvYnMtdGFiJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVySm9icy10YWInLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwIH0sXHJcbiAgICAgICAgdGV4dDogXCJVbmRlcnN0YW5kIENsb25pbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1doeSBhcmUgdGhlcmUgdHdvIG9mIHlvdT8nLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU2FuaXR5ICgyMCBQb25kZXIpJyxcclxuXHJcbiAgICB9LFxyXG4gICAgJ3NraWxsc1RhYmxlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyU2tpbGxzVGFibGUnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDUwIH0sXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiWW91J3JlIHN0YXJ0aW5nIHRvIGxlYXJuIHRoaW5ncywgcmlnaHQ/XCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJOb3RpY2UgSW1wcm92ZW1lbnRcIlxyXG4gICAgfSxcclxuICAgICdmaXNoaW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRmlzaGluZycsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAsICdmaXNoJzogNTAgfSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXaGF0IGlmLi4uIHlvdXIgY2xvbmVzIGNvdWxkIGdvIGZpc2hpbmc/XCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJGaXNoaW5nIEpvYlwiXHJcbiAgICB9LFxyXG4gICAgLy8gJ21pY3JvbWFuYWdlbWVudCc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlck1pY3JvbWFuYWdlbWVudCcsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogMjAwLCAnY2xvbmVzJzogNSB9LFxyXG4gICAgLy8gICAgIHRleHQ6IFwiTWljcm9tYW5hZ2VtZW50XCIsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiWW91IG1hbmFnZWQgdG8gbWFrZSBjbG9uZXMgbWFuYWdlIGVhY2ggb3RoZXIuXCJcclxuICAgIC8vIH0sXHJcbiAgICAnZmFzdGVyU2tpbGxzJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRmFzdGVyU2tpbGxzJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA4MCB9LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiU2tpbGxzIElcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGluayBTbWFydGVyLiA1JSBib251cyB0byBza2lsbCBleHBcIlxyXG4gICAgfSxcclxuICAgICd0aGlua2luZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclRoaW5raW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxNTAgfSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5raW5nIEpvYlwiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkxldCB5b3VyIGNsb25lcyBzdGFydCB0aGlua2luZyBmb3IgdGhlbXNlbHZlcy5cIlxyXG5cclxuICAgIH0sXHJcbiAgICAvLyAnZmFzdGVyUmVzb3VyY2VHYWluJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyRmFzdGVyUmVzb3VyY2VHYWluJyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiA0MCB9LFxyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgLy8gICAgIHRleHQ6IFwiUHJvZHVjdGl2aXR5IElcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiA1JSBib251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgIC8vIH0sXHJcbiAgICAvLyAnZmFzdGVyUmVzb3VyY2VHYWluMic6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlckZhc3RlclJlc291cmNlR2FpbjInLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDEyMCB9LFxyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgLy8gICAgIHRleHQ6IFwiUHJvZHVjdGl2aXR5IElJXCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiSnVzdCB3b3JrIGhhcmRlci4gNSUgYm9udXMgdG8gcmVzb3VyY2UgZ2FpblwiXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ2Zhc3RlclJlc291cmNlR2FpbjMnOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJGYXN0ZXJSZXNvdXJjZUdhaW4zJyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiAzMDAgfSxcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIlByb2R1Y3Rpdml0eSBJSUlcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiA1JSBib251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgIC8vIH0sXHJcbiAgICAnbWV0YWxXb3JraW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyTWV0YWxXb3JraW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIk1ldGFsIFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTdGFydCBwcm9jZXNzaW5nIHRoYXQgb3JlXCIsXHJcbiAgICAgICAgLy8gY29zdDogW3sgbWF0ZXJpYWw6ICdwb25kZXInLCBhbW91bnQ6IDEwMCB9LCB7IG1hdGVyaWFsOiAnb3JlJywgYW1vdW50OiA1MCB9LCB7IG1hdGVyaWFsOiAncm9ja3MnLCBhbW91bnQ6IDUwIH1dXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAwLCAnb3JlJzogNTAsICdyb2Nrcyc6IDUwIH0sXHJcbiAgICB9LFxyXG4gICAgJ2dsYXNzQmxvd2luZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckdsYXNzQmxvd2luZycsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogJ0dsYXNzIEJsb3dpbmcnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnSHVmZiBhbmQgcHVmZiBhbmQgbWFrZSBhIGNvb2wgdmFzZScsXHJcbiAgICAgICAgY29zdDogeyAnc2FuZCc6IDIwLCAncG9uZGVyJzogODAgfVxyXG4gICAgfSxcclxuICAgICdvcmdhbml6YXRpb24nOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJPcmdhbml6YXRpb24nLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6ICdPcmdhbml6ZWQgU3RvcmFnZScsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdPcmdhbml6ZSB5b3VyIHN0b3JhZ2UgYnkgZ3JvdXBzJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAgfVxyXG4gICAgfSxcclxuICAgICdwYXBlcic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclBhcGVyJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiAnUGFwZXIgUHJvY2Vzc2luZycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTbWFzaCBkb3duIHNvbWUgd29vZCBpbnRvIHBhcGVyJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAsICd3b29kJzogMTAwIH1cclxuICAgIH0sXHJcbiAgICAnYXV0b0Nsb25lJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQXV0b0Nsb25lJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkF1dG8gQ2xvbmVcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBdXRvbWF0aWNhbGx5IHByb2R1Y2UgY2xvbmVzXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTQwLCAnY2xvbmVzJzogMjAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgLy8gJ2VmZmVjdGl2ZUJ1aWxkaW5ncyc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlckVmZmVjdGl2ZUJ1aWxkaW5ncycsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgdGV4dDogXCJCdWlsZGluZ3MgSVwiLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIkluY3JlYXNlIGJ1aWxkaW5nIGVmZmVjdHMgYnkgMyVcIixcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiAxODAgfSxcclxuICAgIC8vIH0sXHJcbiAgICAnYWdyaWN1bHR1cmUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJBZ3JpY3VsdHVyZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJBZ3JpY3VsdHVyZVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZpbmQgc29tZSBzZWVkcyBmcm9tIGFsbCB0aG9zZSBwbGFudHNcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxODAgfVxyXG4gICAgfSxcclxuICAgICdjb21iYXRUYWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJDb21iYXRUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQ29tYmF0XCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSXMgdGhlcmUgYW55b25lIHRvIHNwYXIgd2l0aCBiZXNpZGVzIHlvdT9cIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAzMDAsICdzcGVhcic6IDEwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2h1bnRpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJIdW50aW5nJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkh1bnRpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBdCBsZWFzdCB0aGVyZSBhcmUgYW5pbWFsc1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCwgJ2Zpc2gnOiA1MCB9XHJcbiAgICB9LFxyXG4gICAgJ3BlcmtzVGFiJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUGVya3NUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6ICdQZXJrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdNYXliZSB5b3UgYXMgdGhlIG9yaWdpbmFsIHNob3VsZCBzcGVjaWFsaXplJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA0MDAgfVxyXG4gICAgfSxcclxuICAgIC8vICdhdXRvY3JhZnQnOiB7XHJcbiAgICAvLyAgICAgaWQ6IFwicG9uZGVyQXV0b2NyYWZ0XCIsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgdGV4dDogXCJBdXRvIENyYWZ0XCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiQXV0b21hdGljYWxseSBjcmFmdCByZXNvdXJjZXMgd2hlbiB0aGV5IHJlYWNoIHRoZSBzdG9yYWdlIGxpbWl0XCIsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogNDAwLCAnd29vZCc6IDEwMDAsICdyb2Nrcyc6IDUwMCwgJ3doZWF0JzogMTAwMCB9XHJcbiAgICAvLyB9LFxyXG4gICAgJ2ZhY3RvcnknOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYWN0b3J5JyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkZhY3Rvcmllc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkFzY2VuZCB0byB0aGUgbmV4dCBsZXZlbCBvZiBlY29ub215XCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAwLCAnZ29sZCc6IDEwLCAnd29vZCc6IDEwMDAsICd3aGVhdCc6IDEwMDAsICdyb2Nrcyc6IDEwMDAgfVxyXG4gICAgfSxcclxuICAgIC8vICdwb25kZXIyJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyUG9uZGVyMicsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgdGV4dDogXCJUaGluayBldmVuIGhhcmRlclwiLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwMCB9XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ3BvbmRlcjMnOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJQb25kZXIzJyxcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIlRoaW5rIGhhcmRlc3RcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCI1JSBib29zdCB0byBwb25kZXJpbmdcIixcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiA2MDAgfVxyXG4gICAgLy8gfSxcclxuICAgICdiaWdnZXJTaGVsdGVyJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VyU2hlbHRlcicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJFeHBhbmQgU2hlbHRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlNoZWx0ZXJzIGNhbiBob3VzZSAxIG1vcmUgY2xvbmUgZWFjaFwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDUwMCwgJ3N0aWNrcyc6IDEwMDAgfVxyXG4gICAgfSxcclxuICAgICdiaWdnZXJIdXQnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJIdXQnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRXhwYW5kIEh1dFwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkh1dHMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNzUwLCAnc3RpY2tzJzogMTUwMCwgJ3ZpbmVzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2JpZ2dlckhvdXNlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VySG91c2UnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiVHdvLXN0b3J5IGhvdXNlc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkhvdXNlcyBjYW4gaG91c2UgMiBtb3JlIGNsb25lcyBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAwMCwgJ3dvb2QnOiAyMDAwLCAncm9ja3MnOiAyMDAwIH1cclxuICAgIH0sXHJcbiAgICAnYmlnZ2VyVGVlcGVlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VyVGVlcGVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkRvdWJsZSBUZXBlZXNcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUZWVwZWVzIGNhbiBob3VzZSA0IG1vcmUgY2xvbmVzIGVhY2hcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMjUwLCAnd29vZCc6IDMwMDAsICdoaWRlcyc6IDE1MDAgfVxyXG4gICAgfSxcclxuICAgICdldmVuQmlnZ2VyU2hlbHRlcic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckV2ZW5CaWdnZXJTaGVsdGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkV4cGFuZCBTaGVsdGVyIEFnYWluXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2hlbHRlcnMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTUwMCwgJ3N0aWNrcyc6IDMwMDAsICdmaXNoJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2VhdEJyZWFkJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRWF0QnJlYWQnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRWF0IEJyZWFkXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRWF0aW5nIHNvbWUgYnJlYWQgd2lsbCBoZWxwIHlvdSB3b3JrIGZhc3RlclwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwMCwgJ2JyZWFkJzogMzAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVzZXRQb25kZXJzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHBvbmRlcnMpKSB7XHJcbiAgICAgICAgdmFsLmlzUG9uZGVyZWQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0b1JvbWFuKG51bSkge1xyXG4gICAgY29uc3Qgcm9tYW5OdW1lcmFscyA9IFtcclxuICAgICAgICB7IHZhbHVlOiAxMDAwLCBudW1lcmFsOiAnTScgfSxcclxuICAgICAgICB7IHZhbHVlOiA5MDAsIG51bWVyYWw6ICdDTScgfSxcclxuICAgICAgICB7IHZhbHVlOiA1MDAsIG51bWVyYWw6ICdEJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDQwMCwgbnVtZXJhbDogJ0NEJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDEwMCwgbnVtZXJhbDogJ0MnIH0sXHJcbiAgICAgICAgeyB2YWx1ZTogOTAsIG51bWVyYWw6ICdYQycgfSxcclxuICAgICAgICB7IHZhbHVlOiA1MCwgbnVtZXJhbDogJ0wnIH0sXHJcbiAgICAgICAgeyB2YWx1ZTogNDAsIG51bWVyYWw6ICdYTCcgfSxcclxuICAgICAgICB7IHZhbHVlOiAxMCwgbnVtZXJhbDogJ1gnIH0sXHJcbiAgICAgICAgeyB2YWx1ZTogOSwgbnVtZXJhbDogJ0lYJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDUsIG51bWVyYWw6ICdWJyB9LFxyXG4gICAgICAgIHsgdmFsdWU6IDQsIG51bWVyYWw6ICdJVicgfSxcclxuICAgICAgICB7IHZhbHVlOiAxLCBudW1lcmFsOiAnSScgfVxyXG4gICAgXTtcclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICBmb3IgKGNvbnN0IG51bWVyYWwgb2Ygcm9tYW5OdW1lcmFscykge1xyXG4gICAgICAgIHdoaWxlIChudW0gPj0gbnVtZXJhbC52YWx1ZSkge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gbnVtZXJhbC5udW1lcmFsO1xyXG4gICAgICAgICAgICBudW0gLT0gbnVtZXJhbC52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGFkZFBvbmRlcnMoY291bnQpIHtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGNvdW50OyBpKyspIHtcclxuICAgICAgICBjb25zdCBpZCA9IGBmYXN0ZXJSZXNvdXJjZUdhaW4ke2l9YDtcclxuICAgICAgICBwb25kZXJzW2lkXSA9IHtcclxuICAgICAgICAgICAgaWQ6IGBwb25kZXJGYXN0ZXJSZXNvdXJjZUdhaW4ke2l9YCxcclxuICAgICAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwICogTWF0aC5wb3coMywgaSAtIDEpIH0sXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgICAgICB0ZXh0OiBgUHJvZHVjdGl2aXR5ICR7dG9Sb21hbihpKX1gLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiBCb251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGNvdW50OyBpKyspIHtcclxuICAgICAgICBwb25kZXJzW2BmYXN0ZXJQb25kZXIke2l9YF0gPSB7XHJcbiAgICAgICAgICAgIGlkOiBgcG9uZGVyRmFzdGVyUG9uZGVyJHtpfWAsXHJcbiAgICAgICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMCAqIE1hdGgucG93KDUsIGkgLSAxKSB9LFxyXG4gICAgICAgICAgICB0ZXh0OiBgVGhpbmsgSGFyZGVyICR7dG9Sb21hbihpKX1gLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogYFNtYWxsIGJvb3N0IHRvIHBvbmRlcmluZyBzcGVlZGAsXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gY291bnQ7IGkrKykge1xyXG4gICAgICAgIHBvbmRlcnNbYGVmZmVjdGl2ZUJ1aWxkaW5ncyR7aX1gXSA9IHtcclxuICAgICAgICAgICAgaWQ6IGBwb25kZXJFZmZlY3RpdmVCdWlsZGluZ3Mke2l9YCxcclxuICAgICAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwICogTWF0aC5wb3coMywgaSAtIDEpIH0sXHJcbiAgICAgICAgICAgIHRleHQ6IGBCdWlsZGluZ3MgJHt0b1JvbWFuKGkpfWAsXHJcbiAgICAgICAgICAgIHRvb2x0aXBEZXNjOiBcIkluY3JlYXNlIGJ1aWxkaW5nIGVmZmVjdHMgYnkgYSBzbWFsbCBhbW91bnRcIixcclxuICAgICAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5hZGRQb25kZXJzKDEwMCk7XHJcblxyXG5mdW5jdGlvbiBnZXRQb25kZXJDb25maWcoaWQpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhwb25kZXJzKSkge1xyXG4gICAgICAgIGlmICh2YWwuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcG9uZGVyczogcG9uZGVycyxcclxuICAgIHJlc2V0UG9uZGVycyxcclxuICAgIGdldFBvbmRlckNvbmZpZ1xyXG59OyIsImNvbnN0IHByZXN0aWdlID0ge1xyXG4gICAgJ21heENsb25lcyc6IHtcclxuICAgICAgICB0ZXh0OiAnQ3JhbXBlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdNYXggQ2xvbmVzICgrMSknLFxyXG4gICAgICAgIGNvc3Q6IDIsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2xvbmVCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnSGFuZHltYW4nLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ2xvbmUgUHJvZHVjdGl2aXR5ICgrNSUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlcmluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdQaWNrZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnR2F0aGVyaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ21hc29ucnlCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnUm9ja2VyJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01hc29ucnkgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2FycGVudHJ5Qm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ0Nob3BwZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ2FycGVudHJ5IEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ3RoaW5raW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ1dpemVuZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnVGhpbmtpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnZmFybWluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdQcnVuZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnRmFybWluZyBFZmZpY2llbmN5ICgrMTAlKScsXHJcbiAgICAgICAgY29zdDogMSxcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdmaXNoaW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ0hvb2tlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGaXNoaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2h1bnRpbmdCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnVHJhY2tlcicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdIdW50aW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgLy8gJ2NoZWFwZXJCdWlsZGluZ3MnOiB7XHJcbiAgICAvLyAgICAgdGV4dDogJ1JpY2tldHknLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiAnQnVpbGRpbmcgQ29zdCAoLTUlKScsXHJcbiAgICAvLyAgICAgY29zdDogMixcclxuICAgIC8vICAgICBsZXZlbDogMFxyXG4gICAgLy8gfSxcclxuICAgICdzdG9yYWdlU3BhY2UnOiB7XHJcbiAgICAgICAgdGV4dDogJ1N0dWZmZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU3RvcmFnZSBTcGFjZSAoKzUlKScsXHJcbiAgICAgICAgY29zdDogMixcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gaGFzUHJlc3RpZ2UocHJlcykge1xyXG4gICAgcmV0dXJuIGdldExldmVsT2ZQcmVzdGlnZShwcmVzKSA+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExldmVsT2ZQcmVzdGlnZShwcmVzKSB7XHJcbiAgICByZXR1cm4gcHJlc3RpZ2VbcHJlc10ubGV2ZWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFByZXN0aWdlTGV2ZWwocHJlcywgbGV2ZWwpIHtcclxuICAgIHByZXN0aWdlW3ByZXNdLmxldmVsID0gbGV2ZWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFByZXN0aWdlQ29zdChwcmVzLCBjb3N0KSB7XHJcbiAgICBwcmVzdGlnZVtwcmVzXS5jb3N0ID0gY29zdDtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHByZXN0aWdlLFxyXG4gICAgaGFzUHJlc3RpZ2UsXHJcbiAgICBnZXRMZXZlbE9mUHJlc3RpZ2UsXHJcbiAgICBzZXRQcmVzdGlnZUNvc3QsXHJcbiAgICBzZXRQcmVzdGlnZUxldmVsXHJcbn07IiwiXHJcbi8vIFRPRE86IEFERCBSRVFVSVJFTUVOVFMgRk9SIEVBQ0ggVE8gTUFLRSBUSEVNIFZJU0lCTEVcclxuLy8gb3IganVzdCBkaXNwbGF5IHRoZW0gd2hlbiB5b3UgZ2V0IHlvdXIgZmlyc3Qgb25lP1xyXG5jb25zdCByZXNvdXJjZXMgPSB7XHJcbiAgICBcImNsb25lc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcIm1ha2VDbG9uZVwiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBiYXNlbWF4OiAwXHJcbiAgICB9LFxyXG5cclxuICAgIFwic3RpY2tzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyU3RpY2tzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogdHJ1ZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4ax8JOAnCBHYXRoZXJpbmcgU3RpY2tzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThrEgR2F0aGVyIFN0aWNrc1wiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgJ0nLFxyXG4gICAgICAgIGJhc2VtYXg6IDUwXHJcbiAgICB9LFxyXG4gICAgXCJ2aW5lc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclZpbmVzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JONr/CTgKogR2F0aGVyaW5nIFZpbmVzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTja8gR2F0aGVyIFZpbmVzXCIsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJBeGVcIiwgXCJ2YWxcIjogMS41IH1dLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgKonLFxyXG4gICAgICAgIGJhc2VtYXg6IDUwXHJcbiAgICB9LFxyXG4gICAgXCJyb2Nrc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclJvY2tzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOKlvCTgKkgR2F0aGVyaW5nIFJvY2tzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTipYgR2F0aGVyIFJvY2tzXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgYmFzZW1heDogMzBcclxuICAgIH0sXHJcbiAgICBcImZpc2hcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJGaXNoXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOGnfCThp/wk4aeIPCTgYMgR29uZSBGaXNoaW5nXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThp3wk4af8JOGniBHbyBGaXNoXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOBgycsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJTcGVhclwiLCBcInZhbFwiOiAxIH0sIHsgXCJ0b29sXCI6IFwiRmlzaGluZyBSb2RcIiwgXCJ2YWxcIjogMiB9XSxcclxuICAgICAgICBiYXNlbWF4OiAxMFxyXG4gICAgfSxcclxuICAgIFwid29vZFwiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlcldvb2RcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CoIENob3BwaW5nIFdvb2RcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOMjyBDaG9wIFdvb2RcIixcclxuICAgICAgICBlbW9qaTogJ/CTgKgnLFxyXG4gICAgICAgIFwidG9vbHNcIjogW3sgXCJ0b29sXCI6IFwiQXhlXCIsIFwidmFsXCI6IDEuNSB9LCB7IFwidG9vbFwiOiBcIkNoYWluc2F3XCIsIFwidmFsXCI6IDMgfV0sXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGJhc2VtYXg6IDQwXHJcbiAgICB9LFxyXG4gICAgXCJwb25kZXJcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJQb25kZXJcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CBIFBvbmRlcmluZ1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4CBIFBvbmRlclwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAgScsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGJhc2VtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJvcmVcIjoge1xyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyT3JlXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOJuPCTgYQgTWluaW5nIE9yZVwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4m4IE1pbmUgT3JlXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4GEJyxcclxuICAgICAgICBiYXNlbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwic2FuZFwiOiB7XHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJTYW5kXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAqSBTY29vcGluZyBTYW5kXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgKkgU2Nvb3AgU2FuZFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgYmFzZW1heDogMjBcclxuICAgIH0sXHJcbiAgICBcIndoZWF0XCI6IHtcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlcldoZWF0XCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAqSBIYXJ2ZXN0aW5nIFdoZWF0XCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgKkgSGFydmVzdCBXaGVhdFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAnScsXHJcbiAgICAgICAgYmFzZW1heDogMjBcclxuICAgIH0sXHJcbiAgICAnZnJlc2h3YXRlcic6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJGcmVzaHdhdGVyJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ2Jhc2VtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdoaWRlcyc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJIaWRlcycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgI4nLFxyXG4gICAgICAgICdiYXNlbWF4JzogNTBcclxuXHJcbiAgICB9LFxyXG4gICAgJ2NsYXknOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyQ2xheScsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdiYXNlbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnaGVyYnMnOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVySGVyYnMnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnYmFzZW1heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2dhbWUnOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyR2FtZScsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICfwk4Oa8JOAjiBIdW50aW5nJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAn8JOAjiBIdW50JyxcclxuICAgICAgICBlbW9qaTogJ/CTgI4nLFxyXG4gICAgICAgICdiYXNlbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnaHVza3MnOiB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgaWQ6ICdnYXRoZXJIdXNrcycsXHJcbiAgICAgICAgaXNHZXR0aW5nOiBmYWxzZSxcclxuICAgICAgICBpc1Zpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZVRleHQ6ICcnLFxyXG4gICAgICAgIGRlZmF1bHRUZXh0OiBcIlwiLFxyXG4gICAgICAgIGVtb2ppOiAnWCcsXHJcbiAgICAgICAgJ2Jhc2VtYXgnOiAxMDAwXHJcbiAgICB9LFxyXG4gICAgJ3Zpb2xlbmNlJzoge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGlkOiAnZ2F0aGVyVmlvbGVuY2UnLFxyXG4gICAgICAgIGlzR2V0dGluZzogZmFsc2UsXHJcbiAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVUZXh0OiAnJyxcclxuICAgICAgICBkZWZhdWx0VGV4dDogJycsXHJcbiAgICAgICAgZW1vamk6ICcnLFxyXG4gICAgICAgIGJhc2VtYXg6IDEwMFxyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBpc1Jlc291cmNlKHJlc291cmNlKSB7XHJcbiAgICAvLyByZXR1cm4gcmVzb3VyY2VzW3Jlc291cmNlXSAhPT0gbnVsbDtcclxuICAgIHJldHVybiByZXNvdXJjZSBpbiByZXNvdXJjZXM7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0UmVzb3VyY2VDb25maWdCeUlkKGlkKSB7XHJcbiAgICBmb3IgKGxldCByIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbcl0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZXNbcl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0UmVzb3VyY2VzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpIHtcclxuICAgICAgICB2YWwudmFsdWUgPSAwO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCYXNlTWF4KHJlc291cmNlKSB7XHJcbiAgICByZXR1cm4gcmVzb3VyY2VzW3Jlc291cmNlXS5iYXNlbWF4O1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcmVzb3VyY2VzLFxyXG4gICAgaXNSZXNvdXJjZSxcclxuICAgIGdldFJlc291cmNlQ29uZmlnQnlJZCxcclxuICAgIHJlc2V0UmVzb3VyY2VzLFxyXG4gICAgZ2V0QmFzZU1heFxyXG59O1xyXG5cclxuIiwiY29uc3Qgc2tpbGxzID0ge1xyXG4gICAgZ2F0aGVyaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3N0aWNrcycsICd2aW5lcycsICdzYW5kJywgJ2hlcmJzJywgJ2JlcnJpZXMnXVxyXG4gICAgfSxcclxuICAgIG1hc29ucnk6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsncm9ja3MnLCAnb3JlJywgJ2NsYXknXSxcclxuICAgICAgICBuZWVkVG9vbHM6IFt7ICdQaWNrYXhlJzogWydvcmUnXSB9XVxyXG4gICAgfSxcclxuICAgIGNhcnBlbnRyeToge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWyd3b29kJywgJ2hhbmRsZScsICdzdGFmZicsICdmaXNoaW5ncm9kJ10sXHJcbiAgICAgICAgbmVlZFRvb2xzOiBbeyAnQXhlJzogWyd3b29kJ10gfV1cclxuICAgIH0sXHJcbiAgICB0aGlua2luZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydwb25kZXInXVxyXG4gICAgfSxcclxuICAgIC8vIHNtaXRoaW5nOiB7XHJcbiAgICAvLyAgICAgZXhwOiAwLFxyXG4gICAgLy8gICAgIGxldmVsOiAwLFxyXG4gICAgLy8gICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2F4ZScsICdwaWNrYXhlJywgJ3NwZWFyJywgJ2dsYXNzJywgJ2lyb24nLCAnc2lsdmVyJywgJ2dvbGQnXVxyXG4gICAgLy8gfSxcclxuICAgIGZhcm1pbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnd2hlYXQnLCAnZnJlc2h3YXRlciddXHJcbiAgICB9LFxyXG4gICAgY29tYmF0OiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3Zpb2xlbmNlJ11cclxuICAgIH0sXHJcbiAgICBmaXNoaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2Zpc2gnXVxyXG4gICAgfSxcclxuICAgIGh1bnRpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnaGlkZXMnLCAnZ2FtZSddXHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHNraWxsczogc2tpbGxzXHJcbn07IiwiY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzLCByZXNldENyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzLCByZXNldEJ1aWxkaW5ncyB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbmNvbnN0IHsgcG9uZGVycywgcmVzZXRQb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzLCByZXNldFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBzYXZlR2FtZSwgbG9hZEdhbWUgfSA9IHJlcXVpcmUoXCIuL3NhdmluZ1wiKTtcclxuY29uc3QgeyBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zLCBpbmNyZWFzZU1hdGVyaWFsLCBjcmFmdEFsbFJlc291cmNlcywgY3JhZnRSZXNvdXJjZSwgdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzLCBpbmNyZWFzZU1heCB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidXlNYXhCdWlsZGluZ3MsIGJ1eUJ1aWxkaW5nLCB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBzZWxlY3RBYmlsaXR5LCByZXNldFBlcmtzIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgY2xlYXJTaWRlYmFyLCBnZXRNYXggfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBidXlGYWN0b3J5LCBhdHRlbXB0TWFudWZhY3R1cmUgfSA9IHJlcXVpcmUoJy4vZmFjdG9yeScpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQsIGdlbmVyYXRlUG9uZGVyQnV0dG9ucyB9ID0gcmVxdWlyZShcIi4vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGhhc1Rvb2wsIGFkZFRvb2wgfSA9IHJlcXVpcmUoJy4vdG9vbHMnKTtcclxuY29uc3QgeyBnZXRBdGVGaXNoLCBzZXRBdGVGaXNoIH0gPSByZXF1aXJlKCcuL2F0ZUZpc2gnKTtcclxuY29uc3QgeyB1cGRhdGVUb3RhbCwgY2xlYXJKb2JBc3NpZ25tZW50cywgcmVzZXRBbGxKb2JzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UsIHJlc2V0U3RhZ2VzIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZSgnLi9yZWNhbGNNYXhDbG9uZXMnKTtcclxuY29uc3QgeyBpbml0aWFsaXplUmVzb3VyY2VUYWdzLCB1cGRhdGVTaWRlYmFyLCB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyB0cmlnZ2VyRmxvYXRVcFRleHQgfSA9IHJlcXVpcmUoJy4vdHJpZ2dlckZsb2F0VXBUZXh0Jyk7XHJcbmNvbnN0IHsgdXBkYXRlQm91bmNlQW5pbWF0aW9uIH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJvdW5jZUFuaW1hdGlvbicpO1xyXG5jb25zdCB7IHVwZGF0ZVRvb2x0aXAsIGhpZGVUb29sdGlwIH0gPSByZXF1aXJlKCcuL3VwZGF0ZVRvb2x0aXAnKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGNhbGN1bGF0ZVdpbkNoYW5jZSwgY29tYmF0LCBzd2l0Y2hTdGFuY2UgfSA9IHJlcXVpcmUoJy4vY29tYmF0Jyk7XHJcbmNvbnN0IHsgc2hvd1RhYiwgZ2V0Q3VycmVudFRhYiB9ID0gcmVxdWlyZSgnLi9zaG93VGFiJyk7XHJcbmNvbnN0IHsgZ2V0U2Z4Vm9sdW1lLCBnZXRNdXNpY1ZvbHVtZSwgc2V0TXVzaWNWb2x1bWUsIHNldFNmeFZvbHVtZSwgcGxheVNvdW5kIH0gPSByZXF1aXJlKCcuL2F1ZGlvJyk7XHJcbmNvbnN0IHsgZ2VuZXJhdGVSYW5kb21CdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nJyk7XHJcbmNvbnN0IHsgY2hhbmdlTWVzc2FnZSwgbWVzc2FnZUVsZW1lbnQgfSA9IHJlcXVpcmUoJy4vY2hhbmdlTWVzc2FnZScpO1xyXG5jb25zdCB7IGdlbmVyYXRlQnV0dG9ucyB9ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZUJ1dHRvbnMnKTtcclxuY29uc3QgeyB0b2dnbGVSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nYXRoZXJpbmcnKTtcclxuY29uc3QgeyBHYW1lU2ltdWxhdG9yIH0gPSByZXF1aXJlKCcuL0dhbWVTaW11bGF0b3InKTtcclxuY29uc3QgeyBpbml0aWFsaXplQXBwIH0gPSByZXF1aXJlKCdAZmlyZWJhc2UvYXBwJyk7XHJcbmNvbnN0IHsgZ2V0QW5hbHl0aWNzIH0gPSByZXF1aXJlKCdAZmlyZWJhc2UvYW5hbHl0aWNzJyk7XHJcbmNvbnN0IHsgc2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vc2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUFsbEJ1aWxkaW5nQ29zdHMgfSA9IHJlcXVpcmUoJy4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QnKTtcclxuY29uc3QgeyBzZXRQZXRhbHMsIHN0YXJ0UGV0YWxSZW5kZXJpbmcgfSA9IHJlcXVpcmUoJy4vcGV0YWxzJyk7XHJcbmNvbnN0IHsgZ2V0UmF0ZSB9ID0gcmVxdWlyZSgnLi9qc29uL2N1cnJlbnRSYXRlcycpO1xyXG5jb25zdCB7IGFsbE1hdGVyaWFscyB9ID0gcmVxdWlyZSgnLi9qc29uL2FsbE1hdGVyaWFscycpO1xyXG5jb25zdCB7IHVwZGF0ZVJhdGVzIH0gPSByZXF1aXJlKCcuL2NhbGNJbmNyZWFzZScpO1xyXG5cclxuZnVuY3Rpb24gc2V0VG90YWxUaW1lKHRpbWUpXHJcbntcclxuICAgIHRvdGFsX3RpbWUgPSB0aW1lO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgdG9vbHNUb1N0YWdlcyA9IHtcclxuICAgICdTaGFycFJvY2tzJzogJ2NyYWZ0Um9ja3MnLFxyXG4gICAgJ1NwZWFyJzogJ2Zpc2hpbmcnLFxyXG4gICAgXCJGaXNoaW5nUm9kXCI6ICdmaXNoaW5nJyxcclxuICAgICdBeGUnOiAnd29vZCcsXHJcbiAgICBcIlBpY2theGVcIjogJ29yZSdcclxufTtcclxuXHJcbi8vIFVwZGF0ZSB2aXNpYmlsaXR5IG9mIGFzc2V0c1xyXG5jb25zdCB2aXNpYmlsaXR5UnVsZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbChcInN0aWNrc1wiLCByZXNvdXJjZXMpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZShcInN0aWNrXCIpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3N0aWNrcycsIHJlc291cmNlcykgPj0gMTAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgndmluZXMnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCd2aW5lcycsIHJlc291cmNlcykgPj0gMTAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgncm9ja3MnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKFwicm9ja3NcIiwgcmVzb3VyY2VzKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4geyBtYWtlVmlzaWJsZShcInRhYi1idXR0b25cIik7IG1ha2VWaXNpYmxlKCdjcmFmdFJvY2tzJyk7IH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRDcmFmdGVkUmVzb3VyY2UoJ3NwZWFyJywgY3JhZnRlZFJlc291cmNlcykgPiAwLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3NwZWFyJylcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoXCJmaXNoXCIsIHJlc291cmNlcykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdmaXNoaW5nJylcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gaGFzVG9vbChcIkF4ZVwiKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCd3b29kJylcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRDcmFmdGVkUmVzb3VyY2UoJ3JvcGUnKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3JvcGUnKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnZmlzaCcsIHJlc291cmNlcykgPj0gNSAmJiAhZ2V0QXRlRmlzaCgpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2VhdEZpc2gnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldEF0ZUZpc2goKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IHsgbWFrZVZpc2libGUoJ2Nsb25lJyk7IG1ha2VWaXNpYmxlKCdwb25kZXItdGFiJyk7IH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdwb25kZXJGaW5pc2gnKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG5hdmlnYXRlVG8oJ3N0YWdlMi5odG1sJylcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdiaWdnZXJTaGVsdGVyJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiByZWNhbGNNYXhDbG9uZXMoKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlckh1dCcpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gcmVjYWxjTWF4Q2xvbmVzKClcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdiaWdnZXJIb3VzZScpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gcmVjYWxjTWF4Q2xvbmVzKClcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdiaWdnZXJUZWVwZWUnKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IHJlY2FsY01heENsb25lcygpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gaXNQb25kZXJlZCgnZXZlbkJpZ2dlclNoZWx0ZXInKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IHJlY2FsY01heENsb25lcygpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ2Nsb25lcycpID49IDMwLCAvLyAzMCBpcyB3aGVyZSByYXRlcyBzdGFydCB0byBzbG93IGRvd25cclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdwcmVzdGlnZScpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ2NsYXknKSA+IDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnY2xheScpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGUtYmFzaWNzJykgJiYgaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBpbml0aWFsaXplUmVzb3VyY2VUYWdzKHRydWUpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gcGFzc2VkU3RhZ2UoJ2NvbWJhdFRhYicpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gY2FsY3VsYXRlV2luQ2hhbmNlKClcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBwYXNzZWRTdGFnZSgnZmFjdG9yeScpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2ZhY3RvcnktYnV0dG9uJylcclxuICAgIH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlcigpXHJcbntcclxuXHJcbiAgICBmb3IgKGxldCBpID0gdmlzaWJpbGl0eVJ1bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHJ1bGUgPSB2aXNpYmlsaXR5UnVsZXNbaV07XHJcbiAgICAgICAgaWYgKHJ1bGUuY29uZGl0aW9uKCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBydWxlLmFjdGlvbigpO1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHJ1bGUgZnJvbSB0aGUgYXJyYXlcclxuICAgICAgICAgICAgdmlzaWJpbGl0eVJ1bGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgdG9vbCBpbiB0b29sc1RvU3RhZ2VzKVxyXG4gICAge1xyXG4gICAgICAgIGlmICghaGFzVG9vbCh0b29sKSAmJiBnZXRDcmFmdGVkUmVzb3VyY2UodG9vbCkgPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYWRkVG9vbCh0b29sKTtcclxuICAgICAgICAgICAgbWFrZVZpc2libGUodG9vbHNUb1N0YWdlc1t0b29sXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyeVxyXG4gICAge1xyXG4gICAgICAgIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKTtcclxuICAgICAgICAvLyB1cGRhdGVCb3VuY2VBbmltYXRpb24oKTtcclxuICAgICAgICB1cGRhdGVSYXRlcygpO1xyXG4gICAgICAgIGlmIChjdXJyZW50SG92ZXJCdXR0b24gIT09IG51bGwpIHVwZGF0ZVRvb2x0aXAoY3VycmVudEhvdmVyQnV0dG9uKTtcclxuICAgIH0gY2F0Y2ggKGVycilcclxuICAgIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG4vLyBNVVNJQyBNQU5BR0VSXHJcblxyXG5jb25zdCBhdWRpb0ZpbGVzID0gW1xyXG4gICAgJy4vYXVkaW8vc29uZzEud2F2JyxcclxuICAgICcuL2F1ZGlvL3NvbmcyLndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nMy53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzQud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc1LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nNi53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzcud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc4LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nOS53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzEwLndhdicsXHJcblxyXG5dO1xyXG5cclxubGV0IGN1cnJlbnRBdWRpbyA9IG51bGw7XHJcbmxldCB0aW1lb3V0SWQgPSBudWxsO1xyXG5cclxuZnVuY3Rpb24gcGxheVJhbmRvbVRyYWNrKClcclxue1xyXG4gICAgLy8gU3RvcCBjdXJyZW50IGF1ZGlvIGlmIHBsYXlpbmdcclxuICAgIGlmIChjdXJyZW50QXVkaW8pXHJcbiAgICB7XHJcbiAgICAgICAgY3VycmVudEF1ZGlvLnBhdXNlKCk7XHJcbiAgICAgICAgY3VycmVudEF1ZGlvLmN1cnJlbnRUaW1lID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZWxlY3QgYSByYW5kb20gdHJhY2tcclxuICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXVkaW9GaWxlcy5sZW5ndGgpO1xyXG4gICAgY3VycmVudEF1ZGlvID0gbmV3IEF1ZGlvKGF1ZGlvRmlsZXNbcmFuZG9tSW5kZXhdKTtcclxuICAgIGN1cnJlbnRBdWRpby52b2x1bWUgPSBnZXRNdXNpY1ZvbHVtZSgpO1xyXG4gICAgLy8gUGxheSB0aGUgc2VsZWN0ZWQgdHJhY2tcclxuICAgIGN1cnJlbnRBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgLy8gU2NoZWR1bGUgdGhlIG5leHQgdHJhY2tcclxuICAgIHNjaGVkdWxlTmV4dFRyYWNrKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNjaGVkdWxlTmV4dFRyYWNrKClcclxue1xyXG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIHRpbWVvdXRcclxuICAgIGlmICh0aW1lb3V0SWQpXHJcbiAgICB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gV2hlbiB0aGUgY3VycmVudCB0cmFjayBlbmRzLCB3YWl0IGZvciB1cCB0byAzMCBzZWNvbmRzIGJlZm9yZSBwbGF5aW5nIHRoZSBuZXh0XHJcbiAgICBjb25zdCBzaWxlbmNlRHVyYXRpb24gPSBNYXRoLnJhbmRvbSgpICogMzAwMDAgKyA1MDAwOyAvLyBSYW5kb20gc2lsZW5jZSBkdXJhdGlvbiA1IC0gMzUgc2Vjb25kc1xyXG4gICAgY3VycmVudEF1ZGlvLm9uZW5kZWQgPSAoKSA9PlxyXG4gICAge1xyXG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQocGxheVJhbmRvbVRyYWNrLCBzaWxlbmNlRHVyYXRpb24pO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyogSE9US0VZUyAqL1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KVxyXG57XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSlcclxuICAgIHtcclxuICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgc2hvd1RhYigncHJvZHVjdGlvblRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJykpIHNob3dUYWIoJ2V4cGVyaW1lbnRUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnMyc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpKSBzaG93VGFiKCdwb25kZXJUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNCc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnam9icy10YWInKSkgc2hvd1RhYignam9ic1RhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc1JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpKSBzaG93VGFiKCdza2lsbHNUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncGVya3NUYWInKSkgc2hvd1RhYigncGVya3NUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgLy8gY2FzZSAnNyc6XHJcbiAgICAgICAgLy8gICAgIGlmIChwYXNzZWRTdGFnZSgnZmFjdG9yeVRhYicpKSBzaG93VGFiKCdmYWN0b3J5VGFiJyk7XHJcbiAgICAgICAgLy8gICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzcnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ2NvbWJhdFRhYicpKSBzaG93VGFiKCdjb21iYXRUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50VGFiKCkgPT09ICdjb21iYXRUYWInKSBzd2l0Y2hTdGFuY2UoJ2FnZ3Jlc3NpdmUnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYic6XHJcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50VGFiKCkgPT09ICdjb21iYXRUYWInKSBzd2l0Y2hTdGFuY2UoJ2JhbGFuY2VkJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgICAgICBpZiAoZ2V0Q3VycmVudFRhYigpID09PSAnY29tYmF0VGFiJykgc3dpdGNoU3RhbmNlKCdjYXJlZnVsJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2YnOlxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50VGFiKCkgPT09ICdjb21iYXRUYWInICYmICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnRDb21iYXQnKS5kaXNhYmxlZCkgY29tYmF0KCk7XHJcbiAgICAgICAgICAgIGVsc2UgdG9nZ2xlUmVzb3VyY2UoJ2Zpc2gnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICAgIHRvZ2dsZVJlc291cmNlKCdzdGlja3MnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncm9ja3MnKSkgdG9nZ2xlUmVzb3VyY2UoJ3JvY2tzJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3ZpbmVzJykpIHRvZ2dsZVJlc291cmNlKCd2aW5lcycpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd3JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCd3b29kJykpIHRvZ2dsZVJlc291cmNlKCd3b29kJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ28nOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ29yZScpKSB0b2dnbGVSZXNvdXJjZSgnb3JlJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3AnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSkgdG9nZ2xlUmVzb3VyY2UoJ3BvbmRlcicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdFc2NhcGUnOlxyXG4gICAgICAgICAgICB0b2dnbGVPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJyAnOiAvLyBTcGFjZSBrZXlcclxuICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gRG9uJ3Qgc2Nyb2xsIGRvd25cclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdjbG9uZScpKSBpbmNyZWFzZUNsb25lQnlPbmUoZXZlbnQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuLyogREFSSyBNT0RFICovXHJcbi8vIGNvbnN0IGRhcmtNb2RlVG9nZ2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXJrTW9kZVRvZ2dsZVwiKTtcclxuY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyay1tb2RlJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuLy8gZGFya01vZGVUb2dnbGUuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyaycpO1xyXG5sZXQgaXNEYXJrID0gdHJ1ZTtcclxuXHJcblxyXG4vKiBDVVRTQ0VORVMgKi9cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBlYXRGaXNoKClcclxue1xyXG4gICAgaWYgKCFnZXRBdGVGaXNoKCkgJiYgZ2V0TWF0ZXJpYWwoJ2Zpc2gnLCByZXNvdXJjZXMpID49IDEpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gZWF0IGEgZmlzaCBhbmQgYmxhY2tvdXRcclxuICAgICAgICBjb25zdCBmaXNoQXVkaW8gPSBuZXcgQXVkaW8oJy4vYXVkaW8vZmlzaC53YXYnKTtcclxuICAgICAgICBmaXNoQXVkaW8udm9sdW1lID0gZ2V0U2Z4Vm9sdW1lKCk7XHJcbiAgICAgICAgZmlzaEF1ZGlvLnBsYXkoKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnZmlzaCcsIC0xKTtcclxuICAgICAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gc3RhcnQgdGhlIHNlcXVlbmNlXHJcbiAgICAgICAgb3ZlcmxheVRleHQudGV4dENvbnRlbnQgPSBcIlRoYXQgZmlzaCBkaWRuJ3QgdGFzdGUgdG9vIGdvb2QsIGhvcGVmdWxseSB5b3Ugd29uJ3QgbmVlZCB0byBwaWxvdCBhbnkgYWlycGxhbmVzLiBXaG8ncyB0aGF0IHN0YW5kaW5nIHRoZXJlP1wiO1xyXG4gICAgICAgIGZhZGVUb0JsYWNrKCk7XHJcbiAgICAgICAgLy8gSGlkZSBmaXNoIGJ1dHRvblxyXG4gICAgICAgIHNldEF0ZUZpc2godHJ1ZSk7XHJcbiAgICAgICAgY29uc3QgZmlzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWF0RmlzaFwiKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNoYW5nZU1lc3NhZ2UoXCJZb3UgYXJlIHdpdGggeW91cnNlbGYgaW4gYSBmb3Jlc3QuXCIsICd3aXRoIHlvdXJzZWxmJywgJ1lvdSBmZWVsIHBlY2tpc2ggZm9yIHNvbWUgc2VhZm9vZC4nKTtcclxuICAgICAgICAgICAgaW5jcmVhc2VNYXgoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAxKTtcclxuICAgICAgICB9LCAxMDAwKTsgLy8gZGVsYXkgb2YgMXNcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhZGVUb0JsYWNrKClcclxue1xyXG5cclxuICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgIG92ZXJsYXkuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+XHJcbiAgICB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG92ZXJsYXlUZXh0LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICB9LCAyMDAwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+XHJcbiAgICB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG92ZXJsYXlCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgb3ZlcmxheUJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgfSwgNTAwMCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVPdmVybGF5KClcclxue1xyXG4gICAgLy8gLy9jb25zb2xlLmxvZygnaGlkaW5nIG92ZXJsYXknKTtcclxuICAgIC8vIGNvbnNvbGUudHJhY2UoKTtcclxuICAgIG92ZXJsYXlUZXh0LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcblxyXG4gICAgb3ZlcmxheUJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG5cclxuICAgIG92ZXJsYXkuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgIHNldFRpbWVvdXQoKCkgPT5cclxuICAgIHtcclxuICAgICAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9LCAxMDAwKTtcclxuXHJcbiAgICBjb25zdCBpc2VrYWlCdXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lzZWthaUJ1dHRvbnMnKTtcclxuICAgIC8vIGlzZWthaUJ1dHRvbnMuY2hpbGROb2Rlcy5mb3JFYWNoKGNoaWxkID0+IGlzZWthaUJ1dHRvbnMucmVtb3ZlQ2hpbGQoY2hpbGQpKTtcclxuICAgIGlzZWthaUJ1dHRvbnMuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAvLyBsb2NhdGlvbi5yZWxvYWQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbmF2aWdhdGVUbyh1cmwpXHJcbntcclxuICAgIC8vIFRyaWdnZXIgdGhlIG92ZXJsYXkgdG8gZmFkZSBpblxyXG4gICAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS10cmFuc2l0aW9uLW92ZXJsYXknKTtcclxuICAgIG92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnZmFkZS1pbicpO1xyXG5cclxuICAgIC8vIFdhaXQgZm9yIHRoZSBmYWRlIGluIHRvIGNvbXBsZXRlIGJlZm9yZSBjaGFuZ2luZyB0aGUgcGFnZVxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKVxyXG4gICAge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gICAgfSwgMzAwKTsgLy8gVGhpcyBkdXJhdGlvbiBzaG91bGQgbWF0Y2ggdGhlIENTUyBvcGFjaXR5IHRyYW5zaXRpb25cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TWVzc2FnZSgpXHJcbntcclxuICAgIHJldHVybiBtZXNzYWdlRWxlbWVudDtcclxufVxyXG5cclxuXHJcbi8qIEdBTUUgTE9PUCAqL1xyXG5cclxuXHJcbmxldCBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gNTA7XHJcbmxldCBsYXN0X3RpbWUgPSBudWxsO1xyXG5sZXQgdG90YWxfdGltZSA9IDA7XHJcbmxldCBhY2N1bXVsYXRlZF9sYWcgPSAwO1xyXG5jb25zdCBmaWRlbGl0eSA9IDEwO1xyXG5cclxuZnVuY3Rpb24gbG9vcChjdXJyZW50X3RpbWUpXHJcbntcclxuICAgIGlmIChsYXN0X3RpbWUgPT09IG51bGwpIGxhc3RfdGltZSA9IGN1cnJlbnRfdGltZTtcclxuXHJcbiAgICBjb25zdCBkZWx0YV90aW1lID0gY3VycmVudF90aW1lIC0gbGFzdF90aW1lO1xyXG5cclxuICAgIHRvdGFsX3RpbWUgKz0gZGVsdGFfdGltZTtcclxuICAgIGFjY3VtdWxhdGVkX2xhZyArPSBkZWx0YV90aW1lO1xyXG5cclxuICAgIGxhc3RfdGltZSA9IGN1cnJlbnRfdGltZTtcclxuXHJcbiAgICAvLyBDYXRjaCB1cCBhbGwgdGhlIG1pc3NlZCB0aWNrc1xyXG4gICAgbGV0IG5vcm1hbFJhdGUgPSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lO1xyXG5cclxuICAgIC8vIHNpbXVsYXRlIHdpdGggbGVzcyBmaWRlbGl0eSB0byBtYWtlIHVwIHRpbWVcclxuICAgIGlmIChhY2N1bXVsYXRlZF9sYWcgPj0gZmlkZWxpdHkgKiBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKVxyXG4gICAge1xyXG4gICAgICAgIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgPSBhY2N1bXVsYXRlZF9sYWcgLyBmaWRlbGl0eTtcclxuICAgIH1cclxuICAgIHdoaWxlIChhY2N1bXVsYXRlZF9sYWcgPj0gbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSlcclxuICAgIHtcclxuXHJcbiAgICAgICAgYWNjdW11bGF0ZWRfbGFnIC09IG1pbGxpc2Vjb25kc19wZXJfZnJhbWU7XHJcbiAgICAgICAgdXBkYXRlKG1pbGxpc2Vjb25kc19wZXJfZnJhbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgPSBub3JtYWxSYXRlO1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG59XHJcblxyXG5cclxubGV0IHRpbWVfc2luY2VfbGFzdF9zYXZlID0gMDtcclxubGV0IHRpbWVfc2luY2VfbWFudWZhdHVyZSA9IDA7XHJcbmxldCB0aW1lX3NpbmNlX3JlbmRlciA9IDA7XHJcbmNvbnN0IHNhdmVfcmF0ZSA9IDEwXzAwMDtcclxuY29uc3QgbWFudWZhY3R1cmVfcmF0ZSA9IDFfMDAwO1xyXG5jb25zdCByZW5kZXJfcmF0ZSA9IDFfMDAwO1xyXG4vLyB0aGUgbWFpbiBmdW5jdGlvblxyXG4vLyB2ZXJ5IGxhZ2d5XHJcbmZ1bmN0aW9uIHVwZGF0ZShkZWx0YV90aW1lKVxyXG57XHJcblxyXG4gICAgLy8gR28gdGhyb3VnaCB1bmlxdWUgcmVzb3VyY2VzXHJcbiAgICBBcnJheS5mcm9tKGFsbE1hdGVyaWFscykuZm9yRWFjaCgoa2V5KSA9PlxyXG4gICAge1xyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoa2V5LCBnZXRSYXRlKGtleSkgKiBkZWx0YV90aW1lIC8gMTAwMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMoKTtcclxuICAgIHRpbWVfc2luY2VfcmVuZGVyICs9IGRlbHRhX3RpbWU7XHJcbiAgICBpZiAocmVuZGVyX3JhdGUgPCB0aW1lX3NpbmNlX3JlbmRlcilcclxuICAgIHtcclxuICAgICAgICByZW5kZXIoKTtcclxuICAgICAgICB0aW1lX3NpbmNlX3JlbmRlciA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgZ2FtZSBldmVyeSAxMCBzZWNvbmRzXHJcbiAgICB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSArPSBkZWx0YV90aW1lO1xyXG4gICAgdGltZV9zaW5jZV9tYW51ZmF0dXJlICs9IGRlbHRhX3RpbWU7XHJcbiAgICB0b3RhbF90aW1lICs9IGRlbHRhX3RpbWU7XHJcbiAgICBpZiAodGltZV9zaW5jZV9sYXN0X3NhdmUgPj0gc2F2ZV9yYXRlKVxyXG4gICAge1xyXG4gICAgICAgIHNhdmVHYW1lKCk7XHJcbiAgICAgICAgdGltZV9zaW5jZV9sYXN0X3NhdmUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1hbnVmYWN0dXJlIGV2ZXJ5IHNlY29uZFxyXG4gICAgaWYgKHBhc3NlZFN0YWdlKCdmYWN0b3J5VGFiJykgJiYgdGltZV9zaW5jZV9tYW51ZmF0dXJlID49IG1hbnVmYWN0dXJlX3JhdGUpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnbWFudWZhY3R1cmluZyBhdHRlbXB0JywgdGltZV9zaW5jZV9tYW51ZmF0dXJlLCBtYW51ZmFjdHVyZV9yYXRlKTtcclxuICAgICAgICB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPSAwO1xyXG4gICAgICAgIGF0dGVtcHRNYW51ZmFjdHVyZSgpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLy8gd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgLy8gV2UgdXNlIGEgZnVuY3Rpb24gcmF0aGVyIHRoYW4gc2hvcnRoYW5kIGJlY2F1c2Ugc2F2ZWdhbWUgcmV0dXJucyBhIHN0cmluZ1xyXG4vLyAgICAgaWYgKCFjdXJyZW50bHlEZWxldGluZykgc2F2ZUdhbWUoKTtcclxuLy8gfTtcclxuXHJcbmZ1bmN0aW9uIGFkZFJlc291cmNlKClcclxue1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZU5hbWVcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBhY3RpdmVUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZUFjdGl2ZVRleHRcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBkZWZhdWx0VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VEZWZhdWx0VGV4dFwiKS52YWx1ZTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5UZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5UZXh0XCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYnRuVG9vbHRpcERlc2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRvb2x0aXBEZXNjXCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYnRuVG9vbHRpcENvc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRvb2x0aXBDb3N0XCIpLnZhbHVlO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHZhciBuZXdSZXNvdXJjZSA9IG15UmVzb3VyY2VzW3Jlc291cmNlTmFtZV0gPSB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgaWQ6IFwiZ2F0aGVyXCIgKyByZXNvdXJjZU5hbWUsXHJcbiAgICAgICAgaXNHZXR0aW5nOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVUZXh0OiBhY3RpdmVUZXh0LFxyXG4gICAgICAgIGRlZmF1bHRUZXh0OiBkZWZhdWx0VGV4dCxcclxuICAgICAgICAvLyAuLi4gQWRkIG90aGVyIGF0dHJpYnV0ZXMgYXMgZmV0Y2hlZCBmcm9tIGZvcm0gLi4uXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgYnV0dG9uIG9iamVjdFxyXG4gICAgdmFyIG5ld0J1dHRvbiA9IGJ1dHRvbnNbXCJnYXRoZXJcIiArIHJlc291cmNlTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlc291cmNlTmFtZS5zbGljZSgxKV0gPSB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwICcsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogYnRuVGV4dCxcclxuICAgICAgICB0b29sdGlwRGVzYzogYnRuVG9vbHRpcERlc2MsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6IGJ0blRvb2x0aXBDb3N0LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlIC8vIEJ5IGRlZmF1bHQsIG1ha2luZyB0aGlzIGFsd2F5cyB2aXNpYmxlLiBNb2RpZnkgYXMgbmVlZGVkLlxyXG4gICAgfTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKG5ld1Jlc291cmNlKTtcclxuICAgIC8vY29uc29sZS5sb2cobmV3QnV0dG9uKTtcclxuXHJcbiAgICAvLyBIaWRlIGZvcm0gb25jZSByZXNvdXJjZSBpcyBhZGRlZFxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZUZvcm1cIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cclxuICAgIC8vIE9wdGlvbmFsbHksIHlvdSBjYW4gdXBkYXRlIHRoZSBVSSB0byBzaG93IHRoZSBhZGRlZCByZXNvdXJjZVxyXG4gICAgLy8gdXBkYXRlVUkocmVzb3VyY2VOYW1lKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVUkocmVzb3VyY2VOYW1lKVxyXG57XHJcbiAgICAvLyBIZXJlIHlvdSBjYW4gY3JlYXRlIGEgbmV3IERPTSBlbGVtZW50IHRvIGRpc3BsYXkgdGhlIGFkZGVkIHJlc291cmNlXHJcbiAgICBjb25zdCByZXNvdXJjZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICByZXNvdXJjZURpdi5pbm5lckhUTUwgPSBgJHtyZXNvdXJjZU5hbWV9OiAke3Jlc291cmNlc1tyZXNvdXJjZU5hbWVdLnZhbHVlfWA7XHJcblxyXG4gICAgLy8gQXBwZW5kIHRvIHNvbWUgY29udGFpbmVyXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlc291cmNlRGl2KTtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiB0b2dnbGVPcHRpb25zKClcclxue1xyXG4gICAgcGxheVNvdW5kKCcuL2F1ZGlvL29wdGlvbnMud2F2JywgZmFsc2UpO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnNNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wdGlvbnNNZW51Jyk7XHJcbiAgICBvcHRpb25zTWVudS5zdHlsZS5kaXNwbGF5ID0gb3B0aW9uc01lbnUuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJ2Jsb2NrJyA6ICdub25lJztcclxufVxyXG5cclxuXHJcbmxldCBjdXJyZW50bHlEZWxldGluZyA9IGZhbHNlO1xyXG5cclxuLy8gSW1wb3J0IHRoZSBmdW5jdGlvbnMgeW91IG5lZWQgZnJvbSB0aGUgU0RLcyB5b3UgbmVlZFxyXG4vLyBpbXBvcnQgeyBpbml0aWFsaXplQXBwIH0gZnJvbSBcImZpcmViYXNlL2FwcFwiO1xyXG4vLyBpbXBvcnQgeyBnZXRBbmFseXRpY3MgfSBmcm9tIFwiZmlyZWJhc2UvYW5hbHl0aWNzXCI7XHJcbi8vIFRPRE86IEFkZCBTREtzIGZvciBGaXJlYmFzZSBwcm9kdWN0cyB0aGF0IHlvdSB3YW50IHRvIHVzZVxyXG4vLyBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy93ZWIvc2V0dXAjYXZhaWxhYmxlLWxpYnJhcmllc1xyXG5cclxuXHJcbi8vIEFmdGVyIGFsbCBoYXMgYmVlbiBsb2FkZWRcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT5cclxue1xyXG5cclxuXHJcbiAgICAvLyBZb3VyIHdlYiBhcHAncyBGaXJlYmFzZSBjb25maWd1cmF0aW9uXHJcbiAgICAvLyBGb3IgRmlyZWJhc2UgSlMgU0RLIHY3LjIwLjAgYW5kIGxhdGVyLCBtZWFzdXJlbWVudElkIGlzIG9wdGlvbmFsXHJcbiAgICBjb25zdCBmaXJlYmFzZUNvbmZpZyA9IHtcclxuICAgICAgICBhcGlLZXk6IFwiQUl6YVN5Q290c1pVZnBVM2RCU0FSaHZpdjNvS3RsbkV5djdlX2drXCIsXHJcbiAgICAgICAgYXV0aERvbWFpbjogXCJjbG9uZS1leHBlcmltZW50LmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgICAgIHByb2plY3RJZDogXCJjbG9uZS1leHBlcmltZW50XCIsXHJcbiAgICAgICAgc3RvcmFnZUJ1Y2tldDogXCJjbG9uZS1leHBlcmltZW50LmFwcHNwb3QuY29tXCIsXHJcbiAgICAgICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiMTAyODc2ODQ0MTY3NFwiLFxyXG4gICAgICAgIGFwcElkOiBcIjE6MTAyODc2ODQ0MTY3NDp3ZWI6MmJmMDkwNmU1YTk0ZjViMjQwMGRiM1wiLFxyXG4gICAgICAgIG1lYXN1cmVtZW50SWQ6IFwiRy1NNDVCSkxYSkZSXCJcclxuICAgIH07XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBGaXJlYmFzZVxyXG4gICAgY29uc3QgYXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7XHJcbiAgICBjb25zdCBhbmFseXRpY3MgPSBnZXRBbmFseXRpY3MoYXBwKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zKHBvbmRlcnMpO1xyXG4gICAgLy8gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpO1xyXG5cclxuICAgIGxvYWRHYW1lKCk7IC8vIEdldCBhbGwgbmV3IG5ldyBidWlsZGluZ3MgYW5kIGFkZCB0aGVtIHdpdGggYnV0dG9uc1xyXG4gICAgZ2VuZXJhdGVCdXR0b25zKCk7IC8vIENhbGwgdGhpcyBvbmNlIG9uIHBhZ2UgbG9hZCBvciBnYW1lIGluaXRpYWxpemF0aW9uXHJcbiAgICBtYWtlRmFjdG9yeUJ1dHRvbnMoKTtcclxuICAgIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKTtcclxuXHJcbiAgICBpbml0aWFsaXplUmVzb3VyY2VUYWdzKCk7XHJcblxyXG4gICAgbG9hZEdhbWUoKTsgLy8gQWN0dWFsbHkgbG9hZCB0aGUgZ2FtZVxyXG5cclxuICAgIGNsZWFyU2lkZWJhcigpO1xyXG4gICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncyhpc1BvbmRlcmVkKCdvcmdhbml6YXRpb24nKSk7IC8vIGNoZWNrIGlmIHdlIG5lZWQgZ3JvdXBzXHJcblxyXG5cclxuICAgIHVwZGF0ZVNpZGViYXIoKTtcclxuXHJcbiAgICBzaG93VGFiKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICByZXF1aXJlKCcuL3RyYWRlJykuZ2VuZXJhdGVUcmFkZVRhYmxlKHJlc291cmNlcyk7XHJcblxyXG5cclxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgMzA7ICsraSlcclxuICAgIC8vICAgICAvL2NvbnNvbGUubG9nKGdlbmVyYXRlUmFuZG9tQnVpbGRpbmcoKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSByZXNvdXJjZSBrZXkgZnJvbSBhbiBJRC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWQgb2YgYSByZXNvdXJjZSBlLmcuIGdhdGhlckdhbWVcclxuICAgICAqIEByZXR1cm5zIFJlc291cmNlIGtleSBlLmcuIGdhbWVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0UktleUZyb21JRChpZClcclxuICAgIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtyLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyAvL2NvbnNvbGUubG9nKHJlc291cmNlc1tyXS5pZCwgaWQpO1xyXG4gICAgICAgICAgICBpZiAodmFsLmlkID09PSBpZCkgcmV0dXJuIHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnZXJyb3IgJyArIGlkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBjcmFmdGVkIHJlc291cmNlIGtleSBmcm9tIGFuIElELlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiBhIHJlc291cmNlIGUuZy4gY3JhZnRIYW5kbGVcclxuICAgICAqIEByZXR1cm5zIFJlc291cmNlIGtleSBlLmcuIGhhbmRsZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRDUktleUZyb21JRChpZClcclxuICAgIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtyLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNyYWZ0ZWRSZXNvdXJjZXMpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyLCB2YWwsIGlkKTtcclxuICAgICAgICAgICAgaWYgKHZhbC5pZCA9PT0gaWQpIHJldHVybiByO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJ2Vycm9yICcgKyBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZW5lcmFsIGRvY3VtZW50IGNsaWNrIGhhbmRsZXJcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+XHJcbiAgICB7XHJcbiAgICAgICAgLy8gU3RhcnQgdGhlIG11c2ljIHBsYXliYWNrXHJcbiAgICAgICAgLy8gV2UgbmVlZCB0byB3YWl0IGZvciBhIGNsaWNrIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vYmxvZy9hdXRvcGxheS9cclxuICAgICAgICBpZiAoY3VycmVudEF1ZGlvID09PSBudWxsKSBwbGF5UmFuZG9tVHJhY2soKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiYnV0dG9uXCIpKVxyXG4gICAgICAgIHtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBvbmUgb2Ygb3VyIGJ1dHRvbnMgd2FzIGNsaWNrZWRcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgLy8gQlVJTERJTkcgQlVUVE9OU1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJykgJiYgYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpICE9PSAndW5kZWZpbmVkJyAmJiBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdwdXJjaGFzYWJsZScpKVxyXG4gICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgdmFyIGJ1aWxkaW5nID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WTtcclxuXHJcbiAgICAgICAgICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vYnVpbGRpbmcud2F2JywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nU3RyaW5nID0gY2FwaXRhbGl6ZUZpcnN0KGJ1aWxkaW5nKS5zcGxpdCgnXycpLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSBidXlNYXhCdWlsZGluZ3MoYnVpbGRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgKyR7Y291bnR9ICR7YnVpbGRpbmdTdHJpbmd9c2AsICdhcXVhJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidXlCdWlsZGluZyhidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArMSAke2J1aWxkaW5nU3RyaW5nfWAsICdhcXVhJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFBPTkRFUiBCVVRUT05TXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndW5sb2NrJykpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVubG9ja0F0dHIgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKTtcclxuICAgICAgICAgICAgICAgIC8vIC8vY29uc29sZS5sb2coJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHVubG9ja0F0dHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvbmRlcnNbdW5sb2NrQXR0cl0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhblVubG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpIDwgcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0W21hdGVyaWFsXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLy9jb25zb2xlLmxvZyhcIkNhbm5vdCB1bmxvY2sgXCIgKyB1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhblVubG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbmxvY2spXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBwb25kZXJzW3VubG9ja0F0dHJdLmNvc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwobWF0ZXJpYWwsIC1wb25kZXJzW3VubG9ja0F0dHJdLmNvc3RbbWF0ZXJpYWxdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb25kZXJzW3VubG9ja0F0dHJdLmlzUG9uZGVyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlVmlzaWJsZSh1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhpcyBidXR0b24gZGlzYXBwZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vcG9uZGVyLndhdicsIGZhbHNlKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAvL2NvbnNvbGUubG9nKFwiVW5sb2NraW5nIFwiICsgdW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggdGhlIHBhZ2Ugd2hlbiBidXlpbmcgb3JnYW5pemVkIHN0b3JhZ2UgdG8gZ2VuZXJhdGUgdGhlIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5sb2NrQXR0ciA9PT0gJ29yZ2FuaXphdGlvbicpIHsgc2F2ZUdhbWUoKTsgbG9jYXRpb24ucmVsb2FkKCk7IH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmxvY2tBdHRyLnN0YXJ0c1dpdGgoJ3BvbmRlckVmZmVjdGl2ZUJ1aWxkaW5ncycpKSByZWNhbGN1bGF0ZUFsbEJ1aWxkaW5nQ29zdHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE9USEVSIEJVVFRPTlNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyAvL2NvbnNvbGUubG9nKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmlkLnNsaWNlKDAsIDYpID09PSBcImdhdGhlclwiKSB0b2dnbGVSZXNvdXJjZShnZXRSS2V5RnJvbUlEKGJ1dHRvbi5pZCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZC5zbGljZSgwLCA1KSA9PT0gJ2NyYWZ0JylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwbGF5U291bmQoJy4vYXVkaW8vY3JhZnQud2F2JywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNyID0gZ2V0Q1JLZXlGcm9tSUQoYnV0dG9uLmlkKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5DcmFmdChjcikpIHRyaWdnZXJGbG9hdFVwVGV4dChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZLCBgKyR7Y3J9YCwgJ2FxdWEnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIGNyYWZ0QWxsUmVzb3VyY2VzKGNyKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGNyYWZ0UmVzb3VyY2UoY3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdzYXZlQnV0dG9uJykgeyBwbGF5U291bmQoJy4vYXVkaW8vb3B0aW9ucy53YXYnKTsgc2F2ZUdhbWUoKTsgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2VhdEZpc2gnKSBlYXRGaXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnb3ZlcmxheS1idXR0b24nKSBoaWRlT3ZlcmxheSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2RlbGV0ZVNhdmVCdXR0b24nICYmIGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHlvdXIgc2F2ZSBkYXRhPyBUaGlzIHdpbGwgcmVzZXQgYWxsIHlvdXIgcHJvZ3Jlc3MuXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUdhbWUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2NsZWFySm9iQXNzaWdubWVudHMnKSBjbGVhckpvYkFzc2lnbm1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdkYXJrTW9kZVRvZ2dsZScpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrLW1vZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgZGFya01vZGVUb2dnbGUuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyaycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRGFyayA9ICFpc0Rhcms7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGRhcmtNb2RlVG9nZ2xlLnRleHRDb250ZW50ID0gaXNEYXJrID8gXCJMaWdodCBNb2RlXCIgOiBcIkRhcmsgTW9kZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdwcmVzdGlnZScpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNla2FpKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdzdGFydENvbWJhdCcpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tYmF0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3RpZXJPbmVCdXR0b24nKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgbGV0IHBlcmsgPSBidXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBYmlsaXR5KHBlcmspO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiI2Fsb25lXCIpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW5jcmVhc2VDbG9uZUJ5T25lKGV2ZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlY2FsY3VsYXRlIGFsbCB0aGUgaW5jcmVhc2VzIG9mIGVhY2ggbWF0ZXJpYWwgYW5kIHNhdmUgdGhlbSB0byBnbG9iYWxSYXRlc1xyXG4gICAgICAgIC8vIHVwZGF0ZVJhdGVzKCk7XHJcbiAgICAgICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlIGZhY3RvcnkgYnV0dG9ucyBvZiBidXkgbmV3IGZhY3RvcnkgYW5kIGJ1eSBidWxrIHVwZ3JhZGUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG1ha2VGYWN0b3J5QnV0dG9ucygpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yeUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmFjdG9yeUJ1dHRvbnMnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYnV5RmFjdG9yeUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uaWQgPSAnYnV5RmFjdG9yeUJ1dHRvbic7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi50ZXh0Q29udGVudCA9ICdCdXkgTmV3IEZhY3RvcnknO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsICdUaGUgZmFjdG9yeSBtdXN0IGdyb3chJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgJzUwIHNpbHZlcicpO1xyXG4gICAgICAgIGZhY3RvcnlCdXR0b25zLmFwcGVuZENoaWxkKGJ1eUZhY3RvcnlCdXR0b24pO1xyXG5cclxuICAgICAgICAvLyBCdXkgbmV3IGZhY3RvcnkgYnV0dG9uXHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdidXlpbmcgZmFjdG9yeScpO1xyXG4gICAgICAgICAgICBidXlGYWN0b3J5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IHVwZ3JhZGVCdWxrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgLy8gdXBncmFkZUJ1bGtCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIC8vIHVwZ3JhZGVCdWxrQnV0dG9uLmlkID0gJ3VwZ3JhZGVCdWxrQnV0dG9uJztcclxuICAgICAgICAvLyB1cGdyYWRlQnVsa0J1dHRvbi50ZXh0Q29udGVudCA9ICdVcGdyYWRlIEJ1bGsnO1xyXG4gICAgICAgIC8vIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCAnQ3JhZnQgbW9yZSByZXNvdXJjZXMgcGVyIHNlY29uZCcpO1xyXG4gICAgICAgIC8vIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCAnMiDihpIgNDogMzAgc2lsdmVyJyk7XHJcbiAgICAgICAgLy8gZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQodXBncmFkZUJ1bGtCdXR0b24pO1xyXG5cclxuICAgICAgICAvLyAvLyBVcGdyYWRlIGJ1bGsgYnV0dG9uXHJcbiAgICAgICAgLy8gdXBncmFkZUJ1bGtCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAvLyAgICAgLy9jb25zb2xlLmxvZygndXBncmFkaW5nIGJ1bGsnKTtcclxuICAgICAgICAvLyAgICAgdXBncmFkZUJ1bGsoKTtcclxuICAgICAgICAvLyB9KTtcclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBPcHRpb25zIG1lbnVcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcHRpb25zQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVPcHRpb25zKTtcclxuXHJcblxyXG4gICAgLy8gQWRqdXN0IG11c2ljIHZvbHVtZVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ211c2ljVm9sdW1lJykudmFsdWUgPSBnZXRNdXNpY1ZvbHVtZSgpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ211c2ljVm9sdW1lJykuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoKVxyXG4gICAge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBzZXRNdXNpY1ZvbHVtZSh0aGlzLnZhbHVlKTtcclxuICAgICAgICBjdXJyZW50QXVkaW8udm9sdW1lID0gZ2V0TXVzaWNWb2x1bWUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkanVzdCBzZnggdm9sdW1lXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2Z4Vm9sdW1lJykudmFsdWUgPSBnZXRTZnhWb2x1bWUoKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZnhWb2x1bWUnKS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHNldFNmeFZvbHVtZSh0aGlzLnZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRvZ2dsZSBwZXRhbHNcclxuICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJwZXRhbHNcIl0nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT5cclxuICAgIC8vIHtcclxuICAgIC8vICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHNldFBldGFscygxMCk7XHJcbiAgICAvLyAgICAgZWxzZSBzZXRQZXRhbHMoMCk7XHJcbiAgICAvLyB9KTtcclxuXHJcblxyXG5cclxuICAgIC8vIFN0YXJ0IHRoZSBtYWluIGdhbWVwbGF5IGxvb3BcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcclxuXHJcbiAgICAvLyBTdGFydCB0aGUgcGV0YWwgcmVuZGVyaW5nIGxvb3BcclxuICAgIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGFydFBldGFsUmVuZGVyaW5nKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgd2hlbiBob3ZlcmluZyBvdmVyIGEgYnV0dG9uXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9vbHRpcCcpLmZvckVhY2goYnV0dG9uID0+XHJcbiAgICB7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdG9vbHRpcCBvbiBtb3VzZSBlbnRlclxyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGN1cnJlbnRIb3ZlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8vIFRPRE86IG1vdmUgdGhpcyBldmVudCBsaXN0ZW5lclxyXG4gICAgICAgIC8vIFVwZGF0ZSBvbiBvbmNsaWNrIGZvciBwdXJjaGFzZXNcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignb25jbGljaycsIGZ1bmN0aW9uICgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhpZGUgb24gbW91c2UgbGVhdmVcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgaGlkZVRvb2x0aXAoKTsgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDsgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGpvYnMgY291bnRlclxyXG4gICAgdXBkYXRlVG90YWwoKTtcclxuICAgIC8vIFVwZGF0ZSB0aGUgYm91bmNlIGFuaW1hdGlvbiBmb3IgYWxvbmVcclxuICAgIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG5cclxuXHJcbiAgICAvLyBTZXQgY2xvbmVzIHRvIG1heCB0byBiZSBuaWNlXHJcbiAgICBzZXRNYXRlcmlhbCgnY2xvbmVzJywgZ2V0TWF4KCdjbG9uZXMnKSk7XHJcblxyXG4gICAgLy8gY29uc3Qgc2ltdWxhdG9yID0gbmV3IEdhbWVTaW11bGF0b3IoKTtcclxuICAgIC8vIHNpbXVsYXRvci5ydW5TaW11bGF0aW9uKDEwXzAwMCk7IC8vIFJ1biB0aGUgc2ltdWxhdGlvbiBmb3IgMyBob3Vyc1xyXG5cclxufSk7XHJcblxyXG5cclxuZnVuY3Rpb24gaW5jcmVhc2VDbG9uZUJ5T25lKGV2ZW50KVxyXG57XHJcbiAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAxKTtcclxuICAgIGxldCB0ZXh0ID0gJysxIENsb25lJztcclxuXHJcbiAgICAvLyBIYXJkY29kZWQgaW5zdGVhZCB0byBhdm9pZCBpbmNyZWFzZSBhZmZlY3RlZCBieSBwcm9kdWN0aXZpdHkgYm9udXNlc1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnKSA8IGdldE1heCgnY2xvbmVzJykpIHsgcmVzb3VyY2VzWydjbG9uZXMnXS52YWx1ZSArPSAxOyB9XHJcbiAgICBlbHNlIHRleHQgPSAnTWF4IENsb25lcyc7XHJcblxyXG4gICAgcGxheVNvdW5kKHRleHQgPT09ICcrMSBDbG9uZScgPyAnLi9hdWRpby9jbG9uZS53YXYnIDogJy4vYXVkaW8vZmFpbGNsb25lLndhdicpO1xyXG5cclxuXHJcbiAgICBjb25zdCB4ID0gZXZlbnQucGFnZVggfHwgMTA7IC8vIFggY29vcmRpbmF0ZSBvZiB0aGUgbW91c2VcclxuICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWSB8fCAxMjA7IC8vIFkgY29vcmRpbmF0ZSBvZiB0aGUgbW91c2VcclxuICAgIGNvbnN0IGNvbG9yID0gdGV4dCA9PT0gJysxIENsb25lJyA/ICdncmVlbicgOiAncmVkJztcclxuICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCB0ZXh0LCBjb2xvcik7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgdXBkYXRlRGlzcGxheVZhbHVlKCdjbG9uZXMnKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgbmV4dCBmaWJvbmFjY2kgbnVtYmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIEEgZmlib25hY2NpIG51bWJlclxyXG4gKiBAcmV0dXJucyBUaGUgZmlib25hY2NpIG51bWJlciBhZnRlciBuXHJcbiAqL1xyXG5mdW5jdGlvbiBuZXh0Rmlib25hY2NpKG4pXHJcbntcclxuICAgIGxldCBhID0gbiAqICgxICsgTWF0aC5zcXJ0KDUpKSAvIDIuMDtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKGEpO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBwcmV2aW91cyBmaWJvbmFjY2kgbnVtYmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIEEgZmlib25hY2NpIG51bWJlclxyXG4gKiBAcmV0dXJucyBUaGUgZmlib25hY2NpIG51bWJlciBiZWZvcmUgblxyXG4gKi9cclxuZnVuY3Rpb24gcHJldkZpYm9uYWNjaShuKVxyXG57XHJcbiAgICBsZXQgYSA9IG4gLyAoKDEgKyBNYXRoLnNxcnQoNSkpIC8gMi4wKTtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKGEpO1xyXG59XHJcblxyXG5jb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuY29uc3Qgb3ZlcmxheVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS10ZXh0Jyk7XHJcbmNvbnN0IG92ZXJsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1idXR0b24nKTtcclxuY29uc3Qgb3ZlcmxheUJhY2tCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1iYWNrLWJ1dHRvbicpOyAvLyBHZXQgdGhlIFwiR28gQmFja1wiIGJ1dHRvblxyXG4vKipcclxuICogVGhlIGlzZWthaSBmdW5jdGlvbiwgY2FsbGVkIHVwb24gY2xpY2tpbmcgdGhlIFwiSXNla2FpXCIgYnV0dG9uXHJcbiAqIFxyXG4gKiBBbHNvIGhhbmRsZXMgcmVzZXR0aW5nIGFsbCByZXNvdXJjZXMsIGNyYWZ0ZWQgcmVzb3VyY2VzLCBwb25kZXJzLCBwZXJrcywgYnVpbGRpbmdzLCBhbmQgb3ZlcmFsbCBwcm9ncmVzcy5cclxuICovXHJcbmZ1bmN0aW9uIGlzZWthaSgpXHJcbntcclxuXHJcbiAgICAvLyBIYW5kbGUgdGhlIGlzZWthaSBpdHNlbGZcclxuICAgIG92ZXJsYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PlxyXG4gICAge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2lzZWthaSBidXR0b24gY2xpY2tlZCcpO1xyXG4gICAgICAgIGNvbnN0IGh1c2tzRHVlID0gZ2V0TWF0ZXJpYWwoJ2Nsb25lcycpICsgZ2V0TWF0ZXJpYWwoJ2h1c2tzJyk7XHJcblxyXG4gICAgICAgIC8vIFJlc2V0IGZ1bmN0aW9ucyB0byBiZSBleGVjdXRlZCB3aGVuIFwiQ29udGludWVcIiBpcyBjbGlja2VkXHJcbiAgICAgICAgcmVzZXRSZXNvdXJjZXMoKTtcclxuICAgICAgICByZXNldENyYWZ0ZWRSZXNvdXJjZXMoKTtcclxuICAgICAgICByZXNldFBvbmRlcnMoKTtcclxuICAgICAgICByZXNldFBlcmtzKCk7XHJcbiAgICAgICAgcmVzZXRCdWlsZGluZ3MoKTtcclxuICAgICAgICByZXNldEFsbEpvYnMoKTtcclxuICAgICAgICByZXNldFN0YWdlcygpO1xyXG5cclxuXHJcbiAgICAgICAgcGxheVNvdW5kKCcuL2F1ZGlvL2lzZWthaWNvbmZpcm0ud2F2JywgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBTZXQgbWF4IG9mIGFsbCByZXNvdXJjZXMgdG8gMTAwICh0aW55IGJvb3N0KVxyXG4gICAgICAgIGZvciAobGV0IFtyLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWwubWF4ID0gMTAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gR2l2ZSBodXNrcyBhZnRlcndhcmRzXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnaHVza3MnLCBodXNrc0R1ZSk7XHJcblxyXG5cclxuICAgICAgICAvLyBDbG9zZSB0aGUgb3ZlcmxheVxyXG4gICAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgbGV0IGxhc3RCdWlsZGluZyA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdCdWlsZGluZ3NDb3VudDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZG9tQnVpbGRpbmcgPSBnZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nKCk7XHJcbiAgICAgICAgICAgIGJ1aWxkaW5nc1tyYW5kb21CdWlsZGluZy5uYW1lLnNwbGl0KCcgJykuam9pbignXycpXSA9IHJhbmRvbUJ1aWxkaW5nO1xyXG4gICAgICAgICAgICBsYXN0QnVpbGRpbmcgPSByYW5kb21CdWlsZGluZztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hhbmdlTWVzc2FnZSgnWW91IGFyZSBpbiBhbm90aGVyIHdvcmxkLicsICdhbm90aGVyJywgYFlvdSBmZWVsIGEgbmVlZCB0byBhY3F1aXJlICR7T2JqZWN0LnZhbHVlcyhsYXN0QnVpbGRpbmcuY29zdCkuam9pbignLCcpfWApO1xyXG4gICAgICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MoZmFsc2UpO1xyXG4gICAgICAgIHNhdmVHYW1lKCk7XHJcbiAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBuZXdCdWlsZGluZ3NDb3VudCA9IDQ7XHJcbiAgICBvdmVybGF5QmFja0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+XHJcbiAgICB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnYmFjayBidXR0b24gY2xpY2tlZCcpO1xyXG4gICAgICAgIC8vIEp1c3QgY2xvc2UgdGhlIG92ZXJsYXkgd2l0aG91dCBleGVjdXRpbmcgcmVzZXQgZnVuY3Rpb25zXHJcbiAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaXNla2FpQXVkaW8gPSBuZXcgQXVkaW8oJy4vYXVkaW8vaXNla2FpLndhdicpO1xyXG4gICAgaXNla2FpQXVkaW8udm9sdW1lID0gZ2V0U2Z4Vm9sdW1lKCk7XHJcbiAgICBpc2VrYWlBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgLy8gQ29udmVydCBjbG9uZXMgdG8gaHVza3NcclxuICAgIGNvbnN0IG9sZEh1c2tWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdodXNrc0lzZWthaVZhbHVlJyk7XHJcbiAgICBsZXQgaHVza1ZhbHVlO1xyXG4gICAgaWYgKG9sZEh1c2tWYWx1ZSkgaHVza1ZhbHVlID0gb2xkSHVza1ZhbHVlO1xyXG4gICAgZWxzZSBodXNrVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICBodXNrVmFsdWUuaWQgPSAnaHVza3NJc2VrYWlWYWx1ZSc7XHJcbiAgICBodXNrVmFsdWUuaW5uZXJIVE1MID0gYEh1c2tzOiAgJHtnZXRNYXRlcmlhbCgnaHVza3MnKX0gPGJyPiBZb3Ugd2lsbCBnZXQgJHtnZXRNYXRlcmlhbCgnY2xvbmVzJyl9IEh1c2tzIHBvc3QtaXNla2FpLjxicj5Zb3Ugd2lsbCByZWNlaXZlICR7bmV3QnVpbGRpbmdzQ291bnR9IHJhbmRvbWx5IGdlbmVyYXRlZCBuZXcgYnVpbGRpbmdzLCB1bmlxdWUgdG8gdGhpcyBuZXcgd29ybGQuYDtcclxuXHJcbiAgICBodXNrVmFsdWUuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgIG92ZXJsYXkucHJlcGVuZChodXNrVmFsdWUpO1xyXG4gICAgLy8gT3ZlcmxheVxyXG4gICAgb3ZlcmxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnTWlkbmlnaHRCbHVlJztcclxuICAgIG92ZXJsYXlUZXh0LnRleHRDb250ZW50ID0gJ1lvdSBzdGVwIHRocm91Z2ggdG8gYW5vdGhlciB3b3JsZC4nO1xyXG5cclxuICAgIGZhZGVUb0JsYWNrKCk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PlxyXG4gICAge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvdmVybGF5QmFja0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH0sIDUwMDApO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByZXN0aWdlQnV0dG9ucygpXHJcbiAgICB7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpc2VrYWlCdXR0b25zJyk7XHJcbiAgICAgICAgbGV0IGkgPSAxO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHByZXN0aWdlKS5mb3JFYWNoKGtleSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGI+JHtwcmVzdGlnZVtrZXldLnRleHR9PC9iPjxicj5MZXZlbDogJHtwcmVzdGlnZVtrZXldLmxldmVsfTxicj5Db3N0OiAke3ByZXN0aWdlW2tleV0uY29zdH1gO1xyXG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIHByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBEZXNjJywgcHJlc3RpZ2Vba2V5XS50b29sdGlwRGVzYyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd0b29sdGlwJyk7IC8vIEFkZCBhIGNsYXNzIGZvciBzdHlsaW5nIGlmIG5lZWRlZFxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZ3JpZENvbHVtbiA9IChpICUgNCArIDEpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5ncmlkUm93ID0gTWF0aC5mbG9vcihpIC8gNCArIDEpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgLy8gT3B0aW9uYWw6IEFkZCBhbiBldmVudCBsaXN0ZW5lciBpZiB5b3Ugd2FudCB0byBoYW5kbGUgY2xpY2tzXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIFlvdSBjYW4gaW1wbGVtZW50IHdoYXQgaGFwcGVucyB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZFxyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgQnV0dG9uICR7a2V5fSB3YXMgY2xpY2tlZGApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdldE1hdGVyaWFsKCdodXNrcycpIDwgcHJlc3RpZ2Vba2V5XS5jb3N0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmxldmVsKys7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdodXNrcycsIC1wcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5jb3N0ID0gbmV4dEZpYm9uYWNjaShwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGI+JHtwcmVzdGlnZVtrZXldLnRleHR9PC9iPjxicj5MZXZlbDogJHtwcmVzdGlnZVtrZXldLmxldmVsfTxicj5Db3N0OiAke3ByZXN0aWdlW2tleV0uY29zdH1gO1xyXG4gICAgICAgICAgICAgICAgaHVza1ZhbHVlLnRleHRDb250ZW50ID0gJ0h1c2tzOiAnICsgZ2V0TWF0ZXJpYWwoJ2h1c2tzJyk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBSaWdodC1jbGljayB0byBkZWNyZWFzZSBsZXZlbFxyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBpbXBsZW1lbnQgd2hhdCBoYXBwZW5zIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBCdXR0b24gJHtrZXl9IHdhcyByaWdodCBjbGlja2VkYCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJlc3RpZ2Vba2V5XS5sZXZlbCA8PSAwKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmxldmVsLS07XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmNvc3QgPSBwcmV2Rmlib25hY2NpKHByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIHByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdodXNrcycsIHByZXN0aWdlW2tleV0uY29zdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8Yj4ke3ByZXN0aWdlW2tleV0udGV4dH08L2I+PGJyPkxldmVsOiAke3ByZXN0aWdlW2tleV0ubGV2ZWx9PGJyPkNvc3Q6ICR7cHJlc3RpZ2Vba2V5XS5jb3N0fWA7XHJcbiAgICAgICAgICAgICAgICBodXNrVmFsdWUudGV4dENvbnRlbnQgPSAnSHVza3M6ICcgKyBnZXRNYXRlcmlhbCgnaHVza3MnKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRIb3ZlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgaGlkZVRvb2x0aXAoKTsgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDsgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSBidXR0b25zXHJcbiAgICBzZXRUaW1lb3V0KGNyZWF0ZVByZXN0aWdlQnV0dG9ucywgNTAwMCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgaHVza1ZhbHVlLnN0eWxlLm9wYWNpdHkgPSAnMSc7IH0sIDUwMDApO1xyXG5cclxufVxyXG5cclxudmFyIGN1cnJlbnRIb3ZlckJ1dHRvbiA9IG51bGw7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHJcbiAgICB1cGRhdGVVSSxcclxuICAgIHNldFRvdGFsVGltZSxcclxuICAgIGNoYW5nZU1lc3NhZ2UsXHJcblxyXG4gICAgZ2V0TWVzc2FnZSxcclxuICAgIHRvdGFsX3RpbWUsXHJcbiAgICBjdXJyZW50SG92ZXJCdXR0b24sXHJcbiAgICBkZWxldGVHYW1lLFxyXG4gICAgaXNla2FpLFxyXG4gICAgdXBkYXRlXHJcbn07XHJcbmZ1bmN0aW9uIGRlbGV0ZUdhbWUoKVxyXG57XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2F2ZScpOyBjdXJyZW50bHlEZWxldGluZyA9IHRydWU7IGxvY2F0aW9uLnJlbG9hZCgpO1xyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5kZWxldGVHYW1lID0gZGVsZXRlR2FtZTtcclxuLy8gQHRzLWlnbm9yZVxyXG53aW5kb3cuaXNla2FpID0gaXNla2FpOyIsIlxyXG5jb25zdCB7IHNldFN0YWdlLCBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuXHJcbi8qKlxyXG4gKiBNYWtlIGV2ZXJ5dGhpbmcgd2l0aCB0aGUgY2xhc3MgXCJzdGFnZVwiIHZpc2libGVcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0YWdlXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlVmlzaWJsZShzdGFnZSkge1xyXG4gICAgaWYgKCFwYXNzZWRTdGFnZShzdGFnZSkpIHtcclxuICAgICAgICBzZXRTdGFnZShzdGFnZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGFnZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5cIiArIHN0YWdlKTtcclxuICAgIHN0YWdlRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgIH0pO1xyXG4gICAgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSgpO1xyXG59XHJcbmV4cG9ydHMubWFrZVZpc2libGUgPSBtYWtlVmlzaWJsZTsiLCJjb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IHBlcmtzIH0gPSByZXF1aXJlKCcuL2pzb24vcGVya3MnKTtcclxubGV0IG15UGVya3MgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IHBlcmtOYW1lIFxyXG4gKiBAcmV0dXJucyBib29sZWFuXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNQZXJrKHBlcmtOYW1lKSB7XHJcbiAgICByZXR1cm4gbXlQZXJrcy5pbmNsdWRlcyhwZXJrTmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFsbFBlcmtzKCkge1xyXG4gICAgcmV0dXJuIG15UGVya3M7XHJcbn1cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGVya05hbWUgUGVyayB0byBhZGRcclxuICovXHJcbmZ1bmN0aW9uIGFkZFBlcmsocGVya05hbWUpIHtcclxuICAgIG15UGVya3MucHVzaChwZXJrTmFtZSk7XHJcblxyXG4gICAgLy8gRG8gYWxsIHRoZSBvbmUtdGltZSB1cGRhdGVzXHJcbiAgICBzd2l0Y2ggKHBlcmtOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnQXJjaGl0ZWN0JzpcclxuICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdzID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpLmJ1aWxkaW5ncztcclxuICAgICAgICAgICAgZm9yIChsZXQgYiBvZiBPYmplY3Qua2V5cyhidWlsZGluZ3MpKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1aXJlKCcuL3JlY2FsY3VsYXRlQnVpbGRpbmdDb3N0JykucmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYik7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdGllck51bSBcclxuICovXHJcbmZ1bmN0aW9uIGdldFBlcmtGcm9tVGllcih0aWVyTnVtKSB7XHJcbiAgICBmb3IgKGxldCBwZXJrIGluIHBlcmtzWyd0aWVyJyArIHRpZXJOdW1dKSB7XHJcbiAgICAgICAgaWYgKGhhc1BlcmsocGVyaykpIHJldHVybiBwZXJrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vIHBlcmsgZm9yIHRoaXMgdGllclxyXG4gICAgcmV0dXJuICcnO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gc2VsZWN0QWJpbGl0eShhYmlsaXR5TmFtZSkge1xyXG4gICAgaWYgKGhhc1BlcmsoYWJpbGl0eU5hbWUpKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGNvbmZpcm1TZWxlY3Rpb24gPSB3aW5kb3cuY29uZmlybShcIkRvIHlvdSB3YW50IHRvIHNlbGVjdCBcIiArIGFiaWxpdHlOYW1lICsgXCI/IFRoaXMgZGVjaXNpb24gY2Fubm90IGJlIGVhc2lseSBjaGFuZ2VkLlwiKTtcclxuXHJcbiAgICBpZiAoIWNvbmZpcm1TZWxlY3Rpb24pIHJldHVybjtcclxuICAgIGFkZFBlcmsoYWJpbGl0eU5hbWUpO1xyXG5cclxuICAgIC8vIGZvciAobGV0IGkgPSAxOyBpIDw9IDE7ICsraSlcclxuICAgIHJlcXVpcmUoJy4vc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24nKS5zZWxlY3RDb3JyZWN0UGVya0J1dHRvbihhYmlsaXR5TmFtZSk7XHJcblxyXG4gICAgLy8gbXlQZXJrcy5wdXNoKGFiaWxpdHlOYW1lKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRQZXJrcygpIHtcclxuICAgIG15UGVya3MgPSBbXTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBoYXNQZXJrLFxyXG4gICAgYWRkUGVyayxcclxuICAgIHNlbGVjdEFiaWxpdHksXHJcbiAgICBnZXRQZXJrRnJvbVRpZXIsXHJcbiAgICBnZXRBbGxQZXJrcyxcclxuICAgIHJlc2V0UGVya3NcclxufTsiLCIvLyBAdHMtbm9jaGVja1xyXG5cclxuLy8gQ3JlZGl0IHRvIGh0dHBzOi8vY29kZXBlbi5pby9ydWR0amQyNTQ4L3Blbi9xQnBWenhQXHJcbi8vIEV2YW4gSmluICjsp4Tqsr3shLEpXHJcbmNvbnN0IFRPVEFMID0gMTA7XHJcbmxldCBwZXRhbEFycmF5ID0gW107XHJcblxyXG4vLyBQZXRhbCBjbGFzc1xyXG5jbGFzcyBQZXRhbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwZXRhbEltZykge1xyXG4gICAgICAgIHRoaXMucGV0YWxJbWcgPSBwZXRhbEltZztcclxuICAgICAgICB0aGlzLnggPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMueSA9IChNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodCAqIDIpIC0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICB0aGlzLncgPSAyNSArIE1hdGgucmFuZG9tKCkgKiAxNTtcclxuICAgICAgICB0aGlzLmggPSAyMCArIE1hdGgucmFuZG9tKCkgKiAxMDtcclxuICAgICAgICB0aGlzLm9wYWNpdHkgPSB0aGlzLncgLyA0MDtcclxuICAgICAgICB0aGlzLmZsaXAgPSBNYXRoLnJhbmRvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnhTcGVlZCA9IDEuNSArIE1hdGgucmFuZG9tKCkgKiAyO1xyXG4gICAgICAgIHRoaXMueVNwZWVkID0gMSArIE1hdGgucmFuZG9tKCkgKiAxO1xyXG4gICAgICAgIHRoaXMuZmxpcFNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDAuMDM7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy55ID4gY2FudmFzLmhlaWdodCB8fCB0aGlzLnggPiBjYW52YXMud2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gLXRoaXMucGV0YWxJbWcud2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IChNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodCAqIDIpIC0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy54U3BlZWQgPSAxLjUgKyBNYXRoLnJhbmRvbSgpICogMjtcclxuICAgICAgICAgICAgdGhpcy55U3BlZWQgPSAxICsgTWF0aC5yYW5kb20oKSAqIDE7XHJcbiAgICAgICAgICAgIHRoaXMuZmxpcCA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0VGltZVNlZ21lbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBldGFsSW1nLnNyYyA9ICcuL3BldGFsLnBuZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXRhbEltZy5zcmMgPSAnLi9wb2xsZW4ucG5nJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBldGFsSW1nLnNyYyA9ICcuL2ZhbGwucG5nJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBldGFsSW1nLnNyYyA9ICcuL3Nub3dmbGFrZS5wbmcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSB0aGlzLm9wYWNpdHk7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShcclxuICAgICAgICAgICAgdGhpcy5wZXRhbEltZyxcclxuICAgICAgICAgICAgdGhpcy54LFxyXG4gICAgICAgICAgICB0aGlzLnksXHJcbiAgICAgICAgICAgIHRoaXMudyAqICgwLjYgKyAoTWF0aC5hYnMoTWF0aC5jb3ModGhpcy5mbGlwKSkgLyAzKSksXHJcbiAgICAgICAgICAgIHRoaXMuaCAqICgwLjggKyAoTWF0aC5hYnMoTWF0aC5zaW4odGhpcy5mbGlwKSkgLyA1KSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGFuaW1hdGUoKSB7XHJcbiAgICAgICAgdGhpcy54ICs9IHRoaXMueFNwZWVkO1xyXG4gICAgICAgIHRoaXMueSArPSB0aGlzLnlTcGVlZDtcclxuICAgICAgICB0aGlzLmZsaXAgKz0gdGhpcy5mbGlwU3BlZWQ7XHJcbiAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMjZnVsbHNjcmVlbicpO1xyXG5jYW52YXMud2lkdGggPSB3aW5kb3cub3V0ZXJXaWR0aDtcclxuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5vdXRlckhlaWdodDtcclxuY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5mdW5jdGlvbiBzdGFydFBldGFsUmVuZGVyaW5nKCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgIHBldGFsQXJyYXkuZm9yRWFjaChwZXRhbCA9PiBwZXRhbC5hbmltYXRlKCkpO1xyXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGFydFBldGFsUmVuZGVyaW5nKTtcclxufVxyXG5leHBvcnRzLnN0YXJ0UGV0YWxSZW5kZXJpbmcgPSBzdGFydFBldGFsUmVuZGVyaW5nO1xyXG5cclxuZnVuY3Rpb24gZ2V0VGltZVNlZ21lbnQoKSB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgbWludXRlcyA9IG5vdy5nZXRNaW51dGVzKCk7XHJcbiAgICByZXR1cm4gKG1pbnV0ZXMgJSA1KTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogU2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgcGV0YWxzIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3VG90YWwgSG93IG1hbnkgcGV0YWxzIGFyZSB0aGVyZT9cclxuICovXHJcbmZ1bmN0aW9uIHNldFBldGFscyhuZXdUb3RhbCkge1xyXG4gICAgY29uc3QgcGV0YWxJbWcgPSBuZXcgSW1hZ2UoKTtcclxuXHJcblxyXG4gICAgcGV0YWxBcnJheSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3VG90YWw7ICsraSkge1xyXG4gICAgICAgIHBldGFsQXJyYXkucHVzaChuZXcgUGV0YWwocGV0YWxJbWcpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0cy5zZXRQZXRhbHMgPSBzZXRQZXRhbHM7IiwibGV0IHBsYXllclVpZCA9IG51bGw7XHJcblxyXG4vLyBHZXQgVXNlciBJRFxyXG5mdW5jdGlvbiBnZXRQbGF5ZXJVaWQoKSB7XHJcbiAgICByZXR1cm4gcGxheWVyVWlkO1xyXG59XHJcblxyXG4vLyBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhIHVuaXF1ZSBVSURcclxuZnVuY3Rpb24gZ2VuZXJhdGVVbmlxdWVJRCgpIHtcclxuICAgIHJldHVybiBEYXRlLm5vdygpLnRvU3RyaW5nKDM2KSArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA1KTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBnZXRQbGF5ZXJVaWQsXHJcbiAgICBnZW5lcmF0ZVVuaXF1ZUlEXHJcbn07IiwiLy8gREVQRU5EUyBPTjoganNvbi9idXR0b25zLmpzXHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoJy4vanNvbi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5cclxuZnVuY3Rpb24gaXNQb25kZXJlZChpZCkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGlkIGV4aXN0cyBpbiB0aGUgdW5sb2NrcyBtYXBcclxuICAgIC8vIElmIHRoZSBpZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBtYXAsIHJldHVybiBmYWxzZVxyXG5cclxuICAgIHJldHVybiBwb25kZXJzW2lkXSA/IHBvbmRlcnNbaWRdLmlzUG9uZGVyZWQgOiBmYWxzZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhblVubG9jayh1bmxvY2tJZCkge1xyXG4gICAgLy8gR2V0IHRoZSBrZXkgZnJvbSB0aGlzIGlkXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHVubG9jaz8gJywgdW5sb2NrSWQpO1xyXG4gICAgdmFyIHVubG9ja0tleSA9ICcnO1xyXG4gICAgZm9yIChsZXQgdW5sb2NrIGluIHBvbmRlcnMpIHtcclxuICAgICAgICBpZiAocG9uZGVyc1t1bmxvY2tdLmlkID09PSB1bmxvY2tJZCkge1xyXG4gICAgICAgICAgICB1bmxvY2tLZXkgPSB1bmxvY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh1bmxvY2tLZXkgPT09ICcnKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiaW52YWxpZCB1bmxvY2sgaWQ6IFwiLCB1bmxvY2tJZCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICB2YXIgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHBvbmRlcnNbdW5sb2NrS2V5XS5jb3N0KSB7XHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpIDwgcG9uZGVyc1t1bmxvY2tLZXldLmNvc3RbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ2Fubm90IHVubG9jayBcIiArIHVubG9ja0lkKTtcclxuICAgICAgICAgICAgY2FuQnV5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHdlIHVubG9jayAnLCB1bmxvY2tJZCwgY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMocG9uZGVyT2JqZWN0cykge1xyXG4gICAgLy8gY29uc3QgZ2VuZXJhdGVkQnV0dG9ucyA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgW3BvbmRlcktleSwgcG9uZGVyT2JqXSBvZiBPYmplY3QuZW50cmllcyhwb25kZXJPYmplY3RzKSkge1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25LZXkgPSBgcG9uZGVyJHtjYXBpdGFsaXplRmlyc3QocG9uZGVyS2V5KX1gOyAvLyBlLmcuIHBvbmRlckZpc2hpbmdcclxuXHJcbiAgICAgICAgLy8gbGV0IHRvb2x0aXBDb3N0ID0gT2JqZWN0LmVudHJpZXMocG9uZGVyT2JqLmNvc3QpLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHthbW91bnQudG9GaXhlZCgwKX0gJHttYXRlcmlhbH1gKS5qb2luKCc8YnI+Jyk7XHJcbiAgICAgICAgbGV0IHRvb2x0aXBDb3N0ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KHBvbmRlck9iai5jb3N0KTtcclxuICAgICAgICBidXR0b25zW2J1dHRvbktleV0gPSB7XHJcbiAgICAgICAgICAgIGNsYXNzOiAndG9vbHRpcCB1bmxvY2snLFxyXG4gICAgICAgICAgICB0ZXh0OiBwb25kZXJPYmoudGV4dCB8fCAnUG9uZGVyIGEgTXlzdGVyeT8nLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogcG9uZGVyT2JqLnRvb2x0aXBEZXNjIHx8IFwiV2hvIGtub3dzIHdoYXQgeW91J2xsIGRpc2NvdmVyXCIsXHJcbiAgICAgICAgICAgIHRvb2x0aXBDb3N0OiB0b29sdGlwQ29zdCxcclxuICAgICAgICAgICAgdGFiOiAncG9uZGVyJyxcclxuICAgICAgICAgICAgdW5sb2NrOiBwb25kZXJLZXksXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi9oZWxwZXInKS5nZXRNYXgoJ3BvbmRlcicpID49IHBvbmRlcnNbcG9uZGVyS2V5XS5jb3N0Wydwb25kZXInXSAvIDI7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoaWRlOiAoKSA9PiBpc1BvbmRlcmVkKHBvbmRlcktleSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25LZXksIGJ1dHRvbnNbYnV0dG9uS2V5XSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybiBnZW5lcmF0ZWRCdXR0b25zO1xyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjYW5VbmxvY2ssXHJcbiAgICBpc1BvbmRlcmVkLFxyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zXHJcbn07IiwiXHJcbmNvbnN0IHsgaGFzUHJlc3RpZ2UsIGdldExldmVsT2ZQcmVzdGlnZSB9ID0gcmVxdWlyZShcIi4vanNvbi9wcmVzdGlnZVwiKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKFwiLi9wb25kZXJcIik7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTtcclxuY29uc3QgeyB1cGRhdGVCb3VuY2VBbmltYXRpb24gfSA9IHJlcXVpcmUoXCIuL3VwZGF0ZUJvdW5jZUFuaW1hdGlvblwiKTtcclxuXHJcbmZ1bmN0aW9uIHJlY2FsY01heENsb25lcygpIHtcclxuICAgIGxldCBtYXhDbG9uZXMgPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKS5nZXRCYXNlTWF4KCdjbG9uZXMnKTtcclxuICAgIGlmIChwYXNzZWRTdGFnZSgnY2xvbmUnKSkgbWF4Q2xvbmVzICs9IDE7XHJcblxyXG4gICAgY29uc3QgYnVpbGRpbmdzID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIikuYnVpbGRpbmdzO1xyXG4gICAgLy8gY29uc29sZS5sb2cocGFzc2VkU3RhZ2UoJ2Nsb25lJyksIG1heENsb25lcyk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIGJ1aWxkaW5nXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleSwgYnVpbGRpbmcsIGJ1aWxkaW5nLmVmZmVjdHMpO1xyXG4gICAgICAgIGlmIChidWlsZGluZy5lZmZlY3RzICYmIGJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddKVxyXG4gICAgICAgICAgICBtYXhDbG9uZXMgKz0gYnVpbGRpbmcuZWZmZWN0c1snY2xvbmVzJ10gKiBidWlsZGluZy5jb3VudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb25kZXIgYm9udXNlc1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ3NoZWx0ZXInXS5jb3VudDtcclxuICAgIGlmIChpc1BvbmRlcmVkKCdiaWdnZXJIdXQnKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ2h1dCddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlckhvdXNlJykpIG1heENsb25lcyArPSAyICogYnVpbGRpbmdzWydob3VzZSddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpKSBtYXhDbG9uZXMgKz0gNCAqIGJ1aWxkaW5nc1sndGVlcGVlJ10uY291bnQ7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnZXZlbkJpZ2dlclNoZWx0ZXInKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ3NoZWx0ZXInXS5jb3VudDtcclxuXHJcbiAgICBpZiAoaGFzUHJlc3RpZ2UoJ21heENsb25lcycpKSBtYXhDbG9uZXMgKz0gMSAqIGdldExldmVsT2ZQcmVzdGlnZSgnbWF4Q2xvbmVzJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtYXhDbG9uZXMpO1xyXG4gICAgLy8gcmV0dXJuIG1heENsb25lcztcclxuICAgIHJlcXVpcmUoXCIuL3NldE1heFwiKS5zZXRNYXgoJ2Nsb25lcycsIG1heENsb25lcyk7XHJcbiAgICB1cGRhdGVCb3VuY2VBbmltYXRpb24oKTtcclxufVxyXG5cclxuZXhwb3J0cy5yZWNhbGNNYXhDbG9uZXMgPSByZWNhbGNNYXhDbG9uZXM7IiwiLyoqXHJcbiAqIFJlY2FsY3VsYXRlcyB0aGUgY29zdCBvZiBhIGJ1aWxkaW5nXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ0tleSBUaGUgYnVpbGRpbmcgd2UgcmVjYWxjdWxhdGUgdGhlIGNvc3Qgb2ZcclxuICovXHJcbmZ1bmN0aW9uIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGJ1aWxkaW5nS2V5KVxyXG57XHJcbiAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJykuYnVpbGRpbmdzO1xyXG4gICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuICAgIGlmIChidWlsZGluZyAmJiBidWlsZGluZy5jb3N0ICYmIGJ1aWxkaW5nLnJhdGlvKVxyXG4gICAge1xyXG4gICAgICAgIGZvciAobGV0IG1hdGVyaWFsIGluIGJ1aWxkaW5nLmNvc3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGJ1aWxkaW5nLCBidWlsZGluZy5iYXNlY29zdFttYXRlcmlhbF0sIGJ1aWxkaW5nLnJhdGlvLCBidWlsZGluZy5jb3VudCk7XHJcbiAgICAgICAgICAgIGJ1aWxkaW5nWydjb3N0J11bbWF0ZXJpYWxdID0gTWF0aC5yb3VuZChidWlsZGluZy5iYXNlY29zdFttYXRlcmlhbF0gKiBNYXRoLnBvdyhidWlsZGluZy5yYXRpbywgYnVpbGRpbmcuY291bnQpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXF1aXJlKCcuL3BlcmtzJykuaGFzUGVyaygnQXJjaGl0ZWN0JykpIGJ1aWxkaW5nLmNvc3RbbWF0ZXJpYWxdICo9IDAuNzU7IC8vIDI1JSByZWR1Y3Rpb24gZm9yIGFyY2hpdGVjdHNcclxuICAgICAgICAgICAgLy8gaWYgKHJlcXVpcmUoJy4vanNvbi9wcmVzdGlnZScpLmhhc1ByZXN0aWdlKCdjaGVhcGVyQnVpbGRpbmdzJykpXHJcbiAgICAgICAgICAgIC8vICAgICBidWlsZGluZy5jb3N0W21hdGVyaWFsXSAqPSBNYXRoLnBvdygwLjk1LCByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKS5nZXRMZXZlbE9mUHJlc3RpZ2UoJ2NoZWFwZXJCdWlsZGluZ3MnKSk7IC8vIDUlIHJlZHVjdGlvblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdG9vbHRpcCBjb3N0XHJcbiAgICBjb25zdCBteUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYnVpbGRpbmdLZXkpO1xyXG4gICAgdmFyIG5ld1RleHQgPSByZXF1aXJlKCcuL3Jlc291cmNlcycpLmdlbmVyYXRlVG9vbHRpcENvc3QoYnVpbGRpbmcuY29zdCk7XHJcbiAgICBpZiAobXlCdXR0b24pXHJcbiAgICB7XHJcbiAgICAgICAgbXlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIG5ld1RleHQpO1xyXG4gICAgICAgIGNvbnN0IGVmZmVjdFN0cmluZyA9IHJlcXVpcmUoJy4vYnVpbGRpbmdzJykuZ2VuZXJhdGVFZmZlY3RTdHJpbmcoYnVpbGRpbmcpO1xyXG4gICAgICAgIG15QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWVmZmVjdCcsIGVmZmVjdFN0cmluZyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHsgdGhyb3cgXCJCdXR0b24gbm90IGZvdW5kIGZvciBcIiArIGJ1aWxkaW5nS2V5OyB9XHJcblxyXG59XHJcbmV4cG9ydHMucmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgPSByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdDtcclxuXHJcbmZ1bmN0aW9uIHJlY2FsY3VsYXRlQWxsQnVpbGRpbmdDb3N0cygpXHJcbntcclxuICAgIC8vY29uc29sZS5sb2coJ3JlY2FsY3VsYXRlQWxsQnVpbGRpbmdDb3N0cycpOztcclxuICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKS5idWlsZGluZ3M7XHJcbiAgICBmb3IgKGxldCBidWlsZGluZ0tleSBvZiBPYmplY3Qua2V5cyhidWlsZGluZ3MpKVxyXG4gICAge1xyXG4gICAgICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGJ1aWxkaW5nS2V5KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnJlY2FsY3VsYXRlQWxsQnVpbGRpbmdDb3N0cyA9IHJlY2FsY3VsYXRlQWxsQnVpbGRpbmdDb3N0cztcclxuIiwiXHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcblxyXG5jb25zdCB7IGdldFdvcmtlcnMsIHVwZGF0ZVRvdGFsIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNUb29sLCB9ID0gcmVxdWlyZSgnLi90b29scycpO1xyXG5jb25zdCB7IGNhbGNDcmFmdEJvbnVzLCBnZXRNYXggfSA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGNhbGNJbmNyZWFzZSB9ID0gcmVxdWlyZShcIi4vY2FsY0luY3JlYXNlXCIpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIsIGFiYnJldmlhdGVOdW1iZXIgfSA9IHJlcXVpcmUoXCIuL3NpZGViYXJcIik7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTsgLy8gVXNlZCBmb3IgZXZhbCBmdW5jdGlvbnNcclxuY29uc3QgeyB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoXCIuL3NpZGViYXJcIik7XHJcbmNvbnN0IHsgdXBkYXRlU2tpbGxzIH0gPSByZXF1aXJlKFwiLi9za2lsbHNcIik7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKFwiLi9yZWNhbGNNYXhDbG9uZXNcIik7XHJcbmNvbnN0IHsgdHJpZ2dlckZsb2F0VXBUZXh0IH0gPSByZXF1aXJlKFwiLi90cmlnZ2VyRmxvYXRVcFRleHRcIik7XHJcbmNvbnN0IHsgYWRkUHJvZHVjaW5nLCBhZGRDb25zdW1pbmcsIHJlbW92ZVByb2R1Y2luZywgcmVtb3ZlQ29uc3VtaW5nIH0gPSByZXF1aXJlKFwiLi9mYWN0b3J5XCIpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkgfSA9IHJlcXVpcmUoXCIuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHlcIik7XHJcbi8vIGNvbnNvbGUubG9nKGNhcGl0YWxpemVGaXJzdCk7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBqb2IgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2VBZmZlY3RlZEJ5Sm9iKGpvYiwgcmVzb3VyY2UpXHJcbntcclxuICAgIGNvbnN0IHNraWxsID0gc2tpbGxzW2pvYl07XHJcbiAgICBpZiAoIXNraWxsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgaWYgKHNraWxsLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlKSlcclxuICAgIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSdzIGEgdG9vbCByZXF1aXJlbWVudCBmb3IgdGhpcyByZXNvdXJjZVxyXG4gICAgICAgIGlmIChza2lsbC5uZWVkVG9vbHMgJiYgQXJyYXkuaXNBcnJheShza2lsbC5uZWVkVG9vbHMpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgdG9vbE9iaiBvZiBza2lsbC5uZWVkVG9vbHMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRvb2wgaW4gdG9vbE9iailcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbE9ialt0b29sXS5pbmNsdWRlcyhyZXNvdXJjZSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaGFzIHRoaXMgdG9vbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm93LCBqdXN0IHJldHVybmluZyB0cnVlIHRvIGluZGljYXRlIHRoZSByZXNvdXJjZSBpcyBhZmZlY3RlZCBhbmQgYSB0b29sIGlzIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgeW91IG1heSB3YW50IHRvIHJlcGxhY2UgdGhpcyB3aXRoIGEgY2hlY2sgdG8gc2VlIGlmIHRoZSBwbGF5ZXIgcG9zc2Vzc2VzIHRoZSByZXF1aXJlZCB0b29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNUb29sKHRvb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBuZWVkZWQgYSB0b29sIGJ1dCBub3QgZm9yIHRoaXNcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIG5vIHRvb2wgcmVxdWlyZW1lbnQgd2FzIGZvdW5kIGZvciB0aGUgcmVzb3VyY2UsIGl0J3Mgc3RpbGwgYWZmZWN0ZWQgYnkgdGhlIGpvYlxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGNhbGNTZWNvbmRzUmVtYWluaW5nKHJlc291cmNlTmFtZSwgbmVlZGVkKVxyXG57XHJcbiAgICBpZiAobmVlZGVkIDw9IGdldE1hdGVyaWFsKHJlc291cmNlTmFtZSkpIHJldHVybiAwO1xyXG5cclxuICAgIC8vIEhvdyBtdWNoIHBlciBzZWNvbmRcclxuICAgIGNvbnN0IGluY3JlYXNlID0gY2FsY0luY3JlYXNlKHJlc291cmNlTmFtZSwgMTAwMCk7XHJcbiAgICBpZiAoaW5jcmVhc2UgPT0gMCkgcmV0dXJuIC0xOyAvLyBXb24ndCBkaXNwbGF5XHJcblxyXG4gICAgLy8gRGlmZmVyZW5jZSBvdmVyIHRpbWVcclxuICAgIGNvbnN0IHRpbWVSZW1haW5pbmcgPSAobmVlZGVkIC0gZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKSkgLyBpbmNyZWFzZTtcclxuXHJcbiAgICByZXR1cm4gdGltZVJlbWFpbmluZztcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCByZXNvdXJjZXNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2VzJyk7XHJcbmV4cG9ydHMucmVzb3VyY2VzQ29udGFpbmVyID0gcmVzb3VyY2VzQ29udGFpbmVyO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGluY3JlYXNlTWF4KG1hdGVyaWFsLCBudW0pXHJcbntcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiaW5jcmVhc2UgbWF4IFwiLCBtYXRlcmlhbCwgbnVtKTtcclxuICAgIC8vIGNvbnNvbGUudHJhY2UoKTtcclxuICAgIHJlc291cmNlc1ttYXRlcmlhbF0ubWF4ICs9IG51bTtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHttYXRlcmlhbH1WYWx1ZWApO1xyXG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHttYXRlcmlhbH1WYWx1ZWApLmNsYXNzTGlzdC5hZGQoJ2Zsb2F0LXVwLWZhZGUtb3V0Jyk7XHJcbiAgICB0cmlnZ2VyRmxvYXRVcFRleHQocmVjdC5yaWdodCwgcmVjdC5ib3R0b20sICcrbWF4JywgJ2dyZWVuJyk7IC8vXHJcblxyXG4gICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgdXBkYXRlVG90YWwoKTtcclxuXHJcbn1cclxuXHJcbi8vIEdlbmVyaWMgaW5jcmVhc2VcclxuZnVuY3Rpb24gaW5jcmVhc2VNYXRlcmlhbChtYXRlcmlhbCwgbnVtKVxyXG57XHJcbiAgICAvLyBFbnN1cmUgd2UgYWN0dWFsbHkgbmVlZCB0byBkbyBhbnl0aGluZ1xyXG4gICAgaWYgKG51bSA9PSAwIHx8IE51bWJlci5pc05hTihudW0pKSByZXR1cm47XHJcbiAgICBtYXRlcmlhbCA9IG1hdGVyaWFsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnaW5jcmVhc2UgbWF0ZXJpYWwnLCBtYXRlcmlhbCwgbnVtKTtcclxuICAgIC8vIGlmIChNYXRoLmFicyhudW0pID4gNSkgY29uc29sZS5sb2coJ2NoYW5naW5nJywgbWF0ZXJpYWwsICdieScsIG51bSk7XHJcblxyXG4gICAgLy8gVGhpcyBjaGVjayBlbnN1cmVzIHRoYXQgdGhlIG1hdGVyaWFsIGtleSBleGlzdHMgaW4gdGhlIHJlc291cmNlcyBtYXAuXHJcbiAgICBpZiAobWF0ZXJpYWwgaW4gcmVzb3VyY2VzKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGlmIChtYXRlcmlhbCA9PT0gJ2Nsb25lcycpIHJlY2FsY01heENsb25lcygpO1xyXG4gICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXRlcmlhbCkgPCBnZXRNYXgobWF0ZXJpYWwpICYmIG51bSA+IDApXHJcbiAgICAgICAgeyAvLyBBZGRpbmcgcmVzb3VyY2VzXHJcblxyXG4gICAgICAgICAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuICAgICAgICAgICAgdXBkYXRlU2tpbGxzKG1hdGVyaWFsLCBudW0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsID09PSAndmlvbGVuY2UnKSByZXF1aXJlKFwiLi9jb21iYXRcIikucmVmcmVzaFZhbHVlcygpO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKG51bSA8IDApXHJcbiAgICAgICAgeyAvLyBTdWJ0cmFjdGluZyByZXNvdXJjZXNcclxuICAgICAgICAgICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSA9IE1hdGgubWF4KHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKyBudW0sIDApOyAvLyBMb3dlciBib3VuZCBhdCAwXHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgeyAvLyBBbHJlYWR5IGF0IG1heFxyXG4gICAgICAgICAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlID0gZ2V0TWF4KG1hdGVyaWFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKTtcclxuICAgICAgICAvLyByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzKCk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobWF0ZXJpYWwgaW4gY3JhZnRlZFJlc291cmNlcylcclxuICAgIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY3JhZnRpbmcgYSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlID0gTWF0aC5tYXgoY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKyBudW0sIDApOyAvLyBMb3dlciBib3VuZCBhdCAwXHJcblxyXG4gICAgICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShtYXRlcmlhbCk7XHJcbiAgICAgICAgdXBkYXRlU2tpbGxzKG1hdGVyaWFsLCBudW0pO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIC8vIENyZWF0aW5nIGEgbmV3IG1hdGVyaWFsXHJcbiAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0pIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW21hdGVyaWFsXSkgY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG5cclxuICAgICAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY3JhZnRlZCBtYXRlcmlhbHMgaGF2ZSBubyBtYXgsIGEgbGEgS2l0dGVucyBHYW1lXHJcblxyXG59XHJcbi8vIEdsb2JhbGx5IGRpc3BsYXkgZm9yIGRldiBwdXJwb3Nlc1xyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5pbmNyZWFzZU1hdGVyaWFsID0gaW5jcmVhc2VNYXRlcmlhbDtcclxuLy8gQHRzLWlnbm9yZVxyXG53aW5kb3cuaW5jcmVhc2VNYXggPSBpbmNyZWFzZU1heDtcclxuXHJcblxyXG5mdW5jdGlvbiB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMoKVxyXG57XHJcbiAgICAvLyBjb25zdCByZXNvdXJjZXMgPSBbXCJjbG9uZXNcIiwgXCJzdGlja3NcIiwgXCJ2aW5lc1wiLCBcInJvY2tzXCIsIFwiZmlzaFwiLCBcIndvb2RcIiwgXCJwb25kZXJcIl07XHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBpbiByZXNvdXJjZXMpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbmNyZWFzZSBvZiBcIiArIHJlc291cmNlKTtcclxuICAgICAgICBjb25zdCByYXRlID0gY2FsY0luY3JlYXNlKHJlc291cmNlLCAxMDAwKTtcclxuICAgICAgICB2YXIgcmF0ZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtyZXNvdXJjZX1JbmNyZWFzZVJhdGVgKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHJhdGVFbGVtZW50KSByYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IHJhdGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBcclxuICogQHJldHVybnMgQnV0dG9uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY29uZmlnKVxyXG57XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBjb25maWcuY2xhc3MgKyAnIHRvb2x0aXAnO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnaWQnLCBjb25maWcuaWQpO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgncmVxdWlyZW1lbnQnLCBjb25maWcucmVxdWlyZWRTdGFnZSk7XHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5maW5kKGtleSA9PiBjcmFmdGVkUmVzb3VyY2VzW2tleV0gPT09IGNvbmZpZyk7XHJcbiAgICAvLyBjb25zdCBjbGVhbkNvdW50ID0gcGFyc2VGbG9hdChjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpLnRvRml4ZWQoMCk7XHJcbiAgICAvLyBidXR0b24uaW5uZXJIVE1MID0gYCR7Y29uZmlnLnRleHQgfHwgY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSl9OiA8c3BhbiBpZD1cIiR7cmVzb3VyY2VOYW1lICsgXCJWYWx1ZVwifVwiPiR7Y2xlYW5Db3VudH08L3NwYW4+YDtcclxuICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgJHtjb25maWcudGV4dCB8fCBjYXBpdGFsaXplRmlyc3QocmVzb3VyY2VOYW1lKX1gO1xyXG4gICAgLy8gYnV0dG9uLnRvb2x0aXBEZXNjID0gY29uZmlnLnRvb2x0aXBEZXNjOyBcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGJ1dHRvbi50YWIgPSAnZXhwZXJpbWVudCc7XHJcblxyXG4gICAgcmV0dXJuIGJ1dHRvbjtcclxufVxyXG5cclxuXHJcbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjcmFmdGVkUmVzb3VyY2VCdXR0b25zJyk7XHJcbmZ1bmN0aW9uIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKVxyXG57XHJcblxyXG4gICAgLy8gRm9yIGVhY2ggcmVzb3VyY2UsIGNyZWF0ZSBhIGJ1dHRvbiB1c2luZyB0aGUgY2FwdHVyZWQgY291bnRzXHJcbiAgICBmb3IgKGxldCBuYW1lIGluIGNyYWZ0ZWRSZXNvdXJjZXMpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnZ2VuZXJhdGluZyBidXR0b24gZm9yIGNyYWZ0ZWQgcmVzb3VyY2UnLCBuYW1lKTtcclxuXHJcbiAgICAgICAgLy8gY29uZmlnLmNvdW50ID0gY3JhZnRlZFJlc291cmNlc1tuYW1lXS52YWx1ZTtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY3JhZnRlZFJlc291cmNlc1tuYW1lXSk7XHJcbiAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnRvb2x0aXBEZXNjIHx8IFwiXCIpO1xyXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmNvc3QpIHx8IFwiXCIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b29sdGlwIGNvc3QnLCBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpKTtcclxuXHJcblxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSBkaXYgZm9yIHRoZSArIGFuZCAtIGJ1dHRvbnNcclxuICAgICAgICBjb25zdCByZXNvdXJjZUNvdW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcmVzb3VyY2VDb3VudERpdi5jbGFzc05hbWUgPSBgZmFjdG9yeS0ke25hbWV9YDtcclxuICAgICAgICByZXNvdXJjZUNvdW50RGl2LmNsYXNzTGlzdC5hZGQoJ2ZhY3RvcnktYnV0dG9uJyk7XHJcbiAgICAgICAgLy8gcmVzb3VyY2VDb3VudERpdi5jbGFzc0xpc3QuYWRkKGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0ucmVxdWlyZWRTdGFnZSk7XHJcbiAgICAgICAgcmVzb3VyY2VDb3VudERpdi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSArIGJ1dHRvblxyXG4gICAgICAgIGNvbnN0IHBsdXNCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBwbHVzQnV0dG9uLnRleHRDb250ZW50ID0gJysnO1xyXG4gICAgICAgIHBsdXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInBsdXMgYnV0dG9uIGZvclwiLCBuYW1lLCBjcmFmdGVkUmVzb3VyY2VzW25hbWVdKTtcclxuICAgICAgICAgICAgLy8gQWRkIHRoZSByZXNvdXJjZSB0byB0aGUgbGlzdCBvZiBmYWN0b3J5IHByb2R1Y3Rpb25cclxuICAgICAgICAgICAgYWRkUHJvZHVjaW5nKG5hbWUpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtyZXNvdXJjZSwgYW1vdW50XSBvZiBPYmplY3QuZW50cmllcyhjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmNvc3QpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImFkZGluZyBjb25zdW1wdGlvblwiLCBuYW1lLCByZXNvdXJjZSwgYW1vdW50KTtcclxuICAgICAgICAgICAgICAgIGFkZENvbnN1bWluZyhyZXNvdXJjZSwgYW1vdW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGRpc3BsYXkgZm9yIHRoaXMgY3JhZnRlZCByZXNvdXJjZVxyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUobmFtZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnYWRkZWQgcGx1cyBidXR0b24gZm9yJywgbmFtZSk7XHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSAtIGJ1dHRvblxyXG4gICAgICAgIGNvbnN0IG1pbnVzQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgbWludXNCdXR0b24udGV4dENvbnRlbnQgPSAnLSc7XHJcbiAgICAgICAgbWludXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZW1vdmVQcm9kdWNpbmcobmFtZSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uY29zdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZUNvbnN1bWluZyhyZXNvdXJjZSwgYW1vdW50KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBkaXNwbGF5IGZvciB0aGlzIGNyYWZ0ZWQgcmVzb3VyY2VcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKG5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgLy8gQXBwZW5kIHRoZSBidXR0b25zIHRvIHRoZSBkaXZcclxuICAgICAgICByZXNvdXJjZUNvdW50RGl2LmFwcGVuZENoaWxkKHBsdXNCdXR0b24pO1xyXG4gICAgICAgIHJlc291cmNlQ291bnREaXYuYXBwZW5kQ2hpbGQobWludXNCdXR0b24pO1xyXG5cclxuICAgICAgICBjb25zdCBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGR1bW15LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgZHVtbXkuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdyb3cnO1xyXG4gICAgICAgIGR1bW15LmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICAgICAgZHVtbXkuYXBwZW5kQ2hpbGQocmVzb3VyY2VDb3VudERpdik7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGR1bW15KTtcclxuXHJcbiAgICAgICAgLy8gY29uc3QgcmVxUmVzdWx0ID0gcGFzc2VkU3RhZ2UoYnV0dG9uLmdldEF0dHJpYnV0ZSgncmVxdWlyZW1lbnQnKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVxUmVzdWx0LCBidXR0b24uZ2V0QXR0cmlidXRlKCdyZXF1aXJlbWVudCcpLCBPYmplY3QudmFsdWVzKGdldEFsbFN0YWdlcygpKSk7XHJcblxyXG4gICAgICAgIC8vIGlmIChyZXFSZXN1bHQpIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcclxuICAgICAgICAvLyBlbHNlIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICBidXR0b25zW2NyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uaWRdID0gY3JhZnRlZFJlc291cmNlc1tuYW1lXTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b24obmFtZSlcclxue1xyXG5cclxuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihjcmFmdGVkUmVzb3VyY2VzW25hbWVdKTtcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgY3JhZnRlZFJlc291cmNlc1tuYW1lXS50b29sdGlwRGVzYyk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlc1tuYW1lXS5jb3N0KSk7XHJcblxyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICBidXR0b25zW2NyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uaWRdID0gY3JhZnRlZFJlc291cmNlc1tuYW1lXTtcclxuXHJcbn1cclxuXHJcbi8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIHJlcGxhY2UgPHA+IGVsZW1lbnRzIHdpdGggdGhlIGJ1dHRvbnNcclxuLy8gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9uKCdzdGlja3MnKTtcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVG9vbHRpcENvc3QocmVxdWlyZW1lbnRzKVxyXG57XHJcbiAgICBpZiAocmVxdWlyZW1lbnRzID09PSBudWxsKSByZXR1cm4gJyc7XHJcbiAgICB2YXIgc3RyID0gJyc7XHJcbiAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiByZXF1aXJlbWVudHMpXHJcbiAgICB7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IHJlcXVpcmVtZW50c1ttYXRlcmlhbF07LyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi87XHJcbiAgICAgICAgY29uc3QgY29sb3JDbGFzcyA9IGhhc0Vub3VnaCA/ICdlbm91Z2gnIDogJ25vdC1lbm91Z2gnO1xyXG4gICAgICAgIHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLSR7bWF0ZXJpYWx9ICR7Y29sb3JDbGFzc31cIj4ke2FiYnJldmlhdGVOdW1iZXIocmVxdWlyZW1lbnRzW21hdGVyaWFsXSl9ICR7bWF0ZXJpYWx9PC9zcGFuPjxicj5gO1xyXG5cclxuICAgIH1cclxuICAgIHJldHVybiBzdHI7XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgZW1vamlEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vtb2ppRGlzcGxheScpO1xyXG5mdW5jdGlvbiB1cGRhdGVFbW9qaURpc3BsYXkoKVxyXG57XHJcbiAgICBsZXQgZW1vamlTdHIgPSBcIlwiO1xyXG4gICAgZnVuY3Rpb24gZ2V0Q29sb3JDb21wb25lbnQoKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTUgKyAyMDApKTtcclxuICAgIH1cclxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgam9iQ291bnRzIG1hcCB0byBnZXQgZWFjaCBqb2IgYW5kIGl0cyBjb3VudFxyXG4gICAgZm9yIChjb25zdCBbc2tpbGxLZXksIHNraWxsXSBvZiBPYmplY3QuZW50cmllcyhza2lsbHMpKVxyXG4gICAge1xyXG5cclxuICAgICAgICBsZXQgc2tpbGxDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgc3dpdGNoIChza2lsbEtleSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2dhdGhlcmluZyc6XHJcbiAgICAgICAgICAgICAgICBza2lsbENvbG9yID0gJ3JnYigyMjcsIDI1NCwgMjEwKSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbWFzb25yeSc6XHJcbiAgICAgICAgICAgICAgICBza2lsbENvbG9yID0gJyNjY2M0YzcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NhcnBlbnRyeSc6XHJcbiAgICAgICAgICAgICAgICBza2lsbENvbG9yID0gJyNmMGU3YzknO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2h1bnRpbmcnOlxyXG4gICAgICAgICAgICAgICAgc2tpbGxDb2xvciA9ICcjYzlmMGQ0JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdmaXNoaW5nJzpcclxuICAgICAgICAgICAgICAgIHNraWxsQ29sb3IgPSAnI2I1ZDZlYic7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndGhpbmtpbmcnOlxyXG4gICAgICAgICAgICAgICAgc2tpbGxDb2xvciA9ICcjYjViY2ViJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdmYXJtaW5nJzpcclxuICAgICAgICAgICAgICAgIHNraWxsQ29sb3IgPSAnI2VkZTRjMCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY29tYmF0JzpcclxuICAgICAgICAgICAgICAgIHNraWxsQ29sb3IgPSAnI2VkYzNjMCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZCA9IGdldENvbG9yQ29tcG9uZW50KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibHVlID0gZ2V0Q29sb3JDb21wb25lbnQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyZWVuID0gZ2V0Q29sb3JDb21wb25lbnQoKTtcclxuICAgICAgICAgICAgICAgIHNraWxsQ29sb3IgPSBgcmdiKCR7cmVkfSwgJHtncmVlbn0sICR7Ymx1ZX0pYDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhza2lsbEtleSwgc2tpbGxDb2xvcik7XHJcbiAgICAgICAgZm9yIChjb25zdCByZXNvdXJjZSBvZiBPYmplY3QudmFsdWVzKHNraWxsLmFmZmVjdGVkUmVzb3VyY2VzKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlKTtcclxuICAgICAgICAgICAgLy8gZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIC8vIGxldCByZXNvdXJjZSA9IHJlc291cmNlc1tnZXRBZmZlY3RlZFJlc291cmNlcyhqb2IpWzBdXTtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBnZXRXb3JrZXJzKHJlc291cmNlKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2UsIGNvdW50KTtcclxuICAgICAgICAgICAgaWYgKGNvdW50ID09PSB1bmRlZmluZWQgfHwgY291bnQgPT0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGVtb2ppID0gcmVzb3VyY2VzW3Jlc291cmNlXS5lbW9qaSB8fCAn8JOAnyc7ICAvLyBnZXQgdGhlIGVtb2ppIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGpvYiBmcm9tIHRoZSByZXNvdXJjZXMgbWFwXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGpvYiwgZW1vamkpO1xyXG4gICAgICAgICAgICBpZiAoZW1vamkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGVtb2ppU3RyICs9IGA8c3BhbiBjbGFzcz0ndG9vbHRpcCcgc3R5bGU9J2NvbG9yOiR7c2tpbGxDb2xvcn07J3Rvb2x0aXBkZXNjPScke3Jlc291cmNlfScgdG9vbHRpcGNvc3Q9Jyc+JHtlbW9qaS5yZXBlYXQoY291bnQpfTwvc3Bhbj5gOyAgLy8gcmVwZWF0IHRoZSBlbW9qaSBiYXNlZCBvbiB0aGUgY291bnRcclxuICAgICAgICAgICAgICAgIC8vIENvbG9yIGluIHJhbmdlIDB4Y2NjIC0gMHhmZmZcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbW9qaURpc3BsYXkuaW5uZXJIVE1MID0gZW1vamlTdHI7ICAvLyB1cGRhdGUgdGhlIGVtb2ppRGlzcGxheSBkaXYgd2l0aCB0aGUgZ2VuZXJhdGVkIGVtb2ppIHN0cmluZ1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkanVzdEZvbnRTaXplKClcclxuICAgIHtcclxuICAgICAgICBsZXQgZm9udFNpemUgPSA0ODsgIC8vIFN0YXJ0aW5nIGZvbnQgc2l6ZVxyXG5cclxuICAgICAgICBlbW9qaURpc3BsYXkuc3R5bGUuZm9udFNpemUgPSBgJHtmb250U2l6ZX1weGA7XHJcblxyXG4gICAgICAgIHdoaWxlICgoZW1vamlEaXNwbGF5Lm9mZnNldFdpZHRoID4gNjAwKSAmJiBmb250U2l6ZSA+IDMwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gMzAgaXMgYSBtaW5pbXVtIGZvbnQtc2l6ZSB0aHJlc2hvbGQgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wXHJcbiAgICAgICAgICAgIGZvbnRTaXplIC09IDE7IC8vIGRlY3JlYXNlIHRoZSBmb250IHNpemVcclxuICAgICAgICAgICAgZW1vamlEaXNwbGF5LnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udFNpemV9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gd2hlbmV2ZXIgdGhlIGNvbnRlbnQgb2YgI2Vtb2ppRGlzcGxheSBjaGFuZ2VzXHJcbiAgICAvLyBhZGp1c3RGb250U2l6ZSgpO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB1cGRhdGVFbW9qaURpc3BsYXkgZXZlcnkgdGltZSBqb2JDb3VudHMgaXMgdXBkYXRlZDpcclxuLy8gRm9yIGV4YW1wbGU6XHJcbi8vIGpvYkNvdW50cy5zZXQoJ2Zpc2hpbmcnLCA0KTtcclxudXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcblxyXG5cclxuY29uc3QgYXV0b0NyYWZ0VGFibGUgPSB7XHJcbiAgICAnc3RpY2tzJzogJ2hhbmRsZScsXHJcbiAgICAnd29vZCc6ICdwYXBlcicsXHJcbiAgICAncm9ja3MnOiAnc2hhcnByb2NrcycsXHJcbiAgICAndmluZXMnOiAncm9wZScsXHJcbiAgICAnc2FuZCc6ICdnbGFzcycsXHJcbiAgICAnb3JlJzogJ2dvbGQnLFxyXG4gICAgJ2NsYXknOiAnYnJpY2tzJ1xyXG59O1xyXG5cclxuZnVuY3Rpb24gY3JhZnRBbGxSZXNvdXJjZXMocmVzb3VyY2VLZXkpXHJcbntcclxuICAgIHRyeVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgICAgIGxldCBzdWZmaWNpZW50UmVzb3VyY2VzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgbWF0IGluIGNvc3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBpZiAoZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIDwgY29zdFttYXRdKSB7XHJcbiAgICAgICAgICAgIHN1ZmZpY2llbnRSZXNvdXJjZXMucHVzaChnZXRNYXRlcmlhbChtYXQsIHJlc291cmNlcykgLyBjb3N0W21hdF0pO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtaW4gPSBNYXRoLmZsb29yKE1hdGgubWluKC4uLnN1ZmZpY2llbnRSZXNvdXJjZXMpKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKHJlc291cmNlS2V5LCBtaW4pO1xyXG4gICAgICAgIGNyYWZ0UmVzb3VyY2VRdWFudGl0eShyZXNvdXJjZUtleSwgbWluKTtcclxuXHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnRmFpbGVkIHRvIGNyYWZ0YWxsIGZvcjogJywgcmVzb3VyY2VLZXksIGVycm9yKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JhZnRSZXNvdXJjZVF1YW50aXR5KHJlc291cmNlS2V5LCBxdWFudGl0eSlcclxue1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlS2V5KSkgdGhyb3cgXCJJbnZhbGlkIGNyYWZ0IGZvciBtaXNzaW5nIHJlc291cmNlOiBcIiArIHJlc291cmNlS2V5O1xyXG5cclxuICAgIGlmICghY2FuQ3JhZnQocmVzb3VyY2VLZXkpKSByZXR1cm47IC8vIFRha2VzIGNhcmUgb2YgcXVhbnRpdHkgPCAxXHJcbiAgICBsZXQgY29zdCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcbiAgICBxdWFudGl0eSA9IE1hdGguZmxvb3IocXVhbnRpdHkpOyAvLyBNYWtlIHN1cmUgdGhlIHF1YW50aXR5IGlzIGEgd2hvbGUgbnVtYmVyXHJcblxyXG4gICAgZm9yIChjb25zdCBbbWF0LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNvc3QpKVxyXG4gICAge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyYWZ0aW5nIHF1YW50aXR5OicsIG1hdCwgdmFsKTtcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdCwgLXZhbCAqIHF1YW50aXR5KTtcclxuICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUobWF0KTtcclxuICAgIH1cclxuICAgIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2VLZXksIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSAqIHF1YW50aXR5KTtcclxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5mbG9vcihxdWFudGl0eSk7ICsraSkgeyAvLyBPbmx5IGNyYWZ0IHdob2xlIG51bWJlciwgc28gMS40IG9ubHkgcnVucyBvbmNlXHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ2NyYWZ0aW5nJywgcXVhbnRpdHksIHJlc291cmNlS2V5LCBjb3N0KTtcclxuICAgIC8vICAgICBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY2FsY0NyYWZ0Qm9udXMocmVzb3VyY2VLZXkpKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgcmVzb3VyY2VLZXkgKyBcIlZhbHVlXCIpLnRleHRDb250ZW50ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0udmFsdWUudG9GaXhlZCgyKTtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UpIGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlID0gdHJ1ZTtcclxuXHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUocmVzb3VyY2VLZXkpO1xyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjcmFmdEJvbnVzKVxyXG57XHJcbiAgICBmb3IgKGNvbnN0IFttYXQsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoY29zdCkpXHJcbiAgICB7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChtYXQsIC12YWwpO1xyXG4gICAgfVxyXG4gICAgaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZUtleSwgY3JhZnRCb251cyk7XHJcblxyXG59XHJcbi8vIENyYWZ0IGZ1bmN0aW9uXHJcbmZ1bmN0aW9uIGNyYWZ0UmVzb3VyY2UocmVzb3VyY2VLZXkpXHJcbntcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZUtleSkpIHRocm93IFwiSW52YWxpZCBjcmFmdCBmb3IgbWlzc2luZyByZXNvdXJjZTogXCIgKyByZXNvdXJjZUtleTtcclxuXHJcbiAgICBpZiAoIWNhbkNyYWZ0KHJlc291cmNlS2V5KSkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjb3N0ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY29zdDtcclxuICAgIGxldCBjcmFmdEJvbnVzID0gY2FsY0NyYWZ0Qm9udXMocmVzb3VyY2VLZXkpO1xyXG5cclxuXHJcbiAgICBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cyk7XHJcblxyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlKSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSA9IHRydWU7XHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUocmVzb3VyY2VLZXkpO1xyXG4gICAgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSgpO1xyXG59XHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaW5jcmVhc2VNYXRlcmlhbCxcclxuICAgIGluY3JlYXNlTWF4LFxyXG4gICAgY3JhZnRBbGxSZXNvdXJjZXMsXHJcbiAgICBjcmFmdFJlc291cmNlLFxyXG4gICAgdXBkYXRlRW1vamlEaXNwbGF5LFxyXG4gICAgZ2VuZXJhdGVUb29sdGlwQ29zdCxcclxuICAgIGNhbGNTZWNvbmRzUmVtYWluaW5nLFxyXG4gICAgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucyxcclxuICAgIGNhbGNJbmNyZWFzZSxcclxuICAgIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyxcclxuICAgIGNyYWZ0UmVzb3VyY2VRdWFudGl0eSxcclxuXHJcbn07IiwiLy8gREVQRU5EUyBPTjogcmVzb3VyY2VzLmpzXHJcbmNvbnN0IHsgY2FsY0luY3JlYXNlLCB1cGRhdGVFbW9qaURpc3BsYXkgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYWRkVG9vbCwgZ2V0QWxsVG9vbHMgfSA9IHJlcXVpcmUoJy4vdG9vbHMnKTtcclxuY29uc3QgeyBhbGxWaXNpYmxlQnV0dG9ucywgc2V0VmlzaWJsZUJ1dHRvbiwgZ2V0TWF4IH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IG1ha2VWaXNpYmxlIH0gPSByZXF1aXJlKCcuL21ha2VWaXNpYmxlJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlIH0gPSByZXF1aXJlKCcuL2dldENyYWZ0ZWRSZXNvdXJjZScpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5jb25zdCB7IGdldEFsbFBlcmtzLCBhZGRQZXJrLCBoYXNQZXJrLCBzZWxlY3RBYmlsaXR5IH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyBqb2JDb3VudHMsIHNldENvbm5lY3Rpb25zLCBnZXRDb25uZWN0aW9ucywgZGlzdHJpYnV0ZVdvcmtlcnMsIHVwZGF0ZURpc3BsYXkgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IHRvdGFsX3RpbWUgfSA9IHJlcXVpcmUoJy4vbWFpbicpO1xyXG5jb25zdCB7IHNldEF0ZUZpc2gsIGdldEF0ZUZpc2ggfSA9IHJlcXVpcmUoJy4vYXRlRmlzaCcpO1xyXG5cclxuXHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcG9uZGVyXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZShcIi4vanNvbi9za2lsbHNcIik7XHJcbmNvbnN0IHsgZ2V0QWxsU3RhZ2VzIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZywgbG9hZEZhY3RvcnkgfSA9IHJlcXVpcmUoJy4vZmFjdG9yeScpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZSgnLi9yZWNhbGNNYXhDbG9uZXMnKTtcclxuY29uc3QgeyB1cGRhdGVTaWRlYmFyIH0gPSByZXF1aXJlKCcuL3NpZGViYXInKTtcclxuY29uc3QgeyBwcmVzdGlnZSwgc2V0UHJlc3RpZ2VDb3N0LCBzZXRQcmVzdGlnZUxldmVsIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nTGlzdCB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBwb3B1bGF0ZVNraWxsc1RhYmxlIH0gPSByZXF1aXJlKCcuL3NraWxscycpO1xyXG5jb25zdCB7IGdldEFuYWx5dGljcywgbG9nRXZlbnQgfSA9IHJlcXVpcmUoJ0BmaXJlYmFzZS9hbmFseXRpY3MnKTtcclxuY29uc3QgeyBnZW5lcmF0ZVVuaXF1ZUlEIH0gPSByZXF1aXJlKCcuL3BsYXllclVpZCcpO1xyXG5jb25zdCB7IGdldE11c2ljVm9sdW1lLCBnZXRTZnhWb2x1bWUsIHNldFNmeFZvbHVtZSwgc2V0TXVzaWNWb2x1bWUgfSA9IHJlcXVpcmUoJy4vYXVkaW8nKTtcclxuY29uc3QgeyBzZXRQZXRhbHMgfSA9IHJlcXVpcmUoJy4vcGV0YWxzJyk7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHNhdmVHYW1lKClcclxue1xyXG4gICAgbGV0IHNhdmUgPSB7XHJcbiAgICAgICAgc2tpbGxzOiB7fSwgLy8gVGhpcyB3aWxsIGhvbGQgdGhlIGV4cGVyaWVuY2UgYW5kIGxldmVsIGZvciBlYWNoIHNraWxsXHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlczoge30sIC8vIFRoaXMgd2lsbCBob2xkIHRoZSB2YWx1ZSBmb3IgZWFjaCBjcmFmdGVkIGl0ZW1cclxuICAgICAgICByZXNvdXJjZXM6IHt9LFxyXG4gICAgICAgIHRvb2xzOiBbXSxcclxuICAgICAgICBzdGFnZXM6IFtdLFxyXG4gICAgICAgIHVubG9ja3M6IHt9LFxyXG4gICAgICAgIGpvYnM6IHt9LFxyXG4gICAgICAgIGJ1aWxkaW5nczoge30sXHJcbiAgICAgICAgdGltZToge30sXHJcbiAgICAgICAgYWxsVmlzaWJsZUJ1dHRvbnM6IFtdLFxyXG4gICAgICAgIG1lc3NhZ2U6IFtdLFxyXG4gICAgICAgIGNvbm5lY3Rpb25zOiBuZXcgTWFwKCksXHJcbiAgICAgICAgcGVya3M6IFtdLFxyXG4gICAgICAgIGZhY3Rvcmllczoge30sXHJcbiAgICAgICAgcHJlc3RpZ2U6IHt9LFxyXG4gICAgICAgIG5ld0J1aWxkaW5nczoge30sXHJcbiAgICAgICAgYXVkaW9Wb2x1bWU6IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEV4dHJhY3QgZXhwIGFuZCBsZXZlbCBmcm9tIHNraWxscyBhbmQgc2F2ZSB0byBzYXZlLnNraWxsc1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKVxyXG4gICAge1xyXG4gICAgICAgIHNhdmUuc2tpbGxzW3NraWxsXSA9IHtcclxuICAgICAgICAgICAgZXhwOiBza2lsbHNbc2tpbGxdLmV4cCxcclxuICAgICAgICAgICAgbGV2ZWw6IHNraWxsc1tza2lsbF0ubGV2ZWxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV4dHJhY3QgdmFsdWUgZnJvbSBjcmFmdGVkUmVzb3VyY2VzIGFuZCBzYXZlIHRvIHNhdmUuY3JhZnRlZEl0ZW1zXHJcbiAgICBmb3IgKGxldCBpdGVtIGluIGNyYWZ0ZWRSZXNvdXJjZXMpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCFzYXZlLmNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0gPSB7IHZhbHVlOiAwLCBjcmFmdGVkT25jZTogZmFsc2UgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNhdmUuY3JhZnRlZFJlc291cmNlc1tpdGVtXS52YWx1ZSA9IGdldENyYWZ0ZWRSZXNvdXJjZShpdGVtKTtcclxuICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0uY3JhZnRlZE9uY2UgPSBjcmFmdGVkUmVzb3VyY2VzW2l0ZW1dLmNyYWZ0ZWRPbmNlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpdGVtIGluIHJlc291cmNlcylcclxuICAgIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgaXRlbSBleGlzdHMgaW4gdGhlIHNhdmUucmVzb3VyY2VzIG9iamVjdC4gSWYgbm90LCBpbml0aWFsaXplIGl0LlxyXG4gICAgICAgIGlmICghc2F2ZS5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzYXZlLnJlc291cmNlc1tpdGVtXSA9IHsgdmFsdWU6IDAsIG1heDogMCB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2F2ZS5yZXNvdXJjZXNbaXRlbV0udmFsdWUgPSBnZXRNYXRlcmlhbChpdGVtLCByZXNvdXJjZXMpO1xyXG4gICAgICAgIHNhdmUucmVzb3VyY2VzW2l0ZW1dLm1heCA9IGdldE1heChpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlLnRvb2xzID0gZ2V0QWxsVG9vbHMoKTtcclxuICAgIHNhdmUuc3RhZ2VzID0gZ2V0QWxsU3RhZ2VzKCk7XHJcbiAgICBzYXZlLmpvYnMgPSBqb2JDb3VudHM7XHJcbiAgICB0cnkgeyBzYXZlLnBlcmtzID0gW25ldyBTZXQoZ2V0QWxsUGVya3MoKSldOyB9XHJcbiAgICBjYXRjaCAoZSkgeyBzYXZlLnBlcmtzID0gW107IGNvbnNvbGUuZXJyb3IoJ3NhdmluZyBwZXJrcyBlcnJvcicsIGUpOyB9XHJcbiAgICBzYXZlLmF1ZGlvVm9sdW1lID0geyAnbXVzaWMnOiBnZXRNdXNpY1ZvbHVtZSgpLCAnc2Z4JzogZ2V0U2Z4Vm9sdW1lKCkgfTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBzYXZlLmNvbm5lY3Rpb25zID0gQXJyYXkuZnJvbShnZXRDb25uZWN0aW9ucygpLmVudHJpZXMoKSk7XHJcblxyXG4gICAgZm9yIChsZXQgdSBpbiBwb25kZXJzKVxyXG4gICAge1xyXG4gICAgICAgIHNhdmUudW5sb2Nrc1t1XSA9IGlzUG9uZGVyZWQodSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGxhc3ROZXdCdWlsZGluZyA9IG51bGw7XHJcbiAgICBmb3IgKGxldCBiIGluIGJ1aWxkaW5ncylcclxuICAgIHtcclxuICAgICAgICBzYXZlLmJ1aWxkaW5nc1tiXSA9IGJ1aWxkaW5nc1tiXS5jb3VudDtcclxuICAgICAgICBpZiAoYnVpbGRpbmdzW2JdLmhhc093blByb3BlcnR5KCduYW1lJykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBzYXZlIG5ldyBidWlsZGluZyBkYXRhIFxyXG4gICAgICAgICAgICBzYXZlLm5ld0J1aWxkaW5nc1tiXSA9IGJ1aWxkaW5nc1tiXTtcclxuICAgICAgICAgICAgbGFzdE5ld0J1aWxkaW5nID0gYnVpbGRpbmdzW2JdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhhbGxWaXNpYmxlQnV0dG9ucy52YWx1ZXMoKSk7XHJcbiAgICBmb3IgKGxldCBhIGluIGFsbFZpc2libGVCdXR0b25zKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgICAgIHNhdmUuYWxsVmlzaWJsZUJ1dHRvbnMucHVzaChhKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzYXZlLmFsbFZpc2libGVCdXR0b25zKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHRyYWN0VGV4dEZyb21IVE1MKGh0bWxTdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWxTdHJpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gZGl2LnRleHRDb250ZW50O1xyXG4gICAgICAgIGNvbnN0IHNwYW5UZXh0ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKS50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt0ZXh0Q29udGVudCwgc3BhblRleHRdO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE1lc3NhZ2VUb29sdGlwKClcclxuICAgIHtcclxuICAgICAgICAvLyBHZXQgbW9zdCByZWNlbnQgYnVpbGRpbmdcclxuICAgICAgICAvLyByZXR1cm4gbWVzc2FnZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNhbG9uZVwiKS5nZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBEZXNjJyk7XHJcbiAgICAgICAgbGV0IG5lZWRzID0gXCJZb3UgZmVlbCBwZWNraXNoIGZvciBzb21lIHNlYWZvb2QuXCI7XHJcbiAgICAgICAgaWYgKGxhc3ROZXdCdWlsZGluZyAmJiBsYXN0TmV3QnVpbGRpbmcuY29zdClcclxuICAgICAgICAgICAgbmVlZHMgPSAnWW91IGZlZWwgYSBzdHJhbmdlLCBjb25zdHJ1Y3RpdmUgdXJnZSB0byBhY3F1aXJlICcgKyBPYmplY3Qua2V5cyhsYXN0TmV3QnVpbGRpbmcuY29zdCkuam9pbignLCAnKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIHRvb2x0aXA6JywgbmVlZHMpO1xyXG4gICAgICAgIHJldHVybiBuZWVkcztcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nKSlcclxuICAgIHtcclxuICAgICAgICBzYXZlLmZhY3Rvcmllc1trZXldID0gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGh0bWxTdHJpbmcgPSByZXF1aXJlKCcuL21haW4nKS5nZXRNZXNzYWdlKCkuaW5uZXJIVE1MO1xyXG4gICAgY29uc3QgbWVzc2FnZVRvb2x0aXAgPSBnZXRNZXNzYWdlVG9vbHRpcCgpO1xyXG4gICAgY29uc3QgbWVzc2FnZUFycmF5ID0gZXh0cmFjdFRleHRGcm9tSFRNTChodG1sU3RyaW5nKTsgLy8gW21lc3NhZ2UsIHNwYW5dXHJcbiAgICBtZXNzYWdlQXJyYXkucHVzaChtZXNzYWdlVG9vbHRpcCk7XHJcbiAgICBzYXZlLm1lc3NhZ2UgPSBtZXNzYWdlQXJyYXk7XHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHByZXN0aWdlKSlcclxuICAgIHtcclxuICAgICAgICBzYXZlLnByZXN0aWdlW2tleV0gPSB7IGNvc3Q6IHZhbC5jb3N0LCBsZXZlbDogdmFsLmxldmVsIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coY29tYmluZWRUZXh0KTsgLy8gXCJZb3UgZmluZCB5b3Vyc2VsZiBhbG9uZSBpbiBhIGZvcmVzdFwiXHJcbiAgICAvLyBjb25zb2xlLmxvZyhzcGFuVGV4dCk7IC8vIFwiYWxvbmVcIlxyXG5cclxuXHJcbiAgICBzYXZlLnRpbWVbJ3RvdGFsX3RpbWUnXSA9IHRvdGFsX3RpbWU7XHJcbiAgICBzYXZlLnRpbWVbJ3RpbWVfb2Zfc2F2ZSddID0gRGF0ZS5ub3coKTtcclxuICAgIC8vIFlvdSBjYW4gbm93IHVzZSB0aGUgc2F2ZSBvYmplY3QgdG8gc3RvcmUgdGhlIGRhdGEgc29tZXdoZXJlIG9yIGRpc3BsYXkgaXQgdG8gdGhlIHVzZXJcclxuXHJcbiAgICBjb25zb2xlLmxvZyhzYXZlKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHNhdmUpKTtcclxuXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNhdmVcIiwgSlNPTi5zdHJpbmdpZnkoc2F2ZSkpO1xyXG4gICAgbG9nRXZlbnQoZ2V0QW5hbHl0aWNzKCksICdzYXZlJywgc2F2ZSk7XHJcbiAgICByZXR1cm4gc2F2ZTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGxvYWRCdWlsZGluZ3Moc2F2ZWdhbWUpXHJcbntcclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLm5ld0J1aWxkaW5ncyAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgZm9yIChsZXQgYiBpbiBzYXZlZ2FtZS5uZXdCdWlsZGluZ3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0cnkgeyBidWlsZGluZ3NbYl0gPSBzYXZlZ2FtZS5uZXdCdWlsZGluZ3NbYl07IH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IGNvbnNvbGUud2FybignZXJyb3Igd2l0aCBidWlsZGluZycsIGIsIGVycm9yKTsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmJ1aWxkaW5ncyAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgZm9yIChsZXQgYiBpbiBzYXZlZ2FtZS5idWlsZGluZ3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhiLCBzYXZlZ2FtZS5idWlsZGluZ3NbYl0pO1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRpbmdzW2JdLmNvdW50ID0gc2F2ZWdhbWUuYnVpbGRpbmdzW2JdO1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGJ1dHRvbiB0ZXh0XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVpbGRpbmdzW2JdLmNvdW50ID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50KGIsIGJ1aWxkaW5nc1tiXS5jb3VudCwgYnVpbGRpbmdzW2JdLmVtb2ppKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjb3N0cyBvZiBhbGwgdGhlIGJ1aWxkaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZXJyb3Igd2l0aCBidWlsZGluZycsIGIsIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRHYW1lKClcclxue1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIkxvYWRpbmcgR2FtZVwiKTtcclxuXHJcbiAgICAvLyBHZXQgVXNlciBJRFxyXG4gICAgaWYgKCFsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGxheWVyX3VpZCcpKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IG5ld1VpZCA9IGdlbmVyYXRlVW5pcXVlSUQoKTsgLy8gUmVwbGFjZSB3aXRoIHlvdXIgVUlEIGdlbmVyYXRpb24gbG9naWNcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGxheWVyX3VpZCcsIG5ld1VpZCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwbGF5ZXJVaWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGxheWVyX3VpZCcpO1xyXG5cclxuXHJcblxyXG5cclxuICAgIHZhciBzYXZlZ2FtZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzYXZlXCIpKTtcclxuICAgIGNvbnNvbGUubG9nKHNhdmVnYW1lKTtcclxuXHJcbiAgICBsb2dFdmVudChnZXRBbmFseXRpY3MoKSwgJ2xvYWQnLCB7IHNhdmVnYW1lOiBzYXZlZ2FtZSwgcGxheWVyVWlkOiBwbGF5ZXJVaWQgfSk7XHJcblxyXG4gICAgaWYgKHNhdmVnYW1lID09PSBudWxsKVxyXG4gICAge1xyXG4gICAgICAgIC8vIE5FVyBHQU1FXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5yZXNvdXJjZXMgIT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICB7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBzYXZlZ2FtZS5yZXNvdXJjZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoaS52YWx1ZU9mKCkgPT09IFwidW5kZWZpbmVkXCIgfHwgaSA9PT0gbnVsbCB8fCByZXNvdXJjZXNbaV0gPT09IG51bGwpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZSgnLi9zZXRNYXRlcmlhbCcpLnNldE1hdGVyaWFsKGksIHNhdmVnYW1lLnJlc291cmNlc1tpXS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXF1aXJlKCcuL3NldE1heCcpLnNldE1heChpLCBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0ubWF4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZXJyb3Igd2l0aCBsb2FkaW5nIHJlc291cmNlJywgaSwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJVcGRhdGluZyByZXNvdXJjZXMgZm9yIFwiICsgaSArIFwiIHRvIFwiICsgc2F2ZWdhbWUucmVzb3VyY2VzW2ldLnZhbHVlLCBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0ubWF4KTtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbaV0udmFsdWUgIT0gMCkgcmVxdWlyZSgnLi9zaWRlYmFyJykudXBkYXRlRGlzcGxheVZhbHVlKGkpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcilcclxuICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRQZXRhbHMoMTApO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuc2tpbGxzICE9PSAndW5kZWZpbmVkJylcclxuICAgIHtcclxuICAgICAgICBmb3IgKGxldCBpIGluIHNhdmVnYW1lLnNraWxscylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNraWxsc1tpXS5leHAgPSBzYXZlZ2FtZS5za2lsbHNbaV0uZXhwO1xyXG4gICAgICAgICAgICBza2lsbHNbaV0ubGV2ZWwgPSBzYXZlZ2FtZS5za2lsbHNbaV0ubGV2ZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlcyAhPT0gXCJ1bmRlZmluZWRcIilcclxuICAgIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgb2YgT2JqZWN0LmtleXMoc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlcykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9hZGluZyBjcmFmdGVkJywga2V5LCBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzW2tleV0sIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XSk7XHJcbiAgICAgICAgICAgIGlmICghY3JhZnRlZFJlc291cmNlc1trZXldKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlID0gc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZSkpIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS5jcmFmdGVkT25jZSA9IHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXNba2V5XS5jcmFmdGVkT25jZTtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vc2lkZWJhcicpLnVwZGF0ZURpc3BsYXlWYWx1ZShrZXkpO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpXHJcbiAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS50b29scyAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gcGxheWVyVG9vbHMgPSBzYXZlZ2FtZS50b29scztcclxuICAgICAgICAvLyBVbmlvbiB0aGUgdG9vbCBsaXN0cyB0b2dldGhlclxyXG4gICAgICAgIGxldCB1bmlvbiA9IFsuLi5uZXcgU2V0KFsuLi5nZXRBbGxUb29scygpLCAuLi5zYXZlZ2FtZS50b29sc10pXTtcclxuICAgICAgICAvLyBwbGF5ZXJUb29scyA9IHVuaW9uO1xyXG4gICAgICAgIGZvciAobGV0IHRvb2wgaW4gdW5pb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhZGRUb29sKHRvb2wpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZm9yIChsZXQgdCBpbiBwbGF5ZXJUb29scykge1xyXG4gICAgICAgIC8vICAgICB1cGRhdGVUb29sVUkocGxheWVyVG9vbHNbdF0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnN0YWdlcyAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgZm9yIChsZXQgcyBpbiBzYXZlZ2FtZS5zdGFnZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtYWtlVmlzaWJsZShzYXZlZ2FtZS5zdGFnZXNbc10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuam9icyAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gam9iQ291bnRzID0gc2F2ZWdhbWUuam9icztcclxuICAgICAgICBmb3IgKGxldCBqIGluIHNhdmVnYW1lLmpvYnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBqb2JDb3VudHNbal0gPSBzYXZlZ2FtZS5qb2JzW2pdO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhqKTtcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheShqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnVubG9ja3MgIT09ICd1bmRlZmluZWQnKVxyXG4gICAge1xyXG4gICAgICAgIGZvciAobGV0IHUgaW4gc2F2ZWdhbWUudW5sb2NrcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwb25kZXJzW3VdLmlzUG9uZGVyZWQgPSBzYXZlZ2FtZS51bmxvY2tzW3VdO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignT2xkIHNhdmUgZGF0YSBpbmNsdWRlcyBvYnNvbGV0ZSBwb25kZXInLCB1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNQb25kZXJlZCgnc2tpbGxzVGFibGUnKSlcclxuICAgIHtcclxuICAgICAgICBwb3B1bGF0ZVNraWxsc1RhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUGVya3MgYmVmb3JlIGJ1aWxkaW5ncyB0byB1cGRhdGUgY29zdHNcclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUucGVya3MgIT09ICd1bmRlZmluZWQnKVxyXG4gICAge1xyXG4gICAgICAgIC8vIG15UGVya3MgPSBzYXZlZ2FtZS5wZXJrcztcclxuICAgICAgICBmb3IgKGxldCBbaSwgcGVya10gb2YgT2JqZWN0LmVudHJpZXMoc2F2ZWdhbWUucGVya3MpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYWRkUGVyayhwZXJrKTtcclxuICAgICAgICAgICAgcmVxdWlyZSgnLi9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbicpLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKHBlcmspO1xyXG4gICAgICAgICAgICBpZiAocGFyc2VGbG9hdChpKSA+IDEwMCkgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnByZXN0aWdlICE9PSAndW5kZWZpbmVkJylcclxuICAgIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoc2F2ZWdhbWUucHJlc3RpZ2UpKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzZXRQcmVzdGlnZUNvc3Qoa2V5LCB2YWxbJ2Nvc3QnXSk7XHJcbiAgICAgICAgICAgICAgICBzZXRQcmVzdGlnZUxldmVsKGtleSwgdmFsWydsZXZlbCddKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZXJyb3Igd2l0aCBsb2FkaW5nIHByZXN0aWdlJywga2V5LCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZEJ1aWxkaW5ncyhzYXZlZ2FtZSk7XHJcbiAgICAvLyBUT0RPOiBVcGRhdGUgYnVpbGRpbmdzIGNvc3RzXHJcblxyXG4gICAgLy8gQWZ0ZXIgcG9uZGVycyBhbmQgYnVpbGRpbmdzIHdlIGNhbiByZWNhbGN1bGF0ZSBtYXggY2xvbmVzXHJcbiAgICByZWNhbGNNYXhDbG9uZXMoKTtcclxuICAgIHVwZGF0ZUJ1aWxkaW5nTGlzdCgpO1xyXG5cclxuXHJcbiAgICAvLyBJZiB3ZSBoYXZlIGEgY2xvbmUsIHRoZW4gd2UgYXRlIGZpc2hcclxuICAgIHNldEF0ZUZpc2gocmVzb3VyY2VzLmNsb25lcy5tYXggPj0gMSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnYXRlZmlzaCcsIGF0ZUZpc2gpO1xyXG4gICAgaWYgKGdldEF0ZUZpc2goKSlcclxuICAgIHtcclxuICAgICAgICBjb25zdCBmaXNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlYXRGaXNoXCIpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmaXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgICAvLyBDaGFuZ2UgdGhlIG1lc3NhZ2UgdG8gdGhlIGxhdGVzdCBvbmVcclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUubWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gW2Z1bGwgbWVzc2FnZSwgc3BhbiwgdG9vbHRpcF1cclxuICAgICAgICByZXF1aXJlKCcuL2NoYW5nZU1lc3NhZ2UnKS5jaGFuZ2VNZXNzYWdlKHNhdmVnYW1lLm1lc3NhZ2VbMF0sIHNhdmVnYW1lLm1lc3NhZ2VbMV0sIHNhdmVnYW1lLm1lc3NhZ2VbMl0gPyBzYXZlZ2FtZS5tZXNzYWdlWzJdIDogbnVsbCk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgcmVzb3VyY2VzIGVhcm5lZCB3aGlsZSBhd2F5XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnRpbWUgIT09ICd1bmRlZmluZWQnKVxyXG4gICAge1xyXG4gICAgICAgIHJlcXVpcmUoJy4vbWFpbicpLnNldFRvdGFsVGltZShzYXZlZ2FtZS50aW1lW3RvdGFsX3RpbWVdKTtcclxuICAgICAgICBjb25zdCB0aW1lX2RpZmZlcmVuY2UgPSBEYXRlLm5vdygpIC0gc2F2ZWdhbWUudGltZVsndGltZV9vZl9zYXZlJ107XHJcbiAgICAgICAgZm9yIChsZXQgciBpbiByZXNvdXJjZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBpbmMgPSBjYWxjSW5jcmVhc2UociwgdGltZV9kaWZmZXJlbmNlKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW3JdLnZhbHVlICs9IGluYztcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cociwgdGltZV9kaWZmZXJlbmNlLCBpbmMpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW3JdLnZhbHVlID4gcmVzb3VyY2VzW3JdLm1heCkgcmVzb3VyY2VzW3JdLnZhbHVlID0gcmVzb3VyY2VzW3JdLm1heDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyk7XHJcbiAgICAgICAgZm9yIChsZXQgYSBpbiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNldFZpc2libGVCdXR0b24oYSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmNvbm5lY3Rpb25zICE9PSAndW5kZWZpbmVkJylcclxuICAgIHtcclxuICAgICAgICBzZXRDb25uZWN0aW9ucyhuZXcgTWFwKHNhdmVnYW1lLmNvbm5lY3Rpb25zKSk7XHJcblxyXG4gICAgICAgIGlmIChnZXRDb25uZWN0aW9ucygpLnNpemUgPT09IDApIHNldENvbm5lY3Rpb25zKG5ldyBNYXAoKSk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhnZXRDb25uZWN0aW9ucygpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZm9yIChsZXQgam9iIGluIGpvYkNvdW50cylcclxuICAgIHtcclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2IsIGpvYkNvdW50c1tqb2JdKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVFbW9qaURpc3BsYXkoKTtcclxuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5mYWN0b3JpZXMgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhzYXZlZ2FtZS5mYWN0b3JpZXMpKVxyXG4gICAgICAgICAgICBpZiAodmFsID4gMClcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdmFsOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEZhY3Rvcnkoa2V5KTtcclxuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5hdWRpb1ZvbHVtZSAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICB7XHJcbiAgICAgICAgc2V0TXVzaWNWb2x1bWUoc2F2ZWdhbWUuYXVkaW9Wb2x1bWVbJ211c2ljJ10pO1xyXG4gICAgICAgIHNldFNmeFZvbHVtZShzYXZlZ2FtZS5hdWRpb1ZvbHVtZVsnc2Z4J10pO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIHNhdmUgdGhlIHRpbWUgd2hlbiB0aGUgcGxheWVyIGV4aXRzIHRoZSBicm93c2VyIHRhYlxyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiBzYXZlR2FtZSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzYXZlR2FtZSxcclxuICAgIGxvYWRHYW1lXHJcbn07XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5zYXZlR2FtZSA9IHNhdmVHYW1lOyIsIi8qKlxyXG4gKiBTZWxlY3QgdGhlIHBlcmsgYnV0dG9uIHRoYXQgd2UndmUgY2hvc2VuIGFuZCBkaXNhYmxlIHRoZSBvdGhlcnNcclxuICogQHBhcmFtIHtzdHJpbmd9IGFiaWxpdHlOYW1lIE5hbWUgb2YgdGhlIGNob3NlbiBwZXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBzZWxlY3RDb3JyZWN0UGVya0J1dHRvbihhYmlsaXR5TmFtZSlcclxue1xyXG4gICAgLy8gRGlzYWJsZSBhbGwgYnV0dG9uc1xyXG4gICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGllck9uZUJ1dHRvbicpO1xyXG4gICAgbGV0IHNlbGVjdGVkQnV0dG9uO1xyXG4gICAgdHJ5IHsgc2VsZWN0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHthYmlsaXR5TmFtZX1QZXJrYCk7IH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICBpZiAoc2VsZWN0ZWRCdXR0b24pXHJcbiAgICB7XHJcbiAgICAgICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBFbmFibGUgYW5kIGhpZ2hsaWdodCB0aGUgc2VsZWN0ZWQgYnV0dG9uXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhzZWxlY3RlZEJ1dHRvbiwgYWJpbGl0eU5hbWUpO1xyXG4gICAgICAgIHNlbGVjdGVkQnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICBzZWxlY3RlZEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgfSBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBidXR0b24gZm91bmQgd2l0aCBhYmlsaXR5IG5hbWU6ICcgKyBhYmlsaXR5TmFtZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zZWxlY3RDb3JyZWN0UGVya0J1dHRvbiA9IHNlbGVjdENvcnJlY3RQZXJrQnV0dG9uOyIsImNvbnN0IHsgdXBkYXRlVG90YWwgfSA9IHJlcXVpcmUoXCIuL2pvYnNcIik7XHJcbmNvbnN0IHsgdXBkYXRlRGlzcGxheVZhbHVlIH0gPSByZXF1aXJlKFwiLi9zaWRlYmFyXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9yZXNvdXJjZXNcIik7XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cclxuICovXHJcbmZ1bmN0aW9uIHNldE1hdGVyaWFsKG1hdGVyaWFsLCBudW0pIHtcclxuICAgIC8vIENoZWNrIGlmIG1hdGVyaWFsIGV4aXN0c1xyXG4gICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSA9IG51bTtcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShtYXRlcmlhbCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG59XHJcbmV4cG9ydHMuc2V0TWF0ZXJpYWwgPSBzZXRNYXRlcmlhbDsiLCJjb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9yZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgdXBkYXRlVG90YWwgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IHVwZGF0ZURpc3BsYXlWYWx1ZSB9ID0gcmVxdWlyZShcIi4vc2lkZWJhclwiKTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHRoZSBtYXggdmFsdWUgZm9yIGEgbWF0ZXJpYWwuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbCBUaGUgbmFtZSBvZiB0aGUgbWF0ZXJpYWwuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciBvZiB0aGUgbWF0ZXJpYWwuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRNYXgobWF0ZXJpYWwsIG51bSkge1xyXG4gICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS5tYXggPSBudW07XHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpO1xyXG4gICAgdXBkYXRlVG90YWwoKTtcclxufVxyXG5leHBvcnRzLnNldE1heCA9IHNldE1heDsiLCJjb25zdCB7IGRyYXdBbGxDb25uZWN0aW9ucyB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgcmVmcmVzaFZhbHVlcywgYmF0dGxlUmVzdWx0LCBzaW11bGF0ZUJhdHRsZSB9ID0gcmVxdWlyZSgnLi9jb21iYXQnKTtcclxuY29uc3QgeyBwbGF5U291bmQgfSA9IHJlcXVpcmUoJy4vYXVkaW8nKTtcclxuXHJcbmZ1bmN0aW9uIGdldEN1cnJlbnRUYWIoKVxyXG57XHJcbiAgICBsZXQgdGFiID0gJyc7XHJcbiAgICBmb3IgKGxldCBjb250ZW50IG9mIHRhYkNvbnRhaW5lcnMpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRhYiA9IGNvbnRlbnQuaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhYjtcclxufVxyXG5leHBvcnRzLmdldEN1cnJlbnRUYWIgPSBnZXRDdXJyZW50VGFiO1xyXG4vLyBTd2l0Y2ggdGFic1xyXG5sZXQgdGFiQ29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLWNvbnRlbnQgPiAuY29udGVudFwiKTsgLy8gRGlyZWN0IGNoaWxkcmVuIG9ubHlcclxuXHJcbmZ1bmN0aW9uIHNob3dUYWIodGFiTmFtZSlcclxue1xyXG4gICAgLy9jb25zb2xlLmxvZyhcInNob3cgdGFiOiBcIiArIHRhYk5hbWUpO1xyXG4gICAgLy8gR2V0IGFsbCBtYWluIGNvbnRhaW5lciBkaXZzIGFuZCBoaWRlIHRoZW1cclxuICAgIGxldCBwcmV2VGFiID0gZ2V0Q3VycmVudFRhYigpO1xyXG4gICAgY29uc3QgYWN0aXZlQ29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYk5hbWUpO1xyXG5cclxuICAgIGFjdGl2ZUNvbnRlbnQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09IHByZXZUYWIpIHJldHVybjtcclxuXHJcbiAgICBwbGF5U291bmQoJy4vYXVkaW8vdGFiLndhdicpO1xyXG5cclxuXHJcbiAgICBsZXQgcHJldlRhYkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmV2VGFiKTtcclxuICAgIGlmIChwcmV2VGFiRWxlbWVudClcclxuICAgIHtcclxuICAgICAgICBwcmV2VGFiRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICBwcmV2VGFiRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgfVxyXG4gICAgLy8gR2V0IGFsbCB0YWIgYnV0dG9ucyBhbmQgcmVtb3ZlIHRoZSBhY3RpdmUgY2xhc3NcclxuICAgIGxldCB0YWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YWItYnV0dG9uXCIpO1xyXG4gICAgZm9yIChsZXQgdGFiIG9mIHRhYnMpXHJcbiAgICB7XHJcbiAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hvdyB0aGUgY2xpY2tlZCB0YWIncyBtYWluIGNvbnRhaW5lciBkaXYgYW5kIG1ha2UgdGhlIHRhYiBidXR0b24gYWN0aXZlXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgYWN0aXZlQ29udGVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpOyB9LCAxMDApO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PlxyXG4gICAge1xyXG4gICAgICAgIGFjdGl2ZUNvbnRlbnQuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDIwMCk7XHJcblxyXG5cclxuICAgIC8vIEdldCB0aGUgY2xpY2tlZCB0YWIgYnV0dG9uIGFuZCBtYWtlIGl0IGFjdGl2ZVxyXG4gICAgY29uc3QgdGFiU3RyaW5nID0gYCMke3RhYk5hbWV9QnV0dG9uYDtcclxuICAgIGxldCBhY3RpdmVUYWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhYlN0cmluZyk7XHJcblxyXG4gICAgaWYgKGFjdGl2ZVRhYkJ1dHRvbikgYWN0aXZlVGFiQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09ICdqb2JzVGFiJylcclxuICAgICAgICBkcmF3QWxsQ29ubmVjdGlvbnMoKTtcclxuXHJcbiAgICBpZiAodGFiTmFtZSA9PT0gJ2NvbWJhdFRhYicpXHJcbiAgICB7XHJcbiAgICAgICAgcmVmcmVzaFZhbHVlcygpO1xyXG5cclxuICAgICAgICAvLyBXaGVuIHJldHVybmluZyB0byB0aGUgY29tYmF0VGFiLCByZXNvbHZlIHRoZSBiYXR0bGUgaWYgaXQgaGFzbid0IGJlZW4gcmVzb2x2ZWQgeWV0XHJcbiAgICAgICAgaWYgKGJhdHRsZVJlc3VsdCA9PT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpbXVsYXRlQmF0dGxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzI2Z1bGxzY3JlZW4nKTtcclxuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5LFxyXG4gICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gTWF0aC5taW4oYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LFxyXG4gICAgICAgIGh0bWwuY2xpZW50SGVpZ2h0LCBodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5vZmZzZXRIZWlnaHQpOztcclxuICAgIHNldFRpbWVvdXQoKCkgPT5cclxuICAgIHtcclxuICAgICAgICBjYW52YXMud2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCxcclxuICAgICAgICAgICAgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImNoYW5nZWQgY2FudmFzIGRpbWVuc2lvbnNcIiwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICB9LCAxMDApO1xyXG4gICAgLy9jb25zb2xlLmxvZyhwcmV2VGFiLCAnPicsIHRhYk5hbWUpO1xyXG5cclxuICAgIC8vIHVwZGF0ZVNpZGViYXIoKTtcclxufVxyXG5leHBvcnRzLnNob3dUYWIgPSBzaG93VGFiO1xyXG4iLCIvLyBAdHMtbm9jaGVja1xyXG5jb25zdCB7IGNhbGNJbmNyZWFzZSwgdXBkYXRlUmF0ZXMgfSA9IHJlcXVpcmUoXCIuL2NhbGNJbmNyZWFzZVwiKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgZ2V0RmFjdG9yeVByb2R1Y3Rpb24gfSA9IHJlcXVpcmUoXCIuL2ZhY3RvcnlcIik7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vY3JhZnRlZFJlc291cmNlc1wiKTtcclxuY29uc3QgeyBzZXRSYXRlIH0gPSByZXF1aXJlKFwiLi9qc29uL2N1cnJlbnRSYXRlc1wiKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcmVzb3VyY2VzXCIpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUdyb3VwVmlzaWJpbGl0eShncm91cE5hbWUpIHtcclxuICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRvZ2dsZS0ke2dyb3VwTmFtZX1gKTsgLy8gRW5zdXJlIHlvdSBoYXZlIHRoaXMgYnV0dG9uIHdpdGggdGhlIGlkICd0b2dnbGUtZ3JvdXBOYW1lJ1xyXG5cclxuICAgIEFycmF5LmZyb20oZ3JvdXAuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1AnKSBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGdyb3VwIGlzIGN1cnJlbnRseSBoaWRkZW5cclxuICAgIGlmICh0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdhcnJvdy1kb3duJykpIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctZG93bicpO1xyXG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhcnJvdy1yaWdodCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctcmlnaHQnKTtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYXJyb3ctZG93bicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIGEgZ3JvdXAgY29udGFpbmVyXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlR3JvdXBDb250YWluZXIoZ3JvdXBOYW1lKSB7XHJcbiAgICBjb25zdCBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZ3JvdXBDb250YWluZXIuY2xhc3NOYW1lID0gJ3Jlc291cmNlR3JvdXAnO1xyXG4gICAgZ3JvdXBDb250YWluZXIuaWQgPSBgZ3JvdXAtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi50ZXh0Q29udGVudCA9IGdyb3VwTmFtZS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgdG9nZ2xlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0b2dnbGVHcm91cFZpc2liaWxpdHkoZ3JvdXBOYW1lKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc05hbWUgPSAndG9nZ2xlLWJ1dHRvbiBhcnJvdy1kb3duJztcclxuICAgIHRvZ2dsZUJ1dHRvbi5pZCA9IGB0b2dnbGUtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2dnbGVCdXR0b24pO1xyXG4gICAgcmV0dXJuIGdyb3VwQ29udGFpbmVyO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIEl0ZXJhdGVzIG92ZXIgZWFjaCBncm91cCBhbmQgcmVzb3VyY2UgdG8gY3JlYXRlIHRhZ3NcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJlc291cmNlVGFncyh3aXRoR3JvdXBzKSB7XHJcbiAgICAvLyBpZiAoaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJykpIHdpdGhHcm91cHMgPSB0cnVlO1xyXG4gICAgY29uc29sZS5sb2coXCJpbml0aWFsemluZyByZXNvdXJjZSB0YWdzXCIpO1xyXG4gICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgLy8gRGVmaW5lIGdyb3VwcyBmb3IgeW91ciByZXNvdXJjZXNcclxuICAgIGNvbnN0IHJlc291cmNlR3JvdXBzID0ge1xyXG4gICAgICAgIHNwZWNpYWw6IFsnY2xvbmVzJywgJ2h1c2tzJywgJ3BvbmRlcicsICd2aW9sZW5jZSddLFxyXG4gICAgICAgIGZvb2Q6IFsnYmVycmllcycsICdmaXNoJywgJ2dhbWUnLCAnd2hlYXQnLCAnYnJlYWQnLCAnZnJlc2h3YXRlciddLFxyXG4gICAgICAgIG1hdGVyaWFsczogWydzdGlja3MnLCAndmluZXMnLCAncm9ja3MnLCAnd29vZCcsICdzYW5kJywgJ2NsYXknLCAnaGlkZXMnLCAnaGVyYnMnXSxcclxuICAgICAgICB0b29sczogWydzaGFycHJvY2tzJywgJ3JvcGUnLCAnaGFuZGxlJywgJ2Zpc2hpbmdyb2QnLCAncGlja2F4ZScsICdheGUnLCAnc3BlYXInLCAnc3RhZmYnXSxcclxuICAgICAgICBhZHZhbmNlZDogWydnbGFzcycsICdwYXBlcicsICdjcmF0ZXMnLCAnbWVkaWNpbmUnLCAnbGVhdGhlciddLFxyXG4gICAgICAgIG1ldGFsOiBbJ29yZScsICdnb2xkJywgJ2lyb24nLCAnc2lsdmVyJywgJ3N0ZWVsJ10sXHJcbiAgICAgICAgY29uc3RydWN0aW9uOiBbJ2JyaWNrcycsICdiZWFtcycsICduYWlscycsICdzbGFicycsICdjb25jcmV0ZSddLFxyXG4gICAgICAgIC8vIC4uLiBBZGQgb3RoZXIgZ3JvdXBzIGFzIG5lY2Vzc2FyeVxyXG4gICAgfTtcclxuICAgIGZvciAobGV0IFtncm91cE5hbWUsIGdyb3VwT2ZSZXNvdXJjZXNdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlR3JvdXBzKSkge1xyXG5cclxuICAgICAgICBncm91cE9mUmVzb3VyY2VzLmZvckVhY2gocmVzb3VyY2VOYW1lID0+IHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZS0nICsgcmVzb3VyY2VOYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghd2l0aEdyb3VwcykgZ3JvdXBOYW1lID0gbnVsbDsgLy8gU2V0IGdyb3VwIHRvIHJlc291cmNlc1xyXG5cclxuICAgICAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSBwYXJlbnRFbGVtZW50ID0gY3JlYXRlUmVzb3VyY2VUYWcocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwYXJlbnRFbGVtZW50KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBlbGVtZW50IGlmIHdlIHNob3VsZCwgb3RoZXJ3aXNlIGNyZWF0ZSBhIHJlc291cmNlIHRhZ1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZU5hbWUsIHNob3VsZEhpZGUocmVzb3VyY2VOYW1lKSwgZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKSk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRIaWRlKHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNob3VsZEhpZGUpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2hvdWxkSGlkZShyZXNvdXJjZU5hbWUpIHtcclxuXHJcbiAgICB2YXIgc2hvdWxkSGlkZSA9IHRydWU7XHJcbiAgICAvLyBmb3IgKGxldCBjIGluIHBhcmVudEVsZW1lbnQuY2xhc3NMaXN0KSB7XHJcbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coJ2hhcyBwYXNzZWQnLCByZXNvdXJjZU5hbWUsIHBhc3NlZFN0YWdlKGMpKTtcclxuICAgIC8vICAgICBpZiAocmVxdWlyZSgnLi9zdGFnZXMnKS5wYXNzZWRTdGFnZShjKSkgeyBzaG91bGRIaWRlID0gZmFsc2U7IGNvbnNvbGUubG9nKCdkb250IGhpZGUnLCByZXNvdXJjZU5hbWUsIGMpOyB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgaWYgKGdldE1hdGVyaWFsKHJlc291cmNlTmFtZSkgPiAwKSB7XHJcbiAgICAgICAgc2hvdWxkSGlkZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSAmJiByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS5pc1Zpc2libGUpIHsgc2hvdWxkSGlkZSA9IGZhbHNlOyB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ3Nob3VsZCBoaWRlPycsIHJlc291cmNlTmFtZSwgc2hvdWxkSGlkZSk7XHJcbiAgICByZXR1cm4gc2hvdWxkSGlkZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFiYnJldmlhdGVOdW1iZXIobnVtKSB7XHJcbiAgICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicpIHJldHVybiBudW07XHJcbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIHVuaXQpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAxMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMikgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMSkgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMDApIHJldHVybiByb3VuZFRvRGVjaW1hbHModmFsdWUsIDApICsgdW5pdDtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSkgKyB1bml0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJvdW5kVG9EZWNpbWFscyhudW1iZXIsIGRlY2ltYWxzKSB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcclxuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQobnVtYmVyICogZmFjdG9yKSAvIGZhY3RvcikudG9GaXhlZChkZWNpbWFscyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG51bSA8IDFlMykgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyhudW0sIDEpOyAvLyBJZiBsZXNzIHRoYW4gMSwwMDBcclxuICAgIGlmIChudW0gPCAxZTYpIHJldHVybiBmb3JtYXQobnVtIC8gMWUzLCAnSycpOyAvLyBUaG91c2FuZHNcclxuICAgIGlmIChudW0gPCAxZTkpIHJldHVybiBmb3JtYXQobnVtIC8gMWU2LCAnTScpOyAvLyBNaWxsaW9uc1xyXG4gICAgaWYgKG51bSA8IDFlMTIpIHJldHVybiBmb3JtYXQobnVtIC8gMWU5LCAnQicpOyAvLyBCaWxsaW9uc1xyXG4gICAgLy8gQWRkIG1vcmUgY2FzZXMgZm9yIGxhcmdlciBudW1iZXJzIGlmIG5lZWRlZFxyXG5cclxuICAgIGlmIChudW0gPT09IEluZmluaXR5KSBudW0gPSAn4oieJztcclxuICAgIHJldHVybiBudW0udG9TdHJpbmcoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIHJlc291cmNlIGNvdW50LCBnYWluIHJhdGVzLCBhbmQgbWF4ZXMgb2YgYWxsIHJlc291cmNlc1xyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZVNpZGViYXIoKSB7XHJcbiAgICBjb25zdCBhbGxNYXRlcmlhbHMgPSByZXF1aXJlKCcuL2pzb24vYWxsTWF0ZXJpYWxzJykuYWxsTWF0ZXJpYWxzO1xyXG4gICAgQXJyYXkuZnJvbShhbGxNYXRlcmlhbHMpLmZvckVhY2gociA9PiB7IHVwZGF0ZURpc3BsYXlWYWx1ZShyKTsgfSk7XHJcbn1cclxuXHJcblxyXG4vLyBDcmVhdGUgYWxsIG91ciByZXNvdXJjZSB0YWdzIGluIHRoZSBzaWRlYmFyXHJcbmNvbnN0IHJlc291cmNlc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZXMnKTtcclxuZnVuY3Rpb24gY3JlYXRlUmVzb3VyY2VUYWcocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpIHtcclxuICAgIC8vIGlmICghcmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHRocm93IFwiSW52YWxpZCByZXNvdXJjZTogXCIgKyByZXNvdXJjZU5hbWU7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHJlc291cmNlIHRhZyBmb3IgXCIsIHJlc291cmNlTmFtZSwgZ3JvdXBOYW1lKTtcclxuICAgIGxldCBncm91cENvbnRhaW5lcjtcclxuICAgIGlmIChncm91cE5hbWUpIHtcclxuICAgICAgICBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBncm91cC0ke2dyb3VwTmFtZX1gKTtcclxuICAgICAgICBpZiAoIWdyb3VwQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGdyb3VwQ29udGFpbmVyID0gY3JlYXRlUmVzb3VyY2VHcm91cENvbnRhaW5lcihncm91cE5hbWUpO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXBDb250YWluZXIpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYXBwZW5kaW5nJywgZ3JvdXBDb250YWluZXIsIHJlc291cmNlc0NvbnRhaW5lciwgcmVzb3VyY2VzQ29udGFpbmVyLmNoaWxkRWxlbWVudENvdW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZXMnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhncm91cENvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXNwbGF5TmFtZSA9IGNhcGl0YWxpemVGaXJzdChyZXNvdXJjZU5hbWUpLnNwbGl0KCdfJykuam9pbignICcpO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5jbGFzc05hbWUgPSBgcmVzb3VyY2VgO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmlkID0gYHJlc291cmNlLSR7cmVzb3VyY2VOYW1lfWA7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlTmFtZVNwYW4uY2xhc3NOYW1lID0gJ3Jlc291cmNlTmFtZSc7XHJcbiAgICByZXNvdXJjZU5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7cmVzb3VyY2VEaXNwbGF5TmFtZX06YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVZhbHVlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmNsYXNzTmFtZSA9ICdyZXNvdXJjZVZhbHVlJztcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmlkID0gYCR7cmVzb3VyY2VOYW1lfVZhbHVlYDtcclxuICAgIGxldCBtYXggPSAoZ2V0TWF4KHJlc291cmNlTmFtZSkgJiYgZ2V0TWF4KHJlc291cmNlTmFtZSkgPCBJbmZpbml0eSkgPyBnZXRNYXgocmVzb3VyY2VOYW1lKS50b0ZpeGVkKDIpIDogJ+KInic7XHJcblxyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4udGV4dENvbnRlbnQgPSBgJHtnZXRNYXRlcmlhbChyZXNvdXJjZU5hbWUpLnRvRml4ZWQoMil9IC8gJHttYXh9YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVJhdGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VSYXRlU3Bhbi5jbGFzc05hbWUgPSAncmVzb3VyY2VSYXRlJztcclxuICAgIHJlc291cmNlUmF0ZVNwYW4uaW5uZXJIVE1MID0gYDxzcGFuIGlkPVwiJHtyZXNvdXJjZU5hbWV9SW5jcmVhc2VSYXRlXCI+PC9zcGFuPilgO1xyXG5cclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZU5hbWVTcGFuKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZVZhbHVlU3Bhbik7XHJcbiAgICByZXNvdXJjZUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzb3VyY2VSYXRlU3Bhbik7XHJcblxyXG4gICAgZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQocmVzb3VyY2VFbGVtZW50KTtcclxuXHJcbiAgICByZXR1cm4gcmVzb3VyY2VFbGVtZW50O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICB1cGRhdGVTaWRlYmFyLFxyXG4gICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncyxcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZSxcclxuICAgIGFiYnJldmlhdGVOdW1iZXJcclxufTtcclxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIGRpc3BsYXkgdmFsdWUgb2Ygb25lIHJlc291cmNlLCBhIHNwZWNpZmljIHVwZGF0ZVNpZGViYXIoKVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWwgVGhlIG5hbWUgb2YgdGhlIHJlc291cmNlIHRvIHVwZGF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gcmVzb3VyY2VzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCMke21hdGVyaWFsfVZhbHVlYCk7XHJcbiAgICBjb25zdCBlbGVtZW50SW5jcmVhc2UgPSByZXNvdXJjZXNDb250YWluZXIucXVlcnlTZWxlY3RvcihgIyR7bWF0ZXJpYWx9SW5jcmVhc2VSYXRlYCk7XHJcblxyXG4gICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgY29uc3QgbWF4ID0gZ2V0TWF4KG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGAke2FiYnJldmlhdGVOdW1iZXIoY291bnQpfSAvICR7YWJicmV2aWF0ZU51bWJlcihtYXgpfWA7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmNvbG9yID0gJ3doaXRlJztcclxuICAgICAgICAgICAgaWYgKGNvdW50IC8gbWF4ID4gLjYpIGVsZW1lbnQuc3R5bGUuY29sb3IgPSAnI2ZmYyc7XHJcbiAgICAgICAgICAgIGlmIChjb3VudCAvIG1heCA+IC44KSBlbGVtZW50LnN0eWxlLmNvbG9yID0gJyNmZWMnO1xyXG4gICAgICAgICAgICBpZiAoY291bnQgLyBtYXggPiAuOTUpIGVsZW1lbnQuc3R5bGUuY29sb3IgPSAnI2ZjYyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudEluY3JlYXNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmMgPSBjYWxjSW5jcmVhc2UobWF0ZXJpYWwsIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgc2V0UmF0ZShtYXRlcmlhbCwgaW5jKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGluYywgZWxlbWVudEluY3JlYXNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmMgPT09IDAgfHwgTnVtYmVyLmlzTmFOKGluYykpIGVsZW1lbnRJbmNyZWFzZS5wYXJlbnRFbGVtZW50LmlubmVySFRNTCA9IGA8c3BhbiBpZD1cIiR7bWF0ZXJpYWx9SW5jcmVhc2VSYXRlXCI+PC9zcGFuPmA7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGVsZW1lbnRJbmNyZWFzZS5wYXJlbnRFbGVtZW50LmlubmVySFRNTCA9IGAke2luYyA+PSAwID8gJysnIDogJyd9PHNwYW4gaWQ9XCIke21hdGVyaWFsfUluY3JlYXNlUmF0ZVwiPiR7aW5jLnRvRml4ZWQoMil9PC9zcGFuPi9zYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRlcmlhbCwgc2hvdWxkSGlkZShtYXRlcmlhbCksIGdldE1hdGVyaWFsKG1hdGVyaWFsKSk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRIaWRlKG1hdGVyaWFsKSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlbGVtZW50LCBtYXRlcmlhbCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQm9sZCByZXNvdXJjZSB3aGVuIHdlJ3JlIGdhdGhlcmluZyBpdFxyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbbWF0ZXJpYWxdICYmIHJlc291cmNlc1ttYXRlcmlhbF0uaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIikucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyBtYXRlcmlhbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjcmFmdGVkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNjcmFmdCR7Y2FwaXRhbGl6ZUZpcnN0KG1hdGVyaWFsKX1CdXR0b25gKTtcclxuICAgIGlmIChjcmFmdGVkRWxlbWVudCkge1xyXG4gICAgICAgIGNyYWZ0ZWRFbGVtZW50LnRleHRDb250ZW50ID0gYCR7Y3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udGV4dCB8fCBjYXBpdGFsaXplRmlyc3QobWF0ZXJpYWwpfWA7XHJcblxyXG4gICAgICAgIGxldCBmYWN0b3J5Q291bnQgPSBnZXRGYWN0b3J5UHJvZHVjdGlvbihtYXRlcmlhbCk7XHJcbiAgICAgICAgaWYgKGZhY3RvcnlDb3VudCA9PT0gTmFOIHx8IGZhY3RvcnlDb3VudCA9PT0gdW5kZWZpbmVkKSBmYWN0b3J5Q291bnQgPSAwO1xyXG4gICAgICAgIGlmIChmYWN0b3J5Q291bnQgPiAwKSBjcmFmdGVkRWxlbWVudC50ZXh0Q29udGVudCArPSBgKCR7ZmFjdG9yeUNvdW50fSlgO1xyXG5cclxuICAgICAgICBzZXRSYXRlKG1hdGVyaWFsLCBmYWN0b3J5Q291bnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHVwZGF0ZVJhdGVzKCk7XHJcbn1cclxuIiwiY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyB0cmlnZ2VyRmxvYXRVcFRleHQgfSA9IHJlcXVpcmUoJy4vdHJpZ2dlckZsb2F0VXBUZXh0Jyk7XHJcblxyXG5mdW5jdGlvbiBpbnZlcnRTa2lsbHNUb1Jlc291cmNlcyhza2lsbHMpXHJcbntcclxuICAgIGxldCByZXNvdXJjZVRvU2tpbGxNYXAgPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtza2lsbCwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoc2tpbGxzKSlcclxuICAgIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHJlc291cmNlIG9mIGRhdGEuYWZmZWN0ZWRSZXNvdXJjZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoIXJlc291cmNlVG9Ta2lsbE1hcFtyZXNvdXJjZV0pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJlc291cmNlVG9Ta2lsbE1hcFtyZXNvdXJjZV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdLnB1c2goc2tpbGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzb3VyY2VUb1NraWxsTWFwO1xyXG59XHJcbmNvbnN0IHJlc291cmNlVG9Ta2lsbE1hcCA9IGludmVydFNraWxsc1RvUmVzb3VyY2VzKHNraWxscyk7XHJcbi8vY29uc29sZS5sb2cocmVzb3VyY2VUb1NraWxsTWFwKTtcclxuLyoqXHJcbiAqIFVwZGF0ZSB0aGUgcmVsZXZhbnQgc2tpbGwgb2YgYSByZXNvdXJjZSBpbmNyZWFzZWQgYnkgbnVtXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZSBXaGljaCByZXNvdXJjZSB3YXMgdXBkYXRlZFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIEhvdyBtdWNoIHRoZSByZXNvdXJjZSBpbmNyZWFzZWRcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZVNraWxscyhyZXNvdXJjZSwgbnVtKVxyXG57XHJcbiAgICBudW0gPSBNYXRoLmFicyhudW0pO1xyXG4gICAgaWYgKHJlcXVpcmUoJy4vcG9uZGVyJykuaXNQb25kZXJlZCgnZmFzdGVyU2tpbGxzJykpIG51bSAqPSAxLjA1O1xyXG5cclxuICAgIGlmICghcmVzb3VyY2VUb1NraWxsTWFwW3Jlc291cmNlXSkgcmV0dXJuO1xyXG4gICAgY29uc3Qgc2tpbGwgPSByZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdWzBdLnRvU3RyaW5nKCk7XHJcbiAgICAvLyBtYXggbGV2ZWwgMTAwXHJcbiAgICBpZiAoc2tpbGxzW3NraWxsXS5sZXZlbCA+PSAxMDApXHJcbiAgICB7XHJcbiAgICAgICAgc2tpbGxzW3NraWxsXS5sZXZlbCA9IDEwMDtcclxuICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCA9IDA7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gXHJcbiAgICBza2lsbHNbc2tpbGxdLmV4cCArPSBudW0gLyBNYXRoLnBvdygxLjQsIHNraWxsc1tza2lsbF0ubGV2ZWwpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJVcGRhdGluZyBza2lsbDpcIiArIHNraWxsICsgXCIgdG8gXCIgKyBza2lsbHNbc2tpbGxdLmV4cClcclxuICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA+PSAxMDApXHJcbiAgICB7XHJcblxyXG4gICAgICAgIHNraWxsc1tza2lsbF0ubGV2ZWwgKz0gMTtcclxuICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCA9IDA7XHJcblxyXG4gICAgICAgIC8vIExldmVsdXAgcG9wdXBcclxuICAgICAgICBsZXQgbGV2ZWx1cCA9IGBMZXZlbCB1cCEgJHtza2lsbH0g4oaSICR7c2tpbGxzW3NraWxsXS5sZXZlbH1gO1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJlc3RpZ2UnKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQocmVjdC54LCByZWN0LnksIGxldmVsdXAsICcjRjREMDNGJyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgc2tpbGxzIHRhYmxlIHZpc3VhbGl6YXRpb25cclxuICAgIGlmIChyZXF1aXJlKCcuL3N0YWdlcycpLnBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpKVxyXG4gICAge1xyXG4gICAgICAgIHBvcHVsYXRlU2tpbGxzVGFibGUoKTtcclxuICAgIH1cclxufVxyXG5sZXQgaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSA9IGZhbHNlO1xyXG4vKipcclxuICogRHJhdyB0aGUgc2tpbGxzIHRhYmxlIGFuZCBpbml0aWFsaXplIGlmIG5lZWRlZFxyXG4gKi9cclxuZnVuY3Rpb24gcG9wdWxhdGVTa2lsbHNUYWJsZSgpXHJcbntcclxuICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NraWxsc1RhYmxlJyk7XHJcblxyXG4gICAgLy8gSWYgdGhlIHRhYmxlIGlzIGVtcHR5LCBjcmVhdGUgdGhlIHJvd3MgYW5kIHByb2dyZXNzIGJhcnNcclxuICAgIGlmICghaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSlcclxuICAgIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkdlbmVyYXRpbmcgdGFibGUgZm9yIHRoZSBmaXJzdCB0aW1lXCIpO1xyXG4gICAgICAgIGhhc0dlbmVyYXRlZFNraWxsVGFibGUgPSB0cnVlO1xyXG4gICAgICAgIC8vIFxyXG4gICAgICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgICAgIHRyLmlkID0gJ3RyLScgKyBza2lsbDtcclxuICAgICAgICAgICAgLy8gdHIuY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAvLyB0ci5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBEZXNjJywgJ2V2YWwoc2tpbGxzW3NraWxsXS5leHApJyk7XHJcbiAgICAgICAgICAgIGxldCB0ZFByb2dyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcblxyXG4gICAgICAgICAgICBsZXQgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdwcm9ncmVzc0JhcicpO1xyXG4gICAgICAgICAgICAvLyBpZiAoaXNEYXJrKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBwcm9ncmVzc0Jhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzIyOEIyMic7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAgICBwcm9ncmVzc0Jhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzUwQzg3OCc7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuaGVpZ2h0ID0gJzIwcHgnO1xyXG4gICAgICAgICAgICBwcm9ncmVzc0Jhci5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2tpbGwnLCBza2lsbCk7IC8vIEFzc2lnbiBhIGRhdGEgYXR0cmlidXRlIGZvciBpZGVudGlmaWNhdGlvblxyXG5cclxuICAgICAgICAgICAgbGV0IHNraWxsVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBza2lsbFRleHQudGV4dENvbnRlbnQgPSBgW2xldmVsICR7c2tpbGxzW3NraWxsXS5sZXZlbH0gKCR7c2tpbGxzW3NraWxsXS5leHB9JSldICAgJHtza2lsbH1gO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc2V0QXR0cmlidXRlKCdpZCcsICdsZXZlbC0nICsgc2tpbGwpO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUubGVmdCA9ICcxMHB4JztcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTUwJSknO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA9PSAwICYmIHNraWxsc1tza2lsbF0ubGV2ZWwgPT0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZFByb2dyZXNzLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyKTtcclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5hcHBlbmRDaGlsZChza2lsbFRleHQpO1xyXG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFByb2dyZXNzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgLy8gRGlzcGxheSBldmVyeXRoaW5nIHdlIGNhblxyXG4gICAgICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscylcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPiAwIHx8IHNraWxsc1tza2lsbF0ubGV2ZWwgPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ci0nICsgc2tpbGwpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucHJvZ3Jlc3NCYXJbZGF0YS1za2lsbD1cIiR7c2tpbGx9XCJdYCk7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0JhcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNraWxsc1tza2lsbF0uZXhwICsgJyUnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNraWxsTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGV2ZWwtXCIgKyBza2lsbCk7XHJcbiAgICAgICAgICAgICAgICBza2lsbE5hbWUudGV4dENvbnRlbnQgPSBgW2xldmVsICR7c2tpbGxzW3NraWxsXS5sZXZlbH1dICgke01hdGguZmxvb3Ioc2tpbGxzW3NraWxsXS5leHApLnRvRml4ZWQoMCl9JSkgICAke3NraWxsfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHVwZGF0ZVNraWxscyxcclxuICAgIHBvcHVsYXRlU2tpbGxzVGFibGVcclxuXHJcbn07IiwibGV0IHN0YWdlcyA9IFtdO1xyXG5mdW5jdGlvbiBzZXRTdGFnZShzdGFnZSkge1xyXG4gICAgc3RhZ2VzLnB1c2goc3RhZ2UpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2UgU3RhZ2UgdG8gY2hlY2tcclxuICogQHJldHVybnMgYm9vbGVhbiBpZiBzdGFnZSBpbiBzdGFnZXNcclxuICovXHJcbmZ1bmN0aW9uIHBhc3NlZFN0YWdlKHN0YWdlKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdGFnZXMpLmluY2x1ZGVzKHN0YWdlKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBbGxTdGFnZXMoKSB7XHJcbiAgICByZXR1cm4gc3RhZ2VzO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFN0YWdlcygpIHtcclxuICAgIHdoaWxlIChzdGFnZXMubGVuZ3RoID4gMClcclxuICAgICAgICBzdGFnZXMucG9wKCk7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZXRTdGFnZSxcclxuICAgIHBhc3NlZFN0YWdlLFxyXG4gICAgZ2V0QWxsU3RhZ2VzLFxyXG4gICAgcmVzZXRTdGFnZXNcclxufTsiLCIvKiBUT09MUyAqL1xyXG5cclxuXHJcbi8vIExpc3QgdG8gaG9sZCB0aGUgdG9vbHNcclxubGV0IHBsYXllclRvb2xzID0gWydCYXJlIEhhbmRzJ107XHJcblxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdG9vbCBpcyBwcmVzZW50IGluIHRoZSBsaXN0IFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9vbCBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNUb29sKHRvb2wpIHtcclxuICAgIHJldHVybiBwbGF5ZXJUb29scy5pbmNsdWRlcyh0b29sKTtcclxufVxyXG5cclxuLy8gRnVuY3Rpb24gdG8gYWRkIGEgdG9vbCBpZiBpdCdzIG5vdCBhbHJlYWR5IHByZXNlbnRcclxuZnVuY3Rpb24gYWRkVG9vbCh0b29sKSB7XHJcbiAgICAvLyBJZ25vcmUgdG9vbHMgdGhhdCBhcmUganVzdCBudW1iZXJzXHJcbiAgICBpZiAoIWlzTmFOKHRvb2wpICYmIC8vIHVzZSB0eXBlIGNvZXJjaW9uIHRvIHBhcnNlIHRoZSBfZW50aXJldHlfIG9mIHRoZSBzdHJpbmcgKGBwYXJzZUZsb2F0YCBhbG9uZSBkb2VzIG5vdCBkbyB0aGlzKS4uLlxyXG4gICAgICAgICFpc05hTihwYXJzZUZsb2F0KHRvb2wpKSkgLy8gLi4uYW5kIGVuc3VyZSBzdHJpbmdzIG9mIHdoaXRlc3BhY2UgZmFpbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaGFzVG9vbCh0b29sKSkge1xyXG4gICAgICAgIHBsYXllclRvb2xzLnB1c2godG9vbCk7XHJcblxyXG4gICAgICAgIHVwZGF0ZVRvb2xVSSh0b29sKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsVG9vbHMoKSB7XHJcbiAgICByZXR1cm4gcGxheWVyVG9vbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvb2xVSSh0b29sKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIFVJXHJcbiAgICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvb2xzLWxpc3RcIik7XHJcbiAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b29sKSk7XHJcbiAgICBpZiAodWwpIHVsLmFwcGVuZENoaWxkKGxpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9vbFZhbHVlRm9yUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIGlmICghcmVzb3VyY2UpIHJldHVybiAxO1xyXG4gICAgaWYgKCFyZXNvdXJjZS50b29scykgcmV0dXJuIDE7XHJcblxyXG4gICAgLy8gU29ydCB0aGUgdG9vbHMgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiB0aGVpciB2YWxcclxuICAgIGNvbnN0IHNvcnRlZFRvb2xzID0gcmVzb3VyY2UudG9vbHMuc29ydCgoYSwgYikgPT4gYi52YWwgLSBhLnZhbCk7XHJcblxyXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzb3J0ZWQgdG9vbHNcclxuICAgIGZvciAobGV0IHRvb2wgb2Ygc29ydGVkVG9vbHMpIHtcclxuICAgICAgICBpZiAoaGFzVG9vbCh0b29sLnRvb2wpKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBwbGF5ZXIgaGFzIHRoZSB0b29sLCByZXR1cm4gaXRzIGFzc29jaWF0ZWQgdmFsdWVcclxuICAgICAgICAgICAgcmV0dXJuIHRvb2wudmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSWYgbm9uZSBvZiB0aGUgdG9vbHMgYXJlIGZvdW5kLCByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWVcclxuICAgIHJldHVybiAxO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGhhc1Rvb2wsXHJcbiAgICBhZGRUb29sLFxyXG4gICAgZ2V0QWxsVG9vbHMsXHJcbiAgICBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZVxyXG59OyIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcblxyXG5jb25zdCByZXNvdXJjZUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2VMaXN0Jyk7XHJcbmNvbnN0IGdvbGRBbW91bnRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnb2xkQW1vdW50Jyk7XHJcbi8vIGxldCBnb2xkQW1vdW50ID0gMTAwMDsgLy8gU2FtcGxlIHN0YXJ0aW5nIGFtb3VudFxyXG4vLyBjb25zdCB0cmFkZUJvbnVzID0gMC45OyAvLyAxMCUgZGlzY291bnRcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVHJhZGVUYWJsZShyZXNvdXJjZXMpIHtcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgMTA7IC8vIFJhbmRvbSBwcmljZSBiZXR3ZWVuIDEwIGFuZCAxMTAgZm9yIHRoaXMgZXhhbXBsZS5cclxuXHJcbiAgICAgICAgcm93LmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cmVzb3VyY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cHJpY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiIHN0eWxlPVwiZGlzcGxheTpmbGV4OyBmbGV4LWRpcmVjdGlvbjpyb3c7XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV5QnRuXCIgZGF0YS1yZXNvdXJjZT1cIiR7cmVzb3VyY2V9XCIgZGF0YS1wcmljZT1cIiR7cHJpY2V9XCI+QnV5PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2VsbEJ0blwiIGRhdGEtcmVzb3VyY2U9XCIke3Jlc291cmNlfVwiIGRhdGEtcHJpY2U9XCIke3ByaWNlfVwiPlNlbGw8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICByZXNvdXJjZUxpc3QuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgYnV5IGFuZCBzZWxsIGJ1dHRvbnNcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXlCdG4nKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1yZXNvdXJjZScpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcGFyc2VGbG9hdChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJpY2UnKSk7XHJcbiAgICAgICAgICAgIGJ1eVJlc291cmNlKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxsQnRuJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzb3VyY2UnKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXByaWNlJykpO1xyXG4gICAgICAgICAgICBzZWxsUmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNpbWlsYXJseSwgeW91IGNhbiBhZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBzZWxsIGJ1dHRvbnMgaGVyZVxyXG59XHJcblxyXG5leHBvcnRzLmdlbmVyYXRlVHJhZGVUYWJsZSA9IGdlbmVyYXRlVHJhZGVUYWJsZTtcclxuXHJcbmV4cG9ydHMuYnV5UmVzb3VyY2UgPSBidXlSZXNvdXJjZTtcclxuZXhwb3J0cy5zZWxsUmVzb3VyY2UgPSBzZWxsUmVzb3VyY2U7XHJcblxyXG5mdW5jdGlvbiBidXlSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpIHtcclxuXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSBwcmljZSkge1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIC1wcmljZSk7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgZ29sZEFtb3VudEVsLnRleHRDb250ZW50ID0gZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKTtcclxuICAgICAgICAvLyBhbGVydChgWW91IGJvdWdodCAke3Jlc291cmNlfSBmb3IgJHtwcmljZS50b0ZpeGVkKDIpfSBnb2xkIWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBhbGVydChcIllvdSBkb24ndCBoYXZlIGVub3VnaCBnb2xkIVwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2VsbFJlc291cmNlKHJlc291cmNlLCBwcmljZSkge1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKHJlc291cmNlLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSAxKSB7XHJcblxyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIHByaWNlKTtcclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC0xKTtcclxuICAgICAgICBnb2xkQW1vdW50RWwudGV4dENvbnRlbnQgPSBnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gYWxlcnQoYFlvdSBzb2xkICR7cmVzb3VyY2V9IGZvciAke3ByaWNlLnRvRml4ZWQoMil9IGdvbGQhYCk7XHJcbn0iLCJmdW5jdGlvbiB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgdGV4dCwgY29sb3IpIHtcclxuICAgIGNvbnN0IGZsb2F0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZmxvYXRUZXh0LnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS5sZWZ0ID0gYCR7d2luZG93LnNjcm9sbFggKyB4fXB4YDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS50b3AgPSBgJHt3aW5kb3cuc2Nyb2xsWSArIHkgLSAzMH1weGA7XHJcbiAgICBmbG9hdFRleHQuc3R5bGUuY29sb3IgPSBjb2xvcjtcclxuICAgIGZsb2F0VGV4dC5jbGFzc0xpc3QuYWRkKCdmbG9hdC11cC1mYWRlLW91dCcpO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZmxvYXRUZXh0KTtcclxuXHJcbiAgICAvLyBSZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NIGFmdGVyIHRoZSBhbmltYXRpb24gY29tcGxldGVzXHJcbiAgICBmbG9hdFRleHQuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xyXG4gICAgICAgIGZsb2F0VGV4dC5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMudHJpZ2dlckZsb2F0VXBUZXh0ID0gdHJpZ2dlckZsb2F0VXBUZXh0O1xyXG4iLCJjb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9nZXRNYXRlcmlhbFwiKTtcclxuY29uc3QgeyBnZXRNYXggfSA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpIHtcclxuICAgIGNvbnN0IGFsb25lRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbG9uZScpO1xyXG5cclxuICAgIGlmIChnZXRNYXRlcmlhbCgnY2xvbmVzJykgPCBnZXRNYXgoJ2Nsb25lcycpKSB7XHJcbiAgICAgICAgLy8gQXBwbHkgdGhlIGFuaW1hdGlvblxyXG4gICAgICAgIGFsb25lRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdib3VuY2luZycpO1xyXG5cclxuICAgICAgICAvLyBXYWl0IGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlIHBsdXMgYW4gYWRkaXRpb25hbCBkZWxheSwgdGhlbiBjaGVjayB0aGUgY29uZGl0aW9uIGFnYWluXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgYW5pbWF0aW9uIGNsYXNzIHRvIHJlc2V0XHJcbiAgICAgICAgICAgIGFsb25lRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdib3VuY2luZycpO1xyXG4gICAgICAgICAgICB2b2lkIGFsb25lRWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZSBjYWxsIHRvIHJlLWNoZWNrIHRoZSBjb25kaXRpb24gYW5kIHBvdGVudGlhbGx5IHJlYXBwbHkgdGhlIGFuaW1hdGlvblxyXG4gICAgICAgICAgICB1cGRhdGVCb3VuY2VBbmltYXRpb24oKTtcclxuICAgICAgICB9LCAxMTAwMCk7IC8vIFdhaXQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uICgxcykgKyBkZWxheSAoMTBzKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBSZW1vdmUgdGhlIGFuaW1hdGlvbiBjbGFzcyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXRcclxuICAgICAgICBhbG9uZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYm91bmNpbmcnKTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0cy51cGRhdGVCb3VuY2VBbmltYXRpb24gPSB1cGRhdGVCb3VuY2VBbmltYXRpb247IiwiY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50KGJ1aWxkaW5nTmFtZSwgYnVpbGRpbmdDb3VudCwgZW1vamkpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2J1aWxkaW5nTmFtZX1gKS50ZXh0Q29udGVudCA9IGAke2Vtb2ppfSAke2NhcGl0YWxpemVGaXJzdChidWlsZGluZ05hbWUpLnNwbGl0KCdfJykuam9pbignICcpfSAoJHtidWlsZGluZ0NvdW50fSlgO1xyXG5cclxufVxyXG5leHBvcnRzLnVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgPSB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50OyIsImNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG9vbHRpcCwgaGlkZVRvb2x0aXAgfSA9IHJlcXVpcmUoJy4vdXBkYXRlVG9vbHRpcCcpO1xyXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IHsgZml0Q2hhclRvQ2VsbCB9ID0gcmVxdWlyZSgnLi9maXRDaGFyVG9DZWxsJyk7XHJcblxyXG5jb25zdCBidWlsZGluZ0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVpbGRpbmdMaXN0Jyk7XHJcbi8vIGZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nTGlzdCgpIHtcclxuLy8gICAgIGJ1aWxkaW5nTGlzdC5pbm5lckhUTUwgPSAnJztcclxuLy8gICAgIGxldCBpID0gMDtcclxuLy8gICAgIGNvbnN0IGdyaWRTaXplID0gNjtcclxuLy8gICAgIGNvbnN0IG1heENlbGxXaWR0aCA9IDM2O1xyXG4vLyAgICAgY29uc3QgbWF4Q2VsbEhlaWdodCA9IDQ4O1xyXG4vLyAgICAgY29uc3QgaW5pdGlhbEZvbnRTaXplID0gMzY7IC8vIHN0YXJ0aW5nIGZvbnQgc2l6ZVxyXG5cclxuLy8gICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcbi8vICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWwuY291bnQ7ICsraiwgKytpKSB7XHJcbi8vICAgICAgICAgICAgIGxldCBjb2wgPSAoaSAlIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuLy8gICAgICAgICAgICAgbGV0IHJvdyA9IE1hdGguZmxvb3IoaSAvIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYmVzdCBmb250IHNpemUgZm9yIHRoaXMgY2hhcmFjdGVyXHJcbi8vICAgICAgICAgICAgIC8vIGNvbnN0IGZvbnRTaXplID0gZml0Q2hhclRvQ2VsbCh2YWwuZW1vamkgfHwgJz8nLCBtYXhDZWxsV2lkdGgsIG1heENlbGxIZWlnaHQsIGluaXRpYWxGb250U2l6ZSk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBBZGQgdGhlIHNwYW4gd2l0aCB0aGUgY2FsY3VsYXRlZCBmb250IHNpemVcclxuLy8gICAgICAgICAgICAgLy8gYWRkVG9CdWlsZGluZ0xpc3QoY29sLCByb3csIGluaXRpYWxGb250U2l6ZSwga2V5LCB2YWwuZW1vamkpO1xyXG4vLyAgICAgICAgICAgICBidWlsZGluZ0xpc3QuaW5uZXJIVE1MICs9IGA8c3BhbiBjbGFzcyA9ICd0b29sdGlwJyBzdHlsZT0nZ3JpZC1jb2x1bW46JHtjb2x9OyBncmlkLXJvdzoke3Jvd307IGZvbnQtc2l6ZToke2luaXRpYWxGb250U2l6ZX1weCcgdG9vbHRpcERlc2M9JyR7a2V5fSc+JHt2YWwuZW1vamkgfHwgJz8nfTwvc3Bhbj5gO1xyXG5cclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vICAgICBidWlsZGluZ0xpc3QucXVlcnlTZWxlY3RvckFsbCgnc3Bhbi50b29sdGlwJykuZm9yRWFjaCgoc3BhbikgPT4ge1xyXG4vLyAgICAgICAgIHNwYW4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcclxuLy8gICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChzcGFuKTtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgICAgICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcbi8vICAgICAgICAgICAgIGhpZGVUb29sdGlwKCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9KTtcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlQnVpbGRpbmdMaXN0KCkge1xyXG4gICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBjb25zdCBncmlkU2l6ZSA9IDY7XHJcbiAgICBjb25zdCBpbml0aWFsRm9udFNpemUgPSAzNjsgLy8gU3RhcnRpbmcgZm9udCBzaXplXHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5ncykpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbC5jb3VudDsgKytqLCArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGNvbCA9IChpICUgZ3JpZFNpemUgKyAxKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBsZXQgcm93ID0gTWF0aC5mbG9vcihpIC8gZ3JpZFNpemUgKyAxKS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgc3Bhbi5jbGFzc05hbWUgPSAndG9vbHRpcCc7XHJcbiAgICAgICAgICAgIHNwYW4uc3R5bGUuZ3JpZENvbHVtbiA9IGNvbDtcclxuICAgICAgICAgICAgc3Bhbi5zdHlsZS5ncmlkUm93ID0gcm93O1xyXG4gICAgICAgICAgICBzcGFuLnN0eWxlLmZvbnRTaXplID0gYCR7aW5pdGlhbEZvbnRTaXplfXB4YDtcclxuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBEZXNjJywga2V5KTtcclxuICAgICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHZhbC5lbW9qaSB8fCAnPyc7XHJcblxyXG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChzcGFuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xlYXIgdGhlIGV4aXN0aW5nIGNvbnRlbnQgYW5kIGFwcGVuZCB0aGUgbmV3IGNvbnRlbnRcclxuICAgIGJ1aWxkaW5nTGlzdC5pbm5lckhUTUwgPSAnJztcclxuICAgIGJ1aWxkaW5nTGlzdC5hcHBlbmRDaGlsZChmcmFnbWVudCk7XHJcblxyXG4gICAgLy8gRXZlbnQgZGVsZWdhdGlvbiBmb3IgdG9vbHRpcHNcclxuICAgIGJ1aWxkaW5nTGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0b29sdGlwJykpIHtcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChldmVudC50YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHRydWUpO1xyXG5cclxuICAgIGJ1aWxkaW5nTGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0b29sdGlwJykpIHtcclxuICAgICAgICAgICAgaGlkZVRvb2x0aXAoKTtcclxuICAgICAgICB9XHJcbiAgICB9LCB0cnVlKTtcclxufVxyXG5cclxuZXhwb3J0cy51cGRhdGVCdWlsZGluZ0xpc3QgPSB1cGRhdGVCdWlsZGluZ0xpc3Q7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmdcclxuICovXHJcbi8vIGZ1bmN0aW9uIGFkZFRvQnVpbGRpbmdMaXN0KGtleSwgZW1vamkpIHtcclxuLy8gICAgIGJ1aWxkaW5nTGlzdC5pbm5lckhUTUwgKz0gYDxzcGFuIGNsYXNzID0gJ3Rvb2x0aXAnIHN0eWxlPSdncmlkLWNvbHVtbjoke2NvbH07IGdyaWQtcm93OiR7cm93fTsgZm9udC1zaXplOiR7Zm9udHNpemV9cHgnIHRvb2x0aXBEZXNjPScke2tleX0nPiR7ZW1vamkgfHwgJz8nfTwvc3Bhbj5gO1xyXG5cclxuLy8gfVxyXG4vLyBleHBvcnRzLmFkZFRvQnVpbGRpbmdMaXN0ID0gYWRkVG9CdWlsZGluZ0xpc3Q7IiwiY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgZ2V0QnVpbGRpbmdDb3VudCB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQsIGNhblVubG9jayB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyB9ID0gcmVxdWlyZShcIi4vanNvbi9jcmFmdGVkUmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGlzQnV0dG9uSWRWaXNpYmxlLCBzZXRWaXNpYmxlQnV0dG9uIH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IGNhbkNyYWZ0IH0gPSByZXF1aXJlKCcuL2NhbkNyYWZ0Jyk7XHJcbmNvbnN0IHsgY2FuQnV5QnVpbGRpbmcsIGNhblN0b3JlQnVpbGRpbmcsIGNhbkFmZm9yZENvc3QgfSA9IHJlcXVpcmUoJy4vY2FuQnV5QnVpbGRpbmcnKTtcclxuY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuY29uc3QgeyBwb25kZXJzLCBnZXRQb25kZXJDb25maWcgfSA9IHJlcXVpcmUoJy4vanNvbi9wb25kZXInKTtcclxuLyoqXHJcbiAqIENoYW5nZXMgdGhlIHN0YXRlcyBvZiBidXR0b25zIGJldHdlZW4gJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsIGFuZCAnYnV0dG9uLWRpc2FibGVkJ1xyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSgpIHtcclxuICAgIGNvbnN0IHNlbGVjdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTsgLy8gQWRqdXN0IHRoZSBzZWxlY3RvciBhY2NvcmRpbmdseVxyXG5cclxuICAgIHNlbGVjdEJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbmZpZyA9IGJ1dHRvbnNbYnV0dG9uLmlkXTsgLyogZ2V0IHRoZSBidXR0b24ncyBjb25maWd1cmF0aW9uIHVzaW5nIGl0cyBkYXRhIGF0dHJpYnV0ZSBvciBJRCwgZXRjLiAqLztcclxuICAgICAgICBpZiAoIWJ1dHRvbkNvbmZpZykgeyAvKmNvbnNvbGUud2Fybignbm8gYnV0dG9uIGNvbmZpZyBmb3VuZCBmb3InLCBidXR0b24sIGJ1dHRvbi5pZCk7ICovcmV0dXJuOyB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcsIGJ1dHRvbkNvbmZpZy5yZXF1aXJlbWVudCk7XHJcbiAgICAgICAgLy8gUmVzZXQgYWxsIHN0YXRlcyBmaXJzdFxyXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nLCAncHVyY2hhc2FibGUnLCAnYnV0dG9uLWRpc2FibGVkJywgJ2NhbnQtYWZmb3JkJyk7XHJcblxyXG4gICAgICAgIHZhciBzdGF0ZSA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgICBpZiAoYnV0dG9uLmlkICYmIGlzQnV0dG9uSWRWaXNpYmxlKGJ1dHRvbi5pZCkpIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcbiAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QgJiYgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucyhcImZhY3RvcnlcIikpIHtcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdmYWN0b3J5JykpIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdjYW50LWFmZm9yZCcpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHJlcXVpcmVtZW50IGlzIG1ldCwgaXQgc2hvdWxkIGJlIHZpc2libGVcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBsZXQgZ2V0TWF0ZXJpYWwgPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJykuZ2V0TWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIGlmIChidXR0b25Db25maWcucmVxdWlyZW1lbnQgJiYgYnV0dG9uQ29uZmlnLnJlcXVpcmVtZW50KCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcbiAgICAgICAgICAgICAgICAvLyBhbHdheXMgcHVyY2hhc2FibGUgZ2F0aGVyIGJ1dHRvbnNcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiICYmICFidXR0b25Db25maWcuZGF0YV9idWlsZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgPT09ICdwcm9kdWN0aW9uJykgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHBvbmRlciBidXR0b25cclxuICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWQgJiYgYnV0dG9uLmlkID09PSAnZ2F0aGVyUG9uZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwb25kZXIgdW5sb2Nrc1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgJiYgYnV0dG9uQ29uZmlnLnRhYiA9PT0gJ3BvbmRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmlkICYmIGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3VubG9jaycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbmxvY2soYnV0dG9uLmlkKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT0gJ2hpZGRlbicpIHN0YXRlID0gY2FuQWZmb3JkQ29zdChnZXRQb25kZXJDb25maWcoYnV0dG9uLmlkKS5jb3N0KSA/IHN0YXRlIDogJ2NhbnQtYWZmb3JkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBwb25kZXIgYnV0dG9uIGlzIHVubG9ja2VkLCBoaWRlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3VubG9jaycpKSkgc3RhdGUgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRhYiBidXR0b25zIGFsd2F5cyBlaXRoZXIgaGlkZGVuIG9yIGVuYWJsZWRcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiICYmIGJ1dHRvbkNvbmZpZy50YWIgPT09ICd0YWJzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gJ3Zpc2libGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignRXJyb3Igd2l0aCBjaGVja2luZyByZXF1aXJlbWVudCBvZiBidXR0b246ICcsIGJ1dHRvbkNvbmZpZywgZXJyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChidXR0b25Db25maWcuaWQgJiYgYnV0dG9uQ29uZmlnLmlkLnNsaWNlKDAsIDUpID09PSAnY3JhZnQnKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmVuJ3QgdW5sb2NrZWQgdGhlIGJ1dHRvbiwgbmV2ZXIgZGlzcGxheSBpdFxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSk7XHJcbiAgICAgICAgICAgIC8vIGlmIChidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSAmJiAhcGFzc2VkU3RhZ2UoYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBzdGF0ZSA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBuZXZlciBoaWRlIHRoaXMgYnV0dG9uIG9uY2UgaXRzIGJlZW4gdW5sb2NrZWRcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5jcmFmdGVkT25jZSkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgY3JhZnRlZCA9IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoYnV0dG9uQ29uZmlnLmlkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3JhZnRlZCk7XHJcbiAgICAgICAgICAgIGlmIChjcmFmdGVkLnZhbHVlID4gMCkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHdlIGNhbiBhZmZvcmQgdGhpcyBjcmFmdCwgaXQgc2hvdWxkIGJlIHB1cmNoYXNhYmxlXHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnKGNyYWZ0ZWQpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXkpO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgaWYgKGNhbkNyYWZ0KGtleSkpXHJcbiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlIHx8IGJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlICYmIHBhc3NlZFN0YWdlKGJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBzdGF0ZSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgd2UgY2FuIGFmZm9yZCB0aGlzIGJ1aWxkaW5nLCBpdCBzaG91bGQgYmUgcHVyY2hhc2FibGVcclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBwdXJjaGFzZWQgYSBidWlsZGluZywgaXQgc2hvdWxkIGJlIHZpc2libGVcclxuICAgICAgICAgICAgaWYgKHN0YXRlID09ICdoaWRkZW4nICYmIGdldEJ1aWxkaW5nQ291bnQoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpKSBzdGF0ZSA9ICdjYW50LWFmZm9yZCc7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgdGhlIGNhcGFjaXR5IGZvciBvbmUgb2YgdGhlIG1hdGVyaWFscywgaXQgc2hvdWxkIGJlICdjYW50IGFmZm9yZCdcclxuICAgICAgICAgICAgaWYgKHN0YXRlICE9ICdoaWRkZW4nKSBzdGF0ZSA9IGNhblN0b3JlQnVpbGRpbmcoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpID8gJ2J1dHRvbi1kaXNhYmxlZCcgOiAnY2FudC1hZmZvcmQnO1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBidWlsZGluZyBjb3N0XHJcbiAgICAgICAgICAgIHN0YXRlID0gY2FuQnV5QnVpbGRpbmcoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpID8gJ3B1cmNoYXNhYmxlJyA6IHN0YXRlO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGhpZGRlbiBpcyBtZXQsIGl0IHNob3VsZCBiZSBoaWRkZW5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmhpZGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBidXR0b25Db25maWcuaGlkZSgpID8gJ2hpZGRlbicgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIGN1cnJlbnQgc3RhdGVcclxuICAgICAgICBpZiAoc3RhdGUgIT09ICcnKSBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QtcHVyY2hhc2FibGUsIGRpc2FibGUgdGhlIGJ1dHRvblxyXG4gICAgICAgIC8vIGJ1dHRvbi5kaXNhYmxlZCA9IHN0YXRlID09PSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgZm9yIHRoaXMgYnV0dG9uIGlmIGl0cyBhY3RpdmVcclxuICAgICAgICAvLyBpZiAoYnV0dG9uID09PSBjdXJyZW50SG92ZXJCdXR0b24pIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAvLyBJZiB0aGUgc3RhdGUgaXMgaGlkZGVuLCBzZXQgdGhlIGJ1dHRvbidzIGRpc3BsYXkgdG8gbm9uZVxyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGwgdmlzaWJsZSAnLCBidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7IC8vIFRoaXMgd2lsbCByZXZlcnQgaXQgYmFjayB0byBpdHMgb3JpZ2luYWwgZGlzcGxheSBzdGF0ZSBvciBkZWZhdWx0IChlLmcuLCAnYmxvY2snIG9yICdpbmxpbmUtYmxvY2snKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJykuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGpvYiA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICBjb25zdCByZXFQb25kZXIgPSAocmVxdWlyZSgnLi9qb2JSZXF1aXJlZFBvbmRlcnMnKS5qb2JSZXF1aXJlZFBvbmRlcnMpW2pvYl07XHJcbiAgICAgICAgaWYgKHJlcVBvbmRlciA9PT0gbnVsbCB8fCByZXFQb25kZXIgPT09IHVuZGVmaW5lZCkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKGlzUG9uZGVyZWQocmVxUG9uZGVyKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKHJlcVBvbmRlciA9PT0gJ25vdC11bmxvY2thYmxlJykgc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICBlbHNlIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhqb2IsIGJ1dHRvbiwgcmVxUG9uZGVyLCBzdGF0ZSk7XHJcbiAgICAgICAgLy8gYnV0dG9uLmNsYXNzTGlzdC5cclxuICAgICAgICBpZiAoc3RhdGUgPT09ICdoaWRkZW4nKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoaWRpbmcnLCBidXR0b24pO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWxsIHZpc2libGUgJywgYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgc2V0VmlzaWJsZUJ1dHRvbihidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gVGhpcyB3aWxsIHJldmVydCBpdCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBkaXNwbGF5IHN0YXRlIG9yIGRlZmF1bHQgKGUuZy4sICdibG9jaycgb3IgJ2lubGluZS1ibG9jaycpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVCdXR0b25WaXNpYmlsaXR5ID0gdXBkYXRlQnV0dG9uVmlzaWJpbGl0eTsiLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIGdldFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNhbGNTZWNvbmRzUmVtYWluaW5nIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgdG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkeW5hbWljLXRvb2x0aXAnKTtcclxuZnVuY3Rpb24gc2hvd1Rvb2x0aXAodGFyZ2V0LCBkZXNjLCBlZmZlY3QsIGNvc3QpIHtcclxuICAgIGxldCBjb250ZW50ID0gJyc7XHJcblxyXG4gICAgaWYgKGRlc2MpIHtcclxuICAgICAgICBjb250ZW50ICs9IGA8c3BhbiA+JHtkZXNjfTwvc3Bhbj48aHI+YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWZmZWN0KSB7XHJcbiAgICAgICAgY29udGVudCArPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjojNGNmXCI+JHtlZmZlY3R9PC9zcGFuPjxocj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NNYXRlcmlhbHMoaHRtbFN0cmluZywgcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gUmVndWxhciBleHByZXNzaW9uIHRvIGV4dHJhY3QgbWF0ZXJpYWwgYW5kIGFtb3VudFxyXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL2NsYXNzPVwidG9vbHRpcC0oXFx3KykgLis/XCI+KFtcXGQuXStbS01dPylcXHMoXFx3Kyk8L2c7XHJcbiAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgIGxldCBwcm9jZXNzZWRTdHJpbmcgPSAnJztcclxuXHJcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoaHRtbFN0cmluZykpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbWF0Y2hbMV07XHJcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudFRleHQgPSBtYXRjaFsyXTtcclxuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VBbW91bnQoYW1vdW50VGV4dCk7IC8vIENvbnZlcnQgJzEyMUsnIHRvIDEyMTAwMCwgZm9yIGV4YW1wbGVcclxuXHJcbiAgICAgICAgICAgIC8vIFBlcmZvcm0geW91ciBsb2dpYyBoZXJlXHJcbiAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IGFtb3VudDtcclxuICAgICAgICAgICAgdmFyIGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICAgICAgaWYgKGdldE1heChtYXRlcmlhbCkgPCBhbW91bnQpIGNvbG9yQ2xhc3MgPSAnZXhjZWVkcy1tYXgnO1xyXG5cclxuICAgICAgICAgICAgcHJvY2Vzc2VkU3RyaW5nICs9IGA8c3BhbiBjbGFzcz1cInRvb2x0aXAtJHttYXRlcmlhbH0gJHtjb2xvckNsYXNzfVwiPiR7YW1vdW50VGV4dH0gJHttYXRlcmlhbH08L3NwYW4+YDtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWNvbmRzUmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0pIHNlY29uZHNSZW1haW5pbmcgPSBjYWxjU2Vjb25kc1JlbWFpbmluZyhtYXRlcmlhbCwgYW1vdW50KTtcclxuICAgICAgICAgICAgaWYgKHNlY29uZHNSZW1haW5pbmcgPiAwICYmIGNvbG9yQ2xhc3MgIT0gJ2V4Y2VlZHMtbWF4Jykge1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkU3RyaW5nICs9IGA8c3BhbiBjbGFzcz1cInRpbWUtcmVtYWluaW5nXCI+KCR7c2Vjb25kc1JlbWFpbmluZy50b0ZpeGVkKDApfSBzZWNvbmRzKTwvc3Bhbj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb2Nlc3NlZFN0cmluZyArPSBgPGJyPmA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBwYXJzZSBhbW91bnRzIGxpa2UgJzEyMUsnIGludG8gbnVtYmVyc1xyXG4gICAgZnVuY3Rpb24gcGFyc2VBbW91bnQoYW1vdW50VGV4dCkge1xyXG4gICAgICAgIGxldCBhbW91bnQgPSBwYXJzZUZsb2F0KGFtb3VudFRleHQpO1xyXG4gICAgICAgIGlmIChhbW91bnRUZXh0LmluY2x1ZGVzKCdLJykpIHtcclxuICAgICAgICAgICAgYW1vdW50ICo9IDFlMztcclxuICAgICAgICB9IGVsc2UgaWYgKGFtb3VudFRleHQuaW5jbHVkZXMoJ00nKSkge1xyXG4gICAgICAgICAgICBhbW91bnQgKj0gMWU2O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYW1vdW50VGV4dC5pbmNsdWRlcygnQicpKSB7XHJcbiAgICAgICAgICAgIGFtb3VudCAqPSAxZTk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvc3QpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY29zdCBvZiB0b29sdGlwOicsIGNvc3QpO1xyXG4gICAgICAgICAgICBpZiAoY29zdC50b1N0cmluZygpLmluY2x1ZGVzKCdzcGFuJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnRlbnQgKz0gYDxzcGFuIHN0eWxlPVwiY29sb3I6I0Y0RDAzRlwiPiR7Y29zdH08L3NwYW4+PGJyPmA7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncnVubmluZyBwcm9jbWF0IGZvciAnLCBjb3N0KTtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gcHJvY2Vzc01hdGVyaWFscyhjb3N0LCByZXNvdXJjZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0ciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbWF0ZXJpYWwsIGFtb3VudF0gb2YgT2JqZWN0LmVudHJpZXMoY29zdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBtYXRlcmlhbCA9IHJlcTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNFbm91Z2ggPSBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA+PSBhbW91bnQ7IC8qIFlvdXIgbG9naWMgdG8gY2hlY2sgaWYgdGhlcmUncyBlbm91Z2ggb2YgdGhlIG1hdGVyaWFsICovLyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWF4KG1hdGVyaWFsKSA8IGFtb3VudCkgY29sb3JDbGFzcyA9ICdleGNlZWRzLW1heCc7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyICs9IGA8c3BhbiBjbGFzcz1cInRvb2x0aXAtJHttYXRlcmlhbH0gJHtjb2xvckNsYXNzfVwiPiR7YW1vdW50LnRvRml4ZWQoMCl9ICR7bWF0ZXJpYWx9PC9zcGFuPmA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWNvbmRzUmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkgc2Vjb25kc1JlbWFpbmluZyA9IGNhbGNTZWNvbmRzUmVtYWluaW5nKG1hdGVyaWFsLCBhbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNlY29uZHNSZW1haW5pbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWNvbmRzUmVtYWluaW5nID4gMCAmJiBjb2xvckNsYXNzICE9ICdleGNlZWRzLW1heCcpIHsgc3RyICs9IGA8c3BhbiBjbGFzcz1cInRpbWUtcmVtYWluaW5nXCI+KCR7KHNlY29uZHNSZW1haW5pbmcpLnRvRml4ZWQoMCl9IHNlY29uZHMpPC9zcGFuPmA7IH1cclxuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gYDxicj5gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSBzdHI7XHJcblxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3N0ICE9PSB1bmRlZmluZWQgJiYgY29zdCAhPT0gJ3VuZGVmaW5lZCcpIGNvbnRlbnQgKz0gY29zdDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5lcnJvcihcIkNvdWxkbid0IG1ha2Ugbm9ybWFsIGNvc3QgZm9yIGJ1dHRvbjogXCIsIHRhcmdldCwgY29zdCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHRhcmdldCwgY29udGVudCk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcbiAgICBjb25zdCB0YXJnZXRSZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdG9vbHRpcC5zdHlsZS5sZWZ0ID0gKHRhcmdldFJlY3QucmlnaHQgKyA1KSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLnRvcCA9ICh0YXJnZXRSZWN0LmJvdHRvbSAtIHRvb2x0aXAub2Zmc2V0SGVpZ2h0KSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlVG9vbHRpcCgpIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxufVxyXG5leHBvcnRzLmhpZGVUb29sdGlwID0gaGlkZVRvb2x0aXA7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVUb29sdGlwKGJ1dHRvbikge1xyXG4gICAgY29uc3QgZGVzYyA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJykgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnKTtcclxuICAgIGNvbnN0IGVmZmVjdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1lZmZlY3QnKTtcclxuICAgIC8vIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpO1xyXG4gICAgY29uc3QgY29uZmlnID0gZ2V0UmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbi5pZCkgfHwgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZChidXR0b24uaWQpIHx8IGJ1aWxkaW5nc1tidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJyldIHx8IHBvbmRlcnNbYnV0dG9uLmdldEF0dHJpYnV0ZSgndW5sb2NrJyldO1xyXG4gICAgLy8gY29uc29sZS5sb2coY29uZmlnKTtcclxuICAgIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcpIHx8IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JykgfHwgKGNvbmZpZyAmJiBjb25maWcuY29zdCk7XHJcbiAgICBzaG93VG9vbHRpcChidXR0b24sIGRlc2MsIGVmZmVjdCwgY29zdCk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVUb29sdGlwID0gdXBkYXRlVG9vbHRpcDtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtjbG9uZV9pZGxlXCJdID0gc2VsZltcIndlYnBhY2tDaHVua2Nsb25lX2lkbGVcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFsxM10sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDgwOCkpKVxuX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsImV4cG9ydHMiLCJHYW1lU2ltdWxhdG9yIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiZ2FtZVN0YXRlIiwicmVzb3VyY2VzIiwiY2xvbmVzIiwic3RpY2tzIiwidmluZXMiLCJyb2NrcyIsImZpc2giLCJ3b29kIiwicG9uZGVyIiwib3JlIiwic2FuZCIsIndoZWF0IiwiZnJlc2h3YXRlciIsImhpZGVzIiwiY2xheSIsImhlcmJzIiwiZ2FtZSIsImh1c2tzIiwidmlvbGVuY2UiLCJzaGFycHJvY2tzIiwicm9wZSIsImhhbmRsZSIsInN0YWZmIiwiZmlzaGluZ3JvZCIsInNwZWFyIiwiYXhlIiwicGlja2F4ZSIsImdsYXNzIiwicGFwZXIiLCJnb2xkIiwiaXJvbiIsInNpbHZlciIsImJyaWNrcyIsImJyZWFkIiwic3RlZWwiLCJiZWFtcyIsImNyYXRlcyIsIm5haWxzIiwic2xhYnMiLCJtZWRpY2luZSIsImxlYXRoZXIiLCJjb25jcmV0ZSIsIm1heGVzIiwiYnVpbGRpbmdzIiwiYW5pbWFsX3BlbiIsImJha2VyeSIsImJhcm4iLCJiYXJyYWNrcyIsImNhbXBmaXJlIiwiZGVzayIsImRyeWluZ19yYWNrcyIsImZpc2hfdHJhcHMiLCJmaXNoZXJ5IiwiZm9yZ2UiLCJnYXJkZW4iLCJncm92ZSIsImhlcmJhbGlzdF9odXQiLCJob3NwaXRhbCIsImhvdXNlIiwiaHV0IiwiaXJyaWdhdGlvbiIsImxpYnJhcnkiLCJsdW1iZXJfeWFyZCIsIm1hcmtldHBsYWNlIiwibWlsaXRhcnlfc2Nob29sIiwibWluZSIsIm9ic2VydmF0b3J5IiwicmVzZXJ2b2lyIiwicm9ja19yb2xlIiwic2FuZF9zY29vcCIsInNoZWQiLCJzaGVsdGVyIiwic3RvY2twaWxlIiwic3RvbmVfZGVwb3QiLCJzdG9uZV9xdWFycnkiLCJ0YW5uZXJ5IiwidGVlcGVlIiwidGVsZXNjb3BlIiwidG93ZXIiLCJ0cmFwcyIsInZpbmV5YXJkIiwid2FyZWhvdXNlIiwid2F0ZXJfcHVtcCIsIndpbmRtaWxsIiwid29ya3Nob3AiLCJ0aW1lIiwibG9nIiwiYnVpbGRpbmdzQ29uc3QiLCJidXlCdWlsZGluZyIsImJ1aWxkaW5nTmFtZSIsImNvc3QiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJiYXNlY29zdCIsIk1hdGgiLCJwb3ciLCJyYXRpbyIsImNhbkJ1eSIsImMiLCJzdG9yYWdlIiwiaW5jbHVkZXMiLCJyIiwidmFsIiwiZWZmZWN0cyIsInNpbXVsYXRlVGljayIsInBlcmZvcm1BY3Rpb25zIiwidXBkYXRlUmVzb3VyY2VzIiwibG9nR2FtZVN0YXRlIiwiaG91c2luZyIsImJ1aWxkaW5nUHJpb3JpdHkiLCJiIiwidmFsdWVzIiwiZXJyb3IiLCJjb25zb2xlIiwicmVzb3VyY2VzVG9HYXRoZXIiLCJpIiwiZ2F0aGVyaW5nIiwibGVuZ3RoIiwia2V5cyIsInJhbmRvbSIsInB1c2giLCJ3YXJuIiwic3RhdGVDb3B5IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicnVuU2ltdWxhdGlvbiIsImR1cmF0aW9uIiwib3V0cHV0UmVzdWx0cyIsImNzdkRhdGEiLCJkYXRhIiwiYnVpbGRpbmdzS2V5cyIsInJlc291cmNlc0tleXMiLCJoZWFkZXIiLCJmaWx0ZXIiLCJjc3YiLCJqb2luIiwiZm9yRWFjaCIsInJvdyIsIm1hcCIsImhhc093blByb3BlcnR5IiwiY29udmVydFRvQ1NWIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibGluayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsInRleHRDb250ZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwidGFibGUiLCJhdGVGaXNoIiwibW9kdWxlIiwic2V0QXRlRmlzaCIsImJvb2wiLCJnZXRBdGVGaXNoIiwibXVzaWNWb2x1bWUiLCJnZXRNdXNpY1ZvbHVtZSIsInNmeFZvbHVtZSIsImdldFNmeFZvbHVtZSIsInNldE11c2ljVm9sdW1lIiwidm9sIiwic2V0U2Z4Vm9sdW1lIiwicGxheVNvdW5kIiwiZmlsZW5hbWUiLCJpc011c2ljIiwiYXVkaW8iLCJBdWRpbyIsInZvbHVtZSIsInBsYXkiLCJpc1BvcEJ1aWxkaW5nIiwiaW5jcmVhc2VNYXRlcmlhbCIsImluY3JlYXNlTWF4IiwidXBkYXRlVG90YWwiLCJoYXNQZXJrIiwiZ2V0TWF0ZXJpYWwiLCJwYXNzZWRTdGFnZSIsInJlY2FsY01heENsb25lcyIsInVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQiLCJyZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCIsImNhbkJ1eUJ1aWxkaW5nIiwiaXNQb25kZXJlZCIsInVwZGF0ZUJ1aWxkaW5nTGlzdCIsImNhcGl0YWxpemVGaXJzdCIsInBvbmRlcnMiLCJsb2dFdmVudCIsImdldEFuYWx5dGljcyIsImdldFBsYXllclVpZCIsInRyaWdnZXJGbG9hdFVwVGV4dCIsIm1ha2VWaXNpYmxlIiwidXBkYXRlQnV0dG9uVmlzaWJpbGl0eSIsImJ1aWxkaW5nIiwiY291bnQiLCJyZXNvdXJjZSIsImFtb3VudCIsImJvb3N0IiwicmF0ZUVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyaWdodCIsImJvdHRvbSIsImVtb2ppIiwiYnVpbGRpbmdfbmFtZSIsInVzZXJfaWQiLCJnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QiLCJtYXRlcmlhbCIsInRvRml4ZWQiLCJjcmVhdGVCdWlsZGluZ0J1dHRvbiIsImJ1aWxkaW5nS2V5IiwiY29zdHMiLCJyZXF1aXJlbWVudEZ1bmN0aW9uIiwiY29zdENvbmRpdGlvbiIsImV2ZXJ5IiwiZmxvb3IiLCJjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uIiwidG9vbHRpcERlc2MiLCJidXlNYXhCdWlsZGluZ3MiLCJnZW5lcmF0ZUVmZmVjdFN0cmluZyIsImVmZmVjdFBhcnRzIiwicGVyY2VudGFnZUJvb3N0Iiwicm91bmQiLCJwb25kZXJJZCIsInN0YXJ0c1dpdGgiLCJhbGxNYXRlcmlhbHMiLCJza2lsbHMiLCJoYXNQcmVzdGlnZSIsImdldExldmVsT2ZQcmVzdGlnZSIsImdldFdvcmtlcnMiLCJnZXRGYWN0b3J5UHJvZHVjdGlvbiIsImdldEZhY3RvcnlDb25zdW1wdGlvbiIsImNhbkNyYWZ0Iiwic2V0UmF0ZSIsInBlcmtCb29zdHMiLCJza2lsbEJvb3N0cyIsInJlc291cmNlVG9vbE1hcCIsImNhbGNJbmNyZWFzZSIsInJlc291cmNlTmFtZSIsImRlbHRhX3RpbWUiLCJ0b3RhbCIsImlzR2V0dGluZyIsImNsb25lTXVsdCIsInBlcmsiLCJhcHBseVBlcmtCb29zdCIsInNraWxsIiwiYm9vc3RzIiwiYWZmZWN0ZWRSZXNvdXJjZXMiLCJza2lsbFJhdGlvIiwibXVsdCIsImxldmVsIiwiYXBwbHlTa2lsbEJvb3N0IiwiYm9vc3REYXRhIiwiaW5jcmVhc2UiLCJhcHBseVBvbmRlckJvbnVzZXMiLCJ0b29sTmFtZSIsImxvZzEwIiwiYXBwbHlUb29sQm9vc3QiLCJzcXJ0IiwicGFyc2VGbG9hdCIsInVwZGF0ZVJhdGVzIiwiQXJyYXkiLCJmcm9tIiwiZ2V0TWF4IiwiY2FuQWZmb3JkQ29zdCIsImNhblN0b3JlQnVpbGRpbmciLCJjcmFmdGVkUmVzb3VyY2VzIiwicmVzb3VyY2VLZXkiLCJyZXF1aXJlbWVudHMiLCJtYXQiLCJzdHIiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibWVzc2FnZUVsZW1lbnQiLCJjaGFuZ2VNZXNzYWdlIiwibmV3TWVzc2FnZSIsImNsb25lV29yZHMiLCJ0b29sdGlwIiwibW9kaWZpZWRNZXNzYWdlIiwicmVwbGFjZSIsImlubmVySFRNTCIsInNldE1hdGVyaWFsIiwibG9vdFRhYmxlIiwicHJvYmFiaWxpdHkiLCJxdWFudGl0eSIsImN1cnJMb290IiwiZ2V0Q3Vyckxvb3QiLCJnZW5lcmF0ZUxvb3QiLCJsb290IiwiYXJlbmEiLCJjcmVhdGVCYWxscyIsInRlYW0iLCJiYWxsIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJsZWZ0IiwidG9wIiwicGxheWVyVHJvb3BzIiwiZW5lbXlUcm9vcHMiLCJhbmltYXRpb25zIiwiYW5pbVRpbWUiLCJzdGFydEFuaW1hdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YXJnZXRYIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJvZmZzZXRXaWR0aCIsImFuaW1hdGUiLCJ0cmFuc2Zvcm0iLCJmaWxsIiwiZmluaXNoZWQiLCJ0aGVuIiwicmVtb3ZlIiwidXBkYXRlIiwic2V0VGltZW91dCIsInBsYXllckJhbGxzIiwiZW5lbXlCYWxscyIsImhhc1Jld2FyZGVkIiwiY2hlY2tGb3JXaW4iLCJiYXR0bGVSZXN1bHQiLCJjb21iYXRSZXN1bHQiLCJmaWdodEJ1dHRvbiIsImRpc2FibGVkIiwic3RhbmNlTXVsdCIsImdldFN0YW5jZSIsImxvb3ROYW1lIiwicGxheWVyV29uUHJldmlvdXNCYXR0bGUiLCJlbmVteU1pZ2h0IiwicmVmcmVzaFZhbHVlcyIsImlzQ29sbGlkaW5nIiwiYmFsbDEiLCJiYWxsMiIsInJlY3QxIiwicmVjdDIiLCJwbGF5ZXIiLCJlbmVteSIsImoiLCJwbGF5ZXJCYWxsIiwiZW5lbXlCYWxsIiwiZ2V0Q3VyckVuZW15TWlnaHQiLCJjYWxjdWxhdGVQbGF5ZXJNaWdodCIsImNoYW5jZVNwcmVhZCIsImRldGVjdENvbGxpc2lvbnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxjUm91bmRpbmciLCJwbGF5ZXJNaWdodCIsInBsYXllclJvdW5kaW5nIiwiY2VpbCIsImVuZW15Um91bmRpbmciLCJoaWdoZXJSb3VuZGluZyIsIm1heCIsInBsYXllckNvdW50IiwiZW5lbXlDb3VudCIsInRvU3RyaW5nIiwicXVlcnlTZWxlY3RvciIsIm1pZ2h0IiwicGxheWVyTWlnaHRFbGVtZW50IiwiZW5lbXlNaWdodEVsZW1lbnQiLCJjYWxjdWxhdGVXaW5DaGFuY2UiLCJjaGFuY2UiLCJzZXRBdHRyaWJ1dGUiLCJjaGFuY2VFbGVtZW50IiwiY29sb3IiLCJzdGFuY2UiLCJzdGFuY2VCdXR0b25zIiwic3dpdGNoU3RhbmNlIiwibmV3U3RhbmNlIiwiZWxlbWVudCIsInNldFN0YW5jZSIsImxvb3RMaXN0Iiwid2luZG93IiwiY29tYmF0IiwicGF1c2VBbmltYXRpb24iLCJwYXVzZSIsInNpbXVsYXRlQmF0dGxlIiwicGxheWVyQ2hhbmNlIiwiY2FsY3VsYXRlQmF0dGxlUmVzdWx0Iiwic2V0RW5lbXlNaWdodCIsInN3aXRjaGVkTWFudWZhY3R1cmVkTWFwIiwiYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nIiwiYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nIiwidXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmciLCJvbGRQcm9kdWNlZCIsIm5ld1Byb2R1Y2VkIiwiY3JlYXRlRmFjdG9yeURpdiIsImZhY3Rvcmllc0NvbnRhaW5lciIsImZhY3RvcnlEaXYiLCJsZWZ0VGV4dCIsImFkZCIsInJpZ2h0U2VsZWN0Iiwib3B0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1cnJlbnRQcm9kdWNlZCIsImdldEF0dHJpYnV0ZSIsImFycm93Iiwic2VsZWN0RWxlbWVudCIsInRleHQiLCJpbml0aWFsT3B0aW9uIiwic2VsZWN0ZWQiLCJhZGRJbml0aWFsT3B0aW9uIiwibmV3RmFjdG9yeVNpbHZlckNvc3QiLCJhdHRlbXB0TWFudWZhY3R1cmUiLCJmYWN0b3J5IiwiZ29hbFJlc291cmNlIiwiY29zdFJlc291cmNlcyIsInRyYWNlIiwiYXJyIiwibnVtIiwibWluIiwibWFudWZhY3R1cmUiLCJidXlGYWN0b3J5IiwiYnV5RmFjdG9yeUJ1dHRvbiIsInJldCIsIk51bWJlciIsImlzTmFOIiwidW5kZWZpbmVkIiwibG9hZEZhY3RvcnkiLCJjcmFmdGluZyIsImRpdiIsImFkZFByb2R1Y2luZyIsImFkZENvbnN1bWluZyIsInJlbW92ZUNvbnN1bWluZyIsInJlbW92ZVByb2R1Y2luZyIsImZpdENoYXJUb0NlbGwiLCJjaGFyIiwiY2VsbFdpZHRoIiwiY2VsbEhlaWdodCIsImluaXRpYWxGb250U2l6ZSIsInNwYW4iLCJmb250U2l6ZSIsInBvc2l0aW9uIiwid2hpdGVTcGFjZSIsInZpc2liaWxpdHkiLCJjdXJyZW50Rm9udFNpemUiLCJvZmZzZXRIZWlnaHQiLCJyZW1vdmVDaGlsZCIsInVwZGF0ZURpc3BsYXlWYWx1ZSIsInNpZGViYXJQYXJlbnQiLCJlbW9qaUdhdGhlckRpdiIsInRvZ2dsZVJlc291cmNlIiwiZ2F0aGVyQXVkaW8iLCJzaWRlYmFyVGV4dCIsInJlc291cmNlQnV0dG9uIiwiZGVmYXVsdFRleHQiLCJmb250V2VpZ2h0IiwickJ1dHRvbiIsInN0b3BBbGxHYXRoZXJpbmciLCJhY3RpdmVUZXh0IiwiZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCIsImJ1dHRvbnMiLCJnZW5lcmF0ZVRvb2x0aXBDb3N0Iiwic2hvd1RhYiIsImNyZWF0ZUJ1dHRvbkVsZW1lbnQiLCJidG4iLCJidXR0b25FbGVtZW50IiwiaWQiLCJjbGFzcyIsInNwbGl0IiwidG9vbHRpcEVmZmVjdCIsInVubG9jayIsImRhdGFfYnVpbGRpbmciLCJnZW5lcmF0ZUJ1dHRvbnMiLCJidXR0b24iLCJ0YWJzQ29udGFpbmVyIiwicHJvZHVjdGlvbkNvbnRhaW5lciIsImV4cGVyaW1lbnRDb250YWluZXIiLCJwb25kZXJDb250YWluZXIiLCJleHBlcmltZW50Q29sdW1ucyIsInBhcmVudCIsImNvbHVtbnMiLCJjb2wiLCJ3aWR0aCIsImRpc3BsYXkiLCJwcmVwZW5kIiwiY3JlYXRlU3R5bGVkQ29sdW1ucyIsInByb2R1Y3Rpb25Db2x1bW5JbmRleCIsImV4cGVyaW1lbnRDb2x1bW5JbmRleCIsInBvbmRlckNvbHVtbkluZGV4IiwidG9vbHRpcENvc3QiLCJ0YWIiLCJncmlkQ29sdW1uIiwiZmluZCIsInJlcXVpcmVtZW50IiwiZXJyIiwicG9zc2libGVSZXNvdXJjZXMiLCJwb3NzaWJsZUNyYWZ0ZWRSZXNvdXJjZXMiLCJnZXRSYW5kb21OdW1iZXIiLCJnZXRSYW5kb21FbW9qaSIsInJhbmdlcyIsInN0YXJ0IiwiZW5kIiwicmFuZG9tUmFuZ2UiLCJyYW5kb21Vbmljb2RlIiwiU3RyaW5nIiwiZnJvbUNvZGVQb2ludCIsImFkamVjdGl2ZXMiLCJidWlsZGluZ05hbWVzIiwibm91bnMiLCJ2ZXJicyIsInByZXBvc2l0aW9ucyIsImNvbmp1bmN0aW9ucyIsInJvdW5kVG9OZWFyZXN0IiwibnVtYmVyIiwiZ2VuZXJhdGVSYW5kb21CdWlsZGluZyIsInJhbmRvbU5hbWUiLCJyYW5kb21BZGplY3RpdmUiLCJyYW5kb21CdWlsZGluZ05hbWUiLCJnZW5lcmF0ZUJ1aWxkaW5nTmFtZSIsInJhbmRvbURlc2NyaXB0aW9uIiwicmFuZG9tQWRqZWN0aXZlMiIsInJhbmRvbU5vdW4iLCJyYW5kb21WZXJiIiwicmFuZG9tUHJlcG9zaXRpb24iLCJyYW5kb21Db25qdW5jdGlvbiIsImRlc2NyaXB0aW9uIiwiZ2VuZXJhdGVCdWlsZGluZ0Rlc2NyaXB0aW9uIiwibnVtUmVzb3VyY2VzIiwicmFuZG9tQ29zdHMiLCJudW1DcmFmdGVkUmVzb3VyY2VzIiwicmFuZG9tRWZmZWN0cyIsIm51bUVmZmVjdHMiLCJyYW5kb21SZXNvdXJjZSIsInJhbmRvbUVmZmVjdFZhbHVlIiwicmFuZG9tQm9vc3RzIiwibnVtQm9vc3RzIiwicmFuZG9tQm9vc3RWYWx1ZSIsIm5hbWUiLCJnZXRDcmFmdGVkUmVzb3VyY2UiLCJ0b0xvd2VyQ2FzZSIsImlzUmVzb3VyY2UiLCJ1cGRhdGVCb3VuY2VBbmltYXRpb24iLCJhbGxWaXNpYmxlQnV0dG9ucyIsIlNldCIsImJhc2VNYXgiLCJiYXNlbWF4IiwiSW5maW5pdHkiLCJjYWxjQ3JhZnRCb251cyIsImlzQnV0dG9uSWRWaXNpYmxlIiwiaGFzIiwic2V0VmlzaWJsZUJ1dHRvbiIsImNsZWFyU2lkZWJhciIsImpvYkNvdW50cyIsImpvYnNUYWIiLCJnZXRUb3RhbEpvYnMiLCJqb2JEaXYiLCJkZWNyZW1lbnREaXYiLCJqb2JOYW1lU3BhbiIsImluY3JlbWVudERpdiIsImV2ZW50Iiwiam9iVHlwZSIsImNsb3Nlc3QiLCJ4IiwiY2xpZW50WCIsInkiLCJjbGllbnRZIiwic2hpZnRLZXkiLCJkaWZmZXJlbmNlIiwiY3RybEtleSIsImRpc3RyaWJ1dGVXb3JrZXJzIiwidXBkYXRlRGlzcGxheSIsIm51bVdvcmtlcnMiLCJ3b3JrZXJzRGlzdHJpYnV0aW9uIiwiTWFwIiwidG90YWxXb3JrZXJzIiwibnVtYmVyT2ZSZXNvdXJjZXMiLCJwZXJSZXNvdXJjZSIsInNldCIsIm1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2UiLCJyZW1haW5pbmdXb3JrZXJzIiwiZ2V0IiwiYWZmZWN0ZWRSZXNvdXJjZSIsImpvYkJ1dHRvbiIsInJlc291cmNlRGlzcGxheSIsImpvYkJ1dHRvblJlY3QiLCJyZXNvdXJjZVJlY3QiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvcGFjaXR5Iiwic2Nyb2xsWCIsInNjcm9sbFkiLCJlYXNpbmciLCJvbmZpbmlzaCIsInRoaXNKb2JCdXR0b24iLCJqb2JFbGVtZW50IiwiY29ubmVjdGlvbnMiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiZHJhd0xpbmUiLCJzdGFydEVsZW1lbnQiLCJlbmRYIiwiZW5kWSIsInN0YXJ0WCIsInN0YXJ0WSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImNvbnRleHQiLCJmcm9tWCIsImZyb21ZIiwidG9YIiwidG9ZIiwicmFkaXVzIiwiYW5nbGUiLCJ4X2NlbnRlciIsInlfY2VudGVyIiwiYXRhbjIiLCJjb3MiLCJzaW4iLCJQSSIsImNsb3NlUGF0aCIsImRyYXdBcnJvd2hlYWQiLCJzd2l0Y2hKb2IiLCJvbGRKb2JJZCIsIm5ld0pvYklkIiwid29ya2VycyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNsZWFySm9iQXNzaWdubWVudHMiLCJjbGVhclJlY3QiLCJyZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzIiwiZGF0YUpvYiIsIm9sZElkIiwibmV3SWQiLCJtYXhlZE91dCIsInJlc291cmNlQXJyYXkiLCJkcmF3QWxsQ29ubmVjdGlvbnMiLCJvbGRCdXR0b24iLCJuZXdCdXR0b24iLCJuZXdYIiwibmV3WSIsIm9mZnNldFRvcCIsInNldENvbm5lY3Rpb25zIiwibmV3Q29ubmVjdGlvbnMiLCJnZXRDb25uZWN0aW9ucyIsInJlc2V0QWxsSm9icyIsIndhdGVyIiwiYWxsIiwiZ2V0QnVpbGRpbmdDb3VudCIsImdldEJvb3N0IiwicmVzZXRCdWlsZGluZ3MiLCJoYXNUb29sIiwiaGlkZSIsImNyYWZ0ZWRPbmNlIiwicmVxdWlyZWRTdGFnZSIsInRvb2x0aXBjb3N0IiwiZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWciLCJjb25maWciLCJrIiwicmVzZXRDcmFmdGVkUmVzb3VyY2VzIiwiZ2xvYmFsUmF0ZXMiLCJzaG93R2xvYmFsUmF0ZXMiLCJnZXRSYXRlIiwicGVya3MiLCJ0b1JvbWFuIiwicm9tYW5OdW1lcmFscyIsIm51bWVyYWwiLCJyZXN1bHQiLCJhZGRQb25kZXJzIiwicmVzZXRQb25kZXJzIiwiZ2V0UG9uZGVyQ29uZmlnIiwicHJlc3RpZ2UiLCJwcmVzIiwic2V0UHJlc3RpZ2VDb3N0Iiwic2V0UHJlc3RpZ2VMZXZlbCIsImlzVmlzaWJsZSIsImdldFJlc291cmNlQ29uZmlnQnlJZCIsInJlc2V0UmVzb3VyY2VzIiwiZ2V0QmFzZU1heCIsImV4cCIsIm1hc29ucnkiLCJuZWVkVG9vbHMiLCJjYXJwZW50cnkiLCJ0aGlua2luZyIsImZhcm1pbmciLCJmaXNoaW5nIiwiaHVudGluZyIsInNhdmVHYW1lIiwibG9hZEdhbWUiLCJhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zIiwiY3JhZnRBbGxSZXNvdXJjZXMiLCJjcmFmdFJlc291cmNlIiwidXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzIiwic2VsZWN0QWJpbGl0eSIsInJlc2V0UGVya3MiLCJnZW5lcmF0ZVBvbmRlckJ1dHRvbnMiLCJhZGRUb29sIiwicmVzZXRTdGFnZXMiLCJpbml0aWFsaXplUmVzb3VyY2VUYWdzIiwidXBkYXRlU2lkZWJhciIsInVwZGF0ZVRvb2x0aXAiLCJoaWRlVG9vbHRpcCIsImdldEN1cnJlbnRUYWIiLCJpbml0aWFsaXplQXBwIiwicmVjYWxjdWxhdGVBbGxCdWlsZGluZ0Nvc3RzIiwic2V0UGV0YWxzIiwic3RhcnRQZXRhbFJlbmRlcmluZyIsInRvb2xzVG9TdGFnZXMiLCJ2aXNpYmlsaXR5UnVsZXMiLCJjb25kaXRpb24iLCJhY3Rpb24iLCJsb2NhdGlvbiIsImF1ZGlvRmlsZXMiLCJjdXJyZW50QXVkaW8iLCJ0aW1lb3V0SWQiLCJwbGF5UmFuZG9tVHJhY2siLCJjdXJyZW50VGltZSIsInJhbmRvbUluZGV4IiwiY2xlYXJUaW1lb3V0Iiwic2lsZW5jZUR1cmF0aW9uIiwib25lbmRlZCIsInNjaGVkdWxlTmV4dFRyYWNrIiwidG9nZ2xlT3B0aW9ucyIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiaW5jcmVhc2VDbG9uZUJ5T25lIiwidG9nZ2xlIiwiaXNEYXJrIiwiZmFkZVRvQmxhY2siLCJvdmVybGF5Iiwib3ZlcmxheVRleHQiLCJvdmVybGF5QnV0dG9uIiwibWlsbGlzZWNvbmRzX3Blcl9mcmFtZSIsImxhc3RfdGltZSIsInRvdGFsX3RpbWUiLCJhY2N1bXVsYXRlZF9sYWciLCJsb29wIiwiY3VycmVudF90aW1lIiwibm9ybWFsUmF0ZSIsInRpbWVfc2luY2VfbGFzdF9zYXZlIiwidGltZV9zaW5jZV9tYW51ZmF0dXJlIiwidGltZV9zaW5jZV9yZW5kZXIiLCJzYXZlX3JhdGUiLCJtYW51ZmFjdHVyZV9yYXRlIiwicmVuZGVyX3JhdGUiLCJydWxlIiwic3BsaWNlIiwidG9vbCIsImN1cnJlbnRIb3ZlckJ1dHRvbiIsInJlbmRlciIsIm9wdGlvbnNNZW51IiwiY3VycmVudGx5RGVsZXRpbmciLCJwYWdlWCIsInBhZ2VZIiwiYXBwIiwiYXBpS2V5IiwiYXV0aERvbWFpbiIsInByb2plY3RJZCIsInN0b3JhZ2VCdWNrZXQiLCJtZXNzYWdpbmdTZW5kZXJJZCIsImFwcElkIiwibWVhc3VyZW1lbnRJZCIsImZhY3RvcnlCdXR0b25zIiwibWFrZUZhY3RvcnlCdXR0b25zIiwibWF0Y2hlcyIsImJ1aWxkaW5nU3RyaW5nIiwidW5sb2NrQXR0ciIsImNhblVubG9jayIsInJlbG9hZCIsImdldFJLZXlGcm9tSUQiLCJjciIsImdldENSS2V5RnJvbUlEIiwiZmlzaEF1ZGlvIiwiZWF0RmlzaCIsImNvbmZpcm0iLCJkZWxldGVHYW1lIiwiZGFya01vZGVUb2dnbGUiLCJpc2VrYWkiLCJlIiwib3ZlcmxheUJhY2tCdXR0b24iLCJodXNrc0R1ZSIsImxhc3RCdWlsZGluZyIsIm5ld0J1aWxkaW5nc0NvdW50IiwicmFuZG9tQnVpbGRpbmciLCJpc2VrYWlBdWRpbyIsIm9sZEh1c2tWYWx1ZSIsImh1c2tWYWx1ZSIsImJ1dHRvbkNvbnRhaW5lciIsImdyaWRSb3ciLCJuIiwiYSIsIm5leHRGaWJvbmFjY2kiLCJwcmV2Rmlib25hY2NpIiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsInVwZGF0ZVVJIiwicmVzb3VyY2VEaXYiLCJzZXRUb3RhbFRpbWUiLCJnZXRNZXNzYWdlIiwic2V0U3RhZ2UiLCJzdGFnZSIsIm15UGVya3MiLCJwZXJrTmFtZSIsImFkZFBlcmsiLCJhYmlsaXR5TmFtZSIsImdldFBlcmtGcm9tVGllciIsInRpZXJOdW0iLCJnZXRBbGxQZXJrcyIsInBldGFsQXJyYXkiLCJQZXRhbCIsInBldGFsSW1nIiwidyIsImgiLCJmbGlwIiwieFNwZWVkIiwieVNwZWVkIiwiZmxpcFNwZWVkIiwiZHJhdyIsIkRhdGUiLCJnZXRNaW51dGVzIiwic3JjIiwiZ2xvYmFsQWxwaGEiLCJkcmF3SW1hZ2UiLCJhYnMiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJwZXRhbCIsIm5ld1RvdGFsIiwiSW1hZ2UiLCJnZW5lcmF0ZVVuaXF1ZUlEIiwibm93Iiwic3Vic3RyIiwidW5sb2NrSWQiLCJ1bmxvY2tLZXkiLCJwb25kZXJPYmplY3RzIiwicG9uZGVyS2V5IiwicG9uZGVyT2JqIiwiYnV0dG9uS2V5IiwibWF4Q2xvbmVzIiwibXlCdXR0b24iLCJuZXdUZXh0IiwiZWZmZWN0U3RyaW5nIiwiYWJicmV2aWF0ZU51bWJlciIsInVwZGF0ZVNraWxscyIsInJlc291cmNlc0NvbnRhaW5lciIsImNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbiIsImNvbnRhaW5lciIsImVtb2ppRGlzcGxheSIsInVwZGF0ZUVtb2ppRGlzcGxheSIsImVtb2ppU3RyIiwiZ2V0Q29sb3JDb21wb25lbnQiLCJza2lsbEtleSIsInNraWxsQ29sb3IiLCJyZWQiLCJibHVlIiwicmVwZWF0IiwiY3JhZnRSZXNvdXJjZVF1YW50aXR5Iiwic3VmZmljaWVudFJlc291cmNlcyIsImNyYWZ0Qm9udXMiLCJjcmFmdE9uZSIsImNhbGNTZWNvbmRzUmVtYWluaW5nIiwibmVlZGVkIiwicmVzb3VyY2VDb3VudERpdiIsInBsdXNCdXR0b24iLCJtaW51c0J1dHRvbiIsImR1bW15IiwiZmxleERpcmVjdGlvbiIsInJhdGUiLCJnZXRBbGxUb29scyIsImdldEFsbFN0YWdlcyIsInBvcHVsYXRlU2tpbGxzVGFibGUiLCJzYXZlIiwidG9vbHMiLCJzdGFnZXMiLCJ1bmxvY2tzIiwiam9icyIsIm1lc3NhZ2UiLCJmYWN0b3JpZXMiLCJuZXdCdWlsZGluZ3MiLCJhdWRpb1ZvbHVtZSIsIml0ZW0iLCJ1IiwibGFzdE5ld0J1aWxkaW5nIiwiaHRtbFN0cmluZyIsIm1lc3NhZ2VUb29sdGlwIiwibmVlZHMiLCJnZXRNZXNzYWdlVG9vbHRpcCIsIm1lc3NhZ2VBcnJheSIsImV4dHJhY3RUZXh0RnJvbUhUTUwiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsIm5ld1VpZCIsInBsYXllclVpZCIsInNhdmVnYW1lIiwidmFsdWVPZiIsInVuaW9uIiwicyIsImxvYWRCdWlsZGluZ3MiLCJ0aW1lX2RpZmZlcmVuY2UiLCJpbmMiLCJzaXplIiwiam9iIiwic2VsZWN0Q29ycmVjdFBlcmtCdXR0b24iLCJzZWxlY3RlZEJ1dHRvbiIsInJlbW92ZUF0dHJpYnV0ZSIsInNldE1heCIsImNvbnRlbnQiLCJ0YWJDb250YWluZXJzIiwidGFiTmFtZSIsInByZXZUYWIiLCJhY3RpdmVDb250ZW50IiwicHJldlRhYkVsZW1lbnQiLCJ0YWJzIiwidGFiU3RyaW5nIiwiYWN0aXZlVGFiQnV0dG9uIiwiaHRtbCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbFdpZHRoIiwic2hvdWxkSGlkZSIsImZvcm1hdCIsInVuaXQiLCJyb3VuZFRvRGVjaW1hbHMiLCJkZWNpbWFscyIsImZhY3RvciIsImNyZWF0ZVJlc291cmNlVGFnIiwiZ3JvdXBOYW1lIiwiZ3JvdXBDb250YWluZXIiLCJ0b2dnbGVCdXR0b24iLCJvbmNsaWNrIiwiZ3JvdXAiLCJjaGlsZHJlbiIsInRhZ05hbWUiLCJ0b2dnbGVHcm91cFZpc2liaWxpdHkiLCJjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyIiwicmVzb3VyY2VEaXNwbGF5TmFtZSIsInJlc291cmNlRWxlbWVudCIsInJlc291cmNlTmFtZVNwYW4iLCJyZXNvdXJjZVZhbHVlU3BhbiIsInJlc291cmNlUmF0ZVNwYW4iLCJlbGVtZW50SW5jcmVhc2UiLCJwYXJlbnRFbGVtZW50IiwiY3JhZnRlZEVsZW1lbnQiLCJmYWN0b3J5Q291bnQiLCJOYU4iLCJ3aXRoR3JvdXBzIiwicmVzb3VyY2VHcm91cHMiLCJzcGVjaWFsIiwiZm9vZCIsIm1hdGVyaWFscyIsImFkdmFuY2VkIiwibWV0YWwiLCJjb25zdHJ1Y3Rpb24iLCJncm91cE9mUmVzb3VyY2VzIiwicmVzb3VyY2VUb1NraWxsTWFwIiwiaW52ZXJ0U2tpbGxzVG9SZXNvdXJjZXMiLCJoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlIiwicHJvZ3Jlc3NCYXIiLCJ0ciIsInRkUHJvZ3Jlc3MiLCJza2lsbFRleHQiLCJsZXZlbHVwIiwicG9wIiwicGxheWVyVG9vbHMiLCJ1bCIsImxpIiwiY3JlYXRlVGV4dE5vZGUiLCJ1cGRhdGVUb29sVUkiLCJnZXRUb29sVmFsdWVGb3JSZXNvdXJjZSIsInNvcnRlZFRvb2xzIiwic29ydCIsInJlc291cmNlTGlzdCIsImdvbGRBbW91bnRFbCIsImJ1eVJlc291cmNlIiwicHJpY2UiLCJzZWxsUmVzb3VyY2UiLCJnZW5lcmF0ZVRyYWRlVGFibGUiLCJmbG9hdFRleHQiLCJhbG9uZUVsZW1lbnQiLCJidWlsZGluZ0NvdW50IiwiYnVpbGRpbmdMaXN0IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYnV0dG9uQ29uZmlnIiwic3RhdGUiLCJjcmFmdGVkIiwicmVxUG9uZGVyIiwiZGVzYyIsImVmZmVjdCIsInBhcnNlQW1vdW50IiwiYW1vdW50VGV4dCIsInJlZ2V4IiwibWF0Y2giLCJwcm9jZXNzZWRTdHJpbmciLCJleGVjIiwiY29sb3JDbGFzcyIsInNlY29uZHNSZW1haW5pbmciLCJwcm9jZXNzTWF0ZXJpYWxzIiwidGFyZ2V0UmVjdCIsInNob3dUb29sdGlwIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJPIiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiZnVsZmlsbGVkIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiYmluZCIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlUm9vdCI6IiJ9