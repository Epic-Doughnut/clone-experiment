/*! For license information please see 13_bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkclone_idle=self.webpackChunkclone_idle||[]).push([[13],{9013:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(5752),i=r(7582),o=r(7019),a=r(1313),s=r(9730);r(7635);var c,u="analytics",l="firebase_id",f="origin",d=6e4,h="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",p="https://www.googletagmanager.com/gtag/js",v=new o.Logger("@firebase/analytics"),g=((c={})["already-exists"]="A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.",c["already-initialized"]="initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.",c["already-initialized-settings"]="Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",c["interop-component-reg-failed"]="Firebase Analytics Interop Component failed to instantiate: {$reason}",c["invalid-analytics-context"]="Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",c["indexeddb-unavailable"]="IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",c["fetch-throttle"]="The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",c["config-fetch-failed"]="Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",c["no-api-key"]='The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',c["no-app-id"]='The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',c["no-client-id"]='The "client_id" field is empty.',c["invalid-gtag-resource"]="Trusted Types detected an invalid gtag resource: {$gtagURL}.",c),_=new a.ErrorFactory("analytics","Analytics",g);function b(e){if(!e.startsWith(p)){var t=_.create("invalid-gtag-resource",{gtagURL:e});return v.warn(t.message),""}return e}function m(e){return Promise.all(e.map((function(e){return e.catch((function(e){return e}))})))}function y(e,t,r,n,o,a){return i.__awaiter(this,void 0,void 0,(function(){var s,c,u,l;return i.__generator(this,(function(i){switch(i.label){case 0:s=n[o],i.label=1;case 1:return i.trys.push([1,7,,8]),s?[4,t[s]]:[3,3];case 2:return i.sent(),[3,6];case 3:return[4,m(r)];case 4:return c=i.sent(),(u=c.find((function(e){return e.measurementId===o})))?[4,t[u.appId]]:[3,6];case 5:i.sent(),i.label=6;case 6:return[3,8];case 7:return l=i.sent(),v.error(l),[3,8];case 8:return e("config",o,a),[2]}}))}))}function w(e,t,r,n,o){return i.__awaiter(this,void 0,void 0,(function(){var a,s,c,u,l,f,d,h;return i.__generator(this,(function(i){switch(i.label){case 0:return i.trys.push([0,4,,5]),a=[],o&&o.send_to?(s=o.send_to,Array.isArray(s)||(s=[s]),[4,m(r)]):[3,2];case 1:for(c=i.sent(),u=function(e){var r=c.find((function(t){return t.measurementId===e})),n=r&&t[r.appId];if(!n)return a=[],"break";a.push(n)},l=0,f=s;l<f.length&&(d=f[l],"break"!==u(d));l++);i.label=2;case 2:return 0===a.length&&(a=Object.values(t)),[4,Promise.all(a)];case 3:return i.sent(),e("event",n,o||{}),[3,5];case 4:return h=i.sent(),v.error(h),[3,5];case 5:return[2]}}))}))}var I=30,E=new(function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t=1e3),this.throttleMetadata=e,this.intervalMillis=t}return e.prototype.getThrottleMetadata=function(e){return this.throttleMetadata[e]},e.prototype.setThrottleMetadata=function(e,t){this.throttleMetadata[e]=t},e.prototype.deleteThrottleMetadata=function(e){delete this.throttleMetadata[e]},e}());function S(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}function D(e){var t;return i.__awaiter(this,void 0,void 0,(function(){var r,n,o,a,s,c,u;return i.__generator(this,(function(i){switch(i.label){case 0:return r=e.appId,n=e.apiKey,o={method:"GET",headers:S(n)},a=h.replace("{app-id}",r),[4,fetch(a,o)];case 1:if(200===(s=i.sent()).status||304===s.status)return[3,6];c="",i.label=2;case 2:return i.trys.push([2,4,,5]),[4,s.json()];case 3:return u=i.sent(),(null===(t=u.error)||void 0===t?void 0:t.message)&&(c=u.error.message),[3,5];case 4:return i.sent(),[3,5];case 5:throw _.create("config-fetch-failed",{httpStatus:s.status,responseMessage:c});case 6:return[2,s.json()]}}))}))}function C(e,t,r,n){var o,s=t.throttleEndTimeMillis,c=t.backoffCount;return void 0===n&&(n=E),i.__awaiter(this,void 0,void 0,(function(){var t,u,l,f,d,h,p,g;return i.__generator(this,(function(i){switch(i.label){case 0:t=e.appId,u=e.measurementId,i.label=1;case 1:return i.trys.push([1,3,,4]),[4,O(r,s)];case 2:return i.sent(),[3,4];case 3:if(l=i.sent(),u)return v.warn("Timed out fetching this Firebase app's measurement ID from the server."+" Falling back to the measurement ID ".concat(u)+' provided in the "measurementId" field in the local Firebase config. ['.concat(null==l?void 0:l.message,"]")),[2,{appId:t,measurementId:u}];throw l;case 4:return i.trys.push([4,6,,7]),[4,D(e)];case 5:return f=i.sent(),n.deleteThrottleMetadata(t),[2,f];case 6:if(d=i.sent(),!function(e){if(!(e instanceof a.FirebaseError&&e.customData))return!1;var t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(h=d)){if(n.deleteThrottleMetadata(t),u)return v.warn("Failed to fetch this Firebase app's measurement ID from the server."+" Falling back to the measurement ID ".concat(u)+' provided in the "measurementId" field in the local Firebase config. ['.concat(null==h?void 0:h.message,"]")),[2,{appId:t,measurementId:u}];throw d}return p=503===Number(null===(o=null==h?void 0:h.customData)||void 0===o?void 0:o.httpStatus)?a.calculateBackoffMillis(c,n.intervalMillis,I):a.calculateBackoffMillis(c,n.intervalMillis),g={throttleEndTimeMillis:Date.now()+p,backoffCount:c+1},n.setThrottleMetadata(t,g),v.debug("Calling attemptFetch again in ".concat(p," millis")),[2,C(e,g,r,n)];case 7:return[2]}}))}))}function O(e,t){return new Promise((function(r,n){var i=Math.max(t-Date.now(),0),o=setTimeout(r,i);e.addEventListener((function(){clearTimeout(o),n(_.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}var A,L,T=function(){function e(){this.listeners=[]}return e.prototype.addEventListener=function(e){this.listeners.push(e)},e.prototype.abort=function(){this.listeners.forEach((function(e){return e()}))},e}();function P(e,t){return i.__awaiter(this,void 0,void 0,(function(){var r;return i.__generator(this,(function(n){switch(n.label){case 0:return[4,t];case 1:return r=n.sent(),[2,new Promise((function(t,n){e("get",r,"client_id",(function(e){e||n(_.create("no-client-id")),t(e)}))}))]}}))}))}function x(e){L=e}function j(e){A=e}function k(e,t,r,n,o,s,c){var u;return i.__awaiter(this,void 0,void 0,(function(){var h,g,m,y,w,I;return i.__generator(this,(function(S){switch(S.label){case 0:return h=function(e,t,r){return void 0===t&&(t=E),i.__awaiter(this,void 0,void 0,(function(){var r,n,o,a,s,c,u=this;return i.__generator(this,(function(l){if(r=e.options,n=r.appId,o=r.apiKey,a=r.measurementId,!n)throw _.create("no-app-id");if(!o){if(a)return[2,{measurementId:a,appId:n}];throw _.create("no-api-key")}return s=t.getThrottleMetadata(n)||{backoffCount:0,throttleEndTimeMillis:Date.now()},c=new T,setTimeout((function(){return i.__awaiter(u,void 0,void 0,(function(){return i.__generator(this,(function(e){return c.abort(),[2]}))}))}),d),[2,C({appId:n,apiKey:o,measurementId:a},s,c,t)]}))}))}(e),h.then((function(t){r[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&v.warn("The measurement ID in the local Firebase config (".concat(e.options.measurementId,")")+" does not match the measurement ID fetched from the server (".concat(t.measurementId,").")+" To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.")})).catch((function(e){return v.error(e)})),t.push(h),g=function(){return i.__awaiter(this,void 0,void 0,(function(){var e;return i.__generator(this,(function(t){switch(t.label){case 0:return a.isIndexedDBAvailable()?[3,1]:(v.warn(_.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),[2,!1]);case 1:return t.trys.push([1,3,,4]),[4,a.validateIndexedDBOpenable()];case 2:return t.sent(),[3,4];case 3:return e=t.sent(),v.warn(_.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),[2,!1];case 4:return[2,!0]}}))}))}().then((function(e){return e?n.getId():void 0})),[4,Promise.all([h,g])];case 1:return m=S.sent(),y=m[0],w=m[1],function(e){for(var t=window.document.getElementsByTagName("script"),r=0,n=Object.values(t);r<n.length;r++){var i=n[r];if(i.src&&i.src.includes(p)&&i.src.includes(e))return i}return null}(s)||function(e,t){var r=function(e,t){var r;return window.trustedTypes&&(r=window.trustedTypes.createPolicy("firebase-js-sdk-policy",t)),r}(0,{createScriptURL:b}),n=document.createElement("script"),i="".concat(p,"?l=").concat(e,"&id=").concat(t);n.src=r?null==r?void 0:r.createScriptURL(i):i,n.async=!0,document.head.appendChild(n)}(s,y.measurementId),L&&(o("consent","default",L),x(void 0)),o("js",new Date),(I=null!==(u=null==c?void 0:c.config)&&void 0!==u?u:{})[f]="firebase",I.update=!0,null!=w&&(I[l]=w),o("config",y.measurementId,I),A&&(o("set",A),j(void 0)),[2,y.measurementId]}}))}))}var B,M,N=function(){function e(e){this.app=e}return e.prototype._delete=function(){return delete F[this.app.options.appId],Promise.resolve()},e}(),F={},R=[],z={},V="dataLayer",H="gtag",U=!1;function W(e,t,r){!function(){var e=[];if(a.isBrowserExtension()&&e.push("This is a browser extension environment."),a.areCookiesEnabled()||e.push("Cookies are not available."),e.length>0){var t=e.map((function(e,t){return"(".concat(t+1,") ").concat(e)})).join(" "),r=_.create("invalid-analytics-context",{errorInfo:t});v.warn(r.message)}}();var n=e.options.appId;if(!n)throw _.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw _.create("no-api-key");v.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest'+" measurement ID for this Firebase app. Falling back to the measurement ID ".concat(e.options.measurementId)+' provided in the "measurementId" field in the local Firebase config.')}if(null!=F[n])throw _.create("already-exists",{id:n});if(!U){!function(e){var t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(V);var o=function(e,t,r,n,o){var a=function(){window[n].push(arguments)};return window[o]&&"function"==typeof window[o]&&(a=window[o]),window[o]=function(e,t,r,n){return function(o){for(var a=[],s=1;s<arguments.length;s++)a[s-1]=arguments[s];return i.__awaiter(this,void 0,void 0,(function(){var s,c,u,l,f,d;return i.__generator(this,(function(h){switch(h.label){case 0:return h.trys.push([0,6,,7]),"event"!==o?[3,2]:(c=a[0],s=a[1],[4,w(e,t,r,c,s)]);case 1:return h.sent(),[3,5];case 2:return"config"!==o?[3,4]:(c=a[0],s=a[1],[4,y(e,t,r,n,c,s)]);case 3:return h.sent(),[3,5];case 4:"consent"===o?(s=a[0],e("consent","update",s)):"get"===o?(c=a[0],u=a[1],l=a[2],e("get",c,u,l)):"set"===o?(f=a[0],e("set",f)):e.apply(void 0,i.__spreadArray([o],a,!1)),h.label=5;case 5:return[3,7];case 6:return d=h.sent(),v.error(d),[3,7];case 7:return[2]}}))}))}}(a,e,t,r),{gtagCore:a,wrappedGtag:window[o]}}(F,R,z,V,H),s=o.wrappedGtag,c=o.gtagCore;M=s,B=c,U=!0}return F[n]=k(e,R,z,t,B,V,r),new N(e)}function $(e,t){void 0===t&&(t={});var r=n._getProvider(e,u);if(r.isInitialized()){var i=r.getImmediate();if(a.deepEqual(t,r.getOptions()))return i;throw _.create("already-initialized")}return r.initialize({options:t})}function q(e,t,r,n){e=a.getModularInstance(e),function(e,t,r,n,o){return i.__awaiter(this,void 0,void 0,(function(){var a,s;return i.__generator(this,(function(c){switch(c.label){case 0:return o&&o.global?(e("event",r,n),[2]):[3,1];case 1:return[4,t];case 2:a=c.sent(),s=i.__assign(i.__assign({},n),{send_to:a}),e("event",r,s),c.label=3;case 3:return[2]}}))}))}(M,F[e.app.options.appId],t,r,n).catch((function(e){return v.error(e)}))}var G="@firebase/analytics",K="0.10.0";n._registerComponent(new s.Component(u,(function(e,t){var r=t.options;return W(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),r)}),"PUBLIC")),n._registerComponent(new s.Component("analytics-internal",(function(e){try{var t=e.getProvider(u).getImmediate();return{logEvent:function(e,r,n){return q(t,e,r,n)}}}catch(e){throw _.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),n.registerVersion(G,K),n.registerVersion(G,K,"cjs5"),t.getAnalytics=function(e){void 0===e&&(e=n.getApp()),e=a.getModularInstance(e);var t=n._getProvider(e,u);return t.isInitialized()?t.getImmediate():$(e)},t.getGoogleAnalyticsClientId=function(e){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(t){return e=a.getModularInstance(e),[2,P(M,F[e.app.options.appId])]}))}))},t.initializeAnalytics=$,t.isSupported=function(){return i.__awaiter(this,void 0,void 0,(function(){return i.__generator(this,(function(e){switch(e.label){case 0:if(a.isBrowserExtension())return[2,!1];if(!a.areCookiesEnabled())return[2,!1];if(!a.isIndexedDBAvailable())return[2,!1];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,a.validateIndexedDBOpenable()];case 2:return[2,e.sent()];case 3:return e.sent(),[2,!1];case 4:return[2]}}))}))},t.logEvent=q,t.setAnalyticsCollectionEnabled=function(e,t){e=a.getModularInstance(e),function(e,t){return i.__awaiter(this,void 0,void 0,(function(){var r;return i.__generator(this,(function(n){switch(n.label){case 0:return[4,e];case 1:return r=n.sent(),window["ga-disable-".concat(r)]=!t,[2]}}))}))}(F[e.app.options.appId],t).catch((function(e){return v.error(e)}))},t.setConsent=function(e){M?M("consent","update",e):x(e)},t.setCurrentScreen=function(e,t,r){e=a.getModularInstance(e),function(e,t,r,n){return i.__awaiter(this,void 0,void 0,(function(){var o;return i.__generator(this,(function(i){switch(i.label){case 0:return n&&n.global?(e("set",{screen_name:r}),[2,Promise.resolve()]):[3,1];case 1:return[4,t];case 2:o=i.sent(),e("config",o,{update:!0,screen_name:r}),i.label=3;case 3:return[2]}}))}))}(M,F[e.app.options.appId],t,r).catch((function(e){return v.error(e)}))},t.setDefaultEventParameters=function(e){M?M("set",e):j(e)},t.setUserId=function(e,t,r){e=a.getModularInstance(e),function(e,t,r,n){return i.__awaiter(this,void 0,void 0,(function(){var o;return i.__generator(this,(function(i){switch(i.label){case 0:return n&&n.global?(e("set",{user_id:r}),[2,Promise.resolve()]):[3,1];case 1:return[4,t];case 2:o=i.sent(),e("config",o,{update:!0,user_id:r}),i.label=3;case 3:return[2]}}))}))}(M,F[e.app.options.appId],t,r).catch((function(e){return v.error(e)}))},t.setUserProperties=function(e,t,r){e=a.getModularInstance(e),function(e,t,r,n){return i.__awaiter(this,void 0,void 0,(function(){var o,a,s,c,u;return i.__generator(this,(function(i){switch(i.label){case 0:if(!n||!n.global)return[3,1];for(o={},a=0,s=Object.keys(r);a<s.length;a++)c=s[a],o["user_properties.".concat(c)]=r[c];return e("set",o),[2,Promise.resolve()];case 1:return[4,t];case 2:u=i.sent(),e("config",u,{update:!0,user_properties:r}),i.label=3;case 3:return[2]}}))}))}(M,F[e.app.options.appId],t,r).catch((function(e){return v.error(e)}))},t.settings=function(e){if(U)throw _.create("already-initialized");e.dataLayerName&&(V=e.dataLayerName),e.gtagName&&(H=e.gtagName)}},5752:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n,i,o=r(9730),a=r(7582),s=r(7019),c=r(1313),u=r(4424),l=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){var t=e.getImmediate();return"".concat(t.library,"/").concat(t.version)}return null})).filter((function(e){return e})).join(" ")},e}(),f="@firebase/app",d="0.9.23",h=new s.Logger("@firebase/app"),p="[DEFAULT]",v=((n={})[f]="fire-core",n["@firebase/app-compat"]="fire-core-compat",n["@firebase/analytics"]="fire-analytics",n["@firebase/analytics-compat"]="fire-analytics-compat",n["@firebase/app-check"]="fire-app-check",n["@firebase/app-check-compat"]="fire-app-check-compat",n["@firebase/auth"]="fire-auth",n["@firebase/auth-compat"]="fire-auth-compat",n["@firebase/database"]="fire-rtdb",n["@firebase/database-compat"]="fire-rtdb-compat",n["@firebase/functions"]="fire-fn",n["@firebase/functions-compat"]="fire-fn-compat",n["@firebase/installations"]="fire-iid",n["@firebase/installations-compat"]="fire-iid-compat",n["@firebase/messaging"]="fire-fcm",n["@firebase/messaging-compat"]="fire-fcm-compat",n["@firebase/performance"]="fire-perf",n["@firebase/performance-compat"]="fire-perf-compat",n["@firebase/remote-config"]="fire-rc",n["@firebase/remote-config-compat"]="fire-rc-compat",n["@firebase/storage"]="fire-gcs",n["@firebase/storage-compat"]="fire-gcs-compat",n["@firebase/firestore"]="fire-fst",n["@firebase/firestore-compat"]="fire-fst-compat",n["fire-js"]="fire-js",n.firebase="fire-js-all",n),g=new Map,_=new Map;function b(e,t){try{e.container.addComponent(t)}catch(r){h.debug("Component ".concat(t.name," failed to register with FirebaseApp ").concat(e.name),r)}}function m(e){var t,r,n=e.name;if(_.has(n))return h.debug("There were multiple attempts to register component ".concat(n,".")),!1;_.set(n,e);try{for(var i=a.__values(g.values()),o=i.next();!o.done;o=i.next())b(o.value,e)}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return!0}function y(e,t){var r=e.container.getProvider("heartbeat").getImmediate({optional:!0});return r&&r.triggerHeartbeat(),e.container.getProvider(t)}var w=((i={})["no-app"]="No Firebase App '{$appName}' has been created - call initializeApp() first",i["bad-app-name"]="Illegal App name: '{$appName}",i["duplicate-app"]="Firebase App named '{$appName}' already exists with different options or config",i["app-deleted"]="Firebase App named '{$appName}' already deleted",i["no-options"]="Need to provide options, when not being deployed to hosting via source.",i["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",i["invalid-log-argument"]="First argument to `onLog` must be null or a function.",i["idb-open"]="Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",i["idb-get"]="Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",i["idb-set"]="Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",i["idb-delete"]="Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",i),I=new c.ErrorFactory("app","Firebase",w),E=function(){function e(e,t,r){var n=this;this._isDeleted=!1,this._options=a.__assign({},e),this._config=a.__assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=r,this.container.addComponent(new o.Component("app",(function(){return n}),"PUBLIC"))}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed(),this._automaticDataCollectionEnabled},set:function(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed(),this._name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed(),this._options},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"config",{get:function(){return this.checkDestroyed(),this._config},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"container",{get:function(){return this._container},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDeleted",{get:function(){return this._isDeleted},set:function(e){this._isDeleted=e},enumerable:!1,configurable:!0}),e.prototype.checkDestroyed=function(){if(this.isDeleted)throw I.create("app-deleted",{appName:this._name})},e}();function S(e,t){var r,n;void 0===t&&(t={});var i=e;"object"!=typeof t&&(t={name:t});var s=a.__assign({name:p,automaticDataCollectionEnabled:!1},t),u=s.name;if("string"!=typeof u||!u)throw I.create("bad-app-name",{appName:String(u)});if(i||(i=c.getDefaultAppConfig()),!i)throw I.create("no-options");var l=g.get(u);if(l){if(c.deepEqual(i,l.options)&&c.deepEqual(s,l.config))return l;throw I.create("duplicate-app",{appName:u})}var f=new o.ComponentContainer(u);try{for(var d=a.__values(_.values()),h=d.next();!h.done;h=d.next()){var v=h.value;f.addComponent(v)}}catch(e){r={error:e}}finally{try{h&&!h.done&&(n=d.return)&&n.call(d)}finally{if(r)throw r.error}}var b=new E(i,s,f);return g.set(u,b),b}function D(e,t,r){var n,i=null!==(n=v[e])&&void 0!==n?n:e;r&&(i+="-".concat(r));var a=i.match(/\s|\//),s=t.match(/\s|\//);if(a||s){var c=['Unable to register library "'.concat(i,'" with version "').concat(t,'":')];return a&&c.push('library name "'.concat(i,'" contains illegal characters (whitespace or "/")')),a&&s&&c.push("and"),s&&c.push('version name "'.concat(t,'" contains illegal characters (whitespace or "/")')),void h.warn(c.join(" "))}m(new o.Component("".concat(i,"-version"),(function(){return{library:i,version:t}}),"VERSION"))}var C="firebase-heartbeat-database",O=1,A="firebase-heartbeat-store",L=null;function T(){return L||(L=u.openDB(C,O,{upgrade:function(e,t){0===t&&e.createObjectStore(A)}}).catch((function(e){throw I.create("idb-open",{originalErrorMessage:e.message})}))),L}function P(e){return a.__awaiter(this,void 0,void 0,(function(){var t,r;return a.__generator(this,(function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),[4,T()];case 1:return[4,n.sent().transaction(A).objectStore(A).get(j(e))];case 2:return[2,n.sent()];case 3:return(t=n.sent())instanceof c.FirebaseError?h.warn(t.message):(r=I.create("idb-get",{originalErrorMessage:null==t?void 0:t.message}),h.warn(r.message)),[3,4];case 4:return[2]}}))}))}function x(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n,i,o;return a.__generator(this,(function(a){switch(a.label){case 0:return a.trys.push([0,4,,5]),[4,T()];case 1:return r=a.sent(),[4,(n=r.transaction(A,"readwrite")).objectStore(A).put(t,j(e))];case 2:return a.sent(),[4,n.done];case 3:return a.sent(),[3,5];case 4:return(i=a.sent())instanceof c.FirebaseError?h.warn(i.message):(o=I.create("idb-set",{originalErrorMessage:null==i?void 0:i.message}),h.warn(o.message)),[3,5];case 5:return[2]}}))}))}function j(e){return"".concat(e.name,"!").concat(e.options.appId)}var k=function(){function e(e){var t=this;this.container=e,this._heartbeatsCache=null;var r=this.container.getProvider("app").getImmediate();this._storage=new M(r),this._heartbeatsCachePromise=this._storage.read().then((function(e){return t._heartbeatsCache=e,e}))}return e.prototype.triggerHeartbeat=function(){var e;return a.__awaiter(this,void 0,void 0,(function(){var t,r,n,i;return a.__generator(this,(function(o){switch(o.label){case 0:return t=this.container.getProvider("platform-logger").getImmediate(),r=t.getPlatformInfoString(),n=B(),null!=(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)?[3,2]:(i=this,[4,this._heartbeatsCachePromise]);case 1:i._heartbeatsCache=o.sent(),o.label=2;case 2:return this._heartbeatsCache.lastSentHeartbeatDate===n||this._heartbeatsCache.heartbeats.some((function(e){return e.date===n}))?[2]:(this._heartbeatsCache.heartbeats.push({date:n,agent:r}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((function(e){var t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),[2,this._storage.overwrite(this._heartbeatsCache)])}}))}))},e.prototype.getHeartbeatsHeader=function(){var e;return a.__awaiter(this,void 0,void 0,(function(){var t,r,n,i,o;return a.__generator(this,(function(s){switch(s.label){case 0:return null!==this._heartbeatsCache?[3,2]:[4,this._heartbeatsCachePromise];case 1:s.sent(),s.label=2;case 2:return null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||0===this._heartbeatsCache.heartbeats.length?[2,""]:(t=B(),r=function(e,t){var r,n;void 0===t&&(t=1024);var i=[],o=e.slice(),s=function(e){var r=i.find((function(t){return t.agent===e.agent}));if(r){if(r.dates.push(e.date),N(i)>t)return r.dates.pop(),"break"}else if(i.push({agent:e.agent,dates:[e.date]}),N(i)>t)return i.pop(),"break";o=o.slice(1)};try{for(var c=a.__values(e),u=c.next();!u.done&&"break"!==s(u.value);u=c.next());}catch(e){r={error:e}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(r)throw r.error}}return{heartbeatsToSend:i,unsentEntries:o}}(this._heartbeatsCache.heartbeats),n=r.heartbeatsToSend,i=r.unsentEntries,o=c.base64urlEncodeWithoutPadding(JSON.stringify({version:2,heartbeats:n})),this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,[4,this._storage.overwrite(this._heartbeatsCache)]):[3,4]);case 3:return s.sent(),[3,5];case 4:this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache),s.label=5;case 5:return[2,o]}}))}))},e}();function B(){return(new Date).toISOString().substring(0,10)}var M=function(){function e(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}return e.prototype.runIndexedDBEnvironmentCheck=function(){return a.__awaiter(this,void 0,void 0,(function(){return a.__generator(this,(function(e){return c.isIndexedDBAvailable()?[2,c.validateIndexedDBOpenable().then((function(){return!0})).catch((function(){return!1}))]:[2,!1]}))}))},e.prototype.read=function(){return a.__awaiter(this,void 0,void 0,(function(){return a.__generator(this,(function(e){switch(e.label){case 0:return[4,this._canUseIndexedDBPromise];case 1:return e.sent()?[3,2]:[2,{heartbeats:[]}];case 2:return[4,P(this.app)];case 3:return[2,e.sent()||{heartbeats:[]}]}}))}))},e.prototype.overwrite=function(e){var t;return a.__awaiter(this,void 0,void 0,(function(){var r;return a.__generator(this,(function(n){switch(n.label){case 0:return[4,this._canUseIndexedDBPromise];case 1:return n.sent()?[3,2]:[2];case 2:return[4,this.read()];case 3:return r=n.sent(),[2,x(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:r.lastSentHeartbeatDate,heartbeats:e.heartbeats})]}}))}))},e.prototype.add=function(e){var t;return a.__awaiter(this,void 0,void 0,(function(){var r;return a.__generator(this,(function(n){switch(n.label){case 0:return[4,this._canUseIndexedDBPromise];case 1:return n.sent()?[3,2]:[2];case 2:return[4,this.read()];case 3:return r=n.sent(),[2,x(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:r.lastSentHeartbeatDate,heartbeats:a.__spreadArray(a.__spreadArray([],a.__read(r.heartbeats),!1),a.__read(e.heartbeats),!1)})]}}))}))},e}();function N(e){return c.base64urlEncodeWithoutPadding(JSON.stringify({version:2,heartbeats:e})).length}m(new o.Component("platform-logger",(function(e){return new l(e)}),"PRIVATE")),m(new o.Component("heartbeat",(function(e){return new k(e)}),"PRIVATE")),D(f,d,"node"),D(f,d,"cjs5"),D("fire-js",""),Object.defineProperty(t,"FirebaseError",{enumerable:!0,get:function(){return c.FirebaseError}}),t.SDK_VERSION="10.6.0",t._DEFAULT_ENTRY_NAME=p,t._addComponent=b,t._addOrOverwriteComponent=function(e,t){e.container.addOrOverwriteComponent(t)},t._apps=g,t._clearComponents=function(){_.clear()},t._components=_,t._getProvider=y,t._registerComponent=m,t._removeServiceInstance=function(e,t,r){void 0===r&&(r=p),y(e,t).clearInstance(r)},t.deleteApp=function(e){return a.__awaiter(this,void 0,void 0,(function(){var t;return a.__generator(this,(function(r){switch(r.label){case 0:return t=e.name,g.has(t)?(g.delete(t),[4,Promise.all(e.container.getProviders().map((function(e){return e.delete()})))]):[3,2];case 1:r.sent(),e.isDeleted=!0,r.label=2;case 2:return[2]}}))}))},t.getApp=function(e){void 0===e&&(e=p);var t=g.get(e);if(!t&&e===p&&c.getDefaultAppConfig())return S();if(!t)throw I.create("no-app",{appName:e});return t},t.getApps=function(){return Array.from(g.values())},t.initializeApp=S,t.onLog=function(e,t){if(null!==e&&"function"!=typeof e)throw I.create("invalid-log-argument");s.setUserLogHandler(e,t)},t.registerVersion=D,t.setLogLevel=function(e){s.setLogLevel(e)}},9730:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(7582),i=r(1313),o=function(){function e(e,t,r){this.name=e,this.instanceFactory=t,this.type=r,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e.prototype.setInstanceCreatedCallback=function(e){return this.onInstanceCreated=e,this},e}(),a="[DEFAULT]",s=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}return e.prototype.get=function(e){var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var r=new i.Deferred;if(this.instancesDeferred.set(t,r),this.isInitialized(t)||this.shouldAutoInitialize())try{var n=this.getOrInitializeService({instanceIdentifier:t});n&&r.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t,r=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),n=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(r)&&!this.shouldAutoInitialize()){if(n)return null;throw Error("Service ".concat(this.name," is not available"))}try{return this.getOrInitializeService({instanceIdentifier:r})}catch(e){if(n)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,r;if(e.name!==this.name)throw Error("Mismatching Component ".concat(e.name," for Provider ").concat(this.name,"."));if(this.component)throw Error("Component for ".concat(this.name," has already been provided"));if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:a})}catch(e){}try{for(var i=n.__values(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var s=n.__read(o.value,2),c=s[0],u=s[1],l=this.normalizeInstanceIdentifier(c);try{var f=this.getOrInitializeService({instanceIdentifier:l});u.resolve(f)}catch(e){}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}}},e.prototype.clearInstance=function(e){void 0===e&&(e=a),this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return n.__awaiter(this,void 0,void 0,(function(){var e;return n.__generator(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(n.__spreadArray(n.__spreadArray([],n.__read(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()}))),!1),n.__read(e.filter((function(e){return"_delete"in e})).map((function(e){return e._delete()}))),!1))];case 1:return t.sent(),[2]}}))}))},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.isInitialized=function(e){return void 0===e&&(e=a),this.instances.has(e)},e.prototype.getOptions=function(e){return void 0===e&&(e=a),this.instancesOptions.get(e)||{}},e.prototype.initialize=function(e){var t,r;void 0===e&&(e={});var i=e.options,o=void 0===i?{}:i,a=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(a))throw Error("".concat(this.name,"(").concat(a,") has already been initialized"));if(!this.isComponentSet())throw Error("Component ".concat(this.name," has not been registered yet"));var s=this.getOrInitializeService({instanceIdentifier:a,options:o});try{for(var c=n.__values(this.instancesDeferred.entries()),u=c.next();!u.done;u=c.next()){var l=n.__read(u.value,2),f=l[0],d=l[1];a===this.normalizeInstanceIdentifier(f)&&d.resolve(s)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(t)throw t.error}}return s},e.prototype.onInit=function(e,t){var r,n=this.normalizeInstanceIdentifier(t),i=null!==(r=this.onInitCallbacks.get(n))&&void 0!==r?r:new Set;i.add(e),this.onInitCallbacks.set(n,i);var o=this.instances.get(n);return o&&e(o,n),function(){i.delete(e)}},e.prototype.invokeOnInitCallbacks=function(e,t){var r,i,o=this.onInitCallbacks.get(t);if(o)try{for(var a=n.__values(o),s=a.next();!s.done;s=a.next()){var c=s.value;try{c(e,t)}catch(e){}}}catch(e){r={error:e}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}},e.prototype.getOrInitializeService=function(e){var t,r=e.instanceIdentifier,n=e.options,i=void 0===n?{}:n,o=this.instances.get(r);if(!o&&this.component&&(o=this.component.instanceFactory(this.container,{instanceIdentifier:(t=r,t===a?void 0:t),options:i}),this.instances.set(r,o),this.instancesOptions.set(r,i),this.invokeOnInitCallbacks(o,r),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,r,o)}catch(e){}return o||null},e.prototype.normalizeInstanceIdentifier=function(e){return void 0===e&&(e=a),this.component?this.component.multipleInstances?e:a:e},e.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},e}(),c=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component ".concat(e.name," has already been registered with ").concat(this.name));t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new s(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}();t.Component=o,t.ComponentContainer=c,t.Provider=s},7635:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n,i=r(5752),o=r(9730),a=r(7582),s=r(1313),c=r(4819),u="@firebase/installations",l="0.6.4",f=1e4,d="w:".concat(l),h="FIS_v2",p="https://firebaseinstallations.googleapis.com/v1",v=36e5,g=((n={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',n["not-registered"]="Firebase Installation is not registered.",n["installation-not-found"]="Firebase Installation not found.",n["request-failed"]='{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',n["app-offline"]="Could not process request. Application offline.",n["delete-pending-registration"]="Can't delete installation while there is a pending registration request.",n),_=new s.ErrorFactory("installations","Installations",g);function b(e){return e instanceof s.FirebaseError&&e.code.includes("request-failed")}function m(e){var t=e.projectId;return"".concat(p,"/projects/").concat(t,"/installations")}function y(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}function w(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n;return a.__generator(this,(function(i){switch(i.label){case 0:return[4,t.json()];case 1:return r=i.sent(),n=r.error,[2,_.create("request-failed",{requestName:e,serverCode:n.code,serverMessage:n.message,serverStatus:n.status})]}}))}))}function I(e){var t=e.apiKey;return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function E(e,t){var r=t.refreshToken,n=I(e);return n.append("Authorization",function(e){return"".concat(h," ").concat(e)}(r)),n}function S(e){return a.__awaiter(this,void 0,void 0,(function(){var t;return a.__generator(this,(function(r){switch(r.label){case 0:return[4,e()];case 1:return(t=r.sent()).status>=500&&t.status<600?[2,e()]:[2,t]}}))}))}function D(e,t){var r=e.appConfig,n=e.heartbeatServiceProvider,i=t.fid;return a.__awaiter(this,void 0,void 0,(function(){var e,t,o,s,c,u,l,f;return a.__generator(this,(function(a){switch(a.label){case 0:return e=m(r),t=I(r),(o=n.getImmediate({optional:!0}))?[4,o.getHeartbeatsHeader()]:[3,2];case 1:(s=a.sent())&&t.append("x-firebase-client",s),a.label=2;case 2:return c={fid:i,authVersion:h,appId:r.appId,sdkVersion:d},u={method:"POST",headers:t,body:JSON.stringify(c)},[4,S((function(){return fetch(e,u)}))];case 3:return(l=a.sent()).ok?[4,l.json()]:[3,5];case 4:return[2,{fid:(f=a.sent()).fid||i,registrationStatus:2,refreshToken:f.refreshToken,authToken:y(f.authToken)}];case 5:return[4,w("Create Installation",l)];case 6:throw a.sent()}}))}))}function C(e){return new Promise((function(t){setTimeout(t,e)}))}var O=/^[cdef][\w-]{21}$/,A="";function L(){try{var e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;var t=function(e){var t;return(t=e,btoa(String.fromCharCode.apply(String,a.__spreadArray([],a.__read(t),!1))).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22)}(e);return O.test(t)?t:A}catch(e){return A}}function T(e){return"".concat(e.appName,"!").concat(e.appId)}var P=new Map;function x(e,t){var r=T(e);j(r,t),function(e,t){var r=B();r&&r.postMessage({key:e,fid:t}),M()}(r,t)}function j(e,t){var r,n,i=P.get(e);if(i)try{for(var o=a.__values(i),s=o.next();!s.done;s=o.next())(0,s.value)(t)}catch(e){r={error:e}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}}var k=null;function B(){return!k&&"BroadcastChannel"in self&&((k=new BroadcastChannel("[Firebase] FID Change")).onmessage=function(e){j(e.data.key,e.data.fid)}),k}function M(){0===P.size&&k&&(k.close(),k=null)}var N="firebase-installations-database",F=1,R="firebase-installations-store",z=null;function V(){return z||(z=c.openDB(N,F,{upgrade:function(e,t){0===t&&e.createObjectStore(R)}})),z}function H(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n,i,o,s;return a.__generator(this,(function(a){switch(a.label){case 0:return r=T(e),[4,V()];case 1:return n=a.sent(),i=n.transaction(R,"readwrite"),[4,(o=i.objectStore(R)).get(r)];case 2:return s=a.sent(),[4,o.put(t,r)];case 3:return a.sent(),[4,i.done];case 4:return a.sent(),s&&s.fid===t.fid||x(e,t.fid),[2,t]}}))}))}function U(e){return a.__awaiter(this,void 0,void 0,(function(){var t,r,n;return a.__generator(this,(function(i){switch(i.label){case 0:return t=T(e),[4,V()];case 1:return r=i.sent(),[4,(n=r.transaction(R,"readwrite")).objectStore(R).delete(t)];case 2:return i.sent(),[4,n.done];case 3:return i.sent(),[2]}}))}))}function W(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n,i,o,s,c;return a.__generator(this,(function(a){switch(a.label){case 0:return r=T(e),[4,V()];case 1:return n=a.sent(),i=n.transaction(R,"readwrite"),[4,(o=i.objectStore(R)).get(r)];case 2:return s=a.sent(),void 0!==(c=t(s))?[3,4]:[4,o.delete(r)];case 3:return a.sent(),[3,6];case 4:return[4,o.put(c,r)];case 5:a.sent(),a.label=6;case 6:return[4,i.done];case 7:return a.sent(),!c||s&&s.fid===c.fid||x(e,c.fid),[2,c]}}))}))}function $(e){return a.__awaiter(this,void 0,void 0,(function(){var t,r,n;return a.__generator(this,(function(i){switch(i.label){case 0:return[4,W(e.appConfig,(function(r){var n=function(e){return K(e||{fid:L(),registrationStatus:0})}(r),i=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine)return{installationEntry:t,registrationPromise:Promise.reject(_.create("app-offline"))};var r={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},n=function(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n;return a.__generator(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,7]),[4,D(e,t)];case 1:return r=i.sent(),[2,H(e.appConfig,r)];case 2:return b(n=i.sent())&&409===n.customData.serverCode?[4,U(e.appConfig)]:[3,4];case 3:return i.sent(),[3,6];case 4:return[4,H(e.appConfig,{fid:t.fid,registrationStatus:0})];case 5:i.sent(),i.label=6;case 6:throw n;case 7:return[2]}}))}))}(e,r);return{installationEntry:r,registrationPromise:n}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:q(e)}:{installationEntry:t}}(e,n);return t=i.registrationPromise,i.installationEntry}))];case 1:return(r=i.sent()).fid!==A?[3,3]:(n={},[4,t]);case 2:return[2,(n.installationEntry=i.sent(),n)];case 3:return[2,{installationEntry:r,registrationPromise:t}]}}))}))}function q(e){return a.__awaiter(this,void 0,void 0,(function(){var t,r,n,i;return a.__generator(this,(function(o){switch(o.label){case 0:return[4,G(e.appConfig)];case 1:t=o.sent(),o.label=2;case 2:return 1!==t.registrationStatus?[3,5]:[4,C(100)];case 3:return o.sent(),[4,G(e.appConfig)];case 4:return t=o.sent(),[3,2];case 5:return 0!==t.registrationStatus?[3,7]:[4,$(e)];case 6:return r=o.sent(),n=r.installationEntry,(i=r.registrationPromise)?[2,i]:[2,n];case 7:return[2,t]}}))}))}function G(e){return W(e,(function(e){if(!e)throw _.create("installation-not-found");return K(e)}))}function K(e){return 1===(t=e).registrationStatus&&t.registrationTime+f<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}function J(e,t){var r=e.appConfig,n=e.heartbeatServiceProvider;return a.__awaiter(this,void 0,void 0,(function(){var e,i,o,s,c,u,l;return a.__generator(this,(function(a){switch(a.label){case 0:return e=function(e,t){var r=t.fid;return"".concat(m(e),"/").concat(r,"/authTokens:generate")}(r,t),i=E(r,t),(o=n.getImmediate({optional:!0}))?[4,o.getHeartbeatsHeader()]:[3,2];case 1:(s=a.sent())&&i.append("x-firebase-client",s),a.label=2;case 2:return c={installation:{sdkVersion:d,appId:r.appId}},u={method:"POST",headers:i,body:JSON.stringify(c)},[4,S((function(){return fetch(e,u)}))];case 3:return(l=a.sent()).ok?[4,l.json()]:[3,5];case 4:return[2,y(a.sent())];case 5:return[4,w("Generate Auth Token",l)];case 6:throw a.sent()}}))}))}function X(e,t){return void 0===t&&(t=!1),a.__awaiter(this,void 0,void 0,(function(){var r,n,i;return a.__generator(this,(function(o){switch(o.label){case 0:return[4,W(e.appConfig,(function(n){if(!Q(n))throw _.create("not-registered");var i,o=n.authToken;if(!t&&(2===(i=o).requestStatus&&!function(e){var t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+v}(i)))return n;if(1===o.requestStatus)return r=function(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n;return a.__generator(this,(function(i){switch(i.label){case 0:return[4,Y(e.appConfig)];case 1:r=i.sent(),i.label=2;case 2:return 1!==r.authToken.requestStatus?[3,5]:[4,C(100)];case 3:return i.sent(),[4,Y(e.appConfig)];case 4:return r=i.sent(),[3,2];case 5:return 0===(n=r.authToken).requestStatus?[2,X(e,t)]:[2,n]}}))}))}(e,t),n;if(!navigator.onLine)throw _.create("app-offline");var s=function(e){var t={requestStatus:1,requestTime:Date.now()};return a.__assign(a.__assign({},e),{authToken:t})}(n);return r=function(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n,i;return a.__generator(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,8]),[4,J(e,t)];case 1:return r=o.sent(),i=a.__assign(a.__assign({},t),{authToken:r}),[4,H(e.appConfig,i)];case 2:return o.sent(),[2,r];case 3:return!b(n=o.sent())||401!==n.customData.serverCode&&404!==n.customData.serverCode?[3,5]:[4,U(e.appConfig)];case 4:return o.sent(),[3,7];case 5:return i=a.__assign(a.__assign({},t),{authToken:{requestStatus:0}}),[4,H(e.appConfig,i)];case 6:o.sent(),o.label=7;case 7:throw n;case 8:return[2]}}))}))}(e,s),s}))];case 1:return n=o.sent(),r?[4,r]:[3,3];case 2:return i=o.sent(),[3,4];case 3:i=n.authToken,o.label=4;case 4:return[2,i]}}))}))}function Y(e){return W(e,(function(e){if(!Q(e))throw _.create("not-registered");var t;return 1===(t=e.authToken).requestStatus&&t.requestTime+f<Date.now()?a.__assign(a.__assign({},e),{authToken:{requestStatus:0}}):e}))}function Q(e){return void 0!==e&&2===e.registrationStatus}function Z(e){return a.__awaiter(this,void 0,void 0,(function(){var t,r,n,i;return a.__generator(this,(function(o){switch(o.label){case 0:return[4,$(t=e)];case 1:return r=o.sent(),n=r.installationEntry,(i=r.registrationPromise)?i.catch(console.error):X(t).catch(console.error),[2,n.fid]}}))}))}function ee(e,t){return void 0===t&&(t=!1),a.__awaiter(this,void 0,void 0,(function(){var r;return a.__generator(this,(function(n){switch(n.label){case 0:return[4,te(r=e)];case 1:return n.sent(),[4,X(r,t)];case 2:return[2,n.sent().token]}}))}))}function te(e){return a.__awaiter(this,void 0,void 0,(function(){var t;return a.__generator(this,(function(r){switch(r.label){case 0:return[4,$(e)];case 1:return(t=r.sent().registrationPromise)?[4,t]:[3,3];case 2:r.sent(),r.label=3;case 3:return[2]}}))}))}function re(e,t){return a.__awaiter(this,void 0,void 0,(function(){var r,n,i,o;return a.__generator(this,(function(a){switch(a.label){case 0:return r=function(e,t){var r=t.fid;return"".concat(m(e),"/").concat(r)}(e,t),n=E(e,t),i={method:"DELETE",headers:n},[4,S((function(){return fetch(r,i)}))];case 1:return(o=a.sent()).ok?[3,3]:[4,w("Delete Installation",o)];case 2:throw a.sent();case 3:return[2]}}))}))}function ne(e){return _.create("missing-app-config-values",{valueName:e})}var ie="installations";i._registerComponent(new o.Component(ie,(function(e){var t=e.getProvider("app").getImmediate(),r=function(e){var t,r;if(!e||!e.options)throw ne("App Configuration");if(!e.name)throw ne("App Name");try{for(var n=a.__values(["projectId","apiKey","appId"]),i=n.next();!i.done;i=n.next()){var o=i.value;if(!e.options[o])throw ne(o)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:r,heartbeatServiceProvider:i._getProvider(t,"heartbeat"),_delete:function(){return Promise.resolve()}}}),"PUBLIC")),i._registerComponent(new o.Component("installations-internal",(function(e){var t=e.getProvider("app").getImmediate(),r=i._getProvider(t,ie).getImmediate();return{getId:function(){return Z(r)},getToken:function(e){return ee(r,e)}}}),"PRIVATE")),i.registerVersion(u,l),i.registerVersion(u,l,"cjs5"),t.deleteInstallations=function(e){return a.__awaiter(this,void 0,void 0,(function(){var t,r;return a.__generator(this,(function(n){switch(n.label){case 0:return[4,W(t=e.appConfig,(function(e){if(!e||0!==e.registrationStatus)return e}))];case 1:if(!(r=n.sent()))return[3,6];if(1!==r.registrationStatus)return[3,2];throw _.create("delete-pending-registration");case 2:if(2!==r.registrationStatus)return[3,6];if(navigator.onLine)return[3,3];throw _.create("app-offline");case 3:return[4,re(t,r)];case 4:return n.sent(),[4,U(t)];case 5:n.sent(),n.label=6;case 6:return[2]}}))}))},t.getId=Z,t.getInstallations=function(e){return void 0===e&&(e=i.getApp()),i._getProvider(e,"installations").getImmediate()},t.getToken=ee,t.onIdChange=function(e,t){var r=e.appConfig;return function(e,t){B();var r=T(e),n=P.get(r);n||(n=new Set,P.set(r,n)),n.add(t)}(r,t),function(){!function(e,t){var r=T(e),n=P.get(r);n&&(n.delete(t),0===n.size&&P.delete(r),M())}(r,t)}}},7019:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n,i,o=r(7582),a=[];t.LogLevel=void 0,(i=t.LogLevel||(t.LogLevel={}))[i.DEBUG=0]="DEBUG",i[i.VERBOSE=1]="VERBOSE",i[i.INFO=2]="INFO",i[i.WARN=3]="WARN",i[i.ERROR=4]="ERROR",i[i.SILENT=5]="SILENT";var s={debug:t.LogLevel.DEBUG,verbose:t.LogLevel.VERBOSE,info:t.LogLevel.INFO,warn:t.LogLevel.WARN,error:t.LogLevel.ERROR,silent:t.LogLevel.SILENT},c=t.LogLevel.INFO,u=((n={})[t.LogLevel.DEBUG]="log",n[t.LogLevel.VERBOSE]="log",n[t.LogLevel.INFO]="info",n[t.LogLevel.WARN]="warn",n[t.LogLevel.ERROR]="error",n),l=function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];if(!(t<e.logLevel)){var i=(new Date).toISOString(),a=u[t];if(!a)throw new Error("Attempted to log a message with an invalid logType (value: ".concat(t,")"));console[a].apply(console,o.__spreadArray(["[".concat(i,"]  ").concat(e.name,":")],r,!1))}},f=function(){function e(e){this.name=e,this._logLevel=c,this._logHandler=l,this._userLogHandler=null,a.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in t.LogLevel))throw new TypeError('Invalid value "'.concat(e,'" assigned to `logLevel`'));this._logLevel=e},enumerable:!1,configurable:!0}),e.prototype.setLogLevel=function(e){this._logLevel="string"==typeof e?s[e]:e},Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(e){this._userLogHandler=e},enumerable:!1,configurable:!0}),e.prototype.debug=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];this._userLogHandler&&this._userLogHandler.apply(this,o.__spreadArray([this,t.LogLevel.DEBUG],e,!1)),this._logHandler.apply(this,o.__spreadArray([this,t.LogLevel.DEBUG],e,!1))},e.prototype.log=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];this._userLogHandler&&this._userLogHandler.apply(this,o.__spreadArray([this,t.LogLevel.VERBOSE],e,!1)),this._logHandler.apply(this,o.__spreadArray([this,t.LogLevel.VERBOSE],e,!1))},e.prototype.info=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];this._userLogHandler&&this._userLogHandler.apply(this,o.__spreadArray([this,t.LogLevel.INFO],e,!1)),this._logHandler.apply(this,o.__spreadArray([this,t.LogLevel.INFO],e,!1))},e.prototype.warn=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];this._userLogHandler&&this._userLogHandler.apply(this,o.__spreadArray([this,t.LogLevel.WARN],e,!1)),this._logHandler.apply(this,o.__spreadArray([this,t.LogLevel.WARN],e,!1))},e.prototype.error=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];this._userLogHandler&&this._userLogHandler.apply(this,o.__spreadArray([this,t.LogLevel.ERROR],e,!1)),this._logHandler.apply(this,o.__spreadArray([this,t.LogLevel.ERROR],e,!1))},e}();t.Logger=f,t.setLogLevel=function(e){a.forEach((function(t){t.setLogLevel(e)}))},t.setUserLogHandler=function(e,r){for(var n=function(n){var i=null;r&&r.level&&(i=s[r.level]),n.userLogHandler=null===e?null:function(r,n){for(var o=[],a=2;a<arguments.length;a++)o[a-2]=arguments[a];var s=o.map((function(e){if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((function(e){return e})).join(" ");n>=(null!=i?i:r.logLevel)&&e({level:t.LogLevel[n].toLowerCase(),message:s,args:o,type:r.name})}},i=0,o=a;i<o.length;i++)n(o[i])}},1313:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},i=function(e,t){if(!e)throw o(t)},o=function(e){return new Error("Firebase Database ("+n.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},a=function(e){const t=[];let r=0;for(let n=0;n<e.length;n++){let i=e.charCodeAt(n);i<128?t[r++]=i:i<2048?(t[r++]=i>>6|192,t[r++]=63&i|128):55296==(64512&i)&&n+1<e.length&&56320==(64512&e.charCodeAt(n+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++n)),t[r++]=i>>18|240,t[r++]=i>>12&63|128,t[r++]=i>>6&63|128,t[r++]=63&i|128):(t[r++]=i>>12|224,t[r++]=i>>6&63|128,t[r++]=63&i|128)}return t},s={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const r=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,n=[];for(let t=0;t<e.length;t+=3){const i=e[t],o=t+1<e.length,a=o?e[t+1]:0,s=t+2<e.length,c=s?e[t+2]:0,u=i>>2,l=(3&i)<<4|a>>4;let f=(15&a)<<2|c>>6,d=63&c;s||(d=64,o||(f=64)),n.push(r[u],r[l],r[f],r[d])}return n.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(a(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let r=0,n=0;for(;r<e.length;){const i=e[r++];if(i<128)t[n++]=String.fromCharCode(i);else if(i>191&&i<224){const o=e[r++];t[n++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){const o=((7&i)<<18|(63&e[r++])<<12|(63&e[r++])<<6|63&e[r++])-65536;t[n++]=String.fromCharCode(55296+(o>>10)),t[n++]=String.fromCharCode(56320+(1023&o))}else{const o=e[r++],a=e[r++];t[n++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&a)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const r=t?this.charToByteMapWebSafe_:this.charToByteMap_,n=[];for(let t=0;t<e.length;){const i=r[e.charAt(t++)],o=t<e.length?r[e.charAt(t)]:0;++t;const a=t<e.length?r[e.charAt(t)]:64;++t;const s=t<e.length?r[e.charAt(t)]:64;if(++t,null==i||null==o||null==a||null==s)throw new c;const u=i<<2|o>>4;if(n.push(u),64!==a){const e=o<<4&240|a>>2;if(n.push(e),64!==s){const e=a<<6&192|s;n.push(e)}}}return n},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class c extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const u=function(e){const t=a(e);return s.encodeByteArray(t,!0)},l=function(e){return u(e).replace(/\./g,"")},f=function(e){try{return s.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function d(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const r in t)t.hasOwnProperty(r)&&"__proto__"!==r&&(e[r]=d(e[r],t[r]));return e}function h(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw new Error("Unable to locate global object.")}const p=()=>{try{return h().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&f(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},v=e=>{var t,r;return null===(r=null===(t=p())||void 0===t?void 0:t.emulatorHosts)||void 0===r?void 0:r[e]};class g{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,r)=>{t?this.reject(t):this.resolve(r),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,r))}}}function _(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function b(){var e;const t=null===(e=p())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(r.g.process)}catch(e){return!1}}class m extends Error{constructor(e,t,r){super(t),this.code=e,this.customData=r,this.name="FirebaseError",Object.setPrototypeOf(this,m.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,y.prototype.create)}}class y{constructor(e,t,r){this.service=e,this.serviceName=t,this.errors=r}create(e,...t){const r=t[0]||{},n=`${this.service}/${e}`,i=this.errors[e],o=i?function(e,t){return e.replace(w,((e,r)=>{const n=t[r];return null!=n?String(n):`<${r}?>`}))}(i,r):"Error",a=`${this.serviceName}: ${o} (${n}).`;return new m(n,a,r)}}const w=/\{\$([^}]+)}/g;function I(e){return JSON.parse(e)}const E=function(e){let t={},r={},n={},i="";try{const o=e.split(".");t=I(f(o[0])||""),r=I(f(o[1])||""),i=o[2],n=r.d||{},delete r.d}catch(e){}return{header:t,claims:r,data:n,signature:i}};function S(e){return null!==e&&"object"==typeof e}class D{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,r){let n;if(void 0===e&&void 0===t&&void 0===r)throw new Error("Missing Observer.");n=function(e,t){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:r},void 0===n.next&&(n.next=C),void 0===n.error&&(n.error=C),void 0===n.complete&&(n.complete=C);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?n.error(this.finalError):n.complete()}catch(e){}})),this.observers.push(n),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function C(){}function O(e,t){return`${e} failed: ${t} argument `}const A=144e5;t.CONSTANTS=n,t.DecodeBase64StringError=c,t.Deferred=g,t.ErrorFactory=y,t.FirebaseError=m,t.MAX_VALUE_MILLIS=A,t.RANDOM_FACTOR=.5,t.Sha1=class{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const r=this.W_;if("string"==typeof e)for(let n=0;n<16;n++)r[n]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let n=0;n<16;n++)r[n]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=r[e-3]^r[e-8]^r[e-14]^r[e-16];r[e]=4294967295&(t<<1|t>>>31)}let n,i,o=this.chain_[0],a=this.chain_[1],s=this.chain_[2],c=this.chain_[3],u=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(n=c^a&(s^c),i=1518500249):(n=a^s^c,i=1859775393):e<60?(n=a&s|c&(a|s),i=2400959708):(n=a^s^c,i=3395469782);const t=(o<<5|o>>>27)+n+u+i+r[e]&4294967295;u=c,c=s,s=4294967295&(a<<30|a>>>2),a=o,o=t}this.chain_[0]=this.chain_[0]+o&4294967295,this.chain_[1]=this.chain_[1]+a&4294967295,this.chain_[2]=this.chain_[2]+s&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+u&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const r=t-this.blockSize;let n=0;const i=this.buf_;let o=this.inbuf_;for(;n<t;){if(0===o)for(;n<=r;)this.compress_(e,n),n+=this.blockSize;if("string"==typeof e){for(;n<t;)if(i[o]=e.charCodeAt(n),++o,++n,o===this.blockSize){this.compress_(i),o=0;break}}else for(;n<t;)if(i[o]=e[n],++o,++n,o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let r=0;for(let t=0;t<5;t++)for(let n=24;n>=0;n-=8)e[r]=this.chain_[t]>>n&255,++r;return e}},t.areCookiesEnabled=function(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)},t.assert=i,t.assertionError=o,t.async=function(e,t){return(...r)=>{Promise.resolve(!0).then((()=>{e(...r)})).catch((e=>{t&&t(e)}))}},t.base64=s,t.base64Decode=f,t.base64Encode=u,t.base64urlEncodeWithoutPadding=l,t.calculateBackoffMillis=function(e,t=1e3,r=2){const n=t*Math.pow(r,e),i=Math.round(.5*n*(Math.random()-.5)*2);return Math.min(A,n+i)},t.contains=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.createMockUserToken=function(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const r=t||"demo-project",n=e.iat||0,i=e.sub||e.user_id;if(!i)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const o=Object.assign({iss:`https://securetoken.google.com/${r}`,aud:r,iat:n,exp:n+3600,auth_time:n,sub:i,user_id:i,firebase:{sign_in_provider:"custom",identities:{}}},e);return[l(JSON.stringify({alg:"none",type:"JWT"})),l(JSON.stringify(o)),""].join(".")},t.createSubscribe=function(e,t){const r=new D(e,t);return r.subscribe.bind(r)},t.decode=E,t.deepCopy=function(e){return d(void 0,e)},t.deepEqual=function e(t,r){if(t===r)return!0;const n=Object.keys(t),i=Object.keys(r);for(const o of n){if(!i.includes(o))return!1;const n=t[o],a=r[o];if(S(n)&&S(a)){if(!e(n,a))return!1}else if(n!==a)return!1}for(const e of i)if(!n.includes(e))return!1;return!0},t.deepExtend=d,t.errorPrefix=O,t.extractQuerystring=function(e){const t=e.indexOf("?");if(!t)return"";const r=e.indexOf("#",t);return e.substring(t,r>0?r:void 0)},t.getDefaultAppConfig=()=>{var e;return null===(e=p())||void 0===e?void 0:e.config},t.getDefaultEmulatorHost=v,t.getDefaultEmulatorHostnameAndPort=e=>{const t=v(e);if(!t)return;const r=t.lastIndexOf(":");if(r<=0||r+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const n=parseInt(t.substring(r+1),10);return"["===t[0]?[t.substring(1,r-1),n]:[t.substring(0,r),n]},t.getDefaults=p,t.getExperimentalSetting=e=>{var t;return null===(t=p())||void 0===t?void 0:t[`_${e}`]},t.getGlobal=h,t.getModularInstance=function(e){return e&&e._delegate?e._delegate:e},t.getUA=_,t.isAdmin=function(e){const t=E(e).claims;return"object"==typeof t&&!0===t.admin},t.isBrowser=function(){return"object"==typeof self&&self.self===self},t.isBrowserExtension=function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id},t.isElectron=function(){return _().indexOf("Electron/")>=0},t.isEmpty=function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},t.isIE=function(){const e=_();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0},t.isIndexedDBAvailable=function(){try{return"object"==typeof indexedDB}catch(e){return!1}},t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(_())},t.isNode=b,t.isNodeSdk=function(){return!0===n.NODE_CLIENT||!0===n.NODE_ADMIN},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.isSafari=function(){return!b()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")},t.isUWP=function(){return _().indexOf("MSAppHost/")>=0},t.isValidFormat=function(e){const t=E(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},t.isValidTimestamp=function(e){const t=E(e).claims,r=Math.floor((new Date).getTime()/1e3);let n=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?n=t.nbf:t.hasOwnProperty("iat")&&(n=t.iat),i=t.hasOwnProperty("exp")?t.exp:n+86400),!!r&&!!n&&!!i&&r>=n&&r<=i},t.issuedAtTime=function(e){const t=E(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},t.jsonEval=I,t.map=function(e,t,r){const n={};for(const i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=t.call(r,e[i],i,e));return n},t.ordinal=function(e){return Number.isFinite(e)?e+function(e){const t=(e=Math.abs(e))%100;if(t>=10&&t<=20)return"th";const r=e%10;return 1===r?"st":2===r?"nd":3===r?"rd":"th"}(e):`${e}`},t.promiseWithTimeout=function(e,t=2e3){const r=new g;return setTimeout((()=>r.reject("timeout!")),t),e.then(r.resolve,r.reject),r.promise},t.querystring=function(e){const t=[];for(const[r,n]of Object.entries(e))Array.isArray(n)?n.forEach((e=>{t.push(encodeURIComponent(r)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(r)+"="+encodeURIComponent(n));return t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[r,n]=e.split("=");t[decodeURIComponent(r)]=decodeURIComponent(n)}})),t},t.safeGet=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0},t.stringLength=function(e){let t=0;for(let r=0;r<e.length;r++){const n=e.charCodeAt(r);n<128?t++:n<2048?t+=2:n>=55296&&n<=56319?(t+=4,r++):t+=3}return t},t.stringToByteArray=function(e){const t=[];let r=0;for(let n=0;n<e.length;n++){let o=e.charCodeAt(n);if(o>=55296&&o<=56319){const t=o-55296;n++,i(n<e.length,"Surrogate pair missing trail surrogate."),o=65536+(t<<10)+(e.charCodeAt(n)-56320)}o<128?t[r++]=o:o<2048?(t[r++]=o>>6|192,t[r++]=63&o|128):o<65536?(t[r++]=o>>12|224,t[r++]=o>>6&63|128,t[r++]=63&o|128):(t[r++]=o>>18|240,t[r++]=o>>12&63|128,t[r++]=o>>6&63|128,t[r++]=63&o|128)}return t},t.stringify=function(e){return JSON.stringify(e)},t.uuidv4=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},t.validateArgCount=function(e,t,r,n){let i;if(n<t?i="at least "+t:n>r&&(i=0===r?"none":"no more than "+r),i)throw new Error(e+" failed: Was called with "+n+(1===n?" argument.":" arguments.")+" Expects "+i+".")},t.validateCallback=function(e,t,r,n){if((!n||r)&&"function"!=typeof r)throw new Error(O(e,t)+"must be a valid function.")},t.validateContextObject=function(e,t,r,n){if((!n||r)&&("object"!=typeof r||null===r))throw new Error(O(e,t)+"must be a valid context object.")},t.validateIndexedDBOpenable=function(){return new Promise(((e,t)=>{try{let r=!0;const n="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(n);i.onsuccess=()=>{i.result.close(),r||self.indexedDB.deleteDatabase(n),e(!0)},i.onupgradeneeded=()=>{r=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))},t.validateNamespace=function(e,t,r){if((!r||t)&&"string"!=typeof t)throw new Error(O(e,"namespace")+"must be a valid firebase namespace.")}},4819:(e,t,r)=>{r.r(t),r.d(t,{deleteDB:()=>g,openDB:()=>v,unwrap:()=>p,wrap:()=>h});const n=(e,t)=>t.some((t=>e instanceof t));let i,o;const a=new WeakMap,s=new WeakMap,c=new WeakMap,u=new WeakMap,l=new WeakMap;let f={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return s.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return h(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function d(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(o||(o=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(p(this),e),h(a.get(this))}:function(...e){return h(t.apply(p(this),e))}:function(e,...r){const n=t.call(p(this),e,...r);return c.set(n,e.sort?e.sort():[e]),h(n)}:(e instanceof IDBTransaction&&function(e){if(s.has(e))return;const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",o),e.removeEventListener("abort",o)},i=()=>{t(),n()},o=()=>{r(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",i),e.addEventListener("error",o),e.addEventListener("abort",o)}));s.set(e,t)}(e),n(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,f):e);var t}function h(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("success",i),e.removeEventListener("error",o)},i=()=>{t(h(e.result)),n()},o=()=>{r(e.error),n()};e.addEventListener("success",i),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&a.set(t,e)})).catch((()=>{})),l.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=d(e);return t!==e&&(u.set(e,t),l.set(t,e)),t}const p=e=>l.get(e);function v(e,t,{blocked:r,upgrade:n,blocking:i,terminated:o}={}){const a=indexedDB.open(e,t),s=h(a);return n&&a.addEventListener("upgradeneeded",(e=>{n(h(a.result),e.oldVersion,e.newVersion,h(a.transaction))})),r&&a.addEventListener("blocked",(()=>r())),s.then((e=>{o&&e.addEventListener("close",(()=>o())),i&&e.addEventListener("versionchange",(()=>i()))})).catch((()=>{})),s}function g(e,{blocked:t}={}){const r=indexedDB.deleteDatabase(e);return t&&r.addEventListener("blocked",(()=>t())),h(r).then((()=>{}))}const _=["get","getKey","getAll","getAllKeys","count"],b=["put","add","delete","clear"],m=new Map;function y(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(m.get(t))return m.get(t);const r=t.replace(/FromIndex$/,""),n=t!==r,i=b.includes(r);if(!(r in(n?IDBIndex:IDBObjectStore).prototype)||!i&&!_.includes(r))return;const o=async function(e,...t){const o=this.transaction(e,i?"readwrite":"readonly");let a=o.store;return n&&(a=a.index(t.shift())),(await Promise.all([a[r](...t),i&&o.done]))[0]};return m.set(t,o),o}var w;w=f,f={...w,get:(e,t,r)=>y(e,t)||w.get(e,t,r),has:(e,t)=>!!y(e,t)||w.has(e,t)}},4424:(e,t,r)=>{r.r(t),r.d(t,{deleteDB:()=>g,openDB:()=>v,unwrap:()=>p,wrap:()=>h});const n=(e,t)=>t.some((t=>e instanceof t));let i,o;const a=new WeakMap,s=new WeakMap,c=new WeakMap,u=new WeakMap,l=new WeakMap;let f={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return s.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return h(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function d(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(o||(o=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(p(this),e),h(a.get(this))}:function(...e){return h(t.apply(p(this),e))}:function(e,...r){const n=t.call(p(this),e,...r);return c.set(n,e.sort?e.sort():[e]),h(n)}:(e instanceof IDBTransaction&&function(e){if(s.has(e))return;const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",o),e.removeEventListener("abort",o)},i=()=>{t(),n()},o=()=>{r(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",i),e.addEventListener("error",o),e.addEventListener("abort",o)}));s.set(e,t)}(e),n(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,f):e);var t}function h(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const n=()=>{e.removeEventListener("success",i),e.removeEventListener("error",o)},i=()=>{t(h(e.result)),n()},o=()=>{r(e.error),n()};e.addEventListener("success",i),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&a.set(t,e)})).catch((()=>{})),l.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=d(e);return t!==e&&(u.set(e,t),l.set(t,e)),t}const p=e=>l.get(e);function v(e,t,{blocked:r,upgrade:n,blocking:i,terminated:o}={}){const a=indexedDB.open(e,t),s=h(a);return n&&a.addEventListener("upgradeneeded",(e=>{n(h(a.result),e.oldVersion,e.newVersion,h(a.transaction),e)})),r&&a.addEventListener("blocked",(e=>r(e.oldVersion,e.newVersion,e))),s.then((e=>{o&&e.addEventListener("close",(()=>o())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),s}function g(e,{blocked:t}={}){const r=indexedDB.deleteDatabase(e);return t&&r.addEventListener("blocked",(e=>t(e.oldVersion,e))),h(r).then((()=>{}))}const _=["get","getKey","getAll","getAllKeys","count"],b=["put","add","delete","clear"],m=new Map;function y(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(m.get(t))return m.get(t);const r=t.replace(/FromIndex$/,""),n=t!==r,i=b.includes(r);if(!(r in(n?IDBIndex:IDBObjectStore).prototype)||!i&&!_.includes(r))return;const o=async function(e,...t){const o=this.transaction(e,i?"readwrite":"readonly");let a=o.store;return n&&(a=a.index(t.shift())),(await Promise.all([a[r](...t),i&&o.done]))[0]};return m.set(t,o),o}var w;w=f,f={...w,get:(e,t,r)=>y(e,t)||w.get(e,t,r),has:(e,t)=>!!y(e,t)||w.has(e,t)}},7582:(e,t,r)=>{r.r(t),r.d(t,{__addDisposableResource:()=>k,__assign:()=>o,__asyncDelegator:()=>D,__asyncGenerator:()=>S,__asyncValues:()=>C,__await:()=>E,__awaiter:()=>p,__classPrivateFieldGet:()=>P,__classPrivateFieldIn:()=>j,__classPrivateFieldSet:()=>x,__createBinding:()=>g,__decorate:()=>s,__disposeResources:()=>M,__esDecorate:()=>u,__exportStar:()=>_,__extends:()=>i,__generator:()=>v,__importDefault:()=>T,__importStar:()=>L,__makeTemplateObject:()=>O,__metadata:()=>h,__param:()=>c,__propKey:()=>f,__read:()=>m,__rest:()=>a,__runInitializers:()=>l,__setFunctionName:()=>d,__spread:()=>y,__spreadArray:()=>I,__spreadArrays:()=>w,__values:()=>b,default:()=>N});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function s(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function c(e,t){return function(r,n){t(r,n,e)}}function u(e,t,r,n,i,o){function a(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var s,c=n.kind,u="getter"===c?"get":"setter"===c?"set":"value",l=!t&&e?n.static?e:e.prototype:null,f=t||(l?Object.getOwnPropertyDescriptor(l,n.name):{}),d=!1,h=r.length-1;h>=0;h--){var p={};for(var v in n)p[v]="access"===v?{}:n[v];for(var v in n.access)p.access[v]=n.access[v];p.addInitializer=function(e){if(d)throw new TypeError("Cannot add initializers after decoration has completed");o.push(a(e||null))};var g=(0,r[h])("accessor"===c?{get:f.get,set:f.set}:f[u],p);if("accessor"===c){if(void 0===g)continue;if(null===g||"object"!=typeof g)throw new TypeError("Object expected");(s=a(g.get))&&(f.get=s),(s=a(g.set))&&(f.set=s),(s=a(g.init))&&i.unshift(s)}else(s=a(g))&&("field"===c?i.unshift(s):f[u]=s)}l&&Object.defineProperty(l,n.name,f),d=!0}function l(e,t,r){for(var n=arguments.length>2,i=0;i<t.length;i++)r=n?t[i].call(e,r):t[i].call(e);return n?r:void 0}function f(e){return"symbol"==typeof e?e:"".concat(e)}function d(e,t,r){return"symbol"==typeof t&&(t=t.description?"[".concat(t.description,"]"):""),Object.defineProperty(e,"name",{configurable:!0,value:r?"".concat(r," ",t):t})}function h(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function p(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{c(n.next(e))}catch(e){o(e)}}function s(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))}function v(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}var g=Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]};function _(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||g(t,e,r)}function b(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function w(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}function I(e,t,r){if(r||2===arguments.length)for(var n,i=0,o=t.length;i<o;i++)!n&&i in t||(n||(n=Array.prototype.slice.call(t,0,i)),n[i]=t[i]);return e.concat(n||Array.prototype.slice.call(t))}function E(e){return this instanceof E?(this.v=e,this):new E(e)}function S(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||s(e,t)}))})}function s(e,t){try{(r=i[e](t)).value instanceof E?Promise.resolve(r.value.v).then(c,u):l(o[0][2],r)}catch(e){l(o[0][3],e)}var r}function c(e){s("next",e)}function u(e){s("throw",e)}function l(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function D(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:E(e[n](t)),done:!1}:i?i(t):t}:i}}function C(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=b(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}function O(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var A=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function L(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&g(t,e,r);return A(t,e),t}function T(e){return e&&e.__esModule?e:{default:e}}function P(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)}function x(e,t,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(e,r):i?i.value=r:t.set(e,r),r}function j(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}function k(e,t,r){if(null!=t){if("object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object expected.");var n;if(r){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");n=t[Symbol.asyncDispose]}if(void 0===n){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");n=t[Symbol.dispose]}if("function"!=typeof n)throw new TypeError("Object not disposable.");e.stack.push({value:t,dispose:n,async:r})}else r&&e.stack.push({async:!0});return t}var B="function"==typeof SuppressedError?SuppressedError:function(e,t,r){var n=new Error(r);return n.name="SuppressedError",n.error=e,n.suppressed=t,n};function M(e){function t(t){e.error=e.hasError?new B(t,e.error,"An error was suppressed during disposal."):t,e.hasError=!0}return function r(){for(;e.stack.length;){var n=e.stack.pop();try{var i=n.dispose&&n.dispose.call(n.value);if(n.async)return Promise.resolve(i).then(r,(function(e){return t(e),r()}))}catch(e){t(e)}}if(e.hasError)throw e.error}()}const N={__extends:i,__assign:o,__rest:a,__decorate:s,__param:c,__metadata:h,__awaiter:p,__generator:v,__createBinding:g,__exportStar:_,__values:b,__read:m,__spread:y,__spreadArrays:w,__spreadArray:I,__await:E,__asyncGenerator:S,__asyncDelegator:D,__asyncValues:C,__makeTemplateObject:O,__importStar:L,__importDefault:T,__classPrivateFieldGet:P,__classPrivateFieldSet:x,__classPrivateFieldIn:j,__addDisposableResource:k,__disposeResources:M}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,