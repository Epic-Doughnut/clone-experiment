(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},98:e=>{let t=.5,o=.5;e.exports={setMusicVolume:function(e){t=e},getMusicVolume:function(){return t},setSfxVolume:function(e){o=e},getSfxVolume:function(){return o}}},151:(e,t,o)=>{const{buildings:s,isPopBuilding:n}=o(882),{increaseMaterial:i,increaseMax:r}=o(594),{updateTotal:a}=o(150),{hasPerk:c}=o(134),{getMaterial:l}=o(924),{passedStage:d}=o(751),{recalcMaxClones:u}=o(995),{updateBuildingButtonCount:f}=o(607),{recalculateBuildingCost:p}=o(22),{canBuyBuilding:g}=o(23),{isPondered:b}=o(369),{updateBuildingList:m}=o(831),{capitalizeFirst:h}=o(681);function y(e){console.log("Buying building "+e);const t=s[e];if(g(e)){t.count++;for(const e in t.cost)i(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))console.log("bought building effects",e,o),r(e,o),"clones"===e&&(u(),a());f(e,t.count,JSON.parse(JSON.stringify(t.emoji))),p(e,s,c),m()}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e,t){return function(){const t=Object.entries(e).every((([e,t])=>l(e)>=Math.floor(t/2)));return d("clones")&&t}}(o.cost);return console.log("create building button:",o,JSON.parse(JSON.stringify(o.emoji))),{class:"tooltip "+e,tab:"production",text:`${JSON.parse(JSON.stringify(o.emoji))} ${h(e)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}},buyMaxBuildings:function(e){let t=0;for(s[e];g(e);)y(e),++t;return t},buyBuilding:y,generateEffectString:function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));b("effectiveBuildings")&&(e*=1.01),t.push(`+${e}% ${o} production`)}return t.join(", ")},updateBuildingList:m}},121:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{skills:i}=o(324),{getWorkers:r}=o(150),{hasPerk:a}=o(134),{isPondered:c}=o(369),{getFactoryProduction:l}=o(51),{hasPrestige:d,getLevelOfPrestige:u}=o(425),{getMaterial:f}=o(924),{hasTool:p}=o(609),g={Lumberjack:["wood","sticks"],Miner:["rocks","ore"],Botanist:["vines","herbs","wheat"]},b={gathering:["gatheringBoost"],masonry:["masonryBoost"],carpentry:["carpentryBoost"],thinking:["thinkingBoost"],farming:["farmingBoost"],fishing:["fishingBoost"],hunting:["huntingBoost"]},m={wood:"axe",ore:"pickaxe",fish:"fishingrod",game:"spear",ponder:"paper",sticks:"staff"};t.calcIncrease=function(e,t){var p=0;const h=o(882).buildings;if(!s.hasOwnProperty(e)){if(!n.hasOwnProperty(e))return p;if((p=l(e))>0)return p}"clones"===e&&c("autoClone")&&(p=1),s[e]&&s[e].isGetting&&(p+=1),p=function(e,t){for(const[o,s]of Object.entries(g))s.includes(t)&&a(o)&&(e*=1.75);return e}(p+=(a("Leader")?.375:.25)*r(e)||0,e),p=function(e,t){for(const[o,s]of Object.entries(b))if(i[o].affectedResources.includes(t)){s.forEach((t=>{d(t)&&(e*=1.1*u(t))}));let t=1.06,n=1+(Math.pow(t,i[o].level)-1)/100;e*=n}return e}(p,e);for(const t of Object.keys(h)){const s=o(882).getBoost(t,e);if(s){var y=Math.pow(s,h[t].count);c("effectiveBuildings")&&(y*=1.03),p*=y}}return"ponder"===e&&(c("ponder1")&&(p*=1.05),c("ponder2")&&(p*=1.05),c("ponder3")&&(p*=1.05)),c("fasterResourceGain")&&(p*=1.05),d("cloneBoost")&&(p*=1.05*u("cloneBoost")),p=function(e,t){const o=m[t];return o&&f(o)>10&&(e*=1+Math.log10(f(o)/10)),e}(p,e),f("husks")>10&&(p*=1+Math.log(f("husks")/10)),parseFloat((p*t/1e3).toFixed(3))}},23:(e,t,o)=>{const{resources:s}=o(587),{getMaterial:n}=o(924),{passedStage:i}=o(751);t.canBuyBuilding=function(e){let t=!0;const r=o(882).buildings[e];for(const e in r.cost)if(r.cost[e]>n(e,s)){t=!1;break}return r.effects&&r.effects.clones&&!i("clone")&&(t=!1),t}},64:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=n[e].cost;try{for(let e in o)if(i(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},856:(e,t,o)=>{const{getMaterial:s}=o(924),{increaseMaterial:n}=o(594),i={husks:{probability:.05,quantity:1},nails:{probability:.1,quantity:50},slabs:{probability:.2,quantity:50},beams:{probability:.1,quantity:60},axe:{probability:.15,quantity:5},spear:{probability:1,quantity:5},gold:{probability:.1,quantity:10},iron:{probability:.15,quantity:50},silver:{probability:.05,quantity:20},steel:{probability:.1,quantity:30},bricks:{probability:.15,quantity:80}};let r={};function a(){return r}function c(){let e={};for(const t in i)if(Math.random()<i[t].probability){const o=Math.floor(i[t].quantity*(.4*Math.random()+.8));o>0&&(e[t]=o)}return r=e,console.log(r),e}const l=document.getElementById("arena");function d(e,t){for(let o=0;o<t;o++){const t=document.createElement("div");t.className=`ball ${e}`,t.style.left=("player"===e?10:90)+"%",t.style.top=10+30*o+"px",l.appendChild(t),"player"===e?u.push(t):f.push(t)}}let u=[],f=[],p=[];function g(){document.querySelectorAll(".ball").forEach((e=>{const t=e.classList.contains("player")?l.offsetWidth:-l.offsetWidth;p.push(e.animate([{transform:`translateX(${t}px)`}],{duration:3e3,fill:"none"}).finished.then((()=>{e.remove()})))})),h(),setTimeout((()=>{const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0!==e&&0!==t){for(const e of document.querySelectorAll(".ball"))e.remove();d("player",e),d("enemy",t),g()}}),2900)}let b=!1;function m(e,t){const o=e.getBoundingClientRect(),s=t.getBoundingClientRect();return!(o.right<s.left||o.left>s.right||o.bottom<s.top||o.top>s.bottom)}function h(){!function(e,t){for(let n=0;n<e.length;n++)for(let e=0;e<t.length;e++)m(u[n],f[e])&&(o=u[n],s=f[e],Math.random()<.5?s.remove():o.remove());var o,s}(u,f),function(){if(b)return;const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0===e||0===t){const t=document.getElementById("combatResult");if(t.textContent=(0===e?"The Enemy":"You")+" won!",v.disabled=!1,e>0){b=!0;let e=1;"aggressive"===w()&&(e=.75),"careful"===w()&&(e=1.25);for(const[o,s]of Object.entries(r))n(o,s*e),t.innerHTML+=`<br>+${s*e} ${o}`;c(),T()}return!0}return!1}()||b||requestAnimationFrame(h)}function y(){const e=k(),t=Math.ceil(e/12),o=Math.ceil(400/12),s=Math.max(t,o),n=Math.floor(e/s),i=Math.floor(400/s);return document.getElementById("approximateBall").textContent=s.toString(),[n,i]}const v=document.querySelector("button#startCombat");function k(){let e=s("violence")+s("spear");return"aggressive"===w()?e*=1.2:"careful"===w()&&(e*=.8),e}let x="balanced";function w(){return x}const C=document.querySelectorAll("button.stance");function B(e){console.log("switch stance to ",e),C.forEach((e=>{e.disabled=!1})),document.querySelector(`#${e}Stance`).disabled=!0,function(e){x=e}(e)}function T(){console.log(a()),Object.keys(a()).length<1&&c();const e=document.getElementById("lootList");e.innerHTML="";for(const[t,o]of Object.entries(a()))e.innerHTML+=`<span>${t} (${o})</span> <br>`;y()}t.switchStance=B,window.switchStance=B,t.combat=function(){for(const e of document.querySelectorAll(".ball"))e.remove();let[e,t]=y();d("player",e),d("enemy",t),document.getElementById("combatResult").textContent="",v.disabled=!0,b=!1,g()},t.calculateWinChance=function(){const e=k(),t=1/(1+Math.pow(10,(400-e)/200)),o=document.getElementById("playerMight");o.textContent=e.toFixed(0),o.setAttribute("tooltipdesc",`${s("violence").toFixed(0)} violence + ${s("spear").toFixed(0)} spears`),document.getElementById("enemyMight").textContent=400..toFixed(0);const n=document.getElementById("chanceToWin");return n.textContent=(100*t).toFixed(1)+"%",n.style.color=`hsl(${(120*t).toString(10)},100%,50%)`,t},t.refreshValues=T},51:(e,t,o)=>{const{getMaterial:s}=o(924),{craftedResources:n}=o(371),{resources:i}=o(587);var r={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},a=[];Object.keys(i).forEach((e=>a.push(e))),Object.keys(n).forEach((e=>a.push(e))),console.log("All materials: ",a);let c={},l={};function d(e,t){e&&"none"!==e&&(c[e]--,Array.from(n[e].cost).forEach((e=>{l[e.resource]-=e.amount}))),c[t]?c[t]++:c[t]=1,n[t]&&Array.from(n[t].cost).forEach((e=>{l[e.resource]+=e.amount}))}function u(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const s=document.createElement("span");s.classList.add("factoryCost");const i=document.createElement("select");Object.keys(r).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,i.appendChild(t)})),i.setAttribute("data-produced","none"),i.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=i.value;d(e,t),this.setAttribute("data-produced",t),t&&"none"!==t&&(document.querySelector(`#resource-${t}`).style.color="thistle",s.innerHTML="",s.innerHTML+=`${o(594).generateTooltipCost(n[i.value].cost)}`)}));const a=document.createElement("span");return a.innerHTML="&#8594;",t.appendChild(s),t.appendChild(a),t.appendChild(i),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.selected=!0,e.appendChild(o)}(i),e.appendChild(t),t}let f=2,p=30;var g=50;e.exports={createFactoryDiv:u,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,i=r[t];i&&t&&function(e,t){let i=[];e.forEach((e=>i.push(s(e)/n[t].cost[e])));let r=Math.min(f,...i);r*=1,o(594).craftResourceQuantity(t,r)}(i,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");s("silver")<g?console.log("Not enough silver!"):(o(594).increaseMaterial("silver",-g),u(),g*=1.2,e.setAttribute("tooltipCost",`${g.toFixed(2)} silver`))},upgradeBulk:function(){s("silver")<p||(f+=2,p+=10,document.getElementById("upgradeBulkButton").setAttribute("tooltipCost",`${f} → ${f+2}: ${p.toFixed(0)} silver`))},allMaterials:a,getFactoryProduction:function(e){return c[e]*f},loadFactory:function(e){console.log("loading a factory for ",e);let t=u();e&&(t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(594).generateTooltipCost(n[e].cost)}`);const s=document.getElementById("buyFactoryButton");g*=1.2,s.setAttribute("tooltipCost",`${g.toFixed(0)} silver`),d("none",e)},activeFactoriesProducing:c}},531:(e,t)=>{t.fitCharToCell=function(e,t,o,s){const n=document.createElement("span");n.textContent=e,n.style.fontSize=`${s}px`,n.style.position="absolute",n.style.whiteSpace="nowrap",n.style.visibility="hidden",document.body.appendChild(n);let i=s;for(;n.offsetWidth<t&&n.offsetHeight<o&&(i++,n.style.fontSize=`${i}px`,!(i>=1e3)););return document.body.removeChild(n),i}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},924:(e,t,o)=>{const{getCraftedResource:s}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},78:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425),{resources:i,isResource:r}=o(587),{skills:a}=o(324);let c=new Set(["gatherSticks"]);t.allVisibleButtons=c,e.exports={getMax:function(e){if(r(e)){let t=i[e].max;return s("storageSpace")&&"clones"!==e?t*=1.05*n("storageSpace"):"clones"===e&&s("maxClones")&&(t+=n("maxClones")),t}return 1/0},calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return c.has(e)},setVisibleButton:function(e){c.add(e)},clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combatTab",hunting:"hunting"}},150:(e,t,o)=>{const{skills:s}=o(324),{resources:n}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),{triggerFloatUpText:c}=o(727),l=new Audio("./audio/job.wav"),d={};for(let e in s)d[e]=0;const u=document.getElementById("jobsTab");function f(){var e=0;for(let t in d)e+=d[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),u.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(l.play(),i("clones",n)>f()){const o=e.pageX,s=e.pageY;if(e.shiftKey){let e=i("clones",n)-f();d[t]+=e,c(o,s,`+${e} workers`,"green")}else if(e.ctrlKey){let e=Math.min(10,i("clones",n)-f());d[t]+=e,c(o,s,`+${e} workers`,"green")}else d[t]++,c(o,s,"+1 worker","green");g(t,d[t]),m(t),h()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job"),o=e.pageX,s=e.pageY;if(l.play(),e.shiftKey){let e=d[t];d[t]=0,e>0&&c(o,s,`-${e} workers`,"red")}else if(e.ctrlKey){let e=Math.min(10,d[t]);d[t]-=e,c(o,s,`-${e} workers`,"red")}else d[t]>0&&(d[t]--,c(o,s,"-1 worker","red"));g(t,d[t]),m(t),h()}))}));let p=new Map;function g(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let t of o)p.set(t,r),r>0&&b(e,t);let a=t-r*i;for(let t of o)a>0&&(p.set(t,p.get(t)+1),a--,b(e,t))}function b(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const s=document.getElementById(`resource-${t}`);if(!s||"none"===s.style.display)return;const n=o.getBoundingClientRect(),i=s.getBoundingClientRect(),r=document.createElement("div");r.style.position="absolute",r.style.width="10px",r.style.height="10px",r.style.borderRadius="50%",r.style.backgroundColor="white",r.style.opacity=".8",r.style.left=`${n.left+window.scrollX}px`,r.style.top=`${n.top+window.scrollY}px`,document.body.appendChild(r),r.animate([{transform:`translate(${i.left-n.left}px, ${i.top-n.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{r.style.display="none"}}function m(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${d[e]}`),o(594).updateEmojiDisplay()}function h(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+f()+" / "+a("clones")}let y=new Map,v=document.getElementById("lineCanvas"),k=v.getContext("2d");function x(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;k.beginPath(),k.moveTo(n,i),k.lineTo(t,o),k.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,d=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(k,n,i,t,o,10)}function w(e,t){let o=d[e];d[e]=0,d[t]+=o,m(e),m(t)}v.width=window.innerWidth,v.height=window.innerHeight,e.exports={clearJobAssignments:function(){k.clearRect(0,0,v.width,v.height),y=new Map},reassignJobsBasedOnResources:function(){try{const e=y.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,l=s[e].affectedResources;if(!l)return;for(const e of l)if(void 0!==n[e]&&i(e)<n[e].max){c=!1;break}c&&d[e]>0&&(w(r,a),g(r,d[r]),g(a,d[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:w,drawAllConnections:function(){k.clearRect(0,0,v.width,v.height);try{for(let[e,t]of y.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,x(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return p.get(e)},updateTotal:h,setConnections:function(e){y=e},getConnections:function(){return y},distributeWorkers:g,updateDisplay:m,jobCounts:d,resetAllJobs:function(){for(let e in s)d[e]=0,g(e,0),h(),m(e)}}},882:(e,t,o)=>{const{hasPerk:s}=o(134),{recalcMaxClones:n}=o(995),{recalculateBuildingCost:i}=o(22),{updateBuildingButtonCount:r}=o(607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},hospital:{basecost:{concrete:10,medicine:20,fish:20},effects:{clones:3},boost:{},count:0,ratio:1.7,tooltipDesc:"Keep yourself safe.",emoji:"+"},barracks:{basecost:{spear:20,violence:1,wood:200},effects:{clones:1,violence:20},boost:{},count:0,ratio:1.5,tooltipDesc:"A hall of raucous soldiers.",emoji:"𓈏"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.2,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30,wood:40},effects:{wood:100},ratio:1.2,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.2,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.4,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,bread:10,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},reservoir:{basecost:{rocks:100,clay:50,water:10},effects:{water:100},boost:{},count:0,ratio:1.3,tooltipDesc:"A hole filled with water. Useful.",emoji:"𓈞"},stone_depot:{basecost:{rocks:200},effects:{rocks:250},boost:{},count:0,ratio:1.2,tooltipDesc:"A big stack of rocks.",emoji:"𓈓"},warehouse:{basecost:{crates:10,concrete:20},effects:{wood:100,rocks:100,clay:100,sand:100},boost:{},count:0,ratio:1.3,tooltipDesc:"Put stuff in a box inside a larger box.",emoji:"𓇦"},military_school:{basecost:{bricks:20,violence:10},effects:{violence:100},boost:{violence:1.05},count:0,ratio:1.4,tooltipDesc:"Learn the art of hurting others.",emoji:"𓇻"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.02},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{fish:50},boost:{},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.2,herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"𓇬"},garden:{basecost:{beams:20,herbs:20,berries:50,freshwater:10},effects:{},boost:{berries:1.1,herbs:1.1,sticks:1.05},count:0,ratio:1.3,tooltipDesc:"Nice nature, carefully cultivated.",emoji:"𓆷"},sand_scoop:{basecost:{beams:10,iron:5},effects:{},boost:{sand:1.1},count:0,ratio:1.2,tooltipDesc:"Scoop the sand from the shore? Sure!",emoji:"𓄛"},traps:{basecost:{nails:10,sticks:20,herbs:20},effects:{},boost:{game:1.1},count:0,ratio:1.2,tooltipDesc:"Watch your step!",emoji:"𓄦"},rock_role:{basecost:{slabs:20,freshwater:30},effects:{},boost:{rocks:1.2},count:0,ratio:1.3,tooltipDesc:"In order to gather the rock you must become the rock.",emoji:"𓆇"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,r(e,0),i(e,a,s);n()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"teepee":return!0;default:return!1}}}},54:(e,t,o)=>{const{passedStage:s}=o(751),{getMaterial:n}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},combatTabButton:{class:"tab-button",text:"Combat",showTab:"combatTab",tab:"tabs",requirement:()=>s("combatTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:s}=o(924),{getCraftedResource:n}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},bread:{id:"craftBreadButton",value:0,cost:{wheat:13},craftedOnce:!1,requiredStage:"agriculture",tooltipDesc:"I'm gonna grind your wheat to make my bread!",tooltipcost:"",class:"agriculture"},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}},wood:{value:0,cost:{sticks:8}},sticks:{value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id===e||o.id===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null},resetCraftedResources:function(){for(const[e,t]of Object.entries(a))t.value=0,t.craftedOnce=!1}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{let t={ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 3%",cost:{ponder:180}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combatTab:{id:"ponderCombatTab",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},ponder2:{id:"ponderPonder2",requirement:()=>!0,isPondered:!1,text:"Think even harder",tooltipDesc:"5% boost to pondering",cost:{ponder:300}},ponder3:{id:"ponderPonder3",requirement:()=>!0,isPondered:!1,text:"Think hardest",tooltipDesc:"5% boost to pondering",cost:{ponder:600}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double diameter Teepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}}};e.exports={ponders:t,resetPonders:function(){for(const[e,o]of Object.entries(t))o.isPondered=!1}}},425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},cheaperBuildings:{text:"Rickety",tooltipDesc:"Building Cost (-5%)",cost:2,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",max:1e3},violence:{value:0,id:"gatherViolence",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"",max:100}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:["violence"]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,resetCraftedResources:n}=o(371),{buildings:i,resetBuildings:r}=o(882),{ponders:a,resetPonders:c}=o(397),{buttons:l}=o(54),{resources:d,resetResources:u}=o(587),{saveGame:f,loadGame:p}=o(502),{generateTooltipCost:g,appendCraftedResourceButtons:b,increaseMaterial:m,craftAllResources:h,craftResource:y,calcIncrease:v,updateResourceIncreaseRates:k,increaseMax:x}=o(594),{buyMaxBuildings:w,buyBuilding:C,createBuildingButton:B}=o(151),{hasPerk:T,selectAbility:S,resetPerks:E}=o(134),{clearSidebar:M}=o(78),{makeVisible:A}=o(123),{updateButtonVisibility:j}=o(667),{getCraftedResource:q}=o(590),{getMaterial:D}=o(924),{buyFactory:L,attemptManufacture:P,upgradeBulk:$}=o(51),{isPondered:R,generatePonderButtons:O}=o(369),{hasTool:I,addTool:F}=o(609),{getAteFish:V,setAteFish:H}=o(621),{updateTotal:G,clearJobAssignments:W,resetAllJobs:N}=o(150),{capitalizeFirst:_}=o(681),{passedStage:z,resetStages:J}=o(751),{recalcMaxClones:U}=o(995),{initializeResourceTags:Y,updateSidebar:K,updateDisplayValue:X}=o(453),{prestige:Q}=o(425),{recalculateBuildingCost:Z}=o(22),{triggerFloatUpText:ee}=o(727),{updateBounceAnimation:te}=o(994),{updateTooltip:oe,hideTooltip:se}=o(208),{canCraft:ne}=o(64),{calculateWinChance:ie,combat:re,switchStance:ae}=o(856),{showTab:ce,getCurrentTab:le}=o(93),{getSfxVolume:de,getMusicVolume:ue,setMusicVolume:fe,setSfxVolume:pe}=o(98),ge=document.querySelector("#resources");const be=document.querySelector("#emojiGatherDisplay");function me(e){const t=new Audio("./audio/gather.wav");t.volume=de(),t.play();const o=d[e],s=document.querySelector("#resources").querySelector("#resource-"+e),n=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));be.textContent="𓀟",o.isGetting?(o.isGetting=!1,n.classList.remove("gathering"),n.textContent=o.defaultText,s&&(s.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(d)){t.isGetting=!1;const o=document.querySelector("#gather"+_(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const s=ge.querySelector("#resource-"+e);s&&(s.style.fontWeight="normal")}}(),o.isGetting=!0,n.textContent=o.activeText,s&&(s.style.fontWeight="bold"),be.textContent=o.emoji,console.log(o.emoji),n.classList.add("gathering"))}const he={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},ye=[{condition:()=>D("sticks",d)>=1,action:()=>A("stick")},{condition:()=>D("sticks",d)>=10,action:()=>A("vines")},{condition:()=>D("vines",d)>=10,action:()=>A("rocks")},{condition:()=>D("rocks",d)>=1,action:()=>{A("tab-button"),A("craftRocks")}},{condition:()=>q("spear",s)>0,action:()=>A("spear")},{condition:()=>D("fish",d)>=1,action:()=>A("fishing")},{condition:()=>I("Axe"),action:()=>A("wood")},{condition:()=>q("rope")>=1,action:()=>A("rope")},{condition:()=>D("fish",d)>=5&&!V(),action:()=>A("eatFish")},{condition:()=>V(),action:()=>{A("clone"),A("ponder-tab")}},{condition:()=>R("ponderFinish"),action:()=>("stage2.html",document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>R("biggerShelter"),action:()=>U()},{condition:()=>R("biggerHut"),action:()=>U()},{condition:()=>R("biggerHouse"),action:()=>U()},{condition:()=>R("biggerTeepee"),action:()=>U()},{condition:()=>R("evenBiggerShelter"),action:()=>U()},{condition:()=>D("clones")>=40,action:()=>A("prestige")},{condition:()=>D("clay")>0,action:()=>A("clay")},{condition:()=>!document.getElementById("toggle-basics")&&R("organization"),action:()=>Y(!0)},{condition:()=>z("combatTab"),action:()=>ie()}],ve=["./audio/song1.wav","./audio/song2.wav","./audio/song3.wav","./audio/song4.wav","./audio/song5.wav","./audio/song6.wav","./audio/song7.wav","./audio/song8.wav","./audio/song9.wav","./audio/song10.wav"];let ke=null,xe=null;function we(){ke&&(ke.pause(),ke.currentTime=0);const e=Math.floor(Math.random()*ve.length);ke=new Audio(ve[e]),ke.volume=ue(),ke.play(),function(){xe&&clearTimeout(xe);const e=3e4*Math.random()+5e3;ke.onended=()=>{xe=setTimeout(we,e)}}()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":ce("productionTab");break;case"2":z("tab-button")&&ce("experimentTab");break;case"3":z("ponder-tab")&&ce("ponderTab");break;case"4":z("jobs-tab")&&ce("jobsTab");break;case"5":z("skillsTable")&&ce("skillsTab");break;case"6":z("perksTab")&&ce("perksTab");break;case"7":z("factoryTab")&&ce("factoryTab");break;case"8":z("combatTab")&&ce("combatTab");break;case"a":"combatTab"===le()&&ae("aggressive");break;case"b":"combatTab"===le()&&ae("balanced");break;case"c":"combatTab"===le()&&ae("careful");break;case"f":"combatTab"!==le()||document.getElementById("startCombat").disabled?me("fish"):re();break;case"s":me("sticks");break;case"r":z("rocks")&&me("rocks");break;case"v":z("vines")&&me("vines");break;case"w":z("wood")&&me("wood");break;case"o":z("ore")&&me("ore");break;case"p":z("ponder-tab")&&me("ponder")}}));const Ce=document.body;Ce.classList.toggle("dark-mode");let Be=!0;function Te(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block",o.style.opacity="1"}),5e3)}const Se=document.getElementById("message");function Ee(e,t){const o=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="You feel peckish for some seafood">${t}</span>`);Se.innerHTML=o}let Me=50,Ae=null,je=0,qe=0;function De(e){null===Ae&&(Ae=e);const t=e-Ae;je+=t,qe+=t,Ae=e;let o=Me;for(qe>=10*Me&&(Me=qe/10);qe>=Me;)qe-=Me,$e(Me);Me=o,requestAnimationFrame(De)}let Le=0,Pe=0;function $e(e,t){for(const[t,o]of Object.entries(d))m(t,v(t,e));k(),function(){for(let e=ye.length-1;e>=0;e--){const t=ye[e];t.condition()&&(t.action(),ye.splice(e,1))}for(let e in he)!I(e)&&q(e)>0&&(F(e),A(he[e]));try{j(),null!==Oe&&oe(Oe)}catch(e){console.warn(e)}}(),Le+=e,Pe+=e,Le>=1e4&&(f(),Le=0),z("factoryTab")&&Pe>=1e3&&(P(),Pe=0)}window.onbeforeunload=function(){Re||f()};let Re=!1;document.addEventListener("DOMContentLoaded",(e=>{O(a),function(){console.log("Generating buttons"),console.trace();for(let e in i){const t=B(e,i);l[e]=t}const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),n=document.getElementById("experimentTab").querySelector(".button-columns"),r=document.getElementById("ponderTab"),a=e(n),c=e(r);let d=1,u=0,f=0;for(let e in l){const n=l[e],r=document.createElement("button");r.id=e,r.className=n.class,r.textContent=n.text.split("_").join(" "),n.tooltipDesc&&r.setAttribute("data-tooltip-desc",n.tooltipDesc),n.tooltipEffect&&r.setAttribute("data-tooltip-effect",n.tooltipEffect),r.setAttribute("unlock",n.unlock),r.setAttribute("data_building",n.data_building);const p=Object.values(s).find((t=>t.id===e));p&&(n.tooltipCost=g(p.cost)),r.setAttribute("data-tooltip-cost",n.tooltipCost),n.showTab&&r.addEventListener("click",(()=>{ce(n.showTab),console.log("Switching to tab: "+n.showTab)})),"production"===n.tab?(r.style.gridColumn=d.toString(),d=(d+1)%3,o.appendChild(r)):"experiment"===n.tab?(a[u].appendChild(r),u=(u+1)%3):"tabs"===n.tab?t.appendChild(r):"ponder"===n.tab?(c[f].appendChild(r),f=(f+1)%3):"job"===n.tab||document.getElementById(n.tab).appendChild(n),Object.keys(i).find((t=>t===e))&&Z(e,i,T);try{n.requirement()||(r.style.display="none")}catch(e){}}}(),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),L()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("tooltipCost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),$()}))}(),Y(),p(),M(),Y(R("organization")),b(),K(),ce("productionTab"),o(864).generateTradeTable(d),document.addEventListener("click",(e=>{if(null===ke&&we(),e.target.matches("button")){const i=e.target;if(i.getAttribute("data_building")&&"undefined"!==i.getAttribute("data_building")&&i.classList.contains("purchasable")){var t=i.getAttribute("data_building");const o=e.pageX,s=e.pageY;let n=new Audio("./audio/building.wav");n.volume=de(),n.play();const r=_(t).split("_").join(" ");if(e.shiftKey){let e=w(t);ee(o,s,`+${e} ${r}s`,"aqua")}else C(t),ee(o,s,`+1 ${r}`,"aqua")}else if(i.classList.contains("unlock")){const e=i.getAttribute("unlock");if(console.log(e),a[e]){var o=!0;for(let t in a[e].cost)if(D(t,d)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)m(t,-a[e].cost[t]);a[e].isPondered=!0,A(e),i.display="none";let t=new Audio("./audio/ponder.wav");t.volume=de(),t.play(),"organization"===e&&location.reload()}}}else if("undefined"!==i.id)if("gather"===i.id.slice(0,6))me(function(e){for(const[t,o]of Object.entries(d))if(o.id===e)return t;return"error "+e}(i.id));else if("craft"===i.id.slice(0,5)){let t=new Audio("./audio/craft.wav");t.volume=de(),t.play();let o=function(e){for(const[t,o]of Object.entries(s))if(console.log(t,o,e),o.id===e)return t;return"error "+e}(i.id);console.log("clicked cr: ",o),ne(o)&&ee(e.pageX,e.pageY,`+${o}`,"aqua"),e.shiftKey?h(o):y(o)}else"saveButton"===i.id?f():"eatFish"===i.id?!V()&&D("fish",d)>=1&&(m("fish",-1),Te(),H(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{Ee("You are with yourself in a forest.","with yourself"),x("clones",1),m("clones",1)}),1e3)):"overlay-button"===i.id?(document.getElementById("overlay-text").style.opacity="0",document.getElementById("overlay-button").style.opacity="0",document.getElementById("overlay").style.display="none",document.getElementById("isekaiButtons").innerHTML="",location.reload()):"deleteSaveButton"===i.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?(localStorage.removeItem("save"),Re=!0,location.reload()):"clearJobAssignments"===i.id?W():"darkModeToggle"===i.id?(Ce.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),Be=!Be,darkModeToggle.textContent=Be?"Light Mode":"Dark Mode"):"prestige"===i.id?function(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button"),s=document.getElementById("overlay-back-button");o.addEventListener("click",(()=>{const t=D("clones");u(),n(),c(),E(),r(),N(),J();for(let[e,t]of Object.entries(d))t.max=100;m("husks",t),e.style.display="none",Y(!1)})),s.addEventListener("click",(()=>{e.style.display="none"}));const i=document.getElementById("husksIsekaiValue");let a;a=i||document.createElement("p"),a.id="husksIsekaiValue",a.innerHTML=`Husks:  ${D("husks")} <br> You will get ${D("clones")} Husks post-isekai.`,a.style.opacity="0",e.prepend(a),e.style.backgroundColor="MidnightBlue",t.textContent="You step through to another world.",Te(),setTimeout((()=>{s.style.opacity="1"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(Q).forEach((o=>{const s=document.createElement("button");s.innerHTML=`<b>${Q[o].text}</b><br>Level: ${Q[o].level}<br>Cost: ${Q[o].cost}`,s.setAttribute("tooltipCost",Q[o].cost),s.setAttribute("tooltipDesc",Q[o].tooltipDesc),s.classList.add("tooltip"),s.style.gridColumn=(t%4+1).toString(),s.style.gridRow=Math.floor(t/4+1).toString(),++t,s.addEventListener("click",(()=>{console.log(`Button ${o} was clicked`),D("husks")<Q[o].cost||(Q[o].level++,m("husks",-Q[o].cost),Q[o].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(Q[o].cost),s.setAttribute("tooltipCost",Q[o].cost),s.innerHTML=`<b>${Q[o].text}</b><br>Level: ${Q[o].level}<br>Cost: ${Q[o].cost}`,a.textContent="Husks: "+D("husks"),oe(s))})),s.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${o} was right clicked`),Q[o].level<=0||(Q[o].level--,Q[o].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(Q[o].cost),s.setAttribute("tooltipCost",Q[o].cost),m("husks",Q[o].cost),s.innerHTML=`<b>${Q[o].text}</b><br>Level: ${Q[o].level}<br>Cost: ${Q[o].cost}`,a.textContent="Husks: "+D("husks"),oe(s))})),e.appendChild(s),s.addEventListener("mouseenter",(function(e){oe(s),Oe=s})),s.addEventListener("mouseleave",(function(){se(),Oe=null}))}))}),5e3),setTimeout((()=>{a.style.opacity="1"}),5e3)}():"startCombat"===i.id&&re();if(i.classList.contains("tierOneButton")){let e=i.textContent;S(e)}}if(e.target.matches("#alone")){let t="+1 Clone";d.clones.value<d.clones.max?d.clones.value+=1:t="Max Clones";const o=new Audio("+1 Clone"===t?"./audio/clone.wav":"./audio/failclone.wav");o.volume=de(),o.play();const s=e.pageX,n=e.pageY;ee(s,n,t,"+1 Clone"===t?"green":"red"),G(),X("clones")}})),document.getElementById("optionsButton").addEventListener("click",(function(){const e=document.getElementById("optionsMenu");e.style.display="none"===e.style.display?"block":"none"})),document.getElementById("musicVolume").addEventListener("input",(function(){fe(this.value),ke.volume=ue()})),document.getElementById("sfxVolume").addEventListener("input",(function(){pe(this.value)})),requestAnimationFrame(De),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){oe(e),Oe=e})),e.addEventListener("onclick",(function(){oe(e)})),e.addEventListener("mouseleave",(function(){se(),Oe=null}))})),G(),te()}));var Oe=null;e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${d[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){je=e},changeMessage:Ee,getMessage:function(){return Se},total_time:je,currentHoverButton:Oe}},123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){n(e)||s(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),i()}},134:(e,t,o)=>{const{buildings:s}=o(882),{perks:n}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e){const e=o(882).buildings;for(let t of Object.keys(e))o(22).recalculateBuildingCost(t,e,r)}}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i},resetPerks:function(){i=[]}}},369:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{ponders:n}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;let r=o(594).generateTooltipCost(i.cost);a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:r,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},995:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425),{isPondered:i}=o(369),{setMax:r}=o(594),{passedStage:a}=o(751),{updateBounceAnimation:c}=o(994);t.recalcMaxClones=function(){let e=0;a("clone")&&(e+=1);const t=o(882).buildings;for(const[o,s]of Object.entries(t))s.effects&&s.effects.clones&&(e+=s.effects.clones*s.count);i("biggerShelter")&&(e+=1*t.shelter.count),i("biggerHut")&&(e+=1*t.hut.count),i("biggerHouse")&&(e+=2*t.house.count),i("biggerTeepee")&&(e+=4*t.teepee.count),i("evenBiggerShelter")&&(e+=1*t.shelter.count),s("maxClones")&&(e+=1*n("maxClones")),r("clones",e),c()}},22:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425);t.recalculateBuildingCost=function(e,t,i){let r=t[e];if(r&&r.cost&&r.ratio)for(let e in r.cost)r.cost[e]=Math.round(r.basecost[e]*Math.pow(r.ratio,r.count)),i("Architect")&&(r.cost[e]*=.75),s("cheaperBuildings")&&(r.cost[e]*=Math.pow(.95,n("cheaperBuildings")));const a=document.querySelector("#"+e);var c=o(594).generateTooltipCost(r.cost);if(!a)throw"Button not found for "+e;{a.setAttribute("data-tooltip-cost",c);const e=o(151).generateEffectString(r);a.setAttribute("data-tooltip-effect",e)}}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{ponders:i}=o(397),{buttons:r}=o(54),{skills:a}=o(324),{getWorkers:c,updateTotal:l}=o(150),{hasTool:d}=o(609),{calcCraftBonus:u,getMax:f}=o(78),{canCraft:p}=o(64),{capitalizeFirst:g}=o(681),{getMaterial:b}=o(924),{isPondered:m}=o(369),{getCraftedResource:h}=o(590),{calcIncrease:y}=o(121),{updateSidebar:v,abbreviateNumber:k}=o(453),{passedStage:x,getAllStages:w}=o(751),{updateDisplayValue:C}=o(453),{updateSkills:B}=o(491),T=document.getElementById("resources");function S(e,t){0!=t&&((e=e.toLowerCase())in s?(b(e)<f(e)&&t>0?(m("fasterResourceGain")&&(t*=1.05),s[e].value+=t,B(e,t)):t<0?s[e].value+=t:(s[e].value=f(e),m("autocraft")&&document.querySelector("#autoCraftCheckbox").checked&&D[e]&&L(D[e])),C(e)):e in n?(console.log("crafting a material",e,t),n[e].value+=t,C(e),B(e,t)):(s[e]&&(s[e].value+=t),n[e]&&(n[e].value+=t),v()))}function E(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(n).find((t=>n[t]===e));return t.innerHTML=`${e.text||g(o)}`,t.tab="experiment",t}t.resourcesContainer=T,window.increaseMaterial=S;const M=document.querySelector("#craftedResourceButtons");function A(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${b(o,s)>=e[o]?"enough":"not-enough"}">${k(e[o])} ${o}</span><br>`;return t}const j=document.getElementById("emojiDisplay");function q(){let e="";for(let t in s){let o=c(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=n.repeat(o))}j.textContent=e,function(){let e=48;for(j.style.fontSize=`${e}px`;j.offsetWidth>600&&e>30;)e-=1,j.style.fontSize=`${e}px`}()}q();const D={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function L(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(b(e,s)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),P(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}}function P(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!p(e))return;let o=n[e].cost;for(let s=0;s<Math.floor(t);++s)console.log("crafting",t,e,o),$(e,o,u(e));n[e].craftedOnce||(n[e].craftedOnce=!0),C(e)}function $(e,t,o){for(const[e,o]of Object.entries(t))S(e,-o);S(e,o)}e.exports={increaseMaterial:S,setMax:function(e,t){s[e].max=t,v(),l()},increaseMax:function(e,t){s[e].max+=t,v(),l()},craftAllResources:L,craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;p(e)&&($(e,n[e].cost,u(e)),n[e].craftedOnce||(n[e].craftedOnce=!0),C(e))},updateEmojiDisplay:q,generateTooltipCost:A,calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=y(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},appendCraftedResourceButtons:function(){for(let e in n){const t=E(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",A(n[e].cost)||""),M.appendChild(t),x(t.getAttribute("requirement"))?t.classList.remove("hidden"):t.classList.add("hidden"),r[n[e].id]=n[e]}},calcIncrease:y,updateResourceIncreaseRates:function(){for(let t in s){const o=y(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:P}},502:(e,t,o)=>{const{calcIncrease:s,updateEmojiDisplay:n}=o(594),{addTool:i,getAllTools:r}=o(609),{allVisibleButtons:a,setVisibleButton:c}=o(78),{makeVisible:l}=o(123),{getCraftedResource:d}=o(590),{getMaterial:u}=o(924),{getAllPerks:f,addPerk:p,hasPerk:g,selectAbility:b}=o(134),{isPondered:m}=o(369),{jobCounts:h,setConnections:y,getConnections:v,distributeWorkers:k,updateDisplay:x}=o(150),{total_time:w}=o(808),{setAteFish:C,getAteFish:B}=o(621),{craftedResources:T}=o(371),{buildings:S}=o(882),{ponders:E}=o(397),{resources:M}=o(587),{skills:A}=o(324),{getAllStages:j}=o(751),{activeFactoriesProducing:q,loadFactory:D}=o(51),{recalcMaxClones:L}=o(995),{updateSidebar:P}=o(453),{prestige:$}=o(425),{recalculateBuildingCost:R}=o(22),{updateBuildingButtonCount:O}=o(607),{updateBuildingList:I}=o(151),{populateSkillsTable:F}=o(491);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{}};for(let t in A)e.skills[t]={exp:A[t].exp,level:A[t].level};for(let t in T)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=d(t),e.craftedResources[t].craftedOnce=T[t].craftedOnce;for(let t in M)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=u(t,M),e.resources[t].max=M[t].max;e.tools=r(),e.stages=j(),e.jobs=h,e.perks=f(),e.connections=Array.from(v().entries());for(let t in E)e.unlocks[t]=m(t);for(let t in S)e.buildings[t]=S[t].count;for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries(q))e.factories[t]=o;const t=o(808).getMessage().innerHTML;e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t);for(const[t,o]of Object.entries($))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=w,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(M[t].value=e.resources[t].value,M[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=M[t].value&&o(453).updateDisplayValue(t));if(void 0!==e.skills)for(let t in e.skills)A[t].exp=e.skills[t].exp,A[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))T[t]&&(T[t].value=e.craftedResources[t].value,Number.isNaN(T[t].value)&&(T[t].value=0),T[t].craftedOnce=e.craftedResources[t].craftedOnce,o(453).updateDisplayValue(t));if(void 0!==e.tools){let t=[...new Set([...r(),...e.tools])];for(let e in t)i(e)}if(void 0!==e.stages)for(let t in e.stages)l(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)h[t]=e.jobs[t],x(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{E[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(m("skillsTable")&&F(),void 0!==e.perks)for(let[t,s]of Object.entries(e.perks))p(s),o(495).selectCorrectPerkButton(s);if(void 0!==e.prestige)for(const[t,o]of Object.entries(e.prestige))$[t].cost=o.cost,$[t].level=o.level;if(void 0!==e.buildings){for(let t in e.buildings)try{S[t].count=e.buildings[t],S[t].count>0&&(O(t,S[t].count,S[t].emoji),R(t,S,g))}catch(e){console.warn("error with building",t)}P()}if(L(),I(),C(M.clones.max>=1),B()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[w]);const t=Date.now()-e.time.time_of_save;for(let e in M){const o=s(e,t);M[e].value+=o,M[e].value>M[e].max&&(M[e].value=M[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)c(t)}void 0!==e.connections&&(y(new Map(e.connections)),0===v().size&&y(new Map),console.log(v()));for(let e in h)k(e,h[e]);if(n(),void 0!==e.factories)for(const[t,o]of Object.entries(e.factories))if(o>0)for(let e=0;e<o;++e)D(t)}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},93:(e,t,o)=>{const{drawAllConnections:s}=o(150),{updateSidebar:n}=o(453),{refreshValues:i}=o(856),{getSfxVolume:r}=o(98);function a(){let e="";for(let t of c)t.classList.contains("active")&&(e=t.id);return e}t.getCurrentTab=a;let c=document.querySelectorAll(".tab-content > .content");t.showTab=function(e){console.log("show tab: "+e);let t=a();if(e===t)return;let o=new Audio("./audio/tab.wav");o.volume=r(),o.play();let c=document.getElementById(t);c.classList.remove("active"),c.style.opacity="0";let l=document.querySelectorAll(".tab-button");for(let e of l)e.classList.remove("active");let d=document.getElementById(e);setTimeout((()=>{d.classList.add("active")}),100),setTimeout((()=>{d.style.opacity="1"}),200);const u=`#${e}Button`;let f=document.querySelector(u);f&&f.classList.add("active"),"jobsTab"===e&&s(),"combatTab"===e&&i(),console.log(t,">",e),n()}},453:(e,t,o)=>{const{calcIncrease:s}=o(121),{capitalizeFirst:n}=o(681),{getMaterial:i}=o(924),{getMax:r}=o(78),{resources:a}=o(587),{isPondered:c}=o(369);function l(e){var t=!0;return i(e)>0&&(t=!1,a[e]&&(a[e].isVisible=!0)),a[e]&&a[e].isVisible&&(t=!1),t}function d(e){if("number"!=typeof e)return e;function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const u=document.getElementById("resources");function f(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),u.appendChild(o))):o=document.getElementById("resources");const s=n(e).split("_").join(" "),a=document.createElement("p");a.className="resource",a.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${s}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let d=r(e)&&r(e)<1/0?r(e).toFixed(2):"∞";l.textContent=`${i(e).toFixed(2)} / ${d}`;const f=document.createElement("span");function p(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}return f.className="resourceRate",f.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,a.appendChild(c),a.appendChild(l),a.appendChild(f),o.appendChild(a),p("resource-clones",1),p("resource-sticks",2),p("resource-vines",3),p("resource-rocks",4),p("resource-fish",5),p("resource-freshwater",6),p("resource-wood",7),p("resource-ore",8),p("resource-sand",9),p("resource-clay",10),p("resource-wheat",11),p("resource-hides",12),p("resource-game",13),p("resource-herbs",14),p("resource-berries",15),p("resource-ponder",50),a}function p(e){const t=u.querySelector(`#${e}Value`),o=u.querySelector(`#${e}IncreaseRate`);if(t){try{t.textContent=`${d(i(e))} / ${d(r(e))}`,o&&(o.textContent=s(e,1e3).toFixed(1)),l(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(a[e]&&a[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}}e.exports={updateSidebar:function(){const e=o(51).allMaterials;Array.from(e).forEach((e=>{a[e]&&p(e)}));for(const[o,s]of Object.entries(e)){if(a[s])continue;const e=document.getElementById("resource-"+s);if(!e)return void console.warn("no parent element found for",s);l(s)?e.style.display="none":e.style.display="";const o=document.getElementById(s+"Value");if(o){var t="#fff";const e=i(s),n=r(s);e===n?t="#fcc":e/n>.6&&(t="#eeb"),o.innerHTML=`<span style="color:${t}">${d(e)} / ${d(n)} </span>`}}},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder","violence"],food:["berries","fish","game","wheat","bread","freshwater"],materials:["sticks","vines","rocks","wood","sand","clay","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,s]of Object.entries(t))s.forEach((t=>{let s=document.getElementById("resource-"+t);e||(o=null),s||(s=f(t,o)),l(t)?s.style.display="none":s.style.display=""}))},updateDisplayValue:p,abbreviateNumber:d}},491:(e,t,o)=>{const{skills:s}=o(324),{triggerFloatUpText:n}=o(727),i=function(e){let t={};for(const[o,s]of Object.entries(e))for(const e of s.affectedResources)t[e]||(t[e]=[]),t[e].push(o);return t}(s);console.log(i);let r=!1;function a(){const e=document.getElementById("skillsTable");if(r)for(let e in s){(s[e].exp>0||s[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=s[e].exp+"%",document.querySelector("#level-"+e).textContent="[level "+s[e].level+"]   "+e)}else{console.log("Generating table for the first time"),r=!0;for(let t in s){let o=document.createElement("tr");o.id="tr-"+t;let n=document.createElement("td");n.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent="[level "+s[t].level+"]   "+t,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==s[t].exp&&0==s[t].level&&(o.style.display="none"),n.appendChild(i),n.appendChild(r),o.appendChild(n),e.appendChild(o)}}}e.exports={updateSkills:function(e,t){if(t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05),!i[e])return;const r=i[e][0].toString();if(s[r].level>=100)return s[r].level=100,void(s[r].exp=0);if(s[r].exp+=t/Math.pow(1.4,s[r].level),s[r].exp>=100){s[r].level+=1,s[r].exp=0;let e=`Level up! ${r} → ${s[r].level}`;const t=document.getElementById("prestige").getBoundingClientRect();n(t.x,t.y,e,"#F4D03F")}o(751).passedStage("skillsTable")&&a()},populateSkillsTable:a}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},864:(e,t,o)=>{const{getMaterial:s}=o(924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){s("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),i.textContent=s("gold",o(587).resources))}function a(e,t){s(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),i.textContent=s("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,s){const n=document.createElement("div");n.textContent=o,n.style.left=`${e}px`,n.style.top=t-30+"px",n.style.color=s,n.classList.add("float-up-fade-out"),document.body.appendChild(n),n.addEventListener("animationend",(()=>{n.remove()}))}},994:(e,t,o)=>{const{getMaterial:s}=o(924),{getMax:n}=o(78);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");s("clones")<n("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},607:(e,t,o)=>{const{capitalizeFirst:s}=o(681);t.updateBuildingButtonCount=function(e,t,o){document.getElementById(`${e}`).textContent=`${o} ${s(e).split("_").join(" ")} (${t})`}},831:(e,t,o)=>{const{buildings:s}=o(882),{updateTooltip:n,hideTooltip:i}=o(208),{fitCharToCell:r}=o(531),a=document.getElementById("buildingList");t.updateBuildingList=function(){const e=document.createDocumentFragment();let t=0;for(const[o,n]of Object.entries(s))for(let s=0;s<n.count;++s,++t){let s=(t%6+1).toString(),i=Math.floor(t/6+1).toString();const r=document.createElement("span");r.className="tooltip",r.style.gridColumn=s,r.style.gridRow=i,r.style.fontSize="36px",r.setAttribute("tooltipDesc",o),r.textContent=n.emoji||"?",e.appendChild(r)}a.innerHTML="",a.appendChild(e),a.addEventListener("mouseenter",(e=>{e.target.classList.contains("tooltip")&&n(e.target)}),!0),a.addEventListener("mouseleave",(e=>{e.target.classList.contains("tooltip")&&i()}),!0)}},667:(e,t,o)=>{const{buttons:s}=o(54),{getCraftedResourceConfigById:n}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,setVisibleButton:d}=o(78),{canCraft:u}=o(64),{canBuyBuilding:f}=o(23),{passedStage:p}=o(751);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var g=n(t.id);g.value>0&&(o="button-disabled");const e=c(g);u(e)&&(o=!t.requiredStage||t.requiredStage&&p(t.requiredStage)?"purchasable":"hidden")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(d(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(d(e.id),e.classList.add(s),e.style.display="")}))}},208:(e,t,o)=>{const{getCraftedResourceConfigById:s}=o(371),{buildings:n}=o(882),{ponders:i}=o(397),{resources:r,getResourceConfigById:a}=o(587),{calcSecondsRemaining:c}=o(594),{getMax:l}=o(78),{getMaterial:d}=o(924),u=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){u.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||s(e.id)||n[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],p=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||f&&f.cost;!function(e,t,o,s){let n="";function i(e){let t=parseFloat(e);return e.includes("K")?t*=1e3:e.includes("M")?t*=1e6:e.includes("B")&&(t*=1e9),t}t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#4cf">${o}</span><hr>`);try{if(s.toString().includes("span"))n+=function(e,t){const o=/class="tooltip-(\w+) .+?">([\d.]+[KM]?)\s(\w+)</g;let s,n="";for(;null!==(s=o.exec(e));){const e=s[1],o=s[2],a=i(o);var r=d(e,t)>=a?"enough":"not-enough";l(e)<a&&(r="exceeds-max"),n+=`<span class="tooltip-${e} ${r}">${o} ${e}</span>`;let u=0;t[e]&&(u=c(e,a)),u>0&&"exceeds-max"!=r&&(n+=`<span class="time-remaining">(${u.toFixed(0)} seconds)</span>`),n+="<br>"}return n}(s,r);else{var a="";for(const[e,t]of Object.entries(s)){var f=d(e,r)>=t?"enough":"not-enough";l(e)<t&&(f="exceeds-max"),a+=`<span class="tooltip-${e} ${f}">${t.toFixed(0)} ${e}</span>`;let o=0;r[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=f&&(a+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),a+="<br>"}n+=a}}catch(e){void 0!==s&&"undefined"!==s&&(n+=s)}u.innerHTML=n,u.style.left=e.getBoundingClientRect().right+5+"px",u.style.top=e.getBoundingClientRect().top-u.offsetHeight/2+"px",u.style.display="block"}(e,t,o,p)}}},t={};!function o(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,