(()=>{var e={151:(e,t,o)=>{const{buildings:s}=o(882),{buttons:i}=o(54),{getMaterial:n}=o(594),{capitalizeFirst:r}=o(808);function a(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")}function c(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", ");let i=`return ${Object.entries(o.cost).map((([e,t])=>`getMaterial('${e},resources') >= ${Math.floor(t/2)}`)).join(" && ")}`;return o.effects&&o.effects.clones&&(i+=" && passedStage('clones')"),{class:"tooltip "+e,tab:"production",text:`${e.charAt(0).toUpperCase()+e.slice(1)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:new Function(i),data_building:e}}for(let e in s){const t=c(e,s);i[e]=t}e.exports={recalculateBuildingCost:function(e,t,o){let s=t[e];if(s&&s.cost&&s.ratio)for(let e in s.cost)s.cost[e]=Math.round(s.basecost[e]*Math.pow(s.ratio,s.count)),o("Architect")&&(s.cost[e]*=.75);const i=document.querySelector("#"+e);var n=a(s.cost);i.setAttribute("data-tooltip-cost",n);const r=function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));t.push(`+${e}% ${o} production`)}return t.join(", ")}(s);i.setAttribute("data-tooltip-effect",r)},generateBuildingTooltipCost:a,createBuildingButton:c,updateBuildingButtonCount:function(e,t){document.getElementById(`${e}`).textContent=`${r(e).split("_").join(" ")} (${t})`}}},150:(e,t,o)=>{const{skills:s}=o(324),i={};for(let e in s)i[e]=0;const n=document.getElementById("jobsTab");function r(){var e=0;for(let t in i)e+=i[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const i=document.createElement("div");i.classList.add("btn-increment"),i.textContent="+",t.appendChild(i),n.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");getMaterial("clones")>r()&&i[e]++,c(e,i[e]),l(e),d(),console.log(a)}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");i[e]>0&&(i[e]--,c(e,i[e]),l(e),d())}))}));let a=new Map;function c(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in resources)),console.log(o);let i=o.length,n=Math.floor(t/i);for(let e of o)a.set(e,n);let r=t-n*i;for(let e of o)r>0&&(a.set(e,a.get(e)+1),r--);console.log(a)}function l(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const o=t.querySelector(".job-name");o&&(o.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${i[e]}`),updateEmojiDisplay()}function d(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+r()+" / "+getMaterial("clones")}let u=null,f=new Map,p=document.getElementById("lineCanvas"),b=p.getContext("2d");function h(){b.clearRect(0,0,p.width,p.height);try{for(let[e,t]of f.entries()){let o=document.getElementById(e),s=document.getElementById(t),i=s.getBoundingClientRect(),n=i.left+i.width/2,r=0;r=i.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,g(o,n,r)}}catch(e){console.warn("drawAllConnections",e)}}function g(e,t,o){let s=e.getBoundingClientRect(),i=s.left+s.width/2,n=scrollY+s.top+s.height/2;b.beginPath(),b.moveTo(i,n),b.lineTo(t,o),b.stroke(),function(e,t,o,s,i,n){let r,a,c,l=s,d=i;e.beginPath(),r=Math.atan2(i-o,s-t),a=n*Math.cos(r)+l,c=n*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=n*Math.cos(r)+l,c=n*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=n*Math.cos(r)+l,c=n*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(b,i,n,t,o,10)}function m(e,t){let o=i[e];i[e]=0,i[t]+=o,l(e),l(t)}p.width=window.innerWidth,p.height=window.innerHeight,document.addEventListener("DOMContentLoaded",(function(){document.querySelectorAll(".job-button").forEach((e=>{e.addEventListener("click",(function(e){if(e.target.closest(".btn-decrement")||e.target.closest(".btn-increment"))return;if(!isPondered("management"))return;let t=e.target.closest(".job-button");t?u?u.id&&t.id?(f.set(u.id,t.id),h(),u.classList.remove("highlight"),u=null):console.error("Missing ID for one of the buttons:",u,t):(u=t,u.classList.add("highlight")):console.error("Clicked element is not inside a job button:",e.target)}))})),document.addEventListener("mousemove",(function(e){u&&(b.clearRect(0,0,p.width,p.height),h(),g(u,e.clientX,e.clientY))}))})),e.exports={clearJobAssignments:function(){b.clearRect(0,0,p.width,p.height),f=new Map},reassignJobsBasedOnResources:function(){try{const e=f.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const n=t.replace("job-button-",""),r=o.replace("job-button-","");let a=!0,l=s[e].affectedResources;if(!l)return;for(const e of l)if(void 0!==resources[e]&&getMaterial(e)<resources[e].max){a=!1;break}a&&i[e]>0&&(m(n,r),c(n,i[n]),c(r,i[r]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:m,drawAllConnections:h,getWorkers:function(e){return a.get(e)}}},882:e=>{e.exports={buildings:{shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.3,tooltipDesc:"For when you need a home away from home."},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.2,tooltipDesc:"A cozy, idyllic chunk of wood."},house:{basecost:{wood:50,rocks:20},effects:{clones:2},boost:{},count:0,ratio:1.4,tooltipDesc:"Every clone's dream. Minus the white picket fence."},teepee:{basecost:{wood:10,hides:25},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home."},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.1,tooltipDesc:"The ultimate storage solution for the pack rat in you."},stockpile:{basecost:{rocks:30},effects:{wood:100},ratio:1.1,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.1,tooltipDesc:"Air drying: Nature's way of preserving food."},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100},boost:{},count:0,ratio:1.2,tooltipDesc:"DIY's dream destination."},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing."},bakery:{basecost:{wood:80,wheat:100,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready."},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you."},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster."},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.2},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required."},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore."},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.05},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted."},lumber_yard:{basecost:{wood:60,iron:5},effects:{},boost:{wood:1.25},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.3},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!"},fishery:{basecost:{wood:40,rope:15},effects:{},boost:{fish:1.4},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food."},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.3},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.5},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals."},water_well:{basecost:{rocks:30,rope:5,wood:10},effects:{freshwater:30},boost:{freshwater:1.2},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar."},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.5},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather."},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.4,herbs:1.4,ore:1.2},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter."},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.4},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power."},observatory:{basecost:{rocks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.4},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.5},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly."},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!"}}}},54:e=>{const t={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"ìÄù Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"ìçØ Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>getMaterial("sticks")>=10||passedStage("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"ìäñìÄ© Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>getMaterial("vines")>=10||passedStage("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"ìÜù ìÜü ìÜû Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>hasTool("Spear")||hasTool("Fishing Rod")||passedStage("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"ìåè Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>hasTool("Axe")||passedStage("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"‚õè Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>hasTool("Pickaxe")||passedStage("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>passedStage("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>passedStage("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>passedStage("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>passedStage("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>passedStage("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>passedStage("perksTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>passedStage("ponder-tab"),hide:()=>!1}};e.exports={buttons:t}},371:e=>{const t={sharprocks:{text:"Sharp Rocks",id:"craftSharprocks",value:0,cost:{rocks:2},craftedOnce:!1,requirement:()=>getMaterial("rocks")>=5,tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRope",value:0,cost:{vines:3},craftedOnce:!1,requirement:()=>getMaterial("vines")>=3,tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"rope"},handle:{id:"craftHandle",value:0,cost:{sticks:2},craftedOnce:!1,requirement:()=>getCraftedResource("sharpRocks")>=1,tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaff",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requirement:()=>getCraftedResource("handle")>=1,tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requirement:()=>passedStage("fishing"),tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"rope"},spear:{id:"craftSpear",value:0,cost:{staff:1,sharpRocks:1,rope:1},craftedOnce:!1,requirement:()=>getCraftedResource("staff")>=1,tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxe",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requirement:()=>getCraftedResource("spear")>=1,tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"rope"},pickaxe:{id:"craftPickaxe",value:0,cost:{handle:1,sharpRocks:3,rope:1,rocks:10},craftedOnce:!1,requirement:()=>getCraftedResource("axe")>=1,tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"rope"},glass:{id:"craftGlass",value:0,cost:{sand:10},craftedOnce:!1,requirement:()=>passedStage("glassBlowing")},paper:{id:"craftPaper",value:0,cost:{wood:12},craftedOnce:!1,requirement:()=>passedStage("paper")},gold:{id:"craftGold",value:0,cost:{ore:100},craftedOnce:!1,requirement:()=>passedStage("metalWorking"),tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIron",value:0,cost:{ore:20},craftedOnce:!1,requirement:()=>passedStage("metalWorking"),tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilver",value:0,cost:{ore:50},craftedOnce:!1,requirement:()=>passedStage("metalWorking"),tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricks",value:0,cost:{clay:15},craftedOnce:!1,requirement:()=>getMaterial("clay")>5,tooltipDesc:"Leave some clay by the fire",tooltipCost:""}};e.exports={craftedResources:t}},397:e=>{e.exports={ponders:{ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:40},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},management:{id:"ponderManagement",isPondered:!1,cost:{ponder:200,clones:5},text:"Meta-jobs",requirement:()=>!0,tooltipDesc:"You managed to make clones manage each other. You call them "},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 1%",cost:{ponder:140}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:150}},combat:{id:"ponderCombat",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:140,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},autocraft:{id:"ponderAutocraft",requirement:()=>!0,isPondered:!1,text:"Auto Craft",tooltipDesc:"Automatically craft resources when they reach the storage limit",cost:{ponder:400,wood:1e3,rocks:500,wheat:1e3}},finish:{id:"ponderFinish",requirement:()=>!0,isPondered:!1,text:"Finish the Game",tooltipDesc:"That's it. You're done",cost:{ponder:1e3}}}}},587:e=>{e.exports={resources:{clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"ìÜ±ìÄú Gathering Sticks",defaultText:"ìÜ± Gather Sticks",value:0,emoji:"ìÄù",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"ìçØìÄ™ Gathering Vines",defaultText:"ìçØ Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"ìÄ™",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"ìäñìÄ© Gathering Rocks",defaultText:"ìäñ Gather Rocks",value:0,emoji:"ìÄ©",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"ìÜùìÜüìÜû ìÅÉ Gone Fishing",defaultText:"ìÜùìÜüìÜû Go Fish",value:0,emoji:"ìÅÉ",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"ìÄ® Chopping Wood",defaultText:"ìåè Chop Wood",emoji:"ìÄ®",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"ìÄÅ Pondering",defaultText:"ìÄÅ Ponder",emoji:"ìÄÅ",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"ìâ∏ìÅÑ Mining Ore",defaultText:"ìâ∏ Mine Ore",emoji:"ìÅÑ",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"ìÄ© Scooping Sand",defaultText:"ìÄ© Scoop Sand",emoji:"ìÄ©",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"ìÄ© Harvesting Wheat",defaultText:"ìÄ© Harvest Wheat",emoji:"ìÄù",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"ìÄ©",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"ìÄé",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"ìÄ©",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"ìÄ©",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"ìÄ©",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"ìÉöìÄé Hunting",defaultText:"ìÄé Hunt",emoji:"ìÄé",max:50}}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},smithing:{exp:0,level:0,affectedResources:["axe","pickaxe","spear","glass","iron","silver","gold"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:[]},fishing:{exp:0,level:0,affectedResources:["fish","freshwater"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{buttons:s}=o(54),{craftedResources:i}=o(371),{buildings:n}=o(882),{ponders:r}=o(397),{saveGame:a,loadGame:c}=o(502),{getMaterial:l,createResourceTag:d}=o(594),{recalculateBuildingCost:u}=o(151),{hasPerk:f}=o(134);let p=!1,b=new Set(["gatherSticks"]),h=[];function g(e){return e.charAt(0).toUpperCase()+e.slice(1)}const m=document.querySelector("#resources"),k=document.querySelector("#emojiGatherDisplay");function y(e){return h.includes(e)}function v(e){y(e)||h.push(e);const t=document.querySelectorAll("p."+e);t.forEach((e=>e.classList.add("visible"))),t.forEach((e=>e.style.display="")),x()}function x(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&b.has(e.id)&&(o="button-disabled");try{t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(canUnlock(e.id)&&(o="purchasable"),isPondered(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){console.warn("Error with checking requirement of button: ",t,e)}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var i=getCraftedResourceConfigById(t.id);i.value>0&&(o="button-disabled");const e=getCraftedResourceKeyByConfig(i);canCraft(e)&&(o="purchasable")}t.data_building&&(o=getBuildingCount(t.data_building)?"button-disabled":o,o=canBuyBuilding(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(b.add(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var o;const s=jobRequiredPonders[t];"hidden"==(o=null==s||isPondered(s)?"purchasable":"not-unlockable"===s?"hidden":"button-disabled")?e.style.display="none":(b.add(e.id),e.classList.add(o),e.style.display="")}))}const w={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},C=[{condition:()=>l("sticks")>=1,action:()=>v("stick")},{condition:()=>l("sticks")>=10,action:()=>v("vines")},{condition:()=>l("vines")>=10,action:()=>v("rocks")},{condition:()=>l("rocks")>=1,action:()=>{v("tab-button"),v("craftRocks")}},{condition:()=>l("fish")>=1,action:()=>v("fishing")},{condition:()=>hasTool("Axe"),action:()=>v("wood")},{condition:()=>getCraftedResource("rope")>=1,action:()=>v("rope")},{condition:()=>l("fish")>=5&&!0,action:()=>{document.getElementById("eatFish").style.display="block",document.getElementById("eatFish").classList.add("visible")}},{condition:()=>false,action:()=>{v("clone"),v("ponder-tab")}}],T=document.getElementById("levelUpMessage");let S=document.querySelectorAll(".tab-content > .content");function R(e){console.log("show tab: "+e);for(let e of S)e.classList.remove("active");let t=document.querySelectorAll(".tab-button");for(let e of t)e.classList.remove("active");document.getElementById(e).classList.add("active");const o=`#${e}Button`;let s=document.querySelector(o);s&&s.classList.add("active"),"jobsTab"===e&&drawAllConnections()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":R("productionTab");break;case"2":y("tab-button")&&R("experimentTab");break;case"3":y("ponder-tab")&&R("ponderTab");break;case"4":y("jobs-tab")&&R("jobsTab");break;case"5":y("skillsTable")&&R("skillsTab");break;case"6":y("perksTab")&&R("perksTab")}}));const A=document.getElementById("darkModeToggle"),q=document.body;q.classList.toggle("dark-mode"),A.classList.toggle("dark");let B=!0;document.getElementById("overlay"),document.getElementById("message");let D=50,P=null,j=0,E=0;function M(e){null===P&&(P=e);const t=e-P;j+=t,E+=t,P=e;let o=D;for(;E>=100*D;)D*=10;for(;E>=D;)E-=D,O(D);D=o,requestAnimationFrame(M)}let L=0;function O(e,t){for(let t in resources)increaseMaterial(t,calcIncrease(t,e));updateResourceIncreaseRates(),function(){C.forEach((e=>{e.condition()&&e.action()}));for(let e in w)!hasTool(e)&&getCraftedResource(e)>0&&(addTool(e),v(w[e]));try{x(),null!==V&&G(V)}catch(e){console.warn(e)}}(),L+=e,L>=1e4&&(a(),L=0)}function $(e){function t(e,t){return e<10?o(e,3)+t:e<100?o(e,2)+t:e<1e3?o(e,1)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,2):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):e.toString()}function F(){for(const[o,s]of Object.entries(resources)){const i=document.getElementById("resource-"+o);if(!i)return;var e=!0;for(let t in i.classList)y(t)&&(e=!1,console.log("dont hide",o,t));s.value>0&&(e=!1,resources[o].isVisible=!0),s.isVisible&&(e=!1),e&&(i.style.display="none");const n=document.getElementById(o+"Value");if(n){var t="#fff";s.value===getMax(o)?t="#fcc":s.value/getMax(o)>.6&&(t="#eeb"),n.innerHTML=`<span style="color:${t}">${$(s.value)} / ${$(getMax(o))} </span>`}}}const I=document.getElementById("dynamic-tooltip");function G(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),s=getResourceConfigById(e.id)||getCraftedResourceConfigById(e.id)||n[e.getAttribute("data_building")]||r[e.getAttribute("unlock")],i=e.getAttribute("tooltipCost")||s.cost;!function(e,t,o,s){let i="";if(t&&(i+=`<span >${t}</span><hr>`),o&&(i+=`<span style="color:#00ABE7">${o}</span><hr>`),s)try{var n="";for(let e in s){const t=s[e];var r=l(e)>=t?"enough":"not-enough";getMax(e)<t&&(r="exceeds-max"),n+=`<span class="tooltip-${e} ${r}">${t.toFixed(0)} ${e}</span>`;const o=calcSecondsRemaining(e,t);o>0&&"exceeds-max"!=r&&(n+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),n+="<br>"}i+=n}catch(e){i+=s}I.innerHTML=i,I.style.left=e.getBoundingClientRect().right+5+"px",I.style.top=e.getBoundingClientRect().top-I.offsetHeight/2+"px",I.style.display="block"}(e,t,o,i)}!function(){console.log("Generating buttons"),console.trace();const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),r=document.getElementById("experimentTab").querySelector(".button-columns"),a=document.getElementById("ponderTab"),c=e(o),l=e(r),d=e(a);let p=0,b=0,h=0;for(let e in s){const o=s[e],r=document.createElement("button");r.id=e,r.className=o.class,r.textContent=o.text,o.tooltipDesc&&r.setAttribute("data-tooltip-desc",o.tooltipDesc),o.tooltipEffect&&r.setAttribute("data-tooltip-effect",o.tooltipEffect),r.setAttribute("unlock",o.unlock),r.setAttribute("data_building",o.data_building);const a=Object.values(i).find((t=>t.id===e));a&&(o.tooltipCost=generateTooltipCost(a.cost)),r.setAttribute("data-tooltip-cost",o.tooltipCost),o.showTab&&r.addEventListener("click",(()=>{R(o.showTab),console.log("Switching to tab: "+o.showTab)})),"production"===o.tab?(c[p].appendChild(r),p=(p+1)%3):"experiment"===o.tab?(l[b].appendChild(r),b=(b+1)%3):"tabs"===o.tab?t.appendChild(r):"ponder"===o.tab?(d[h].appendChild(r),h=(h+1)%3):o.tab,Object.keys(n).find((t=>t===e))&&u(e,n,f);try{o.requirement()||(r.style.display="none")}catch(e){console.warn("Error with requirement while generating buttons: ",o,e)}}}(),document.addEventListener("DOMContentLoaded",(e=>{function t(e){for(let t in i)if(i[t].id===e)return t;return""}c(),F(),R("productionTab"),d("sticks"),appendCraftedResourceButtons(),document.addEventListener("click",(e=>{if(e.target.matches("button")){const i=e.target;if(i.getAttribute("data_building")&&"undefined"!==i.getAttribute("data_building")&&i.classList.contains("purchasable")){var o=i.getAttribute("data_building");e.shiftKey?buyMaxBuildings(o):buyBuilding(o)}if(i.classList.contains("unlock")){const e=i.getAttribute("unlock");if(console.log(e),r[e]){var s=!0;for(let t in r[e].cost)if(l(t)<r[e].cost[t]){console.log("Cannot unlock "+e),s=!1;break}if(s){for(let t in r[e].cost)increaseMaterial(t,-r[e].cost[t]);r[e].isPondered=!0,v(e),i.display="none",console.log("Unlocking "+e)}}}"undefined"!==i.id&&(console.log(i),"gather"===i.id.slice(0,6)&&function(e){const t=resources[e],o=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));t.isGetting?(t.isGetting=!1,s.textContent=t.defaultText,o&&(o.style.fontWeight="normal")):(function(){for(let e in resources){resources[e].isGetting=!1;const t=document.querySelector("#gather"+g(e));t&&(t.textContent=resources[e].defaultText);const o=m.querySelector("#resource-"+e);o&&(o.style.fontWeight="normal")}}(),t.isGetting=!0,s.textContent=t.activeText,o&&(o.style.fontWeight="bold"),k.textContent=t.emoji,console.log(t.emoji))}(function(e){for(let t in resources)if(resources[t].id===e)return t;return""}(i.id)),"craft"===i.id.slice(0,5)&&(e.shiftKey?craftAllResources(t(i.id)):craftResource(t(i.id))),"darkModeToggle"===i.id&&(q.classList.toggle("dark-mode"),A.classList.toggle("dark"),B=!B,A.textContent=B?"Light Mode":"Dark Mode"))}e.target.matches("#alone")&&(resources.clones.value<resources.clones.max&&(resources.clones.value+=1),updateTotal())})),requestAnimationFrame(M),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){G(e),V=e})),e.addEventListener("onclick",(function(){G(e)})),e.addEventListener("mouseleave",(function(){I.style.display="none",V=null}))})),updateTotal()}));var V=null;e.exports={capitalizeFirst:g,updateSidebar:F,updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${resources[e].value}`,document.body.appendChild(t)},updateSkills:function(e,t){t=Math.abs(t),isPondered("fasterSkills")&&(t*=1.05);for(let o in skills)skills[o].affectedResources.includes(e)&&(skills[o].exp+=t/Math.pow(1.1,skills[o].level),skills[o].exp>=100&&(skills[o].level+=1,skills[o].exp=0,T.textContent=`Level up! ${o} ‚Üí ${skills[o].level}`,T.classList.remove("hidden"),setTimeout((()=>{T.classList.add("hidden")}),3e3)));y("skillsTable")&&function(){const e=document.getElementById("skillsTable");if(p)for(let e in skills){(skills[e].exp>0||skills[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=skills[e].exp+"%",document.querySelector("#level-"+e).textContent="["+skills[e].level+"]   "+e)}else{console.log("Generating table for the first time"),p=!0;for(let t in skills){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.backgroundColor=B?"#228B22":"#50C878",i.style.height="20px",i.setAttribute("data-skill",t);let n=document.createElement("span");n.textContent="["+skills[t].level+"]   "+t,n.setAttribute("id","level-"+t),n.style.position="absolute",n.style.left="10px",n.style.top="50%",n.style.transform="translateY(-50%)",0==skills[t].exp&&0==skills[t].level&&(o.style.display="none"),s.appendChild(i),s.appendChild(n),o.appendChild(s),e.appendChild(o)}}}()},passedStage:y,makeVisible:v,total_time:j,currentHoverButton:V}},134:e=>{let t=[];function o(e){return t.includes(e)}function s(e){if(t.push(e),"Architect"===e)for(let e in buildings)recalculateBuildingCost(e)}function i(e){document.querySelectorAll(".tierOneButton").forEach((e=>{e.setAttribute("disabled","true")}));let t=document.querySelector(".tierOneButton[onclick=\"selectAbility('"+e+"')\"]");console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")}e.exports={hasPerk:o,addPerk:s,selectCorrectPerkButton:i,selectAbility:function(e){o(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(s(e),i(e))},getPerkFromTier:function(e){for(let t in perks["tier"+e])if(o(t))return t;return""}}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:i}=o(371),{capitalizeFirst:n}=o(808),{getWorkers:r}=o(150);function a(e,t){return t.hasOwnProperty(e)?t[e].value:h(e)}console.log(n);const c=document.getElementById("resources");function l(e){if(!s.hasOwnProperty(e))throw"Invalid resource: "+e;const t=n(e).split("_").join(" "),o=document.createElement("p");o.className=`${e} resource`,o.id=`resource-${e}`;const i=document.createElement("span");i.className="resourceName",i.textContent=`${t}:`;const r=document.createElement("span");r.className="resourceValue",r.id=`${e}Value`,r.textContent=`${s[e].value.toFixed(1)} / ${s[e].max.toFixed(1)}`;const a=document.createElement("span");function l(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}a.className="resourceRate",a.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,o.appendChild(i),o.appendChild(r),o.appendChild(a),c.appendChild(o),l("resource-clones",1),l("resource-sticks",2),l("resource-vines",3),l("resource-rocks",4),l("resource-fish",5),l("resource-wood",6),l("resource-ore",7),l("resource-ponder",50)}function d(e){const t=c.querySelector(`#${e}Value`),o=document.querySelector(`button#craft${n(e)}`);try{t&&!o||l(e)}catch(e){}if(t){try{t.textContent=`${s[e].value.toFixed(1)} / ${s[e].max.toFixed(1)}`}catch(o){console.error(t,e,o)}if(s[e].isGetting){const t=sidebarParent.querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}else if(o){const t=o.querySelector(`#${e}Value`);t?t.textContent=h(e).toFixed(0):console.warn(`Resource button found but no count span for: ${e}`)}}function u(e,t){if(0!=t){if(e=e.toLowerCase(),s.hasOwnProperty(e))isPondered("fasterResourceGain")&&(t*=1.05),s[e].value<s[e].max&&t>0?(s[e].value+=t,updateSkills(e,t)):t<0?s[e].value+=t:(s[e].value=s[e].max,isPondered("autocraft")&&y[e]&&v(y[e])),d(e),reassignJobsBasedOnResources();else{if(!i.hasOwnProperty(e))throw"Tried to increase Invalid material: "+e;i[e].value+=t,d(e),updateSkills(e,t)}updateSidebar()}}function f(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.requirement=e.requirement;const o=Object.keys(i).find((t=>i[t]===e)),s=parseFloat(i[o].value).toFixed(0);return t.innerHTML=`${e.text||n(o)}: <span id="${o+"Value"}">${s}</span>`,t.tab="experiment",t}const p=document.querySelector("#craftedResourceButtons");function b(e){var t="";for(let o in e)t+=`<span class="tooltip-${o} ${a(o,s)>=e[o]?"enough":"not-enough"}">${e[o]} ${o}</span><br>`;return t}function h(e){if(e=e.toLowerCase(),i.hasOwnProperty(e))return i[e].value;throw"Invalid crafted resource:"+e}function g(e){let t=!0,o=i[e].cost;try{for(let e in o)if(a(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}const m=document.getElementById("emojiDisplay");function k(){let e="";for(let t in s){let o=r(t);if(console.log(t,o),void 0===o||0==o)continue;let i=s[t].emoji||"ìÄü";i&&(e+=i.repeat(o))}m.textContent=e,function(){let e=48;for(m.style.fontSize=`${e}px`;m.offsetWidth>600&&e>30;)e-=1,m.style.fontSize=`${e}px`}()}k();const y={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function v(e){try{for(;g(e);)x(e)}catch(t){console.log("Failed to craftall for: ",e,t)}}function x(e){if(!i.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;let t=i[e].cost;if(g(e)){for(let e in t)u(e,-t[e]);u(e,1),i[e].craftedOnce=!0,d(e)}}e.exports={getMaterial:a,increaseMaterial:u,getMax:function(e){return s.hasOwnProperty(e)?s[e].max:1/0},setMax:function(e,t){s[e].max=t,updateSidebar(),updateTotal()},increaseMax:function(e,t){s[e].max+=t,updateSidebar(),updateTotal()},craftAllResources:v,craftResource:x,updateEmojiDisplay:k,updateDisplayValue:d,getAffectedResources:function(e){return skills[e]?skills[e].affectedResources:null},isResource:function(e){return null!==s[e]},getCraftedResourceKeyByConfig:function(e){for(let t in i)if(i[t].id===e.id)return t;return null},getResourceConfigById:function(e){for(let t in s)if(s[t].id===e)return s[t];return null},getCraftedResourceConfigById:function(e){for(let t in i)if(i[t].id===e)return i[t];return null},calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=function(e,t){var o=0;if(!s.hasOwnProperty(e))return o;"clones"===e&&isPondered("autoClone")&&(o=1);var i=getToolValueForResource(s[e]);s[e].isGetting&&(o+=i),o+=(hasPerk("Leader")?.375:.25)*r(e)||0,!hasPerk("Lumberjack")||"wood"!=e&&"sticks"!=e||(o*=1.25),!hasPerk("Miner")||"rocks"!=e&&"ore"!=e||(o*=1.25),!hasPerk("Botanist")||"vines"!=e&&"herbs"!=e&&"wheat"!=e||(o*=1.25);for(let t in skills)if(skills[t].affectedResources.includes(e)){let e=1.2;o*=1+(Math.pow(e,skills[t].level)-1)/100}for(let t in buildings){const s=getBoost(t,e);if(s){var n=Math.pow(s,buildings[t].count);isPondered("effectiveBuildings")&&(n*=1.01),o*=n}}return"ponder"===e&&isPondered("ponder1")&&(o*=1.05),isPondered("fasterResourceGain")&&(o*=1.05),o*=t/1e3,parseFloat(o.toFixed(3))}(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},createResourceTag:l,appendCraftedResourceButtons:function(){for(let e in i){const t=f(i[e]);t.setAttribute("data-tooltip-desc",i[e].tooltipDesc),t.setAttribute("data-tooltip-cost",b(i[e].cost)),p.appendChild(t),buttons[i[e].id]=i[e]}}}},502:(e,t,o)=>{const{updateBuildingButtonCount:s}=o(151),{updateDisplayValue:i}=o(594),{craftedResources:n}=o(371),{buildings:r}=o(882),{ponders:a}=o(397),{resources:c}=o(587),{skills:l}=o(324),{jobCounts:d}=o(150),{total_time:u}=o(808);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[]};for(let t in l)e.skills[t]={exp:l[t].exp,level:l[t].level};for(let t in n)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=getCraftedResource(t),e.craftedResources[t].craftedOnce=n[t].craftedOnce;for(let t in c)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=getMaterial(t),e.resources[t].max=c[t].max;e.tools=playerTools,e.stages=stages,e.jobs=d,e.perks=myPerks,e.connections=Array.from(connections.entries());for(let t in a)e.unlocks[t]=isPondered(t);for(let t in r)e.buildings[t]=r[t].count;for(let t of allVisibleButtons)e.allVisibleButtons.push(t);const t=message.innerHTML;return e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t),e.time.total_time=u,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.value&&null!==t&&(c[t].value=e.resources[t].value,c[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=c[t].value&&i(t));if(void 0!==e.skills)for(let t in e.skills)l[t].exp=e.skills[t].exp,l[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))n[t].value=e.craftedResources[t].value,n[t].craftedOnce=e.craftedResources[t].craftedOnce,i(t);if(void 0!==e.tools){let t=[...new Set([...playerTools,...e.tools])];playerTools=t;for(let e in playerTools)updateToolUI(playerTools[e])}if(void 0!==e.stages)for(let t in e.stages)makeVisible(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)d[t]=e.jobs[t],updateDisplay(t);if(void 0!==e.unlocks)for(let t in e.unlocks)a[t].isPondered=e.unlocks[t];if(isPondered("skillsTable")&&populateSkillsTable(),void 0!==e.buildings){for(let t in e.buildings)r[t].count=e.buildings[t],s(t,r[t].count),recalculateBuildingCost(t);updateSidebar()}if(ateFish=c.clones.max>=1,ateFish&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&changeMessage(e.message[0],e.message[1]),void 0!==e.time){u=e.time[u];const t=Date.now()-e.time.time_of_save;for(let e in c){const o=calcIncrease(e,t);c[e].value+=o,c[e].value>c[e].max&&(c[e].value=c[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)allVisibleButtons.add(t)}void 0!==e.connections&&(connections=new Map(e.connections),0===connections.size&&(connections=new Map),console.log(connections));for(let e in d)distributeWorkers(e,d[e]);if(updateEmojiDisplay(),void 0!==e.perks){myPerks=e.perks;for(let e in myPerks)selectCorrectPerkButton(e)}}}}}},t={};!function o(s){var i=t[s];if(void 0!==i)return i.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,o),n.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,