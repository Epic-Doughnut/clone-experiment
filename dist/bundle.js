(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},151:(e,t,o)=>{const{buildings:s}=o(882),{buttons:n}=o(54),{resources:i}=o(587),{increaseMaterial:r,increaseMax:a}=o(594),{canBuyBuilding:c,updateSidebar:l}=o(78),{updateTotal:d}=o(150),{hasPerk:u}=o(134),{capitalizeFirst:f}=o(681),{getMaterial:p}=o(924),{passedStage:b}=o(751);function g(e,t,o){let s=t[e];if(s&&s.cost&&s.ratio)for(let e in s.cost)s.cost[e]=Math.round(s.basecost[e]*Math.pow(s.ratio,s.count)),o("Architect")&&(s.cost[e]*=.75);const n=document.querySelector("#"+e);var i=h(s.cost);if(!n)throw"Button not found for "+e;{n.setAttribute("data-tooltip-cost",i);const e=function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));t.push(`+${e}% ${o} production`)}return t.join(", ")}(s);n.setAttribute("data-tooltip-effect",e)}}function h(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")}function m(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e,t){return function(o){const s=Object.entries(e).every((([e,t])=>p(e,o)>=Math.floor(t/2))),n=!t.effects||!t.effects.clones||b("clones");return s&&n}}(o.cost,o);return{class:"tooltip "+e,tab:"production",text:`${e.charAt(0).toUpperCase()+e.slice(1)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}}for(let e in s){const t=m(e,s);n[e]=t}function y(e){console.log("Buying building "+e);const t=s[e];if(c(e)){for(const e in t.cost)r(e,-t.cost[e]);for(const e in t.effects)a(e,t.effects[e]);t.count++,l(),d(),v(e,t.count),g(e,s,u)}}function v(e,t){document.getElementById(`${e}`).textContent=`${f(e).split("_").join(" ")} (${t})`}e.exports={recalculateBuildingCost:g,generateBuildingTooltipCost:h,createBuildingButton:m,updateBuildingButtonCount:v,buyMaxBuildings:function(e){for(;c(e);)y(e)},buyBuilding:y}},64:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=n[e].cost;try{for(let e in o)if(i(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},51:(e,t,o)=>{const{craftedResources:s}=o(371),{resources:n}=o(587),{increaseMaterial:i,getMaterial:r,craftResource:a}=o(594);var c={bricks:["clay"],medicine:["herbs"],leather:["hides"],steel:["iron"],nails:["iron"],iron:["ore"],silver:["ore"],gold:["ore"],glass:["sand"],concrete:["sand"],slabs:["rocks"],rope:["vines"],paper:["wood"],beams:["wood"],crates:["wood"]},l=[];function d(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const o=document.createElement("span"),s=document.createElement("select");Object.keys(c).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,s.appendChild(t)})),s.addEventListener("change",(function(){document.querySelector(`#resource-${s.value}`).style.color="thistle",o.textContent=c[s.value]}));const n=document.createElement("span");n.innerHTML="&#8594;",t.appendChild(o),t.appendChild(n),t.appendChild(s),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.disabled=!0,o.selected=!0,e.appendChild(o)}(s),e.appendChild(t)}Object.keys(n).forEach((e=>l.push(e))),Object.keys(s).forEach((e=>l.push(e))),console.log("All materials: ",l);let u=2,f=30;var p=50;e.exports={createFactoryDiv:d,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("span:first-child"),o=e.querySelector("select:last-child"),s=t.textContent,n=o.value;console.log("checking factory",s,n),s&&n&&function(e,t){let o=Math.min(u,r(e));o*=1;for(let e=0;e<o;++e)a(t)}(s,n)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");r("silver")<p?console.log("Not enough silver!"):(i("silver",-p),d(),p*=1.2,e.setAttribute("data-tooltip-cost",`${p.toFixed(2)} silver`))},upgradeBulk:function(){u+=2,f+=10,document.getElementById("upgradeBulkButton").setAttribute("data-tooltip-cost",`${u} → ${u+2}: ${f.toFixed(0)} silver`)},allMaterials:l}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)?t[e].value||0:(console.warn("Invalid crafted resource:"+e),0)}},924:(e,t,o)=>{const{getCraftedResource:s}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},78:(e,t,o)=>{const{resources:s}=o(587),{skills:n}=o(324),{buildings:i}=o(882),{getMaterial:r}=o(924);let a=new Set(["gatherSticks"]);function c(e){return s.hasOwnProperty(e)?s[e].max:1/0}function l(e){function t(e,t){return e<10?o(e,3)+t:e<100?o(e,2)+t:e<1e3?o(e,1)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,2):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):e.toString()}t.allVisibleButtons=a;const d=document.getElementById("levelUpMessage");let u=!1;function f(){const e=document.getElementById("skillsTable");if(u)for(let e in n){(n[e].exp>0||n[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=n[e].exp+"%",document.querySelector("#level-"+e).textContent="["+n[e].level+"]   "+e)}else{console.log("Generating table for the first time"),u=!0;for(let t in n){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent="["+n[t].level+"]   "+t,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==n[t].exp&&0==n[t].level&&(o.style.display="none"),s.appendChild(i),s.appendChild(r),o.appendChild(s),e.appendChild(o)}}}e.exports={getMaterial:r,getMax:c,updateSidebar:function(){Array.from(o(51).allMaterials).forEach((e=>o(594).updateDisplayValue(e)));for(const[n,i]of Object.entries(s)){const r=document.getElementById("resource-"+n);if(!r)return;var e=!0;for(let t in r.classList)o(751).passedStage(t)&&(e=!1,console.log("dont hide",n,t));i.value>0&&(e=!1,s[n].isVisible=!0),i.isVisible&&(e=!1),e&&(r.style.display="none");const a=document.getElementById(n+"Value");if(a){var t="#fff";i.value===c(n)?t="#fcc":i.value/c(n)>.6&&(t="#eeb"),a.innerHTML=`<span style="color:${t}">${l(i.value)} / ${l(c(n))} </span>`}}},updateSkills:function(e,t){t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05);for(let o in n)if(n[o].affectedResources.includes(e)){if(n[o].level>=100){n[o].level=100,n[o].exp=0;continue}n[o].exp+=t/Math.pow(1.4,n[o].level),n[o].exp>=100&&(n[o].level+=1,n[o].exp=0,d.textContent=`Level up! ${o} → ${n[o].level}`,d.classList.remove("hidden"),setTimeout((()=>{d.classList.add("hidden")}),3e3))}o(751).passedStage("skillsTable")&&f()},populateSkillsTable:f,calcCraftBonus:function(e){return 1},isButtonIdVisible:function(e){return a.has(e)},setVisibleButton:function(e){a.add(e)},canBuyBuilding:function(e){let t=!0;const o=i[e];for(const e in o.cost)if(o.cost[e]>r(e,s)){t=!1;break}return t},hasGeneratedSkillTable:u,clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combat",hunting:"hunting"}},150:(e,t,o)=>{const{skills:s}=o(324),{resources:n}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),c={};for(let e in s)c[e]=0;const l=document.getElementById("jobsTab");function d(){var e=0;for(let t in c)e+=c[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),l.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");i("clones",n)>d()&&c[e]++,f(e,c[e]),p(e),b(),console.log(u)}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");c[e]>0&&(c[e]--,f(e,c[e]),p(e),b())}))}));let u=new Map;function f(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let e of o)u.set(e,r);let a=t-r*i;for(let e of o)a>0&&(u.set(e,u.get(e)+1),a--)}function p(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${c[e]}`),o(594).updateEmojiDisplay()}function b(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+d()+" / "+a("clones")}let g=new Map,h=document.getElementById("lineCanvas"),m=h.getContext("2d");function y(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;m.beginPath(),m.moveTo(n,i),m.lineTo(t,o),m.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,d=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(m,n,i,t,o,10)}function v(e,t){let o=c[e];c[e]=0,c[t]+=o,p(e),p(t)}h.width=window.innerWidth,h.height=window.innerHeight,e.exports={clearJobAssignments:function(){m.clearRect(0,0,h.width,h.height),g=new Map},reassignJobsBasedOnResources:function(){try{const e=g.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let l=!0,d=s[e].affectedResources;if(!d)return;for(const e of d)if(void 0!==n[e]&&i(e)<n[e].max){l=!1;break}l&&c[e]>0&&(v(r,a),f(r,c[r]),f(a,c[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:v,drawAllConnections:function(){m.clearRect(0,0,h.width,h.height);try{for(let[e,t]of g.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,y(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return u.get(e)},updateTotal:b,setConnections:function(e){g=e},getConnections:function(){return g},distributeWorkers:f,updateDisplay:p,jobCounts:c}},882:e=>{const t={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.3,tooltipDesc:"For when you need a home away from home."},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.2,tooltipDesc:"A cozy, idyllic chunk of wood."},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.4,tooltipDesc:"Every clone's dream. Minus the white picket fence."},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home."},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.1,tooltipDesc:"The ultimate storage solution for the pack rat in you."},stockpile:{basecost:{rocks:30},effects:{wood:100},ratio:1.1,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.1,tooltipDesc:"Air drying: Nature's way of preserving food."},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.2,tooltipDesc:"DIY's dream destination."},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing."},bakery:{basecost:{wood:80,wheat:100,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready."},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you."},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster."},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required."},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore."},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.05},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted."},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!"},fishery:{basecost:{wood:40,rope:15},effects:{},boost:{fish:1.1},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food."},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals."},water_well:{basecost:{rocks:30,rope:1,wood:10},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar."},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather."},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.2,herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter."},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power."},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly."},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!"}};e.exports={buildings:t,getBuildingCount:function(e){return t[e].count},getBoost:function(e,o){const s=t[e];if(s&&s.boost){if(s.boost[o])return s.boost[o];if(s.boost.all)return s.boost.all}return null}}},54:(e,t,o)=>{const{passedStage:s}=o(751),{getMaterial:n}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:s}=o(924),{getCraftedResource:n}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocks",value:0,cost:{rocks:2},craftedOnce:!1,requirement:()=>s("rocks",i)>=5,tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRope",value:0,cost:{vines:3},craftedOnce:!1,requirement:()=>s("vines",i)>=3,tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"rope"},handle:{id:"craftHandle",value:0,cost:{sticks:2},craftedOnce:!1,requirement:()=>n("sharpRocks")>=1,tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaff",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requirement:()=>n("handle")>=1,tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requirement:()=>r("fishing"),tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"rope"},spear:{id:"craftSpear",value:0,cost:{staff:1,sharpRocks:1,rope:1},craftedOnce:!1,requirement:()=>n("staff")>=1,tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxe",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requirement:()=>n("spear")>=1,tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"rope"},pickaxe:{id:"craftPickaxe",value:0,cost:{handle:1,sharpRocks:3,rope:1,rocks:10},craftedOnce:!1,requirement:()=>n("axe")>=1,tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"rope"},glass:{id:"craftGlass",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requirement:()=>r("glassBlowing")},paper:{id:"craftPaper",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requirement:()=>r("paper")},gold:{id:"craftGold",value:0,cost:{ore:100},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIron",value:0,cost:{ore:20},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilver",value:0,cost:{ore:50},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricks",value:0,cost:{clay:15},craftedOnce:!1,requirement:()=>s("clay",i)>5,tooltipDesc:"Leave some clay by the fire",tooltipCost:""},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(let t in a)if(a[t].id===e)return a[t];return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{e.exports={ponders:{ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:40},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 1%",cost:{ponder:140}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:150}},combat:{id:"ponderCombat",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:140,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}}}}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},smithing:{exp:0,level:0,affectedResources:["axe","pickaxe","spear","glass","iron","silver","gold"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:[]},fishing:{exp:0,level:0,affectedResources:["fish","freshwater"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,getCraftedResourceConfigById:n}=o(371),{buildings:i}=o(882),{ponders:r}=o(397),{buttons:a}=o(54),{resources:c,getResourceConfigById:l}=o(587),{saveGame:d,loadGame:u}=o(502),{generateTooltipCost:f,appendCraftedResourceButtons:p,increaseMaterial:b,craftAllResources:g,craftResource:h,calcIncrease:m,updateResourceIncreaseRates:y,calcSecondsRemaining:v,increaseMax:k,initializeResourceTags:x}=o(594),{recalculateBuildingCost:w,buyMaxBuildings:C,buyBuilding:T}=o(151),{hasPerk:B,selectAbility:S}=o(134),{updateSidebar:A,getMax:E,clearSidebar:M}=o(78),{makeVisible:R}=o(123),{updateButtonVisibility:q}=o(667),{getCraftedResource:D}=o(590),{getMaterial:j}=o(924),{createFactoryDiv:F,buyFactory:P,attemptManufacture:L,upgradeBulk:$}=o(51),{isPondered:I,generatePonderButtons:O}=o(369),{hasTool:G,addTool:V}=o(609),{getAteFish:W,setAteFish:N}=o(621),{drawAllConnections:H,updateTotal:_}=o(150),{capitalizeFirst:J}=o(681),{passedStage:z}=o(751),U=document.querySelector("#resources"),Y=document.querySelector("#emojiGatherDisplay"),K={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},Q=[{condition:()=>j("sticks",c)>=1,action:()=>R("stick")},{condition:()=>j("sticks",c)>=10,action:()=>R("vines")},{condition:()=>j("vines",c)>=10,action:()=>R("rocks")},{condition:()=>j("rocks",c)>=1,action:()=>{R("tab-button"),R("craftRocks")}},{condition:()=>j("fish",c)>=1,action:()=>R("fishing")},{condition:()=>G("Axe"),action:()=>R("wood")},{condition:()=>D("rope")>=1,action:()=>R("rope")},{condition:()=>j("fish",c)>=5&&!W(),action:()=>{document.getElementById("eatFish").style.display="block",document.getElementById("eatFish").classList.add("visible")}},{condition:()=>W(),action:()=>{R("clone"),R("ponder-tab")}},{condition:()=>I("ponderFinish"),action:()=>(document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))}];let X=document.querySelectorAll(".tab-content > .content");function Z(e){console.log("show tab: "+e);let t="";for(let e of X)e.classList.contains("active")&&(t=e.id,e.classList.remove("active"));let o=document.querySelectorAll(".tab-button");for(let e of o)e.classList.remove("active");document.getElementById(e).classList.add("active");const s=`#${e}Button`;let n=document.querySelector(s);n&&n.classList.add("active"),"jobsTab"===e&&H(),"factoryTab"===e&&"factoryTab"!==t?(M(),x()):"factoryTab"===t&&(M(),A())}document.addEventListener("keydown",(function(e){switch(e.key){case"1":Z("productionTab");break;case"2":z("tab-button")&&Z("experimentTab");break;case"3":z("ponder-tab")&&Z("ponderTab");break;case"4":z("jobs-tab")&&Z("jobsTab");break;case"5":z("skillsTable")&&Z("skillsTab");break;case"6":z("perksTab")&&Z("perksTab");break;case"7":z("factoryTab")&&Z("factoryTab")}}));const ee=document.getElementById("darkModeToggle"),te=document.body;te.classList.toggle("dark-mode"),ee.classList.toggle("dark");let oe=!0;const se=document.getElementById("overlay"),ne=document.getElementById("message");function ie(e,t){const o=e.replace(t,`<span id="alone" title="You feel peckish for some seafood">${t}</span>`);ne.innerHTML=o}let re=50,ae=null,ce=0,le=0;function de(e){null===ae&&(ae=e);const t=e-ae;ce+=t,le+=t,ae=e;let o=re;for(le>=10*re&&(re=le/10);le>=re;)le-=re,pe(re);re=o,requestAnimationFrame(de)}let ue=0,fe=0;function pe(e,t){for(let t in c)b(t,m(t,e));y(),function(){Q.forEach((e=>{e.condition()&&e.action()}));for(let e in K)!G(e)&&D(e)>0&&(V(e),R(K[e]));try{q(),null!==he&&ge(he)}catch(e){console.warn(e)}}(),ue+=e,fe+=e,ue>=1e4&&(d(),ue=0),fe>=1e3&&(L(),fe=0)}const be=document.getElementById("dynamic-tooltip");function ge(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),s=l(e.id)||n(e.id)||i[e.getAttribute("data_building")]||r[e.getAttribute("unlock")],a=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||s.cost;!function(e,t,o,s){let n="";if(t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#00ABE7">${o}</span><hr>`),s)try{var i="";for(let e in s){const t=s[e];var r=j(e,c)>=t?"enough":"not-enough";E(e)<t&&(r="exceeds-max"),i+=`<span class="tooltip-${e} ${r}">${t.toFixed(0)} ${e}</span>`;const o=v(e,t);o>0&&"exceeds-max"!=r&&(i+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),i+="<br>"}n+=i}catch(e){n+=s}be.innerHTML=n,be.style.left=e.getBoundingClientRect().right+5+"px",be.style.top=e.getBoundingClientRect().top-be.offsetHeight/2+"px",be.style.display="block"}(e,t,o,a)}document.addEventListener("DOMContentLoaded",(e=>{function t(e){for(let t in s)if(s[t].id===e)return t;return""}O(r),p(),function(){console.log("Generating buttons"),console.trace();const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),n=document.getElementById("experimentTab").querySelector(".button-columns"),r=document.getElementById("ponderTab"),c=e(o),l=e(n),d=e(r);let u=0,p=0,b=0;for(let e in a){const o=a[e],n=document.createElement("button");n.id=e,n.className=o.class,n.textContent=o.text,o.tooltipDesc&&n.setAttribute("data-tooltip-desc",o.tooltipDesc),o.tooltipEffect&&n.setAttribute("data-tooltip-effect",o.tooltipEffect),n.setAttribute("unlock",o.unlock),n.setAttribute("data_building",o.data_building);const r=Object.values(s).find((t=>t.id===e));r&&(o.tooltipCost=f(r.cost)),n.setAttribute("data-tooltip-cost",o.tooltipCost),o.showTab&&n.addEventListener("click",(()=>{Z(o.showTab),console.log("Switching to tab: "+o.showTab)})),"production"===o.tab?(c[u].appendChild(n),u=(u+1)%3):"experiment"===o.tab?(l[p].appendChild(n),p=(p+1)%3):"tabs"===o.tab?t.appendChild(n):"ponder"===o.tab?(d[b].appendChild(n),b=(b+1)%3):o.tab,Object.keys(i).find((t=>t===e))&&w(e,i,B);try{o.requirement()||(n.style.display="none")}catch(e){}}}(),u(),A(),Z("productionTab"),o(864).generateTradeTable(c),document.addEventListener("click",(e=>{if(e.target.matches("button")){const n=e.target;if(n.getAttribute("data_building")&&"undefined"!==n.getAttribute("data_building")&&n.classList.contains("purchasable")){var o=n.getAttribute("data_building");e.shiftKey?C(o):T(o)}if(n.classList.contains("unlock")){const e=n.getAttribute("unlock");if(console.log(e),r[e]){var s=!0;for(let t in r[e].cost)if(j(t,c)<r[e].cost[t]){console.log("Cannot unlock "+e),s=!1;break}if(s){for(let t in r[e].cost)b(t,-r[e].cost[t]);r[e].isPondered=!0,R(e),n.display="none",console.log("Unlocking "+e)}}}if("undefined"!==n.id&&(console.log(n),"gather"===n.id.slice(0,6)?function(e){const t=c[e],o=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));t.isGetting?(t.isGetting=!1,s.textContent=t.defaultText,o&&(o.style.fontWeight="normal")):(function(){for(let e in c){c[e].isGetting=!1;const t=document.querySelector("#gather"+J(e));t&&(t.textContent=c[e].defaultText);const o=U.querySelector("#resource-"+e);o&&(o.style.fontWeight="normal")}}(),t.isGetting=!0,s.textContent=t.activeText,o&&(o.style.fontWeight="bold"),Y.textContent=t.emoji,console.log(t.emoji))}(function(e){for(let t in c)if(c[t].id===e)return t;return""}(n.id)):"craft"===n.id.slice(0,5)?e.shiftKey?g(t(n.id)):h(t(n.id)):"saveButton"===n.id?d():"eatFish"===n.id?!W()&&j("fish",c)>=1&&(b("fish",-1),function(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block"}),5e3)}(),N(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{ie("You are with yourself in a forest.","with yourself"),k("clones",1),b("clones",1)}),1e3)):"overlay-button"===n.id?se.style.display="none":"deleteSaveButton"===n.id?(localStorage.removeItem("save"),location.reload()):"clearJobAssignments"===n.id?clearJobAssignments():"darkModeToggle"===n.id?(te.classList.toggle("dark-mode"),ee.classList.toggle("dark"),oe=!oe,ee.textContent=oe?"Light Mode":"Dark Mode"):"2main"===n.id?Z("mainTab"):"2graphs"===n.id&&Z("graphsTab")),n.classList.contains("tierOneButton")){let e=n.textContent;S(e)}}e.target.matches("#alone")&&(c.clones.value<c.clones.max&&(c.clones.value+=1),_())})),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("data-tooltip-cost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),P()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("data-tooltip-cost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),$()}))}(),F(),requestAnimationFrame(de),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){ge(e),he=e})),e.addEventListener("onclick",(function(){ge(e)})),e.addEventListener("mouseleave",(function(){be.style.display="none",he=null}))})),_()}));var he=null;e.exports={updateSidebar:A,updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${c[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){ce=e},changeMessage:ie,getMessage:function(){return ne},total_time:ce,currentHoverButton:he}},123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){n(e)||s(e);const t=document.querySelectorAll("p."+e);t.forEach((e=>e.classList.add("visible"))),t.forEach((e=>e.style.display="")),i()}},134:(e,t,o)=>{const{buildings:s}=o(882),{perks:n}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e)for(let e in s)o(151).recalculateBuildingCost(e,s,r)}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i}}},369:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{ponders:n}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:i.tooltipCost,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{buildings:i,getBoost:r}=o(882),{ponders:a}=o(397),{buttons:c}=o(54),{skills:l}=o(324),{getWorkers:d,updateTotal:u,reassignJobsBasedOnResources:f}=o(150),{hasTool:p,getToolValueForResource:b}=o(609),{updateSidebar:g,updateSkills:h,calcCraftBonus:m,getMax:y}=o(78),{canCraft:v}=o(64),{capitalizeFirst:k}=o(681),{getMaterial:x}=o(924),{hasPerk:w}=o(134),{isPondered:C}=o(369),{getCraftedResource:T}=o(590);function B(e,t){var o=0;if(n.hasOwnProperty(e));else if(!s.hasOwnProperty(e))return o;"clones"===e&&C("autoClone")&&(o=1);var a=b(s[e]);s[e].isGetting&&(o+=a),o+=(w("Leader")?.375:.25)*d(e)||0,!w("Lumberjack")||"wood"!=e&&"sticks"!=e||(o*=1.25),!w("Miner")||"rocks"!=e&&"ore"!=e||(o*=1.25),!w("Botanist")||"vines"!=e&&"herbs"!=e&&"wheat"!=e||(o*=1.25);for(let t in l)if(l[t].affectedResources.includes(e)){let e=1.06;o*=1+(Math.pow(e,l[t].level)-1)/100}for(let t in i){const s=r(t,e);if(s){var c=Math.pow(s,i[t].count);C("effectiveBuildings")&&(c*=1.01),o*=c}}return"ponder"===e&&C("ponder1")&&(o*=1.05),C("fasterResourceGain")&&(o*=1.05),o*=t/1e3,parseFloat(o.toFixed(3))}const S=document.getElementById("resources");function A(e,t){let o;console.log("Creating resource tag for ",e,t),t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),S.appendChild(o))):o=document.getElementById("resources");const s=k(e).split("_").join(" "),n=document.createElement("p");n.className=`${e} resource`,n.id=`resource-${e}`;const i=document.createElement("span");i.className="resourceName",i.textContent=`${s}:`;const r=document.createElement("span");r.className="resourceValue",r.id=`${e}Value`;let a=y(e)===1/0?"∞":y(e).toFixed(2);r.textContent=`${x(e).toFixed(2)} / ${a}`;const c=document.createElement("span");function l(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}c.className="resourceRate",c.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,n.appendChild(i),n.appendChild(r),n.appendChild(c),o.appendChild(n),l("resource-clones",1),l("resource-sticks",2),l("resource-vines",3),l("resource-rocks",4),l("resource-fish",5),l("resource-freshwater",6),l("resource-wood",7),l("resource-ore",8),l("resource-sand",9),l("resource-clay",10),l("resource-wheat",11),l("resource-hides",12),l("resource-game",13),l("resource-herbs",14),l("resource-berries",15),l("resource-ponder",50)}const E={basics:["clones","sticks","berries","fish","game","wheat","freshwater"],materials:["wood","ore","sand","clay","vines","rocks","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};function M(e){const t=S.querySelector(`#${e}Value`),o=document.querySelector(`button#craft${k(e)}`);try{t||A(e)}catch(e){}if(t){try{let o=y(e)===1/0?"∞":y(e).toFixed(2);t.textContent=`${x(e).toFixed(2)} / ${o}`}catch(o){console.error(t,e,o)}if(s[e]){const t=document.querySelector("#resources").querySelector("#resource-"+e);s[e].isGetting&&t&&(t.style.fontWeight="bold")}}if(o){const t=o.querySelector(`#${e}Value`);t?t.textContent=T(e).toFixed(0):console.warn(`Resource button found but no count span for: ${e}`)}}function R(e,t){0!=t&&(e=e.toLowerCase(),s.hasOwnProperty(e)?(x(e)<y(e)&&t>0?(C("fasterResourceGain")&&(t*=1.05),s[e].value+=t,h(e,t)):t<0?s[e].value+=t:(s[e].value=y(e),C("autocraft")&&document.querySelector("#autoCraftCheckbox").checked&&L[e]&&$(L[e])),M(e),f()):n.hasOwnProperty(e)?(n[e].value+=t,M(e),h(e,t)):(A(e),R(e,t)),g())}function q(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.requirement=e.requirement;const o=Object.keys(n).find((t=>n[t]===e)),s=parseFloat(n[o].value).toFixed(0);return t.innerHTML=`${e.text||k(o)}: <span id="${o+"Value"}">${s}</span>`,t.tab="experiment",t}const D=document.querySelector("#craftedResourceButtons");function j(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${x(o,s)>=e[o]?"enough":"not-enough"}">${e[o]} ${o}</span><br>`;return t}const F=document.getElementById("emojiDisplay");function P(){let e="";for(let t in s){let o=d(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=n.repeat(o))}F.textContent=e,function(){let e=48;for(F.style.fontSize=`${e}px`;F.offsetWidth>600&&e>30;)e-=1,F.style.fontSize=`${e}px`}()}P();const L={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function $(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(x(e,s)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),function(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!v(e))return;let o=n[e].cost;for(let e in o)R(e,-o[e]*t);R(e,t),n[e].craftedOnce||(n[e].craftedOnce=!0),M(e)}(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}}e.exports={getMaterial:x,increaseMaterial:R,setMax:function(e,t){s[e].max=t,g(),u()},increaseMax:function(e,t){s[e].max+=t,g(),u()},craftAllResources:$,craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!v(e))return;let t=n[e].cost;m(e),function(e,t,o){for(let e in t)R(e,-t[e]);R(e,1)}(e,t),n[e].craftedOnce||(n[e].craftedOnce=!0),M(e)},updateEmojiDisplay:P,updateDisplayValue:M,generateTooltipCost:j,calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=B(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},createResourceTag:A,appendCraftedResourceButtons:function(){for(let e in n){const t=q(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",j(n[e].cost)||""),D.appendChild(t),c[n[e].id]=n[e]}},calcIncrease:B,updateResourceIncreaseRates:function(){for(let t in s){const o=B(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},initializeResourceTags:function(){for(let e in E)E[e].forEach((t=>{try{A(t,e)}catch(e){console.log(e)}}))}}},502:(e,t,o)=>{const{updateBuildingButtonCount:s,recalculateBuildingCost:n}=o(151),{updateDisplayValue:i,calcIncrease:r,updateEmojiDisplay:a}=o(594),{addTool:c,getAllTools:l}=o(609),{allVisibleButtons:d,updateSidebar:u,populateSkillsTable:f,setVisibleButton:p}=o(78),{makeVisible:b}=o(123),{getCraftedResource:g}=o(590),{getMaterial:h}=o(924),{getAllPerks:m,addPerk:y,hasPerk:v}=o(134),{isPondered:k}=o(369),{jobCounts:x,setConnections:w,getConnections:C,distributeWorkers:T,updateDisplay:B}=o(150),{total_time:S}=o(808),{setAteFish:A,getAteFish:E}=o(621),{craftedResources:M}=o(371),{buildings:R}=o(882),{ponders:q}=o(397),{resources:D}=o(587),{skills:j}=o(324),{getAllStages:F}=o(751);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[]};for(let t in j)e.skills[t]={exp:j[t].exp,level:j[t].level};for(let t in M)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=g(t),e.craftedResources[t].craftedOnce=M[t].craftedOnce;for(let t in D)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=h(t,D),e.resources[t].max=D[t].max;e.tools=l(),e.stages=F(),e.jobs=x,e.perks=m(),e.connections=Array.from(C().entries());for(let t in q)e.unlocks[t]=k(t);for(let t in R)e.buildings[t]=R[t].count;for(let t in d)e.allVisibleButtons.push(t);const t=o(808).getMessage().innerHTML;return e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t),e.time.total_time=S,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(D[t].value=e.resources[t].value,D[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=D[t].value&&i(t));if(void 0!==e.skills)for(let t in e.skills)j[t].exp=e.skills[t].exp,j[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))M[t]&&(M[t].value=e.craftedResources[t].value,Number.isNaN(M[t].value)&&(M[t].value=0),M[t].craftedOnce=e.craftedResources[t].craftedOnce,i(t));if(void 0!==e.tools){let t=[...new Set([...l(),...e.tools])];for(let e in t)c(e)}if(void 0!==e.stages)for(let t in e.stages)b(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)x[t]=e.jobs[t],B(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{q[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(k("skillsTable")&&f(),void 0!==e.buildings){for(let t in e.buildings)R[t].count=e.buildings[t],s(t,R[t].count),n(t,R,v);u()}if(A(D.clones.max>=1),E()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[S]);const t=Date.now()-e.time.time_of_save;for(let e in D){const o=r(e,t);D[e].value+=o,D[e].value>D[e].max&&(D[e].value=D[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)p(t)}void 0!==e.connections&&(w(new Map(e.connections)),0===C().size&&w(new Map),console.log(C()));for(let e in x)T(e,x[e]);if(a(),void 0!==e.perks)for(let t in e.perks)y(t),o(495).selectCorrectPerkButton(t)}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return t.includes(e)},getAllStages:function(){return t}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(e.tools){const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val}return 1}}},864:(e,t,o)=>{const{getMaterial:s}=o(924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){s("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),i.textContent=s("gold",o(587).resources))}function a(e,t){s(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),i.textContent=s("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},667:(e,t,o)=>{const{buttons:s}=o(54),{getCraftedResourceConfigById:n}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,canBuyBuilding:d,setVisibleButton:u}=o(78),{canCraft:f}=o(64),{getMaterial:p}=o(924);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var p=n(t.id);p.value>0&&(o="button-disabled");const e=c(p);f(e)&&(o="purchasable")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=d(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(s),e.style.display="")}))}}},t={};!function o(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxFQUFhMWpCLFFBR3JCLElBQUlELEVBQVN3akIsRUFBeUJFLEdBQVksQ0FHakR6akIsUUFBUyxDQUFDLEdBT1gsT0FIQTJqQixFQUFvQkYsR0FBVTFqQixFQUFRQSxFQUFPQyxRQUFTd2pCLEdBRy9DempCLEVBQU9DLE9BQ2YsQ0NuQjBCd2pCLENBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9hdGVGaXNoLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2J1aWxkaW5ncy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jYW5DcmFmdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jYXBpdGFsaXplRmlyc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9nZXRDcmFmdGVkUmVzb3VyY2UuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2V0TWF0ZXJpYWwuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvaGVscGVyLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pvYlJlcXVpcmVkUG9uZGVycy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qb2JzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vYnVpbGRpbmdzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vYnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wZXJrcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3Jlc291cmNlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3NraWxscy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9tYWluLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL21ha2VWaXNpYmxlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BlcmtzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvc2F2aW5nLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NlbGVjdENvcnJlY3RQZXJrQnV0dG9uLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3N0YWdlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90b29scy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90cmFkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVCdXR0b25WaXNpYmlsaXR5LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGF0ZUZpc2ggPSBmYWxzZTtcclxuXHJcbmZ1bmN0aW9uIHNldEF0ZUZpc2goYm9vbCkge1xyXG4gICAgYXRlRmlzaCA9IGJvb2w7XHJcbiAgICByZXR1cm4gYXRlRmlzaDtcclxufVxyXG5mdW5jdGlvbiBnZXRBdGVGaXNoKCkge1xyXG4gICAgcmV0dXJuIGF0ZUZpc2g7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYXRlRmlzaCxcclxuICAgIHNldEF0ZUZpc2gsXHJcbiAgICBnZXRBdGVGaXNoXHJcbn07IiwiY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGluY3JlYXNlTWF0ZXJpYWwsIGluY3JlYXNlTWF4IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNhbkJ1eUJ1aWxkaW5nLCB1cGRhdGVTaWRlYmFyIH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IHVwZGF0ZVRvdGFsIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcblxyXG4vKiBCVUlMRElOR1MgKi9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmcgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVFZmZlY3RTdHJpbmcoYnVpbGRpbmcpIHtcclxuICAgIGxldCBlZmZlY3RQYXJ0cyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IFtyZXNvdXJjZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmVmZmVjdHMpKSB7XHJcbiAgICAgICAgLy8gZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVmZmVjdCkpIHtcclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHt2YWx1ZX0gbWF4ICR7cmVzb3VyY2V9YCk7XHJcbiAgICAgICAgLy8gQWRkIG1vcmUgY29uZGl0aW9ucyBoZXJlIGlmIHlvdSBpbnRyb2R1Y2UgbmV3IHR5cGVzIG9mIGVmZmVjdHNcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgW3Jlc291cmNlLCBib29zdF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuYm9vc3QpKSB7XHJcbiAgICAgICAgbGV0IHBlcmNlbnRhZ2VCb29zdCA9IE1hdGgucm91bmQoKGJvb3N0IC0gMSkgKiAxMDApO1xyXG4gICAgICAgIGVmZmVjdFBhcnRzLnB1c2goYCske3BlcmNlbnRhZ2VCb29zdH0lICR7cmVzb3VyY2V9IHByb2R1Y3Rpb25gKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVmZmVjdFBhcnRzLmpvaW4oJywgJyk7XHJcbn1cclxuXHJcbi8vIFVzYWdlOlxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ0tleSBcclxuICogQHBhcmFtIHtPYmplY3R9IGJ1aWxkaW5nc1xyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYXNQZXJrXHJcbiAqL1xyXG5mdW5jdGlvbiByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChidWlsZGluZ0tleSwgYnVpbGRpbmdzLCBoYXNQZXJrKSB7XHJcbiAgICBsZXQgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdLZXldO1xyXG4gICAgaWYgKGJ1aWxkaW5nICYmIGJ1aWxkaW5nLmNvc3QgJiYgYnVpbGRpbmcucmF0aW8pIHtcclxuICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1aWxkaW5nLmJhc2Vjb3N0W21hdGVyaWFsXSwgYnVpbGRpbmcucmF0aW8sIGJ1aWxkaW5nLmNvdW50KTtcclxuICAgICAgICAgICAgYnVpbGRpbmcuY29zdFttYXRlcmlhbF0gPSBNYXRoLnJvdW5kKGJ1aWxkaW5nLmJhc2Vjb3N0W21hdGVyaWFsXSAqIE1hdGgucG93KGJ1aWxkaW5nLnJhdGlvLCBidWlsZGluZy5jb3VudCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGhhc1BlcmsoJ0FyY2hpdGVjdCcpKSBidWlsZGluZy5jb3N0W21hdGVyaWFsXSAqPSAwLjc1OyAvLyAyNSUgcmVkdWN0aW9uIGZvciBhcmNoaXRlY3RzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFVwZGF0ZSB0b29sdGlwIGNvc3RcclxuICAgIGNvbnN0IG15QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBidWlsZGluZ0tleSk7XHJcbiAgICB2YXIgbmV3VGV4dCA9IGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdChidWlsZGluZy5jb3N0KTtcclxuICAgIGlmIChteUJ1dHRvbikge1xyXG4gICAgICAgIG15QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBuZXdUZXh0KTtcclxuICAgICAgICBjb25zdCBlZmZlY3RTdHJpbmcgPSBnZW5lcmF0ZUVmZmVjdFN0cmluZyhidWlsZGluZyk7XHJcbiAgICAgICAgbXlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZWZmZWN0JywgZWZmZWN0U3RyaW5nKTtcclxuXHJcbiAgICB9XHJcbiAgICBlbHNlIHsgdGhyb3cgXCJCdXR0b24gbm90IGZvdW5kIGZvciBcIiArIGJ1aWxkaW5nS2V5OyB9XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0KGNvc3QpIHtcclxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhjb3N0KS5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYCR7YW1vdW50LnRvRml4ZWQoMil9ICR7bWF0ZXJpYWx9YCkuam9pbignXFxuJyk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVCdWlsZGluZ0J1dHRvbihidWlsZGluZ0tleSwgYnVpbGRpbmdzKSB7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ0tleV07XHJcblxyXG4gICAgLy8gYnVpbGRpbmcuY29zdCA9IGJ1aWxkaW5nLmJhc2Vjb3N0O1xyXG4gICAgYnVpbGRpbmcuY29zdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYnVpbGRpbmcuYmFzZWNvc3QpKTtcclxuXHJcbiAgICBjb25zdCBjb3N0cyA9IE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmNvc3QpXHJcbiAgICAgICAgLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHttYXRlcmlhbH06ICR7YW1vdW50fWApXHJcbiAgICAgICAgLmpvaW4oJywgJyk7XHJcblxyXG4gICAgLy8gY29uc3QgaGFsZkNvc3RSZXF1aXJlbWVudCA9IE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmNvc3QpXHJcbiAgICAvLyAgICAgLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgZ2V0TWF0ZXJpYWwoJyR7bWF0ZXJpYWx9LHJlc291cmNlcycpID49ICR7TWF0aC5mbG9vcihhbW91bnQgLyAyKX1gKVxyXG4gICAgLy8gICAgIC5qb2luKCcgJiYgJyk7XHJcblxyXG4gICAgLy8gbGV0IHJlcXVpcmVtZW50U3RyaW5nID0gYHJldHVybiAke2hhbGZDb3N0UmVxdWlyZW1lbnR9YDtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgYnVpbGRpbmcgaGFzIGFuIGVmZmVjdCBvbiBjbG9uZXMgbWF4XHJcbiAgICAvLyBpZiAoYnVpbGRpbmcuZWZmZWN0cyAmJiBidWlsZGluZy5lZmZlY3RzWydjbG9uZXMnXSkge1xyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50U3RyaW5nICs9IGAgJiYgcGFzc2VkU3RhZ2UoJ2Nsb25lcycpYDtcclxuICAgIC8vIH1cclxuICAgIGNvbnN0IHJlcXVpcmVtZW50RnVuY3Rpb24gPSBjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uKGJ1aWxkaW5nLmNvc3QsIGJ1aWxkaW5nKTtcclxuXHJcbiAgICBjb25zdCBidXR0b24gPSB7XHJcbiAgICAgICAgJ2NsYXNzJzogJ3Rvb2x0aXAgJyArIGJ1aWxkaW5nS2V5LFxyXG4gICAgICAgICd0YWInOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgJ3RleHQnOiBgJHtidWlsZGluZ0tleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGJ1aWxkaW5nS2V5LnNsaWNlKDEpfWAsXHJcbiAgICAgICAgJ3Rvb2x0aXBEZXNjJzogYnVpbGRpbmdzW2J1aWxkaW5nS2V5XS50b29sdGlwRGVzYyB8fCBcIkEgbXlzdGVyaW91cyBidWlsZGluZyB3aXRoIHVudG9sZCBiZW5lZml0cy5cIixcclxuICAgICAgICAndG9vbHRpcENvc3QnOiBjb3N0cyxcclxuICAgICAgICAncmVxdWlyZW1lbnQnOiAoKSA9PiByZXF1aXJlbWVudEZ1bmN0aW9uKCksXHJcbiAgICAgICAgJ2RhdGFfYnVpbGRpbmcnOiBidWlsZGluZ0tleSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGJ1dHRvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbihjb3N0cywgYnVpbGRpbmcpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocmVzb3VyY2VzKSB7XHJcbiAgICAgICAgY29uc3QgY29zdENvbmRpdGlvbiA9IE9iamVjdC5lbnRyaWVzKGNvc3RzKVxyXG4gICAgICAgICAgICAuZXZlcnkoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPj0gTWF0aC5mbG9vcihhbW91bnQgLyAyKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNsb25lQ29uZGl0aW9uID0gIWJ1aWxkaW5nLmVmZmVjdHMgfHwgIWJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddIHx8IHBhc3NlZFN0YWdlKCdjbG9uZXMnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvc3RDb25kaXRpb24gJiYgY2xvbmVDb25kaXRpb247XHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmZvciAobGV0IGJ1aWxkaW5nS2V5IGluIGJ1aWxkaW5ncykge1xyXG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQnVpbGRpbmdCdXR0b24oYnVpbGRpbmdLZXksIGJ1aWxkaW5ncyk7XHJcbiAgICBidXR0b25zW2J1aWxkaW5nS2V5XSA9IGJ1dHRvbjtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiTWFkZSBidXR0b24gZm9yIFwiICsgYnVpbGRpbmdLZXkpO1xyXG59XHJcblxyXG5cclxuLy8gY29uc29sZS5sb2coYnV0dG9ucyk7XHJcblxyXG5mdW5jdGlvbiBnZXRCdWlsZGluZ0Nvc3QoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICByZXR1cm4gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV0uY29zdDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgY29uc29sZS5sb2coXCJCdXlpbmcgYnVpbGRpbmcgXCIgKyBidWlsZGluZ05hbWUpO1xyXG4gICAgY29uc3QgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXTtcclxuXHJcblxyXG5cclxuICAgIGlmICghY2FuQnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKSkgcmV0dXJuO1xyXG5cclxuICAgIC8vIFN1YnRyYWN0IHRoZSBjb3N0XHJcbiAgICBmb3IgKGNvbnN0IHJlc291cmNlIGluIGJ1aWxkaW5nLmNvc3QpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlJlZHVjaW5nIFwiLCByZXNvdXJjZSwgXCJieVwiLCBidWlsZGluZy5jb3N0W3Jlc291cmNlXSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaW5jcmVhc2VNYXRlcmlhbCk7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZSwgLWJ1aWxkaW5nLmNvc3RbcmVzb3VyY2VdKTtcclxuICAgIH1cclxuICAgIC8vIEFkZCB0aGUgZWZmZWN0c1xyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBidWlsZGluZy5lZmZlY3RzKSB7XHJcbiAgICAgICAgaW5jcmVhc2VNYXgocmVzb3VyY2UsIGJ1aWxkaW5nLmVmZmVjdHNbcmVzb3VyY2VdKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEFjdHVhbGx5IGJ1aWxkIHRoZSBidWlsZGluZ1xyXG4gICAgYnVpbGRpbmcuY291bnQrKztcclxuXHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcblxyXG4gICAgdXBkYXRlVG90YWwoKTtcclxuICAgIC8vIFVwZGF0ZSBidXR0b24gdGV4dFxyXG4gICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChidWlsZGluZ05hbWUsIGJ1aWxkaW5nLmNvdW50KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGNvc3Qgb2YgdGhlIGJ1aWxkaW5nXHJcbiAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChidWlsZGluZ05hbWUsIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1eU1heEJ1aWxkaW5ncyhidWlsZGluZ05hbWUpIHtcclxuICAgIHdoaWxlIChjYW5CdXlCdWlsZGluZyhidWlsZGluZ05hbWUpKSB7XHJcbiAgICAgICAgYnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChidWlsZGluZ05hbWUsIGJ1aWxkaW5nQ291bnQpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2J1aWxkaW5nTmFtZX1gKS50ZXh0Q29udGVudCA9IGAke2NhcGl0YWxpemVGaXJzdChidWlsZGluZ05hbWUpLnNwbGl0KCdfJykuam9pbignICcpfSAoJHtidWlsZGluZ0NvdW50fSlgO1xyXG5cclxufVxyXG5cclxuXHJcblxyXG5cclxuLy8gZnVuY3Rpb24gZG91YmxlU3RvcmFnZUVmZmVjdHNJZlBhc3NlZCgpIHtcclxuLy8gICAgIGlmIChwYXNzZWRTdGFnZShcImRvdWJsZVN0b3JhZ2UxXCIpKSB7XHJcbi8vICAgICAgICAgZm9yIChsZXQgYnVpbGRpbmdLZXkgaW4gYnVpbGRpbmdzKSB7XHJcbi8vICAgICAgICAgICAgIGxldCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ0tleV07XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoYnVpbGRpbmcuZWZmZWN0cykge1xyXG4vLyAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gYnVpbGRpbmcuZWZmZWN0cykge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5nLmVmZmVjdHNbbWF0ZXJpYWxdLm1heCAqPSAyO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCxcclxuICAgIGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdCxcclxuICAgIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uLFxyXG4gICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCxcclxuICAgIGJ1eU1heEJ1aWxkaW5ncyxcclxuICAgIGJ1eUJ1aWxkaW5nXHJcbn07IiwiY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmZ1bmN0aW9uIGNhbkNyYWZ0KHJlc291cmNlS2V5KSB7XHJcbiAgICBsZXQgY2FuQ3JhZnQgPSB0cnVlO1xyXG4gICAgbGV0IHJlcXVpcmVtZW50cyA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgYWxsIHJlcXVpcmVtZW50cyBhcmUgbWV0XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZvciAobGV0IG1hdCBpbiByZXF1aXJlbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdCwgcmVzb3VyY2VzKSA8IHJlcXVpcmVtZW50c1ttYXRdKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5DcmFmdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGluIGNhbGN1bGF0aW5nIHJlcXVpcmVtZW50czogJywgcmVzb3VyY2VLZXksIHJlcXVpcmVtZW50cywgZXJyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2FuQ3JhZnQ7XHJcbn1cclxuZXhwb3J0cy5jYW5DcmFmdCA9IGNhbkNyYWZ0OyIsIi8qKlxyXG4gKiBDYXBpdGFsaXplcyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nRXhhbXBsZVxyXG4gKiBAcmV0dXJucyBTdHJpbmdFeGFtcGxlXHJcbiAqL1xyXG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3Qoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xyXG59XHJcbmV4cG9ydHMuY2FwaXRhbGl6ZUZpcnN0ID0gY2FwaXRhbGl6ZUZpcnN0OyIsImNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBpbmNyZWFzZU1hdGVyaWFsLCBnZXRNYXRlcmlhbCwgY3JhZnRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuLy8gQXNzdW1pbmcgdGhlc2UgYXJlIGRlZmluZWQgZ2xvYmFsbHlcclxudmFyIG1hbnVmYWN0dXJlZE1hcCA9IHtcclxuICAgIGNsYXk6IFsnYnJpY2tzJ10sXHJcbiAgICBoZXJiczogWydtZWRpY2luZSddLFxyXG4gICAgaGlkZXM6IFsnbGVhdGhlciddLFxyXG4gICAgaXJvbjogWydzdGVlbCcsICduYWlscyddLFxyXG4gICAgb3JlOiBbJ2lyb24nLCAnc2lsdmVyJywgJ2dvbGQnXSxcclxuICAgIHNhbmQ6IFsnZ2xhc3MnLCAnY29uY3JldGUnXSxcclxuICAgIHJvY2tzOiBbJ3NsYWJzJ10sXHJcbiAgICB2aW5lczogWydyb3BlJ10sXHJcbiAgICB3b29kOiBbJ3BhcGVyJywgJ2JlYW1zJywgJ2NyYXRlcyddLFxyXG59O1xyXG5cclxudmFyIHN3aXRjaGVkTWFudWZhY3R1cmVkTWFwID0ge1xyXG4gICAgJ2JyaWNrcyc6IFsnY2xheSddLFxyXG4gICAgJ21lZGljaW5lJzogWydoZXJicyddLFxyXG4gICAgJ2xlYXRoZXInOiBbJ2hpZGVzJ10sXHJcbiAgICAnc3RlZWwnOiBbJ2lyb24nXSxcclxuICAgICduYWlscyc6IFsnaXJvbiddLFxyXG4gICAgJ2lyb24nOiBbJ29yZSddLFxyXG4gICAgJ3NpbHZlcic6IFsnb3JlJ10sXHJcbiAgICAnZ29sZCc6IFsnb3JlJ10sXHJcbiAgICAnZ2xhc3MnOiBbJ3NhbmQnXSxcclxuICAgICdjb25jcmV0ZSc6IFsnc2FuZCddLFxyXG4gICAgJ3NsYWJzJzogWydyb2NrcyddLFxyXG4gICAgJ3JvcGUnOiBbJ3ZpbmVzJ10sXHJcbiAgICAncGFwZXInOiBbJ3dvb2QnXSxcclxuICAgICdiZWFtcyc6IFsnd29vZCddLFxyXG4gICAgJ2NyYXRlcyc6IFsnd29vZCddXHJcbn07XHJcblxyXG5cclxudmFyIGFsbE1hdGVyaWFscyA9IFtdO1xyXG5PYmplY3Qua2V5cyhyZXNvdXJjZXMpLmZvckVhY2gociA9PiBhbGxNYXRlcmlhbHMucHVzaChyKSk7XHJcbk9iamVjdC5rZXlzKGNyYWZ0ZWRSZXNvdXJjZXMpLmZvckVhY2gociA9PiBhbGxNYXRlcmlhbHMucHVzaChyKSk7XHJcbmNvbnNvbGUubG9nKFwiQWxsIG1hdGVyaWFsczogXCIsIGFsbE1hdGVyaWFscyk7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVGYWN0b3J5RGl2KCkge1xyXG4gICAgY29uc3QgZmFjdG9yaWVzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY3RvcmllcycpO1xyXG4gICAgY29uc3QgZmFjdG9yeURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZmFjdG9yeURpdi5jbGFzc05hbWUgPSAnZmFjdG9yeSc7XHJcblxyXG4gICAgY29uc3QgbGVmdFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBjb25zdCByaWdodFNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xyXG5cclxuICAgIC8vIFBvcHVsYXRlIHRoZSByaWdodCBkcm9wZG93blxyXG4gICAgT2JqZWN0LmtleXMoc3dpdGNoZWRNYW51ZmFjdHVyZWRNYXApLmZvckVhY2gocmVzb3VyY2UgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBvcHRpb24udmFsdWUgPSByZXNvdXJjZTtcclxuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSByZXNvdXJjZTtcclxuICAgICAgICByaWdodFNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xyXG5cclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgcmlnaHRTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNyZXNvdXJjZS0ke3JpZ2h0U2VsZWN0LnZhbHVlfWApLnN0eWxlLmNvbG9yID0gJ3RoaXN0bGUnO1xyXG4gICAgICAgIGxlZnRUZXh0LnRleHRDb250ZW50ID0gc3dpdGNoZWRNYW51ZmFjdHVyZWRNYXBbcmlnaHRTZWxlY3QudmFsdWVdO1xyXG4gICAgICAgIC8vIGxldCBmb3VuZFJlc291cmNlID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBtYW51ZmFjdHVyZWRNYXAgdG8gZmluZCB0aGUgcmlnaHQgcmVzb3VyY2VcclxuICAgICAgICAvLyBmb3IgKGNvbnN0IFtyZXNvdXJjZSwgcHJvZHVjdHNdIG9mIE9iamVjdC5lbnRyaWVzKG1hbnVmYWN0dXJlZE1hcCkpIHtcclxuICAgICAgICAvLyAgICAgaWYgKHByb2R1Y3RzLmluY2x1ZGVzKHJpZ2h0U2VsZWN0LnZhbHVlKSkgeyAvLyBNYWtlIHN1cmUgdG8gdXNlIC52YWx1ZSBmb3IgPHNlbGVjdD4gZWxlbWVudHNcclxuICAgICAgICAvLyAgICAgICAgIGZvdW5kUmVzb3VyY2UgPSByZXNvdXJjZTtcclxuICAgICAgICAvLyAgICAgICAgIGJyZWFrOyAvLyBTdG9wIHRoZSBsb29wIG9uY2UgdGhlIHJlc291cmNlIGlzIGZvdW5kXHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIC8vIFVwZGF0ZSB0aGUgbGVmdFRleHQgaWYgdGhlIHJlc291cmNlIHdhcyBmb3VuZFxyXG4gICAgICAgIC8vIGlmIChmb3VuZFJlc291cmNlKSB7XHJcbiAgICAgICAgLy8gICAgIGxlZnRUZXh0LnRleHRDb250ZW50ID0gZm91bmRSZXNvdXJjZTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIGluaXRpYWwgb3B0aW9uIGZvciBsZWZ0IHNlbGVjdFxyXG4gICAgZnVuY3Rpb24gYWRkSW5pdGlhbE9wdGlvbihzZWxlY3RFbGVtZW50LCB0ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIGluaXRpYWxPcHRpb24udmFsdWUgPSAnJztcclxuICAgICAgICBpbml0aWFsT3B0aW9uLnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgICAgICBpbml0aWFsT3B0aW9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBpbml0aWFsT3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZENoaWxkKGluaXRpYWxPcHRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgYXJyb3cuaW5uZXJIVE1MID0gJyYjODU5NDsnOyAvLyBSaWdodCBhcnJvdyBIVE1MIGVudGl0eVxyXG5cclxuICAgIGZhY3RvcnlEaXYuYXBwZW5kQ2hpbGQobGVmdFRleHQpO1xyXG4gICAgZmFjdG9yeURpdi5hcHBlbmRDaGlsZChhcnJvdyk7XHJcbiAgICBmYWN0b3J5RGl2LmFwcGVuZENoaWxkKHJpZ2h0U2VsZWN0KTtcclxuXHJcbiAgICBhZGRJbml0aWFsT3B0aW9uKHJpZ2h0U2VsZWN0LCAnU2VsZWN0IGEgUmVzb3VyY2UnKTtcclxuXHJcbiAgICBmYWN0b3JpZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZmFjdG9yeURpdik7XHJcblxyXG59XHJcblxyXG5cclxubGV0IG1hbnVmYWN0dXJlQnVsayA9IDI7XHJcbmxldCBidWxrVXBncmFkZUNvc3QgPSAzMDtcclxubGV0IG1hbnVmYWN0dXJlQm9udXMgPSAxO1xyXG5mdW5jdGlvbiBtYW51ZmFjdHVyZShyZXNvdXJjZSwgZ29hbFJlc291cmNlKSB7XHJcbiAgICAvLyBDYWxjdWxhdGUgaG93IG1hbnkgd2UgY2FuIGFmZm9yZFxyXG4gICAgbGV0IG51bSA9IE1hdGgubWluKG1hbnVmYWN0dXJlQnVsaywgZ2V0TWF0ZXJpYWwocmVzb3VyY2UpKTtcclxuICAgIG51bSAqPSBtYW51ZmFjdHVyZUJvbnVzO1xyXG4gICAgLy8gVGhlIGZhY3RvcmllcyBnZXQgdG8gYmUgaGFsZiBwcmljZSBvZiBub3JtYWwgY3JhZnRpbmcgYmMgZWZmaWNpZW5jeVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW07ICsraSlcclxuICAgICAgICBjcmFmdFJlc291cmNlKGdvYWxSZXNvdXJjZSk7XHJcbiAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKGdvYWxSZXNvdXJjZSwgbnVtKTtcclxuICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1jcmFmdGVkUmVzb3VyY2VzW2dvYWxSZXNvdXJjZV0uY29zdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZ3JhZGVCdWxrKCkge1xyXG4gICAgbWFudWZhY3R1cmVCdWxrICs9IDI7XHJcbiAgICBidWxrVXBncmFkZUNvc3QgKz0gMTA7XHJcblxyXG4gICAgY29uc3QgdXBCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBncmFkZUJ1bGtCdXR0b24nKTtcclxuICAgIHVwQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBgJHttYW51ZmFjdHVyZUJ1bGt9IOKGkiAke21hbnVmYWN0dXJlQnVsayArIDJ9OiAke2J1bGtVcGdyYWRlQ29zdC50b0ZpeGVkKDApfSBzaWx2ZXJgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXR0ZW1wdE1hbnVmYWN0dXJlKCkge1xyXG4gICAgY29uc3QgZmFjdG9yaWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZhY3RvcnknKTtcclxuICAgIGZhY3Rvcmllcy5mb3JFYWNoKGZhY3RvcnkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBsZWZ0U2VsZWN0ID0gZmFjdG9yeS5xdWVyeVNlbGVjdG9yKCdzcGFuOmZpcnN0LWNoaWxkJyk7XHJcbiAgICAgICAgY29uc3QgcmlnaHRTZWxlY3QgPSBmYWN0b3J5LnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdDpsYXN0LWNoaWxkJyk7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBsZWZ0U2VsZWN0LnRleHRDb250ZW50O1xyXG4gICAgICAgIGNvbnN0IGdvYWxSZXNvdXJjZSA9IHJpZ2h0U2VsZWN0LnZhbHVlO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgZmFjdG9yeVwiLCByZXNvdXJjZSwgZ29hbFJlc291cmNlKTtcclxuICAgICAgICBpZiAocmVzb3VyY2UgJiYgZ29hbFJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIG1hbnVmYWN0dXJlKHJlc291cmNlLCBnb2FsUmVzb3VyY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIHdoZW5ldmVyIHlvdSB3YW50IHRvIHN0YXJ0IHRoZSBtYW51ZmFjdHVyaW5nIHByb2Nlc3NcclxuLy8gZm9yIGV4YW1wbGUsIGFmdGVyIGNyZWF0aW5nIHRoZSBmYWN0b3J5IGRpdnMgaW5pdGlhbGx5IG9yIGFmdGVyIGFkZGluZyBhIG5ldyBvbmVcclxuLy8gc3RhcnRNYW51ZmFjdHVyaW5nUHJvY2VzcygpO1xyXG52YXIgbmV3RmFjdG9yeVNpbHZlckNvc3QgPSA1MDtcclxuZnVuY3Rpb24gYnV5RmFjdG9yeSgpIHtcclxuICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5RmFjdG9yeUJ1dHRvbicpO1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdzaWx2ZXInKSA8IG5ld0ZhY3RvcnlTaWx2ZXJDb3N0KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ05vdCBlbm91Z2ggc2lsdmVyIScpOyByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFzIGVub3VnaCBzaWx2ZXIgdG8gYWZmb3JkIGZhY3RvcnlcclxuICAgIGluY3JlYXNlTWF0ZXJpYWwoJ3NpbHZlcicsIC1uZXdGYWN0b3J5U2lsdmVyQ29zdCk7XHJcbiAgICBjcmVhdGVGYWN0b3J5RGl2KCk7XHJcblxyXG4gICAgbmV3RmFjdG9yeVNpbHZlckNvc3QgKj0gMS4yO1xyXG4gICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgYCR7bmV3RmFjdG9yeVNpbHZlckNvc3QudG9GaXhlZCgyKX0gc2lsdmVyYCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY3JlYXRlRmFjdG9yeURpdixcclxuICAgIGF0dGVtcHRNYW51ZmFjdHVyZSxcclxuICAgIGJ1eUZhY3RvcnksXHJcbiAgICB1cGdyYWRlQnVsayxcclxuICAgIGFsbE1hdGVyaWFsc1xyXG59O1xyXG4iLCIvKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwsIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuXHJcbiAgICBtYXRlcmlhbCA9IG1hdGVyaWFsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICBjcmFmdGVkUmVzb3VyY2VzID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKS5jcmFmdGVkUmVzb3VyY2VzO1xyXG4gICAgICAgIC8vIGNvbnNvbGUud2FybignTWlzc2luZyBjcmFmdGVkUmVzb3VyY2VzIGRlZmluaXRpb24sIGxvYWRpbmcgZGVmYXVsdCcsIGNyYWZ0ZWRSZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlIHx8IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgY3JhZnRlZCByZXNvdXJjZTpcIiArIG1hdGVyaWFsKTsgLy8gRm9yIGRlYnVnZ2luZ1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ2V0Q3JhZnRlZFJlc291cmNlID0gZ2V0Q3JhZnRlZFJlc291cmNlO1xyXG4iLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuLy8gY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuLy8gR2V0IGZ1bmN0aW9uIGZvciBtYXRlcmlhbHNcclxuLyoqXHJcbiAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIG1hdGVyaWFsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKiBAcmV0dXJucyBWYWx1ZSBvZiBtYXRlcmlhbFxyXG4qL1xyXG5mdW5jdGlvbiBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSB7XHJcbiAgICBpZiAoIXJlc291cmNlcykgcmVzb3VyY2VzID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcztcclxuICAgIGlmIChyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG1hdGVyaWFsOlwiLCBtYXRlcmlhbCk7ICAvLyBGb3IgZGVidWdnaW5nXHJcbiAgICAgICAgcmV0dXJuIGdldENyYWZ0ZWRSZXNvdXJjZShtYXRlcmlhbCwgbnVsbCk7XHJcblxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ2V0TWF0ZXJpYWwgPSBnZXRNYXRlcmlhbDsiLCJjb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5cclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuXHJcblxyXG5sZXQgYWxsVmlzaWJsZUJ1dHRvbnMgPSBuZXcgU2V0KFsnZ2F0aGVyU3RpY2tzJ10pO1xyXG5leHBvcnRzLmFsbFZpc2libGVCdXR0b25zID0gYWxsVmlzaWJsZUJ1dHRvbnM7XHJcblxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdOYW1lIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIGNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICBsZXQgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmNvc3RbcmVzb3VyY2VdID4gZ2V0TWF0ZXJpYWwocmVzb3VyY2UsIHJlc291cmNlcykpIHtcclxuICAgICAgICAgICAgY2FuQnV5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHdlIGJ1eSAnLGJ1aWxkaW5nTmFtZSxjYW5CdXkpO1xyXG4gICAgcmV0dXJuIGNhbkJ1eTtcclxufVxyXG4vLyBDYWxjdWxhdGUgdGhlIGZpbmFsIG51bWJlciBvZiBjcmFmdGVkIGdvb2RzIGZyb20gYm9udXNlc1xyXG4vLyBAdHMtaWdub3JlXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gY2FsY0NyYWZ0Qm9udXMocmVzb3VyY2VLZXkpIHtcclxuICAgIHJldHVybiAxO1xyXG59XHJcblxyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBnZXRBZmZlY3RlZFJlc291cmNlcyhza2lsbCkge1xyXG4gICAgaWYgKHNraWxsc1tza2lsbF0pIHtcclxuICAgICAgICByZXR1cm4gc2tpbGxzW3NraWxsXS5hZmZlY3RlZFJlc291cmNlcztcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsOyAgLy8gb3IgYW4gZW1wdHkgYXJyYXkgW10sIGJhc2VkIG9uIHlvdXIgcHJlZmVyZW5jZVxyXG59XHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsIFxyXG4gKiBAcmV0dXJucyBNYXggb2YgbWF0ZXJpYWwgb3IgSW5maW5pdHlcclxuICovXHJcbmZ1bmN0aW9uIGdldE1heChtYXRlcmlhbCkge1xyXG4gICAgaWYgKHJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShtYXRlcmlhbCkpIHtcclxuICAgICAgICByZXR1cm4gcmVzb3VyY2VzW21hdGVyaWFsXS5tYXg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJTaWRlYmFyKCkge1xyXG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG4gICAgc2lkZWJhci5pbm5lckhUTUwgPSAnJztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVNpZGViYXIoKSB7XHJcbiAgICBBcnJheS5mcm9tKHJlcXVpcmUoJy4vZmFjdG9yeScpLmFsbE1hdGVyaWFscykuZm9yRWFjaChyID0+IHJlcXVpcmUoJy4vcmVzb3VyY2VzJykudXBkYXRlRGlzcGxheVZhbHVlKHIpKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtyZXNvdXJjZU5hbWUsIHJlc291cmNlQ29uZmlnXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2UtJyArIHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSByZXR1cm47XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocGFyZW50RWxlbWVudCk7XHJcbiAgICAgICAgdmFyIHNob3VsZEhpZGUgPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IGMgaW4gcGFyZW50RWxlbWVudC5jbGFzc0xpc3QpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hhcyBwYXNzZWQnLCByZXNvdXJjZU5hbWUsIHBhc3NlZFN0YWdlKGMpKTtcclxuICAgICAgICAgICAgaWYgKHJlcXVpcmUoJy4vc3RhZ2VzJykucGFzc2VkU3RhZ2UoYykpIHsgc2hvdWxkSGlkZSA9IGZhbHNlOyBjb25zb2xlLmxvZygnZG9udCBoaWRlJywgcmVzb3VyY2VOYW1lLCBjKTsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzb3VyY2VDb25maWcudmFsdWUgPiAwKSB7IHNob3VsZEhpZGUgPSBmYWxzZTsgcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNWaXNpYmxlID0gdHJ1ZTsgfVxyXG4gICAgICAgIGlmIChyZXNvdXJjZUNvbmZpZy5pc1Zpc2libGUpIHsgc2hvdWxkSGlkZSA9IGZhbHNlOyB9XHJcblxyXG4gICAgICAgIGlmIChzaG91bGRIaWRlKSB7XHJcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGlzcGxheUVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyZXNvdXJjZU5hbWUgKyAnVmFsdWUnKTtcclxuICAgICAgICBpZiAoZGlzcGxheUVsZW0pIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYWJicmV2aWF0ZU51bWJlcihyZXNvdXJjZURhdGEpKTtcclxuICAgICAgICAgICAgdmFyIGNvbG9yID0gJyNmZmYnO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlQ29uZmlnLnZhbHVlID09PSBnZXRNYXgocmVzb3VyY2VOYW1lKSkgY29sb3IgPSAnI2ZjYyc7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBlbHNlIGlmIChyZXNvdXJjZUNvbmZpZy52YWx1ZSAvIGdldE1heChyZXNvdXJjZU5hbWUpID4gLjYpIGNvbG9yID0gJyNlZWInO1xyXG5cclxuICAgICAgICAgICAgZGlzcGxheUVsZW0uaW5uZXJIVE1MID0gYDxzcGFuIHN0eWxlPVwiY29sb3I6JHtjb2xvcn1cIj4ke2FiYnJldmlhdGVOdW1iZXIocmVzb3VyY2VDb25maWcudmFsdWUpfSAvICR7YWJicmV2aWF0ZU51bWJlcihnZXRNYXgocmVzb3VyY2VOYW1lKSl9IDwvc3Bhbj5gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFiYnJldmlhdGVOdW1iZXIobnVtKSB7XHJcbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIHVuaXQpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAxMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMykgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMikgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMDApIHJldHVybiByb3VuZFRvRGVjaW1hbHModmFsdWUsIDEpICsgdW5pdDtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSkgKyB1bml0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJvdW5kVG9EZWNpbWFscyhudW1iZXIsIGRlY2ltYWxzKSB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcclxuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQobnVtYmVyICogZmFjdG9yKSAvIGZhY3RvcikudG9GaXhlZChkZWNpbWFscyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG51bSA8IDFlMykgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyhudW0sIDIpOyAvLyBJZiBsZXNzIHRoYW4gMSwwMDBcclxuICAgIGlmIChudW0gPCAxZTYpIHJldHVybiBmb3JtYXQobnVtIC8gMWUzLCAnSycpOyAvLyBUaG91c2FuZHNcclxuICAgIGlmIChudW0gPCAxZTkpIHJldHVybiBmb3JtYXQobnVtIC8gMWU2LCAnTScpOyAvLyBNaWxsaW9uc1xyXG4gICAgaWYgKG51bSA8IDFlMTIpIHJldHVybiBmb3JtYXQobnVtIC8gMWU5LCAnQicpOyAvLyBCaWxsaW9uc1xyXG4gICAgLy8gQWRkIG1vcmUgY2FzZXMgZm9yIGxhcmdlciBudW1iZXJzIGlmIG5lZWRlZFxyXG4gICAgcmV0dXJuIG51bS50b1N0cmluZygpO1xyXG59XHJcbmNvbnN0IGxldmVsVXBNZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xldmVsVXBNZXNzYWdlJyk7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVTa2lsbHMocmVzb3VyY2UsIG51bSkge1xyXG4gICAgbnVtID0gTWF0aC5hYnMobnVtKTtcclxuICAgIGlmIChyZXF1aXJlKCcuL3BvbmRlcicpLmlzUG9uZGVyZWQoJ2Zhc3RlclNraWxscycpKSBudW0gKj0gMS4wNTtcclxuICAgIC8vIFxyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgLy8gXHJcbiAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2UpKSB7XHJcbiAgICAgICAgICAgIC8vIG1heCBsZXZlbCAxMDBcclxuICAgICAgICAgICAgaWYgKHNraWxsc1tza2lsbF0ubGV2ZWwgPj0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICBza2lsbHNbc2tpbGxdLmxldmVsID0gMTAwO1xyXG4gICAgICAgICAgICAgICAgc2tpbGxzW3NraWxsXS5leHAgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHNraWxsc1tza2lsbF0uZXhwICs9IG51bSAvIE1hdGgucG93KDEuNCwgc2tpbGxzW3NraWxsXS5sZXZlbCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgc2tpbGw6XCIgKyBza2lsbCArIFwiIHRvIFwiICsgc2tpbGxzW3NraWxsXS5leHApXHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uZXhwID49IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICBza2lsbHNbc2tpbGxdLmxldmVsICs9IDE7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIHNraWxsc1tza2lsbF0uZXhwID0gMDtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTGV2ZWwgVXAhIFwiICsgc2tpbGwgKyBza2lsbHNbc2tpbGxdLmxldmVsKTtcclxuICAgICAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxVcE1lc3NhZ2UudGV4dENvbnRlbnQgPSBgTGV2ZWwgdXAhICR7c2tpbGx9IOKGkiAke3NraWxsc1tza2lsbF0ubGV2ZWx9YDtcclxuICAgICAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxVcE1lc3NhZ2UuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBIaWRlIHRoZSBtZXNzYWdlIGFmdGVyIDMgc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV2ZWxVcE1lc3NhZ2Uuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbFVwTWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIH0sIDMwMDApOyAvLyAzMDAwIG1pbGxpc2Vjb25kcyAoMyBzZWNvbmRzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHJlcXVpcmUoJy4vc3RhZ2VzJykucGFzc2VkU3RhZ2UoJ3NraWxsc1RhYmxlJykpIHtcclxuICAgICAgICBwb3B1bGF0ZVNraWxsc1RhYmxlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gZmFsc2U7XHJcblxyXG5mdW5jdGlvbiBwb3B1bGF0ZVNraWxsc1RhYmxlKCkge1xyXG4gICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tpbGxzVGFibGUnKTtcclxuXHJcbiAgICAvLyBJZiB0aGUgdGFibGUgaXMgZW1wdHksIGNyZWF0ZSB0aGUgcm93cyBhbmQgcHJvZ3Jlc3MgYmFyc1xyXG4gICAgaWYgKCFoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIHRhYmxlIGZvciB0aGUgZmlyc3QgdGltZVwiKTtcclxuICAgICAgICBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAvLyBcclxuICAgICAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICAgICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgICAgICAgICAgdHIuaWQgPSAndHItJyArIHNraWxsO1xyXG4gICAgICAgICAgICBsZXQgdGRQcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgIHRkUHJvZ3Jlc3Muc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncHJvZ3Jlc3NCYXInKTtcclxuICAgICAgICAgICAgLy8gaWYgKGlzRGFyaykge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMyMjhCMjInO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyM1MEM4NzgnO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLmhlaWdodCA9ICcyMHB4JztcclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdkYXRhLXNraWxsJywgc2tpbGwpOyAvLyBBc3NpZ24gYSBkYXRhIGF0dHJpYnV0ZSBmb3IgaWRlbnRpZmljYXRpb25cclxuXHJcbiAgICAgICAgICAgIGxldCBza2lsbFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnRleHRDb250ZW50ID0gJ1snICsgc2tpbGxzW3NraWxsXS5sZXZlbCArICddICAgJyArIHNraWxsO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc2V0QXR0cmlidXRlKCdpZCcsICdsZXZlbC0nICsgc2tpbGwpO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUubGVmdCA9ICcxMHB4JztcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTUwJSknO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA9PSAwICYmIHNraWxsc1tza2lsbF0ubGV2ZWwgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdHIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZFByb2dyZXNzLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyKTtcclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5hcHBlbmRDaGlsZChza2lsbFRleHQpO1xyXG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFByb2dyZXNzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBEaXNwbGF5IGV2ZXJ5dGhpbmcgd2UgY2FuXHJcbiAgICAgICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPiAwIHx8IHNraWxsc1tza2lsbF0ubGV2ZWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ci0nICsgc2tpbGwpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucHJvZ3Jlc3NCYXJbZGF0YS1za2lsbD1cIiR7c2tpbGx9XCJdYCk7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0Jhcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNraWxsc1tza2lsbF0uZXhwICsgJyUnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNraWxsTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGV2ZWwtXCIgKyBza2lsbCk7XHJcbiAgICAgICAgICAgICAgICBza2lsbE5hbWUudGV4dENvbnRlbnQgPSAnWycgKyBza2lsbHNbc2tpbGxdLmxldmVsICsgJ10gICAnICsgc2tpbGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0J1dHRvbklkVmlzaWJsZShpZCkge1xyXG4gICAgcmV0dXJuIGFsbFZpc2libGVCdXR0b25zLmhhcyhpZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZpc2libGVCdXR0b24oaWQpIHtcclxuICAgIGFsbFZpc2libGVCdXR0b25zLmFkZChpZCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZ2V0TWF0ZXJpYWwsXHJcbiAgICBnZXRNYXgsXHJcbiAgICB1cGRhdGVTaWRlYmFyLFxyXG4gICAgdXBkYXRlU2tpbGxzLFxyXG4gICAgcG9wdWxhdGVTa2lsbHNUYWJsZSxcclxuICAgIGNhbGNDcmFmdEJvbnVzLFxyXG4gICAgaXNCdXR0b25JZFZpc2libGUsXHJcbiAgICBzZXRWaXNpYmxlQnV0dG9uLFxyXG4gICAgY2FuQnV5QnVpbGRpbmcsXHJcbiAgICBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlLFxyXG4gICAgY2xlYXJTaWRlYmFyLFxyXG59O1xyXG5cclxuIiwiLyoqXHJcbiAqIEEgbWFwIG9mIGFsbCBqb2JzIHRoYXQgcmVxdWlyZSBhIHBvbmRlciB0byBiZSB1bmxvY2tlZFxyXG4gKlxyXG4gKiBKb2I6IFJlcXVpcmVkUG9uZGVyXHJcbiAqL1xyXG5jb25zdCBqb2JSZXF1aXJlZFBvbmRlcnMgPSB7XHJcbiAgICAndGhpbmtpbmcnOiAndGhpbmtpbmcnLFxyXG4gICAgJ2Zpc2hpbmcnOiAnZmlzaGluZycsXHJcbiAgICAnc21pdGhpbmcnOiAnbm90LXVubG9ja2FibGUnLFxyXG4gICAgJ2Zhcm1pbmcnOiAnYWdyaWN1bHR1cmUnLFxyXG4gICAgJ2NvbWJhdCc6ICdjb21iYXQnLFxyXG4gICAgJ2h1bnRpbmcnOiAnaHVudGluZydcclxufTtcclxuZXhwb3J0cy5qb2JSZXF1aXJlZFBvbmRlcnMgPSBqb2JSZXF1aXJlZFBvbmRlcnM7XHJcbiIsIi8vIEB0cy1ub2NoZWNrXHJcbi8vIERFUEVORFMgT046IHNraWxscy5qcywgcG9uZGVyLmpzXHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcblxyXG5cclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQgfSA9IHJlcXVpcmUoXCIuL3BvbmRlclwiKTtcclxuY29uc3QgeyBnZXRNYXggfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcblxyXG4vKiBKT0JTIEZVTkNUSU9OQUxJVFkgKi9cclxuXHJcblxyXG5jb25zdCBqb2JDb3VudHMgPSB7fTtcclxuZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICBqb2JDb3VudHNbc2tpbGxdID0gMDtcclxufVxyXG5cclxuXHJcblxyXG5jb25zdCBqb2JzVGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYnNUYWInKTtcclxuXHJcbk9iamVjdC5rZXlzKHNraWxscykuZm9yRWFjaChza2lsbCA9PiB7XHJcbiAgICBjb25zdCBqb2JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGpvYkRpdi5jbGFzc0xpc3QuYWRkKCdqb2ItYnV0dG9uJyk7XHJcbiAgICBqb2JEaXYuc2V0QXR0cmlidXRlKCdkYXRhLWpvYicsIHNraWxsKTtcclxuICAgIGpvYkRpdi5pZCA9ICdqb2ItYnV0dG9uLScgKyBza2lsbDtcclxuXHJcbiAgICBjb25zdCBkZWNyZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRlY3JlbWVudERpdi5jbGFzc0xpc3QuYWRkKCdidG4tZGVjcmVtZW50Jyk7XHJcbiAgICBkZWNyZW1lbnREaXYudGV4dENvbnRlbnQgPSAnLSc7XHJcbiAgICBqb2JEaXYuYXBwZW5kQ2hpbGQoZGVjcmVtZW50RGl2KTtcclxuXHJcbiAgICBjb25zdCBqb2JOYW1lU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIGpvYk5hbWVTcGFuLmNsYXNzTGlzdC5hZGQoJ2pvYi1uYW1lJyk7XHJcbiAgICBqb2JOYW1lU3Bhbi50ZXh0Q29udGVudCA9IGAke3NraWxsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc2tpbGwuc2xpY2UoMSl9OiAwYDtcclxuICAgIGpvYkRpdi5hcHBlbmRDaGlsZChqb2JOYW1lU3Bhbik7XHJcblxyXG4gICAgY29uc3QgaW5jcmVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBpbmNyZW1lbnREaXYuY2xhc3NMaXN0LmFkZCgnYnRuLWluY3JlbWVudCcpO1xyXG4gICAgaW5jcmVtZW50RGl2LnRleHRDb250ZW50ID0gJysnO1xyXG4gICAgam9iRGl2LmFwcGVuZENoaWxkKGluY3JlbWVudERpdik7XHJcblxyXG4gICAgam9ic1RhYi5hcHBlbmRDaGlsZChqb2JEaXYpO1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idG4taW5jcmVtZW50JykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGpvYlR5cGUgPSB0aGlzLmNsb3Nlc3QoJy5qb2ItYnV0dG9uJykuZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpO1xyXG4gICAgICAgIGlmIChnZXRNYXRlcmlhbCgnY2xvbmVzJywgcmVzb3VyY2VzKSA+IGdldFRvdGFsSm9icygpKSB7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSsrO1xyXG4gICAgICAgICAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKGpvYlR5cGUsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheShqb2JUeXBlKTtcclxuICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHdvcmtlcnNEaXN0cmlidXRpb24pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1kZWNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3Qgam9iVHlwZSA9IHRoaXMuY2xvc2VzdCgnLmpvYi1idXR0b24nKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgaWYgKGpvYkNvdW50c1tqb2JUeXBlXSA+IDApIHtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdLS07XHJcbiAgICAgICAgICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXRUb3RhbEpvYnMoKSB7XHJcbiAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgZm9yIChsZXQgaiBpbiBqb2JDb3VudHMpIHtcclxuICAgICAgICB0b3RhbCArPSBqb2JDb3VudHNbal07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIEdsb2JhbCBmb3Igd2hpY2ggcmVzb3VyY2UgZWFjaCBjbG9uZSBnYXRoZXJzXHJcbmxldCB3b3JrZXJzRGlzdHJpYnV0aW9uID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBkaXN0cmlidXRlV29ya2Vycyhza2lsbCwgdG90YWxXb3JrZXJzKSB7XHJcbiAgICBpZiAoIXNraWxsc1tza2lsbF0pIHJldHVybiBudWxsOyAgLy8gUmV0dXJuIG51bGwgaWYgdGhlIHNraWxsIGRvZXNuJ3QgZXhpc3RcclxuXHJcbiAgICBsZXQgYWZmZWN0ZWRSZXNvdXJjZXMgPSBza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG5cclxuICAgIC8vIEZpbHRlciBhZmZlY3RlZFJlc291cmNlcyB0byBvbmx5IGNvbnRhaW4ga2V5cyB0aGF0IGFyZSBwcmVzZW50IGluIHRoZSByZXNvdXJjZXMgbWFwXHJcbiAgICBhZmZlY3RlZFJlc291cmNlcyA9IGFmZmVjdGVkUmVzb3VyY2VzLmZpbHRlcihyZXNvdXJjZSA9PiByZXNvdXJjZSBpbiByZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIGxldCBhO1xyXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhZmZlY3RlZFJlc291cmNlcy5sZW5ndGg7IGEgPSBhZmZlY3RlZFJlc291cmNlc1tpXSkge1xyXG5cclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhhKTtcclxuICAgIC8vICAgICBpZiAoIXJlc291cmNlc1thXSkge1xyXG5cclxuICAgIC8vICAgICAgICAgY29uc3QgaW5kZXggPSBhZmZlY3RlZFJlc291cmNlcy5pbmRleE9mKGEpO1xyXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhhLCBpbmRleCk7XHJcbiAgICAvLyAgICAgICAgIGxldCB4ID0gYWZmZWN0ZWRSZXNvdXJjZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICArK2k7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gY29uc29sZS5sb2coYWZmZWN0ZWRSZXNvdXJjZXMpO1xyXG4gICAgbGV0IG51bWJlck9mUmVzb3VyY2VzID0gYWZmZWN0ZWRSZXNvdXJjZXMubGVuZ3RoO1xyXG5cclxuICAgIC8vIEluaXRpYWwgZXZlbiBkaXN0cmlidXRpb25cclxuICAgIGxldCBwZXJSZXNvdXJjZSA9IE1hdGguZmxvb3IodG90YWxXb3JrZXJzIC8gbnVtYmVyT2ZSZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIEV2ZW5seSBkaXN0cmlidXRlIHdvcmtlcnMgYW1vbmcgdGhlIGFmZmVjdGVkIHJlc291cmNlc1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2Ugb2YgYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICB3b3JrZXJzRGlzdHJpYnV0aW9uLnNldChyZXNvdXJjZSwgcGVyUmVzb3VyY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERpc3RyaWJ1dGUgYW55IHJlbWFpbmluZyB3b3JrZXJzIGR1ZSB0byByb3VuZGluZ1xyXG4gICAgbGV0IHJlbWFpbmluZ1dvcmtlcnMgPSB0b3RhbFdvcmtlcnMgLSAocGVyUmVzb3VyY2UgKiBudW1iZXJPZlJlc291cmNlcyk7XHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBvZiBhZmZlY3RlZFJlc291cmNlcykge1xyXG4gICAgICAgIGlmIChyZW1haW5pbmdXb3JrZXJzID4gMCkge1xyXG4gICAgICAgICAgICB3b3JrZXJzRGlzdHJpYnV0aW9uLnNldChyZXNvdXJjZSwgd29ya2Vyc0Rpc3RyaWJ1dGlvbi5nZXQocmVzb3VyY2UpICsgMSk7XHJcbiAgICAgICAgICAgIHJlbWFpbmluZ1dvcmtlcnMtLTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cod29ya2Vyc0Rpc3RyaWJ1dGlvbik7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRXb3JrZXJzKHJlc291cmNlTmFtZSkge1xyXG4gICAgcmV0dXJuIHdvcmtlcnNEaXN0cmlidXRpb24uZ2V0KHJlc291cmNlTmFtZSk7XHJcbn1cclxuXHJcbi8vIGNvbnN0IGFsbEpvYkJ1dHRvbmJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpvYi1idXR0b24nKTtcclxuZnVuY3Rpb24gdXBkYXRlRGlzcGxheShqb2JUeXBlKSB7XHJcbiAgICBjb25zdCB0aGlzSm9iQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmpvYi1idXR0b25bZGF0YS1qb2I9XCIke2pvYlR5cGV9XCJdYCk7XHJcbiAgICBpZiAoIXRoaXNKb2JCdXR0b24pIGNvbnNvbGUud2FybihcIkNvdWxkbid0IGZpbmQgam9iIGJ1dHRvbiBmb3Igam9iOiBcIiwgam9iVHlwZSk7XHJcbiAgICBjb25zdCBqb2JFbGVtZW50ID0gdGhpc0pvYkJ1dHRvbi5xdWVyeVNlbGVjdG9yKGAuam9iLW5hbWVgKTtcclxuICAgIGlmIChqb2JFbGVtZW50KSBqb2JFbGVtZW50LnRleHRDb250ZW50ID0gYCR7am9iVHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGpvYlR5cGUuc2xpY2UoMSl9OiAke2pvYkNvdW50c1tqb2JUeXBlXX1gO1xyXG5cclxuICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykudXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVXBkYXRlIHRvdGFsIGFzc2lnbmVkIGNsb25lcyBjb3VudGVyXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVUb3RhbCgpIHtcclxuICAgIGNvbnN0IHRvdGFsRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNqb2JzLXRvdGFsJyk7XHJcbiAgICB0b3RhbEVsZW1lbnQudGV4dENvbnRlbnQgPSBcIkFzc2lnbmVkIENsb25lczogXCIgKyBnZXRUb3RhbEpvYnMoKSArIFwiIC8gXCIgKyBnZXRNYXgoJ2Nsb25lcycpO1xyXG59XHJcblxyXG5cclxubGV0IHN0YXJ0QnV0dG9uID0gbnVsbDtcclxubGV0IGNvbm5lY3Rpb25zID0gbmV3IE1hcCgpOyAgLy8gTWFwIHRvIHN0b3JlIGNvbm5lY3Rpb25zXHJcbmxldCBtYW5hZ2VtZW50ID0geyAnY29ubmVjdGlvbnMnOiBjb25uZWN0aW9ucywgJ21pbnMnOiB7fSwgJ21heGVzJzoge30sICd0cmlnZ2Vycyc6IHt9IH07XHJcbmxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZUNhbnZhcycpO1xyXG5cclxuZnVuY3Rpb24gc2V0Q29ubmVjdGlvbnMobmV3Q29ubmVjdGlvbnMpIHtcclxuICAgIGNvbm5lY3Rpb25zID0gbmV3Q29ubmVjdGlvbnM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvbm5lY3Rpb25zKCkge1xyXG4gICAgcmV0dXJuIGNvbm5lY3Rpb25zO1xyXG59XHJcblxyXG4vLyBpZiAoY2FudmFzKSB7XHJcbi8vIEB0cy1pZ25vcmVcclxubGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4vLyBAdHMtaWdub3JlXHJcbmNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4vLyBAdHMtaWdub3JlXHJcbmNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbi8vIH1cclxuXHJcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICBsZXQgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJyk7XHJcblxyXG4vLyAgICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbi8vICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuLy8gICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsb3Nlc3QoJy5idG4tZGVjcmVtZW50JykgfHwgZS50YXJnZXQuY2xvc2VzdCgnLmJ0bi1pbmNyZW1lbnQnKSkgcmV0dXJuO1xyXG5cclxuLy8gICAgICAgICAgICAgaWYgKCFpc1BvbmRlcmVkKCdtYW5hZ2VtZW50JykpIHJldHVybjtcclxuXHJcbi8vICAgICAgICAgICAgIGxldCBqb2JCdXR0b24gPSBlLnRhcmdldC5jbG9zZXN0KCcuam9iLWJ1dHRvbicpO1xyXG5cclxuLy8gICAgICAgICAgICAgaWYgKGpvYkJ1dHRvbikge1xyXG4vLyAgICAgICAgICAgICAgICAgaWYgKCFzdGFydEJ1dHRvbikge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uID0gam9iQnV0dG9uO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpO1xyXG4vLyAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydEJ1dHRvbi5pZCAmJiBqb2JCdXR0b24uaWQpIHsgLy8gRW5zdXJlIGJvdGggSURzIGFyZSBhdmFpbGFibGVcclxuLy8gICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9ucy5zZXQoc3RhcnRCdXR0b24uaWQsIGpvYkJ1dHRvbi5pZCk7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIERyYXcgYWxsIGNvbm5lY3Rpb25zXHJcbi8vICAgICAgICAgICAgICAgICAgICAgZHJhd0FsbENvbm5lY3Rpb25zKCk7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24gPSBudWxsO1xyXG4vLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdNaXNzaW5nIElEIGZvciBvbmUgb2YgdGhlIGJ1dHRvbnM6Jywgc3RhcnRCdXR0b24sIGpvYkJ1dHRvbik7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDbGlja2VkIGVsZW1lbnQgaXMgbm90IGluc2lkZSBhIGpvYiBidXR0b246JywgZS50YXJnZXQpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgfSk7XHJcblxyXG4vLyAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcclxuLy8gICAgICAgICBpZiAoc3RhcnRCdXR0b24pIHtcclxuLy8gICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gRHJhdyBleGlzdGluZyBjb25uZWN0aW9uc1xyXG4vLyAgICAgICAgICAgICBkcmF3QWxsQ29ubmVjdGlvbnMoKTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIERyYXcgdGhlIGxpbmUgZnJvbSBzdGFydEJ1dHRvbiB0byBjdXJyZW50IG1vdXNlIHBvc2l0aW9uXHJcbi8vICAgICAgICAgICAgIGRyYXdMaW5lKHN0YXJ0QnV0dG9uLCBlLmNsaWVudFgsIGUuY2xpZW50WSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSk7XHJcbi8vIH0pO1xyXG5cclxuZnVuY3Rpb24gZHJhd0FsbENvbm5lY3Rpb25zKCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgdHJ5IHtcclxuXHJcblxyXG4gICAgICAgIGZvciAobGV0IFtvbGRJZCwgbmV3SWRdIG9mIGNvbm5lY3Rpb25zLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBsZXQgb2xkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob2xkSWQpO1xyXG4gICAgICAgICAgICBsZXQgbmV3QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobmV3SWQpO1xyXG4gICAgICAgICAgICBsZXQgcmVjdCA9IG5ld0J1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgbGV0IG5ld1ggPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjtcclxuICAgICAgICAgICAgbGV0IG5ld1kgPSAwO1xyXG4gICAgICAgICAgICBpZiAocmVjdC5ib3R0b20gPiBvbGRCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tKSBuZXdZID0gbmV3QnV0dG9uLm9mZnNldFRvcCAtIDEwO1xyXG4gICAgICAgICAgICBlbHNlIG5ld1kgPSBuZXdCdXR0b24ub2Zmc2V0VG9wICsgbmV3QnV0dG9uLm9mZnNldEhlaWdodCArIDEwO1xyXG4gICAgICAgICAgICBkcmF3TGluZShvbGRCdXR0b24sIG5ld1gsIG5ld1kpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBjb25zb2xlLndhcm4oJ2RyYXdBbGxDb25uZWN0aW9ucycsIGVycm9yKTsgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3QXJyb3doZWFkKGNvbnRleHQsIGZyb21YLCBmcm9tWSwgdG9YLCB0b1ksIHJhZGl1cykge1xyXG4gICAgbGV0IHhfY2VudGVyID0gdG9YO1xyXG4gICAgbGV0IHlfY2VudGVyID0gdG9ZO1xyXG5cclxuICAgIGxldCBhbmdsZTtcclxuICAgIGxldCB4O1xyXG4gICAgbGV0IHk7XHJcblxyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICBhbmdsZSA9IE1hdGguYXRhbjIodG9ZIC0gZnJvbVksIHRvWCAtIGZyb21YKTtcclxuICAgIHggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSkgKyB4X2NlbnRlcjtcclxuICAgIHkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkgKyB5X2NlbnRlcjtcclxuXHJcbiAgICBjb250ZXh0Lm1vdmVUbyh4LCB5KTtcclxuXHJcbiAgICBhbmdsZSArPSAoMSAvIDMpICogKDIgKiBNYXRoLlBJKTtcclxuICAgIHggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSkgKyB4X2NlbnRlcjtcclxuICAgIHkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkgKyB5X2NlbnRlcjtcclxuXHJcbiAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcclxuXHJcbiAgICBhbmdsZSArPSAoMSAvIDMpICogKDIgKiBNYXRoLlBJKTtcclxuICAgIHggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSkgKyB4X2NlbnRlcjtcclxuICAgIHkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkgKyB5X2NlbnRlcjtcclxuXHJcbiAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcclxuXHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cclxuICAgIGNvbnRleHQuZmlsbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3TGluZShzdGFydEVsZW1lbnQsIGVuZFgsIGVuZFkpIHtcclxuICAgIGxldCByZWN0ID0gc3RhcnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgLy8gbGV0IG9mZnNldCA9IE1hdGgucmFuZG9tKCkgKiAxMDAgKyAxMDBcclxuICAgIGxldCBzdGFydFggPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjsgLy8gLSBvZmZzZXQ7XHJcbiAgICAvLyBlbmRYIC09IG9mZnNldDtcclxuICAgIGxldCBzdGFydFkgPSBzY3JvbGxZICsgcmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblxyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4Lm1vdmVUbyhzdGFydFgsIHN0YXJ0WSk7XHJcbiAgICBjdHgubGluZVRvKGVuZFgsIGVuZFkpO1xyXG4gICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIC8vIERyYXcgYXJyb3cgYXQgdGhlIGVuZCBvZiB0aGUgbGluZVxyXG4gICAgZHJhd0Fycm93aGVhZChjdHgsIHN0YXJ0WCwgc3RhcnRZLCBlbmRYLCBlbmRZLCAxMCk7ICAvLyBhZGp1c3QgdGhlIGxhc3QgcGFyYW1ldGVyIGZvciBhcnJvdyBzaXplXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFySm9iQXNzaWdubWVudHMoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBjb25uZWN0aW9ucyA9IG5ldyBNYXAoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhc3NpZ25Kb2JzQmFzZWRPblJlc291cmNlcygpIHtcclxuICAgIC8vIEZvciBlYWNoIGNvbm5lY3Rpb25cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZW50cmllcyA9IGNvbm5lY3Rpb25zLmVudHJpZXMoKTtcclxuICAgICAgICBpZiAoZW50cmllcyA9PT0gdW5kZWZpbmVkKSB0aHJvdyAnRW50cmllcyBpcyB1bmRlZmluZWQnO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBbb2xkSm9iSWQsIG5ld0pvYklkXSBvZiBlbnRyaWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBvbGRKb2JCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvbGRKb2JJZCk7XHJcbiAgICAgICAgICAgIGxldCBkYXRhSm9iID0gb2xkSm9iQnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9sZElkID0gb2xkSm9iSWQucmVwbGFjZSgnam9iLWJ1dHRvbi0nLCAnJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0lkID0gbmV3Sm9iSWQucmVwbGFjZSgnam9iLWJ1dHRvbi0nLCAnJyk7XHJcbiAgICAgICAgICAgIGxldCBtYXhlZE91dCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVzb3VyY2VBcnJheSA9IHNraWxsc1tkYXRhSm9iXS5hZmZlY3RlZFJlc291cmNlcztcclxuICAgICAgICAgICAgaWYgKCFyZXNvdXJjZUFycmF5KSByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlQXJyYXkpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2YgcmVzb3VyY2VBcnJheSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlc1tyXSAhPT0gdW5kZWZpbmVkICYmIGdldE1hdGVyaWFsKHIpIDwgcmVzb3VyY2VzW3JdLm1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHIsIGdldE1hdGVyaWFsKHIpLCByZXNvdXJjZXNbcl0ubWF4KTtcclxuICAgICAgICAgICAgICAgICAgICBtYXhlZE91dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobWF4ZWRPdXQgJiYgam9iQ291bnRzW2RhdGFKb2JdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoSm9iKG9sZElkLCBuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRlV29ya2VycyhvbGRJZCwgam9iQ291bnRzW29sZElkXSk7XHJcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRlV29ya2VycyhuZXdJZCwgam9iQ291bnRzW25ld0lkXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmIChyZXNvdXJjZXNbYWZmZWN0ZWRSZXNvdXJjZV0uY3VycmVudFZhbHVlID49IHJlc291cmNlc1thZmZlY3RlZFJlc291cmNlXS5tYXhWYWx1ZSkge1xyXG4gICAgICAgICAgICAvLyAgICAgc3dpdGNoSm9iKG9sZEpvYklkLCBuZXdKb2JJZCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLndhcm4oJ3JlYXNzaWduSm9icycsIGVycm9yKTsgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc3dpdGNoSm9iKG9sZEpvYklkLCBuZXdKb2JJZCkge1xyXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzd2l0Y2hlcyB3b3JrZXJzIGZyb20gb2xkSm9iIHRvIG5ld0pvYi5cclxuICAgIC8vIERlcGVuZGluZyBvbiB5b3VyIGFwcGxpY2F0aW9uIHN0cnVjdHVyZSwgeW91IGNhbiBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbiBhY2NvcmRpbmdseS5cclxuICAgIC8vIEZvciBleGFtcGxlLCByZWR1Y2UgdGhlIGNvdW50IG9mIHdvcmtlcnMgaW4gb2xkSm9iIGFuZCBpbmNyZWFzZSBpbiBuZXdKb2IuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhgU3dpdGNoaW5nIHdvcmtlcnMgZnJvbSAke29sZEpvYklkfSB0byAke25ld0pvYklkfWApO1xyXG5cclxuICAgIGxldCB3b3JrZXJzID0gam9iQ291bnRzW29sZEpvYklkXTtcclxuICAgIGpvYkNvdW50c1tvbGRKb2JJZF0gPSAwO1xyXG4gICAgam9iQ291bnRzW25ld0pvYklkXSArPSB3b3JrZXJzO1xyXG4gICAgdXBkYXRlRGlzcGxheShvbGRKb2JJZCk7XHJcbiAgICB1cGRhdGVEaXNwbGF5KG5ld0pvYklkKTtcclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2xlYXJKb2JBc3NpZ25tZW50cyxcclxuICAgIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMsXHJcbiAgICBzd2l0Y2hKb2IsXHJcbiAgICBkcmF3QWxsQ29ubmVjdGlvbnMsXHJcbiAgICBnZXRXb3JrZXJzLFxyXG4gICAgdXBkYXRlVG90YWwsXHJcbiAgICBzZXRDb25uZWN0aW9ucyxcclxuICAgIGdldENvbm5lY3Rpb25zLFxyXG4gICAgZGlzdHJpYnV0ZVdvcmtlcnMsXHJcbiAgICB1cGRhdGVEaXNwbGF5LFxyXG4gICAgam9iQ291bnRzXHJcbn07IiwiY29uc3QgYnVpbGRpbmdzID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSE9VU0lOR1xyXG4gICAgICovXHJcbiAgICBcInNoZWx0ZXJcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcInN0aWNrc1wiOiAzMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiY2xvbmVzXCI6IDEgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGb3Igd2hlbiB5b3UgbmVlZCBhIGhvbWUgYXdheSBmcm9tIGhvbWUuXCJcclxuICAgIH0sXHJcbiAgICAnaHV0Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICdzdGlja3MnOiA1MCwgJ3ZpbmVzJzogMzAgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHsgJ2Nsb25lcyc6IDEgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0EgY296eSwgaWR5bGxpYyBjaHVuayBvZiB3b29kLidcclxuICAgIH0sXHJcbiAgICBcImhvdXNlXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJ3b29kXCI6IDUwLCBcInJvY2tzXCI6IDIwLCAnZmlzaCc6IDEwIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJjbG9uZXNcIjogMiB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS40LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkV2ZXJ5IGNsb25lJ3MgZHJlYW0uIE1pbnVzIHRoZSB3aGl0ZSBwaWNrZXQgZmVuY2UuXCJcclxuICAgIH0sXHJcbiAgICAndGVlcGVlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICd3b29kJzogMTAsICdoaWRlcyc6IDI1LCAnZmlzaCc6IDE1IH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnY2xvbmVzJzogMiB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldyYXAgc29tZSBoaWRlcyBhcm91bmQgc29tZSB3b29kIGFuZCBjYWxsIGl0IGEgaG9tZS5cIlxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNUT1JBR0VcclxuICAgICAqL1xyXG4gICAgXCJzaGVkXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJ3b29kXCI6IDQwIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJ3b29kXCI6IDUwLCBcInN0aWNrc1wiOiA1MCwgXCJyb2Nrc1wiOiAyMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4xLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoZSB1bHRpbWF0ZSBzdG9yYWdlIHNvbHV0aW9uIGZvciB0aGUgcGFjayByYXQgaW4geW91LlwiXHJcbiAgICB9LFxyXG4gICAgJ3N0b2NrcGlsZSc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyByb2NrczogMzAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7IHdvb2Q6IDEwMCB9LFxyXG4gICAgICAgIHJhdGlvOiAxLjEsXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkNodWNrIGEgYnVuY2ggb2YgbG9ncyBpbiBhIHBpbGUsIHdoYXQgY291bGQgaGFwcGVuP1wiXHJcbiAgICB9LFxyXG4gICAgXCJkcnlpbmdfcmFja3NcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcInN0aWNrc1wiOiAzMCwgXCJmaXNoXCI6IDUgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcImZpc2hcIjogMjAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBaXIgZHJ5aW5nOiBOYXR1cmUncyB3YXkgb2YgcHJlc2VydmluZyBmb29kLlwiXHJcbiAgICB9LFxyXG4gICAgXCJ3b3Jrc2hvcFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA0MCwgXCJzdGlja3NcIjogMjAsIFwicm9ja3NcIjogMTAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAncm9ja3MnOiA1MCwgJ29yZSc6IDUwLCAnc2FuZCc6IDEwMCwgJ2NsYXknOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkRJWSdzIGRyZWFtIGRlc3RpbmF0aW9uLlwiXHJcbiAgICB9LFxyXG4gICAgJ2Jhcm4nOiB7XHJcbiAgICAgICAgJ2Jhc2Vjb3N0JzogeyAnd29vZCc6IDMwLCAnd2hlYXQnOiA1IH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICd3aGVhdCc6IDEwMCwgJ2JlcnJpZXMnOiA0MCwgJ3ZpbmVzJzogNDAgfSxcclxuICAgICAgICAnYm9vc3QnOiB7fSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgICdyYXRpbyc6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJIYXksIHdoYXQncyBpbiB0aGF0IGJ1aWxkaW5nP1wiXHJcbiAgICB9LFxyXG4gICAgJ2hlcmJhbGlzdF9odXQnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3N0aWNrcyc6IDUwLCAndmluZXMnOiA1MCwgJ2hlcmJzJzogNTAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdoZXJicyc6IDEwMCwgJ3ZpbmVzJzogMTAwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ2hlcmJzJzogMS4yLCB2aW5lczogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHBsYWNlIGZvciBicmV3aW5nIGFuZCBzdGV3aW5nLlwiXHJcbiAgICB9LFxyXG4gICAgXCJiYWtlcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogODAsXHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnd2hlYXQnOiAyMDAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMjUsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkZyZXNobHkgYmFrZWQgYnJlYWQsIGhvdCBhbmQgcmVhZHkuXCJcclxuICAgIH0sXHJcbiAgICBcImFuaW1hbF9wZW5cIjoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIHN0aWNrczogNTAsXHJcbiAgICAgICAgICAgIGdhbWU6IDIwLFxyXG4gICAgICAgICAgICBmaXNoOiAyNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnZ2FtZSc6IDEwMCwgJ2hpZGVzJzogMzAgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHBsYWNlIHRvIHB1dCB0aG9zZSBsZXNzZXIgdGhhbiB5b3UuXCJcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUFJPRFVDVElPTiBCT09TVFxyXG4gICAgICovXHJcbiAgICBcImdyb3ZlXCI6IHtcclxuICAgICAgICBiYXNlY29zdDogeyAnd29vZCc6IDIwLCAndmluZXMnOiAyMCB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICd3b29kJzogMS4wNSwgJ3N0aWNrcyc6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBuaWNlIGdyb3ZlIG9mIHRyZWVzIHRvIGZpbmQgd29vZCBmYXN0ZXIuXCJcclxuICAgIH0sXHJcbiAgICBcImZpc2hfdHJhcHNcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvcGVcIjogNDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJmaXNoXCI6IDEuMDVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGaXNoaW5nIG1hZGUgZWFzeS4gTm8gcGF0aWVuY2UgcmVxdWlyZWQuXCJcclxuICAgIH0sXHJcbiAgICBcIm1pbmVcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDMwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJvcmVcIjogMS4wNSwgJ3JvY2tzJzogMS4wNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkRpZyBkZWVwIGFuZCBmaW5kIHlvdXIgaW5uZXIgb3JlLlwiXHJcbiAgICB9LFxyXG4gICAgXCJjYW1wZmlyZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMjAsXHJcbiAgICAgICAgICAgIFwic3RpY2tzXCI6IDIwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7ICdhbGwnOiAxLjA1IH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldoZXJlIHN0b3JpZXMgYXJlIHRvbGQgYW5kIG1hcnNobWFsbG93cyBhcmUgdG9hc3RlZC5cIlxyXG4gICAgfSxcclxuICAgIFwibHVtYmVyX3lhcmRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMjAwLFxyXG4gICAgICAgICAgICBcImlyb25cIjogMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMS4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV29vZCB5b3UgbGlrZSBzb21lIG1vcmUgd29vZD9cIlxyXG4gICAgfSxcclxuICAgIFwic3RvbmVfcXVhcnJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA1MCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDIwLFxyXG4gICAgICAgICAgICBcInJvcGVcIjogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJSb2NrIG9uIHdpdGggeW91ciBiYWQgc2VsZiFcIlxyXG4gICAgfSxcclxuICAgIFwiZmlzaGVyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA0MCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDE1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiZmlzaFwiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGaXNoIGFyZSBmcmllbmRzLiBBbmQgZm9vZC5cIlxyXG4gICAgfSxcclxuICAgIFwidmluZXlhcmRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMjAsXHJcbiAgICAgICAgICAgIFwidmluZXNcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ2aW5lc1wiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGb3IgdGhlIGZpbmVzdCB2aW5lcy4gV2hhdCBlbHNlIHdvdWxkIGl0IGdyb3c/XCJcclxuICAgIH0sXHJcbiAgICBcImZvcmdlXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA0MCxcclxuICAgICAgICAgICAgXCJvcmVcIjogMjAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJvcmVcIjogMS4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTWVsdCwgbW9sZCwgYW5kIG1ha2UgbWFydmVsb3VzIG1ldGFscy5cIlxyXG4gICAgfSxcclxuICAgICd3YXRlcl93ZWxsJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHtcclxuICAgICAgICAgICAgJ3JvY2tzJzogMzAsXHJcbiAgICAgICAgICAgICdyb3BlJzogMSxcclxuICAgICAgICAgICAgJ3dvb2QnOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICdmcmVzaHdhdGVyJzogMzAgfSxcclxuICAgICAgICAnYm9vc3QnOiB7XHJcbiAgICAgICAgICAgICdmcmVzaHdhdGVyJzogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgICdyYXRpbyc6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGcmVzaCB3YXRlciBvbiBkZW1hbmQhXCJcclxuICAgIH0sXHJcbiAgICAndG93ZXInOiB7XHJcbiAgICAgICAgJ2Jhc2Vjb3N0Jzoge1xyXG4gICAgICAgICAgICAnYnJpY2tzJzogMjAsXHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDEwLFxyXG4gICAgICAgICAgICAnd29vZCc6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHt9LFxyXG4gICAgICAgICdib29zdCc6IHsgJ2hpZGVzJzogMS4wNSwgJ2dhbWUnOiAxLjEgfSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2VlIHRoaW5ncyBmcm9tIGFmYXIuXCJcclxuICAgIH0sXHJcbiAgICBcInRhbm5lcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogNjAsXHJcbiAgICAgICAgICAgIFwiaGlkZXNcIjogNDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7ICdoaWRlcyc6IDUwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiaGlkZXNcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIlRyZWF0IGhpZGVzIHRvIG1ha2UgcXVhbGl0eSBsZWF0aGVyLlwiXHJcbiAgICB9LFxyXG4gICAgXCJtYXJrZXRwbGFjZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwiYmVycmllc1wiOiA0MCxcclxuICAgICAgICAgICAgXCJnb2xkXCI6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJiZXJyaWVzXCI6IDEuMixcclxuICAgICAgICAgICAgXCJoZXJic1wiOiAxLjIsXHJcbiAgICAgICAgICAgICdvcmUnOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMjUsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkEgYnVzdGxpbmcgaHViIG9mIHRyYWRlIGFuZCBiYXJ0ZXIuXCJcclxuICAgIH0sXHJcbiAgICBcIndpbmRtaWxsXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDEwMCxcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA2MCxcclxuICAgICAgICAgICAgXCJ3aGVhdFwiOiA1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIndoZWF0XCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJHcmluZCBncmFpbnMgZWZmaWNpZW50bHkgd2l0aCB3aW5kIHBvd2VyLlwiXHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQT05ERVJcclxuICAgICAqL1xyXG4gICAgJ3RlbGVzY29wZSc6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBnbGFzczogMSxcclxuICAgICAgICAgICAgd29vZDogMTAsXHJcbiAgICAgICAgICAgIHBvbmRlcjogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7IHBvbmRlcjogMS4wNSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTG9vaywgdXAgaW4gdGhlIHNreSEgSXQncyBhIHN0YXIhXCJcclxuICAgIH0sXHJcbiAgICBcIm9ic2VydmF0b3J5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJicmlja3NcIjogNzAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAzMCxcclxuICAgICAgICAgICAgXCJnbGFzc1wiOiA1MCxcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMS4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU3RhcmdhemluZyBoYXMgbmV2ZXIgYmVlbiBzby4uLiBwcm9kdWN0aXZlP1wiXHJcbiAgICB9LFxyXG4gICAgXCJsaWJyYXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDcwLFxyXG4gICAgICAgICAgICBcInBhcGVyXCI6IDI1LFxyXG4gICAgICAgICAgICBcImdsYXNzXCI6IDUsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDI1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcInBvbmRlclwiOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJLbm93bGVkZ2UgaXMgcG93ZXIuIEFuZCBhIGZpcmUgaGF6YXJkIGlmIG5vdCBzdG9yZWQgcHJvcGVybHkuXCJcclxuICAgIH0sXHJcbiAgICBcImRlc2tcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTUsXHJcbiAgICAgICAgICAgIFwic3RpY2tzXCI6IDIwLFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJwb25kZXJcIjogMzAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHsgXCJwb25kZXJcIjogMS4wNSB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHdyaXRlcidzIGJsb2NrIGlzIG5vIG1hdGNoIGZvciBhcm1vci1waWVyY2luZyBwZW5jaWxzIVwiXHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRCdWlsZGluZ0NvdW50KGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgcmV0dXJuIGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdLmNvdW50O1xyXG59XHJcbmZ1bmN0aW9uIGdldEJvb3N0KGJ1aWxkaW5nTmFtZSwgcmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG4gICAgaWYgKGJ1aWxkaW5nICYmIGJ1aWxkaW5nLmJvb3N0KSB7XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmJvb3N0W3Jlc291cmNlXSkgcmV0dXJuIGJ1aWxkaW5nLmJvb3N0W3Jlc291cmNlXTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcuYm9vc3RbJ2FsbCddKSByZXR1cm4gYnVpbGRpbmcuYm9vc3RbJ2FsbCddO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGJ1aWxkaW5nczogYnVpbGRpbmdzLFxyXG4gICAgZ2V0QnVpbGRpbmdDb3VudCxcclxuICAgIGdldEJvb3N0XHJcbn07IiwiY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4uL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgaGFzVG9vbCB9ID0gcmVxdWlyZSgnLi4vdG9vbHMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcblxyXG4vKiBCVVRUT05TICovXHJcbmNvbnN0IGJ1dHRvbnMgPSB7XHJcblxyXG4gICAgLyogUFJPRFVDVElPTiBUQUIgKi9cclxuICAgICdnYXRoZXJTdGlja3MnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0YXJ0VmlzaWJsZScsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTgJ0gR2F0aGVyIFN0aWNrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGaXZlLCBTaXgsIFBpY2sgdXAgc3RpY2tzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZSAvLyBUaGlzIGJ1dHRvbiBpcyBhbHdheXMgdmlzaWJsZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJWaW5lcyc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgc3RpY2snLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk42vIEdhdGhlciBWaW5lcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTb21lIHZpbmVzIGFyZSBydWJiZXJ5LCBvdGhlcnMgYXJlIGd1bW15LicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3N0aWNrcycsIHJlc291cmNlcykgPj0gMTAgfHwgcGFzc2VkU3RhZ2UoJ3ZpbmVzJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyUm9ja3MnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0aWNrJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOKlvCTgKkgR2F0aGVyIFJvY2tzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ05vdCBhIHNpbmdsZSB3aW5kb3cgdG8gdGhyb3cgdGhlbSB0aHJvdWdoLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCB8fCBwYXNzZWRTdGFnZSgncm9ja3MnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJGaXNoJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBmaXNoaW5nJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOGnSDwk4afIPCThp4gR28gRmlzaCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdHb3QgYW55IHR1bmE/JyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBoYXNUb29sKCdTcGVhcicpIHx8IGhhc1Rvb2woXCJGaXNoaW5nIFJvZFwiKSB8fCBwYXNzZWRTdGFnZSgnZmlzaGluZycpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlcldvb2QnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd3b29kVG9nZ2xlIHdvb2QnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4yPIENob3AgV29vZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBbiBheGUgaHVydHMgd2F5IGxlc3MgdGhhbiB1c2luZyB5b3VyIGhhbmRzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBoYXNUb29sKCdBeGUnKSB8fCBwYXNzZWRTdGFnZSgnd29vZCcpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlck9yZSc6IHtcclxuICAgICAgICBcImNsYXNzXCI6IFwidG9vbHRpcCBcIixcclxuICAgICAgICBcInRhYlwiOiBcInByb2R1Y3Rpb25cIixcclxuICAgICAgICBcInRleHRcIjogXCLwk4m4IE1pbmUgT3JlXCIsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkRpZ2d5IERpZ2d5IEhvbGVcIixcclxuICAgICAgICBcInRvb2x0aXBDb3N0XCI6IFwiRnJlZVwiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBoYXNUb29sKCdQaWNrYXhlJykgfHwgcGFzc2VkU3RhZ2UoJ29yZScpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgLyogVEFCUyAqL1xyXG4gICAgJ3Byb2R1Y3Rpb25UYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnUHJvZHVjdGlvbicsXHJcbiAgICAgICAgc2hvd1RhYjogJ3Byb2R1Y3Rpb25UYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgndGFiLWJ1dHRvbicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2V4cGVyaW1lbnRUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnRXhwZXJpbWVudCcsXHJcbiAgICAgICAgc2hvd1RhYjogJ2V4cGVyaW1lbnRUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgndGFiLWJ1dHRvbicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ3BvbmRlclRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdQb25kZXInLFxyXG4gICAgICAgIHNob3dUYWI6ICdwb25kZXJUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2pvYnNUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnSm9icycsXHJcbiAgICAgICAgc2hvd1RhYjogJ2pvYnNUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnam9icy10YWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdza2lsbHNUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnU2tpbGxzJyxcclxuICAgICAgICBzaG93VGFiOiAnc2tpbGxzVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3NraWxsc1RhYmxlJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAncGVya3NUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnUGVya3MnLFxyXG4gICAgICAgIHNob3dUYWI6ICdwZXJrc1RhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwZXJrc1RhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2ZhY3RvcnlUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnRmFjdG9yaWVzJyxcclxuICAgICAgICBzaG93VGFiOiAnZmFjdG9yeVRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdmYWN0b3J5VGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgLyogUE9OREVSIFRBQiAqL1xyXG4gICAgJ2dhdGhlclBvbmRlcic6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAnLFxyXG4gICAgICAgIHRleHQ6ICdQb25kZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnV3JhcCB5b3VyIGhlYWQgYXJvdW5kIHRoZSBncmVhdCBteXN0ZXJpZXMnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnVGltZScsXHJcbiAgICAgICAgdGFiOiAncG9uZGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYnV0dG9uczogYnV0dG9uc1xyXG59OyIsIi8qIENSQUZUSU5HIFJFU09VUkNFUyAqL1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuLi9zdGFnZXMnKTtcclxuXHJcblxyXG5jb25zdCBjcmFmdGVkUmVzb3VyY2VzID0ge1xyXG4gICAgJ3NoYXJwcm9ja3MnOiB7XHJcbiAgICAgICAgdGV4dDogJ1NoYXJwIFJvY2tzJyxcclxuICAgICAgICBpZDogJ2NyYWZ0U2hhcnByb2NrcycsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAncm9ja3MnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRNYXRlcmlhbCgncm9ja3MnLCByZXNvdXJjZXMpID49IDUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdDcmFmdCBhIHJvY2sgdXNpbmcgbm90aGluZyBidXQgcm9ja3MhJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1JvY2tzOiA1JyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ3JvcGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFJvcGUnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3ZpbmVzJzogMyB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAzLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnVGhlIGJhc2lzIG9mIGF0dGFjaGluZyB0aGluZ3MgdG8gb3RoZXIgdGhpbmdzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdWaW5lczogMycsXHJcbiAgICAgICAgY2xhc3M6ICdyb3BlJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdoYW5kbGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEhhbmRsZScsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc3RpY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0Q3JhZnRlZFJlc291cmNlKCdzaGFycFJvY2tzJykgPj0gMSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NoZWFyIG9mZiB0aGF0IGJhcmsgdG8gaG9sZCBpdCBiZXR0ZXInLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU2hhcnAgUm9ja3M6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAnY3JhZnRSb2NrcydcclxuICAgICAgICAvLyB0b29sOiAnU2hhcnAgUm9jaydcclxuICAgIH0sXHJcbiAgICAnc3RhZmYnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFN0YWZmJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdoYW5kbGUnOiAyLCAncm9wZSc6IDEgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnaGFuZGxlJykgPj0gMSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1N0aWNrIHNvbWUgc2hlYXJlZCBzdGlja3MgdG9nZXRoZXInLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnSGFuZGxlczogMicsXHJcbiAgICAgICAgY2xhc3M6ICdyb3BlJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdmaXNoaW5ncm9kJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRGaXNoaW5ncm9kJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdzdGFmZic6IDEsICdyb3BlJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ2Zpc2hpbmcnKSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0Egd2VhcG9uIGZlYXJlZCBieSB1bmRlcndhdGVyIGxpZmUnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ3JvcGUnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ3NwZWFyJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRTcGVhcicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDoge1xyXG4gICAgICAgICAgICAnc3RhZmYnOiAxLFxyXG4gICAgICAgICAgICAnc2hhcnBSb2Nrcyc6IDEsXHJcbiAgICAgICAgICAgICdyb3BlJzogMSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0Q3JhZnRlZFJlc291cmNlKCdzdGFmZicpID49IDEsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIGxvbmcgYW5kIHBvaW50eSBzdGljaycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTdGFmZnM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnYXhlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRBeGUnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ2hhbmRsZSc6IDEsICdyb3BlJzogMSwgJ3NoYXJwcm9ja3MnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRDcmFmdGVkUmVzb3VyY2UoJ3NwZWFyJykgPj0gMSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1B1dCBhIHJvY2sgc3RyYWlnaHQgdGhyb3VnaCB0aGF0IGhhbmRsZScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTcGVhcnM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAncGlja2F4ZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0UGlja2F4ZScsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDoge1xyXG4gICAgICAgICAgICAnaGFuZGxlJzogMSxcclxuICAgICAgICAgICAgJ3NoYXJwUm9ja3MnOiAzLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnYXhlJykgPj0gMSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NhZGx5IG5vdCBtYWRlIG9mIGRpYW1vbmRzJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0F4ZXM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgIH0sXHJcblxyXG4gICAgJ2dsYXNzJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRHbGFzcycsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc2FuZCc6IDEwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnWW91IGNhbiBzZWUgcmlnaHQgdGhyb3VnaCBpdCEnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZShcImdsYXNzQmxvd2luZ1wiKVxyXG4gICAgfSxcclxuICAgICdwYXBlcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0UGFwZXInLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3dvb2QnOiAxMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ091dHNvdXJjZSB5b3VyIG1lbW9yeScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwYXBlcicpLFxyXG4gICAgfSxcclxuICAgICdnb2xkJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRHb2xkJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiAxMDAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdtZXRhbFdvcmtpbmcnKSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGVyZSdzIHNvbWUgeWVsbG93IGJpdHMgaW4gdGhpcyBvcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdtZXRhbFdvcmtpbmcnXHJcbiAgICB9LFxyXG4gICAgJ2lyb24nOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdElyb24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ29yZSc6IDIwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnbWV0YWxXb3JraW5nJyksXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHN0dXJkeS1sb29raW5nIGJpdHMgaW4gdGhpcyBvcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdtZXRhbFdvcmtpbmcnXHJcbiAgICB9LFxyXG4gICAgJ3NpbHZlcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0U2lsdmVyJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiA1MCB9LFxyXG5cclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdtZXRhbFdvcmtpbmcnKSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGVyZSdzIHNvbWUgc2hpbnkgZ3JheSBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdicmlja3MnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEJyaWNrcycsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnY2xheSc6IDE1IH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRNYXRlcmlhbCgnY2xheScsIHJlc291cmNlcykgPiA1LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkxlYXZlIHNvbWUgY2xheSBieSB0aGUgZmlyZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJ1xyXG4gICAgfSxcclxuICAgICdzdGVlbCc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiA1IH0gfSxcclxuICAgICdiZWFtcyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3dvb2QnOiAxMCB9IH0sXHJcbiAgICAnY3JhdGVzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IDE1IH0gfSxcclxuICAgICduYWlscyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiAxIH0gfSxcclxuICAgICdzbGFicyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3JvY2tzJzogMjAgfSB9LFxyXG4gICAgJ21lZGljaW5lJzogeyB2YWx1ZTogMCwgY29zdDogeyAnaGVyYnMnOiA1MCB9IH0sXHJcbiAgICAnbGVhdGhlcic6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2hpZGVzJzogMTAgfSB9LFxyXG4gICAgJ2NvbmNyZXRlJzogeyB2YWx1ZTogMCwgY29zdDogeyAnc2FuZCc6IDMyIH0gfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZChpZCkge1xyXG4gICAgZm9yIChsZXQgYyBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXNbY10uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmFmdGVkUmVzb3VyY2VzW2NdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyhjb25maWcpIHtcclxuICAgIGZvciAobGV0IGsgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGspO1xyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW2tdLmlkID09PSBjb25maWcuaWQpIHJldHVybiBrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY3JhZnRlZFJlc291cmNlcyxcclxuICAgIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQsXHJcbiAgICBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZ1xyXG59OyIsIlxyXG5cclxuLyoqXHJcbiAqIFRpZXIgMSAoNDAwIHBvbmRlcik6XHJcbiAqIEx1bWJlcmphY2tcclxuICogICsyNSUgd29vZCBwcm9kdWN0aW9uXHJcbiAqICArMjUlIHN0aWNrcyBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBNaW5lclxyXG4gKiAgKzI1JSBzdG9uZSAmIG9yZSBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBCb3RhbmlzdFxyXG4gKiAgKzI1JSB2aW5lcyAmIGhlcmJzICYgd2hlYXQgcHJvZHVjdGlvblxyXG4gKiBcclxuICogTGVhZGVyXHJcbiAqICA1MCUgY2xvbmUgZWZmZWN0aXZlbmVzc1xyXG4gKiBcclxuICogQXJjaGl0ZWN0XHJcbiAqICAtMjUlIGJ1aWxkaW5nIGNvc3RcclxuICogXHJcbiAqIFxyXG4gKiBUaWVyIDIgKDE1MDAgcG9uZGVyKTpcclxuICogVGhpbmtlclxyXG4gKiAgKzUwJSBwb25kZXIgcHJvZHVjdGlvbiBhbmQgc3RvcmFnZVxyXG4gKiAgLTI1JSBwb25kZXIgY29zdFxyXG4gKiBcclxuICogR2VuZXJhbFxyXG4gKiAgKzUwJSBjb21iYXQgc3RyZW5ndGhcclxuICogICsyNSUgY2xvbmUgZWZmZWN0aXZlbmVzc1xyXG4gKiBcclxuICogTWVyY2hhbnRcclxuICogIC0yNSUgdHJhZGUgcHJpY2VcclxuICogICsyNSUgY2hhbmNlIG9mIHJhcmUgdHJhZGVcclxuICogXHJcbiAqIEdlbmVyYWxpc3RcclxuICogICsxMCUgZ2xvYmFsIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIFNwZWNpYWxpc3RcclxuICogICsxMDAlIHNraWxsIGdhaW5cclxuICogICsxMCUgc2tpbGwgYm9udXMgdG8gcmVzb3VyY2VzXHJcbiAqIFxyXG4gKi9cclxuY29uc3QgcGVya3MgPSB7XHJcbiAgICAndGllcjEnOiBbJ0x1bWJlcmphY2snLCAnTWluZXInLCAnQm90YW5pc3QnLCAnTGVhZGVyJywgJ0FyY2hpdGVjdCddLFxyXG4gICAgJ3RpZXIyJzogWydUaGlua2VyJywgJ0dlbmVyYWwnLCAnTWVyY2hhbnQnLCAnR2VuZXJhbGlzdCcsICdTcGVjaWFsaXN0J11cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcGVya3M6IHBlcmtzXHJcbn0iLCJsZXQgcG9uZGVycyA9IHtcclxuICAgICdwb25kZXIxJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUG9uZGVyMScsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAgfSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5rIEhhcmRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG5cclxuICAgIH0sXHJcbiAgICAnam9icy10YWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJKb2JzLXRhYicsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMjAgfSxcclxuICAgICAgICB0ZXh0OiBcIlVuZGVyc3RhbmQgQ2xvbmluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnV2h5IGFyZSB0aGVyZSB0d28gb2YgeW91PycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTYW5pdHkgKDIwIFBvbmRlciknLFxyXG5cclxuICAgIH0sXHJcbiAgICAnc2tpbGxzVGFibGUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJTa2lsbHNUYWJsZScsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNDAgfSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJZb3UncmUgc3RhcnRpbmcgdG8gbGVhcm4gdGhpbmdzLCByaWdodD9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIk5vdGljZSBJbXByb3ZlbWVudFwiXHJcbiAgICB9LFxyXG4gICAgJ2Zpc2hpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGaXNoaW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MCwgJ2Zpc2gnOiA1MCB9LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldoYXQgaWYuLi4geW91ciBjbG9uZXMgY291bGQgZ28gZmlzaGluZz9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIkZpc2hpbmcgSm9iXCJcclxuICAgIH0sXHJcbiAgICAvLyAnbWljcm9tYW5hZ2VtZW50Jzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyTWljcm9tYW5hZ2VtZW50JyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAsICdjbG9uZXMnOiA1IH0sXHJcbiAgICAvLyAgICAgdGV4dDogXCJNaWNyb21hbmFnZW1lbnRcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJZb3UgbWFuYWdlZCB0byBtYWtlIGNsb25lcyBtYW5hZ2UgZWFjaCBvdGhlci5cIlxyXG4gICAgLy8gfSxcclxuICAgICdmYXN0ZXJTa2lsbHMnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYXN0ZXJTa2lsbHMnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDgwIH0sXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJTa2lsbHMgSVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoaW5rIFNtYXJ0ZXIuIDUlIGJvbnVzIHRvIHNraWxsIGV4cFwiXHJcbiAgICB9LFxyXG4gICAgJ3RoaW5raW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyVGhpbmtpbmcnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE1MCB9LFxyXG4gICAgICAgIHRleHQ6IFwiVGhpbmtpbmcgSm9iXCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTGV0IHlvdXIgY2xvbmVzIHN0YXJ0IHRoaW5raW5nIGZvciB0aGVtc2VsdmVzLlwiXHJcblxyXG4gICAgfSxcclxuICAgICdmYXN0ZXJSZXNvdXJjZUdhaW4nOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYXN0ZXJSZXNvdXJjZUdhaW4nLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDEyMCB9LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiUHJvZHVjdGl2aXR5IElcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiA1JSBib251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgIH0sXHJcbiAgICAvLyAnbWV0YWxXb3JraW5nJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyTWV0YWxXb3JraW5nJyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIk1ldGFsIFdvcmtpbmdcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJTdGFydCBwcm9jZXNzaW5nIHRoYXQgb3JlXCIsXHJcbiAgICAvLyAgICAgLy8gY29zdDogW3sgbWF0ZXJpYWw6ICdwb25kZXInLCBhbW91bnQ6IDEwMCB9LCB7IG1hdGVyaWFsOiAnb3JlJywgYW1vdW50OiA1MCB9LCB7IG1hdGVyaWFsOiAncm9ja3MnLCBhbW91bnQ6IDUwIH1dXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogMTAwLCAnb3JlJzogNTAsICdyb2Nrcyc6IDUwIH0sXHJcbiAgICAvLyB9LFxyXG4gICAgJ2F1dG9DbG9uZSc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckF1dG9DbG9uZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJBdXRvIENsb25lXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQXV0b21hdGljYWxseSBwcm9kdWNlIGNsb25lc1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE0MCwgJ2Nsb25lcyc6IDIwIH0sXHJcbiAgICB9LFxyXG5cclxuICAgICdlZmZlY3RpdmVCdWlsZGluZ3MnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJFZmZlY3RpdmVCdWlsZGluZ3MnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQnVpbGRpbmdzIElcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJJbmNyZWFzZSBidWlsZGluZyBlZmZlY3RzIGJ5IDElXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTQwIH0sXHJcbiAgICB9LFxyXG4gICAgJ2FncmljdWx0dXJlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQWdyaWN1bHR1cmUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQWdyaWN1bHR1cmVcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGaW5kIHNvbWUgc2VlZHMgZnJvbSBhbGwgdGhvc2UgcGxhbnRzXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTUwIH1cclxuICAgIH0sXHJcbiAgICAnY29tYmF0Jzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQ29tYmF0JyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkNvbWJhdFwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIklzIHRoZXJlIGFueW9uZSB0byBzcGFyIHdpdGggYmVzaWRlcyB5b3U/XCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMzAwLCAnc3BlYXInOiAxMDAgfVxyXG4gICAgfSxcclxuICAgICdodW50aW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVySHVudGluZycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJIdW50aW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQXQgbGVhc3QgdGhlcmUgYXJlIGFuaW1hbHNcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxNDAsICdmaXNoJzogNTAgfVxyXG4gICAgfSxcclxuICAgICdwZXJrc1RhYic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclBlcmtzVGFiJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiAnUGVya3MnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnTWF5YmUgeW91IGFzIHRoZSBvcmlnaW5hbCBzaG91bGQgc3BlY2lhbGl6ZScsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNDAwIH1cclxuICAgIH0sXHJcbiAgICAvLyAnYXV0b2NyYWZ0Jzoge1xyXG4gICAgLy8gICAgIGlkOiBcInBvbmRlckF1dG9jcmFmdFwiLFxyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIHRleHQ6IFwiQXV0byBDcmFmdFwiLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIkF1dG9tYXRpY2FsbHkgY3JhZnQgcmVzb3VyY2VzIHdoZW4gdGhleSByZWFjaCB0aGUgc3RvcmFnZSBsaW1pdFwiLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwMCwgJ3dvb2QnOiAxMDAwLCAncm9ja3MnOiA1MDAsICd3aGVhdCc6IDEwMDAgfVxyXG4gICAgLy8gfSxcclxuICAgICdmYWN0b3J5VGFiJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRmFjdG9yeVRhYicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJGYWN0b3JpZXNcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBc2NlbmQgdG8gdGhlIG5leHQgbGV2ZWwgb2YgZWNvbm9teVwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDUwMCwgJ2dvbGQnOiAxMCwgJ3dvb2QnOiAxMDAwLCAnd2hlYXQnOiAxMDAwLCAncm9ja3MnOiAxMDAwIH1cclxuICAgIH0sXHJcbiAgICAvLyAnZXhwbG9yYXRpb24nOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJFeHBsb3JhdGlvbicsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogW3tcclxuICAgIC8vICAgICAgICAgbWF0ZXJpYWw6ICdwb25kZXInLFxyXG4gICAgLy8gICAgICAgICBhbW91bnQ6IDE2MFxyXG4gICAgLy8gICAgIH1dXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ3RyYWRpbmcnOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJUcmFkaW5nJyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIlRyYWRpbmdcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJZb3UgbWV0IHNvbWVvbmUhIFRpbWUgdG8gdHJhZGUgd2l0aCB0aGVtLlwiLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ2dvbGQnOiAxMCwgJ3BvbmRlcic6IDQwMCB9XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ3NjaWVuY2UnOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJTY2llbmNlJyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiBbe1xyXG4gICAgLy8gICAgICAgICBtYXRlcmlhbDogJ3BvbmRlcicsXHJcbiAgICAvLyAgICAgICAgIGFtb3VudDogMjAwXHJcbiAgICAvLyAgICAgfV1cclxuICAgIC8vIH0sXHJcbiAgICAvLyAnbWFnaWMnOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJNYWdpYycsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogW3tcclxuICAgIC8vICAgICAgICAgbWF0ZXJpYWw6ICdwb25kZXInLFxyXG4gICAgLy8gICAgICAgICBhbW91bnQ6IDIyMFxyXG4gICAgLy8gICAgIH1dXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ2RpcGxvbWFjeSc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlckRpcGxvbWFjeScsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogW3tcclxuICAgIC8vICAgICAgICAgbWF0ZXJpYWw6ICdwb25kZXInLFxyXG4gICAgLy8gICAgICAgICBhbW91bnQ6IDI0MFxyXG4gICAgLy8gICAgIH1dXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ2NvbnN0cnVjdGlvbic6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlckNvbnN0cnVjdGlvbicsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogW3tcclxuICAgIC8vICAgICAgICAgbWF0ZXJpYWw6ICdwb25kZXInLFxyXG4gICAgLy8gICAgICAgICBhbW91bnQ6IDI2MFxyXG4gICAgLy8gICAgIH1dXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ2FydHMnOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJBcnRzJyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiBbe1xyXG4gICAgLy8gICAgICAgICBtYXRlcmlhbDogJ3BvbmRlcicsXHJcbiAgICAvLyAgICAgICAgIGFtb3VudDogMjgwXHJcbiAgICAvLyAgICAgfV1cclxuICAgIC8vIH0sXHJcbiAgICAvLyAnYXN0cm9ub215Jzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyQXN0cm9ub215JyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiBbe1xyXG4gICAgLy8gICAgICAgICBtYXRlcmlhbDogJ3BvbmRlcicsXHJcbiAgICAvLyAgICAgICAgIGFtb3VudDogMzAwXHJcbiAgICAvLyAgICAgfV1cclxuICAgIC8vIH1cclxufTtcclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHBvbmRlcnM6IHBvbmRlcnNcclxufTsiLCIvLyBTdGF0ZSBvZiBlYWNoIHJlc291cmNlXHJcblxyXG4vLyBUT0RPOiBBREQgUkVRVUlSRU1FTlRTIEZPUiBFQUNIIFRPIE1BS0UgVEhFTSBWSVNJQkxFXHJcbi8vIG9yIGp1c3QgZGlzcGxheSB0aGVtIHdoZW4geW91IGdldCB5b3VyIGZpcnN0IG9uZT9cclxuY29uc3QgcmVzb3VyY2VzID0ge1xyXG4gICAgXCJjbG9uZXNcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJtYWtlQ2xvbmVcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgbWF4OiAwXHJcbiAgICB9LFxyXG5cclxuICAgIFwic3RpY2tzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyU3RpY2tzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogdHJ1ZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4ax8JOAnCBHYXRoZXJpbmcgU3RpY2tzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThrEgR2F0aGVyIFN0aWNrc1wiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgJ0nLFxyXG4gICAgICAgIG1heDogNTBcclxuICAgIH0sXHJcbiAgICBcInZpbmVzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyVmluZXNcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk42v8JOAqiBHYXRoZXJpbmcgVmluZXNcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JONryBHYXRoZXIgVmluZXNcIixcclxuICAgICAgICBcInRvb2xzXCI6IFt7IFwidG9vbFwiOiBcIkF4ZVwiLCBcInZhbFwiOiAxLjUgfV0sXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqicsXHJcbiAgICAgICAgbWF4OiA1MFxyXG4gICAgfSxcclxuICAgIFwicm9ja3NcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJSb2Nrc1wiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTipbwk4CpIEdhdGhlcmluZyBSb2Nrc1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4qWIEdhdGhlciBSb2Nrc1wiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgIG1heDogMzBcclxuICAgIH0sXHJcbiAgICBcImZpc2hcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJGaXNoXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOGnfCThp/wk4aeIPCTgYMgR29uZSBGaXNoaW5nXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThp3wk4af8JOGniBHbyBGaXNoXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOBgycsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJTcGVhclwiLCBcInZhbFwiOiAxIH0sIHsgXCJ0b29sXCI6IFwiRmlzaGluZyBSb2RcIiwgXCJ2YWxcIjogMiB9XSxcclxuICAgICAgICBtYXg6IDEwXHJcbiAgICB9LFxyXG4gICAgXCJ3b29kXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyV29vZFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgKggQ2hvcHBpbmcgV29vZFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4yPIENob3AgV29vZFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqCcsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJBeGVcIiwgXCJ2YWxcIjogMS41IH0sIHsgXCJ0b29sXCI6IFwiQ2hhaW5zYXdcIiwgXCJ2YWxcIjogMyB9XSxcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgbWF4OiA0MFxyXG4gICAgfSxcclxuICAgIFwicG9uZGVyXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyUG9uZGVyXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAgSBQb25kZXJpbmdcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAgSBQb25kZXJcIixcclxuICAgICAgICBlbW9qaTogJ/CTgIEnLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJvcmVcIjoge1xyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyT3JlXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOJuPCTgYQgTWluaW5nIE9yZVwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4m4IE1pbmUgT3JlXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4GEJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJzYW5kXCI6IHtcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclNhbmRcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CpIFNjb29waW5nIFNhbmRcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAqSBTY29vcCBTYW5kXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJ3aGVhdFwiOiB7XHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJXaGVhdFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgKkgSGFydmVzdGluZyBXaGVhdFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4CpIEhhcnZlc3QgV2hlYXRcIixcclxuICAgICAgICBlbW9qaTogJ/CTgJ0nLFxyXG4gICAgICAgIG1heDogMjBcclxuICAgIH0sXHJcbiAgICAnZnJlc2h3YXRlcic6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJGcmVzaHdhdGVyJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2hpZGVzJzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckhpZGVzJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAjicsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcblxyXG4gICAgfSxcclxuICAgICdjbGF5Jzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckNsYXknLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnYmVycmllcyc6IHtcclxuXHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyQmVycmllcycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdoZXJicyc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJIZXJicycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdnYW1lJzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckdhbWUnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAn8JODmvCTgI4gSHVudGluZycsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ/CTgI4gSHVudCcsXHJcbiAgICAgICAgZW1vamk6ICfwk4COJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gaXNSZXNvdXJjZShyZXNvdXJjZSkge1xyXG4gICAgLy8gcmV0dXJuIHJlc291cmNlc1tyZXNvdXJjZV0gIT09IG51bGw7XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gcmVzb3VyY2VzO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldFJlc291cmNlQ29uZmlnQnlJZChpZCkge1xyXG4gICAgZm9yIChsZXQgciBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICBpZiAocmVzb3VyY2VzW3JdLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2VzW3JdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXHJcbiAgICBpc1Jlc291cmNlLFxyXG4gICAgZ2V0UmVzb3VyY2VDb25maWdCeUlkXHJcbn07IiwiY29uc3Qgc2tpbGxzID0ge1xyXG4gICAgZ2F0aGVyaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3N0aWNrcycsICd2aW5lcycsICdzYW5kJywgJ2hlcmJzJywgJ2JlcnJpZXMnXVxyXG4gICAgfSxcclxuICAgIG1hc29ucnk6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsncm9ja3MnLCAnb3JlJywgJ2NsYXknXSxcclxuICAgICAgICBuZWVkVG9vbHM6IFt7ICdQaWNrYXhlJzogWydvcmUnXSB9XVxyXG4gICAgfSxcclxuICAgIGNhcnBlbnRyeToge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWyd3b29kJywgJ2hhbmRsZScsICdzdGFmZicsICdmaXNoaW5ncm9kJ10sXHJcbiAgICAgICAgbmVlZFRvb2xzOiBbeyAnQXhlJzogWyd3b29kJ10gfV1cclxuICAgIH0sXHJcbiAgICB0aGlua2luZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydwb25kZXInXVxyXG4gICAgfSxcclxuICAgIHNtaXRoaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2F4ZScsICdwaWNrYXhlJywgJ3NwZWFyJywgJ2dsYXNzJywgJ2lyb24nLCAnc2lsdmVyJywgJ2dvbGQnXVxyXG4gICAgfSxcclxuICAgIGZhcm1pbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnd2hlYXQnLCAnZnJlc2h3YXRlciddXHJcbiAgICB9LFxyXG4gICAgY29tYmF0OiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbXVxyXG4gICAgfSxcclxuICAgIGZpc2hpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnZmlzaCcsICdmcmVzaHdhdGVyJ11cclxuICAgIH0sXHJcbiAgICBodW50aW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2hpZGVzJywgJ2dhbWUnXVxyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBza2lsbHM6IHNraWxsc1xyXG59OyIsImNvbnN0IHsgY3JhZnRlZFJlc291cmNlcywgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnV0dG9uc1wiKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIGdldFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBzYXZlR2FtZSwgbG9hZEdhbWUgfSA9IHJlcXVpcmUoXCIuL3NhdmluZ1wiKTtcclxuY29uc3QgeyBnZW5lcmF0ZVRvb2x0aXBDb3N0LCBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zLCBpbmNyZWFzZU1hdGVyaWFsLCBjcmFmdEFsbFJlc291cmNlcywgY3JhZnRSZXNvdXJjZSwgY2FsY0luY3JlYXNlLCB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMsIGNhbGNTZWNvbmRzUmVtYWluaW5nLCBpbmNyZWFzZU1heCwgaW5pdGlhbGl6ZVJlc291cmNlVGFncyB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCwgYnV5TWF4QnVpbGRpbmdzLCBidXlCdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBoYXNQZXJrLCBzZWxlY3RBYmlsaXR5IH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgdXBkYXRlU2lkZWJhciwgZ2V0TWF4LCBjbGVhclNpZGViYXIgfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBjcmVhdGVGYWN0b3J5RGl2LCBidXlGYWN0b3J5LCBhdHRlbXB0TWFudWZhY3R1cmUsIHVwZ3JhZGVCdWxrIH0gPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcclxuLy8gQHRzLWlnbm9yZVxyXG5jb25zdCB7IGlzUG9uZGVyZWQsIGdlbmVyYXRlUG9uZGVyQnV0dG9ucyB9ID0gcmVxdWlyZShcIi4vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGhhc1Rvb2wsIGFkZFRvb2wgfSA9IHJlcXVpcmUoJy4vdG9vbHMnKTtcclxuY29uc3QgeyBnZXRBdGVGaXNoLCBzZXRBdGVGaXNoIH0gPSByZXF1aXJlKCcuL2F0ZUZpc2gnKTtcclxuY29uc3QgeyBkcmF3QWxsQ29ubmVjdGlvbnMsIHVwZGF0ZVRvdGFsIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbi8qIE1ZIENPREUgU1RBUlRTIEhFUkUgKi9cclxuXHJcblxyXG5cclxuLy8gSW5pdGlhbGl6ZSB2YWx1ZXNcclxuLy8gbGV0IHNraWxsZWQgPSBmYWxzZTtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRUb3RhbFRpbWUodGltZSkge1xyXG4gICAgdG90YWxfdGltZSA9IHRpbWU7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBHQVRIRVJJTkcgTUFURVJJQUxTKi9cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3Qgc2lkZWJhclBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG5mdW5jdGlvbiBzdG9wQWxsR2F0aGVyaW5nKCkge1xyXG4gICAgZm9yIChsZXQga2V5IGluIHJlc291cmNlcykge1xyXG4gICAgICAgIHJlc291cmNlc1trZXldLmlzR2V0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IHJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dhdGhlclwiICsgY2FwaXRhbGl6ZUZpcnN0KGtleSkpO1xyXG4gICAgICAgIGlmIChyQnV0dG9uKSByQnV0dG9uLnRleHRDb250ZW50ID0gcmVzb3VyY2VzW2tleV0uZGVmYXVsdFRleHQ7XHJcblxyXG4gICAgICAgIC8vIFNldCBzaWRlYmFyIHRvIG5vdCBib2xkXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gc2lkZWJhclBhcmVudC5xdWVyeVNlbGVjdG9yKCcjcmVzb3VyY2UtJyArIGtleSk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChzaWRlYmFyVGV4dCkgc2lkZWJhclRleHQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZW1vamlHYXRoZXJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW1vamlHYXRoZXJEaXNwbGF5Jyk7XHJcbmZ1bmN0aW9uIHRvZ2dsZVJlc291cmNlKHJlc291cmNlS2V5KSB7XHJcbiAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlc1tyZXNvdXJjZUtleV07XHJcblxyXG4gICAgLy8gZW1vamlEaXYudGV4dENvbnRlbnQgPSAn8JOGric7XHJcbiAgICBjb25zdCBzaWRlYmFyUGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIik7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBzaWRlYmFyVGV4dCA9IHNpZGViYXJQYXJlbnQucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyByZXNvdXJjZUtleSk7XHJcbiAgICBjb25zdCByZXNvdXJjZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYXRoZXInICsgcmVzb3VyY2VLZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXNvdXJjZUtleS5zbGljZSgxKSk7XHJcblxyXG4gICAgaWYgKCFyZXNvdXJjZS5pc0dldHRpbmcpIHtcclxuICAgICAgICBzdG9wQWxsR2F0aGVyaW5nKCk7IC8vIFN0b3AgYWxsIGdhdGhlcmluZyBhY3Rpb25zXHJcbiAgICAgICAgcmVzb3VyY2UuaXNHZXR0aW5nID0gdHJ1ZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24udGV4dENvbnRlbnQgPSByZXNvdXJjZS5hY3RpdmVUZXh0O1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGVtb2ppR2F0aGVyRGl2LnRleHRDb250ZW50ID0gcmVzb3VyY2UuZW1vamk7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzb3VyY2UuZW1vamkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvdXJjZS5pc0dldHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24udGV4dENvbnRlbnQgPSByZXNvdXJjZS5kZWZhdWx0VGV4dDtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBCVVRUT05TIEdFTkVSQVRFICovXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1dHRvbnMoKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIGJ1dHRvbnNcIik7XHJcbiAgICBjb25zb2xlLnRyYWNlKCk7XHJcbiAgICAvLyBDcmVhdGUgdGhlIGNvbHVtbnNcclxuICAgIGNvbnN0IGNyZWF0ZUNvbHVtbnMgPSAocGFyZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29sMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnN0IGNvbDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb25zdCBjb2wzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbDEuc3R5bGUud2lkdGggPSAnMzMuMzMlJztcclxuICAgICAgICBjb2wyLnN0eWxlLndpZHRoID0gJzMzLjMzJSc7XHJcbiAgICAgICAgY29sMy5zdHlsZS53aWR0aCA9ICczMy4zMyUnO1xyXG5cclxuICAgICAgICBjb2wxLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICBjb2wyLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICBjb2wzLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuXHJcbiAgICAgICAgY29sMS5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgY29sMi5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgY29sMy5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgIC8vIHBhcmVudC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXg7JyAgLy8gU2V0IHBhcmVudCB0byBiZSBhIGZsZXggY29udGFpbmVyXHJcblxyXG4gICAgICAgIHBhcmVudC5wcmVwZW5kKGNvbDMpO1xyXG4gICAgICAgIHBhcmVudC5wcmVwZW5kKGNvbDIpO1xyXG4gICAgICAgIHBhcmVudC5wcmVwZW5kKGNvbDEpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2NvbDEsIGNvbDIsIGNvbDNdO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB0YWJzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKTtcclxuICAgIGNvbnN0IHByb2R1Y3Rpb25Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjdGlvblRhYicpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgZXhwZXJpbWVudENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHBlcmltZW50VGFiJykucXVlcnlTZWxlY3RvcignLmJ1dHRvbi1jb2x1bW5zJyk7XHJcbiAgICBjb25zdCBwb25kZXJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9uZGVyVGFiJyk7XHJcbiAgICAvLyBjb25zdCBqb2JDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9ic1RhYicpO1xyXG4gICAgLy8gWW91IGNhbiBhZGQgbW9yZSBjb250YWluZXJzIGZvciBkaWZmZXJlbnQgdGFicyBhcyBuZWVkZWRcclxuXHJcbiAgICBjb25zdCBwcm9kdWN0aW9uQ29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMocHJvZHVjdGlvbkNvbnRhaW5lcik7XHJcbiAgICBjb25zdCBleHBlcmltZW50Q29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMoZXhwZXJpbWVudENvbnRhaW5lcik7XHJcbiAgICBjb25zdCBwb25kZXJDb2x1bW5zID0gY3JlYXRlQ29sdW1ucyhwb25kZXJDb250YWluZXIpO1xyXG4gICAgLy8gY29uc3Qgam9iQ29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMoam9iQ29udGFpbmVyKTtcclxuICAgIC8vIFNpbWlsYXJseSwgY3JlYXRlIGNvbHVtbnMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgbGV0IHByb2R1Y3Rpb25Db2x1bW5JbmRleCA9IDA7XHJcbiAgICBsZXQgZXhwZXJpbWVudENvbHVtbkluZGV4ID0gMDtcclxuICAgIGxldCBwb25kZXJDb2x1bW5JbmRleCA9IDA7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBsZXQgam9iQ29sdW1uSW5kZXggPSAwO1xyXG5cclxuICAgIC8vIEFkZCBjb3VudGVycyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuXHJcbiAgICBmb3IgKGxldCBrZXkgaW4gYnV0dG9ucykge1xyXG4gICAgICAgIGNvbnN0IGJ0biA9IGJ1dHRvbnNba2V5XTtcclxuICAgICAgICBjb25zdCBidXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcblxyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuaWQgPSBrZXk7XHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc05hbWUgPSBidG4uY2xhc3M7XHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC50ZXh0Q29udGVudCA9IGJ0bi50ZXh0O1xyXG5cclxuICAgICAgICAvLyBidXR0b25FbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICAgIGlmIChidG4udG9vbHRpcERlc2MpIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsIGJ0bi50b29sdGlwRGVzYyk7XHJcbiAgICAgICAgaWYgKGJ0bi50b29sdGlwRWZmZWN0KSBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWVmZmVjdCcsIGJ0bi50b29sdGlwRWZmZWN0KTtcclxuICAgICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgndW5sb2NrJywgYnRuLnVubG9jayk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnRuKTtcclxuICAgICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycsIGJ0bi5kYXRhX2J1aWxkaW5nKTtcclxuICAgICAgICAvLyBpZiB0aGlzIHJlc291cmNlIGlzbid0IHVubG9ja2VkLCBoaWRlIGl0XHJcbiAgICAgICAgLy8gaWYgKCFidG4uaXNWaXNpYmxlKSBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYnV0dG9uIGNvcnJlc3BvbmRzIHRvIGEgY3JhZnRlZCByZXNvdXJjZSB1c2luZyB0aGUgSURcclxuICAgICAgICBjb25zdCBjcmFmdGVkUmVzb3VyY2UgPSBPYmplY3QudmFsdWVzKGNyYWZ0ZWRSZXNvdXJjZXMpLmZpbmQocmVzb3VyY2UgPT4gcmVzb3VyY2UuaWQgPT09IGtleSk7XHJcblxyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgYnRuLnRvb2x0aXBDb3N0ID0gZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2UuY29zdCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgYnRuLnRvb2x0aXBDb3N0KTtcclxuXHJcbiAgICAgICAgaWYgKGJ0bi5zaG93VGFiKSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzaG93VGFiKGJ0bi5zaG93VGFiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU3dpdGNoaW5nIHRvIHRhYjogXCIgKyBidG4uc2hvd1RhYik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBcHBlbmQgdG8gdGhlIGFwcHJvcHJpYXRlIGNvbHVtbiBiYXNlZCBvbiB0aGUgdGFiIHByb3BlcnR5XHJcbiAgICAgICAgaWYgKGJ0bi50YWIgPT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICBwcm9kdWN0aW9uQ29sdW1uc1twcm9kdWN0aW9uQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBwcm9kdWN0aW9uQ29sdW1uSW5kZXggPSAocHJvZHVjdGlvbkNvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdleHBlcmltZW50Jykge1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uc1tleHBlcmltZW50Q29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uSW5kZXggPSAoZXhwZXJpbWVudENvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnRuLnRhYiA9PT0gJ3RhYnMnKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGFic0NvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgICAgIHBvbmRlckNvbHVtbnNbcG9uZGVyQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBwb25kZXJDb2x1bW5JbmRleCA9IChwb25kZXJDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdqb2InKSB7XHJcbiAgICAgICAgICAgIC8vIGpvYkNvbHVtbnNbam9iQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBqb2JDb2x1bW5JbmRleCA9IChqb2JDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkIG1vcmUgY29uZGl0aW9ucyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXAgZm9yIGJ1aWxkaW5nc1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gT2JqZWN0LmtleXMoYnVpbGRpbmdzKS5maW5kKGJ1aWxkaW5nID0+IGJ1aWxkaW5nID09PSBrZXkpO1xyXG4gICAgICAgIGlmIChidWlsZGluZykge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidWlsZGluZywga2V5KTtcclxuICAgICAgICAgICAgLy8gYnRuLnRvb2x0aXBDb3N0ID0gZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0KGJ1aWxkaW5nc1tidWlsZGluZ10uY29zdCk7XHJcbiAgICAgICAgICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGtleSwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSGlkZSB0aGUgYnV0dG9ucyB3ZSBzaG91bGRuJ3Qgc2VlIHlldFxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ0bik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKCFidG4ucmVxdWlyZW1lbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uRWxlbWVudCwgYnRuLnJlcXVpcmVtZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignRXJyb3Igd2l0aCByZXF1aXJlbWVudCB3aGlsZSBnZW5lcmF0aW5nIGJ1dHRvbnM6ICcsIGJ0biwgZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IHRvb2xzVG9TdGFnZXMgPSB7XHJcbiAgICAnU2hhcnBSb2Nrcyc6ICdjcmFmdFJvY2tzJyxcclxuICAgICdTcGVhcic6ICdmaXNoaW5nJyxcclxuICAgIFwiRmlzaGluZ1JvZFwiOiAnZmlzaGluZycsXHJcbiAgICAnQXhlJzogJ3dvb2QnLFxyXG4gICAgXCJQaWNrYXhlXCI6ICdvcmUnXHJcbn07XHJcblxyXG4vLyBVcGRhdGUgdmlzaWJpbGl0eSBvZiBhc3NldHNcclxuY29uc3QgdmlzaWJpbGl0eVJ1bGVzID0gW1xyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoXCJzdGlja3NcIiwgcmVzb3VyY2VzKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoXCJzdGlja1wiKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdzdGlja3MnLCByZXNvdXJjZXMpID49IDEwLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3ZpbmVzJylcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgndmluZXMnLCByZXNvdXJjZXMpID49IDEwLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3JvY2tzJylcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbChcInJvY2tzXCIsIHJlc291cmNlcykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IHsgbWFrZVZpc2libGUoXCJ0YWItYnV0dG9uXCIpOyBtYWtlVmlzaWJsZSgnY3JhZnRSb2NrcycpOyB9XHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKFwiZmlzaFwiLCByZXNvdXJjZXMpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnZmlzaGluZycpXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGhhc1Rvb2woXCJBeGVcIiksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnd29vZCcpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0Q3JhZnRlZFJlc291cmNlKCdyb3BlJykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdyb3BlJylcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ2Zpc2gnLCByZXNvdXJjZXMpID49IDUgJiYgIWdldEF0ZUZpc2goKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWF0RmlzaCcpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlYXRGaXNoJykuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRBdGVGaXNoKCksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7IG1ha2VWaXNpYmxlKCdjbG9uZScpOyBtYWtlVmlzaWJsZSgncG9uZGVyLXRhYicpOyB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gaXNQb25kZXJlZCgncG9uZGVyRmluaXNoJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBuYXZpZ2F0ZVRvKCdzdGFnZTIuaHRtbCcpXHJcbiAgICB9XHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdqb2JzLXRhYicpLFxyXG4gICAgLy8gICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2pvYnMtdGFiJylcclxuICAgIC8vIH0sXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdza2lsbHNUYWJsZScpLFxyXG4gICAgLy8gICAgIGFjdGlvbjogKCkgPT4geyBtYWtlVmlzaWJsZShcInNraWxsZWRcIik7IHBvcHVsYXRlU2tpbGxzVGFibGUoKTsgfVxyXG4gICAgLy8gfVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3VwZGF0aW5nIHZpc2libGUnKTtcclxuICAgIHZpc2liaWxpdHlSdWxlcy5mb3JFYWNoKHJ1bGUgPT4ge1xyXG4gICAgICAgIGlmIChydWxlLmNvbmRpdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHJ1bGUuYWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZm9yIChsZXQgdG9vbCBpbiB0b29sc1RvU3RhZ2VzKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmICghaGFzVG9vbCh0b29sKSAmJiBnZXRDcmFmdGVkUmVzb3VyY2UodG9vbCkgPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgYWRkVG9vbCh0b29sKTtcclxuICAgICAgICAgICAgbWFrZVZpc2libGUodG9vbHNUb1N0YWdlc1t0b29sXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKTtcclxuICAgICAgICBpZiAoY3VycmVudEhvdmVyQnV0dG9uICE9PSBudWxsKSB1cGRhdGVUb29sdGlwKGN1cnJlbnRIb3ZlckJ1dHRvbik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyBTd2l0Y2ggdGFic1xyXG5sZXQgdGFiQ29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLWNvbnRlbnQgPiAuY29udGVudFwiKTsgLy8gRGlyZWN0IGNoaWxkcmVuIG9ubHlcclxuZnVuY3Rpb24gc2hvd1RhYih0YWJOYW1lKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInNob3cgdGFiOiBcIiArIHRhYk5hbWUpO1xyXG4gICAgLy8gR2V0IGFsbCBtYWluIGNvbnRhaW5lciBkaXZzIGFuZCBoaWRlIHRoZW1cclxuICAgIGxldCBwcmV2VGFiID0gJyc7XHJcbiAgICBmb3IgKGxldCBjb250ZW50IG9mIHRhYkNvbnRhaW5lcnMpIHtcclxuICAgICAgICBpZiAoY29udGVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIHByZXZUYWIgPSBjb250ZW50LmlkO1xyXG4gICAgICAgICAgICBjb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBhbGwgdGFiIGJ1dHRvbnMgYW5kIHJlbW92ZSB0aGUgYWN0aXZlIGNsYXNzXHJcbiAgICBsZXQgdGFicyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLWJ1dHRvblwiKTtcclxuICAgIGZvciAobGV0IHRhYiBvZiB0YWJzKSB7XHJcbiAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hvdyB0aGUgY2xpY2tlZCB0YWIncyBtYWluIGNvbnRhaW5lciBkaXYgYW5kIG1ha2UgdGhlIHRhYiBidXR0b24gYWN0aXZlXHJcbiAgICBsZXQgYWN0aXZlQ29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYk5hbWUpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgYWN0aXZlQ29udGVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgIC8vIEdldCB0aGUgY2xpY2tlZCB0YWIgYnV0dG9uIGFuZCBtYWtlIGl0IGFjdGl2ZVxyXG4gICAgY29uc3QgdGFiU3RyaW5nID0gYCMke3RhYk5hbWV9QnV0dG9uYDtcclxuICAgIGxldCBhY3RpdmVUYWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhYlN0cmluZyk7XHJcblxyXG4gICAgaWYgKGFjdGl2ZVRhYkJ1dHRvbikgYWN0aXZlVGFiQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09ICdqb2JzVGFiJylcclxuICAgICAgICBkcmF3QWxsQ29ubmVjdGlvbnMoKTtcclxuXHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09ICdmYWN0b3J5VGFiJyAmJiBwcmV2VGFiICE9PSAnZmFjdG9yeVRhYicpIHtcclxuICAgICAgICBjbGVhclNpZGViYXIoKTtcclxuICAgICAgICBpbml0aWFsaXplUmVzb3VyY2VUYWdzKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcmV2VGFiID09PSAnZmFjdG9yeVRhYicpIHtcclxuICAgICAgICBjbGVhclNpZGViYXIoKTtcclxuICAgICAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKiBIT1RLRVlTICovXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XHJcbiAgICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgICAgIHNob3dUYWIoJ3Byb2R1Y3Rpb25UYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnMic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgndGFiLWJ1dHRvbicpKSBzaG93VGFiKCdleHBlcmltZW50VGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vIEFkZCBjYXNlcyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuICAgICAgICBjYXNlICczJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJykpIHNob3dUYWIoJ3BvbmRlclRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc0JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdqb2JzLXRhYicpKSBzaG93VGFiKCdqb2JzVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzUnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3NraWxsc1RhYmxlJykpIHNob3dUYWIoJ3NraWxsc1RhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc2JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdwZXJrc1RhYicpKSBzaG93VGFiKCdwZXJrc1RhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc3JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdmYWN0b3J5VGFiJykpIHNob3dUYWIoJ2ZhY3RvcnlUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qIERBUksgTU9ERSAqL1xyXG5jb25zdCBkYXJrTW9kZVRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGFya01vZGVUb2dnbGVcIik7XHJcbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5ib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2RhcmstbW9kZScpO1xyXG4vLyBAdHMtaWdub3JlXHJcbmRhcmtNb2RlVG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoJ2RhcmsnKTtcclxubGV0IGlzRGFyayA9IHRydWU7XHJcblxyXG5cclxuLyogQ1VUU0NFTkVTICovXHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gZWF0RmlzaCgpIHtcclxuICAgIGlmICghZ2V0QXRlRmlzaCgpICYmIGdldE1hdGVyaWFsKCdmaXNoJywgcmVzb3VyY2VzKSA+PSAxKSB7XHJcbiAgICAgICAgLy8gZWF0IGEgZmlzaCBhbmQgYmxhY2tvdXRcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnZmlzaCcsIC0xKTtcclxuICAgICAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gc3RhcnQgdGhlIHNlcXVlbmNlXHJcbiAgICAgICAgZmFkZVRvQmxhY2soKTtcclxuICAgICAgICAvLyBIaWRlIGZpc2ggYnV0dG9uXHJcbiAgICAgICAgc2V0QXRlRmlzaCh0cnVlKTtcclxuICAgICAgICBjb25zdCBmaXNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlYXRGaXNoXCIpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmaXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNoYW5nZU1lc3NhZ2UoXCJZb3UgYXJlIHdpdGggeW91cnNlbGYgaW4gYSBmb3Jlc3QuXCIsICd3aXRoIHlvdXJzZWxmJyk7XHJcbiAgICAgICAgICAgIGluY3JlYXNlTWF4KCdjbG9uZXMnLCAxKTtcclxuICAgICAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnY2xvbmVzJywgMSk7XHJcbiAgICAgICAgfSwgMTAwMCk7IC8vIGRlbGF5IG9mIDFzXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZmFkZVRvQmxhY2soKSB7XHJcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuICAgIGNvbnN0IG92ZXJsYXlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktdGV4dCcpO1xyXG4gICAgY29uc3Qgb3ZlcmxheUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LWJ1dHRvbicpO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgb3ZlcmxheVRleHQuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDIwMDApO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvdmVybGF5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgfSwgNTAwMCk7XHJcbn1cclxuXHJcbmNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpO1xyXG4vLyBAdHMtaWdub3JlXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gaGlkZU92ZXJsYXkoKSB7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5hdmlnYXRlVG8odXJsKSB7XHJcbiAgICAvLyBUcmlnZ2VyIHRoZSBvdmVybGF5IHRvIGZhZGUgaW5cclxuICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhZ2UtdHJhbnNpdGlvbi1vdmVybGF5Jyk7XHJcbiAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2ZhZGUtaW4nKTtcclxuXHJcbiAgICAvLyBXYWl0IGZvciB0aGUgZmFkZSBpbiB0byBjb21wbGV0ZSBiZWZvcmUgY2hhbmdpbmcgdGhlIHBhZ2VcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gICAgfSwgMzAwKTsgLy8gVGhpcyBkdXJhdGlvbiBzaG91bGQgbWF0Y2ggdGhlIENTUyBvcGFjaXR5IHRyYW5zaXRpb25cclxufVxyXG5cclxuLy8gRXhhbXBsZSB1c2FnZVxyXG4vLyBuYXZpZ2F0ZVRvKCduZXh0LXBhZ2UuaHRtbCcpO1xyXG5cclxuXHJcblxyXG4vLyBNZXNzYWdlIFxyXG5jb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJyk7XHJcbmZ1bmN0aW9uIGNoYW5nZU1lc3NhZ2UobmV3TWVzc2FnZSwgY2xvbmVXb3Jkcykge1xyXG4gICAgY29uc3QgbW9kaWZpZWRNZXNzYWdlID0gbmV3TWVzc2FnZS5yZXBsYWNlKGNsb25lV29yZHMsIGA8c3BhbiBpZD1cImFsb25lXCIgdGl0bGU9XCJZb3UgZmVlbCBwZWNraXNoIGZvciBzb21lIHNlYWZvb2RcIj4ke2Nsb25lV29yZHN9PC9zcGFuPmApO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gbW9kaWZpZWRNZXNzYWdlO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1lc3NhZ2UoKSB7XHJcbiAgICByZXR1cm4gbWVzc2FnZUVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qIEdBTUUgTE9PUCAqL1xyXG5cclxuXHJcbmxldCBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gNTA7XHJcbmxldCBsYXN0X3RpbWUgPSBudWxsO1xyXG5sZXQgdG90YWxfdGltZSA9IDA7XHJcbmxldCBhY2N1bXVsYXRlZF9sYWcgPSAwO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGxvb3AoY3VycmVudF90aW1lKSB7XHJcbiAgICBpZiAobGFzdF90aW1lID09PSBudWxsKSBsYXN0X3RpbWUgPSBjdXJyZW50X3RpbWU7XHJcblxyXG4gICAgY29uc3QgZGVsdGFfdGltZSA9IGN1cnJlbnRfdGltZSAtIGxhc3RfdGltZTtcclxuXHJcbiAgICB0b3RhbF90aW1lICs9IGRlbHRhX3RpbWU7XHJcbiAgICBhY2N1bXVsYXRlZF9sYWcgKz0gZGVsdGFfdGltZTtcclxuXHJcbiAgICBsYXN0X3RpbWUgPSBjdXJyZW50X3RpbWU7XHJcblxyXG4gICAgLy8gQ2F0Y2ggdXAgYWxsIHRoZSBtaXNzZWQgdGlja3NcclxuICAgIGxldCBub3JtYWxSYXRlID0gbWlsbGlzZWNvbmRzX3Blcl9mcmFtZTtcclxuICAgIC8vIHNpbXVsYXRlIHdpdGggbGVzcyBmaWRlbGl0eSB0byBtYWtlIHVwIHRpbWVcclxuICAgIC8vIHdoaWxlIChhY2N1bXVsYXRlZF9sYWcgPj0gMTAwICogbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSkge1xyXG4gICAgLy8gICAgIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgKj0gMTAwO1xyXG4gICAgLy8gfVxyXG4gICAgaWYgKGFjY3VtdWxhdGVkX2xhZyA+PSAxMCAqIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUpIHtcclxuICAgICAgICBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gYWNjdW11bGF0ZWRfbGFnIC8gMTA7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoYWNjdW11bGF0ZWRfbGFnID49IG1pbGxpc2Vjb25kc19wZXJfZnJhbWUpIHtcclxuXHJcbiAgICAgICAgYWNjdW11bGF0ZWRfbGFnIC09IG1pbGxpc2Vjb25kc19wZXJfZnJhbWU7XHJcbiAgICAgICAgdXBkYXRlKG1pbGxpc2Vjb25kc19wZXJfZnJhbWUsIHRvdGFsX3RpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgPSBub3JtYWxSYXRlO1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG59XHJcblxyXG5cclxubGV0IHRpbWVfc2luY2VfbGFzdF9zYXZlID0gMDtcclxubGV0IHRpbWVfc2luY2VfbWFudWZhdHVyZSA9IDA7XHJcbmZ1bmN0aW9uIHVwZGF0ZShkZWx0YV90aW1lLCB0b3RhbF90aW1lKSB7XHJcblxyXG4gICAgZm9yIChsZXQga2V5IGluIHJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwidXBkYXRpbmcgXCIgKyBrZXkpO1xyXG5cclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKGtleSwgY2FsY0luY3JlYXNlKGtleSwgZGVsdGFfdGltZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcygpO1xyXG4gICAgcmVuZGVyKCk7XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgZ2FtZSBldmVyeSAxMCBzZWNvbmRzXHJcbiAgICB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSArPSBkZWx0YV90aW1lO1xyXG4gICAgdGltZV9zaW5jZV9tYW51ZmF0dXJlICs9IGRlbHRhX3RpbWU7XHJcbiAgICB0b3RhbF90aW1lICs9IGRlbHRhX3RpbWU7XHJcbiAgICBpZiAodGltZV9zaW5jZV9sYXN0X3NhdmUgPj0gMTAwMDApIHtcclxuICAgICAgICBzYXZlR2FtZSgpO1xyXG4gICAgICAgIHRpbWVfc2luY2VfbGFzdF9zYXZlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYW51ZmFjdHVyZSBldmVyeSBzZWNvbmRcclxuICAgIGlmICh0aW1lX3NpbmNlX21hbnVmYXR1cmUgPj0gMTAwMCkge1xyXG4gICAgICAgIGF0dGVtcHRNYW51ZmFjdHVyZSgpO1xyXG4gICAgICAgIHRpbWVfc2luY2VfbWFudWZhdHVyZSA9IDA7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vLyB3aW5kb3cuc2V0SW50ZXJ2YWwocmVuZGVyLCAxMDApIC8vIFVwZGF0ZSB2aXN1YWxzIDEwIHRpbWVzIHBlciBzZWNvbmRcclxuLy8gd2luZG93LnNldEludGVydmFsKHRpY2ssIDEwMDApOyAvLyBFdmVyeSB0aWNrIGxhc3RzIGZvciAxIHNlY29uZFxyXG4vLyB3aW5kb3cuc2V0SW50ZXJ2YWwoc2F2ZUdhbWUsIDEwMDAwKTsgLy8gU2F2ZSB0aGUgZ2FtZSBldmVyeSAxMCBzZWNvbmRzXHJcblxyXG5cclxuXHJcbi8vIGNvbnN0IG15UmVzb3VyY2VzID0ge307XHJcblxyXG4vLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkZFJlc291cmNlQnRuXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlRm9ybVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4vLyB9KTtcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBhZGRSZXNvdXJjZSgpIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IHJlc291cmNlTmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VOYW1lXCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYWN0aXZlVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VBY3RpdmVUZXh0XCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgZGVmYXVsdFRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlRGVmYXVsdFRleHRcIikudmFsdWU7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYnRuVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuVGV4dFwiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGJ0blRvb2x0aXBEZXNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5Ub29sdGlwRGVzY1wiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGJ0blRvb2x0aXBDb3N0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5Ub29sdGlwQ29zdFwiKS52YWx1ZTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB2YXIgbmV3UmVzb3VyY2UgPSBteVJlc291cmNlc1tyZXNvdXJjZU5hbWVdID0ge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGlkOiBcImdhdGhlclwiICsgcmVzb3VyY2VOYW1lLFxyXG4gICAgICAgIGlzR2V0dGluZzogZmFsc2UsXHJcbiAgICAgICAgYWN0aXZlVGV4dDogYWN0aXZlVGV4dCxcclxuICAgICAgICBkZWZhdWx0VGV4dDogZGVmYXVsdFRleHQsXHJcbiAgICAgICAgLy8gLi4uIEFkZCBvdGhlciBhdHRyaWJ1dGVzIGFzIGZldGNoZWQgZnJvbSBmb3JtIC4uLlxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGJ1dHRvbiBvYmplY3RcclxuICAgIHZhciBuZXdCdXR0b24gPSBidXR0b25zW1wiZ2F0aGVyXCIgKyByZXNvdXJjZU5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXNvdXJjZU5hbWUuc2xpY2UoMSldID0ge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCAnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6IGJ0blRleHQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IGJ0blRvb2x0aXBEZXNjLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiBidG5Ub29sdGlwQ29zdCxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSAvLyBCeSBkZWZhdWx0LCBtYWtpbmcgdGhpcyBhbHdheXMgdmlzaWJsZS4gTW9kaWZ5IGFzIG5lZWRlZC5cclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2cobmV3UmVzb3VyY2UpO1xyXG4gICAgY29uc29sZS5sb2cobmV3QnV0dG9uKTtcclxuXHJcbiAgICAvLyBIaWRlIGZvcm0gb25jZSByZXNvdXJjZSBpcyBhZGRlZFxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZUZvcm1cIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cclxuICAgIC8vIE9wdGlvbmFsbHksIHlvdSBjYW4gdXBkYXRlIHRoZSBVSSB0byBzaG93IHRoZSBhZGRlZCByZXNvdXJjZVxyXG4gICAgLy8gdXBkYXRlVUkocmVzb3VyY2VOYW1lKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVUkocmVzb3VyY2VOYW1lKSB7XHJcbiAgICAvLyBIZXJlIHlvdSBjYW4gY3JlYXRlIGEgbmV3IERPTSBlbGVtZW50IHRvIGRpc3BsYXkgdGhlIGFkZGVkIHJlc291cmNlXHJcbiAgICBjb25zdCByZXNvdXJjZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICByZXNvdXJjZURpdi5pbm5lckhUTUwgPSBgJHtyZXNvdXJjZU5hbWV9OiAke3Jlc291cmNlc1tyZXNvdXJjZU5hbWVdLnZhbHVlfWA7XHJcblxyXG4gICAgLy8gQXBwZW5kIHRvIHNvbWUgY29udGFpbmVyXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlc291cmNlRGl2KTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IHRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHluYW1pYy10b29sdGlwJyk7XHJcblxyXG5mdW5jdGlvbiBzaG93VG9vbHRpcCh0YXJnZXQsIGRlc2MsIGVmZmVjdCwgY29zdCkge1xyXG4gICAgbGV0IGNvbnRlbnQgPSAnJztcclxuXHJcbiAgICBpZiAoZGVzYykge1xyXG4gICAgICAgIGNvbnRlbnQgKz0gYDxzcGFuID4ke2Rlc2N9PC9zcGFuPjxocj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlZmZlY3QpIHtcclxuICAgICAgICBjb250ZW50ICs9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiMwMEFCRTdcIj4ke2VmZmVjdH08L3NwYW4+PGhyPmA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvc3QpIHtcclxuICAgICAgICAvLyBjb250ZW50ICs9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiNGNEQwM0ZcIj4ke2Nvc3R9PC9zcGFuPjxicj5gO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSAnJztcclxuICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gY29zdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc3QgbWF0ZXJpYWwgPSByZXE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbW91bnQgPSBjb3N0W21hdGVyaWFsXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IGFtb3VudDsvKiBZb3VyIGxvZ2ljIHRvIGNoZWNrIGlmIHRoZXJlJ3MgZW5vdWdoIG9mIHRoZSBtYXRlcmlhbCAqLztcclxuICAgICAgICAgICAgICAgIHZhciBjb2xvckNsYXNzID0gaGFzRW5vdWdoID8gJ2Vub3VnaCcgOiAnbm90LWVub3VnaCc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWF4KG1hdGVyaWFsKSA8IGFtb3VudCkgY29sb3JDbGFzcyA9ICdleGNlZWRzLW1heCc7XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHthbW91bnQudG9GaXhlZCgwKX0gJHttYXRlcmlhbH08L3NwYW4+YDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmRzUmVtYWluaW5nID0gY2FsY1NlY29uZHNSZW1haW5pbmcobWF0ZXJpYWwsIGFtb3VudCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZWNvbmRzUmVtYWluaW5nKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWNvbmRzUmVtYWluaW5nID4gMCAmJiBjb2xvckNsYXNzICE9ICdleGNlZWRzLW1heCcpIHsgc3RyICs9IGA8c3BhbiBjbGFzcz1cInRpbWUtcmVtYWluaW5nXCI+KCR7KHNlY29uZHNSZW1haW5pbmcpLnRvRml4ZWQoMCl9IHNlY29uZHMpPC9zcGFuPmA7IH1cclxuICAgICAgICAgICAgICAgIHN0ciArPSBgPGJyPmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGVudCArPSBzdHI7XHJcblxyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb250ZW50ICs9IGNvc3Q7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJDb3VsZG4ndCBtYWtlIG5vcm1hbCBjb3N0IGZvciBidXR0b246IFwiLCB0YXJnZXQsIGNvc3QsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyh0YXJnZXQsIGNvbnRlbnQpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdG9vbHRpcC5pbm5lckhUTUwgPSBjb250ZW50O1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdG9vbHRpcC5zdHlsZS5sZWZ0ID0gKHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCArIDUpICsgJ3B4JztcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUudG9wID0gKHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB0b29sdGlwLm9mZnNldEhlaWdodCAvIDIpICsgJ3B4JztcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVUb29sdGlwKCkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdG9vbHRpcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVUb29sdGlwKGJ1dHRvbikge1xyXG4gICAgY29uc3QgZGVzYyA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJykgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnKTtcclxuICAgIGNvbnN0IGVmZmVjdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1lZmZlY3QnKTtcclxuICAgIC8vIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpO1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZyA9IGdldFJlc291cmNlQ29uZmlnQnlJZChidXR0b24uaWQpIHx8IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoYnV0dG9uLmlkKSB8fCBidWlsZGluZ3NbYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpXSB8fCBwb25kZXJzW2J1dHRvbi5nZXRBdHRyaWJ1dGUoJ3VubG9jaycpXTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNvbmZpZyk7XHJcbiAgICBjb25zdCBjb3N0ID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnKSB8fCBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpIHx8IGNvbmZpZy5jb3N0O1xyXG4gICAgc2hvd1Rvb2x0aXAoYnV0dG9uLCBkZXNjLCBlZmZlY3QsIGNvc3QpO1xyXG59XHJcblxyXG5cclxuLy8gQWZ0ZXIgYWxsIGhhcyBiZWVuIGxvYWRlZFxyXG4vLyBAdHMtaWdub3JlXHJcbi8vIEB0cy1pZ25vcmVcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4ge1xyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zKHBvbmRlcnMpO1xyXG4gICAgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpO1xyXG4gICAgZ2VuZXJhdGVCdXR0b25zKCk7IC8vIENhbGwgdGhpcyBvbmNlIG9uIHBhZ2UgbG9hZCBvciBnYW1lIGluaXRpYWxpemF0aW9uXHJcblxyXG4gICAgbG9hZEdhbWUoKTtcclxuICAgIHVwZGF0ZVNpZGViYXIoKTtcclxuICAgIHNob3dUYWIoJ3Byb2R1Y3Rpb25UYWInKTtcclxuICAgIHJlcXVpcmUoJy4vdHJhZGUnKS5nZW5lcmF0ZVRyYWRlVGFibGUocmVzb3VyY2VzKTtcclxuICAgIC8vIGNyZWF0ZVJlc291cmNlVGFnKCdzdGlja3MnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRSS2V5RnJvbUlEKGlkKSB7XHJcbiAgICAgICAgZm9yIChsZXQgciBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VzW3JdLmlkLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcl0uaWQgPT09IGlkKSByZXR1cm4gcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0Q1JLZXlGcm9tSUQoaWQpIHtcclxuICAgICAgICBmb3IgKGxldCByIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VzW3JdLmlkLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW3JdLmlkID09PSBpZCkgcmV0dXJuIHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiYnV0dG9uXCIpKSB7XHJcbiAgICAgICAgICAgIC8vIG9uZSBvZiBvdXIgYnV0dG9ucyB3YXMgY2xpY2tlZFxyXG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGlja2VkJywgYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwcyBcclxuICAgICAgICAgICAgLy8gaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3Rvb2x0aXAnKSkgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgICAgICAvLyB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJykgJiYgYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpICE9PSAndW5kZWZpbmVkJyAmJiBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdwdXJjaGFzYWJsZScpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnV5TWF4QnVpbGRpbmdzKGJ1aWxkaW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd1bmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdW5sb2NrQXR0ciA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3VubG9jaycpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb25kZXJzW3VubG9ja0F0dHJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhblVubG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA8IHBvbmRlcnNbdW5sb2NrQXR0cl0uY29zdFttYXRlcmlhbF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2Fubm90IHVubG9jayBcIiArIHVubG9ja0F0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuVW5sb2NrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVubG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBwb25kZXJzW3VubG9ja0F0dHJdLmNvc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwobWF0ZXJpYWwsIC1wb25kZXJzW3VubG9ja0F0dHJdLmNvc3RbbWF0ZXJpYWxdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb25kZXJzW3VubG9ja0F0dHJdLmlzUG9uZGVyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlVmlzaWJsZSh1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhpcyBidXR0b24gZGlzYXBwZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVubG9ja2luZyBcIiArIHVubG9ja0F0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmlkLnNsaWNlKDAsIDYpID09PSBcImdhdGhlclwiKSB0b2dnbGVSZXNvdXJjZShnZXRSS2V5RnJvbUlEKGJ1dHRvbi5pZCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZC5zbGljZSgwLCA1KSA9PT0gJ2NyYWZ0JylcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIGNyYWZ0QWxsUmVzb3VyY2VzKGdldENSS2V5RnJvbUlEKGJ1dHRvbi5pZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY3JhZnRSZXNvdXJjZShnZXRDUktleUZyb21JRChidXR0b24uaWQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdzYXZlQnV0dG9uJykgc2F2ZUdhbWUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdlYXRGaXNoJykgZWF0RmlzaCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ292ZXJsYXktYnV0dG9uJykgaGlkZU92ZXJsYXkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdkZWxldGVTYXZlQnV0dG9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzYXZlJyk7IGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnY2xlYXJKb2JBc3NpZ25tZW50cycpIGNsZWFySm9iQXNzaWdubWVudHMoKTtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2RhcmtNb2RlVG9nZ2xlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyay1tb2RlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGRhcmtNb2RlVG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoJ2RhcmsnKTtcclxuICAgICAgICAgICAgICAgICAgICBpc0RhcmsgPSAhaXNEYXJrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBkYXJrTW9kZVRvZ2dsZS50ZXh0Q29udGVudCA9IGlzRGFyayA/IFwiTGlnaHQgTW9kZVwiIDogXCJEYXJrIE1vZGVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnMm1haW4nKSBzaG93VGFiKCdtYWluVGFiJyk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICcyZ3JhcGhzJykgc2hvd1RhYignZ3JhcGhzVGFiJyk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndGllck9uZUJ1dHRvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGVyayA9IGJ1dHRvbi50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgIHNlbGVjdEFiaWxpdHkocGVyayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiI2Fsb25lXCIpKSB7XHJcbiAgICAgICAgICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgICAgICAvLyBIYXJkY29kZWQgaW5zdGVhZCB0byBhdm9pZCBpbmNyZWFzZSBhZmZlY3RlZCBieSBwcm9kdWN0aXZpdHkgYm9udXNlc1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzWydjbG9uZXMnXS52YWx1ZSA8IHJlc291cmNlc1snY2xvbmVzJ10ubWF4KSByZXNvdXJjZXNbJ2Nsb25lcyddLnZhbHVlICs9IDE7XHJcblxyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VGYWN0b3J5QnV0dG9ucygpIHtcclxuICAgICAgICBjb25zdCBmYWN0b3J5QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmYWN0b3J5QnV0dG9ucycpO1xyXG5cclxuICAgICAgICBjb25zdCBidXlGYWN0b3J5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd0b29sdGlwJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5pZCA9ICdidXlGYWN0b3J5QnV0dG9uJztcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLnRleHRDb250ZW50ID0gJ0J1eSBOZXcgRmFjdG9yeSc7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgJ1RoZSBmYWN0b3J5IG11c3QgZ3JvdyEnKTtcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCAnNTAgc2lsdmVyJyk7XHJcbiAgICAgICAgZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQoYnV5RmFjdG9yeUJ1dHRvbik7XHJcblxyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdidXlpbmcgZmFjdG9yeScpO1xyXG4gICAgICAgICAgICBidXlGYWN0b3J5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZ3JhZGVCdWxrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLmlkID0gJ3VwZ3JhZGVCdWxrQnV0dG9uJztcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi50ZXh0Q29udGVudCA9ICdVcGdyYWRlIEJ1bGsnO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCAnQ3JhZnQgbW9yZSByZXNvdXJjZXMgcGVyIHNlY29uZCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCAnMiDihpIgNDogMzAgc2lsdmVyJyk7XHJcbiAgICAgICAgZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQodXBncmFkZUJ1bGtCdXR0b24pO1xyXG5cclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygndXBncmFkaW5nIGJ1bGsnKTtcclxuICAgICAgICAgICAgdXBncmFkZUJ1bGsoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIH1cclxuICAgIG1ha2VGYWN0b3J5QnV0dG9ucygpO1xyXG4gICAgY3JlYXRlRmFjdG9yeURpdigpO1xyXG5cclxuXHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcblxyXG4gICAgLy8gU2FtcGxlIHVzYWdlOlxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvb2x0aXAnKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAvLyBFeHRyYWN0IHRoZSBkYXRhIGZyb20geW91ciBidWlsZGluZyBvciBhbnkgb3RoZXIgZGF0YSAtIHNvdXJjZVxyXG4gICAgICAgIC8vIGNvbnN0IGNvbnRlbnQgPSBcIllvdXIgdG9vbHRpcCBjb250ZW50IGhlcmVcIjtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgICAgICBjdXJyZW50SG92ZXJCdXR0b24gPSBidXR0b247XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgZXZlbnQgbGlzdGVuZXJcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignb25jbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgaGlkZVRvb2x0aXAoKTsgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDsgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGpvYnMgY291bnRlclxyXG4gICAgdXBkYXRlVG90YWwoKTtcclxuXHJcblxyXG59KTtcclxuXHJcbnZhciBjdXJyZW50SG92ZXJCdXR0b24gPSBudWxsO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gICAgdXBkYXRlU2lkZWJhcixcclxuICAgIHVwZGF0ZVVJLFxyXG4gICAgc2V0VG90YWxUaW1lLFxyXG4gICAgY2hhbmdlTWVzc2FnZSxcclxuXHJcbiAgICBnZXRNZXNzYWdlLFxyXG4gICAgdG90YWxfdGltZSxcclxuICAgIGN1cnJlbnRIb3ZlckJ1dHRvblxyXG5cclxufTtcclxuIiwiXHJcbmNvbnN0IHsgc2V0U3RhZ2UsIHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnV0dG9uVmlzaWJpbGl0eScpO1xyXG5cclxuLyoqXHJcbiAqIE1ha2UgZXZlcnl0aGluZyB3aXRoIHRoZSBjbGFzcyBcInN0YWdlXCIgdmlzaWJsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2VcclxuICovXHJcbmZ1bmN0aW9uIG1ha2VWaXNpYmxlKHN0YWdlKSB7XHJcbiAgICBpZiAoIXBhc3NlZFN0YWdlKHN0YWdlKSkge1xyXG4gICAgICAgIHNldFN0YWdlKHN0YWdlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHN0YWdlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicC5cIiArIHN0YWdlKTtcclxuICAgIHN0YWdlRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpKTtcclxuICAgIC8vIFxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgc3RhZ2VFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJycpO1xyXG4gICAgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSgpO1xyXG59XHJcbmV4cG9ydHMubWFrZVZpc2libGUgPSBtYWtlVmlzaWJsZTsiLCJjb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IHBlcmtzIH0gPSByZXF1aXJlKCcuL2pzb24vcGVya3MnKTtcclxubGV0IG15UGVya3MgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IHBlcmtOYW1lIFxyXG4gKiBAcmV0dXJucyBib29sZWFuXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNQZXJrKHBlcmtOYW1lKSB7XHJcbiAgICByZXR1cm4gbXlQZXJrcy5pbmNsdWRlcyhwZXJrTmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFsbFBlcmtzKCkge1xyXG4gICAgcmV0dXJuIG15UGVya3M7XHJcbn1cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGVya05hbWUgUGVyayB0byBhZGRcclxuICovXHJcbmZ1bmN0aW9uIGFkZFBlcmsocGVya05hbWUpIHtcclxuICAgIG15UGVya3MucHVzaChwZXJrTmFtZSk7XHJcblxyXG4gICAgLy8gRG8gYWxsIHRoZSBvbmUtdGltZSB1cGRhdGVzXHJcbiAgICBzd2l0Y2ggKHBlcmtOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnQXJjaGl0ZWN0JzpcclxuICAgICAgICAgICAgZm9yIChsZXQgYiBpbiBidWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vYnVpbGRpbmdzJykucmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYiwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aWVyTnVtIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UGVya0Zyb21UaWVyKHRpZXJOdW0pIHtcclxuICAgIGZvciAobGV0IHBlcmsgaW4gcGVya3NbJ3RpZXInICsgdGllck51bV0pIHtcclxuICAgICAgICBpZiAoaGFzUGVyayhwZXJrKSkgcmV0dXJuIHBlcms7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gcGVyayBmb3IgdGhpcyB0aWVyXHJcbiAgICByZXR1cm4gJyc7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzZWxlY3RBYmlsaXR5KGFiaWxpdHlOYW1lKSB7XHJcbiAgICBpZiAoaGFzUGVyayhhYmlsaXR5TmFtZSkpIHJldHVybjtcclxuXHJcbiAgICBsZXQgY29uZmlybVNlbGVjdGlvbiA9IHdpbmRvdy5jb25maXJtKFwiRG8geW91IHdhbnQgdG8gc2VsZWN0IFwiICsgYWJpbGl0eU5hbWUgKyBcIj8gVGhpcyBkZWNpc2lvbiBjYW5ub3QgYmUgZWFzaWx5IGNoYW5nZWQuXCIpO1xyXG5cclxuICAgIGlmICghY29uZmlybVNlbGVjdGlvbikgcmV0dXJuO1xyXG4gICAgYWRkUGVyayhhYmlsaXR5TmFtZSk7XHJcblxyXG4gICAgLy8gZm9yIChsZXQgaSA9IDE7IGkgPD0gMTsgKytpKVxyXG4gICAgcmVxdWlyZSgnLi9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbicpLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKGFiaWxpdHlOYW1lKTtcclxuXHJcbiAgICAvLyBteVBlcmtzLnB1c2goYWJpbGl0eU5hbWUpO1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaGFzUGVyayxcclxuICAgIGFkZFBlcmssXHJcbiAgICBzZWxlY3RBYmlsaXR5LFxyXG4gICAgZ2V0UGVya0Zyb21UaWVyLFxyXG4gICAgZ2V0QWxsUGVya3NcclxufTsiLCIvLyBERVBFTkRTIE9OOiBqc29uL2J1dHRvbnMuanNcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgcG9uZGVycyB9ID0gcmVxdWlyZSgnLi9qc29uL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoJy4vanNvbi9idXR0b25zJyk7XHJcblxyXG5mdW5jdGlvbiBpc1BvbmRlcmVkKGlkKSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgaWQgZXhpc3RzIGluIHRoZSB1bmxvY2tzIG1hcFxyXG4gICAgLy8gSWYgdGhlIGlkIGRvZXNuJ3QgZXhpc3QgaW4gdGhlIG1hcCwgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgcmV0dXJuIHBvbmRlcnNbaWRdID8gcG9uZGVyc1tpZF0uaXNQb25kZXJlZCA6IGZhbHNlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2FuVW5sb2NrKHVubG9ja0lkKSB7XHJcbiAgICAvLyBHZXQgdGhlIGtleSBmcm9tIHRoaXMgaWRcclxuICAgIC8vIGNvbnNvbGUubG9nKCdjYW4gdW5sb2NrPyAnLCB1bmxvY2tJZCk7XHJcbiAgICB2YXIgdW5sb2NrS2V5ID0gJyc7XHJcbiAgICBmb3IgKGxldCB1bmxvY2sgaW4gcG9uZGVycykge1xyXG4gICAgICAgIGlmIChwb25kZXJzW3VubG9ja10uaWQgPT09IHVubG9ja0lkKSB7XHJcbiAgICAgICAgICAgIHVubG9ja0tleSA9IHVubG9jaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHVubG9ja0tleSA9PT0gJycpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJpbnZhbGlkIHVubG9jayBpZDogXCIsIHVubG9ja0lkKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGVub3VnaCByZXNvdXJjZXNcclxuICAgIHZhciBjYW5CdXkgPSB0cnVlO1xyXG4gICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tLZXldLmNvc3QpIHtcclxuICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPCBwb25kZXJzW3VubG9ja0tleV0uY29zdFttYXRlcmlhbF0pIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJDYW5ub3QgdW5sb2NrIFwiICsgdW5sb2NrSWQpO1xyXG4gICAgICAgICAgICBjYW5CdXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdjYW4gd2UgdW5sb2NrICcsIHVubG9ja0lkLCBjYW5CdXkpO1xyXG4gICAgcmV0dXJuIGNhbkJ1eTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlUG9uZGVyQnV0dG9ucyhwb25kZXJPYmplY3RzKSB7XHJcbiAgICAvLyBjb25zdCBnZW5lcmF0ZWRCdXR0b25zID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBbcG9uZGVyS2V5LCBwb25kZXJPYmpdIG9mIE9iamVjdC5lbnRyaWVzKHBvbmRlck9iamVjdHMpKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbktleSA9IGBwb25kZXIke2NhcGl0YWxpemVGaXJzdChwb25kZXJLZXkpfWA7IC8vIGUuZy4gcG9uZGVyRmlzaGluZ1xyXG5cclxuICAgICAgICBidXR0b25zW2J1dHRvbktleV0gPSB7XHJcbiAgICAgICAgICAgIGNsYXNzOiAndG9vbHRpcCB1bmxvY2snLFxyXG4gICAgICAgICAgICB0ZXh0OiBwb25kZXJPYmoudGV4dCB8fCAnUG9uZGVyIGEgTXlzdGVyeT8nLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogcG9uZGVyT2JqLnRvb2x0aXBEZXNjIHx8IFwiV2hvIGtub3dzIHdoYXQgeW91J2xsIGRpc2NvdmVyXCIsXHJcbiAgICAgICAgICAgIHRvb2x0aXBDb3N0OiBwb25kZXJPYmoudG9vbHRpcENvc3QsXHJcbiAgICAgICAgICAgIHRhYjogJ3BvbmRlcicsXHJcbiAgICAgICAgICAgIHVubG9jazogcG9uZGVyS2V5LFxyXG4gICAgICAgICAgICByZXF1aXJlbWVudDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4vaGVscGVyJykuZ2V0TWF4KCdwb25kZXInKSA+PSBwb25kZXJzW3BvbmRlcktleV0uY29zdFsncG9uZGVyJ10gLyAyO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGlkZTogKCkgPT4gaXNQb25kZXJlZChwb25kZXJLZXkpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uS2V5LCBidXR0b25zW2J1dHRvbktleV0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyByZXR1cm4gZ2VuZXJhdGVkQnV0dG9ucztcclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2FuVW5sb2NrLFxyXG4gICAgaXNQb25kZXJlZCxcclxuICAgIGdlbmVyYXRlUG9uZGVyQnV0dG9uc1xyXG59OyIsIlxyXG4vLyBERVBFTkRTIE9OOiB0b29scy5qcywgam9icy5qc1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9yZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MsIGdldEJvb3N0IH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuLy8gQHRzLWlnbm9yZVxyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnV0dG9uc1wiKTtcclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuXHJcbmNvbnN0IHsgZ2V0V29ya2VycywgdXBkYXRlVG90YWwsIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IGhhc1Rvb2wsIGdldFRvb2xWYWx1ZUZvclJlc291cmNlIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgdXBkYXRlU2lkZWJhciwgdXBkYXRlU2tpbGxzLCBjYWxjQ3JhZnRCb251cywgZ2V0TWF4IH0gPSByZXF1aXJlKFwiLi9oZWxwZXJcIik7XHJcbmNvbnN0IHsgY2FuQ3JhZnQgfSA9IHJlcXVpcmUoJy4vY2FuQ3JhZnQnKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmNvbnN0IHsgaGFzUGVyayB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQgfSA9IHJlcXVpcmUoJy4vcG9uZGVyJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlIH0gPSByZXF1aXJlKCcuL2dldENyYWZ0ZWRSZXNvdXJjZScpO1xyXG4vLyBjb25zb2xlLmxvZyhjYXBpdGFsaXplRmlyc3QpO1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gam9iIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2UgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBpc1Jlc291cmNlQWZmZWN0ZWRCeUpvYihqb2IsIHJlc291cmNlKSB7XHJcbiAgICBjb25zdCBza2lsbCA9IHNraWxsc1tqb2JdO1xyXG4gICAgaWYgKCFza2lsbCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIGlmIChza2lsbC5hZmZlY3RlZFJlc291cmNlcy5pbmNsdWRlcyhyZXNvdXJjZSkpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSdzIGEgdG9vbCByZXF1aXJlbWVudCBmb3IgdGhpcyByZXNvdXJjZVxyXG4gICAgICAgIGlmIChza2lsbC5uZWVkVG9vbHMgJiYgQXJyYXkuaXNBcnJheShza2lsbC5uZWVkVG9vbHMpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHRvb2xPYmogb2Ygc2tpbGwubmVlZFRvb2xzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0b29sIGluIHRvb2xPYmopIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbE9ialt0b29sXS5pbmNsdWRlcyhyZXNvdXJjZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcGxheWVyIGhhcyB0aGlzIHRvb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIG5vdywganVzdCByZXR1cm5pbmcgdHJ1ZSB0byBpbmRpY2F0ZSB0aGUgcmVzb3VyY2UgaXMgYWZmZWN0ZWQgYW5kIGEgdG9vbCBpcyBuZWVkZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnV0IHlvdSBtYXkgd2FudCB0byByZXBsYWNlIHRoaXMgd2l0aCBhIGNoZWNrIHRvIHNlZSBpZiB0aGUgcGxheWVyIHBvc3Nlc3NlcyB0aGUgcmVxdWlyZWQgdG9vbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFzVG9vbCh0b29sKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gV2UgbmVlZGVkIGEgdG9vbCBidXQgbm90IGZvciB0aGlzXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBubyB0b29sIHJlcXVpcmVtZW50IHdhcyBmb3VuZCBmb3IgdGhlIHJlc291cmNlLCBpdCdzIHN0aWxsIGFmZmVjdGVkIGJ5IHRoZSBqb2JcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gQ2xvbmVzIHdvcmsgYXQgMS80IHRoZSBzcGVlZCBieSBkZWZhdWx0XHJcbnZhciBjbG9uZU11bHQgPSAwLjI1O1xyXG4vLyBjb25zb2xlLmxvZygnaW5pdGlhbCcsIHdvcmtlcnNEaXN0cmlidXRpb24pO1xyXG5mdW5jdGlvbiBjYWxjSW5jcmVhc2UocmVzb3VyY2VOYW1lLCBkZWx0YV90aW1lKSB7XHJcbiAgICB2YXIgdG90YWwgPSAwO1xyXG5cclxuICAgIC8vIGNsb25lcyBpbmNyZWFzZSBieSAxIHBlciBzZWNvbmQgYXMgbG9uZyBhcyB0aGVyZSdzIHNwYWNlXHJcbiAgICAvLyBpZiAocmVzb3VyY2UgPT09ICdjbG9uZXMnICYmIHBhc3NlZFN0YWdlKCdjbG9uZScpKSB7XHJcbiAgICAvLyAgICAgdG90YWwgPSAxO1xyXG4gICAgLy8gICAgIHJldHVybiB0b3RhbDtcclxuICAgIC8vIH1cclxuICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAvLyBjaGVjayBvdXIgZmFjdG9yaWVzXHJcblxyXG4gICAgfSBlbHNlIGlmICghcmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHJldHVybiB0b3RhbDtcclxuXHJcbiAgICBpZiAocmVzb3VyY2VOYW1lID09PSAnY2xvbmVzJyAmJiBpc1BvbmRlcmVkKCdhdXRvQ2xvbmUnKSkgdG90YWwgPSAxO1xyXG4gICAgLy8gQ2hlY2sgdG9vbHNcclxuICAgIHZhciBjdXJyVG9vbCA9IGdldFRvb2xWYWx1ZUZvclJlc291cmNlKHJlc291cmNlc1tyZXNvdXJjZU5hbWVdKTtcclxuICAgIC8vIEdhdGhlcmluZyBwZXJzb25hbGx5XHJcbiAgICBpZiAocmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgdG90YWwgKz0gY3VyclRvb2w7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgam9ic1xyXG4gICAgbGV0IGxlYWRlck11bHQgPSBoYXNQZXJrKCdMZWFkZXInKSA/IGNsb25lTXVsdCAqIDEuNSA6IGNsb25lTXVsdDtcclxuICAgIHRvdGFsICs9IGxlYWRlck11bHQgKiBnZXRXb3JrZXJzKHJlc291cmNlTmFtZSkgfHwgMDtcclxuXHJcblxyXG4gICAgLy8gQXBwbHkgcGVya3MgcHJvZHVjdGlvbiBib29zdFxyXG4gICAgaWYgKGhhc1BlcmsoJ0x1bWJlcmphY2snKSAmJiAocmVzb3VyY2VOYW1lID09ICd3b29kJyB8fCByZXNvdXJjZU5hbWUgPT0gJ3N0aWNrcycpKSB0b3RhbCAqPSAxLjI1O1xyXG4gICAgaWYgKGhhc1BlcmsoJ01pbmVyJykgJiYgKHJlc291cmNlTmFtZSA9PSAncm9ja3MnIHx8IHJlc291cmNlTmFtZSA9PSAnb3JlJykpIHRvdGFsICo9IDEuMjU7XHJcbiAgICBpZiAoaGFzUGVyaygnQm90YW5pc3QnKSAmJiAocmVzb3VyY2VOYW1lID09ICd2aW5lcycgfHwgcmVzb3VyY2VOYW1lID09ICdoZXJicycgfHwgcmVzb3VyY2VOYW1lID09ICd3aGVhdCcpKSB0b3RhbCAqPSAxLjI1O1xyXG5cclxuICAgIC8vIEFwcGx5IHNraWxscyB0byBhbGwgY2xvbmVzXHJcbiAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5hZmZlY3RlZFJlc291cmNlcy5pbmNsdWRlcyhyZXNvdXJjZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIGxldCBza2lsbFJhdGlvID0gMS4wNjtcclxuICAgICAgICAgICAgdmFyIG11bHQgPSAxICsgKE1hdGgucG93KHNraWxsUmF0aW8sIHNraWxsc1tza2lsbF0ubGV2ZWwpIC0gMSkgLyAxMDA7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTXVsdGlwbHlpbmcgZ2FpbiBieSBcIiArIG11bHQpO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBtdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gQWxsIGJ1aWxkaW5ncyBhZnRlciBsZXZlbFxyXG4gICAgZm9yIChsZXQgYnVpbGRpbmcgaW4gYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgY29uc3QgYm9vc3REYXRhID0gZ2V0Qm9vc3QoYnVpbGRpbmcsIHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgaWYgKGJvb3N0RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgaW5jcmVhc2UgPSBNYXRoLnBvdyhib29zdERhdGEsIGJ1aWxkaW5nc1tidWlsZGluZ10uY291bnQpO1xyXG4gICAgICAgICAgICBpZiAoaXNQb25kZXJlZCgnZWZmZWN0aXZlQnVpbGRpbmdzJykpIGluY3JlYXNlICo9IDEuMDE7XHJcbiAgICAgICAgICAgIHRvdGFsICo9IGluY3JlYXNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJQT05ERVJJTkcgSU5DOiBcIix0b3RhbCk7XHJcbiAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ3BvbmRlcjEnKSkgdG90YWwgKj0gMS4wNTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNQb25kZXJlZCgnZmFzdGVyUmVzb3VyY2VHYWluJykpIHRvdGFsICo9IDEuMDU7XHJcblxyXG4gICAgLy8gQ29udmVydCBmcm9tIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXHJcbiAgICB0b3RhbCAqPSBkZWx0YV90aW1lIC8gMTAwMDtcclxuICAgIC8vIHJvdW5kIHRvdGFsIHRvIG5lYXJlc3QgdGhvdXNhbmR0aFxyXG4gICAgdG90YWwgPSBwYXJzZUZsb2F0KHRvdGFsLnRvRml4ZWQoMykpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJ0aW1lIGZvciByZXNvdXJjZXNcIiwgZGVsdGFfdGltZSwgcmVzb3VyY2VOYW1lLCB0b3RhbCk7XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNTZWNvbmRzUmVtYWluaW5nKHJlc291cmNlTmFtZSwgbmVlZGVkKSB7XHJcbiAgICBpZiAobmVlZGVkIDw9IHJlc291cmNlc1tyZXNvdXJjZU5hbWVdKSByZXR1cm4gMDtcclxuXHJcbiAgICAvLyBIb3cgbXVjaCBwZXIgc2Vjb25kXHJcbiAgICBjb25zdCBpbmNyZWFzZSA9IGNhbGNJbmNyZWFzZShyZXNvdXJjZU5hbWUsIDEwMDApO1xyXG4gICAgaWYgKGluY3JlYXNlID09IDApIHJldHVybiAtMTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdwaW5nJyk7XHJcbiAgICAvLyBEaWZmZXJlbmNlIG92ZXIgdGltZVxyXG4gICAgY29uc3QgdGltZVJlbWFpbmluZyA9IE1hdGguY2VpbChuZWVkZWQgLSByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS52YWx1ZSkgLyBpbmNyZWFzZTtcclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FsYyBtaWxsaScsIHJlc291cmNlTmFtZSwgbmVlZGVkLCB0aW1lUmVtYWluaW5nKTtcclxuICAgIC8vIGlmICh0aW1lUmVtYWluaW5nID09IEluZmluaXR5IHx8IHRpbWVSZW1haW5pbmcgPT0gLUluZmluaXR5KSByZXR1cm4gLTE7XHJcbiAgICByZXR1cm4gdGltZVJlbWFpbmluZztcclxufVxyXG5cclxuLy8gQ3JlYXRlIGFsbCBvdXIgcmVzb3VyY2UgdGFncyBpbiB0aGUgc2lkZWJhclxyXG5jb25zdCByZXNvdXJjZXNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2VzJyk7XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlVGFnKHJlc291cmNlTmFtZSwgZ3JvdXBOYW1lKSB7XHJcbiAgICAvLyBpZiAoIXJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZU5hbWUpKSB0aHJvdyBcIkludmFsaWQgcmVzb3VyY2U6IFwiICsgcmVzb3VyY2VOYW1lO1xyXG4gICAgY29uc29sZS5sb2coXCJDcmVhdGluZyByZXNvdXJjZSB0YWcgZm9yIFwiLCByZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSk7XHJcbiAgICBsZXQgZ3JvdXBDb250YWluZXI7XHJcbiAgICBpZiAoZ3JvdXBOYW1lKSB7XHJcbiAgICAgICAgZ3JvdXBDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZ3JvdXAtJHtncm91cE5hbWV9YCk7XHJcbiAgICAgICAgaWYgKCFncm91cENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBncm91cENvbnRhaW5lciA9IGNyZWF0ZVJlc291cmNlR3JvdXBDb250YWluZXIoZ3JvdXBOYW1lKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzQ29udGFpbmVyLmFwcGVuZENoaWxkKGdyb3VwQ29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZXMnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXNvdXJjZURpc3BsYXlOYW1lID0gY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSkuc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmNsYXNzTmFtZSA9IGAke3Jlc291cmNlTmFtZX0gcmVzb3VyY2VgO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmlkID0gYHJlc291cmNlLSR7cmVzb3VyY2VOYW1lfWA7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlTmFtZVNwYW4uY2xhc3NOYW1lID0gJ3Jlc291cmNlTmFtZSc7XHJcbiAgICByZXNvdXJjZU5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7cmVzb3VyY2VEaXNwbGF5TmFtZX06YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVZhbHVlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmNsYXNzTmFtZSA9ICdyZXNvdXJjZVZhbHVlJztcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmlkID0gYCR7cmVzb3VyY2VOYW1lfVZhbHVlYDtcclxuICAgIGxldCBtYXggPSBnZXRNYXgocmVzb3VyY2VOYW1lKSA9PT0gSW5maW5pdHkgPyAn4oieJyA6IGdldE1heChyZXNvdXJjZU5hbWUpLnRvRml4ZWQoMik7XHJcblxyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4udGV4dENvbnRlbnQgPSBgJHtnZXRNYXRlcmlhbChyZXNvdXJjZU5hbWUpLnRvRml4ZWQoMil9IC8gJHttYXh9YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVJhdGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VSYXRlU3Bhbi5jbGFzc05hbWUgPSAncmVzb3VyY2VSYXRlJztcclxuICAgIHJlc291cmNlUmF0ZVNwYW4uaW5uZXJIVE1MID0gYCgrXHJcbiAgICAgICAgICAgIDxzcGFuIGlkPVwiJHtyZXNvdXJjZU5hbWV9SW5jcmVhc2VSYXRlXCI+MDwvc3Bhbj4vcylgO1xyXG5cclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZU5hbWVTcGFuKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZVZhbHVlU3Bhbik7XHJcbiAgICByZXNvdXJjZUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzb3VyY2VSYXRlU3Bhbik7XHJcblxyXG4gICAgLy8gcmVzb3VyY2VzQ29udGFpbmVyLmFwcGVuZENoaWxkKHJlc291cmNlRWxlbWVudCk7XHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZChyZXNvdXJjZUVsZW1lbnQpO1xyXG5cclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIG9yZGVyaW5nXHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBvcmRlciBvZiBhIHJlc291cmNlXHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VSZXNvdXJjZU9yZGVyKHJlc291cmNlSWQsIG5ld09yZGVyKSB7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyZXNvdXJjZUlkKTtcclxuICAgICAgICBpZiAocmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgcmVzb3VyY2Uuc3R5bGUub3JkZXIgPSBuZXdPcmRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1jbG9uZXNcIiwgMSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utc3RpY2tzXCIsIDIpOyAvLyBNb3ZlIFwiU3RpY2tzXCIgdG8gb3JkZXIgMlxyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXZpbmVzXCIsIDMpOyAvLyBNb3ZlIFwiVmluZXNcIiB0byBvcmRlciAzXHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utcm9ja3NcIiwgNCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZmlzaFwiLCA1KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1mcmVzaHdhdGVyXCIsIDYpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXdvb2RcIiwgNyk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utb3JlXCIsIDgpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXNhbmRcIiwgOSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtY2xheVwiLCAxMCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utd2hlYXRcIiwgMTEpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWhpZGVzXCIsIDEyKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1nYW1lXCIsIDEzKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1oZXJic1wiLCAxNCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtYmVycmllc1wiLCAxNSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtcG9uZGVyXCIsIDUwKTtcclxuXHJcblxyXG59XHJcblxyXG5cclxuLy8gRGVmaW5lIGdyb3VwcyBmb3IgeW91ciByZXNvdXJjZXNcclxuY29uc3QgcmVzb3VyY2VHcm91cHMgPSB7XHJcbiAgICBiYXNpY3M6IFsnY2xvbmVzJywgJ3N0aWNrcycsICdiZXJyaWVzJywgJ2Zpc2gnLCAnZ2FtZScsICd3aGVhdCcsICdmcmVzaHdhdGVyJ10sXHJcbiAgICBtYXRlcmlhbHM6IFsnd29vZCcsICdvcmUnLCAnc2FuZCcsICdjbGF5JywgJ3ZpbmVzJywgJ3JvY2tzJywgJ2hpZGVzJywgJ2hlcmJzJ10sXHJcbiAgICB0b29sczogWydzaGFycHJvY2tzJywgJ3JvcGUnLCAnaGFuZGxlJywgJ2Zpc2hpbmdyb2QnLCAncGlja2F4ZScsICdheGUnLCAnc3BlYXInLCAnc3RhZmYnXSxcclxuICAgIGFkdmFuY2VkOiBbJ2dsYXNzJywgJ3BhcGVyJywgJ2NyYXRlcycsICdtZWRpY2luZScsICdsZWF0aGVyJ10sXHJcbiAgICBtZXRhbDogWydnb2xkJywgJ2lyb24nLCAnc2lsdmVyJywgJ3N0ZWVsJ10sXHJcbiAgICBjb25zdHJ1Y3Rpb246IFsnYnJpY2tzJywgJ2JlYW1zJywgJ25haWxzJywgJ3NsYWJzJywgJ2NvbmNyZXRlJ11cclxuICAgIC8vIC4uLiBBZGQgb3RoZXIgZ3JvdXBzIGFzIG5lY2Vzc2FyeVxyXG59O1xyXG5cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUdyb3VwVmlzaWJpbGl0eShncm91cE5hbWUpIHtcclxuICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRvZ2dsZS0ke2dyb3VwTmFtZX1gKTsgLy8gRW5zdXJlIHlvdSBoYXZlIHRoaXMgYnV0dG9uIHdpdGggdGhlIGlkICd0b2dnbGUtZ3JvdXBOYW1lJ1xyXG5cclxuICAgIEFycmF5LmZyb20oZ3JvdXAuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1AnKSBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGdyb3VwIGlzIGN1cnJlbnRseSBoaWRkZW5cclxuICAgIGlmICh0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdhcnJvdy1kb3duJykpIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctZG93bicpO1xyXG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhcnJvdy1yaWdodCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctcmlnaHQnKTtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYXJyb3ctZG93bicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIGEgZ3JvdXAgY29udGFpbmVyXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlR3JvdXBDb250YWluZXIoZ3JvdXBOYW1lKSB7XHJcbiAgICBjb25zdCBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZ3JvdXBDb250YWluZXIuY2xhc3NOYW1lID0gJ3Jlc291cmNlR3JvdXAnO1xyXG4gICAgZ3JvdXBDb250YWluZXIuaWQgPSBgZ3JvdXAtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi50ZXh0Q29udGVudCA9IGdyb3VwTmFtZS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgdG9nZ2xlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0b2dnbGVHcm91cFZpc2liaWxpdHkoZ3JvdXBOYW1lKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc05hbWUgPSAndG9nZ2xlLWJ1dHRvbiBhcnJvdy1kb3duJztcclxuICAgIHRvZ2dsZUJ1dHRvbi5pZCA9IGB0b2dnbGUtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2dnbGVCdXR0b24pO1xyXG4gICAgcmV0dXJuIGdyb3VwQ29udGFpbmVyO1xyXG59XHJcblxyXG5cclxuLy8gSXRlcmF0ZXMgb3ZlciBlYWNoIGdyb3VwIGFuZCByZXNvdXJjZSB0byBjcmVhdGUgdGFnc1xyXG5mdW5jdGlvbiBpbml0aWFsaXplUmVzb3VyY2VUYWdzKCkge1xyXG4gICAgZm9yIChsZXQgZ3JvdXBOYW1lIGluIHJlc291cmNlR3JvdXBzKSB7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2VzID0gcmVzb3VyY2VHcm91cHNbZ3JvdXBOYW1lXTtcclxuICAgICAgICByZXNvdXJjZXMuZm9yRWFjaChyZXNvdXJjZU5hbWUgPT4ge1xyXG4gICAgICAgICAgICB0cnkgeyBjcmVhdGVSZXNvdXJjZVRhZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSk7IH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IGNvbnNvbGUubG9nKGVycm9yKTsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDYWxsIHRoaXMgZnVuY3Rpb24gb25jZSB0byBzZXQgdXAgeW91ciByZXNvdXJjZSB0YWdzXHJcbi8vIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MoKTtcclxuXHJcblxyXG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSByZXNvdXJjZXNDb250YWluZXIucXVlcnlTZWxlY3RvcihgIyR7bWF0ZXJpYWx9VmFsdWVgKTtcclxuICAgIGNvbnN0IGNyYWZ0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBidXR0b24jY3JhZnQke2NhcGl0YWxpemVGaXJzdChtYXRlcmlhbCl9YCk7XHJcbiAgICB0cnkgeyBpZiAoIWVsZW1lbnQpIGNyZWF0ZVJlc291cmNlVGFnKG1hdGVyaWFsKTsgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cclxuXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cobWF0ZXJpYWwsIGVsZW1lbnQsIGNyYWZ0ZWRCdXR0b24pO1xyXG4gICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgbWF4ID0gZ2V0TWF4KG1hdGVyaWFsKSA9PT0gSW5maW5pdHkgPyAn4oieJyA6IGdldE1heChtYXRlcmlhbCkudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGAke2dldE1hdGVyaWFsKG1hdGVyaWFsKS50b0ZpeGVkKDIpfSAvICR7bWF4fWA7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZWxlbWVudCwgbWF0ZXJpYWwsIGVycm9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIikucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyBtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbbWF0ZXJpYWxdLmlzR2V0dGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0JykuZm9yRWFjaChzID0+IHtcclxuICAgICAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHMsIG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgLy8gICAgIGlmIChzLnZhbHVlID09PSBtYXRlcmlhbCAmJiBzaWRlYmFyVGV4dCkge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHNpZGViYXJUZXh0LnN0eWxlLmNvbG9yID0gJ3RoaXN0bGUnO1xyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGNyYWZ0ZWRCdXR0b24pIHtcclxuICAgICAgICBjb25zdCBjb3VudFNwYW4gPSBjcmFmdGVkQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoYCMke21hdGVyaWFsfVZhbHVlYCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NyYWZ0ZWQgYnV0dG9uIHdhcyBmb3VuZCcsIGNvdW50U3BhbiwgbWF0ZXJpYWwsIGdldENyYWZ0ZWRSZXNvdXJjZShtYXRlcmlhbCkpO1xyXG4gICAgICAgIGlmIChjb3VudFNwYW4pIGNvdW50U3Bhbi50ZXh0Q29udGVudCA9IGdldENyYWZ0ZWRSZXNvdXJjZShtYXRlcmlhbCkudG9GaXhlZCgwKTtcclxuICAgICAgICBlbHNlIGNvbnNvbGUud2FybihgUmVzb3VyY2UgYnV0dG9uIGZvdW5kIGJ1dCBubyBjb3VudCBzcGFuIGZvcjogJHttYXRlcmlhbH1gKTtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNYXgobWF0ZXJpYWwsIG51bSkge1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS5tYXggPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNyZWFzZU1heChtYXRlcmlhbCwgbnVtKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImluY3JlYXNlIG1heCBcIiwgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLm1heCArPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG5cclxufVxyXG5cclxuLy8gR2VuZXJpYyBpbmNyZWFzZVxyXG5mdW5jdGlvbiBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCBudW0pIHtcclxuICAgIC8vIEVuc3VyZSB3ZSBhY3R1YWxseSBuZWVkIHRvIGRvIGFueXRoaW5nXHJcbiAgICBpZiAobnVtID09IDApIHJldHVybjtcclxuICAgIG1hdGVyaWFsID0gbWF0ZXJpYWwudG9Mb3dlckNhc2UoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbmNyZWFzZSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgLy8gaWYgKE1hdGguYWJzKG51bSkgPiA1KSBjb25zb2xlLmxvZygnY2hhbmdpbmcnLCBtYXRlcmlhbCwgJ2J5JywgbnVtKTtcclxuXHJcbiAgICAvLyBUaGlzIGNoZWNrIGVuc3VyZXMgdGhhdCB0aGUgbWF0ZXJpYWwga2V5IGV4aXN0cyBpbiB0aGUgcmVzb3VyY2VzIG1hcC5cclxuICAgIGlmIChyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XHJcblxyXG4gICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXRlcmlhbCkgPCBnZXRNYXgobWF0ZXJpYWwpICYmIG51bSA+IDApIHsgLy8gQWRkaW5nIHJlc291cmNlc1xyXG4gICAgICAgICAgICBpZiAoaXNQb25kZXJlZCgnZmFzdGVyUmVzb3VyY2VHYWluJykpIG51bSAqPSAxLjA1O1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuICAgICAgICAgICAgdXBkYXRlU2tpbGxzKG1hdGVyaWFsLCBudW0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobnVtIDwgMCkgeyAvLyBTdWJ0cmFjdGluZyByZXNvdXJjZXNcclxuICAgICAgICAgICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAgICAgfSBlbHNlIHsgLy8gQWxyZWFkeSBhdCBtYXhcclxuICAgICAgICAgICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSA9IGdldE1heChtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKCdhdXRvY3JhZnQnKSAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F1dG9DcmFmdENoZWNrYm94XCIpLmNoZWNrZWQgJiYgYXV0b0NyYWZ0VGFibGVbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgICAgICBjcmFmdEFsbFJlc291cmNlcyhhdXRvQ3JhZnRUYWJsZVttYXRlcmlhbF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpO1xyXG4gICAgICAgIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMoKTtcclxuXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjcmFmdGluZyBhIG1hdGVyaWFsJywgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShtYXRlcmlhbCk7XHJcbiAgICAgICAgdXBkYXRlU2tpbGxzKG1hdGVyaWFsLCBudW0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gdGhyb3cgXCJUcmllZCB0byBpbmNyZWFzZSBJbnZhbGlkIG1hdGVyaWFsOiBcIiArIG1hdGVyaWFsO1xyXG4gICAgICAgIGNyZWF0ZVJlc291cmNlVGFnKG1hdGVyaWFsKTtcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCBudW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNyYWZ0ZWQgbWF0ZXJpYWxzIGhhdmUgbm8gbWF4LCBhIGxhIEtpdHRlbnMgR2FtZVxyXG5cclxuXHJcblxyXG4gICAgdXBkYXRlU2lkZWJhcigpO1xyXG5cclxuXHJcblxyXG4gICAgLy8gcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgbWF0ZXJpYWwgKyBcIlZhbHVlXCIpLnRleHRDb250ZW50ID0gcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZTtcclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMoKSB7XHJcbiAgICAvLyBjb25zdCByZXNvdXJjZXMgPSBbXCJjbG9uZXNcIiwgXCJzdGlja3NcIiwgXCJ2aW5lc1wiLCBcInJvY2tzXCIsIFwiZmlzaFwiLCBcIndvb2RcIiwgXCJwb25kZXJcIl07XHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImluY3JlYXNlIG9mIFwiICsgcmVzb3VyY2UpO1xyXG4gICAgICAgIGNvbnN0IHJhdGUgPSBjYWxjSW5jcmVhc2UocmVzb3VyY2UsIDEwMDApO1xyXG4gICAgICAgIHZhciByYXRlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3Jlc291cmNlfUluY3JlYXNlUmF0ZWApO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAocmF0ZUVsZW1lbnQpIHJhdGVFbGVtZW50LnRleHRDb250ZW50ID0gcmF0ZTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFxyXG4gKiBAcmV0dXJucyBCdXR0b25cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihjb25maWcpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgYnV0dG9uLmNsYXNzTmFtZSA9IGNvbmZpZy5jbGFzcyArICcgdG9vbHRpcCc7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdpZCcsIGNvbmZpZy5pZCk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBidXR0b24ucmVxdWlyZW1lbnQgPSBjb25maWcucmVxdWlyZW1lbnQ7XHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5maW5kKGtleSA9PiBjcmFmdGVkUmVzb3VyY2VzW2tleV0gPT09IGNvbmZpZyk7XHJcbiAgICBjb25zdCBjbGVhbkNvdW50ID0gcGFyc2VGbG9hdChjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpLnRvRml4ZWQoMCk7XHJcbiAgICBidXR0b24uaW5uZXJIVE1MID0gYCR7Y29uZmlnLnRleHQgfHwgY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSl9OiA8c3BhbiBpZD1cIiR7cmVzb3VyY2VOYW1lICsgXCJWYWx1ZVwifVwiPiR7Y2xlYW5Db3VudH08L3NwYW4+YDtcclxuICAgIC8vIGJ1dHRvbi50b29sdGlwRGVzYyA9IGNvbmZpZy50b29sdGlwRGVzYzsgXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBidXR0b24udGFiID0gJ2V4cGVyaW1lbnQnO1xyXG5cclxuICAgIHJldHVybiBidXR0b247XHJcbn1cclxuXHJcblxyXG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3JhZnRlZFJlc291cmNlQnV0dG9ucycpO1xyXG5mdW5jdGlvbiBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zKCkge1xyXG5cclxuICAgIC8vIEZvciBlYWNoIHJlc291cmNlLCBjcmVhdGUgYSBidXR0b24gdXNpbmcgdGhlIGNhcHR1cmVkIGNvdW50c1xyXG4gICAgZm9yIChsZXQgbmFtZSBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcblxyXG4gICAgICAgIC8vIGNvbmZpZy5jb3VudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0udmFsdWU7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uKGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0pO1xyXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgY3JhZnRlZFJlc291cmNlc1tuYW1lXS50b29sdGlwRGVzYyB8fCBcIlwiKTtcclxuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlc1tuYW1lXS5jb3N0KSB8fCBcIlwiKTtcclxuXHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICAgICAgYnV0dG9uc1tjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmlkXSA9IGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9uKG5hbWUpIHtcclxuXHJcbiAgICBjb25zdCBidXR0b24gPSBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY3JhZnRlZFJlc291cmNlc1tuYW1lXSk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsIGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0udG9vbHRpcERlc2MpO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBnZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uY29zdCkpO1xyXG5cclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgYnV0dG9uc1tjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmlkXSA9IGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV07XHJcblxyXG59XHJcblxyXG4vLyBDYWxsIHRoZSBmdW5jdGlvbiB0byByZXBsYWNlIDxwPiBlbGVtZW50cyB3aXRoIHRoZSBidXR0b25zXHJcbi8vIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbignc3RpY2tzJyk7XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVRvb2x0aXBDb3N0KHJlcXVpcmVtZW50cykge1xyXG4gICAgaWYgKHJlcXVpcmVtZW50cyA9PT0gbnVsbCkgcmV0dXJuICcnO1xyXG4gICAgdmFyIHN0ciA9ICcnO1xyXG4gICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcmVxdWlyZW1lbnRzKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IHJlcXVpcmVtZW50c1ttYXRlcmlhbF07LyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi87XHJcbiAgICAgICAgY29uc3QgY29sb3JDbGFzcyA9IGhhc0Vub3VnaCA/ICdlbm91Z2gnIDogJ25vdC1lbm91Z2gnO1xyXG4gICAgICAgIHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLSR7bWF0ZXJpYWx9ICR7Y29sb3JDbGFzc31cIj4ke3JlcXVpcmVtZW50c1ttYXRlcmlhbF19ICR7bWF0ZXJpYWx9PC9zcGFuPjxicj5gO1xyXG5cclxuICAgIH1cclxuICAgIHJldHVybiBzdHI7XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgZW1vamlEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vtb2ppRGlzcGxheScpO1xyXG5mdW5jdGlvbiB1cGRhdGVFbW9qaURpc3BsYXkoKSB7XHJcbiAgICBsZXQgZW1vamlTdHIgPSBcIlwiO1xyXG5cclxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgam9iQ291bnRzIG1hcCB0byBnZXQgZWFjaCBqb2IgYW5kIGl0cyBjb3VudFxyXG4gICAgZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gbGV0IHJlc291cmNlID0gcmVzb3VyY2VzW2dldEFmZmVjdGVkUmVzb3VyY2VzKGpvYilbMF1dO1xyXG4gICAgICAgIGxldCBjb3VudCA9IGdldFdvcmtlcnMocmVzb3VyY2UpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlLCBjb3VudCk7XHJcbiAgICAgICAgaWYgKGNvdW50ID09PSB1bmRlZmluZWQgfHwgY291bnQgPT0gMCkgY29udGludWU7XHJcbiAgICAgICAgbGV0IGVtb2ppID0gcmVzb3VyY2VzW3Jlc291cmNlXS5lbW9qaSB8fCAn8JOAnyc7ICAvLyBnZXQgdGhlIGVtb2ppIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGpvYiBmcm9tIHRoZSByZXNvdXJjZXMgbWFwXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coam9iLCBlbW9qaSk7XHJcbiAgICAgICAgaWYgKGVtb2ppKSB7XHJcbiAgICAgICAgICAgIGVtb2ppU3RyICs9IGVtb2ppLnJlcGVhdChjb3VudCk7ICAvLyByZXBlYXQgdGhlIGVtb2ppIGJhc2VkIG9uIHRoZSBjb3VudFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbW9qaURpc3BsYXkudGV4dENvbnRlbnQgPSBlbW9qaVN0cjsgIC8vIHVwZGF0ZSB0aGUgZW1vamlEaXNwbGF5IGRpdiB3aXRoIHRoZSBnZW5lcmF0ZWQgZW1vamkgc3RyaW5nXHJcblxyXG4gICAgZnVuY3Rpb24gYWRqdXN0Rm9udFNpemUoKSB7XHJcbiAgICAgICAgbGV0IGZvbnRTaXplID0gNDg7ICAvLyBTdGFydGluZyBmb250IHNpemVcclxuXHJcbiAgICAgICAgZW1vamlEaXNwbGF5LnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udFNpemV9cHhgO1xyXG5cclxuICAgICAgICB3aGlsZSAoKGVtb2ppRGlzcGxheS5vZmZzZXRXaWR0aCA+IDYwMCkgJiYgZm9udFNpemUgPiAzMCkge1xyXG4gICAgICAgICAgICAvLyAxMCBpcyBhIG1pbmltdW0gZm9udC1zaXplIHRocmVzaG9sZCB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3BcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZW1vamlEaXNwbGF5Lm9mZnNldFdpZHRoLCBlbW9qaURpc3BsYXkub2Zmc2V0SGVpZ2h0KTtcclxuICAgICAgICAgICAgZm9udFNpemUgLT0gMTsgLy8gZGVjcmVhc2UgdGhlIGZvbnQgc2l6ZVxyXG4gICAgICAgICAgICBlbW9qaURpc3BsYXkuc3R5bGUuZm9udFNpemUgPSBgJHtmb250U2l6ZX1weGA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbGwgdGhpcyBmdW5jdGlvbiB3aGVuZXZlciB0aGUgY29udGVudCBvZiAjZW1vamlEaXNwbGF5IGNoYW5nZXNcclxuICAgIGFkanVzdEZvbnRTaXplKCk7XHJcblxyXG59XHJcblxyXG4vLyBDYWxsIHVwZGF0ZUVtb2ppRGlzcGxheSBldmVyeSB0aW1lIGpvYkNvdW50cyBpcyB1cGRhdGVkOlxyXG4vLyBGb3IgZXhhbXBsZTpcclxuLy8gam9iQ291bnRzLnNldCgnZmlzaGluZycsIDQpO1xyXG51cGRhdGVFbW9qaURpc3BsYXkoKTtcclxuXHJcblxyXG5jb25zdCBhdXRvQ3JhZnRUYWJsZSA9IHtcclxuICAgICdzdGlja3MnOiAnaGFuZGxlJyxcclxuICAgICd3b29kJzogJ3BhcGVyJyxcclxuICAgICdyb2Nrcyc6ICdzaGFycHJvY2tzJyxcclxuICAgICd2aW5lcyc6ICdyb3BlJyxcclxuICAgICdzYW5kJzogJ2dsYXNzJyxcclxuICAgICdvcmUnOiAnZ29sZCcsXHJcbiAgICAnY2xheSc6ICdicmlja3MnXHJcbn07XHJcblxyXG5mdW5jdGlvbiBjcmFmdEFsbFJlc291cmNlcyhyZXNvdXJjZUtleSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb3N0ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY29zdDtcclxuICAgICAgICBsZXQgc3VmZmljaWVudFJlc291cmNlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IG1hdCBpbiBjb3N0KSB7XHJcbiAgICAgICAgICAgIC8vIGlmIChnZXRNYXRlcmlhbChtYXQsIHJlc291cmNlcykgPCBjb3N0W21hdF0pIHtcclxuICAgICAgICAgICAgc3VmZmljaWVudFJlc291cmNlcy5wdXNoKGdldE1hdGVyaWFsKG1hdCwgcmVzb3VyY2VzKSAvIGNvc3RbbWF0XSk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1pbiA9IE1hdGguZmxvb3IoTWF0aC5taW4oLi4uc3VmZmljaWVudFJlc291cmNlcykpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlc291cmNlS2V5LCBtaW4pO1xyXG4gICAgICAgIGNyYWZ0UmVzb3VyY2VRdWFudGl0eShyZXNvdXJjZUtleSwgbWluKTtcclxuXHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGNyYWZ0YWxsIGZvcjogJywgcmVzb3VyY2VLZXksIGVycm9yKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JhZnRSZXNvdXJjZVF1YW50aXR5KHJlc291cmNlS2V5LCBxdWFudGl0eSkge1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlS2V5KSkgdGhyb3cgXCJJbnZhbGlkIGNyYWZ0IGZvciBtaXNzaW5nIHJlc291cmNlOiBcIiArIHJlc291cmNlS2V5O1xyXG5cclxuICAgIGlmICghY2FuQ3JhZnQocmVzb3VyY2VLZXkpKSByZXR1cm47IC8vIFRha2VzIGNhcmUgb2YgcXVhbnRpdHkgPCAxXHJcbiAgICBsZXQgY29zdCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcbiAgICAvLyBsZXQgY3JhZnRCb251cyA9IGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KTtcclxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgcXVhbnRpdHk7ICsraSkge1xyXG4gICAgLy8gICAgIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjcmFmdEJvbnVzKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBmb3IgKGxldCBtYXQgaW4gY29zdCkge1xyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwobWF0LCAtY29zdFttYXRdICogcXVhbnRpdHkpO1xyXG4gICAgfVxyXG4gICAgaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZUtleSwgcXVhbnRpdHkpO1xyXG5cclxuXHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlKSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSA9IHRydWU7XHJcblxyXG4gICAgdXBkYXRlRGlzcGxheVZhbHVlKHJlc291cmNlS2V5KTtcclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cykge1xyXG4gICAgZm9yIChsZXQgbWF0IGluIGNvc3QpIHtcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdCwgLWNvc3RbbWF0XSk7XHJcbiAgICB9XHJcbiAgICBpbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlS2V5LCAxIHx8IGNyYWZ0Qm9udXMpO1xyXG5cclxufVxyXG4vLyBDcmFmdCBmdW5jdGlvblxyXG5mdW5jdGlvbiBjcmFmdFJlc291cmNlKHJlc291cmNlS2V5KSB7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VLZXkpKSB0aHJvdyBcIkludmFsaWQgY3JhZnQgZm9yIG1pc3NpbmcgcmVzb3VyY2U6IFwiICsgcmVzb3VyY2VLZXk7XHJcblxyXG4gICAgaWYgKCFjYW5DcmFmdChyZXNvdXJjZUtleSkpIHJldHVybjtcclxuXHJcbiAgICBsZXQgY29zdCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcbiAgICBsZXQgY3JhZnRCb251cyA9IGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KTtcclxuXHJcblxyXG4gICAgY3JhZnRPbmUocmVzb3VyY2VLZXksIGNvc3QsIGNyYWZ0Qm9udXMpO1xyXG5cclxuICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyByZXNvdXJjZUtleSArIFwiVmFsdWVcIikudGV4dENvbnRlbnQgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS52YWx1ZS50b0ZpeGVkKDIpO1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSkgY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UgPSB0cnVlO1xyXG4gICAgdXBkYXRlRGlzcGxheVZhbHVlKHJlc291cmNlS2V5KTtcclxufVxyXG5cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdldE1hdGVyaWFsLFxyXG4gICAgaW5jcmVhc2VNYXRlcmlhbCxcclxuICAgIHNldE1heCxcclxuICAgIGluY3JlYXNlTWF4LFxyXG4gICAgY3JhZnRBbGxSZXNvdXJjZXMsXHJcbiAgICBjcmFmdFJlc291cmNlLFxyXG4gICAgdXBkYXRlRW1vamlEaXNwbGF5LFxyXG4gICAgdXBkYXRlRGlzcGxheVZhbHVlLFxyXG4gICAgZ2VuZXJhdGVUb29sdGlwQ29zdCxcclxuICAgIGNhbGNTZWNvbmRzUmVtYWluaW5nLFxyXG4gICAgY3JlYXRlUmVzb3VyY2VUYWcsXHJcbiAgICBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zLFxyXG4gICAgY2FsY0luY3JlYXNlLFxyXG4gICAgdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzLFxyXG4gICAgaW5pdGlhbGl6ZVJlc291cmNlVGFnc1xyXG5cclxufTsiLCIvLyBERVBFTkRTIE9OOiByZXNvdXJjZXMuanNcclxuY29uc3QgeyB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50LCByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyB1cGRhdGVEaXNwbGF5VmFsdWUsIGNhbGNJbmNyZWFzZSwgdXBkYXRlRW1vamlEaXNwbGF5IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGFkZFRvb2wsIGdldEFsbFRvb2xzIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgYWxsVmlzaWJsZUJ1dHRvbnMsIHVwZGF0ZVNpZGViYXIsIHBvcHVsYXRlU2tpbGxzVGFibGUsIHNldFZpc2libGVCdXR0b24gfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmNvbnN0IHsgZ2V0QWxsUGVya3MsIGFkZFBlcmssIGhhc1BlcmsgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGpvYkNvdW50cywgc2V0Q29ubmVjdGlvbnMsIGdldENvbm5lY3Rpb25zLCBkaXN0cmlidXRlV29ya2VycywgdXBkYXRlRGlzcGxheSB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgdG90YWxfdGltZSB9ID0gcmVxdWlyZSgnLi9tYWluJyk7XHJcbmNvbnN0IHsgc2V0QXRlRmlzaCwgZ2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcblxyXG5cclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbmNvbnN0IHsgcG9uZGVycyB9ID0gcmVxdWlyZShcIi4vanNvbi9wb25kZXJcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKFwiLi9qc29uL3NraWxsc1wiKTtcclxuY29uc3QgeyBnZXRBbGxTdGFnZXMgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcblxyXG4vLyBpbXBvcnQgam9iQ291bnRzO1xyXG4vKiBTQVZJTkcgKi9cclxuLy8gdmFyIHNhdmUgPSB7XHJcbi8vICAgICByZXNvdXJjZXM6IHJlc291cmNlcyxcclxuLy8gICAgIGNyYWZ0ZWRSZXNvdXJjZXM6IGNyYWZ0ZWRSZXNvdXJjZXMsXHJcbi8vICAgICBza2lsbHM6IHNraWxscyxcclxuLy8gICAgIHBsYXllclRvb2xzOiBwbGF5ZXJUb29sc1xyXG4vLyB9XHJcblxyXG5mdW5jdGlvbiBzYXZlR2FtZSgpIHtcclxuICAgIGxldCBzYXZlID0ge1xyXG4gICAgICAgIHNraWxsczoge30sIC8vIFRoaXMgd2lsbCBob2xkIHRoZSBleHBlcmllbmNlIGFuZCBsZXZlbCBmb3IgZWFjaCBza2lsbFxyXG4gICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXM6IHt9LCAvLyBUaGlzIHdpbGwgaG9sZCB0aGUgdmFsdWUgZm9yIGVhY2ggY3JhZnRlZCBpdGVtXHJcbiAgICAgICAgcmVzb3VyY2VzOiB7fSxcclxuICAgICAgICB0b29sczogW10sXHJcbiAgICAgICAgc3RhZ2VzOiBbXSxcclxuICAgICAgICB1bmxvY2tzOiB7fSxcclxuICAgICAgICBqb2JzOiB7fSxcclxuICAgICAgICBidWlsZGluZ3M6IHt9LFxyXG4gICAgICAgIHRpbWU6IHt9LFxyXG4gICAgICAgIGFsbFZpc2libGVCdXR0b25zOiBbXSxcclxuICAgICAgICBtZXNzYWdlOiBbXSxcclxuICAgICAgICBjb25uZWN0aW9uczogbmV3IE1hcCgpLFxyXG4gICAgICAgIHBlcmtzOiBbXVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IGV4cCBhbmQgbGV2ZWwgZnJvbSBza2lsbHMgYW5kIHNhdmUgdG8gc2F2ZS5za2lsbHNcclxuICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgIHNhdmUuc2tpbGxzW3NraWxsXSA9IHtcclxuICAgICAgICAgICAgZXhwOiBza2lsbHNbc2tpbGxdLmV4cCxcclxuICAgICAgICAgICAgbGV2ZWw6IHNraWxsc1tza2lsbF0ubGV2ZWxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV4dHJhY3QgdmFsdWUgZnJvbSBjcmFmdGVkUmVzb3VyY2VzIGFuZCBzYXZlIHRvIHNhdmUuY3JhZnRlZEl0ZW1zXHJcbiAgICBmb3IgKGxldCBpdGVtIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICBpZiAoIXNhdmUuY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShpdGVtKSkge1xyXG4gICAgICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0gPSB7IHZhbHVlOiAwLCBjcmFmdGVkT25jZTogZmFsc2UgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNhdmUuY3JhZnRlZFJlc291cmNlc1tpdGVtXS52YWx1ZSA9IGdldENyYWZ0ZWRSZXNvdXJjZShpdGVtKTtcclxuICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0uY3JhZnRlZE9uY2UgPSBjcmFmdGVkUmVzb3VyY2VzW2l0ZW1dLmNyYWZ0ZWRPbmNlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpdGVtIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBpdGVtIGV4aXN0cyBpbiB0aGUgc2F2ZS5yZXNvdXJjZXMgb2JqZWN0LiBJZiBub3QsIGluaXRpYWxpemUgaXQuXHJcbiAgICAgICAgaWYgKCFzYXZlLnJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShpdGVtKSkge1xyXG4gICAgICAgICAgICBzYXZlLnJlc291cmNlc1tpdGVtXSA9IHsgdmFsdWU6IDAsIG1heDogMCB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2F2ZS5yZXNvdXJjZXNbaXRlbV0udmFsdWUgPSBnZXRNYXRlcmlhbChpdGVtLCByZXNvdXJjZXMpO1xyXG4gICAgICAgIHNhdmUucmVzb3VyY2VzW2l0ZW1dLm1heCA9IHJlc291cmNlc1tpdGVtXS5tYXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZS50b29scyA9IGdldEFsbFRvb2xzKCk7XHJcbiAgICBzYXZlLnN0YWdlcyA9IGdldEFsbFN0YWdlcygpO1xyXG4gICAgc2F2ZS5qb2JzID0gam9iQ291bnRzO1xyXG4gICAgc2F2ZS5wZXJrcyA9IGdldEFsbFBlcmtzKCk7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgc2F2ZS5jb25uZWN0aW9ucyA9IEFycmF5LmZyb20oZ2V0Q29ubmVjdGlvbnMoKS5lbnRyaWVzKCkpO1xyXG5cclxuICAgIGZvciAobGV0IHUgaW4gcG9uZGVycykge1xyXG4gICAgICAgIHNhdmUudW5sb2Nrc1t1XSA9IGlzUG9uZGVyZWQodSk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgYiBpbiBidWlsZGluZ3MpIHtcclxuICAgICAgICBzYXZlLmJ1aWxkaW5nc1tiXSA9IGJ1aWxkaW5nc1tiXS5jb3VudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhhbGxWaXNpYmxlQnV0dG9ucy52YWx1ZXMoKSk7XHJcbiAgICBmb3IgKGxldCBhIGluIGFsbFZpc2libGVCdXR0b25zKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYSk7XHJcbiAgICAgICAgc2F2ZS5hbGxWaXNpYmxlQnV0dG9ucy5wdXNoKGEpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNhdmUuYWxsVmlzaWJsZUJ1dHRvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RUZXh0RnJvbUhUTUwoaHRtbFN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sU3RyaW5nO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0Q29udGVudCA9IGRpdi50ZXh0Q29udGVudDtcclxuICAgICAgICBjb25zdCBzcGFuVGV4dCA9IGRpdi5xdWVyeVNlbGVjdG9yKCdzcGFuJykudGV4dENvbnRlbnQ7XHJcblxyXG4gICAgICAgIHJldHVybiBbdGV4dENvbnRlbnQsIHNwYW5UZXh0XTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBodG1sU3RyaW5nID0gcmVxdWlyZSgnLi9tYWluJykuZ2V0TWVzc2FnZSgpLmlubmVySFRNTDtcclxuXHJcbiAgICBzYXZlLm1lc3NhZ2UgPSBleHRyYWN0VGV4dEZyb21IVE1MKGh0bWxTdHJpbmcpOyAvLyBbbWVzc2FnZSwgc3Bhbl1cclxuXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coY29tYmluZWRUZXh0KTsgLy8gXCJZb3UgZmluZCB5b3Vyc2VsZiBhbG9uZSBpbiBhIGZvcmVzdFwiXHJcbiAgICAvLyBjb25zb2xlLmxvZyhzcGFuVGV4dCk7IC8vIFwiYWxvbmVcIlxyXG5cclxuXHJcbiAgICBzYXZlLnRpbWVbJ3RvdGFsX3RpbWUnXSA9IHRvdGFsX3RpbWU7XHJcbiAgICBzYXZlLnRpbWVbJ3RpbWVfb2Zfc2F2ZSddID0gRGF0ZS5ub3coKTtcclxuICAgIC8vIFlvdSBjYW4gbm93IHVzZSB0aGUgc2F2ZSBvYmplY3QgdG8gc3RvcmUgdGhlIGRhdGEgc29tZXdoZXJlIG9yIGRpc3BsYXkgaXQgdG8gdGhlIHVzZXJcclxuXHJcbiAgICBjb25zb2xlLmxvZyhzYXZlKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHNhdmUpKTtcclxuXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNhdmVcIiwgSlNPTi5zdHJpbmdpZnkoc2F2ZSkpO1xyXG4gICAgcmV0dXJuIHNhdmU7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbG9hZEdhbWUoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkxvYWRpbmcgR2FtZVwiKTtcclxuICAgIHZhciBzYXZlZ2FtZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzYXZlXCIpKTtcclxuICAgIGNvbnNvbGUubG9nKHNhdmVnYW1lKTtcclxuICAgIGlmIChzYXZlZ2FtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIE5FVyBHQU1FXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5yZXNvdXJjZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBmb3IgKGxldCBpIGluIHNhdmVnYW1lLnJlc291cmNlcykge1xyXG4gICAgICAgICAgICBpZiAoaS52YWx1ZU9mKCkgPT09IFwidW5kZWZpbmVkXCIgfHwgaSA9PT0gbnVsbCkgY29udGludWU7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1tpXS52YWx1ZSA9IHNhdmVnYW1lLnJlc291cmNlc1tpXS52YWx1ZTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW2ldLm1heCA9IHNhdmVnYW1lLnJlc291cmNlc1tpXS5tYXg7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgcmVzb3VyY2VzIGZvciBcIiArIGkgKyBcIiB0byBcIiArIHNhdmVnYW1lLnJlc291cmNlc1tpXS52YWx1ZSwgc2F2ZWdhbWUucmVzb3VyY2VzW2ldLm1heCk7XHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbaV0udmFsdWUgIT0gMCkgdXBkYXRlRGlzcGxheVZhbHVlKGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnNraWxscyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCBpIGluIHNhdmVnYW1lLnNraWxscykge1xyXG4gICAgICAgICAgICBza2lsbHNbaV0uZXhwID0gc2F2ZWdhbWUuc2tpbGxzW2ldLmV4cDtcclxuICAgICAgICAgICAgc2tpbGxzW2ldLmxldmVsID0gc2F2ZWdhbWUuc2tpbGxzW2ldLmxldmVsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgb2YgT2JqZWN0LmtleXMoc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlcykpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2xvYWRpbmcgY3JhZnRlZCcsIGtleSwgc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlc1trZXldLCBjcmFmdGVkUmVzb3VyY2VzW2tleV0pO1xyXG4gICAgICAgICAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNba2V5XSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZSA9IHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihjcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWUpKSBjcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWUgPSAwO1xyXG4gICAgICAgICAgICBjcmFmdGVkUmVzb3VyY2VzW2tleV0uY3JhZnRlZE9uY2UgPSBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzW2tleV0uY3JhZnRlZE9uY2U7XHJcbiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnRvb2xzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIC8vIHBsYXllclRvb2xzID0gc2F2ZWdhbWUudG9vbHM7XHJcbiAgICAgICAgLy8gVW5pb24gdGhlIHRvb2wgbGlzdHMgdG9nZXRoZXJcclxuICAgICAgICBsZXQgdW5pb24gPSBbLi4ubmV3IFNldChbLi4uZ2V0QWxsVG9vbHMoKSwgLi4uc2F2ZWdhbWUudG9vbHNdKV07XHJcbiAgICAgICAgLy8gcGxheWVyVG9vbHMgPSB1bmlvbjtcclxuICAgICAgICBmb3IgKGxldCB0b29sIGluIHVuaW9uKSB7XHJcbiAgICAgICAgICAgIGFkZFRvb2wodG9vbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmb3IgKGxldCB0IGluIHBsYXllclRvb2xzKSB7XHJcbiAgICAgICAgLy8gICAgIHVwZGF0ZVRvb2xVSShwbGF5ZXJUb29sc1t0XSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuc3RhZ2VzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAobGV0IHMgaW4gc2F2ZWdhbWUuc3RhZ2VzKSB7XHJcbiAgICAgICAgICAgIG1ha2VWaXNpYmxlKHNhdmVnYW1lLnN0YWdlc1tzXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5qb2JzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIC8vIGpvYkNvdW50cyA9IHNhdmVnYW1lLmpvYnM7XHJcbiAgICAgICAgZm9yIChsZXQgaiBpbiBzYXZlZ2FtZS5qb2JzKSB7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqXSA9IHNhdmVnYW1lLmpvYnNbal07XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGopO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5KGopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUudW5sb2NrcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCB1IGluIHNhdmVnYW1lLnVubG9ja3MpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHBvbmRlcnNbdV0uaXNQb25kZXJlZCA9IHNhdmVnYW1lLnVubG9ja3NbdV07XHJcblxyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdPbGQgc2F2ZSBkYXRhIGluY2x1ZGVzIG9ic29sZXRlIHBvbmRlcicsIHUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1BvbmRlcmVkKCdza2lsbHNUYWJsZScpKSB7XHJcbiAgICAgICAgcG9wdWxhdGVTa2lsbHNUYWJsZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5idWlsZGluZ3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgYiBpbiBzYXZlZ2FtZS5idWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYiwgc2F2ZWdhbWUuYnVpbGRpbmdzW2JdKTtcclxuICAgICAgICAgICAgYnVpbGRpbmdzW2JdLmNvdW50ID0gc2F2ZWdhbWUuYnVpbGRpbmdzW2JdO1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgYnV0dG9uIHRleHRcclxuICAgICAgICAgICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChiLCBidWlsZGluZ3NbYl0uY291bnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjb3N0cyBvZiBhbGwgdGhlIGJ1aWxkaW5nc1xyXG4gICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChiLCBidWlsZGluZ3MsIGhhc1BlcmspO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBtYXggYXMgaW5mbHVlbmNlZCBieSB0aGlzIGJ1aWxkaW5nXHJcbiAgICAgICAgICAgIC8vIFRPRE86IERvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBidWlsZGluZyBib29zdHNcclxuICAgICAgICAgICAgLy8gaWYgKGJ1aWxkaW5nc1tiXS5lZmZlY3RzKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBmb3IgKGxldCBtYXQgaW4gYnVpbGRpbmdzW2JdLmVmZmVjdHMpIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICBzZXRNYXgobWF0LCBidWlsZGluZ3NbYl0uY291bnQgKiBidWlsZGluZ3NbYl0uZWZmZWN0c1ttYXRdKTtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgd2UgaGF2ZSBhIGNsb25lLCB0aGVuIHdlIGF0ZSBmaXNoXHJcbiAgICBzZXRBdGVGaXNoKHJlc291cmNlcy5jbG9uZXMubWF4ID49IDEpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2F0ZWZpc2gnLCBhdGVGaXNoKTtcclxuICAgIGlmIChnZXRBdGVGaXNoKCkpIHtcclxuICAgICAgICBjb25zdCBmaXNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlYXRGaXNoXCIpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmaXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgICAvLyBDaGFuZ2UgdGhlIG1lc3NhZ2UgdG8gdGhlIGxhdGVzdCBvbmVcclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUubWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBbZnVsbCBtZXNzYWdlLCBzcGFuXVxyXG4gICAgICAgIHJlcXVpcmUoJy4vbWFpbicpLmNoYW5nZU1lc3NhZ2Uoc2F2ZWdhbWUubWVzc2FnZVswXSwgc2F2ZWdhbWUubWVzc2FnZVsxXSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgcmVzb3VyY2VzIGVhcm5lZCB3aGlsZSBhd2F5XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnRpbWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9tYWluJykuc2V0VG90YWxUaW1lKHNhdmVnYW1lLnRpbWVbdG90YWxfdGltZV0pO1xyXG4gICAgICAgIGNvbnN0IHRpbWVfZGlmZmVyZW5jZSA9IERhdGUubm93KCkgLSBzYXZlZ2FtZS50aW1lWyd0aW1lX29mX3NhdmUnXTtcclxuICAgICAgICBmb3IgKGxldCByIGluIHJlc291cmNlcykge1xyXG4gICAgICAgICAgICBjb25zdCBpbmMgPSBjYWxjSW5jcmVhc2UociwgdGltZV9kaWZmZXJlbmNlKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW3JdLnZhbHVlICs9IGluYztcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cociwgdGltZV9kaWZmZXJlbmNlLCBpbmMpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW3JdLnZhbHVlID4gcmVzb3VyY2VzW3JdLm1heCkgcmVzb3VyY2VzW3JdLnZhbHVlID0gcmVzb3VyY2VzW3JdLm1heDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyk7XHJcbiAgICAgICAgZm9yIChsZXQgYSBpbiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucykge1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5jb25uZWN0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBzZXRDb25uZWN0aW9ucyhuZXcgTWFwKHNhdmVnYW1lLmNvbm5lY3Rpb25zKSk7XHJcblxyXG4gICAgICAgIGlmIChnZXRDb25uZWN0aW9ucygpLnNpemUgPT09IDApIHNldENvbm5lY3Rpb25zKG5ldyBNYXAoKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coZ2V0Q29ubmVjdGlvbnMoKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZvciAobGV0IGpvYiBpbiBqb2JDb3VudHMpIHtcclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2IsIGpvYkNvdW50c1tqb2JdKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVFbW9qaURpc3BsYXkoKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnBlcmtzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIC8vIG15UGVya3MgPSBzYXZlZ2FtZS5wZXJrcztcclxuICAgICAgICBmb3IgKGxldCBwZXJrIGluIHNhdmVnYW1lLnBlcmtzKSB7XHJcbiAgICAgICAgICAgIGFkZFBlcmsocGVyayk7XHJcbiAgICAgICAgICAgIHJlcXVpcmUoJy4vc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24nKS5zZWxlY3RDb3JyZWN0UGVya0J1dHRvbihwZXJrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuLy8gc2F2ZSB0aGUgdGltZSB3aGVuIHRoZSBwbGF5ZXIgZXhpdHMgdGhlIGJyb3dzZXIgdGFiXHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsICgpID0+IHNhdmVHYW1lKCkpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHNhdmVHYW1lLFxyXG4gICAgbG9hZEdhbWVcclxufTsiLCIvKipcclxuICogU2VsZWN0IHRoZSBwZXJrIGJ1dHRvbiB0aGF0IHdlJ3ZlIGNob3NlbiBhbmQgZGlzYWJsZSB0aGUgb3RoZXJzXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhYmlsaXR5TmFtZSBOYW1lIG9mIHRoZSBjaG9zZW4gcGVya1xyXG4gKi9cclxuZnVuY3Rpb24gc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24oYWJpbGl0eU5hbWUpIHtcclxuICAgIC8vIERpc2FibGUgYWxsIGJ1dHRvbnNcclxuICAgIGxldCBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRpZXJPbmVCdXR0b24nKTtcclxuICAgIGxldCBzZWxlY3RlZEJ1dHRvbjtcclxuICAgIHRyeSB7IHNlbGVjdGVkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7YWJpbGl0eU5hbWV9UGVya2ApOyB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxyXG4gICAgaWYgKHNlbGVjdGVkQnV0dG9uKSB7XHJcbiAgICAgICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gRW5hYmxlIGFuZCBoaWdobGlnaHQgdGhlIHNlbGVjdGVkIGJ1dHRvblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkQnV0dG9uLCBhYmlsaXR5TmFtZSk7XHJcbiAgICAgICAgc2VsZWN0ZWRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIHNlbGVjdGVkQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignTm8gYnV0dG9uIGZvdW5kIHdpdGggYWJpbGl0eSBuYW1lOiAnICsgYWJpbGl0eU5hbWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24gPSBzZWxlY3RDb3JyZWN0UGVya0J1dHRvbjsiLCJsZXQgc3RhZ2VzID0gW107XHJcbmZ1bmN0aW9uIHNldFN0YWdlKHN0YWdlKSB7XHJcbiAgICBzdGFnZXMucHVzaChzdGFnZSk7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFnZSBTdGFnZSB0byBjaGVja1xyXG4gKiBAcmV0dXJucyBib29sZWFuIGlmIHN0YWdlIGluIHN0YWdlc1xyXG4gKi9cclxuZnVuY3Rpb24gcGFzc2VkU3RhZ2Uoc3RhZ2UpIHtcclxuICAgIHJldHVybiBzdGFnZXMuaW5jbHVkZXMoc3RhZ2UpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFsbFN0YWdlcygpIHtcclxuICAgIHJldHVybiBzdGFnZXM7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2V0U3RhZ2UsXHJcbiAgICBwYXNzZWRTdGFnZSxcclxuICAgIGdldEFsbFN0YWdlc1xyXG59OyIsIi8qIFRPT0xTICovXHJcblxyXG5cclxuLy8gTGlzdCB0byBob2xkIHRoZSB0b29sc1xyXG5sZXQgcGxheWVyVG9vbHMgPSBbJ0JhcmUgSGFuZHMnXTtcclxuXHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdG8gY2hlY2sgaWYgYSB0b29sIGlzIHByZXNlbnQgaW4gdGhlIGxpc3QgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b29sIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIGhhc1Rvb2wodG9vbCkge1xyXG4gICAgcmV0dXJuIHBsYXllclRvb2xzLmluY2x1ZGVzKHRvb2wpO1xyXG59XHJcblxyXG4vLyBGdW5jdGlvbiB0byBhZGQgYSB0b29sIGlmIGl0J3Mgbm90IGFscmVhZHkgcHJlc2VudFxyXG5mdW5jdGlvbiBhZGRUb29sKHRvb2wpIHtcclxuICAgIC8vIElnbm9yZSB0b29scyB0aGF0IGFyZSBqdXN0IG51bWJlcnNcclxuICAgIGlmICghaXNOYU4odG9vbCkgJiYgLy8gdXNlIHR5cGUgY29lcmNpb24gdG8gcGFyc2UgdGhlIF9lbnRpcmV0eV8gb2YgdGhlIHN0cmluZyAoYHBhcnNlRmxvYXRgIGFsb25lIGRvZXMgbm90IGRvIHRoaXMpLi4uXHJcbiAgICAgICAgIWlzTmFOKHBhcnNlRmxvYXQodG9vbCkpKSAvLyAuLi5hbmQgZW5zdXJlIHN0cmluZ3Mgb2Ygd2hpdGVzcGFjZSBmYWlsXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFoYXNUb29sKHRvb2wpKSB7XHJcbiAgICAgICAgcGxheWVyVG9vbHMucHVzaCh0b29sKTtcclxuXHJcbiAgICAgICAgdXBkYXRlVG9vbFVJKHRvb2wpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBbGxUb29scygpIHtcclxuICAgIHJldHVybiBwbGF5ZXJUb29scztcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVG9vbFVJKHRvb2wpIHtcclxuICAgIC8vIFVwZGF0ZSB0aGUgVUlcclxuICAgIHZhciB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9vbHMtbGlzdFwiKTtcclxuICAgIHZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRvb2wpKTtcclxuICAgIGlmICh1bCkgdWwuYXBwZW5kQ2hpbGQobGkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZShyZXNvdXJjZSkge1xyXG4gICAgaWYgKHJlc291cmNlLnRvb2xzKSB7XHJcbiAgICAgICAgLy8gU29ydCB0aGUgdG9vbHMgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiB0aGVpciB2YWxcclxuICAgICAgICBjb25zdCBzb3J0ZWRUb29scyA9IHJlc291cmNlLnRvb2xzLnNvcnQoKGEsIGIpID0+IGIudmFsIC0gYS52YWwpO1xyXG5cclxuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHNvcnRlZCB0b29sc1xyXG4gICAgICAgIGZvciAobGV0IHRvb2wgb2Ygc29ydGVkVG9vbHMpIHtcclxuICAgICAgICAgICAgaWYgKGhhc1Rvb2wodG9vbC50b29sKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHBsYXllciBoYXMgdGhlIHRvb2wsIHJldHVybiBpdHMgYXNzb2NpYXRlZCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvb2wudmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIG5vbmUgb2YgdGhlIHRvb2xzIGFyZSBmb3VuZCwgcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlXHJcbiAgICByZXR1cm4gMTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBoYXNUb29sLFxyXG4gICAgYWRkVG9vbCxcclxuICAgIGdldEFsbFRvb2xzLFxyXG4gICAgZ2V0VG9vbFZhbHVlRm9yUmVzb3VyY2VcclxufTsiLCJjb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5cclxuY29uc3QgcmVzb3VyY2VMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlTGlzdCcpO1xyXG5jb25zdCBnb2xkQW1vdW50RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ29sZEFtb3VudCcpO1xyXG4vLyBsZXQgZ29sZEFtb3VudCA9IDEwMDA7IC8vIFNhbXBsZSBzdGFydGluZyBhbW91bnRcclxuLy8gY29uc3QgdHJhZGVCb251cyA9IDAuOTsgLy8gMTAlIGRpc2NvdW50XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVRyYWRlVGFibGUocmVzb3VyY2VzKSB7XHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG4gICAgICAgIGNvbnN0IHByaWNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKSArIDEwOyAvLyBSYW5kb20gcHJpY2UgYmV0d2VlbiAxMCBhbmQgMTEwIGZvciB0aGlzIGV4YW1wbGUuXHJcblxyXG4gICAgICAgIHJvdy5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRyYWRldGRcIj4ke3Jlc291cmNlfTwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRyYWRldGRcIj4ke3ByaWNlfTwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRyYWRldGRcIiBzdHlsZT1cImRpc3BsYXk6ZmxleDsgZmxleC1kaXJlY3Rpb246cm93O1wiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1eUJ0blwiIGRhdGEtcmVzb3VyY2U9XCIke3Jlc291cmNlfVwiIGRhdGEtcHJpY2U9XCIke3ByaWNlfVwiPkJ1eTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInNlbGxCdG5cIiBkYXRhLXJlc291cmNlPVwiJHtyZXNvdXJjZX1cIiBkYXRhLXByaWNlPVwiJHtwcmljZX1cIj5TZWxsPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgYDtcclxuXHJcbiAgICAgICAgcmVzb3VyY2VMaXN0LmFwcGVuZENoaWxkKHJvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIGJ1eSBhbmQgc2VsbCBidXR0b25zXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnV5QnRuJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzb3VyY2UnKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXByaWNlJykpO1xyXG4gICAgICAgICAgICBidXlSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VsbEJ0bicpLmZvckVhY2goYnRuID0+IHtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJlc291cmNlJyk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wcmljZScpKTtcclxuICAgICAgICAgICAgc2VsbFJlc291cmNlKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTaW1pbGFybHksIHlvdSBjYW4gYWRkIGV2ZW50IGxpc3RlbmVycyBmb3Igc2VsbCBidXR0b25zIGhlcmVcclxufVxyXG5cclxuZXhwb3J0cy5nZW5lcmF0ZVRyYWRlVGFibGUgPSBnZW5lcmF0ZVRyYWRlVGFibGU7XHJcblxyXG5leHBvcnRzLmJ1eVJlc291cmNlID0gYnV5UmVzb3VyY2U7XHJcbmV4cG9ydHMuc2VsbFJlc291cmNlID0gc2VsbFJlc291cmNlO1xyXG5cclxuZnVuY3Rpb24gYnV5UmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKSB7XHJcblxyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdnb2xkJywgcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcykgPj0gcHJpY2UpIHtcclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwoJ2dvbGQnLCAtcHJpY2UpO1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZSwgcHJpY2UpO1xyXG4gICAgICAgIGdvbGRBbW91bnRFbC50ZXh0Q29udGVudCA9IGdldE1hdGVyaWFsKCdnb2xkJywgcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcyk7XHJcbiAgICAgICAgLy8gYWxlcnQoYFlvdSBib3VnaHQgJHtyZXNvdXJjZX0gZm9yICR7cHJpY2UudG9GaXhlZCgyKX0gZ29sZCFgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gYWxlcnQoXCJZb3UgZG9uJ3QgaGF2ZSBlbm91Z2ggZ29sZCFcIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbGxSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpIHtcclxuICAgIGlmIChnZXRNYXRlcmlhbChyZXNvdXJjZSwgcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcykgPj0gMSkge1xyXG5cclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwoJ2dvbGQnLCBwcmljZSk7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCAtMSk7XHJcbiAgICAgICAgZ29sZEFtb3VudEVsLnRleHRDb250ZW50ID0gZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKTtcclxuICAgIH1cclxuICAgIC8vIGFsZXJ0KGBZb3Ugc29sZCAke3Jlc291cmNlfSBmb3IgJHtwcmljZS50b0ZpeGVkKDIpfSBnb2xkIWApO1xyXG59IiwiY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgZ2V0QnVpbGRpbmdDb3VudCB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQsIGNhblVubG9jayB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyB9ID0gcmVxdWlyZShcIi4vanNvbi9jcmFmdGVkUmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGlzQnV0dG9uSWRWaXNpYmxlLCBjYW5CdXlCdWlsZGluZywgc2V0VmlzaWJsZUJ1dHRvbiB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbi8qKlxyXG4gKiBDaGFuZ2VzIHRoZSBzdGF0ZXMgb2YgYnV0dG9ucyBiZXR3ZWVuICdoaWRkZW4nLCAncHVyY2hhc2FibGUnLCBhbmQgJ2J1dHRvbi1kaXNhYmxlZCdcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKSB7XHJcbiAgICBjb25zdCBzZWxlY3RCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJyk7IC8vIEFkanVzdCB0aGUgc2VsZWN0b3IgYWNjb3JkaW5nbHlcclxuXHJcbiAgICBzZWxlY3RCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICBjb25zdCBidXR0b25Db25maWcgPSBidXR0b25zW2J1dHRvbi5pZF07IC8qIGdldCB0aGUgYnV0dG9uJ3MgY29uZmlndXJhdGlvbiB1c2luZyBpdHMgZGF0YSBhdHRyaWJ1dGUgb3IgSUQsIGV0Yy4gKi8gLyogZ2V0IHRoZSBidXR0b24ncyBjb25maWd1cmF0aW9uIHVzaW5nIGl0cyBkYXRhIGF0dHJpYnV0ZSBvciBJRCwgZXRjLiAqLy8qIGdldCB0aGUgYnV0dG9uJ3MgY29uZmlndXJhdGlvbiB1c2luZyBpdHMgZGF0YSBhdHRyaWJ1dGUgb3IgSUQsIGV0Yy4gKi8gLyogZ2V0IHRoZSBidXR0b24ncyBjb25maWd1cmF0aW9uIHVzaW5nIGl0cyBkYXRhIGF0dHJpYnV0ZSBvciBJRCwgZXRjLiAqLztcclxuICAgICAgICBpZiAoIWJ1dHRvbkNvbmZpZykgcmV0dXJuO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nLCBidXR0b25Db25maWcucmVxdWlyZW1lbnQpO1xyXG4gICAgICAgIC8vIFJlc2V0IGFsbCBzdGF0ZXMgZmlyc3RcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgJ2J1dHRvbi1kaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICB2YXIgc3RhdGUgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgaWYgKGJ1dHRvbi5pZCAmJiBpc0J1dHRvbklkVmlzaWJsZShidXR0b24uaWQpKSBzdGF0ZSA9ICdidXR0b24tZGlzYWJsZWQnO1xyXG5cclxuICAgICAgICAvLyBJZiByZXF1aXJlbWVudCBpcyBtZXQsIGl0IHNob3VsZCBiZSB2aXNpYmxlXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gbGV0IGdldE1hdGVyaWFsID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpLmdldE1hdGVyaWFsO1xyXG4gICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnJlcXVpcmVtZW50KCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcbiAgICAgICAgICAgICAgICAvLyBhbHdheXMgcHVyY2hhc2FibGUgZ2F0aGVyIGJ1dHRvbnNcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiICYmICFidXR0b25Db25maWcuZGF0YV9idWlsZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgPT09ICdwcm9kdWN0aW9uJykgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHBvbmRlciBidXR0b25cclxuICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWQgJiYgYnV0dG9uLmlkID09PSAnZ2F0aGVyUG9uZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwb25kZXIgdW5sb2Nrc1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgJiYgYnV0dG9uQ29uZmlnLnRhYiA9PT0gJ3BvbmRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24uY2xhc3NMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmlkICYmIGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3VubG9jaycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbmxvY2soYnV0dG9uLmlkKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIHBvbmRlciBidXR0b24gaXMgdW5sb2NrZWQsIGhpZGUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoYnV0dG9uLmdldEF0dHJpYnV0ZSgndW5sb2NrJykpKSBzdGF0ZSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24sIHN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGFiIGJ1dHRvbnMgYWx3YXlzIGVpdGhlciBoaWRkZW4gb3IgZW5hYmxlZFxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgJiYgYnV0dG9uQ29uZmlnLnRhYiA9PT0gJ3RhYnMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdFcnJvciB3aXRoIGNoZWNraW5nIHJlcXVpcmVtZW50IG9mIGJ1dHRvbjogJywgYnV0dG9uQ29uZmlnLCBlcnIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5pZCAmJiBidXR0b25Db25maWcuaWQuc2xpY2UoMCwgNSkgPT09ICdjcmFmdCcpIHtcclxuICAgICAgICAgICAgLy8gbmV2ZXIgaGlkZSB0aGlzIGJ1dHRvbiBvbmNlIGl0cyBiZWVuIHVubG9ja2VkXHJcbiAgICAgICAgICAgIGlmIChidXR0b25Db25maWcuY3JhZnRlZE9uY2UpIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gSWYgd2UgY2FuIGFmZm9yZCB0aGlzIGNyYWZ0LCBpdCBzaG91bGQgYmUgcHVyY2hhc2FibGVcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHZhciBjcmFmdGVkID0gZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZChidXR0b25Db25maWcuaWQpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjcmFmdGVkKTtcclxuICAgICAgICAgICAgaWYgKGNyYWZ0ZWQudmFsdWUgPiAwKSBzdGF0ZSA9ICdidXR0b24tZGlzYWJsZWQnO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnKGNyYWZ0ZWQpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXkpO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgaWYgKGNhbkNyYWZ0KGtleSkpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGNhbiBhZmZvcmQgdGhpcyBidWlsZGluZywgaXQgc2hvdWxkIGJlIHB1cmNoYXNhYmxlXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBwdXJjaGFzZWQgYSBidWlsZGluZywgaXQgc2hvdWxkIGJlIHZpc2libGVcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHN0YXRlID0gZ2V0QnVpbGRpbmdDb3VudChidXR0b25Db25maWcuZGF0YV9idWlsZGluZykgPyAnYnV0dG9uLWRpc2FibGVkJyA6IHN0YXRlO1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBidWlsZGluZyBjb3N0XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBzdGF0ZSA9IGNhbkJ1eUJ1aWxkaW5nKGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSA/ICdwdXJjaGFzYWJsZScgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGhpZGRlbiBpcyBtZXQsIGl0IHNob3VsZCBiZSBoaWRkZW5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmhpZGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBidXR0b25Db25maWcuaGlkZSgpID8gJ2hpZGRlbicgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIGN1cnJlbnQgc3RhdGVcclxuICAgICAgICBpZiAoc3RhdGUgIT09ICcnKSBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QtcHVyY2hhc2FibGUsIGRpc2FibGUgdGhlIGJ1dHRvblxyXG4gICAgICAgIC8vIGJ1dHRvbi5kaXNhYmxlZCA9IHN0YXRlID09PSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgZm9yIHRoaXMgYnV0dG9uIGlmIGl0cyBhY3RpdmVcclxuICAgICAgICAvLyBpZiAoYnV0dG9uID09PSBjdXJyZW50SG92ZXJCdXR0b24pIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAvLyBJZiB0aGUgc3RhdGUgaXMgaGlkZGVuLCBzZXQgdGhlIGJ1dHRvbidzIGRpc3BsYXkgdG8gbm9uZVxyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsYnV0dG9uKTtcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FsbCB2aXNpYmxlICcsIGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIHNldFZpc2libGVCdXR0b24oYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gVGhpcyB3aWxsIHJldmVydCBpdCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBkaXNwbGF5IHN0YXRlIG9yIGRlZmF1bHQgKGUuZy4sICdibG9jaycgb3IgJ2lubGluZS1ibG9jaycpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpvYi1idXR0b24nKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgY29uc3Qgam9iID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgJ2J1dHRvbi1kaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICB2YXIgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGNvbnN0IHJlcVBvbmRlciA9IChyZXF1aXJlKCcuL2pvYlJlcXVpcmVkUG9uZGVycycpLmpvYlJlcXVpcmVkUG9uZGVycylbam9iXTtcclxuICAgICAgICBpZiAocmVxUG9uZGVyID09PSBudWxsIHx8IHJlcVBvbmRlciA9PT0gdW5kZWZpbmVkKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgZWxzZSBpZiAoaXNQb25kZXJlZChyZXFQb25kZXIpKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgZWxzZSBpZiAocmVxUG9uZGVyID09PSAnbm90LXVubG9ja2FibGUnKSBzdGF0ZSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIGVsc2Ugc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGpvYiwgYnV0dG9uLCByZXFQb25kZXIsIHN0YXRlKTtcclxuICAgICAgICAvLyBidXR0b24uY2xhc3NMaXN0LlxyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsYnV0dG9uKTtcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FsbCB2aXNpYmxlICcsIGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIHNldFZpc2libGVCdXR0b24oYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoc3RhdGUpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7IC8vIFRoaXMgd2lsbCByZXZlcnQgaXQgYmFjayB0byBpdHMgb3JpZ2luYWwgZGlzcGxheSBzdGF0ZSBvciBkZWZhdWx0IChlLmcuLCAnYmxvY2snIG9yICdpbmxpbmUtYmxvY2snKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMudXBkYXRlQnV0dG9uVmlzaWJpbGl0eSA9IHVwZGF0ZUJ1dHRvblZpc2liaWxpdHk7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDgpO1xuIl0sIm5hbWVzIjpbImF0ZUZpc2giLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0QXRlRmlzaCIsImJvb2wiLCJnZXRBdGVGaXNoIiwiYnVpbGRpbmdzIiwiYnV0dG9ucyIsInJlc291cmNlcyIsImluY3JlYXNlTWF0ZXJpYWwiLCJpbmNyZWFzZU1heCIsImNhbkJ1eUJ1aWxkaW5nIiwidXBkYXRlU2lkZWJhciIsInVwZGF0ZVRvdGFsIiwiaGFzUGVyayIsImNhcGl0YWxpemVGaXJzdCIsImdldE1hdGVyaWFsIiwicGFzc2VkU3RhZ2UiLCJyZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCIsImJ1aWxkaW5nS2V5IiwiYnVpbGRpbmciLCJjb3N0IiwicmF0aW8iLCJtYXRlcmlhbCIsIk1hdGgiLCJyb3VuZCIsImJhc2Vjb3N0IiwicG93IiwiY291bnQiLCJteUJ1dHRvbiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm5ld1RleHQiLCJnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QiLCJzZXRBdHRyaWJ1dGUiLCJlZmZlY3RTdHJpbmciLCJlZmZlY3RQYXJ0cyIsInJlc291cmNlIiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwiZWZmZWN0cyIsInB1c2giLCJib29zdCIsInBlcmNlbnRhZ2VCb29zdCIsImpvaW4iLCJnZW5lcmF0ZUVmZmVjdFN0cmluZyIsIm1hcCIsImFtb3VudCIsInRvRml4ZWQiLCJjcmVhdGVCdWlsZGluZ0J1dHRvbiIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImNvc3RzIiwicmVxdWlyZW1lbnRGdW5jdGlvbiIsImNvc3RDb25kaXRpb24iLCJldmVyeSIsImZsb29yIiwiY2xvbmVDb25kaXRpb24iLCJjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsInRvb2x0aXBEZXNjIiwiYnV0dG9uIiwiYnV5QnVpbGRpbmciLCJidWlsZGluZ05hbWUiLCJjb25zb2xlIiwibG9nIiwidXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCIsImJ1aWxkaW5nQ291bnQiLCJnZXRFbGVtZW50QnlJZCIsInRleHRDb250ZW50Iiwic3BsaXQiLCJidXlNYXhCdWlsZGluZ3MiLCJjcmFmdGVkUmVzb3VyY2VzIiwiY2FuQ3JhZnQiLCJyZXNvdXJjZUtleSIsInJlcXVpcmVtZW50cyIsIm1hdCIsImVyciIsIndhcm4iLCJzdHIiLCJjcmFmdFJlc291cmNlIiwic3dpdGNoZWRNYW51ZmFjdHVyZWRNYXAiLCJhbGxNYXRlcmlhbHMiLCJjcmVhdGVGYWN0b3J5RGl2IiwiZmFjdG9yaWVzQ29udGFpbmVyIiwiZmFjdG9yeURpdiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJsZWZ0VGV4dCIsInJpZ2h0U2VsZWN0Iiwia2V5cyIsImZvckVhY2giLCJvcHRpb24iLCJhcHBlbmRDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdHlsZSIsImNvbG9yIiwiYXJyb3ciLCJpbm5lckhUTUwiLCJzZWxlY3RFbGVtZW50IiwidGV4dCIsImluaXRpYWxPcHRpb24iLCJkaXNhYmxlZCIsInNlbGVjdGVkIiwiYWRkSW5pdGlhbE9wdGlvbiIsInIiLCJtYW51ZmFjdHVyZUJ1bGsiLCJidWxrVXBncmFkZUNvc3QiLCJuZXdGYWN0b3J5U2lsdmVyQ29zdCIsImF0dGVtcHRNYW51ZmFjdHVyZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmYWN0b3J5IiwibGVmdFNlbGVjdCIsImdvYWxSZXNvdXJjZSIsIm51bSIsIm1pbiIsImkiLCJtYW51ZmFjdHVyZSIsImJ1eUZhY3RvcnkiLCJidXlGYWN0b3J5QnV0dG9uIiwidXBncmFkZUJ1bGsiLCJnZXRDcmFmdGVkUmVzb3VyY2UiLCJ0b0xvd2VyQ2FzZSIsImhhc093blByb3BlcnR5Iiwic2tpbGxzIiwiYWxsVmlzaWJsZUJ1dHRvbnMiLCJTZXQiLCJnZXRNYXgiLCJtYXgiLCJJbmZpbml0eSIsImFiYnJldmlhdGVOdW1iZXIiLCJmb3JtYXQiLCJ1bml0Iiwicm91bmRUb0RlY2ltYWxzIiwibnVtYmVyIiwiZGVjaW1hbHMiLCJmYWN0b3IiLCJ0b1N0cmluZyIsImxldmVsVXBNZXNzYWdlIiwiaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSIsInBvcHVsYXRlU2tpbGxzVGFibGUiLCJ0YWJsZSIsInNraWxsIiwiZXhwIiwibGV2ZWwiLCJkaXNwbGF5IiwicHJvZ3Jlc3NCYXIiLCJ3aWR0aCIsInRyIiwiaWQiLCJ0ZFByb2dyZXNzIiwicG9zaXRpb24iLCJoZWlnaHQiLCJza2lsbFRleHQiLCJsZWZ0IiwidG9wIiwidHJhbnNmb3JtIiwiQXJyYXkiLCJmcm9tIiwicmVzb3VyY2VOYW1lIiwicmVzb3VyY2VDb25maWciLCJwYXJlbnRFbGVtZW50Iiwic2hvdWxkSGlkZSIsImMiLCJjbGFzc0xpc3QiLCJpc1Zpc2libGUiLCJkaXNwbGF5RWxlbSIsInVwZGF0ZVNraWxscyIsImFicyIsImFmZmVjdGVkUmVzb3VyY2VzIiwiaW5jbHVkZXMiLCJyZW1vdmUiLCJzZXRUaW1lb3V0IiwiYWRkIiwiY2FsY0NyYWZ0Qm9udXMiLCJpc0J1dHRvbklkVmlzaWJsZSIsImhhcyIsInNldFZpc2libGVCdXR0b24iLCJjYW5CdXkiLCJjbGVhclNpZGViYXIiLCJpc1BvbmRlcmVkIiwiam9iQ291bnRzIiwiam9ic1RhYiIsImdldFRvdGFsSm9icyIsInRvdGFsIiwiaiIsImpvYkRpdiIsImRlY3JlbWVudERpdiIsImpvYk5hbWVTcGFuIiwiaW5jcmVtZW50RGl2IiwiYnRuIiwiam9iVHlwZSIsInRoaXMiLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwiZGlzdHJpYnV0ZVdvcmtlcnMiLCJ1cGRhdGVEaXNwbGF5Iiwid29ya2Vyc0Rpc3RyaWJ1dGlvbiIsIk1hcCIsInRvdGFsV29ya2VycyIsImZpbHRlciIsIm51bWJlck9mUmVzb3VyY2VzIiwibGVuZ3RoIiwicGVyUmVzb3VyY2UiLCJzZXQiLCJyZW1haW5pbmdXb3JrZXJzIiwiZ2V0IiwidGhpc0pvYkJ1dHRvbiIsImpvYkVsZW1lbnQiLCJjb25uZWN0aW9ucyIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJkcmF3TGluZSIsInN0YXJ0RWxlbWVudCIsImVuZFgiLCJlbmRZIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInN0YXJ0WCIsInN0YXJ0WSIsInNjcm9sbFkiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJjb250ZXh0IiwiZnJvbVgiLCJmcm9tWSIsInRvWCIsInRvWSIsInJhZGl1cyIsImFuZ2xlIiwieCIsInkiLCJ4X2NlbnRlciIsInlfY2VudGVyIiwiYXRhbjIiLCJjb3MiLCJzaW4iLCJQSSIsImNsb3NlUGF0aCIsImZpbGwiLCJkcmF3QXJyb3doZWFkIiwic3dpdGNoSm9iIiwib2xkSm9iSWQiLCJuZXdKb2JJZCIsIndvcmtlcnMiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjbGVhckpvYkFzc2lnbm1lbnRzIiwiY2xlYXJSZWN0IiwicmVhc3NpZ25Kb2JzQmFzZWRPblJlc291cmNlcyIsInVuZGVmaW5lZCIsImRhdGFKb2IiLCJvbGRJZCIsInJlcGxhY2UiLCJuZXdJZCIsIm1heGVkT3V0IiwicmVzb3VyY2VBcnJheSIsImVycm9yIiwiZHJhd0FsbENvbm5lY3Rpb25zIiwib2xkQnV0dG9uIiwibmV3QnV0dG9uIiwibmV3WCIsIm5ld1kiLCJib3R0b20iLCJvZmZzZXRUb3AiLCJvZmZzZXRIZWlnaHQiLCJnZXRXb3JrZXJzIiwic2V0Q29ubmVjdGlvbnMiLCJuZXdDb25uZWN0aW9ucyIsImdldENvbm5lY3Rpb25zIiwicm9ja3MiLCJ3b29kIiwidmluZXMiLCJzdGlja3MiLCJnYW1lIiwiZmlzaCIsImdsYXNzIiwicG9uZGVyIiwiZ2V0QnVpbGRpbmdDb3VudCIsImdldEJvb3N0IiwiaGFzVG9vbCIsImNsYXNzIiwidGFiIiwidG9vbHRpcENvc3QiLCJyZXF1aXJlbWVudCIsImhpZGUiLCJzaG93VGFiIiwiY3JhZnRlZE9uY2UiLCJnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkIiwiZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWciLCJjb25maWciLCJrIiwicGVya3MiLCJwb25kZXJzIiwiZW1vamkiLCJpc1Jlc291cmNlIiwiZ2V0UmVzb3VyY2VDb25maWdCeUlkIiwiZ2F0aGVyaW5nIiwibWFzb25yeSIsIm5lZWRUb29scyIsImNhcnBlbnRyeSIsInRoaW5raW5nIiwic21pdGhpbmciLCJmYXJtaW5nIiwiY29tYmF0IiwiZmlzaGluZyIsImh1bnRpbmciLCJzYXZlR2FtZSIsImxvYWRHYW1lIiwiZ2VuZXJhdGVUb29sdGlwQ29zdCIsImFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMiLCJjcmFmdEFsbFJlc291cmNlcyIsImNhbGNJbmNyZWFzZSIsInVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyIsImNhbGNTZWNvbmRzUmVtYWluaW5nIiwiaW5pdGlhbGl6ZVJlc291cmNlVGFncyIsInNlbGVjdEFiaWxpdHkiLCJtYWtlVmlzaWJsZSIsInVwZGF0ZUJ1dHRvblZpc2liaWxpdHkiLCJnZW5lcmF0ZVBvbmRlckJ1dHRvbnMiLCJhZGRUb29sIiwic2lkZWJhclBhcmVudCIsImVtb2ppR2F0aGVyRGl2IiwidG9vbHNUb1N0YWdlcyIsInZpc2liaWxpdHlSdWxlcyIsImNvbmRpdGlvbiIsImFjdGlvbiIsImxvY2F0aW9uIiwiaHJlZiIsInRhYkNvbnRhaW5lcnMiLCJ0YWJOYW1lIiwicHJldlRhYiIsImNvbnRlbnQiLCJjb250YWlucyIsInRhYnMiLCJ0YWJTdHJpbmciLCJhY3RpdmVUYWJCdXR0b24iLCJldmVudCIsImtleSIsImRhcmtNb2RlVG9nZ2xlIiwiYm9keSIsInRvZ2dsZSIsImlzRGFyayIsIm92ZXJsYXkiLCJtZXNzYWdlRWxlbWVudCIsImNoYW5nZU1lc3NhZ2UiLCJuZXdNZXNzYWdlIiwiY2xvbmVXb3JkcyIsIm1vZGlmaWVkTWVzc2FnZSIsIm1pbGxpc2Vjb25kc19wZXJfZnJhbWUiLCJsYXN0X3RpbWUiLCJ0b3RhbF90aW1lIiwiYWNjdW11bGF0ZWRfbGFnIiwibG9vcCIsImN1cnJlbnRfdGltZSIsImRlbHRhX3RpbWUiLCJub3JtYWxSYXRlIiwidXBkYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGltZV9zaW5jZV9sYXN0X3NhdmUiLCJ0aW1lX3NpbmNlX21hbnVmYXR1cmUiLCJydWxlIiwidG9vbCIsImN1cnJlbnRIb3ZlckJ1dHRvbiIsInVwZGF0ZVRvb2x0aXAiLCJyZW5kZXIiLCJ0b29sdGlwIiwiZGVzYyIsImVmZmVjdCIsInRhcmdldCIsImNvbG9yQ2xhc3MiLCJzZWNvbmRzUmVtYWluaW5nIiwicmlnaHQiLCJzaG93VG9vbHRpcCIsImdldENSS2V5RnJvbUlEIiwidHJhY2UiLCJjcmVhdGVDb2x1bW5zIiwicGFyZW50IiwiY29sMSIsImNvbDIiLCJjb2wzIiwicHJlcGVuZCIsInRhYnNDb250YWluZXIiLCJwcm9kdWN0aW9uQ29udGFpbmVyIiwiZXhwZXJpbWVudENvbnRhaW5lciIsInBvbmRlckNvbnRhaW5lciIsInByb2R1Y3Rpb25Db2x1bW5zIiwiZXhwZXJpbWVudENvbHVtbnMiLCJwb25kZXJDb2x1bW5zIiwicHJvZHVjdGlvbkNvbHVtbkluZGV4IiwiZXhwZXJpbWVudENvbHVtbkluZGV4IiwicG9uZGVyQ29sdW1uSW5kZXgiLCJidXR0b25FbGVtZW50IiwidG9vbHRpcEVmZmVjdCIsInVubG9jayIsImRhdGFfYnVpbGRpbmciLCJjcmFmdGVkUmVzb3VyY2UiLCJ2YWx1ZXMiLCJmaW5kIiwiZ2VuZXJhdGVCdXR0b25zIiwibWF0Y2hlcyIsInNoaWZ0S2V5IiwidW5sb2NrQXR0ciIsImNhblVubG9jayIsInNpZGViYXJUZXh0IiwicmVzb3VyY2VCdXR0b24iLCJpc0dldHRpbmciLCJkZWZhdWx0VGV4dCIsImZvbnRXZWlnaHQiLCJyQnV0dG9uIiwic3RvcEFsbEdhdGhlcmluZyIsImFjdGl2ZVRleHQiLCJ0b2dnbGVSZXNvdXJjZSIsImdldFJLZXlGcm9tSUQiLCJvdmVybGF5VGV4dCIsIm92ZXJsYXlCdXR0b24iLCJvcGFjaXR5IiwiZmFkZVRvQmxhY2siLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwicmVsb2FkIiwicGVyayIsImZhY3RvcnlCdXR0b25zIiwidXBncmFkZUJ1bGtCdXR0b24iLCJtYWtlRmFjdG9yeUJ1dHRvbnMiLCJlIiwidXBkYXRlVUkiLCJyZXNvdXJjZURpdiIsInNldFRvdGFsVGltZSIsInRpbWUiLCJnZXRNZXNzYWdlIiwic2V0U3RhZ2UiLCJzdGFnZSIsInN0YWdlRWxlbWVudHMiLCJlbGVtZW50IiwibXlQZXJrcyIsInBlcmtOYW1lIiwiYWRkUGVyayIsImIiLCJhYmlsaXR5TmFtZSIsImNvbmZpcm0iLCJnZXRQZXJrRnJvbVRpZXIiLCJ0aWVyTnVtIiwiZ2V0QWxsUGVya3MiLCJ1bmxvY2tJZCIsInVubG9ja0tleSIsInBvbmRlck9iamVjdHMiLCJwb25kZXJLZXkiLCJwb25kZXJPYmoiLCJidXR0b25LZXkiLCJnZXRUb29sVmFsdWVGb3JSZXNvdXJjZSIsImN1cnJUb29sIiwiY2xvbmVNdWx0Iiwic2tpbGxSYXRpbyIsImJvb3N0RGF0YSIsImluY3JlYXNlIiwicGFyc2VGbG9hdCIsInJlc291cmNlc0NvbnRhaW5lciIsImNyZWF0ZVJlc291cmNlVGFnIiwiZ3JvdXBOYW1lIiwiZ3JvdXBDb250YWluZXIiLCJ0b2dnbGVCdXR0b24iLCJvbmNsaWNrIiwiZ3JvdXAiLCJjaGlsZHJlbiIsInRhZ05hbWUiLCJ0b2dnbGVHcm91cFZpc2liaWxpdHkiLCJjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyIiwicmVzb3VyY2VEaXNwbGF5TmFtZSIsInJlc291cmNlRWxlbWVudCIsInJlc291cmNlTmFtZVNwYW4iLCJyZXNvdXJjZVZhbHVlU3BhbiIsInJlc291cmNlUmF0ZVNwYW4iLCJjaGFuZ2VSZXNvdXJjZU9yZGVyIiwicmVzb3VyY2VJZCIsIm5ld09yZGVyIiwib3JkZXIiLCJyZXNvdXJjZUdyb3VwcyIsImJhc2ljcyIsIm1hdGVyaWFscyIsInRvb2xzIiwiYWR2YW5jZWQiLCJtZXRhbCIsImNvbnN0cnVjdGlvbiIsInVwZGF0ZURpc3BsYXlWYWx1ZSIsImNyYWZ0ZWRCdXR0b24iLCJjb3VudFNwYW4iLCJjaGVja2VkIiwiYXV0b0NyYWZ0VGFibGUiLCJjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24iLCJjbGVhbkNvdW50IiwiY29udGFpbmVyIiwiZW1vamlEaXNwbGF5IiwidXBkYXRlRW1vamlEaXNwbGF5IiwiZW1vamlTdHIiLCJyZXBlYXQiLCJmb250U2l6ZSIsIm9mZnNldFdpZHRoIiwiYWRqdXN0Rm9udFNpemUiLCJzdWZmaWNpZW50UmVzb3VyY2VzIiwicXVhbnRpdHkiLCJjcmFmdFJlc291cmNlUXVhbnRpdHkiLCJzZXRNYXgiLCJjcmFmdEJvbnVzIiwiY3JhZnRPbmUiLCJuZWVkZWQiLCJjZWlsIiwibmFtZSIsInJhdGUiLCJyYXRlRWxlbWVudCIsImdldEFsbFRvb2xzIiwiZ2V0QWxsU3RhZ2VzIiwic2F2ZSIsInN0YWdlcyIsInVubG9ja3MiLCJqb2JzIiwibWVzc2FnZSIsIml0ZW0iLCJ1IiwiYSIsImh0bWxTdHJpbmciLCJkaXYiLCJleHRyYWN0VGV4dEZyb21IVE1MIiwiRGF0ZSIsIm5vdyIsInNldEl0ZW0iLCJzYXZlZ2FtZSIsImdldEl0ZW0iLCJ2YWx1ZU9mIiwiTnVtYmVyIiwiaXNOYU4iLCJ1bmlvbiIsInMiLCJjbG9uZXMiLCJ0aW1lX2RpZmZlcmVuY2UiLCJpbmMiLCJzaXplIiwiam9iIiwic2VsZWN0Q29ycmVjdFBlcmtCdXR0b24iLCJzZWxlY3RlZEJ1dHRvbiIsInJlbW92ZUF0dHJpYnV0ZSIsInBsYXllclRvb2xzIiwidWwiLCJsaSIsImNyZWF0ZVRleHROb2RlIiwidXBkYXRlVG9vbFVJIiwic29ydGVkVG9vbHMiLCJzb3J0IiwidmFsIiwicmVzb3VyY2VMaXN0IiwiZ29sZEFtb3VudEVsIiwiYnV5UmVzb3VyY2UiLCJwcmljZSIsInNlbGxSZXNvdXJjZSIsImdlbmVyYXRlVHJhZGVUYWJsZSIsInJvdyIsInJhbmRvbSIsImJ1dHRvbkNvbmZpZyIsInN0YXRlIiwiY3JhZnRlZCIsInJlcVBvbmRlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iXSwic291cmNlUm9vdCI6IiJ9