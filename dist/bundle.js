(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},151:(e,t,o)=>{const{buildings:s}=o(882),{buttons:n}=o(54),{resources:i}=o(587),{increaseMaterial:r,increaseMax:a}=o(594),{canBuyBuilding:c,updateSidebar:l}=o(78),{updateTotal:d}=o(150),{hasPerk:u}=o(134),{capitalizeFirst:f}=o(681),{getMaterial:p}=o(924),{passedStage:b}=o(751);function h(e,t,o){let s=t[e];if(s&&s.cost&&s.ratio)for(let e in s.cost)s.cost[e]=Math.round(s.basecost[e]*Math.pow(s.ratio,s.count)),o("Architect")&&(s.cost[e]*=.75);const n=document.querySelector("#"+e);var i=g(s.cost);if(!n)throw"Button not found for "+e;{n.setAttribute("data-tooltip-cost",i);const e=function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));t.push(`+${e}% ${o} production`)}return t.join(", ")}(s);n.setAttribute("data-tooltip-effect",e)}}function g(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")}function m(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e,t){return function(o){const s=Object.entries(e).every((([e,t])=>p(e,o)>=Math.floor(t/2))),n=!t.effects||!t.effects.clones||b("clones");return s&&n}}(o.cost,o);return{class:"tooltip "+e,tab:"production",text:`${e.charAt(0).toUpperCase()+e.slice(1)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}}for(let e in s){const t=m(e,s);n[e]=t}function y(e){console.log("Buying building "+e);const t=s[e];if(c(e)){for(const e in t.cost)r(e,-t.cost[e]);for(const e in t.effects)a(e,t.effects[e]);t.count++,l(),d(),v(e,t.count),h(e,s,u)}}function v(e,t){document.getElementById(`${e}`).textContent=`${f(e).split("_").join(" ")} (${t})`}e.exports={recalculateBuildingCost:h,generateBuildingTooltipCost:g,createBuildingButton:m,updateBuildingButtonCount:v,buyMaxBuildings:function(e){for(;c(e);)y(e)},buyBuilding:y}},64:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=n[e].cost;try{for(let e in o)if(i(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){if(e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e))return t[e].value;throw"Invalid crafted resource:"+e}},924:(e,t,o)=>{const{getCraftedResource:s}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},78:(e,t,o)=>{const{resources:s}=o(587),{skills:n}=o(324),{buildings:i}=o(882),{getMaterial:r}=o(924);let a=new Set(["gatherSticks"]);function c(e){return s.hasOwnProperty(e)?s[e].max:1/0}function l(e){function t(e,t){return e<10?o(e,3)+t:e<100?o(e,2)+t:e<1e3?o(e,1)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,2):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):e.toString()}t.allVisibleButtons=a;const d=document.getElementById("levelUpMessage");let u=!1;function f(){const e=document.getElementById("skillsTable");if(u)for(let e in n){(n[e].exp>0||n[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=n[e].exp+"%",document.querySelector("#level-"+e).textContent="["+n[e].level+"]   "+e)}else{console.log("Generating table for the first time"),u=!0;for(let t in n){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent="["+n[t].level+"]   "+t,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==n[t].exp&&0==n[t].level&&(o.style.display="none"),s.appendChild(i),s.appendChild(r),o.appendChild(s),e.appendChild(o)}}}e.exports={getMaterial:r,getMax:c,updateSidebar:function(){for(const[n,i]of Object.entries(s)){const r=document.getElementById("resource-"+n);if(!r)return;var e=!0;for(let t in r.classList)o(751).passedStage(t)&&(e=!1,console.log("dont hide",n,t));i.value>0&&(e=!1,s[n].isVisible=!0),i.isVisible&&(e=!1),e&&(r.style.display="none");const a=document.getElementById(n+"Value");if(a){var t="#fff";i.value===c(n)?t="#fcc":i.value/c(n)>.6&&(t="#eeb"),a.innerHTML=`<span style="color:${t}">${l(i.value)} / ${l(c(n))} </span>`}}},updateSkills:function(e,t){t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05);for(let o in n)if(n[o].affectedResources.includes(e)){if(n[o].level>=100){n[o].level=100,n[o].exp=0;continue}n[o].exp+=t/Math.pow(1.4,n[o].level),n[o].exp>=100&&(n[o].level+=1,n[o].exp=0,d.textContent=`Level up! ${o} → ${n[o].level}`,d.classList.remove("hidden"),setTimeout((()=>{d.classList.add("hidden")}),3e3))}o(751).passedStage("skillsTable")&&f()},populateSkillsTable:f,calcCraftBonus:function(e){return 1},isButtonIdVisible:function(e){return a.has(e)},setVisibleButton:function(e){a.add(e)},canBuyBuilding:function(e){let t=!0;const o=i[e];for(const e in o.cost)if(o.cost[e]>r(e,s)){t=!1;break}return t},hasGeneratedSkillTable:u}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combat",hunting:"hunting"}},150:(e,t,o)=>{const{skills:s}=o(324),{resources:n}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),c={};for(let e in s)c[e]=0;const l=document.getElementById("jobsTab");function d(){var e=0;for(let t in c)e+=c[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),l.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");i("clones",n)>d()&&c[e]++,f(e,c[e]),p(e),b(),console.log(u)}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");c[e]>0&&(c[e]--,f(e,c[e]),p(e),b())}))}));let u=new Map;function f(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let e of o)u.set(e,r);let a=t-r*i;for(let e of o)a>0&&(u.set(e,u.get(e)+1),a--)}function p(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${c[e]}`),o(594).updateEmojiDisplay()}function b(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+d()+" / "+a("clones")}let h=new Map,g=document.getElementById("lineCanvas"),m=g.getContext("2d");function y(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;m.beginPath(),m.moveTo(n,i),m.lineTo(t,o),m.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,d=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(m,n,i,t,o,10)}function v(e,t){let o=c[e];c[e]=0,c[t]+=o,p(e),p(t)}g.width=window.innerWidth,g.height=window.innerHeight,e.exports={clearJobAssignments:function(){m.clearRect(0,0,g.width,g.height),h=new Map},reassignJobsBasedOnResources:function(){try{const e=h.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let l=!0,d=s[e].affectedResources;if(!d)return;for(const e of d)if(void 0!==n[e]&&i(e)<n[e].max){l=!1;break}l&&c[e]>0&&(v(r,a),f(r,c[r]),f(a,c[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:v,drawAllConnections:function(){m.clearRect(0,0,g.width,g.height);try{for(let[e,t]of h.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,y(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return u.get(e)},updateTotal:b,setConnections:function(e){h=e},getConnections:function(){return h},distributeWorkers:f,updateDisplay:p,jobCounts:c}},882:e=>{const t={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.3,tooltipDesc:"For when you need a home away from home."},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.2,tooltipDesc:"A cozy, idyllic chunk of wood."},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.4,tooltipDesc:"Every clone's dream. Minus the white picket fence."},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home."},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.1,tooltipDesc:"The ultimate storage solution for the pack rat in you."},stockpile:{basecost:{rocks:30},effects:{wood:100},ratio:1.1,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.1,tooltipDesc:"Air drying: Nature's way of preserving food."},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.2,tooltipDesc:"DIY's dream destination."},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing."},bakery:{basecost:{wood:80,wheat:100,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready."},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you."},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster."},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required."},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore."},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.05},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted."},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!"},fishery:{basecost:{wood:40,rope:15},effects:{},boost:{fish:1.1},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food."},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals."},water_well:{basecost:{rocks:30,rope:1,wood:10},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar."},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather."},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.2,herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter."},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power."},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly."},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!"}};e.exports={buildings:t,getBuildingCount:function(e){return t[e].count},getBoost:function(e,o){const s=t[e];if(s&&s.boost){if(s.boost[o])return s.boost[o];if(s.boost.all)return s.boost.all}return null}}},54:(e,t,o)=>{const{passedStage:s}=o(751),{getMaterial:n}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},tradeTabButton:{class:"tab-button",text:"Trade",showTab:"tradeTab",tab:"tabs",requirement:()=>s("tradeTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:s}=o(924),{getCraftedResource:n}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocks",value:0,cost:{rocks:2},craftedOnce:!1,requirement:()=>s("rocks",i)>=5,tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRope",value:0,cost:{vines:3},craftedOnce:!1,requirement:()=>s("vines",i)>=3,tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"rope"},handle:{id:"craftHandle",value:0,cost:{sticks:2},craftedOnce:!1,requirement:()=>n("sharpRocks")>=1,tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaff",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requirement:()=>n("handle")>=1,tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requirement:()=>r("fishing"),tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"rope"},spear:{id:"craftSpear",value:0,cost:{staff:1,sharpRocks:1,rope:1},craftedOnce:!1,requirement:()=>n("staff")>=1,tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxe",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requirement:()=>n("spear")>=1,tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"rope"},pickaxe:{id:"craftPickaxe",value:0,cost:{handle:1,sharpRocks:3,rope:1,rocks:10},craftedOnce:!1,requirement:()=>n("axe")>=1,tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"rope"},glass:{id:"craftGlass",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requirement:()=>r("glassBlowing")},paper:{id:"craftPaper",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requirement:()=>r("paper")},gold:{id:"craftGold",value:0,cost:{ore:100},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIron",value:0,cost:{ore:20},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilver",value:0,cost:{ore:50},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricks",value:0,cost:{clay:15},craftedOnce:!1,requirement:()=>s("clay",i)>5,tooltipDesc:"Leave some clay by the fire",tooltipCost:""}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(let t in a)if(a[t].id===e)return a[t];return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{e.exports={ponders:{ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:40},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 1%",cost:{ponder:140}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:150}},combat:{id:"ponderCombat",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:140,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},autocraft:{id:"ponderAutocraft",requirement:()=>!0,isPondered:!1,text:"Auto Craft",tooltipDesc:"Automatically craft resources when they reach the storage limit",cost:{ponder:400,wood:1e3,rocks:500,wheat:1e3}},finish:{id:"ponderFinish",requirement:()=>!0,isPondered:!1,text:"Finish the Game",tooltipDesc:"That's it. You're done",cost:{ponder:1e3}},trading:{id:"ponderTrading",isPondered:!1,text:"Trading",tooltipDesc:"You met someone! Time to trade with them.",cost:{gold:10,ponder:400}}}}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},smithing:{exp:0,level:0,affectedResources:["axe","pickaxe","spear","glass","iron","silver","gold"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:[]},fishing:{exp:0,level:0,affectedResources:["fish","freshwater"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,getCraftedResourceConfigById:n}=o(371),{buildings:i}=o(882),{ponders:r}=o(397),{buttons:a}=o(54),{resources:c,getResourceConfigById:l}=o(587),{saveGame:d,loadGame:u}=o(502),{createResourceTag:f,generateTooltipCost:p,appendCraftedResourceButtons:b,increaseMaterial:h,craftAllResources:g,craftResource:m,calcIncrease:y,updateResourceIncreaseRates:v,calcSecondsRemaining:k,increaseMax:x}=o(594),{recalculateBuildingCost:w,buyMaxBuildings:T,buyBuilding:C}=o(151),{hasPerk:B,selectAbility:S}=o(134),{updateSidebar:A,getMax:R}=o(78),{makeVisible:D}=o(123),{updateButtonVisibility:q}=o(667),{getCraftedResource:M}=o(590),{getMaterial:E}=o(924),{canUnlock:P,isPondered:j,generatePonderButtons:F}=o(369),{hasTool:$,addTool:O}=o(609),{getAteFish:I,setAteFish:L}=o(621),{drawAllConnections:G,updateTotal:V}=o(150),{capitalizeFirst:W}=o(681),{passedStage:H}=o(751),_=document.querySelector("#resources"),N=document.querySelector("#emojiGatherDisplay"),J={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},U=[{condition:()=>E("sticks",c)>=1,action:()=>D("stick")},{condition:()=>E("sticks",c)>=10,action:()=>D("vines")},{condition:()=>E("vines",c)>=10,action:()=>D("rocks")},{condition:()=>E("rocks",c)>=1,action:()=>{D("tab-button"),D("craftRocks")}},{condition:()=>E("fish",c)>=1,action:()=>D("fishing")},{condition:()=>$("Axe"),action:()=>D("wood")},{condition:()=>M("rope")>=1,action:()=>D("rope")},{condition:()=>E("fish",c)>=5&&!I(),action:()=>{document.getElementById("eatFish").style.display="block",document.getElementById("eatFish").classList.add("visible")}},{condition:()=>I(),action:()=>{D("clone"),D("ponder-tab")}}];let z=document.querySelectorAll(".tab-content > .content");function Y(e){console.log("show tab: "+e);for(let e of z)e.classList.remove("active");let t=document.querySelectorAll(".tab-button");for(let e of t)e.classList.remove("active");document.getElementById(e).classList.add("active");const o=`#${e}Button`;let s=document.querySelector(o);s&&s.classList.add("active"),"jobsTab"===e&&G()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":Y("productionTab");break;case"2":H("tab-button")&&Y("experimentTab");break;case"3":H("ponder-tab")&&Y("ponderTab");break;case"4":H("jobs-tab")&&Y("jobsTab");break;case"5":H("skillsTable")&&Y("skillsTab");break;case"6":H("perksTab")&&Y("perksTab");break;case"7":H("trading")&&Y("tradeTab")}}));const K=document.getElementById("darkModeToggle"),Q=document.body;Q.classList.toggle("dark-mode"),K.classList.toggle("dark");let X=!0;const Z=document.getElementById("overlay"),ee=document.getElementById("message");function te(e,t){const o=e.replace(t,`<span id="alone" title="You feel peckish for some seafood">${t}</span>`);ee.innerHTML=o}let oe=50,se=null,ne=0,ie=0;function re(e){null===se&&(se=e);const t=e-se;ne+=t,ie+=t,se=e;let o=oe;for(ie>=10*oe&&(oe=ie/10);ie>=oe;)ie-=oe,ce(oe);oe=o,requestAnimationFrame(re)}let ae=0;function ce(e,t){for(let t in c)h(t,y(t,e));v(),function(){U.forEach((e=>{e.condition()&&e.action()}));for(let e in J)!$(e)&&M(e)>0&&(O(e),D(J[e]));try{q(),null!==ue&&de(ue)}catch(e){console.warn(e)}}(),ae+=e,ae>=1e4&&(d(),ae=0)}const le=document.getElementById("dynamic-tooltip");function de(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),s=l(e.id)||n(e.id)||i[e.getAttribute("data_building")]||r[e.getAttribute("unlock")],a=e.getAttribute("tooltipCost")||s.cost;!function(e,t,o,s){let n="";if(t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#00ABE7">${o}</span><hr>`),s)try{var i="";for(let e in s){const t=s[e];var r=E(e,c)>=t?"enough":"not-enough";R(e)<t&&(r="exceeds-max"),i+=`<span class="tooltip-${e} ${r}">${t.toFixed(0)} ${e}</span>`;const o=k(e,t);o>0&&"exceeds-max"!=r&&(i+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),i+="<br>"}n+=i}catch(e){n+=s}le.innerHTML=n,le.style.left=e.getBoundingClientRect().right+5+"px",le.style.top=e.getBoundingClientRect().top-le.offsetHeight/2+"px",le.style.display="block"}(e,t,o,a)}document.addEventListener("DOMContentLoaded",(e=>{function t(e){for(let t in s)if(s[t].id===e)return t;return""}F(r),b(),function(){console.log("Generating buttons"),console.trace();const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),n=document.getElementById("experimentTab").querySelector(".button-columns"),r=document.getElementById("ponderTab"),c=e(o),l=e(n),d=e(r);let u=0,f=0,b=0;for(let e in a){const o=a[e],n=document.createElement("button");n.id=e,n.className=o.class,n.textContent=o.text,o.tooltipDesc&&n.setAttribute("data-tooltip-desc",o.tooltipDesc),o.tooltipEffect&&n.setAttribute("data-tooltip-effect",o.tooltipEffect),n.setAttribute("unlock",o.unlock),n.setAttribute("data_building",o.data_building);const r=Object.values(s).find((t=>t.id===e));r&&(o.tooltipCost=p(r.cost)),n.setAttribute("data-tooltip-cost",o.tooltipCost),o.showTab&&n.addEventListener("click",(()=>{Y(o.showTab),console.log("Switching to tab: "+o.showTab)})),"production"===o.tab?(c[u].appendChild(n),u=(u+1)%3):"experiment"===o.tab?(l[f].appendChild(n),f=(f+1)%3):"tabs"===o.tab?t.appendChild(n):"ponder"===o.tab?(d[b].appendChild(n),b=(b+1)%3):o.tab,Object.keys(i).find((t=>t===e))&&w(e,i,B);try{o.requirement()||(n.style.display="none")}catch(e){}}}(),u(),A(),Y("productionTab"),o(864).generateTradeTable(c),document.addEventListener("click",(e=>{if(e.target.matches("button")){const n=e.target;if(n.getAttribute("data_building")&&"undefined"!==n.getAttribute("data_building")&&n.classList.contains("purchasable")){var o=n.getAttribute("data_building");e.shiftKey?T(o):C(o)}if(n.classList.contains("unlock")){const e=n.getAttribute("unlock");if(console.log(e),r[e]){var s=!0;for(let t in r[e].cost)if(E(t,c)<r[e].cost[t]){console.log("Cannot unlock "+e),s=!1;break}if(s){for(let t in r[e].cost)h(t,-r[e].cost[t]);r[e].isPondered=!0,D(e),n.display="none",console.log("Unlocking "+e)}}}if("undefined"!==n.id&&(console.log(n),"gather"===n.id.slice(0,6)&&function(e){const t=c[e],o=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));t.isGetting?(t.isGetting=!1,s.textContent=t.defaultText,o&&(o.style.fontWeight="normal")):(function(){for(let e in c){c[e].isGetting=!1;const t=document.querySelector("#gather"+W(e));t&&(t.textContent=c[e].defaultText);const o=_.querySelector("#resource-"+e);o&&(o.style.fontWeight="normal")}}(),t.isGetting=!0,s.textContent=t.activeText,o&&(o.style.fontWeight="bold"),N.textContent=t.emoji,console.log(t.emoji))}(function(e){for(let t in c)if(c[t].id===e)return t;return""}(n.id)),"craft"===n.id.slice(0,5)&&(e.shiftKey?g(t(n.id)):m(t(n.id))),"saveButton"===n.id&&d(),"eatFish"===n.id&&(!I()&&E("fish",c)>=1&&(h("fish",-1),function(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block"}),5e3)}(),L(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{te("You are with yourself in a forest.","with yourself"),x("clones",1),h("clones",1)}),1e3))),"overlay-button"===n.id&&(Z.style.display="none"),"deleteSaveButton"===n.id&&(localStorage.removeItem("save"),location.reload()),"clearJobAssignments"===n.id&&clearJobAssignments(),"darkModeToggle"===n.id&&(Q.classList.toggle("dark-mode"),K.classList.toggle("dark"),X=!X,K.textContent=X?"Light Mode":"Dark Mode")),n.classList.contains("tierOneButton")){let e=n.textContent;S(e)}}e.target.matches("#alone")&&(c.clones.value<c.clones.max&&(c.clones.value+=1),V())})),requestAnimationFrame(re),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){de(e),ue=e})),e.addEventListener("onclick",(function(){de(e)})),e.addEventListener("mouseleave",(function(){le.style.display="none",ue=null}))})),V()}));var ue=null;e.exports={updateSidebar:A,updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${c[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){ne=e},changeMessage:te,getMessage:function(){return ee},total_time:ne,currentHoverButton:ue}},123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){n(e)||s(e);const t=document.querySelectorAll("p."+e);t.forEach((e=>e.classList.add("visible"))),t.forEach((e=>e.style.display="")),i()}},134:(e,t,o)=>{const{buildings:s}=o(882),{perks:n}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e)for(let e in s)o(151).recalculateBuildingCost(e,s,r)}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i}}},369:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{ponders:n}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:i.tooltipCost,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{buildings:i,getBoost:r}=o(882),{ponders:a}=o(397),{buttons:c}=o(54),{skills:l}=o(324),{getWorkers:d,updateTotal:u,reassignJobsBasedOnResources:f}=o(150),{hasTool:p,getToolValueForResource:b}=o(609),{updateSidebar:h,updateSkills:g,calcCraftBonus:m}=o(78),{canCraft:y}=o(64),{capitalizeFirst:v}=o(681),{getMaterial:k}=o(924),{hasPerk:x}=o(134),{isPondered:w}=o(369),{getCraftedResource:T}=o(590);function C(e,t){var o=0;if(!s.hasOwnProperty(e))return o;"clones"===e&&w("autoClone")&&(o=1);var n=b(s[e]);s[e].isGetting&&(o+=n),o+=(x("Leader")?.375:.25)*d(e)||0,!x("Lumberjack")||"wood"!=e&&"sticks"!=e||(o*=1.25),!x("Miner")||"rocks"!=e&&"ore"!=e||(o*=1.25),!x("Botanist")||"vines"!=e&&"herbs"!=e&&"wheat"!=e||(o*=1.25);for(let t in l)if(l[t].affectedResources.includes(e)){let e=1.06;o*=1+(Math.pow(e,l[t].level)-1)/100}for(let t in i){const s=r(t,e);if(s){var a=Math.pow(s,i[t].count);w("effectiveBuildings")&&(a*=1.01),o*=a}}return"ponder"===e&&w("ponder1")&&(o*=1.05),w("fasterResourceGain")&&(o*=1.05),o*=t/1e3,parseFloat(o.toFixed(3))}const B=document.getElementById("resources");function S(e){if(!s.hasOwnProperty(e))throw"Invalid resource: "+e;const t=v(e).split("_").join(" "),o=document.createElement("p");o.className=`${e} resource`,o.id=`resource-${e}`;const n=document.createElement("span");n.className="resourceName",n.textContent=`${t}:`;const i=document.createElement("span");i.className="resourceValue",i.id=`${e}Value`,i.textContent=`${s[e].value.toFixed(2)} / ${s[e].max.toFixed(2)}`;const r=document.createElement("span");function a(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}r.className="resourceRate",r.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,o.appendChild(n),o.appendChild(i),o.appendChild(r),B.appendChild(o),a("resource-clones",1),a("resource-sticks",2),a("resource-vines",3),a("resource-rocks",4),a("resource-fish",5),a("resource-freshwater",5.5),a("resource-wood",6),a("resource-ore",7),a("resource-sand",8),a("resource-clay",9),a("resource-wheat",10),a("resource-hides",11),a("resource-game",12),a("resource-herbs",13),a("resource-berries",14),a("resource-ponder",50)}function A(e){const t=B.querySelector(`#${e}Value`),o=document.querySelector(`button#craft${v(e)}`);try{t&&!o||S(e)}catch(e){}if(t){try{t.textContent=`${s[e].value.toFixed(2)} / ${s[e].max.toFixed(2)}`}catch(o){console.error(t,e,o)}if(s[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}else if(o){const t=o.querySelector(`#${e}Value`);t?t.textContent=T(e).toFixed(0):console.warn(`Resource button found but no count span for: ${e}`)}}function R(e,t){if(0!=t){if(e=e.toLowerCase(),s.hasOwnProperty(e))s[e].value<s[e].max&&t>0?(w("fasterResourceGain")&&(t*=1.05),s[e].value+=t,g(e,t)):t<0?s[e].value+=t:(s[e].value=s[e].max,w("autocraft")&&j[e]&&F(j[e])),A(e),f();else{if(!n.hasOwnProperty(e))throw"Tried to increase Invalid material: "+e;n[e].value+=t,A(e),g(e,t)}h()}}function D(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.requirement=e.requirement;const o=Object.keys(n).find((t=>n[t]===e)),s=parseFloat(n[o].value).toFixed(0);return t.innerHTML=`${e.text||v(o)}: <span id="${o+"Value"}">${s}</span>`,t.tab="experiment",t}const q=document.querySelector("#craftedResourceButtons");function M(e){var t="";for(let o in e)t+=`<span class="tooltip-${o} ${k(o,s)>=e[o]?"enough":"not-enough"}">${e[o]} ${o}</span><br>`;return t}const E=document.getElementById("emojiDisplay");function P(){let e="";for(let t in s){let o=d(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=n.repeat(o))}E.textContent=e,function(){let e=48;for(E.style.fontSize=`${e}px`;E.offsetWidth>600&&e>30;)e-=1,E.style.fontSize=`${e}px`}()}P();const j={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function F(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(k(e,s)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),function(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!y(e))return;let o=n[e].cost;for(let e in o)R(e,-o[e]*t);R(e,t),n[e].craftedOnce||(n[e].craftedOnce=!0),A(e)}(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}}e.exports={getMaterial:k,increaseMaterial:R,setMax:function(e,t){s[e].max=t,h(),u()},increaseMax:function(e,t){s[e].max+=t,h(),u()},craftAllResources:F,craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!y(e))return;let t=n[e].cost;m(e),function(e,t,o){for(let e in t)R(e,-t[e]);R(e,1)}(e,t),n[e].craftedOnce||(n[e].craftedOnce=!0),A(e)},updateEmojiDisplay:P,updateDisplayValue:A,generateTooltipCost:M,calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=C(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},createResourceTag:S,appendCraftedResourceButtons:function(){for(let e in n){const t=D(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc),t.setAttribute("data-tooltip-cost",M(n[e].cost)),q.appendChild(t),c[n[e].id]=n[e]}},calcIncrease:C,updateResourceIncreaseRates:function(){for(let t in s){const o=C(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}}}},502:(e,t,o)=>{const{updateBuildingButtonCount:s,recalculateBuildingCost:n}=o(151),{updateDisplayValue:i,calcIncrease:r,updateEmojiDisplay:a}=o(594),{addTool:c,getAllTools:l}=o(609),{allVisibleButtons:d,updateSidebar:u,populateSkillsTable:f,setVisibleButton:p}=o(78),{makeVisible:b}=o(123),{getCraftedResource:h}=o(590),{getMaterial:g}=o(924),{getAllPerks:m,addPerk:y,hasPerk:v}=o(134),{isPondered:k}=o(369),{jobCounts:x,setConnections:w,getConnections:T,distributeWorkers:C,updateDisplay:B}=o(150),{total_time:S}=o(808),{setAteFish:A,getAteFish:R}=o(621),{craftedResources:D}=o(371),{buildings:q}=o(882),{ponders:M}=o(397),{resources:E}=o(587),{skills:P}=o(324),{getAllStages:j}=o(751);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[]};for(let t in P)e.skills[t]={exp:P[t].exp,level:P[t].level};for(let t in D)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=h(t),e.craftedResources[t].craftedOnce=D[t].craftedOnce;for(let t in E)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=g(t,E),e.resources[t].max=E[t].max;e.tools=l(),e.stages=j(),e.jobs=x,e.perks=m(),e.connections=Array.from(T().entries());for(let t in M)e.unlocks[t]=k(t);for(let t in q)e.buildings[t]=q[t].count;for(let t in d)e.allVisibleButtons.push(t);const t=o(808).getMessage().innerHTML;return e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t),e.time.total_time=S,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(E[t].value=e.resources[t].value,E[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=E[t].value&&i(t));if(void 0!==e.skills)for(let t in e.skills)P[t].exp=e.skills[t].exp,P[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))D[t].value=e.craftedResources[t].value,D[t].craftedOnce=e.craftedResources[t].craftedOnce,i(t);if(void 0!==e.tools){let t=[...new Set([...l(),...e.tools])];for(let e in t)c(e)}if(void 0!==e.stages)for(let t in e.stages)b(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)x[t]=e.jobs[t],B(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{M[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(k("skillsTable")&&f(),void 0!==e.buildings){for(let t in e.buildings)q[t].count=e.buildings[t],s(t,q[t].count),n(t,q,v);u()}if(A(E.clones.max>=1),R()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[S]);const t=Date.now()-e.time.time_of_save;for(let e in E){const o=r(e,t);E[e].value+=o,E[e].value>E[e].max&&(E[e].value=E[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)p(t)}void 0!==e.connections&&(w(new Map(e.connections)),0===T().size&&w(new Map),console.log(T()));for(let e in x)C(e,x[e]);if(a(),void 0!==e.perks)for(let t in e.perks)y(t),o(495).selectCorrectPerkButton(t)}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: ",e)}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return t.includes(e)},getAllStages:function(){return t}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(e.tools){const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val}return 1}}},864:(e,t,o)=>{const{getMaterial:s}=o(924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){let n=s("gold",o(587).resources);n>=t?(n-=t,i.textContent=n.toFixed(2),alert(`You bought ${e} for ${t.toFixed(2)} gold!`)):alert("You don't have enough gold!")}function a(e,t){let n=s("gold",o(587).resources);n+=t,i.textContent=n.toFixed(2),alert(`You sold ${e} for ${t.toFixed(2)} gold!`)}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},667:(e,t,o)=>{const{buttons:s}=o(54),{getCraftedResourceConfigById:n}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,canBuyBuilding:d,setVisibleButton:u}=o(78),{canCraft:f}=o(64),{getMaterial:p}=o(924);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var p=n(t.id);p.value>0&&(o="button-disabled");const e=c(p);f(e)&&(o="purchasable")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=d(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(s),e.style.display="")}))}}},t={};!function o(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,