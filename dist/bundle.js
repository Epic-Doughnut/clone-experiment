(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},151:(e,t,o)=>{const{buildings:s,isPopBuilding:n}=o(882),{buttons:i}=o(54),{resources:r}=o(587),{increaseMaterial:a,increaseMax:c}=o(594),{updateTotal:l}=o(150),{hasPerk:d}=o(134),{getMaterial:u}=o(924),{passedStage:f}=o(751),{recalcMaxClones:p}=o(995),{updateSidebar:g}=o(453),{updateBuildingButtonCount:h}=o(607),{recalculateBuildingCost:b}=o(22),{canBuyBuilding:m}=o(23),{isPondered:y}=o(369),{updateBuildingList:v}=o(831);function k(e){console.log("Buying building "+e);const t=s[e];if(m(e)){t.count++;for(const e in t.cost)a(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))console.log("bought building effects",e,o),c(e,o),"clones"===e&&(p(),l());h(e,t.count),b(e,s,d),v()}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e,t){return function(){const t=Object.entries(e).every((([e,t])=>u(e)>=Math.floor(t/2)));return f("clones")&&t}}(o.cost);return{class:"tooltip "+e,tab:"production",text:`${e.charAt(0).toUpperCase()+e.slice(1)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}},buyMaxBuildings:function(e){let t=0;for(s[e];m(e);)k(e),++t;return t},buyBuilding:k,generateEffectString:function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));y("effectiveBuildings")&&(e*=1.01),t.push(`+${e}% ${o} production`)}return t.join(", ")},updateBuildingList:v}},121:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{skills:i}=o(324),{getWorkers:r}=o(150),{hasPerk:a}=o(134),{isPondered:c}=o(369),{getFactoryProduction:l}=o(51),{hasPrestige:d,getLevelOfPrestige:u}=o(425),{getMaterial:f}=o(924),{hasTool:p}=o(609);t.calcIncrease=function(e,t){var p=0;const g=o(882).buildings;if(!s.hasOwnProperty(e)){if(!n.hasOwnProperty(e))return p;if((p=l(e))>0)return p}"clones"===e&&c("autoClone")&&(p=1),s[e]&&s[e].isGetting&&(p+=1),p+=(a("Leader")?.375:.25)*r(e)||0,!a("Lumberjack")||"wood"!=e&&"sticks"!=e||(p*=1.75),!a("Miner")||"rocks"!=e&&"ore"!=e||(p*=1.75),!a("Botanist")||"vines"!=e&&"herbs"!=e&&"wheat"!=e||(p*=1.75);for(let t in i)if(i[t].affectedResources.includes(e)){"gathering"===t&&d("gatheringBoost")&&(p*=1.1*u("gatheringBoost")),"masonry"===t&&d("masonryBoost")&&(p*=1.1*u("masonryBoost")),"carpentry"===t&&d("carpentryBoost")&&(p*=1.1*u("carpentryBoost")),"thinking"===t&&d("thinkingBoost")&&(p*=1.1*u("thinkingBoost")),"farming"===t&&d("farmingBoost")&&(p*=1.1*u("farmingBoost")),"fishing"===t&&d("fishingBoost")&&(p*=1.1*u("fishingBoost")),"hunting"===t&&d("huntingBoost")&&(p*=1.1*u("huntingBoost"));let e=1.06;p*=1+(Math.pow(e,i[t].level)-1)/100}for(const t of Object.keys(g)){const s=o(882).getBoost(t,e);if(s){var h=Math.pow(s,g[t].count);c("effectiveBuildings")&&(h*=1.01),p*=h}}return"ponder"===e&&(c("ponder1")&&(p*=1.05),c("ponder2")&&(p*=1.05),c("ponder3")&&(p*=1.05)),c("fasterResourceGain")&&(p*=1.05),d("cloneBoost")&&(p*=1.05*u("cloneBoost")),"wood"===e&&f("axe")>10&&(p*=1+Math.log(f("axe")/10)),"ore"===e&&f("pickaxe")>10&&(p*=1+Math.log(f("pickaxe")/10)),"fish"===e&&f("fishingrod")>10&&(p*=1+Math.log(f("fishingrod")/10)),"game"===e&&f("spear")>10&&(p*=1+Math.log(f("spear")/10)),"ponder"===e&&f("paper")>10&&(p*=1+Math.log(f("paper")/10)),"sticks"===e&&f("staff")>10&&(p*=1+Math.log(f("staff")/10)),f("husks")>10&&(p*=1+Math.log(f("husks")/10)),p*=t/1e3,parseFloat(p.toFixed(3))}},23:(e,t,o)=>{const{resources:s}=o(587),{getMaterial:n}=o(924),{passedStage:i}=o(751);t.canBuyBuilding=function(e){let t=!0;const r=o(882).buildings[e];for(const e in r.cost)if(r.cost[e]>n(e,s)){t=!1;break}return r.effects&&r.effects.clones&&!i("clone")&&(t=!1),t}},64:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=n[e].cost;try{for(let e in o)if(i(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},51:(e,t,o)=>{const{getMaterial:s}=o(924),{craftedResources:n}=o(371),{resources:i}=o(587);var r={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},a=[];Object.keys(i).forEach((e=>a.push(e))),Object.keys(n).forEach((e=>a.push(e))),console.log("All materials: ",a);let c={},l={};function d(){Object.keys(n).forEach((e=>{c[e]=0,Array.from(n[e].cost).forEach((e=>{l[e.resource]||(l[e.resource]=0)}))}));const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const s=document.createElement("span");s.classList.add("factoryCost");const i=document.createElement("select");Object.keys(r).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,i.appendChild(t)})),i.setAttribute("data-produced","none"),i.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=i.value;(function(e,t,o){e&&"none"!==e&&(c[e]--,Array.from(n[e].cost).forEach((e=>{l[e.resource]-=e.amount}))),c[t]++,Array.from(n[t].cost).forEach((e=>{l[e.resource]+=e.amount}))})(e,t,this.dataset.factoryIndex),this.setAttribute("data-produced",t),document.querySelector(`#resource-${t}`).style.color="thistle",s.innerHTML="",s.innerHTML+=`${o(594).generateTooltipCost(n[i.value].cost)}`}));const a=document.createElement("span");return a.innerHTML="&#8594;",t.appendChild(s),t.appendChild(a),t.appendChild(i),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.disabled=!0,o.selected=!0,e.appendChild(o)}(i),e.appendChild(t),t}let u=2,f=30;var p=50;e.exports={createFactoryDiv:d,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,i=r[t];console.log("checking factory",t),i&&t&&function(e,t){let i=[];e.forEach((e=>i.push(s(e)/n[t].cost[e])));let r=Math.min(u,...i);console.log(r,u,...i),r*=1,o(594).craftResourceQuantity(t,r)}(i,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");s("silver")<p?console.log("Not enough silver!"):(o(594).increaseMaterial("silver",-p),d(),p*=1.2,e.setAttribute("tooltipCost",`${p.toFixed(2)} silver`))},upgradeBulk:function(){u+=2,f+=10,document.getElementById("upgradeBulkButton").setAttribute("tooltipCost",`${u} → ${u+2}: ${f.toFixed(0)} silver`)},allMaterials:a,getFactoryProduction:function(e){return c[e]*u},loadFactory:function(e){let t=d();t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(594).generateTooltipCost(n[e].cost)}`},activeFactoriesProducing:c}},531:(e,t)=>{t.fitCharToCell=function(e,t,o,s){const n=document.createElement("span");n.textContent=e,n.style.fontSize=`${s}px`,n.style.position="absolute",n.style.whiteSpace="nowrap",n.style.visibility="hidden",document.body.appendChild(n);let i=s;for(;n.offsetWidth<t&&n.offsetHeight<o&&(i++,n.style.fontSize=`${i}px`,!(i>=1e3)););return document.body.removeChild(n),i}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},924:(e,t,o)=>{const{getCraftedResource:s}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},78:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425),{resources:i,isResource:r}=o(587),{skills:a}=o(324),{triggerFloatUpText:c}=o(727);let l=new Set(["gatherSticks"]);t.allVisibleButtons=l;let d=!1;function u(){const e=document.getElementById("skillsTable");if(d)for(let e in a){(a[e].exp>0||a[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=a[e].exp+"%",document.querySelector("#level-"+e).textContent="[level "+a[e].level+"]   "+e)}else{console.log("Generating table for the first time"),d=!0;for(let t in a){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let n=document.createElement("div");n.setAttribute("class","progressBar"),n.style.height="20px",n.setAttribute("data-skill",t);let i=document.createElement("span");i.textContent="[level "+a[t].level+"]   "+t,i.setAttribute("id","level-"+t),i.style.position="absolute",i.style.left="10px",i.style.top="50%",i.style.transform="translateY(-50%)",0==a[t].exp&&0==a[t].level&&(o.style.display="none"),s.appendChild(n),s.appendChild(i),o.appendChild(s),e.appendChild(o)}}}e.exports={getMax:function(e){if(r(e)){let t=i[e].max;return s("storageSpace")&&(t*=1.05*n("storageSpace")),t}return 1/0},updateSkills:function(e,t){t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05);for(let o in a)if(a[o].affectedResources.includes(e)){if(a[o].level>=100){a[o].level=100,a[o].exp=0;continue}if(a[o].exp+=t/Math.pow(1.4,a[o].level),a[o].exp>=100){a[o].level+=1,a[o].exp=0;let e=`Level up! ${o} → ${a[o].level}`;const t=document.getElementById("prestige").getBoundingClientRect();c(t.x,t.y,e,"#F4D03F")}}o(751).passedStage("skillsTable")&&u()},populateSkillsTable:u,calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return l.has(e)},setVisibleButton:function(e){l.add(e)},hasGeneratedSkillTable:d,clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combat",hunting:"hunting"}},150:(e,t,o)=>{const{skills:s}=o(324),{resources:n}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),{triggerFloatUpText:c}=o(727),l={};for(let e in s)l[e]=0;const d=document.getElementById("jobsTab");function u(){var e=0;for(let t in l)e+=l[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),d.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(i("clones",n)>u()){const o=e.pageX,s=e.pageY;if(e.shiftKey){let e=i("clones",n)-u();l[t]+=e,c(o,s,`+${e} workers`,"green")}else l[t]++,c(o,s,"+1 worker","green");p(t,l[t]),h(t),b()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(e.shiftKey){let o=l[t];l[t]=0,p(t,l[t]),h(t),b();const s=e.pageX,n=e.pageY;o>0&&c(s,n,`-${o} workers`,"red")}else if(l[t]>0){l[t]--,p(t,l[t]),h(t),b();const o=e.pageX,s=e.pageY;c(o,s,"-1 worker","red")}}))}));let f=new Map;function p(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let t of o)f.set(t,r),r>0&&g(e,t);let a=t-r*i;for(let t of o)a>0&&(f.set(t,f.get(t)+1),a--,g(e,t))}function g(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const s=document.getElementById(`resource-${t}`);if(!s||"none"===s.style.display)return;const n=o.getBoundingClientRect(),i=s.getBoundingClientRect(),r=document.createElement("div");r.style.position="absolute",r.style.width="10px",r.style.height="10px",r.style.borderRadius="50%",r.style.backgroundColor="white",r.style.opacity=".8",r.style.left=`${n.left+window.scrollX}px`,r.style.top=`${n.top+window.scrollY}px`,document.body.appendChild(r),r.animate([{transform:`translate(${i.left-n.left}px, ${i.top-n.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{r.style.display="none"}}function h(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${l[e]}`),o(594).updateEmojiDisplay()}function b(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+u()+" / "+a("clones")}let m=new Map,y=document.getElementById("lineCanvas"),v=y.getContext("2d");function k(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;v.beginPath(),v.moveTo(n,i),v.lineTo(t,o),v.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,d=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(v,n,i,t,o,10)}function x(e,t){let o=l[e];l[e]=0,l[t]+=o,h(e),h(t)}y.width=window.innerWidth,y.height=window.innerHeight,e.exports={clearJobAssignments:function(){v.clearRect(0,0,y.width,y.height),m=new Map},reassignJobsBasedOnResources:function(){try{const e=m.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,d=s[e].affectedResources;if(!d)return;for(const e of d)if(void 0!==n[e]&&i(e)<n[e].max){c=!1;break}c&&l[e]>0&&(x(r,a),p(r,l[r]),p(a,l[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:x,drawAllConnections:function(){v.clearRect(0,0,y.width,y.height);try{for(let[e,t]of m.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,k(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return f.get(e)},updateTotal:b,setConnections:function(e){m=e},getConnections:function(){return m},distributeWorkers:p,updateDisplay:h,jobCounts:l,resetAllJobs:function(){for(let e in s)l[e]=0,p(e,0),b(),h(e)}}},882:(e,t,o)=>{const{hasPerk:s}=o(134),{recalcMaxClones:n}=o(995),{recalculateBuildingCost:i}=o(22),{updateBuildingButtonCount:r}=o(607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.3,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.2,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.4,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.1,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30},effects:{wood:100},ratio:1.1,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.1,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.2,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,wheat:100,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.05},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{},boost:{fish:1.1},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.2,herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"҉"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,r(e,0),i(e,a,s);n()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"teepee":return!0;default:return!1}}}},54:(e,t,o)=>{const{passedStage:s}=o(751),{getMaterial:n}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:s}=o(924),{getCraftedResource:n}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}},wood:{value:0,cost:{sticks:8}},sticks:{value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id===e||o.id===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null},resetCraftedResources:function(){for(const[e,t]of Object.entries(a))t.value=0,t.craftedOnce=!1}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{let t={ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 1%",cost:{ponder:180}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combat:{id:"ponderCombat",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},ponder2:{id:"ponderPonder2",requirement:()=>!0,isPondered:!1,text:"Think even harder",tooltipDesc:"5% boost to pondering",cost:{ponder:300}},ponder3:{id:"ponderPonder3",requirement:()=>!0,isPondered:!1,text:"Think hardest",tooltipDesc:"5% boost to pondering",cost:{ponder:600}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double diameter Teepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}}};e.exports={ponders:t,resetPonders:function(){for(const[e,o]of Object.entries(t))o.isPondered=!1}}},425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},cheaperBuildings:{text:"Rickety",tooltipDesc:"Building Cost (-5%)",cost:2,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",max:1e3}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:[]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,resetCraftedResources:n}=o(371),{buildings:i,resetBuildings:r}=o(882),{ponders:a,resetPonders:c}=o(397),{buttons:l}=o(54),{resources:d,resetResources:u}=o(587),{saveGame:f,loadGame:p}=o(502),{generateTooltipCost:g,appendCraftedResourceButtons:h,increaseMaterial:b,craftAllResources:m,craftResource:y,calcIncrease:v,updateResourceIncreaseRates:k,increaseMax:x}=o(594),{buyMaxBuildings:w,buyBuilding:B,createBuildingButton:C}=o(151),{hasPerk:T,selectAbility:S,resetPerks:E}=o(134),{clearSidebar:M}=o(78),{makeVisible:A}=o(123),{updateButtonVisibility:j}=o(667),{getCraftedResource:q}=o(590),{getMaterial:D}=o(924),{buyFactory:P,attemptManufacture:L,upgradeBulk:R}=o(51),{isPondered:$,generatePonderButtons:O}=o(369),{hasTool:F,addTool:I}=o(609),{getAteFish:H,setAteFish:G}=o(621),{drawAllConnections:V,updateTotal:W,clearJobAssignments:N,resetAllJobs:_}=o(150),{capitalizeFirst:z}=o(681),{passedStage:J,resetStages:U}=o(751),{recalcMaxClones:Y}=o(995),{initializeResourceTags:K,updateSidebar:X,updateDisplayValue:Q}=o(453),{prestige:Z}=o(425),{recalculateBuildingCost:ee}=o(22),{triggerFloatUpText:te}=o(727),{updateBounceAnimation:oe}=o(994),{updateTooltip:se,hideTooltip:ne}=o(208),{canCraft:ie}=o(64),re=document.querySelector("#resources"),ae=document.querySelector("#emojiGatherDisplay"),ce={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},le=[{condition:()=>D("sticks",d)>=1,action:()=>A("stick")},{condition:()=>D("sticks",d)>=10,action:()=>A("vines")},{condition:()=>D("vines",d)>=10,action:()=>A("rocks")},{condition:()=>D("rocks",d)>=1,action:()=>{A("tab-button"),A("craftRocks")}},{condition:()=>q("spear",s)>0,action:()=>A("spear")},{condition:()=>D("fish",d)>=1,action:()=>A("fishing")},{condition:()=>F("Axe"),action:()=>A("wood")},{condition:()=>q("rope")>=1,action:()=>A("rope")},{condition:()=>D("fish",d)>=5&&!H(),action:()=>{A("eatFish")}},{condition:()=>H(),action:()=>{A("clone"),A("ponder-tab")}},{condition:()=>$("ponderFinish"),action:()=>("stage2.html",document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>$("biggerShelter")||$("biggerHut")||$("biggerHouse")||$("biggerTeepee")||$("evenBiggerShelter"),action:()=>Y()},{condition:()=>D("clones")>=40,action:()=>A("prestige")},{condition:()=>D("clay")>0,action:()=>A("clay")},{condition:()=>!document.getElementById("toggle-basics")&&$("organization"),action:()=>K(!0)}];let de=document.querySelectorAll(".tab-content > .content");function ue(e){console.log("show tab: "+e);let t="";for(let e of de)e.classList.contains("active")&&(t=e.id,e.style.opacity="0",setTimeout((()=>{e.classList.remove("active")}),100));let o=document.querySelectorAll(".tab-button");for(let e of o)e.classList.remove("active");let s=document.getElementById(e);setTimeout((()=>{s.classList.add("active")}),100),setTimeout((()=>{s.style.opacity="1"}),200);const n=`#${e}Button`;let i=document.querySelector(n);i&&i.classList.add("active"),"jobsTab"===e&&V(),console.log(t,">",e),X()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":ue("productionTab");break;case"2":J("tab-button")&&ue("experimentTab");break;case"3":J("ponder-tab")&&ue("ponderTab");break;case"4":J("jobs-tab")&&ue("jobsTab");break;case"5":J("skillsTable")&&ue("skillsTab");break;case"6":J("perksTab")&&ue("perksTab");break;case"7":J("factoryTab")&&ue("factoryTab")}}));const fe=document.body;fe.classList.toggle("dark-mode");let pe=!0;function ge(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block",o.style.opacity="1"}),5e3)}const he=document.getElementById("message");function be(e,t){const o=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="You feel peckish for some seafood">${t}</span>`);he.innerHTML=o}let me=50,ye=null,ve=0,ke=0;function xe(e){null===ye&&(ye=e);const t=e-ye;ve+=t,ke+=t,ye=e;let o=me;for(ke>=10*me&&(me=ke/10);ke>=me;)ke-=me,Ce(me);me=o,requestAnimationFrame(xe)}let we=0,Be=0;function Ce(e,t){for(const[t,o]of Object.entries(d))b(t,v(t,e));k(),function(){le.forEach((e=>{e.condition()&&e.action()}));for(let e in ce)!F(e)&&q(e)>0&&(I(e),A(ce[e]));try{j(),null!==Se&&se(Se)}catch(e){console.warn(e)}}(),we+=e,Be+=e,we>=1e4&&(f(),we=0),J("factoryTab")&&Be>=1e3&&(L(),Be=0)}window.onbeforeunload=function(){Te||f()};let Te=!1;window.increaseMaterial=b,document.addEventListener("DOMContentLoaded",(e=>{O(a),function(){console.log("Generating buttons"),console.trace();for(let e in i){const t=C(e,i);l[e]=t}const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),n=document.getElementById("experimentTab").querySelector(".button-columns"),r=document.getElementById("ponderTab"),a=e(n),c=e(r);let d=1,u=0,f=0;for(let e in l){const n=l[e],r=document.createElement("button");r.id=e,r.className=n.class,r.textContent=n.text.split("_").join(" "),n.tooltipDesc&&r.setAttribute("data-tooltip-desc",n.tooltipDesc),n.tooltipEffect&&r.setAttribute("data-tooltip-effect",n.tooltipEffect),r.setAttribute("unlock",n.unlock),r.setAttribute("data_building",n.data_building);const p=Object.values(s).find((t=>t.id===e));p&&(n.tooltipCost=g(p.cost)),r.setAttribute("data-tooltip-cost",n.tooltipCost),n.showTab&&r.addEventListener("click",(()=>{ue(n.showTab),console.log("Switching to tab: "+n.showTab)})),"production"===n.tab?(r.style.gridColumn=d.toString(),d=(d+1)%3,o.appendChild(r)):"experiment"===n.tab?(a[u].appendChild(r),u=(u+1)%3):"tabs"===n.tab?t.appendChild(r):"ponder"===n.tab?(c[f].appendChild(r),f=(f+1)%3):n.tab,Object.keys(i).find((t=>t===e))&&ee(e,i,T);try{n.requirement()||(r.style.display="none")}catch(e){}}}(),K(),p(),M(),K($("organization")),h(),X(),ue("productionTab"),o(864).generateTradeTable(d),document.addEventListener("click",(e=>{if(e.target.matches("button")){const i=e.target;if(i.getAttribute("data_building")&&"undefined"!==i.getAttribute("data_building")&&i.classList.contains("purchasable")){var t=i.getAttribute("data_building");const o=e.pageX,s=e.pageY;if(e.shiftKey){let e=w(t);te(o,s,`+${e} ${z(t).split("_").join(" ")}s`,"aqua")}else B(t),te(o,s,`+1 ${z(t)}`,"aqua")}else if(i.classList.contains("unlock")){const e=i.getAttribute("unlock");if(console.log(e),a[e]){var o=!0;for(let t in a[e].cost)if(D(t,d)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)b(t,-a[e].cost[t]);a[e].isPondered=!0,A(e),i.display="none","organization"===e&&location.reload()}}}else if("undefined"!==i.id)if("gather"===i.id.slice(0,6))!function(e){const t=d[e],o=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));ae.textContent="𓀟",t.isGetting?(t.isGetting=!1,s.classList.remove("gathering"),s.textContent=t.defaultText,o&&(o.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(d)){t.isGetting=!1;const o=document.querySelector("#gather"+z(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const s=re.querySelector("#resource-"+e);s&&(s.style.fontWeight="normal")}}(),t.isGetting=!0,s.textContent=t.activeText,o&&(o.style.fontWeight="bold"),ae.textContent=t.emoji,console.log(t.emoji),s.classList.add("gathering"))}(function(e){for(const[t,o]of Object.entries(d))if(o.id===e)return t;return"error "+e}(i.id));else if("craft"===i.id.slice(0,5)){let t=function(e){for(const[t,o]of Object.entries(s))if(console.log(t,o,e),o.id===e)return t;return"error "+e}(i.id);console.log("clicked cr: ",t),ie(t)&&te(e.pageX,e.pageY,`+${t}`,"aqua"),e.shiftKey?m(t):y(t)}else"saveButton"===i.id?f():"eatFish"===i.id?!H()&&D("fish",d)>=1&&(b("fish",-1),ge(),G(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{be("You are with yourself in a forest.","with yourself"),x("clones",1),b("clones",1)}),1e3)):"overlay-button"===i.id?(document.getElementById("overlay-text").style.opacity="0",document.getElementById("overlay-button").style.opacity="0",document.getElementById("overlay").style.display="none",document.getElementById("isekaiButtons").innerHTML="",location.reload()):"deleteSaveButton"===i.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?(localStorage.removeItem("save"),Te=!0,location.reload()):"clearJobAssignments"===i.id?N():"darkModeToggle"===i.id?(fe.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),pe=!pe,darkModeToggle.textContent=pe?"Light Mode":"Dark Mode"):"2main"===i.id?ue("mainTab"):"2graphs"===i.id?ue("graphsTab"):"prestige"===i.id&&function(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button"),s=document.getElementById("overlay-back-button");o.addEventListener("click",(()=>{const t=D("clones");u(),n(),c(),E(),r(),_(),U(),b("husks",t),e.style.display="none",K(!1)})),s.addEventListener("click",(()=>{e.style.display="none"}));const i=document.getElementById("husksIsekaiValue");let a;a=i||document.createElement("p"),a.id="husksIsekaiValue",a.innerHTML=`Husks:  ${D("husks")} <br> You will get ${D("clones")} Husks post-isekai.`,a.style.opacity="0",e.prepend(a),e.style.backgroundColor="MidnightBlue",t.textContent="You step through to another world.",ge(),setTimeout((()=>{s.style.opacity="1"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(Z).forEach((o=>{const s=document.createElement("button");s.innerHTML=`<b>${Z[o].text}</b><br>Level: ${Z[o].level}<br>Cost: ${Z[o].cost}`,s.setAttribute("tooltipCost",Z[o].cost),s.setAttribute("tooltipDesc",Z[o].tooltipDesc),s.classList.add("tooltip"),s.style.gridColumn=(t%4+1).toString(),s.style.gridRow=Math.floor(t/4+1).toString(),++t,s.addEventListener("click",(()=>{console.log(`Button ${o} was clicked`),D("husks")<Z[o].cost||(Z[o].level++,b("husks",-Z[o].cost),Z[o].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(Z[o].cost),s.setAttribute("tooltipCost",Z[o].cost),s.innerHTML=`<b>${Z[o].text}</b><br>Level: ${Z[o].level}<br>Cost: ${Z[o].cost}`,a.textContent="Husks: "+D("husks"),se(s))})),s.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${o} was right clicked`),Z[o].level<=0||(Z[o].level--,Z[o].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(Z[o].cost),s.setAttribute("tooltipCost",Z[o].cost),b("husks",Z[o].cost),s.innerHTML=`<b>${Z[o].text}</b><br>Level: ${Z[o].level}<br>Cost: ${Z[o].cost}`,a.textContent="Husks: "+D("husks"),se(s))})),e.appendChild(s),s.addEventListener("mouseenter",(function(e){se(s),Se=s})),s.addEventListener("mouseleave",(function(){ne(),Se=null}))}))}),5e3),setTimeout((()=>{a.style.opacity="1"}),5e3)}();if(i.classList.contains("tierOneButton")){let e=i.textContent;S(e)}}if(e.target.matches("#alone")){let t="+1 Clone";d.clones.value<d.clones.max?d.clones.value+=1:t="Max Clones";const o=e.pageX,s=e.pageY;te(o,s,t,"+1 Clone"===t?"green":"red"),W(),Q("clones")}})),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),P()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("tooltipCost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),R()}))}(),requestAnimationFrame(xe),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){se(e),Se=e})),e.addEventListener("onclick",(function(){se(e)})),e.addEventListener("mouseleave",(function(){ne(),Se=null}))})),W(),oe()}));var Se=null;e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${d[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){ve=e},changeMessage:be,getMessage:function(){return he},total_time:ve,currentHoverButton:Se}},123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){n(e)||s(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),i()}},134:(e,t,o)=>{const{buildings:s}=o(882),{perks:n}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e)for(let e in s)o(22).recalculateBuildingCost(e,s,r)}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i},resetPerks:function(){i=[]}}},369:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{ponders:n}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;let r=o(594).generateTooltipCost(i.cost);a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:r,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},995:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425),{isPondered:i}=o(369),{setMax:r}=o(594),{passedStage:a}=o(751),{updateBounceAnimation:c}=o(994);t.recalcMaxClones=function(){let e=0;a("clone")&&(e+=1);const t=o(882).buildings;for(const[o,s]of Object.entries(t))s.effects&&s.effects.clones&&(e+=s.effects.clones*s.count);i("biggerShelter")&&(e+=1*t.shelter.count),i("biggerHut")&&(e+=1*t.hut.count),i("biggerHouse")&&(e+=2*t.house.count),i("biggerTeepee")&&(e+=4*t.teepee.count),i("evenBiggerShelter")&&(e+=1*t.shelter.count),s("maxClones")&&(e+=1*n("maxClones")),r("clones",e),c()}},22:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425);t.recalculateBuildingCost=function(e,t,i){let r=t[e];if(r&&r.cost&&r.ratio)for(let e in r.cost)r.cost[e]=Math.round(r.basecost[e]*Math.pow(r.ratio,r.count)),i("Architect")&&(r.cost[e]*=.75),s("cheaperBuildings")&&(r.cost[e]*=Math.pow(.95,n("cheaperBuildings")));const a=document.querySelector("#"+e);var c=o(594).generateTooltipCost(r.cost);if(!a)throw"Button not found for "+e;{a.setAttribute("data-tooltip-cost",c);const e=o(151).generateEffectString(r);a.setAttribute("data-tooltip-effect",e)}}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{ponders:i}=o(397),{buttons:r}=o(54),{skills:a}=o(324),{getWorkers:c,updateTotal:l}=o(150),{hasTool:d}=o(609),{updateSkills:u,calcCraftBonus:f,getMax:p}=o(78),{canCraft:g}=o(64),{capitalizeFirst:h}=o(681),{getMaterial:b}=o(924),{isPondered:m}=o(369),{getCraftedResource:y}=o(590),{calcIncrease:v}=o(121),{updateSidebar:k}=o(453),{passedStage:x,getAllStages:w}=o(751),{updateDisplayValue:B}=o(453),C=document.getElementById("resources");function T(e,t){0!=t&&((e=e.toLowerCase())in s?(b(e)<p(e)&&t>0?(m("fasterResourceGain")&&(t*=1.05),s[e].value+=t,u(e,t)):t<0?s[e].value+=t:(s[e].value=p(e),m("autocraft")&&document.querySelector("#autoCraftCheckbox").checked&&q[e]&&D(q[e])),B(e)):e in n?(n[e].value+=t,B(e),u(e,t)):(s[e]&&(s[e].value+=t),n[e]&&(n[e].value+=t),k()))}function S(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(n).find((t=>n[t]===e));return t.innerHTML=`${e.text||h(o)}`,t.tab="experiment",t}t.resourcesContainer=C;const E=document.querySelector("#craftedResourceButtons");function M(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${b(o,s)>=e[o]?"enough":"not-enough"}">${e[o]} ${o}</span><br>`;return t}const A=document.getElementById("emojiDisplay");function j(){let e="";for(let t in s){let o=c(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=n.repeat(o))}A.textContent=e,function(){let e=48;for(A.style.fontSize=`${e}px`;A.offsetWidth>600&&e>30;)e-=1,A.style.fontSize=`${e}px`}()}j();const q={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function D(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(b(e,s)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),P(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}}function P(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!g(e))return;let o=n[e].cost;for(let s=0;s<Math.floor(t);++s)console.log("crafting",t,e,o),L(e,o,f(e));n[e].craftedOnce||(n[e].craftedOnce=!0),B(e)}function L(e,t,o){for(const[e,o]of Object.entries(t))T(e,-o);T(e,o)}e.exports={increaseMaterial:T,setMax:function(e,t){s[e].max=t,k(),l()},increaseMax:function(e,t){s[e].max+=t,k(),l()},craftAllResources:D,craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;g(e)&&(L(e,n[e].cost,f(e)),n[e].craftedOnce||(n[e].craftedOnce=!0),B(e))},updateEmojiDisplay:j,generateTooltipCost:M,calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=v(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},appendCraftedResourceButtons:function(){for(let e in n){const t=S(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",M(n[e].cost)||""),E.appendChild(t),x(t.getAttribute("requirement"))?t.classList.remove("hidden"):t.classList.add("hidden"),r[n[e].id]=n[e]}},calcIncrease:v,updateResourceIncreaseRates:function(){for(let t in s){const o=v(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:P}},502:(e,t,o)=>{const{calcIncrease:s,updateEmojiDisplay:n}=o(594),{addTool:i,getAllTools:r}=o(609),{allVisibleButtons:a,populateSkillsTable:c,setVisibleButton:l}=o(78),{makeVisible:d}=o(123),{getCraftedResource:u}=o(590),{getMaterial:f}=o(924),{getAllPerks:p,addPerk:g,hasPerk:h,selectAbility:b}=o(134),{isPondered:m}=o(369),{jobCounts:y,setConnections:v,getConnections:k,distributeWorkers:x,updateDisplay:w}=o(150),{total_time:B}=o(808),{setAteFish:C,getAteFish:T}=o(621),{craftedResources:S}=o(371),{buildings:E}=o(882),{ponders:M}=o(397),{resources:A}=o(587),{skills:j}=o(324),{getAllStages:q}=o(751),{activeFactoriesProducing:D,loadFactory:P}=o(51),{recalcMaxClones:L}=o(995),{updateSidebar:R}=o(453),{prestige:$}=o(425),{recalculateBuildingCost:O}=o(22),{updateBuildingButtonCount:F}=o(607),{updateBuildingList:I}=o(151);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{}};for(let t in j)e.skills[t]={exp:j[t].exp,level:j[t].level};for(let t in S)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=u(t),e.craftedResources[t].craftedOnce=S[t].craftedOnce;for(let t in A)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=f(t,A),e.resources[t].max=A[t].max;e.tools=r(),e.stages=q(),e.jobs=y,e.perks=p(),e.connections=Array.from(k().entries());for(let t in M)e.unlocks[t]=m(t);for(let t in E)e.buildings[t]=E[t].count;for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries(D))e.factories[t]=o;const t=o(808).getMessage().innerHTML;e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t);for(const[t,o]of Object.entries($))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=B,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(A[t].value=e.resources[t].value,A[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=A[t].value&&o(453).updateDisplayValue(t));if(void 0!==e.skills)for(let t in e.skills)j[t].exp=e.skills[t].exp,j[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))S[t]&&(S[t].value=e.craftedResources[t].value,Number.isNaN(S[t].value)&&(S[t].value=0),S[t].craftedOnce=e.craftedResources[t].craftedOnce,o(453).updateDisplayValue(t));if(void 0!==e.tools){let t=[...new Set([...r(),...e.tools])];for(let e in t)i(e)}if(void 0!==e.stages)for(let t in e.stages)d(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)y[t]=e.jobs[t],w(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{M[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(m("skillsTable")&&c(),void 0!==e.buildings){for(let t in e.buildings)try{E[t].count=e.buildings[t],E[t].count>0&&(F(t,E[t].count),O(t,E,h))}catch(e){console.warn("error with building",t)}R()}if(L(),I(),C(A.clones.max>=1),T()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[B]);const t=Date.now()-e.time.time_of_save;for(let e in A){const o=s(e,t);A[e].value+=o,A[e].value>A[e].max&&(A[e].value=A[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)l(t)}void 0!==e.connections&&(v(new Map(e.connections)),0===k().size&&v(new Map),console.log(k()));for(let e in y)x(e,y[e]);if(n(),void 0!==e.perks)for(let[t,s]of Object.entries(e.perks))g(s),o(495).selectCorrectPerkButton(s);if(void 0!==e.factories)for(const[t,o]of Object.entries(e.factories))if(o>0)for(let e=0;e<o;++e)P(t);if(void 0!==e.prestige)for(const[t,o]of Object.entries(e.prestige))$[t].cost=o.cost,$[t].level=o.level}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},453:(e,t,o)=>{const{calcIncrease:s}=o(121),{capitalizeFirst:n}=o(681),{getMaterial:i}=o(924),{getMax:r}=o(78),{resources:a}=o(587),{isPondered:c}=o(369);function l(e){var t=!0;return i(e)>0&&(t=!1,a[e]&&(a[e].isVisible=!0)),a[e]&&a[e].isVisible&&(t=!1),t}function d(e){function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const u=document.getElementById("resources");function f(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),u.appendChild(o))):o=document.getElementById("resources");const s=n(e).split("_").join(" "),a=document.createElement("p");a.className="resource",a.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${s}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let d=r(e)&&r(e)<1/0?r(e).toFixed(2):"∞";l.textContent=`${i(e).toFixed(2)} / ${d}`;const f=document.createElement("span");function p(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}return f.className="resourceRate",f.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,a.appendChild(c),a.appendChild(l),a.appendChild(f),o.appendChild(a),p("resource-clones",1),p("resource-sticks",2),p("resource-vines",3),p("resource-rocks",4),p("resource-fish",5),p("resource-freshwater",6),p("resource-wood",7),p("resource-ore",8),p("resource-sand",9),p("resource-clay",10),p("resource-wheat",11),p("resource-hides",12),p("resource-game",13),p("resource-herbs",14),p("resource-berries",15),p("resource-ponder",50),a}function p(e){const t=u.querySelector(`#${e}Value`),o=u.querySelector(`#${e}IncreaseRate`);if(t){try{let n=r(e)&&r(e)<1/0?r(e).toFixed(1):"∞";t.textContent=`${i(e).toFixed(1)} / ${n}`,o&&(o.textContent=s(e,1e3).toFixed(1)),console.log(e,l(e),i(e)),l(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(a[e]&&a[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}}e.exports={updateSidebar:function(){const e=o(51).allMaterials;Array.from(e).forEach((e=>{a[e]&&p(e)}));for(const[o,s]of Object.entries(e)){if(a[s])continue;const e=document.getElementById("resource-"+s);if(!e)return void console.warn("no parent element found for",s);l(s)?e.style.display="none":e.style.display="";const o=document.getElementById(s+"Value");if(o){var t="#fff";const e=i(s),n=r(s);e===n?t="#fcc":e/n>.6&&(t="#eeb"),o.innerHTML=`<span style="color:${t}">${d(e)} / ${d(n)} </span>`}}},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder"],basics:["sticks","berries","fish","game","wheat","freshwater"],materials:["wood","sand","clay","vines","rocks","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,s]of Object.entries(t))s.forEach((t=>{console.log(t,o);let s=document.getElementById("resource-"+t);e||(o=null),s||(s=f(t,o)),console.log(s),console.log(t,l(t),i(t)),l(t)?s.style.display="none":s.style.display=""}))},updateDisplayValue:p}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},864:(e,t,o)=>{const{getMaterial:s}=o(924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){s("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),i.textContent=s("gold",o(587).resources))}function a(e,t){s(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),i.textContent=s("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,s){const n=document.createElement("div");n.textContent=o,n.style.left=`${e}px`,n.style.top=t-30+"px",n.style.color=s,n.classList.add("float-up-fade-out"),document.body.appendChild(n),n.addEventListener("animationend",(()=>{n.remove()}))}},994:(e,t,o)=>{const{getMaterial:s}=o(924),{getMax:n}=o(78);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");s("clones")<n("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},607:(e,t,o)=>{const{capitalizeFirst:s}=o(681);t.updateBuildingButtonCount=function(e,t){document.getElementById(`${e}`).textContent=`${s(e).split("_").join(" ")} (${t})`}},831:(e,t,o)=>{const{buildings:s}=o(882),{updateTooltip:n,hideTooltip:i}=o(208),{fitCharToCell:r}=o(531);t.updateBuildingList=function(){const e=document.getElementById("buildingList");e.innerHTML="";let t=0;for(const[o,n]of Object.entries(s))for(let s=0;s<n.count;++s,++t){let s=(t%6+1).toString(),i=Math.floor(t/6+1).toString();e.innerHTML+=`<span class = 'tooltip' style='grid-column:${s}; grid-row:${i}; font-size:36px' tooltipDesc='${o}'>${n.emoji||"?"}</span>`}e.querySelectorAll("span.tooltip").forEach((e=>{e.addEventListener("mouseenter",(()=>{n(e)})),e.addEventListener("mouseleave",(()=>{i()}))}))}},667:(e,t,o)=>{const{buttons:s}=o(54),{getCraftedResourceConfigById:n}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,setVisibleButton:d}=o(78),{canCraft:u}=o(64),{canBuyBuilding:f}=o(23),{passedStage:p}=o(751);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var g=n(t.id);g.value>0&&(o="button-disabled");const e=c(g);u(e)&&(o=!t.requiredStage||t.requiredStage&&p(t.requiredStage)?"purchasable":"hidden")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(d(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(d(e.id),e.classList.add(s),e.style.display="")}))}},208:(e,t,o)=>{const{getCraftedResourceConfigById:s}=o(371),{buildings:n}=o(882),{ponders:i}=o(397),{resources:r,getResourceConfigById:a}=o(587),{calcSecondsRemaining:c}=o(594),{getMax:l}=o(78),{getMaterial:d}=o(924),u=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){u.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||s(e.id)||n[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],p=f&&f.cost||e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost");!function(e,t,o,s){let n="";if(t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#4cf">${o}</span><hr>`),s)try{var i="";for(const[e,t]of Object.entries(s)){var a=d(e,r)>=t?"enough":"not-enough";l(e)<t&&(a="exceeds-max"),i+=`<span class="tooltip-${e} ${a}">${t.toFixed(0)} ${e}</span>`;let o=0;r[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=a&&(i+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),i+="<br>"}n+=i}catch(e){n+=s}u.innerHTML=n,u.style.left=e.getBoundingClientRect().right+5+"px",u.style.top=e.getBoundingClientRect().top-u.offsetHeight/2+"px",u.style.display="block"}(e,t,o,p)}}},t={};!function o(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0EwUyxHQUFXMVMsQ0FHZixDQUFFLE1BQU8rTSxHQUNMMkYsR0FBVzlXLENBRWYsQ0FJSmdtQixFQUFReGYsVUFBWXNRLEVBRXBCa1AsRUFBUS9mLE1BQU1pRSxLQUFRMFEsRUFBT2hRLHdCQUF3QnliLE1BQVEsRUFBSyxLQUVsRUwsRUFBUS9mLE1BQU1rRSxJQUFPeVEsRUFBT2hRLHdCQUF3QlQsSUFBTTZiLEVBQVFsZCxhQUFlLEVBQUssS0FFdEZrZCxFQUFRL2YsTUFBTXlELFFBQVUsT0FDNUIsQ0FlSTRjLENBQVlwTixFQUFRK00sRUFBTUMsRUFBUWxtQixFQUN0QyxDLEdDckVJdW1CLEVBQTJCLENBQUMsR0FHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQjdWLElBQWpCOFYsRUFDSCxPQUFPQSxFQUFhdG9CLFFBR3JCLElBQUlELEVBQVNvb0IsRUFBeUJFLEdBQVksQ0FHakRyb0IsUUFBUyxDQUFDLEdBT1gsT0FIQXVvQixFQUFvQkYsR0FBVXRvQixFQUFRQSxFQUFPQyxRQUFTb29CLEdBRy9Dcm9CLEVBQU9DLE9BQ2YsQ0NuQjBCb29CLENBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9hdGVGaXNoLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2J1aWxkaW5ncy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jYWxjSW5jcmVhc2UuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FuQnV5QnVpbGRpbmcuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FuQ3JhZnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FwaXRhbGl6ZUZpcnN0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZml0Q2hhclRvQ2VsbC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9nZXRDcmFmdGVkUmVzb3VyY2UuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2V0TWF0ZXJpYWwuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvaGVscGVyLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pvYlJlcXVpcmVkUG9uZGVycy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qb2JzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vYnVpbGRpbmdzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vYnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wZXJrcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3ByZXN0aWdlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vcmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vc2tpbGxzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL21haW4uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvbWFrZVZpc2libGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcGVya3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcG9uZGVyLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3JlY2FsY01heENsb25lcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvc2F2aW5nLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NlbGVjdENvcnJlY3RQZXJrQnV0dG9uLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvc3RhZ2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3Rvb2xzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3RyYWRlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3RyaWdnZXJGbG9hdFVwVGV4dC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVCb3VuY2VBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVCdWlsZGluZ0xpc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlQnV0dG9uVmlzaWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVUb29sdGlwLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGF0ZUZpc2ggPSBmYWxzZTtcclxuXHJcbmZ1bmN0aW9uIHNldEF0ZUZpc2goYm9vbCkge1xyXG4gICAgYXRlRmlzaCA9IGJvb2w7XHJcbiAgICByZXR1cm4gYXRlRmlzaDtcclxufVxyXG5mdW5jdGlvbiBnZXRBdGVGaXNoKCkge1xyXG4gICAgcmV0dXJuIGF0ZUZpc2g7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYXRlRmlzaCxcclxuICAgIHNldEF0ZUZpc2gsXHJcbiAgICBnZXRBdGVGaXNoXHJcbn07IiwiY29uc3QgeyBidWlsZGluZ3MsIGlzUG9wQnVpbGRpbmcgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGluY3JlYXNlTWF0ZXJpYWwsIGluY3JlYXNlTWF4LCB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyB1cGRhdGVUb3RhbCB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgaGFzUGVyayB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKCcuL3JlY2FsY01heENsb25lcycpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCcpO1xyXG5jb25zdCB7IHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0IH0gPSByZXF1aXJlKCcuL3JlY2FsY3VsYXRlQnVpbGRpbmdDb3N0Jyk7XHJcbmNvbnN0IHsgY2FuQnV5QnVpbGRpbmcgfSA9IHJlcXVpcmUoJy4vY2FuQnV5QnVpbGRpbmcnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nTGlzdCB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdWlsZGluZ0xpc3QnKTtcclxuXHJcbi8qIEJVSUxESU5HUyAqL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBidWlsZGluZyBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUVmZmVjdFN0cmluZyhidWlsZGluZykge1xyXG4gICAgbGV0IGVmZmVjdFBhcnRzID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgW3Jlc291cmNlLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuZWZmZWN0cykpIHtcclxuICAgICAgICAvLyBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZWZmZWN0KSkge1xyXG4gICAgICAgIGVmZmVjdFBhcnRzLnB1c2goYCske3ZhbHVlfSBtYXggJHtyZXNvdXJjZX1gKTtcclxuICAgICAgICAvLyBBZGQgbW9yZSBjb25kaXRpb25zIGhlcmUgaWYgeW91IGludHJvZHVjZSBuZXcgdHlwZXMgb2YgZWZmZWN0c1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBbcmVzb3VyY2UsIGJvb3N0XSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZy5ib29zdCkpIHtcclxuICAgICAgICBsZXQgcGVyY2VudGFnZUJvb3N0ID0gTWF0aC5yb3VuZCgoYm9vc3QgLSAxKSAqIDEwMCk7XHJcbiAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2VmZmVjdGl2ZUJ1aWxkaW5ncycpKSBwZXJjZW50YWdlQm9vc3QgKj0gMS4wMTtcclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHtwZXJjZW50YWdlQm9vc3R9JSAke3Jlc291cmNlfSBwcm9kdWN0aW9uYCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlZmZlY3RQYXJ0cy5qb2luKCcsICcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QoY29zdCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGNvc3QpLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHthbW91bnQudG9GaXhlZCgyKX0gJHttYXRlcmlhbH1gKS5qb2luKCdcXG4nKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uKGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpIHtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuXHJcbiAgICAvLyBidWlsZGluZy5jb3N0ID0gYnVpbGRpbmcuYmFzZWNvc3Q7XHJcbiAgICBidWlsZGluZy5jb3N0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidWlsZGluZy5iYXNlY29zdCkpO1xyXG5cclxuICAgIGNvbnN0IGNvc3RzID0gT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuY29zdClcclxuICAgICAgICAubWFwKChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IGAke21hdGVyaWFsfTogJHthbW91bnR9YClcclxuICAgICAgICAuam9pbignLCAnKTtcclxuXHJcbiAgICAvLyBjb25zdCBoYWxmQ29zdFJlcXVpcmVtZW50ID0gT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuY29zdClcclxuICAgIC8vICAgICAubWFwKChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IGBnZXRNYXRlcmlhbCgnJHttYXRlcmlhbH0scmVzb3VyY2VzJykgPj0gJHtNYXRoLmZsb29yKGFtb3VudCAvIDIpfWApXHJcbiAgICAvLyAgICAgLmpvaW4oJyAmJiAnKTtcclxuXHJcbiAgICAvLyBsZXQgcmVxdWlyZW1lbnRTdHJpbmcgPSBgcmV0dXJuICR7aGFsZkNvc3RSZXF1aXJlbWVudH1gO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZSBidWlsZGluZyBoYXMgYW4gZWZmZWN0IG9uIGNsb25lcyBtYXhcclxuICAgIC8vIGlmIChidWlsZGluZy5lZmZlY3RzICYmIGJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddKSB7XHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnRTdHJpbmcgKz0gYCAmJiBwYXNzZWRTdGFnZSgnY2xvbmVzJylgO1xyXG4gICAgLy8gfVxyXG4gICAgY29uc3QgcmVxdWlyZW1lbnRGdW5jdGlvbiA9IGNyZWF0ZVJlcXVpcmVtZW50RnVuY3Rpb24oYnVpbGRpbmcuY29zdCwgYnVpbGRpbmdLZXkpO1xyXG5cclxuICAgIGNvbnN0IGJ1dHRvbiA9IHtcclxuICAgICAgICAnY2xhc3MnOiAndG9vbHRpcCAnICsgYnVpbGRpbmdLZXksXHJcbiAgICAgICAgJ3RhYic6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICAndGV4dCc6IGAke2J1aWxkaW5nS2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgYnVpbGRpbmdLZXkuc2xpY2UoMSl9YCxcclxuICAgICAgICAndG9vbHRpcERlc2MnOiBidWlsZGluZ3NbYnVpbGRpbmdLZXldLnRvb2x0aXBEZXNjIHx8IFwiQSBteXN0ZXJpb3VzIGJ1aWxkaW5nIHdpdGggdW50b2xkIGJlbmVmaXRzLlwiLFxyXG4gICAgICAgICd0b29sdGlwQ29zdCc6IGNvc3RzLFxyXG4gICAgICAgICdyZXF1aXJlbWVudCc6ICgpID0+IHJlcXVpcmVtZW50RnVuY3Rpb24oKSxcclxuICAgICAgICAnZGF0YV9idWlsZGluZyc6IGJ1aWxkaW5nS2V5LFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gYnV0dG9uO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uKGNvc3RzLCBidWlsZGluZ0tleSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBjb3N0Q29uZGl0aW9uID0gT2JqZWN0LmVudHJpZXMoY29zdHMpXHJcbiAgICAgICAgICAgIC5ldmVyeSgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNFbm91Z2hSZXNvdXJjZSA9IGdldE1hdGVyaWFsKG1hdGVyaWFsKSA+PSBNYXRoLmZsb29yKGFtb3VudCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYENoZWNraW5nICR7bWF0ZXJpYWx9OiBOZWVkICR7TWF0aC5mbG9vcihhbW91bnQgLyAyKX0sIEhhdmUgJHtnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKX0sIFJlc3VsdDogJHtoYXNFbm91Z2hSZXNvdXJjZX1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNFbm91Z2hSZXNvdXJjZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFBhc3NlZFN0YWdlIGZvciAke2J1aWxkaW5nS2V5fTogJHtwYXNzZWRTdGFnZSgnY2xvbmVzJyl9YCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYENvc3QgY29uZGl0aW9uIGZvciAke2J1aWxkaW5nS2V5fTogJHtjb3N0Q29uZGl0aW9ufWApO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFzc2VkU3RhZ2UoJ2Nsb25lcycpICYmIGNvc3RDb25kaXRpb247XHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gY29uc29sZS5sb2coYnV0dG9ucyk7XHJcblxyXG5mdW5jdGlvbiBnZXRCdWlsZGluZ0Nvc3QoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICByZXR1cm4gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV0uY29zdDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgY29uc29sZS5sb2coXCJCdXlpbmcgYnVpbGRpbmcgXCIgKyBidWlsZGluZ05hbWUpO1xyXG4gICAgY29uc3QgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXTtcclxuXHJcblxyXG5cclxuICAgIGlmICghY2FuQnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKSkgcmV0dXJuO1xyXG4gICAgLy8gQWN0dWFsbHkgYnVpbGQgdGhlIGJ1aWxkaW5nXHJcbiAgICBidWlsZGluZy5jb3VudCsrO1xyXG5cclxuICAgIC8vIFN1YnRyYWN0IHRoZSBjb3N0XHJcbiAgICBmb3IgKGNvbnN0IHJlc291cmNlIGluIGJ1aWxkaW5nLmNvc3QpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlJlZHVjaW5nIFwiLCByZXNvdXJjZSwgXCJieVwiLCBidWlsZGluZy5jb3N0W3Jlc291cmNlXSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaW5jcmVhc2VNYXRlcmlhbCk7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZSwgLWJ1aWxkaW5nLmNvc3RbcmVzb3VyY2VdKTtcclxuICAgIH1cclxuICAgIC8vIEFkZCB0aGUgZWZmZWN0c1xyXG4gICAgZm9yIChjb25zdCBbcmVzb3VyY2UsIGFtb3VudF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuZWZmZWN0cykpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnYm91Z2h0IGJ1aWxkaW5nIGVmZmVjdHMnLCByZXNvdXJjZSwgYW1vdW50KTtcclxuICAgICAgICBpbmNyZWFzZU1heChyZXNvdXJjZSwgYW1vdW50KTtcclxuICAgICAgICAvLyBVcGRhdGUgbWF4IGNsb25lcyBhZnRlciB1cGRhdGluZyB0aGUgY291bnRcclxuICAgICAgICBpZiAocmVzb3VyY2UgPT09ICdjbG9uZXMnKSB7XHJcbiAgICAgICAgICAgIHJlY2FsY01heENsb25lcygpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gVXBkYXRlIGJ1dHRvbiB0ZXh0XHJcbiAgICB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50KGJ1aWxkaW5nTmFtZSwgYnVpbGRpbmcuY291bnQpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgY29zdCBvZiB0aGUgYnVpbGRpbmdcclxuICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGJ1aWxkaW5nTmFtZSwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuXHJcblxyXG4gICAgdXBkYXRlQnVpbGRpbmdMaXN0KCk7XHJcbn1cclxuZnVuY3Rpb24gYnV5TWF4QnVpbGRpbmdzKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcbiAgICAvLyBUT0RPIHVwZGF0ZSB3aXRoIGNvb2wgZm9ybXVsYVxyXG4gICAgLy8gTWF0aC5mbG9vcihNYXRoLmxvZygoY3VycmVuY3kgKiAoYnVpbGRpbmcucmF0aW8gLSAxKSkgLyAoYnVpbGRpbmcuYmFzZWNvc3QgKiBNYXRoLnBvdyhidWlsZGluZy5yYXRpbywgYnVpbGRpbmcuY291bnQpKSkgLyBNYXRoLmxvZyhidWlsZGluZy5yYXRpbykpO1xyXG4gICAgd2hpbGUgKGNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkpIHtcclxuICAgICAgICBidXlCdWlsZGluZyhidWlsZGluZ05hbWUpO1xyXG4gICAgICAgICsraTtcclxuICAgIH1cclxuICAgIHJldHVybiBpO1xyXG59XHJcblxyXG4vLyBmdW5jdGlvbiBkb3VibGVTdG9yYWdlRWZmZWN0c0lmUGFzc2VkKCkge1xyXG4vLyAgICAgaWYgKHBhc3NlZFN0YWdlKFwiZG91YmxlU3RvcmFnZTFcIikpIHtcclxuLy8gICAgICAgICBmb3IgKGxldCBidWlsZGluZ0tleSBpbiBidWlsZGluZ3MpIHtcclxuLy8gICAgICAgICAgICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuXHJcbi8vICAgICAgICAgICAgIGlmIChidWlsZGluZy5lZmZlY3RzKSB7XHJcbi8vICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBidWlsZGluZy5lZmZlY3RzKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmcuZWZmZWN0c1ttYXRlcmlhbF0ubWF4ICo9IDI7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdCxcclxuICAgIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uLFxyXG4gICAgYnV5TWF4QnVpbGRpbmdzLFxyXG4gICAgYnV5QnVpbGRpbmcsXHJcbiAgICBnZW5lcmF0ZUVmZmVjdFN0cmluZyxcclxuICAgIHVwZGF0ZUJ1aWxkaW5nTGlzdFxyXG59OyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyBnZXRXb3JrZXJzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRGYWN0b3J5UHJvZHVjdGlvbiB9ID0gcmVxdWlyZShcIi4vZmFjdG9yeVwiKTtcclxuY29uc3QgeyBoYXNQcmVzdGlnZSwgZ2V0TGV2ZWxPZlByZXN0aWdlIH0gPSByZXF1aXJlKFwiLi9qc29uL3ByZXN0aWdlXCIpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9nZXRNYXRlcmlhbFwiKTtcclxuY29uc3QgeyBoYXNUb29sIH0gPSByZXF1aXJlKFwiLi90b29sc1wiKTtcclxuXHJcbi8vIENsb25lcyB3b3JrIGF0IDEvNCB0aGUgc3BlZWQgYnkgZGVmYXVsdFxyXG52YXIgY2xvbmVNdWx0ID0gMC4yNTtcclxuLy8gY29uc29sZS5sb2coJ2luaXRpYWwnLCB3b3JrZXJzRGlzdHJpYnV0aW9uKTtcclxuZnVuY3Rpb24gY2FsY0luY3JlYXNlKHJlc291cmNlTmFtZSwgZGVsdGFfdGltZSkge1xyXG4gICAgdmFyIHRvdGFsID0gMDtcclxuICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpLmJ1aWxkaW5ncztcclxuICAgIC8vIGNsb25lcyBpbmNyZWFzZSBieSAxIHBlciBzZWNvbmQgYXMgbG9uZyBhcyB0aGVyZSdzIHNwYWNlXHJcbiAgICAvLyBpZiAocmVzb3VyY2UgPT09ICdjbG9uZXMnICYmIHBhc3NlZFN0YWdlKCdjbG9uZScpKSB7XHJcbiAgICAvLyAgICAgdG90YWwgPSAxO1xyXG4gICAgLy8gICAgIHJldHVybiB0b3RhbDtcclxuICAgIC8vIH1cclxuICAgIGlmICghcmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICBpZiAoY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIG91ciBmYWN0b3JpZXNcclxuICAgICAgICAgICAgdG90YWwgPSBnZXRGYWN0b3J5UHJvZHVjdGlvbihyZXNvdXJjZU5hbWUpO1xyXG4gICAgICAgICAgICBpZiAodG90YWwgPiAwKSByZXR1cm4gdG90YWw7IC8vIERvbid0IGFwcGx5IHNraWxscyB0byBmYWN0b3JpZXNcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gdG90YWw7IC8vIGlmIG5vdCBhIHJlc291cmNlIG9yIGEgY3JhZnRlZCByZXNvdXJjZSwgcmV0dXJuIDBcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVzb3VyY2VOYW1lID09PSAnY2xvbmVzJyAmJiBpc1BvbmRlcmVkKCdhdXRvQ2xvbmUnKSkgdG90YWwgPSAxO1xyXG5cclxuICAgIC8vIEdhdGhlcmluZyBwZXJzb25hbGx5XHJcbiAgICBpZiAocmVzb3VyY2VzW3Jlc291cmNlTmFtZV0gJiYgcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgdG90YWwgKz0gMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBqb2JzXHJcbiAgICBsZXQgbGVhZGVyTXVsdCA9IGhhc1BlcmsoJ0xlYWRlcicpID8gY2xvbmVNdWx0ICogMS41IDogY2xvbmVNdWx0O1xyXG4gICAgdG90YWwgKz0gbGVhZGVyTXVsdCAqIGdldFdvcmtlcnMocmVzb3VyY2VOYW1lKSB8fCAwO1xyXG5cclxuXHJcbiAgICAvLyBBcHBseSBwZXJrcyBwcm9kdWN0aW9uIGJvb3N0XHJcbiAgICBpZiAoaGFzUGVyaygnTHVtYmVyamFjaycpICYmIChyZXNvdXJjZU5hbWUgPT0gJ3dvb2QnIHx8IHJlc291cmNlTmFtZSA9PSAnc3RpY2tzJykpIHRvdGFsICo9IDEuNzU7XHJcbiAgICBpZiAoaGFzUGVyaygnTWluZXInKSAmJiAocmVzb3VyY2VOYW1lID09ICdyb2NrcycgfHwgcmVzb3VyY2VOYW1lID09ICdvcmUnKSkgdG90YWwgKj0gMS43NTtcclxuICAgIGlmIChoYXNQZXJrKCdCb3RhbmlzdCcpICYmIChyZXNvdXJjZU5hbWUgPT0gJ3ZpbmVzJyB8fCByZXNvdXJjZU5hbWUgPT0gJ2hlcmJzJyB8fCByZXNvdXJjZU5hbWUgPT0gJ3doZWF0JykpIHRvdGFsICo9IDEuNzU7XHJcblxyXG4gICAgLy8gQXBwbHkgcHJlc3RpZ2Ugc3BlY2lmaWMgYm9vc3RzXHJcbiAgICAvLyBBcHBseSBza2lsbHMgdG8gYWxsIGNsb25lc1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICBpZiAoc2tpbGwgPT09ICdnYXRoZXJpbmcnICYmIGhhc1ByZXN0aWdlKCdnYXRoZXJpbmdCb29zdCcpKSB0b3RhbCAqPSAxLjEgKiBnZXRMZXZlbE9mUHJlc3RpZ2UoJ2dhdGhlcmluZ0Jvb3N0Jyk7XHJcbiAgICAgICAgICAgIGlmIChza2lsbCA9PT0gJ21hc29ucnknICYmIGhhc1ByZXN0aWdlKCdtYXNvbnJ5Qm9vc3QnKSkgdG90YWwgKj0gMS4xICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdtYXNvbnJ5Qm9vc3QnKTtcclxuICAgICAgICAgICAgaWYgKHNraWxsID09PSAnY2FycGVudHJ5JyAmJiBoYXNQcmVzdGlnZSgnY2FycGVudHJ5Qm9vc3QnKSkgdG90YWwgKj0gMS4xICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdjYXJwZW50cnlCb29zdCcpO1xyXG4gICAgICAgICAgICBpZiAoc2tpbGwgPT09ICd0aGlua2luZycgJiYgaGFzUHJlc3RpZ2UoJ3RoaW5raW5nQm9vc3QnKSkgdG90YWwgKj0gMS4xICogZ2V0TGV2ZWxPZlByZXN0aWdlKCd0aGlua2luZ0Jvb3N0Jyk7XHJcbiAgICAgICAgICAgIGlmIChza2lsbCA9PT0gJ2Zhcm1pbmcnICYmIGhhc1ByZXN0aWdlKCdmYXJtaW5nQm9vc3QnKSkgdG90YWwgKj0gMS4xICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdmYXJtaW5nQm9vc3QnKTtcclxuICAgICAgICAgICAgaWYgKHNraWxsID09PSAnZmlzaGluZycgJiYgaGFzUHJlc3RpZ2UoJ2Zpc2hpbmdCb29zdCcpKSB0b3RhbCAqPSAxLjEgKiBnZXRMZXZlbE9mUHJlc3RpZ2UoJ2Zpc2hpbmdCb29zdCcpO1xyXG4gICAgICAgICAgICBpZiAoc2tpbGwgPT09ICdodW50aW5nJyAmJiBoYXNQcmVzdGlnZSgnaHVudGluZ0Jvb3N0JykpIHRvdGFsICo9IDEuMSAqIGdldExldmVsT2ZQcmVzdGlnZSgnaHVudGluZ0Jvb3N0Jyk7XHJcbiAgICAgICAgICAgIGxldCBza2lsbFJhdGlvID0gMS4wNjtcclxuICAgICAgICAgICAgdmFyIG11bHQgPSAxICsgKE1hdGgucG93KHNraWxsUmF0aW8sIHNraWxsc1tza2lsbF0ubGV2ZWwpIC0gMSkgLyAxMDA7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTXVsdGlwbHlpbmcgZ2FpbiBieSBcIiArIG11bHQpO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBtdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhnZXRCb29zdCgnY2FtcGZpJykpXHJcbiAgICAvLyBBbGwgYnVpbGRpbmdzIGFmdGVyIGxldmVsXHJcbiAgICBmb3IgKGNvbnN0IGJ1aWxkaW5nIG9mIE9iamVjdC5rZXlzKGJ1aWxkaW5ncykpIHtcclxuICAgICAgICBjb25zdCBib29zdERhdGEgPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKS5nZXRCb29zdChidWlsZGluZywgcmVzb3VyY2VOYW1lKTtcclxuICAgICAgICBpZiAoYm9vc3REYXRhKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW5jcmVhc2UgPSBNYXRoLnBvdyhib29zdERhdGEsIGJ1aWxkaW5nc1tidWlsZGluZ10uY291bnQpO1xyXG4gICAgICAgICAgICBpZiAoaXNQb25kZXJlZCgnZWZmZWN0aXZlQnVpbGRpbmdzJykpIGluY3JlYXNlICo9IDEuMDE7XHJcbiAgICAgICAgICAgIHRvdGFsICo9IGluY3JlYXNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ3BvbmRlcjEnKSkgdG90YWwgKj0gMS4wNTtcclxuICAgICAgICBpZiAoaXNQb25kZXJlZCgncG9uZGVyMicpKSB0b3RhbCAqPSAxLjA1O1xyXG4gICAgICAgIGlmIChpc1BvbmRlcmVkKCdwb25kZXIzJykpIHRvdGFsICo9IDEuMDU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2Zhc3RlclJlc291cmNlR2FpbicpKSB0b3RhbCAqPSAxLjA1O1xyXG4gICAgaWYgKGhhc1ByZXN0aWdlKCdjbG9uZUJvb3N0JykpIHRvdGFsICo9IDEuMDUgKiBnZXRMZXZlbE9mUHJlc3RpZ2UoJ2Nsb25lQm9vc3QnKTtcclxuXHJcbiAgICAvLyBDaGVjayB0b29sc1xyXG4gICAgaWYgKHJlc291cmNlTmFtZSA9PT0gJ3dvb2QnICYmIGdldE1hdGVyaWFsKCdheGUnKSA+IDEwKSB0b3RhbCAqPSAxICsgTWF0aC5sb2coZ2V0TWF0ZXJpYWwoJ2F4ZScpIC8gMTApO1xyXG4gICAgaWYgKHJlc291cmNlTmFtZSA9PT0gJ29yZScgJiYgZ2V0TWF0ZXJpYWwoJ3BpY2theGUnKSA+IDEwKSB0b3RhbCAqPSAxICsgTWF0aC5sb2coZ2V0TWF0ZXJpYWwoJ3BpY2theGUnKSAvIDEwKTtcclxuICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdmaXNoJyAmJiBnZXRNYXRlcmlhbCgnZmlzaGluZ3JvZCcpID4gMTApIHRvdGFsICo9IDEgKyBNYXRoLmxvZyhnZXRNYXRlcmlhbCgnZmlzaGluZ3JvZCcpIC8gMTApO1xyXG4gICAgaWYgKHJlc291cmNlTmFtZSA9PT0gJ2dhbWUnICYmIGdldE1hdGVyaWFsKCdzcGVhcicpID4gMTApIHRvdGFsICo9IDEgKyBNYXRoLmxvZyhnZXRNYXRlcmlhbCgnc3BlYXInKSAvIDEwKTtcclxuICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdwb25kZXInICYmIGdldE1hdGVyaWFsKCdwYXBlcicpID4gMTApIHRvdGFsICo9IDEgKyBNYXRoLmxvZyhnZXRNYXRlcmlhbCgncGFwZXInKSAvIDEwKTtcclxuICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdzdGlja3MnICYmIGdldE1hdGVyaWFsKCdzdGFmZicpID4gMTApIHRvdGFsICo9IDEgKyBNYXRoLmxvZyhnZXRNYXRlcmlhbCgnc3RhZmYnKSAvIDEwKTtcclxuXHJcbiAgICAvLyBOZWVkIGF0IGxlYXN0IDEwIGh1c2tzIHRvIGJvb3N0IG1hdGhlbWF0aWNhbGx5IChsbigxKSA9IDApXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2h1c2tzJykgPiAxMCkgdG90YWwgKj0gMSArIE1hdGgubG9nKGdldE1hdGVyaWFsKCdodXNrcycpIC8gMTApO1xyXG4gICAgLy8gQ29udmVydCBmcm9tIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXHJcbiAgICB0b3RhbCAqPSBkZWx0YV90aW1lIC8gMTAwMDtcclxuICAgIC8vIHJvdW5kIHRvdGFsIHRvIG5lYXJlc3QgdGhvdXNhbmR0aFxyXG4gICAgdG90YWwgPSBwYXJzZUZsb2F0KHRvdGFsLnRvRml4ZWQoMykpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJ0aW1lIGZvciByZXNvdXJjZXNcIiwgZGVsdGFfdGltZSwgcmVzb3VyY2VOYW1lLCB0b3RhbCk7XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuZXhwb3J0cy5jYWxjSW5jcmVhc2UgPSBjYWxjSW5jcmVhc2U7IiwiY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ05hbWVcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICBsZXQgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKS5idWlsZGluZ3M7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG5cclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgIGlmIChidWlsZGluZy5jb3N0W3Jlc291cmNlXSA+IGdldE1hdGVyaWFsKHJlc291cmNlLCByZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIGNhbkJ1eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FuJ3QgYnV5IGNsb25pbmcgYnVpbGRpbmdzIGJlZm9yZSBjbG9uZXMgdW5sb2NrZWRcclxuICAgIGlmIChidWlsZGluZy5lZmZlY3RzICYmIGJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddICYmICFwYXNzZWRTdGFnZSgnY2xvbmUnKSkgY2FuQnV5ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB3ZSBidXkgJyxidWlsZGluZ05hbWUsY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuZXhwb3J0cy5jYW5CdXlCdWlsZGluZyA9IGNhbkJ1eUJ1aWxkaW5nOyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9jcmFmdGVkUmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5mdW5jdGlvbiBjYW5DcmFmdChyZXNvdXJjZUtleSkge1xyXG4gICAgbGV0IGNhbkNyYWZ0ID0gdHJ1ZTtcclxuICAgIGxldCByZXF1aXJlbWVudHMgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGFsbCByZXF1aXJlbWVudHMgYXJlIG1ldFxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZUtleSwgcmVxdWlyZW1lbnRzKTtcclxuICAgICAgICBmb3IgKGxldCBtYXQgaW4gcmVxdWlyZW1lbnRzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIDwgcmVxdWlyZW1lbnRzW21hdF0pIHtcclxuICAgICAgICAgICAgICAgIGNhbkNyYWZ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgaW4gY2FsY3VsYXRpbmcgcmVxdWlyZW1lbnRzOiAnLCByZXNvdXJjZUtleSwgcmVxdWlyZW1lbnRzLCBlcnIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjYW5DcmFmdDtcclxufVxyXG5leHBvcnRzLmNhbkNyYWZ0ID0gY2FuQ3JhZnQ7IiwiLyoqXHJcbiAqIENhcGl0YWxpemVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmdcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBzdHJpbmdFeGFtcGxlXHJcbiAqIEByZXR1cm5zIFN0cmluZ0V4YW1wbGVcclxuICovXHJcbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdChzdHIpIHtcclxuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XHJcbn1cclxuZXhwb3J0cy5jYXBpdGFsaXplRmlyc3QgPSBjYXBpdGFsaXplRmlyc3Q7IiwiY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbi8vIEFzc3VtaW5nIHRoZXNlIGFyZSBkZWZpbmVkIGdsb2JhbGx5XHJcbi8vIHZhciBtYW51ZmFjdHVyZWRNYXAgPSB7XHJcbi8vICAgICBjbGF5OiBbJ2JyaWNrcyddLFxyXG4vLyAgICAgaGVyYnM6IFsnbWVkaWNpbmUnXSxcclxuLy8gICAgIGhpZGVzOiBbJ2xlYXRoZXInXSxcclxuLy8gICAgIGlyb246IFsnc3RlZWwnLCAnbmFpbHMnXSxcclxuLy8gICAgIG9yZTogWydpcm9uJywgJ3NpbHZlcicsICdnb2xkJ10sXHJcbi8vICAgICBzYW5kOiBbJ2dsYXNzJywgJ2NvbmNyZXRlJ10sXHJcbi8vICAgICByb2NrczogWydzbGFicyddLFxyXG4vLyAgICAgdmluZXM6IFsncm9wZSddLFxyXG4vLyAgICAgd29vZDogWydwYXBlcicsICdiZWFtcycsICdjcmF0ZXMnXSxcclxuLy8gfTtcclxuXHJcbnZhciBzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcCA9IHtcclxuICAgICdiZWFtcyc6IFsnd29vZCddLFxyXG4gICAgJ2JyaWNrcyc6IFsnY2xheSddLFxyXG4gICAgJ2NvbmNyZXRlJzogWydzYW5kJ10sXHJcbiAgICAnY3JhdGVzJzogWyd3b29kJ10sXHJcbiAgICAnZ2xhc3MnOiBbJ3NhbmQnXSxcclxuICAgICdnb2xkJzogWydvcmUnXSxcclxuICAgICdoYW5kbGUnOiBbJ3N0aWNrcyddLFxyXG4gICAgJ2lyb24nOiBbJ29yZSddLFxyXG4gICAgJ2xlYXRoZXInOiBbJ2hpZGVzJ10sXHJcbiAgICAnbWVkaWNpbmUnOiBbJ2hlcmJzJ10sXHJcbiAgICAnbmFpbHMnOiBbJ2lyb24nXSxcclxuICAgICdwYXBlcic6IFsnd29vZCddLFxyXG4gICAgJ3NoYXJwcm9ja3MnOiBbJ3JvY2tzJ10sXHJcbiAgICAnc2lsdmVyJzogWydvcmUnXSxcclxuICAgICdzbGFicyc6IFsncm9ja3MnXSxcclxuICAgICdzcGVhcic6IFsnc3RhZmYnLCAnc2hhcnByb2NrcycsICdyb3BlJ10sXHJcbiAgICAnc3RhZmYnOiBbJ2hhbmRsZScsICdyb3BlJ10sXHJcbiAgICAnc3RlZWwnOiBbJ2lyb24nXSxcclxuICAgICdzdGlja3MnOiBbJ3dvb2QnXSxcclxuICAgICdyb3BlJzogWyd2aW5lcyddLFxyXG4gICAgJ3dvb2QnOiBbJ3N0aWNrcyddLFxyXG59O1xyXG5cclxuXHJcbnZhciBhbGxNYXRlcmlhbHMgPSBbXTtcclxuT2JqZWN0LmtleXMocmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG5PYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG5jb25zb2xlLmxvZyhcIkFsbCBtYXRlcmlhbHM6IFwiLCBhbGxNYXRlcmlhbHMpO1xyXG5cclxubGV0IGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZyA9IHt9O1xyXG5sZXQgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nID0ge307XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUHJvZHVjaW5nKHJlc291cmNlKSB7XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nO1xyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzQ29uc3VtaW5nKHJlc291cmNlKSB7XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nO1xyXG59XHJcblxyXG4vLyBmdW5jdGlvbiBnZXRGYWN0b3J5Q29uc3VtcHRpb24ocmVzb3VyY2UpIHtcclxuLy8gICAgIHJldHVybiBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbcmVzb3VyY2VdICogO1xyXG4vLyB9XHJcblxyXG5mdW5jdGlvbiBnZXRGYWN0b3J5UHJvZHVjdGlvbihyZXNvdXJjZSkge1xyXG4gICAgcmV0dXJuIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tyZXNvdXJjZV0gKiBtYW51ZmFjdHVyZUJ1bGs7XHJcbn1cclxuXHJcblxyXG4vLyBGdW5jdGlvbiB0byB1cGRhdGUgcmVzb3VyY2UgcHJvZHVjdGlvbiBhbmQgY29uc3VtcHRpb25cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiB1cGRhdGVGYWN0b3J5UmVzb3VyY2VUcmFja2luZyhvbGRQcm9kdWNlZCwgbmV3UHJvZHVjZWQsIGZhY3RvcnlJbmRleCkge1xyXG4gICAgLy8gSWYgdGhpcyBmYWN0b3J5IHdhcyBwcmV2aW91c2x5IHByb2R1Y2luZyBzb21ldGhpbmcsIHJlZHVjZSB0aGUgY291bnRcclxuICAgIGlmIChvbGRQcm9kdWNlZCAmJiBvbGRQcm9kdWNlZCAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW29sZFByb2R1Y2VkXS0tO1xyXG4gICAgICAgIEFycmF5LmZyb20oY3JhZnRlZFJlc291cmNlc1tvbGRQcm9kdWNlZF0uY29zdCkuZm9yRWFjaCgoY29zdCkgPT4ge1xyXG4gICAgICAgICAgICBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0gLT0gY29zdC5hbW91bnQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBwcm9kdWN0aW9uIGNvdW50IGZvciB0aGUgbmV3IHJlc291cmNlXHJcbiAgICBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbbmV3UHJvZHVjZWRdKys7XHJcbiAgICBBcnJheS5mcm9tKGNyYWZ0ZWRSZXNvdXJjZXNbbmV3UHJvZHVjZWRdLmNvc3QpLmZvckVhY2goKGNvc3QpID0+IHtcclxuICAgICAgICBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0gKz0gY29zdC5hbW91bnQ7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gQ2FsbCB0aGlzIHdoZW5ldmVyIGEgZmFjdG9yeSdzIHNldHRpbmdzIGNoYW5nZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIG9uRmFjdG9yeU1vZGlmaWVkKGZhY3RvcnlJbmRleCwgbmV3UHJvZHVjZWQpIHtcclxuICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2ZhY3RvcnktJHtmYWN0b3J5SW5kZXh9IC5yaWdodFNlbGVjdGApO1xyXG4gICAgdXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmcocmlnaHRTZWxlY3QuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJyksIG5ld1Byb2R1Y2VkLCBmYWN0b3J5SW5kZXgpO1xyXG4gICAgcmlnaHRTZWxlY3Quc2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJywgbmV3UHJvZHVjZWQpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUZhY3RvcnlEaXYoKSB7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSByZXNvdXJjZSB0cmFja2luZyBvYmplY3RzXHJcbiAgICBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5mb3JFYWNoKChyZXNvdXJjZSkgPT4ge1xyXG4gICAgICAgIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tyZXNvdXJjZV0gPSAwO1xyXG4gICAgICAgIEFycmF5LmZyb20oY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZV0uY29zdCkuZm9yRWFjaCgoY29zdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW2Nvc3QucmVzb3VyY2VdID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGNvbnN0IGZhY3Rvcmllc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWN0b3JpZXMnKTtcclxuICAgIGNvbnN0IGZhY3RvcnlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGZhY3RvcnlEaXYuY2xhc3NOYW1lID0gJ2ZhY3RvcnknO1xyXG5cclxuICAgIGNvbnN0IGxlZnRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgbGVmdFRleHQuY2xhc3NMaXN0LmFkZCgnZmFjdG9yeUNvc3QnKTtcclxuICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcblxyXG4gICAgLy8gUG9wdWxhdGUgdGhlIHJpZ2h0IGRyb3Bkb3duXHJcbiAgICBPYmplY3Qua2V5cyhzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcCkuZm9yRWFjaChyZXNvdXJjZSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IHJlc291cmNlO1xyXG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHJlc291cmNlO1xyXG4gICAgICAgIHJpZ2h0U2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIHJpZ2h0U2VsZWN0LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsICdub25lJyk7XHJcblxyXG5cclxuICAgIHJpZ2h0U2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgcHJvZHVjZWQgcmVzb3VyY2UgZm9yIHRoaXMgZmFjdG9yeVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQcm9kdWNlZCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChjdXJyZW50UHJvZHVjZWQgIT09ICdub25lJykgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Jlc291cmNlLSR7Y3VycmVudFByb2R1Y2VkfWApLnN0eWxlLmNvbG9yID0gJyc7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1Byb2R1Y2VkID0gcmlnaHRTZWxlY3QudmFsdWU7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSByZXNvdXJjZSB0cmFja2luZ1xyXG4gICAgICAgIHVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nKGN1cnJlbnRQcm9kdWNlZCwgbmV3UHJvZHVjZWQsIHRoaXMuZGF0YXNldC5mYWN0b3J5SW5kZXgpO1xyXG5cclxuICAgICAgICAvLyBOb3cgdXBkYXRlIHRoZSBkYXRhc2V0IGZvciB0aGUgbmV4dCBjaGFuZ2UgZXZlbnRcclxuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsIG5ld1Byb2R1Y2VkKTtcclxuXHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcmVzb3VyY2UtJHtuZXdQcm9kdWNlZH1gKS5zdHlsZS5jb2xvciA9ICd0aGlzdGxlJztcclxuICAgICAgICBsZWZ0VGV4dC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBsZWZ0VGV4dC5pbm5lckhUTUwgKz0gYCR7cmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbcmlnaHRTZWxlY3QudmFsdWVdLmNvc3QpfWA7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBpbml0aWFsIG9wdGlvbiBmb3IgbGVmdCBzZWxlY3RcclxuICAgIGZ1bmN0aW9uIGFkZEluaXRpYWxPcHRpb24oc2VsZWN0RWxlbWVudCwgdGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBpbml0aWFsT3B0aW9uLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmRDaGlsZChpbml0aWFsT3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIGFycm93LmlubmVySFRNTCA9ICcmIzg1OTQ7JzsgLy8gUmlnaHQgYXJyb3cgSFRNTCBlbnRpdHlcclxuXHJcbiAgICBmYWN0b3J5RGl2LmFwcGVuZENoaWxkKGxlZnRUZXh0KTtcclxuICAgIGZhY3RvcnlEaXYuYXBwZW5kQ2hpbGQoYXJyb3cpO1xyXG4gICAgZmFjdG9yeURpdi5hcHBlbmRDaGlsZChyaWdodFNlbGVjdCk7XHJcblxyXG4gICAgYWRkSW5pdGlhbE9wdGlvbihyaWdodFNlbGVjdCwgJ1NlbGVjdCBhIFJlc291cmNlJyk7XHJcblxyXG4gICAgZmFjdG9yaWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGZhY3RvcnlEaXYpO1xyXG5cclxuICAgIHJldHVybiBmYWN0b3J5RGl2O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbG9hZEZhY3RvcnkoY3JhZnRpbmcpIHtcclxuICAgIGxldCBkaXYgPSBjcmVhdGVGYWN0b3J5RGl2KCk7XHJcbiAgICBkaXYucXVlcnlTZWxlY3Rvcignc2VsZWN0JykudmFsdWUgPSBjcmFmdGluZztcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNyZXNvdXJjZS0ke2NyYWZ0aW5nfWApLnN0eWxlLmNvbG9yID0gJ3RoaXN0bGUnO1xyXG4gICAgZGl2LnF1ZXJ5U2VsZWN0b3IoJy5mYWN0b3J5Q29zdCcpLmlubmVySFRNTCA9ICcnO1xyXG4gICAgZGl2LnF1ZXJ5U2VsZWN0b3IoJy5mYWN0b3J5Q29zdCcpLmlubmVySFRNTCArPSBgJHtyZXF1aXJlKCcuL3Jlc291cmNlcycpLmdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlc1tjcmFmdGluZ10uY29zdCl9YDtcclxuXHJcbn1cclxuXHJcblxyXG5sZXQgbWFudWZhY3R1cmVCdWxrID0gMjtcclxubGV0IGJ1bGtVcGdyYWRlQ29zdCA9IDMwO1xyXG5sZXQgbWFudWZhY3R1cmVCb251cyA9IDE7XHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gcmVzb3VyY2VzIEFsbCByZXNvdXJjZXMgcmVxdWlyZWQgZm9yIHRoZSBjcmFmdFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZ29hbFJlc291cmNlIFdoYXQgd2UnbGwgYmUgY3JhZnRpbmdcclxuICovXHJcbmZ1bmN0aW9uIG1hbnVmYWN0dXJlKHJlc291cmNlcywgZ29hbFJlc291cmNlKSB7XHJcbiAgICAvLyBDYWxjdWxhdGUgaG93IG1hbnkgd2UgY2FuIGFmZm9yZFxyXG4gICAgbGV0IGFyciA9IFtdO1xyXG4gICAgcmVzb3VyY2VzLmZvckVhY2gocmVzb3VyY2UgPT4gYXJyLnB1c2goZ2V0TWF0ZXJpYWwocmVzb3VyY2UpIC8gY3JhZnRlZFJlc291cmNlc1tnb2FsUmVzb3VyY2VdLmNvc3RbcmVzb3VyY2VdKSk7XHJcbiAgICBsZXQgbnVtID0gTWF0aC5taW4obWFudWZhY3R1cmVCdWxrLCAuLi5hcnIpO1xyXG4gICAgY29uc29sZS5sb2cobnVtLCBtYW51ZmFjdHVyZUJ1bGssIC4uLmFycik7XHJcbiAgICBudW0gKj0gbWFudWZhY3R1cmVCb251cztcclxuICAgIC8vIFRoZSBmYWN0b3JpZXMgZ2V0IHRvIGJlIGhhbGYgcHJpY2Ugb2Ygbm9ybWFsIGNyYWZ0aW5nIGJjIGVmZmljaWVuY3lcclxuICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuY3JhZnRSZXNvdXJjZVF1YW50aXR5KGdvYWxSZXNvdXJjZSwgbnVtKTtcclxuICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwoZ29hbFJlc291cmNlLCBudW0pO1xyXG4gICAgLy8gaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZSwgLWNyYWZ0ZWRSZXNvdXJjZXNbZ29hbFJlc291cmNlXS5jb3N0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBncmFkZUJ1bGsoKSB7XHJcbiAgICBtYW51ZmFjdHVyZUJ1bGsgKz0gMjtcclxuICAgIGJ1bGtVcGdyYWRlQ29zdCArPSAxMDtcclxuXHJcbiAgICBjb25zdCB1cEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cGdyYWRlQnVsa0J1dHRvbicpO1xyXG4gICAgdXBCdXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIGAke21hbnVmYWN0dXJlQnVsa30g4oaSICR7bWFudWZhY3R1cmVCdWxrICsgMn06ICR7YnVsa1VwZ3JhZGVDb3N0LnRvRml4ZWQoMCl9IHNpbHZlcmApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhdHRlbXB0TWFudWZhY3R1cmUoKSB7XHJcbiAgICBjb25zdCBmYWN0b3JpZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmFjdG9yeScpO1xyXG4gICAgZmFjdG9yaWVzLmZvckVhY2goZmFjdG9yeSA9PiB7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IGxlZnRTZWxlY3QgPSBmYWN0b3J5LnF1ZXJ5U2VsZWN0b3IoJ3NwYW46Zmlyc3QtY2hpbGQnKTtcclxuICAgICAgICBjb25zdCByaWdodFNlbGVjdCA9IGZhY3RvcnkucXVlcnlTZWxlY3Rvcignc2VsZWN0Omxhc3QtY2hpbGQnKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgZ29hbFJlc291cmNlID0gcmlnaHRTZWxlY3QudmFsdWU7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2VzID0gc3dpdGNoZWRNYW51ZmFjdHVyZWRNYXBbZ29hbFJlc291cmNlXTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImNoZWNraW5nIGZhY3RvcnlcIiwgZ29hbFJlc291cmNlKTtcclxuICAgICAgICBpZiAocmVzb3VyY2VzICYmIGdvYWxSZXNvdXJjZSkge1xyXG4gICAgICAgICAgICBtYW51ZmFjdHVyZShyZXNvdXJjZXMsIGdvYWxSZXNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBDYWxsIHRoaXMgZnVuY3Rpb24gd2hlbmV2ZXIgeW91IHdhbnQgdG8gc3RhcnQgdGhlIG1hbnVmYWN0dXJpbmcgcHJvY2Vzc1xyXG4vLyBmb3IgZXhhbXBsZSwgYWZ0ZXIgY3JlYXRpbmcgdGhlIGZhY3RvcnkgZGl2cyBpbml0aWFsbHkgb3IgYWZ0ZXIgYWRkaW5nIGEgbmV3IG9uZVxyXG4vLyBzdGFydE1hbnVmYWN0dXJpbmdQcm9jZXNzKCk7XHJcbi8vIGZ1bmN0aW9uIGRldGVybWluZU5ld0ZhY3RvcnlDb3N0KCkge1xyXG4vLyAgICAgdmFyIGNvc3QgPSA1MDtcclxuLy8gICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmcpKSB7XHJcbi8vICAgICAgICAgaWYgKHZhbCA+IDApXHJcbi8vICAgICAgICAgICAgIGNvc3QgKj0gTWF0aC5wb3coMS4yLCB2YWwpO1xyXG4vLyAgICAgfVxyXG4vLyAgICAgcmV0dXJuIGNvc3Q7XHJcbi8vIH1cclxuLy8gdmFyIG5ld0ZhY3RvcnlTaWx2ZXJDb3N0ID0gZGV0ZXJtaW5lTmV3RmFjdG9yeUNvc3QoKTtcclxudmFyIG5ld0ZhY3RvcnlTaWx2ZXJDb3N0ID0gNTA7XHJcbmZ1bmN0aW9uIGJ1eUZhY3RvcnkoKSB7XHJcbiAgICBjb25zdCBidXlGYWN0b3J5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1eUZhY3RvcnlCdXR0b24nKTtcclxuICAgIGlmIChnZXRNYXRlcmlhbCgnc2lsdmVyJykgPCBuZXdGYWN0b3J5U2lsdmVyQ29zdCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdOb3QgZW5vdWdoIHNpbHZlciEnKTsgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhcyBlbm91Z2ggc2lsdmVyIHRvIGFmZm9yZCBmYWN0b3J5XHJcbiAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwoJ3NpbHZlcicsIC1uZXdGYWN0b3J5U2lsdmVyQ29zdCk7XHJcbiAgICBjcmVhdGVGYWN0b3J5RGl2KCk7XHJcblxyXG4gICAgbmV3RmFjdG9yeVNpbHZlckNvc3QgKj0gMS4yO1xyXG4gICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgYCR7bmV3RmFjdG9yeVNpbHZlckNvc3QudG9GaXhlZCgyKX0gc2lsdmVyYCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY3JlYXRlRmFjdG9yeURpdixcclxuICAgIGF0dGVtcHRNYW51ZmFjdHVyZSxcclxuICAgIGJ1eUZhY3RvcnksXHJcbiAgICB1cGdyYWRlQnVsayxcclxuICAgIGFsbE1hdGVyaWFscyxcclxuICAgIGdldEZhY3RvcnlQcm9kdWN0aW9uLFxyXG4gICAgbG9hZEZhY3RvcnksXHJcbiAgICBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdcclxufTtcclxuIiwiZnVuY3Rpb24gZml0Q2hhclRvQ2VsbChjaGFyLCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQsIGluaXRpYWxGb250U2l6ZSkge1xyXG4gICAgLy8gQ3JlYXRlIGEgdGVtcG9yYXJ5IHNwYW4gZWxlbWVudCB0byBtZWFzdXJlIHRoZSBjaGFyYWN0ZXJcclxuICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBzcGFuLnRleHRDb250ZW50ID0gY2hhcjtcclxuICAgIHNwYW4uc3R5bGUuZm9udFNpemUgPSBgJHtpbml0aWFsRm9udFNpemV9cHhgO1xyXG4gICAgc3Bhbi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7IC8vIHNvIGl0IGRvZXNuJ3QgYWZmZWN0IHRoZSBsYXlvdXRcclxuICAgIHNwYW4uc3R5bGUud2hpdGVTcGFjZSA9ICdub3dyYXAnOyAvLyB0byBwcmV2ZW50IGxpbmUgYnJlYWtzXHJcbiAgICBzcGFuLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJzsgLy8gdG8ga2VlcCBpdCBoaWRkZW5cclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3Bhbik7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHNwYW4gZml0cyB3aXRoaW4gdGhlIGRpbWVuc2lvbnMsIGFuZCBhZGp1c3QgZm9udCBzaXplIGlmIG5vdFxyXG4gICAgbGV0IGN1cnJlbnRGb250U2l6ZSA9IGluaXRpYWxGb250U2l6ZTtcclxuICAgIHdoaWxlIChzcGFuLm9mZnNldFdpZHRoIDwgY2VsbFdpZHRoICYmIHNwYW4ub2Zmc2V0SGVpZ2h0IDwgY2VsbEhlaWdodCkge1xyXG4gICAgICAgIGN1cnJlbnRGb250U2l6ZSsrO1xyXG4gICAgICAgIHNwYW4uc3R5bGUuZm9udFNpemUgPSBgJHtjdXJyZW50Rm9udFNpemV9cHhgO1xyXG5cclxuICAgICAgICAvLyBPcHRpb25hbDogc3RvcCBpZiB0aGUgZm9udCBzaXplIGdldHMgdG9vIHNtYWxsXHJcbiAgICAgICAgaWYgKGN1cnJlbnRGb250U2l6ZSA+PSAxMDAwKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDbGVhbiB1cDogcmVtb3ZlIHRoZSB0ZW1wb3Jhcnkgc3BhbiBlbGVtZW50XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNwYW4pO1xyXG5cclxuICAgIHJldHVybiBjdXJyZW50Rm9udFNpemU7XHJcbn1cclxuZXhwb3J0cy5maXRDaGFyVG9DZWxsID0gZml0Q2hhclRvQ2VsbDtcclxuIiwiLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Q3JhZnRlZFJlc291cmNlKG1hdGVyaWFsLCBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcblxyXG4gICAgbWF0ZXJpYWwgPSBtYXRlcmlhbC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlcyA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJykuY3JhZnRlZFJlc291cmNlcztcclxuICAgICAgICAvLyBjb25zb2xlLndhcm4oJ01pc3NpbmcgY3JhZnRlZFJlc291cmNlcyBkZWZpbml0aW9uLCBsb2FkaW5nIGRlZmF1bHQnLCBjcmFmdGVkUmVzb3VyY2VzKTtcclxuICAgIH1cclxuICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkge1xyXG4gICAgICAgIHJldHVybiBjcmFmdGVkUmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSB8fCAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJJbnZhbGlkIGNyYWZ0ZWQgcmVzb3VyY2U6XCIgKyBtYXRlcmlhbCk7IC8vIEZvciBkZWJ1Z2dpbmdcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdldENyYWZ0ZWRSZXNvdXJjZSA9IGdldENyYWZ0ZWRSZXNvdXJjZTtcclxuIiwiY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbi8vIGNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuXHJcbi8vIEdldCBmdW5jdGlvbiBmb3IgbWF0ZXJpYWxzXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBtYXRlcmlhbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWxcclxuICogQHJldHVybnMgVmFsdWUgb2YgbWF0ZXJpYWxcclxuKi9cclxuZnVuY3Rpb24gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykge1xyXG4gICAgaWYgKCFyZXNvdXJjZXMpIHJlc291cmNlcyA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXM7XHJcbiAgICBpZiAocmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkge1xyXG4gICAgICAgIHJldHVybiByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBtYXRlcmlhbDpcIiwgbWF0ZXJpYWwpOyAgLy8gRm9yIGRlYnVnZ2luZ1xyXG4gICAgICAgIHJldHVybiBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwsIG51bGwpO1xyXG5cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdldE1hdGVyaWFsID0gZ2V0TWF0ZXJpYWw7IiwiY29uc3QgeyBoYXNQcmVzdGlnZSwgZ2V0TGV2ZWxPZlByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIGlzUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyB0cmlnZ2VyRmxvYXRVcFRleHQgfSA9IHJlcXVpcmUoJy4vdHJpZ2dlckZsb2F0VXBUZXh0Jyk7XHJcblxyXG5cclxuXHJcblxyXG5sZXQgYWxsVmlzaWJsZUJ1dHRvbnMgPSBuZXcgU2V0KFsnZ2F0aGVyU3RpY2tzJ10pO1xyXG5leHBvcnRzLmFsbFZpc2libGVCdXR0b25zID0gYWxsVmlzaWJsZUJ1dHRvbnM7XHJcblxyXG5cclxuLy8gQ2FsY3VsYXRlIHRoZSBmaW5hbCBudW1iZXIgb2YgY3JhZnRlZCBnb29kcyBmcm9tIGJvbnVzZXNcclxuZnVuY3Rpb24gY2FsY0NyYWZ0Qm9udXMocmVzb3VyY2VLZXkpIHtcclxuICAgIGxldCB0b3RhbCA9IDE7XHJcbiAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5hZmZlY3RlZFJlc291cmNlcy5pbmNsdWRlcyhyZXNvdXJjZUtleSkpIHtcclxuICAgICAgICAgICAgbGV0IHNraWxsUmF0aW8gPSAxLjA2O1xyXG4gICAgICAgICAgICB2YXIgbXVsdCA9IDEgKyAoTWF0aC5wb3coc2tpbGxSYXRpbywgc2tpbGxzW3NraWxsXS5sZXZlbCkgLSAxKSAvIDEwMDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJNdWx0aXBseWluZyBnYWluIGJ5IFwiICsgbXVsdCk7XHJcbiAgICAgICAgICAgIHRvdGFsICo9IG11bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0b3RhbDtcclxufVxyXG5cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gZ2V0QWZmZWN0ZWRSZXNvdXJjZXMoc2tpbGwpIHtcclxuICAgIGlmIChza2lsbHNbc2tpbGxdKSB7XHJcbiAgICAgICAgcmV0dXJuIHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDsgIC8vIG9yIGFuIGVtcHR5IGFycmF5IFtdLCBiYXNlZCBvbiB5b3VyIHByZWZlcmVuY2VcclxufVxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbCBcclxuICogQHJldHVybnMgTWF4IG9mIG1hdGVyaWFsIG9yIEluZmluaXR5XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRNYXgobWF0ZXJpYWwpIHtcclxuICAgIGlmIChpc1Jlc291cmNlKG1hdGVyaWFsKSkge1xyXG4gICAgICAgIGxldCBtYXggPSByZXNvdXJjZXNbbWF0ZXJpYWxdLm1heDtcclxuICAgICAgICBpZiAoaGFzUHJlc3RpZ2UoJ3N0b3JhZ2VTcGFjZScpKSBtYXggKj0gMS4wNSAqIGdldExldmVsT2ZQcmVzdGlnZSgnc3RvcmFnZVNwYWNlJyk7XHJcbiAgICAgICAgcmV0dXJuIG1heDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhclNpZGViYXIoKSB7XHJcbiAgICBjb25zdCBzaWRlYmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIik7XHJcbiAgICBzaWRlYmFyLmlubmVySFRNTCA9ICcnO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gdXBkYXRlU2tpbGxzKHJlc291cmNlLCBudW0pIHtcclxuICAgIG51bSA9IE1hdGguYWJzKG51bSk7XHJcbiAgICBpZiAocmVxdWlyZSgnLi9wb25kZXInKS5pc1BvbmRlcmVkKCdmYXN0ZXJTa2lsbHMnKSkgbnVtICo9IDEuMDU7XHJcbiAgICAvLyBcclxuICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgIC8vIFxyXG4gICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgICAgICAvLyBtYXggbGV2ZWwgMTAwXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmxldmVsID49IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgc2tpbGxzW3NraWxsXS5sZXZlbCA9IDEwMDtcclxuICAgICAgICAgICAgICAgIHNraWxsc1tza2lsbF0uZXhwID0gMDtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCArPSBudW0gLyBNYXRoLnBvdygxLjQsIHNraWxsc1tza2lsbF0ubGV2ZWwpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVwZGF0aW5nIHNraWxsOlwiICsgc2tpbGwgKyBcIiB0byBcIiArIHNraWxsc1tza2lsbF0uZXhwKVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA+PSAxMDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAgICAgc2tpbGxzW3NraWxsXS5sZXZlbCArPSAxO1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCA9IDA7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkxldmVsIFVwISBcIiArIHNraWxsICsgc2tpbGxzW3NraWxsXS5sZXZlbCk7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIGxldCBsZXZlbHVwID0gYExldmVsIHVwISAke3NraWxsfSDihpIgJHtza2lsbHNbc2tpbGxdLmxldmVsfWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZXN0aWdlJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQocmVjdC54LCByZWN0LnksIGxldmVsdXAsICcjRjREMDNGJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbGV2ZWxVcE1lc3NhZ2UuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBIaWRlIHRoZSBtZXNzYWdlIGFmdGVyIDMgc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBsZXZlbFVwTWVzc2FnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAvLyBsZXZlbFVwTWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIC8vIH0sIDMwMDApOyAvLyAzMDAwIG1pbGxpc2Vjb25kcyAoMyBzZWNvbmRzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHJlcXVpcmUoJy4vc3RhZ2VzJykucGFzc2VkU3RhZ2UoJ3NraWxsc1RhYmxlJykpIHtcclxuICAgICAgICBwb3B1bGF0ZVNraWxsc1RhYmxlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gZmFsc2U7XHJcblxyXG5mdW5jdGlvbiBwb3B1bGF0ZVNraWxsc1RhYmxlKCkge1xyXG4gICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tpbGxzVGFibGUnKTtcclxuXHJcbiAgICAvLyBJZiB0aGUgdGFibGUgaXMgZW1wdHksIGNyZWF0ZSB0aGUgcm93cyBhbmQgcHJvZ3Jlc3MgYmFyc1xyXG4gICAgaWYgKCFoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIHRhYmxlIGZvciB0aGUgZmlyc3QgdGltZVwiKTtcclxuICAgICAgICBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAvLyBcclxuICAgICAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICAgICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgICAgICAgICAgdHIuaWQgPSAndHItJyArIHNraWxsO1xyXG4gICAgICAgICAgICBsZXQgdGRQcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgIHRkUHJvZ3Jlc3Muc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncHJvZ3Jlc3NCYXInKTtcclxuICAgICAgICAgICAgLy8gaWYgKGlzRGFyaykge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMyMjhCMjInO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyM1MEM4NzgnO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLmhlaWdodCA9ICcyMHB4JztcclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdkYXRhLXNraWxsJywgc2tpbGwpOyAvLyBBc3NpZ24gYSBkYXRhIGF0dHJpYnV0ZSBmb3IgaWRlbnRpZmljYXRpb25cclxuXHJcbiAgICAgICAgICAgIGxldCBza2lsbFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnRleHRDb250ZW50ID0gJ1tsZXZlbCAnICsgc2tpbGxzW3NraWxsXS5sZXZlbCArICddICAgJyArIHNraWxsO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc2V0QXR0cmlidXRlKCdpZCcsICdsZXZlbC0nICsgc2tpbGwpO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUubGVmdCA9ICcxMHB4JztcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTUwJSknO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA9PSAwICYmIHNraWxsc1tza2lsbF0ubGV2ZWwgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdHIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZFByb2dyZXNzLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyKTtcclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5hcHBlbmRDaGlsZChza2lsbFRleHQpO1xyXG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFByb2dyZXNzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBEaXNwbGF5IGV2ZXJ5dGhpbmcgd2UgY2FuXHJcbiAgICAgICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPiAwIHx8IHNraWxsc1tza2lsbF0ubGV2ZWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ci0nICsgc2tpbGwpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucHJvZ3Jlc3NCYXJbZGF0YS1za2lsbD1cIiR7c2tpbGx9XCJdYCk7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0Jhcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNraWxsc1tza2lsbF0uZXhwICsgJyUnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNraWxsTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGV2ZWwtXCIgKyBza2lsbCk7XHJcbiAgICAgICAgICAgICAgICBza2lsbE5hbWUudGV4dENvbnRlbnQgPSAnW2xldmVsICcgKyBza2lsbHNbc2tpbGxdLmxldmVsICsgJ10gICAnICsgc2tpbGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0J1dHRvbklkVmlzaWJsZShpZCkge1xyXG4gICAgcmV0dXJuIGFsbFZpc2libGVCdXR0b25zLmhhcyhpZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZpc2libGVCdXR0b24oaWQpIHtcclxuICAgIGFsbFZpc2libGVCdXR0b25zLmFkZChpZCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZ2V0TWF4LFxyXG4gICAgdXBkYXRlU2tpbGxzLFxyXG4gICAgcG9wdWxhdGVTa2lsbHNUYWJsZSxcclxuICAgIGNhbGNDcmFmdEJvbnVzLFxyXG4gICAgaXNCdXR0b25JZFZpc2libGUsXHJcbiAgICBzZXRWaXNpYmxlQnV0dG9uLFxyXG4gICAgaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSxcclxuICAgIGNsZWFyU2lkZWJhcixcclxufTtcclxuXHJcbiIsIi8qKlxyXG4gKiBBIG1hcCBvZiBhbGwgam9icyB0aGF0IHJlcXVpcmUgYSBwb25kZXIgdG8gYmUgdW5sb2NrZWRcclxuICpcclxuICogSm9iOiBSZXF1aXJlZFBvbmRlclxyXG4gKi9cclxuY29uc3Qgam9iUmVxdWlyZWRQb25kZXJzID0ge1xyXG4gICAgJ3RoaW5raW5nJzogJ3RoaW5raW5nJyxcclxuICAgICdmaXNoaW5nJzogJ2Zpc2hpbmcnLFxyXG4gICAgJ3NtaXRoaW5nJzogJ25vdC11bmxvY2thYmxlJyxcclxuICAgICdmYXJtaW5nJzogJ2FncmljdWx0dXJlJyxcclxuICAgICdjb21iYXQnOiAnY29tYmF0JyxcclxuICAgICdodW50aW5nJzogJ2h1bnRpbmcnXHJcbn07XHJcbmV4cG9ydHMuam9iUmVxdWlyZWRQb25kZXJzID0gam9iUmVxdWlyZWRQb25kZXJzO1xyXG4iLCIvLyBAdHMtbm9jaGVja1xyXG4vLyBERVBFTkRTIE9OOiBza2lsbHMuanMsIHBvbmRlci5qc1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuXHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKFwiLi9wb25kZXJcIik7XHJcbmNvbnN0IHsgZ2V0TWF4IH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IHRyaWdnZXJGbG9hdFVwVGV4dCB9ID0gcmVxdWlyZSgnLi90cmlnZ2VyRmxvYXRVcFRleHQnKTtcclxuXHJcbi8qIEpPQlMgRlVOQ1RJT05BTElUWSAqL1xyXG5cclxuXHJcbmNvbnN0IGpvYkNvdW50cyA9IHt9O1xyXG5mb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgIGpvYkNvdW50c1tza2lsbF0gPSAwO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IGpvYnNUYWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9ic1RhYicpO1xyXG5cclxuT2JqZWN0LmtleXMoc2tpbGxzKS5mb3JFYWNoKHNraWxsID0+IHtcclxuICAgIGNvbnN0IGpvYkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgam9iRGl2LmNsYXNzTGlzdC5hZGQoJ2pvYi1idXR0b24nKTtcclxuICAgIGpvYkRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJywgc2tpbGwpO1xyXG4gICAgam9iRGl2LmlkID0gJ2pvYi1idXR0b24tJyArIHNraWxsO1xyXG5cclxuICAgIGNvbnN0IGRlY3JlbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGVjcmVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2J0bi1kZWNyZW1lbnQnKTtcclxuICAgIGRlY3JlbWVudERpdi50ZXh0Q29udGVudCA9ICctJztcclxuICAgIGpvYkRpdi5hcHBlbmRDaGlsZChkZWNyZW1lbnREaXYpO1xyXG5cclxuICAgIGNvbnN0IGpvYk5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgam9iTmFtZVNwYW4uY2xhc3NMaXN0LmFkZCgnam9iLW5hbWUnKTtcclxuICAgIGpvYk5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7c2tpbGwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBza2lsbC5zbGljZSgxKX06IDBgO1xyXG4gICAgam9iRGl2LmFwcGVuZENoaWxkKGpvYk5hbWVTcGFuKTtcclxuXHJcbiAgICBjb25zdCBpbmNyZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGluY3JlbWVudERpdi5jbGFzc0xpc3QuYWRkKCdidG4taW5jcmVtZW50Jyk7XHJcbiAgICBpbmNyZW1lbnREaXYudGV4dENvbnRlbnQgPSAnKyc7XHJcbiAgICBqb2JEaXYuYXBwZW5kQ2hpbGQoaW5jcmVtZW50RGl2KTtcclxuXHJcbiAgICBqb2JzVGFiLmFwcGVuZENoaWxkKGpvYkRpdik7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1pbmNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBqb2JUeXBlID0gdGhpcy5jbG9zZXN0KCcuam9iLWJ1dHRvbicpLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2Nsb25lcycsIHJlc291cmNlcykgPiBnZXRUb3RhbEpvYnMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gZXZlbnQucGFnZVg7IC8vIFggY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuICAgICAgICAgICAgY29uc3QgeSA9IGV2ZW50LnBhZ2VZOyAvLyBZIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcblxyXG4gICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkaWZmZXJlbmNlID0gZ2V0TWF0ZXJpYWwoJ2Nsb25lcycsIHJlc291cmNlcykgLSBnZXRUb3RhbEpvYnMoKTtcclxuICAgICAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSArPSBkaWZmZXJlbmNlO1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArJHtkaWZmZXJlbmNlfSB3b3JrZXJzYCwgJ2dyZWVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0rKztcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCAnKzEgd29ya2VyJywgJ2dyZWVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKGpvYlR5cGUsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoam9iVHlwZSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHdvcmtlcnNEaXN0cmlidXRpb24pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1kZWNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBqb2JUeXBlID0gdGhpcy5jbG9zZXN0KCcuam9iLWJ1dHRvbicpLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgbGV0IG51bVdvcmtlcnMgPSBqb2JDb3VudHNbam9iVHlwZV07XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSA9IDA7XHJcblxyXG4gICAgICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYOyAvLyBYIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTsgLy8gWSBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG4gICAgICAgICAgICBpZiAobnVtV29ya2VycyA+IDApIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgLSR7bnVtV29ya2Vyc30gd29ya2Vyc2AsICdyZWQnKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGpvYkNvdW50c1tqb2JUeXBlXSA+IDApIHtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdLS07XHJcbiAgICAgICAgICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYOyAvLyBYIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTsgLy8gWSBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG4gICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgJy0xIHdvcmtlcicsICdyZWQnKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGdldFRvdGFsSm9icygpIHtcclxuICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICBmb3IgKGxldCBqIGluIGpvYkNvdW50cykge1xyXG4gICAgICAgIHRvdGFsICs9IGpvYkNvdW50c1tqXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0b3RhbDtcclxufVxyXG5cclxuLy8gR2xvYmFsIGZvciB3aGljaCByZXNvdXJjZSBlYWNoIGNsb25lIGdhdGhlcnNcclxubGV0IHdvcmtlcnNEaXN0cmlidXRpb24gPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIGRpc3RyaWJ1dGVXb3JrZXJzKHNraWxsLCB0b3RhbFdvcmtlcnMpIHtcclxuICAgIGlmICghc2tpbGxzW3NraWxsXSkgcmV0dXJuIG51bGw7ICAvLyBSZXR1cm4gbnVsbCBpZiB0aGUgc2tpbGwgZG9lc24ndCBleGlzdFxyXG5cclxuICAgIGxldCBhZmZlY3RlZFJlc291cmNlcyA9IHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXM7XHJcblxyXG4gICAgLy8gRmlsdGVyIGFmZmVjdGVkUmVzb3VyY2VzIHRvIG9ubHkgY29udGFpbiBrZXlzIHRoYXQgYXJlIHByZXNlbnQgaW4gdGhlIHJlc291cmNlcyBtYXBcclxuICAgIGFmZmVjdGVkUmVzb3VyY2VzID0gYWZmZWN0ZWRSZXNvdXJjZXMuZmlsdGVyKHJlc291cmNlID0+IHJlc291cmNlIGluIHJlc291cmNlcyk7XHJcblxyXG4gICAgLy8gbGV0IGE7XHJcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGFmZmVjdGVkUmVzb3VyY2VzLmxlbmd0aDsgYSA9IGFmZmVjdGVkUmVzb3VyY2VzW2ldKSB7XHJcblxyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgLy8gICAgIGlmICghcmVzb3VyY2VzW2FdKSB7XHJcblxyXG4gICAgLy8gICAgICAgICBjb25zdCBpbmRleCA9IGFmZmVjdGVkUmVzb3VyY2VzLmluZGV4T2YoYSk7XHJcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGEsIGluZGV4KTtcclxuICAgIC8vICAgICAgICAgbGV0IHggPSBhZmZlY3RlZFJlc291cmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICsraTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhhZmZlY3RlZFJlc291cmNlcyk7XHJcbiAgICBsZXQgbnVtYmVyT2ZSZXNvdXJjZXMgPSBhZmZlY3RlZFJlc291cmNlcy5sZW5ndGg7XHJcblxyXG4gICAgLy8gSW5pdGlhbCBldmVuIGRpc3RyaWJ1dGlvblxyXG4gICAgbGV0IHBlclJlc291cmNlID0gTWF0aC5mbG9vcih0b3RhbFdvcmtlcnMgLyBudW1iZXJPZlJlc291cmNlcyk7XHJcblxyXG4gICAgLy8gRXZlbmx5IGRpc3RyaWJ1dGUgd29ya2VycyBhbW9uZyB0aGUgYWZmZWN0ZWQgcmVzb3VyY2VzXHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBvZiBhZmZlY3RlZFJlc291cmNlcykge1xyXG4gICAgICAgIHdvcmtlcnNEaXN0cmlidXRpb24uc2V0KHJlc291cmNlLCBwZXJSZXNvdXJjZSk7XHJcbiAgICAgICAgaWYgKHBlclJlc291cmNlID4gMCkgbW92ZUJhbGxGcm9tSm9iVG9SZXNvdXJjZShza2lsbCwgcmVzb3VyY2UpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXN0cmlidXRlIGFueSByZW1haW5pbmcgd29ya2VycyBkdWUgdG8gcm91bmRpbmdcclxuICAgIGxldCByZW1haW5pbmdXb3JrZXJzID0gdG90YWxXb3JrZXJzIC0gKHBlclJlc291cmNlICogbnVtYmVyT2ZSZXNvdXJjZXMpO1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2Ugb2YgYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICBpZiAocmVtYWluaW5nV29ya2VycyA+IDApIHtcclxuICAgICAgICAgICAgd29ya2Vyc0Rpc3RyaWJ1dGlvbi5zZXQocmVzb3VyY2UsIHdvcmtlcnNEaXN0cmlidXRpb24uZ2V0KHJlc291cmNlKSArIDEpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdXb3JrZXJzLS07XHJcbiAgICAgICAgICAgIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoc2tpbGwsIHJlc291cmNlKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyh3b3JrZXJzRGlzdHJpYnV0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbW92ZUJhbGxGcm9tSm9iVG9SZXNvdXJjZShqb2JUeXBlLCBhZmZlY3RlZFJlc291cmNlKSB7XHJcbiAgICAvLyBGaW5kIHRoZSBqb2IgYnV0dG9uXHJcbiAgICBjb25zdCBqb2JCdXR0b24gPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJykpXHJcbiAgICAgICAgLmZpbmQoYnRuID0+IGJ0bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJykgPT09IGpvYlR5cGUpO1xyXG5cclxuICAgIGlmICgham9iQnV0dG9uIHx8IGpvYkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHJldHVybjsgLy8gSm9iIGJ1dHRvbiBub3QgZm91bmRcclxuXHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHJlc291cmNlLSR7YWZmZWN0ZWRSZXNvdXJjZX1gKTtcclxuICAgIGlmICghcmVzb3VyY2VEaXNwbGF5IHx8IHJlc291cmNlRGlzcGxheS5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHJldHVybjsgLy8gUmVzb3VyY2UgZGlzcGxheSBub3QgZm91bmRcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgcG9zaXRpb25zXHJcbiAgICBjb25zdCBqb2JCdXR0b25SZWN0ID0gam9iQnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgY29uc3QgcmVzb3VyY2VSZWN0ID0gcmVzb3VyY2VEaXNwbGF5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGJhbGwgZWxlbWVudFxyXG4gICAgY29uc3QgYmFsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYmFsbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICBiYWxsLnN0eWxlLndpZHRoID0gJzEwcHgnO1xyXG4gICAgYmFsbC5zdHlsZS5oZWlnaHQgPSAnMTBweCc7XHJcbiAgICBiYWxsLnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1MCUnO1xyXG4gICAgYmFsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xyXG4gICAgYmFsbC5zdHlsZS5vcGFjaXR5ID0gJy44JztcclxuICAgIGJhbGwuc3R5bGUubGVmdCA9IGAke2pvYkJ1dHRvblJlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYfXB4YDtcclxuICAgIGJhbGwuc3R5bGUudG9wID0gYCR7am9iQnV0dG9uUmVjdC50b3AgKyB3aW5kb3cuc2Nyb2xsWX1weGA7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJhbGwpO1xyXG5cclxuICAgIC8vIEFuaW1hdGUgdGhlIGJhbGxcclxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IGJhbGwuYW5pbWF0ZShbXHJcbiAgICAgICAgeyB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtyZXNvdXJjZVJlY3QubGVmdCAtIGpvYkJ1dHRvblJlY3QubGVmdH1weCwgJHtyZXNvdXJjZVJlY3QudG9wIC0gam9iQnV0dG9uUmVjdC50b3B9cHgpYCB9XHJcbiAgICBdLCB7XHJcbiAgICAgICAgZHVyYXRpb246IDEwMDAsIC8vIEFuaW1hdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcclxuICAgICAgICAvLyBmaWxsOiAnZm9yd2FyZHMnIC8vIEtlZXAgdGhlIGJhbGwgYXQgdGhlIGVuZCBwb3NpdGlvbiBhZnRlciBhbmltYXRpb25cclxuICAgICAgICBlYXNpbmc6ICdjdWJpYy1iZXppZXIoLjIzLC0wLjM0LDAsMS4wNiknXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBFdmVudCBsaXN0ZW5lciB0byBoaWRlIHRoZSBiYWxsIGFmdGVyIGFuaW1hdGlvblxyXG4gICAgYW5pbWF0aW9uLm9uZmluaXNoID0gKCkgPT4ge1xyXG4gICAgICAgIGJhbGwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH07XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0V29ya2VycyhyZXNvdXJjZU5hbWUpIHtcclxuICAgIHJldHVybiB3b3JrZXJzRGlzdHJpYnV0aW9uLmdldChyZXNvdXJjZU5hbWUpO1xyXG59XHJcblxyXG4vLyBjb25zdCBhbGxKb2JCdXR0b25icyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJyk7XHJcbmZ1bmN0aW9uIHVwZGF0ZURpc3BsYXkoam9iVHlwZSkge1xyXG4gICAgY29uc3QgdGhpc0pvYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5qb2ItYnV0dG9uW2RhdGEtam9iPVwiJHtqb2JUeXBlfVwiXWApO1xyXG4gICAgaWYgKCF0aGlzSm9iQnV0dG9uKSBjb25zb2xlLndhcm4oXCJDb3VsZG4ndCBmaW5kIGpvYiBidXR0b24gZm9yIGpvYjogXCIsIGpvYlR5cGUpO1xyXG4gICAgY29uc3Qgam9iRWxlbWVudCA9IHRoaXNKb2JCdXR0b24ucXVlcnlTZWxlY3RvcihgLmpvYi1uYW1lYCk7XHJcbiAgICBpZiAoam9iRWxlbWVudCkgam9iRWxlbWVudC50ZXh0Q29udGVudCA9IGAke2pvYlR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBqb2JUeXBlLnNsaWNlKDEpfTogJHtqb2JDb3VudHNbam9iVHlwZV19YDtcclxuXHJcbiAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLnVwZGF0ZUVtb2ppRGlzcGxheSgpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZSB0b3RhbCBhc3NpZ25lZCBjbG9uZXMgY291bnRlclxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlVG90YWwoKSB7XHJcbiAgICBjb25zdCB0b3RhbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjam9icy10b3RhbCcpO1xyXG4gICAgdG90YWxFbGVtZW50LnRleHRDb250ZW50ID0gXCJBc3NpZ25lZCBDbG9uZXM6IFwiICsgZ2V0VG90YWxKb2JzKCkgKyBcIiAvIFwiICsgZ2V0TWF4KCdjbG9uZXMnKTtcclxufVxyXG5cclxuXHJcbmxldCBzdGFydEJ1dHRvbiA9IG51bGw7XHJcbmxldCBjb25uZWN0aW9ucyA9IG5ldyBNYXAoKTsgIC8vIE1hcCB0byBzdG9yZSBjb25uZWN0aW9uc1xyXG5sZXQgbWFuYWdlbWVudCA9IHsgJ2Nvbm5lY3Rpb25zJzogY29ubmVjdGlvbnMsICdtaW5zJzoge30sICdtYXhlcyc6IHt9LCAndHJpZ2dlcnMnOiB7fSB9O1xyXG5sZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmVDYW52YXMnKTtcclxuXHJcbmZ1bmN0aW9uIHNldENvbm5lY3Rpb25zKG5ld0Nvbm5lY3Rpb25zKSB7XHJcbiAgICBjb25uZWN0aW9ucyA9IG5ld0Nvbm5lY3Rpb25zO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDb25uZWN0aW9ucygpIHtcclxuICAgIHJldHVybiBjb25uZWN0aW9ucztcclxufVxyXG5cclxuLy8gaWYgKGNhbnZhcykge1xyXG4vLyBAdHMtaWdub3JlXHJcbmxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuLy8gQHRzLWlnbm9yZVxyXG5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuLy8gQHRzLWlnbm9yZVxyXG5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4vLyB9XHJcblxyXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpO1xyXG5cclxuLy8gICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4vLyAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCcuYnRuLWRlY3JlbWVudCcpIHx8IGUudGFyZ2V0LmNsb3Nlc3QoJy5idG4taW5jcmVtZW50JykpIHJldHVybjtcclxuXHJcbi8vICAgICAgICAgICAgIGlmICghaXNQb25kZXJlZCgnbWFuYWdlbWVudCcpKSByZXR1cm47XHJcblxyXG4vLyAgICAgICAgICAgICBsZXQgam9iQnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdCgnLmpvYi1idXR0b24nKTtcclxuXHJcbi8vICAgICAgICAgICAgIGlmIChqb2JCdXR0b24pIHtcclxuLy8gICAgICAgICAgICAgICAgIGlmICghc3RhcnRCdXR0b24pIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbiA9IGpvYkJ1dHRvbjtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRCdXR0b24uaWQgJiYgam9iQnV0dG9uLmlkKSB7IC8vIEVuc3VyZSBib3RoIElEcyBhcmUgYXZhaWxhYmxlXHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbnMuc2V0KHN0YXJ0QnV0dG9uLmlkLCBqb2JCdXR0b24uaWQpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBEcmF3IGFsbCBjb25uZWN0aW9uc1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGRyYXdBbGxDb25uZWN0aW9ucygpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBSZXNldFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uID0gbnVsbDtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyBJRCBmb3Igb25lIG9mIHRoZSBidXR0b25zOicsIHN0YXJ0QnV0dG9uLCBqb2JCdXR0b24pO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ2xpY2tlZCBlbGVtZW50IGlzIG5vdCBpbnNpZGUgYSBqb2IgYnV0dG9uOicsIGUudGFyZ2V0KTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgaWYgKHN0YXJ0QnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIERyYXcgZXhpc3RpbmcgY29ubmVjdGlvbnNcclxuLy8gICAgICAgICAgICAgZHJhd0FsbENvbm5lY3Rpb25zKCk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBEcmF3IHRoZSBsaW5lIGZyb20gc3RhcnRCdXR0b24gdG8gY3VycmVudCBtb3VzZSBwb3NpdGlvblxyXG4vLyAgICAgICAgICAgICBkcmF3TGluZShzdGFydEJ1dHRvbiwgZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0pO1xyXG4vLyB9KTtcclxuXHJcbmZ1bmN0aW9uIGRyYXdBbGxDb25uZWN0aW9ucygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIHRyeSB7XHJcblxyXG5cclxuICAgICAgICBmb3IgKGxldCBbb2xkSWQsIG5ld0lkXSBvZiBjb25uZWN0aW9ucy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgbGV0IG9sZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9sZElkKTtcclxuICAgICAgICAgICAgbGV0IG5ld0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5ld0lkKTtcclxuICAgICAgICAgICAgbGV0IHJlY3QgPSBuZXdCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGxldCBuZXdYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIGxldCBuZXdZID0gMDtcclxuICAgICAgICAgICAgaWYgKHJlY3QuYm90dG9tID4gb2xkQnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSkgbmV3WSA9IG5ld0J1dHRvbi5vZmZzZXRUb3AgLSAxMDtcclxuICAgICAgICAgICAgZWxzZSBuZXdZID0gbmV3QnV0dG9uLm9mZnNldFRvcCArIG5ld0J1dHRvbi5vZmZzZXRIZWlnaHQgKyAxMDtcclxuICAgICAgICAgICAgZHJhd0xpbmUob2xkQnV0dG9uLCBuZXdYLCBuZXdZKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS53YXJuKCdkcmF3QWxsQ29ubmVjdGlvbnMnLCBlcnJvcik7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0Fycm93aGVhZChjb250ZXh0LCBmcm9tWCwgZnJvbVksIHRvWCwgdG9ZLCByYWRpdXMpIHtcclxuICAgIGxldCB4X2NlbnRlciA9IHRvWDtcclxuICAgIGxldCB5X2NlbnRlciA9IHRvWTtcclxuXHJcbiAgICBsZXQgYW5nbGU7XHJcbiAgICBsZXQgeDtcclxuICAgIGxldCB5O1xyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgYW5nbGUgPSBNYXRoLmF0YW4yKHRvWSAtIGZyb21ZLCB0b1ggLSBmcm9tWCk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0xpbmUoc3RhcnRFbGVtZW50LCBlbmRYLCBlbmRZKSB7XHJcbiAgICBsZXQgcmVjdCA9IHN0YXJ0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIC8vIGxldCBvZmZzZXQgPSBNYXRoLnJhbmRvbSgpICogMTAwICsgMTAwXHJcbiAgICBsZXQgc3RhcnRYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7IC8vIC0gb2Zmc2V0O1xyXG4gICAgLy8gZW5kWCAtPSBvZmZzZXQ7XHJcbiAgICBsZXQgc3RhcnRZID0gc2Nyb2xsWSArIHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyO1xyXG5cclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oc3RhcnRYLCBzdGFydFkpO1xyXG4gICAgY3R4LmxpbmVUbyhlbmRYLCBlbmRZKTtcclxuICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAvLyBEcmF3IGFycm93IGF0IHRoZSBlbmQgb2YgdGhlIGxpbmVcclxuICAgIGRyYXdBcnJvd2hlYWQoY3R4LCBzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgMTApOyAgLy8gYWRqdXN0IHRoZSBsYXN0IHBhcmFtZXRlciBmb3IgYXJyb3cgc2l6ZVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckpvYkFzc2lnbm1lbnRzKCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgY29ubmVjdGlvbnMgPSBuZXcgTWFwKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMoKSB7XHJcbiAgICAvLyBGb3IgZWFjaCBjb25uZWN0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBjb25uZWN0aW9ucy5lbnRyaWVzKCk7XHJcbiAgICAgICAgaWYgKGVudHJpZXMgPT09IHVuZGVmaW5lZCkgdGhyb3cgJ0VudHJpZXMgaXMgdW5kZWZpbmVkJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW29sZEpvYklkLCBuZXdKb2JJZF0gb2YgZW50cmllcykge1xyXG4gICAgICAgICAgICBsZXQgb2xkSm9iQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob2xkSm9iSWQpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YUpvYiA9IG9sZEpvYkJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvbGRJZCA9IG9sZEpvYklkLnJlcGxhY2UoJ2pvYi1idXR0b24tJywgJycpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdJZCA9IG5ld0pvYklkLnJlcGxhY2UoJ2pvYi1idXR0b24tJywgJycpO1xyXG4gICAgICAgICAgICBsZXQgbWF4ZWRPdXQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc291cmNlQXJyYXkgPSBza2lsbHNbZGF0YUpvYl0uYWZmZWN0ZWRSZXNvdXJjZXM7XHJcbiAgICAgICAgICAgIGlmICghcmVzb3VyY2VBcnJheSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZUFycmF5KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIHJlc291cmNlQXJyYXkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXRlcmlhbChyKSA8IHJlc291cmNlc1tyXS5tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyLCBnZXRNYXRlcmlhbChyKSwgcmVzb3VyY2VzW3JdLm1heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ZWRPdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1heGVkT3V0ICYmIGpvYkNvdW50c1tkYXRhSm9iXSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaEpvYihvbGRJZCwgbmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMob2xkSWQsIGpvYkNvdW50c1tvbGRJZF0pO1xyXG4gICAgICAgICAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMobmV3SWQsIGpvYkNvdW50c1tuZXdJZF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpZiAocmVzb3VyY2VzW2FmZmVjdGVkUmVzb3VyY2VdLmN1cnJlbnRWYWx1ZSA+PSByZXNvdXJjZXNbYWZmZWN0ZWRSZXNvdXJjZV0ubWF4VmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gICAgIHN3aXRjaEpvYihvbGRKb2JJZCwgbmV3Sm9iSWQpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS53YXJuKCdyZWFzc2lnbkpvYnMnLCBlcnJvcik7IH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN3aXRjaEpvYihvbGRKb2JJZCwgbmV3Sm9iSWQpIHtcclxuICAgIC8vIFRoaXMgZnVuY3Rpb24gc3dpdGNoZXMgd29ya2VycyBmcm9tIG9sZEpvYiB0byBuZXdKb2IuXHJcbiAgICAvLyBEZXBlbmRpbmcgb24geW91ciBhcHBsaWNhdGlvbiBzdHJ1Y3R1cmUsIHlvdSBjYW4gaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gYWNjb3JkaW5nbHkuXHJcbiAgICAvLyBGb3IgZXhhbXBsZSwgcmVkdWNlIHRoZSBjb3VudCBvZiB3b3JrZXJzIGluIG9sZEpvYiBhbmQgaW5jcmVhc2UgaW4gbmV3Sm9iLlxyXG4gICAgLy8gY29uc29sZS5sb2coYFN3aXRjaGluZyB3b3JrZXJzIGZyb20gJHtvbGRKb2JJZH0gdG8gJHtuZXdKb2JJZH1gKTtcclxuXHJcbiAgICBsZXQgd29ya2VycyA9IGpvYkNvdW50c1tvbGRKb2JJZF07XHJcbiAgICBqb2JDb3VudHNbb2xkSm9iSWRdID0gMDtcclxuICAgIGpvYkNvdW50c1tuZXdKb2JJZF0gKz0gd29ya2VycztcclxuICAgIHVwZGF0ZURpc3BsYXkob2xkSm9iSWQpO1xyXG4gICAgdXBkYXRlRGlzcGxheShuZXdKb2JJZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0QWxsSm9icygpIHtcclxuICAgIC8vIGpvYkNvdW50cyA9IHt9O1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgam9iQ291bnRzW3NraWxsXSA9IDA7XHJcbiAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMoc2tpbGwsIDApO1xyXG4gICAgICAgIHVwZGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheShza2lsbCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2xlYXJKb2JBc3NpZ25tZW50cyxcclxuICAgIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMsXHJcbiAgICBzd2l0Y2hKb2IsXHJcbiAgICBkcmF3QWxsQ29ubmVjdGlvbnMsXHJcbiAgICBnZXRXb3JrZXJzLFxyXG4gICAgdXBkYXRlVG90YWwsXHJcbiAgICBzZXRDb25uZWN0aW9ucyxcclxuICAgIGdldENvbm5lY3Rpb25zLFxyXG4gICAgZGlzdHJpYnV0ZVdvcmtlcnMsXHJcbiAgICB1cGRhdGVEaXNwbGF5LFxyXG4gICAgam9iQ291bnRzLFxyXG4gICAgcmVzZXRBbGxKb2JzXHJcbn07IiwiY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKFwiLi4vcGVya3NcIik7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKFwiLi4vcmVjYWxjTWF4Q2xvbmVzXCIpO1xyXG5jb25zdCB7IHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0IH0gPSByZXF1aXJlKFwiLi4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3RcIik7XHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCB9ID0gcmVxdWlyZShcIi4uL3VwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnRcIik7XHJcblxyXG5jb25zdCBidWlsZGluZ3MgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIT1VTSU5HXHJcbiAgICAgKi9cclxuICAgIFwic2hlbHRlclwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwic3RpY2tzXCI6IDMwIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJjbG9uZXNcIjogMSB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZvciB3aGVuIHlvdSBuZWVkIGEgaG9tZSBhd2F5IGZyb20gaG9tZS5cIixcclxuICAgICAgICBlbW9qaTogJ+WFqydcclxuICAgIH0sXHJcbiAgICAnaHV0Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICdzdGlja3MnOiA1MCwgJ3ZpbmVzJzogMzAgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHsgJ2Nsb25lcyc6IDEgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0EgY296eSwgaWR5bGxpYyBjaHVuayBvZiB3b29kLicsXHJcbiAgICAgICAgZW1vamk6ICflhoInXHJcbiAgICB9LFxyXG4gICAgXCJob3VzZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA1MCwgXCJyb2Nrc1wiOiAyMCwgJ2Zpc2gnOiAxMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiY2xvbmVzXCI6IDIgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJFdmVyeSBjbG9uZSdzIGRyZWFtLiBNaW51cyB0aGUgd2hpdGUgcGlja2V0IGZlbmNlLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn5LuLJ1xyXG4gICAgfSxcclxuICAgICd0ZWVwZWUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3dvb2QnOiAxMCwgJ2hpZGVzJzogMjUsICdmaXNoJzogMTUgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdjbG9uZXMnOiAyIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV3JhcCBzb21lIGhpZGVzIGFyb3VuZCBzb21lIHdvb2QgYW5kIGNhbGwgaXQgYSBob21lLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn56m0J1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNUT1JBR0VcclxuICAgICAqL1xyXG4gICAgXCJzaGVkXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJ3b29kXCI6IDQwIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJ3b29kXCI6IDUwLCBcInN0aWNrc1wiOiA1MCwgXCJyb2Nrc1wiOiAyMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4xLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoZSB1bHRpbWF0ZSBzdG9yYWdlIHNvbHV0aW9uIGZvciB0aGUgcGFjayByYXQgaW4geW91LlwiLFxyXG4gICAgICAgIGVtb2ppOiAn5LiqJ1xyXG4gICAgfSxcclxuICAgICdzdG9ja3BpbGUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgcm9ja3M6IDMwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyB3b29kOiAxMDAgfSxcclxuICAgICAgICByYXRpbzogMS4xLFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJDaHVjayBhIGJ1bmNoIG9mIGxvZ3MgaW4gYSBwaWxlLCB3aGF0IGNvdWxkIGhhcHBlbj9cIixcclxuICAgICAgICBlbW9qaTogJ+WTgSdcclxuICAgIH0sXHJcbiAgICBcImRyeWluZ19yYWNrc1wiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwic3RpY2tzXCI6IDMwLCBcImZpc2hcIjogNSB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiZmlzaFwiOiAyMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4xLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkFpciBkcnlpbmc6IE5hdHVyZSdzIHdheSBvZiBwcmVzZXJ2aW5nIGZvb2QuXCIsXHJcbiAgICAgICAgZW1vamk6ICflm5snXHJcbiAgICB9LFxyXG4gICAgXCJ3b3Jrc2hvcFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA0MCwgXCJzdGlja3NcIjogMjAsIFwicm9ja3NcIjogMTAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAncm9ja3MnOiA1MCwgJ29yZSc6IDUwLCAnc2FuZCc6IDEwMCwgJ2NsYXknOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkRJWSdzIGRyZWFtIGRlc3RpbmF0aW9uLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOOsCdcclxuICAgIH0sXHJcbiAgICAnYmFybic6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7ICd3b29kJzogMzAsICd3aGVhdCc6IDUgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHsgJ3doZWF0JzogMTAwLCAnYmVycmllcyc6IDQwLCAndmluZXMnOiA0MCB9LFxyXG4gICAgICAgICdib29zdCc6IHt9LFxyXG4gICAgICAgICdjb3VudCc6IDAsXHJcbiAgICAgICAgJ3JhdGlvJzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkhheSwgd2hhdCdzIGluIHRoYXQgYnVpbGRpbmc/XCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+GJ1xyXG4gICAgfSxcclxuICAgICdoZXJiYWxpc3RfaHV0Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICdzdGlja3MnOiA1MCwgJ3ZpbmVzJzogNTAsICdoZXJicyc6IDUwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnaGVyYnMnOiAxMDAsICd2aW5lcyc6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdoZXJicyc6IDEuMiwgdmluZXM6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBwbGFjZSBmb3IgYnJld2luZyBhbmQgc3Rld2luZy5cIixcclxuICAgICAgICBlbW9qaTogJ/CTj4MnXHJcbiAgICB9LFxyXG4gICAgXCJiYWtlcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogODAsXHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnd2hlYXQnOiAyMDAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMjUsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkZyZXNobHkgYmFrZWQgYnJlYWQsIGhvdCBhbmQgcmVhZHkuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+WJ1xyXG5cclxuICAgIH0sXHJcbiAgICBcImFuaW1hbF9wZW5cIjoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIHN0aWNrczogNTAsXHJcbiAgICAgICAgICAgIGdhbWU6IDIwLFxyXG4gICAgICAgICAgICBmaXNoOiAyNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnZ2FtZSc6IDEwMCwgJ2hpZGVzJzogMzAgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHBsYWNlIHRvIHB1dCB0aG9zZSBsZXNzZXIgdGhhbiB5b3UuXCIsXHJcbiAgICAgICAgZW1vamk6ICfnmr8nXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBST0RVQ1RJT04gQk9PU1RcclxuICAgICAqL1xyXG4gICAgXCJncm92ZVwiOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3dvb2QnOiAyMCwgJ3ZpbmVzJzogMjAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyAnd29vZCc6IDEuMDUsICdzdGlja3MnOiAxLjEgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgbmljZSBncm92ZSBvZiB0cmVlcyB0byBmaW5kIHdvb2QgZmFzdGVyLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOGrfCThq0nXHJcbiAgICB9LFxyXG4gICAgXCJmaXNoX3RyYXBzXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiZmlzaFwiOiAxLjA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmlzaGluZyBtYWRlIGVhc3kuIE5vIHBhdGllbmNlIHJlcXVpcmVkLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn5LqVJ1xyXG4gICAgfSxcclxuICAgIFwibWluZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMzAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAzMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIm9yZVwiOiAxLjA1LCAncm9ja3MnOiAxLjA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRGlnIGRlZXAgYW5kIGZpbmQgeW91ciBpbm5lciBvcmUuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qNJ1xyXG4gICAgfSxcclxuICAgIFwiY2FtcGZpcmVcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDIwLFxyXG4gICAgICAgICAgICBcInN0aWNrc1wiOiAyMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjogeyAnYWxsJzogMS4wNSB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXaGVyZSBzdG9yaWVzIGFyZSB0b2xkIGFuZCBtYXJzaG1hbGxvd3MgYXJlIHRvYXN0ZWQuXCIsXHJcbiAgICAgICAgZW1vamk6ICfngasnXHJcbiAgICB9LFxyXG4gICAgXCJsdW1iZXJfeWFyZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMDAsXHJcbiAgICAgICAgICAgIFwiaXJvblwiOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXb29kIHlvdSBsaWtlIHNvbWUgbW9yZSB3b29kP1wiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOMjydcclxuICAgIH0sXHJcbiAgICBcInN0b25lX3F1YXJyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiUm9jayBvbiB3aXRoIHlvdXIgYmFkIHNlbGYhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qOJ1xyXG4gICAgfSxcclxuICAgIFwiZmlzaGVyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA0MCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDE1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiZmlzaFwiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGaXNoIGFyZSBmcmllbmRzLiBBbmQgZm9vZC5cIixcclxuICAgICAgICBlbW9qaTogJ/CTjKQnXHJcbiAgICB9LFxyXG4gICAgXCJ2aW5leWFyZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMCxcclxuICAgICAgICAgICAgXCJ2aW5lc1wiOiA1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInZpbmVzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZvciB0aGUgZmluZXN0IHZpbmVzLiBXaGF0IGVsc2Ugd291bGQgaXQgZ3Jvdz9cIixcclxuICAgICAgICBlbW9qaTogJ/CfnIwnXHJcbiAgICB9LFxyXG4gICAgXCJmb3JnZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNDAsXHJcbiAgICAgICAgICAgIFwib3JlXCI6IDIwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwib3JlXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIk1lbHQsIG1vbGQsIGFuZCBtYWtlIG1hcnZlbG91cyBtZXRhbHMuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qrJ1xyXG4gICAgfSxcclxuICAgICd3YXRlcl9wdW1wJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHtcclxuICAgICAgICAgICAgJ3JvY2tzJzogMzAsXHJcbiAgICAgICAgICAgICdyb3BlJzogMSxcclxuICAgICAgICAgICAgJ3dvb2QnOiAxMCxcclxuICAgICAgICAgICAgJ3doZWF0JzogMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICdmcmVzaHdhdGVyJzogMzAgfSxcclxuICAgICAgICAnYm9vc3QnOiB7XHJcbiAgICAgICAgICAgICdmcmVzaHdhdGVyJzogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgICdyYXRpbyc6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGcmVzaCB3YXRlciBvbiBkZW1hbmQhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+CJ1xyXG4gICAgfSxcclxuICAgICd0b3dlcic6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7XHJcbiAgICAgICAgICAgICdicmlja3MnOiAyMCxcclxuICAgICAgICAgICAgJ3JvY2tzJzogMTAsXHJcbiAgICAgICAgICAgICd3b29kJzogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgICdlZmZlY3RzJzoge30sXHJcbiAgICAgICAgJ2Jvb3N0JzogeyAnaGlkZXMnOiAxLjA1LCAnZ2FtZSc6IDEuMSB9LFxyXG4gICAgICAgICdjb3VudCc6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTZWUgdGhpbmdzIGZyb20gYWZhci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTiqInXHJcbiAgICB9LFxyXG4gICAgXCJ0YW5uZXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDYwLFxyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnaGlkZXMnOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJUcmVhdCBoaWRlcyB0byBtYWtlIHF1YWxpdHkgbGVhdGhlci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTg5QnXHJcbiAgICB9LFxyXG4gICAgXCJtYXJrZXRwbGFjZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwiYmVycmllc1wiOiA0MCxcclxuICAgICAgICAgICAgXCJnb2xkXCI6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJiZXJyaWVzXCI6IDEuMixcclxuICAgICAgICAgICAgXCJoZXJic1wiOiAxLjIsXHJcbiAgICAgICAgICAgICdvcmUnOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMjUsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkEgYnVzdGxpbmcgaHViIG9mIHRyYWRlIGFuZCBiYXJ0ZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfigr8nXHJcbiAgICB9LFxyXG4gICAgXCJ3aW5kbWlsbFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNjAsXHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3aGVhdFwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiR3JpbmQgZ3JhaW5zIGVmZmljaWVudGx5IHdpdGggd2luZCBwb3dlci5cIixcclxuICAgICAgICBlbW9qaTogJ9KJJ1xyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUE9OREVSXHJcbiAgICAgKi9cclxuICAgICd0ZWxlc2NvcGUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgZ2xhc3M6IDEsXHJcbiAgICAgICAgICAgIHdvb2Q6IDEwLFxyXG4gICAgICAgICAgICBwb25kZXI6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyBwb25kZXI6IDEuMDUgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkxvb2ssIHVwIGluIHRoZSBza3khIEl0J3MgYSBzdGFyIVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOMqSdcclxuICAgIH0sXHJcbiAgICBcIm9ic2VydmF0b3J5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJicmlja3NcIjogNzAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAzMCxcclxuICAgICAgICAgICAgXCJnbGFzc1wiOiA1MCxcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMS4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU3RhcmdhemluZyBoYXMgbmV2ZXIgYmVlbiBzby4uLiBwcm9kdWN0aXZlP1wiLFxyXG4gICAgICAgIGVtb2ppOiAn4piGJ1xyXG4gICAgfSxcclxuICAgIFwibGlicmFyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA3MCxcclxuICAgICAgICAgICAgXCJwYXBlclwiOiAyNSxcclxuICAgICAgICAgICAgXCJnbGFzc1wiOiA1LFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAyNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJwb25kZXJcIjogNTAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiS25vd2xlZGdlIGlzIHBvd2VyLiBBbmQgYSBmaXJlIGhhemFyZCBpZiBub3Qgc3RvcmVkIHByb3Blcmx5LlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8J+VridcclxuICAgIH0sXHJcbiAgICBcImRlc2tcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTUsXHJcbiAgICAgICAgICAgIFwic3RpY2tzXCI6IDIwLFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJwb25kZXJcIjogMzAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHsgXCJwb25kZXJcIjogMS4wNSB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHdyaXRlcidzIGJsb2NrIGlzIG5vIG1hdGNoIGZvciBhcm1vci1waWVyY2luZyBwZW5jaWxzIVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOKrCdcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldEJ1aWxkaW5nQ291bnQoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICByZXR1cm4gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV0uY291bnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nTmFtZSBcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIGdldEJvb3N0KGJ1aWxkaW5nTmFtZSwgcmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG4gICAgaWYgKGJ1aWxkaW5nICYmIGJ1aWxkaW5nLmJvb3N0KSB7XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmJvb3N0W3Jlc291cmNlXSkgcmV0dXJuIGJ1aWxkaW5nLmJvb3N0W3Jlc291cmNlXTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcuYm9vc3RbJ2FsbCddKSByZXR1cm4gYnVpbGRpbmcuYm9vc3RbJ2FsbCddO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gcmVzZXRCdWlsZGluZ3MoKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmdzKSkge1xyXG4gICAgICAgIHZhbFsnY291bnQnXSA9IDA7XHJcbiAgICAgICAgLy8gVXBkYXRlIGJ1dHRvbiB0ZXh0XHJcbiAgICAgICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChrZXksIDApO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIGNvc3Qgb2YgdGhlIGJ1aWxkaW5nXHJcbiAgICAgICAgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3Qoa2V5LCBidWlsZGluZ3MsIGhhc1BlcmspO1xyXG5cclxuICAgIH1cclxuICAgIC8vIFVwZGF0ZSBtYXggY2xvbmVzIGFmdGVyIHVwZGF0aW5nIHRoZSBjb3VudFxyXG4gICAgcmVjYWxjTWF4Q2xvbmVzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUG9wQnVpbGRpbmcoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICBzd2l0Y2ggKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ3NoZWx0ZXInOlxyXG4gICAgICAgIGNhc2UgJ2h1dCc6XHJcbiAgICAgICAgY2FzZSAnaG91c2UnOlxyXG4gICAgICAgIGNhc2UgJ3RlZXBlZSc6XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBidWlsZGluZ3MsXHJcbiAgICBnZXRCdWlsZGluZ0NvdW50LFxyXG4gICAgZ2V0Qm9vc3QsXHJcbiAgICByZXNldEJ1aWxkaW5ncyxcclxuICAgIGlzUG9wQnVpbGRpbmdcclxufTsiLCJjb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuLi9zdGFnZXMnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBoYXNUb29sIH0gPSByZXF1aXJlKCcuLi90b29scycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuXHJcbi8qIEJVVFRPTlMgKi9cclxuY29uc3QgYnV0dG9ucyA9IHtcclxuXHJcbiAgICAvKiBQUk9EVUNUSU9OIFRBQiAqL1xyXG4gICAgJ2dhdGhlclN0aWNrcyc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgc3RhcnRWaXNpYmxlJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOAnSBHYXRoZXIgU3RpY2tzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0ZpdmUsIFNpeCwgUGljayB1cCBzdGlja3MuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlIC8vIFRoaXMgYnV0dG9uIGlzIGFsd2F5cyB2aXNpYmxlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlclZpbmVzJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBzdGljaycsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTja8gR2F0aGVyIFZpbmVzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NvbWUgdmluZXMgYXJlIHJ1YmJlcnksIG90aGVycyBhcmUgZ3VtbXkuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRNYXRlcmlhbCgnc3RpY2tzJywgcmVzb3VyY2VzKSA+PSAxMCB8fCBwYXNzZWRTdGFnZSgndmluZXMnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJSb2Nrcyc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgc3RpY2snLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4qW8JOAqSBHYXRoZXIgUm9ja3MnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnTm90IGEgc2luZ2xlIHdpbmRvdyB0byB0aHJvdyB0aGVtIHRocm91Z2guJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRNYXRlcmlhbCgndmluZXMnLCByZXNvdXJjZXMpID49IDEwIHx8IHBhc3NlZFN0YWdlKCdyb2NrcycpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlckZpc2gnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIGZpc2hpbmcnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4adIPCThp8g8JOGniBHbyBGaXNoJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0dvdCBhbnkgdHVuYT8nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGhhc1Rvb2woJ1NwZWFyJykgfHwgaGFzVG9vbChcIkZpc2hpbmcgUm9kXCIpIHx8IHBhc3NlZFN0YWdlKCdmaXNoaW5nJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyV29vZCc6IHtcclxuICAgICAgICBjbGFzczogJ3dvb2RUb2dnbGUgd29vZCcsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTjI8gQ2hvcCBXb29kJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0FuIGF4ZSBodXJ0cyB3YXkgbGVzcyB0aGFuIHVzaW5nIHlvdXIgaGFuZHMuJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGhhc1Rvb2woJ0F4ZScpIHx8IHBhc3NlZFN0YWdlKCd3b29kJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyT3JlJzoge1xyXG4gICAgICAgIFwiY2xhc3NcIjogXCJ0b29sdGlwIFwiLFxyXG4gICAgICAgIFwidGFiXCI6IFwicHJvZHVjdGlvblwiLFxyXG4gICAgICAgIFwidGV4dFwiOiBcIvCTibggTWluZSBPcmVcIixcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiRGlnZ3kgRGlnZ3kgSG9sZVwiLFxyXG4gICAgICAgIFwidG9vbHRpcENvc3RcIjogXCJGcmVlXCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGhhc1Rvb2woJ1BpY2theGUnKSB8fCBwYXNzZWRTdGFnZSgnb3JlJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcblxyXG5cclxuXHJcbiAgICAvKiBUQUJTICovXHJcbiAgICAncHJvZHVjdGlvblRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdQcm9kdWN0aW9uJyxcclxuICAgICAgICBzaG93VGFiOiAncHJvZHVjdGlvblRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZXhwZXJpbWVudFRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdFeHBlcmltZW50JyxcclxuICAgICAgICBzaG93VGFiOiAnZXhwZXJpbWVudFRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAncG9uZGVyVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1BvbmRlcicsXHJcbiAgICAgICAgc2hvd1RhYjogJ3BvbmRlclRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnam9ic1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdKb2JzJyxcclxuICAgICAgICBzaG93VGFiOiAnam9ic1RhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdqb2JzLXRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ3NraWxsc1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdTa2lsbHMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdza2lsbHNUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnc2tpbGxzVGFibGUnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdwZXJrc1RhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdQZXJrcycsXHJcbiAgICAgICAgc2hvd1RhYjogJ3BlcmtzVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BlcmtzVGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZmFjdG9yeVRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdGYWN0b3JpZXMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdmYWN0b3J5VGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ2ZhY3RvcnlUYWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbiAgICAvKiBQT05ERVIgVEFCICovXHJcbiAgICAnZ2F0aGVyUG9uZGVyJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCcsXHJcbiAgICAgICAgdGV4dDogJ1BvbmRlcicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdXcmFwIHlvdXIgaGVhZCBhcm91bmQgdGhlIGdyZWF0IG15c3RlcmllcycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdUaW1lJyxcclxuICAgICAgICB0YWI6ICdwb25kZXInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBidXR0b25zOiBidXR0b25zXHJcbn07IiwiLyogQ1JBRlRJTkcgUkVTT1VSQ0VTICovXHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4uL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlIH0gPSByZXF1aXJlKCcuLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4uL3N0YWdlcycpO1xyXG5cclxuXHJcbmNvbnN0IGNyYWZ0ZWRSZXNvdXJjZXMgPSB7XHJcbiAgICAnc2hhcnByb2Nrcyc6IHtcclxuICAgICAgICB0ZXh0OiAnU2hhcnAgUm9ja3MnLFxyXG4gICAgICAgIGlkOiAnY3JhZnRTaGFycHJvY2tzQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdyb2Nrcyc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ3JhZnQgYSByb2NrIHVzaW5nIG5vdGhpbmcgYnV0IHJvY2tzIScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdSb2NrczogNScsXHJcbiAgICAgICAgY2xhc3M6ICdjcmFmdFJvY2tzJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdyb3BlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRSb3BlQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICd2aW5lcyc6IDMgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnVGhlIGJhc2lzIG9mIGF0dGFjaGluZyB0aGluZ3MgdG8gb3RoZXIgdGhpbmdzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdWaW5lczogMycsXHJcbiAgICAgICAgY2xhc3M6ICdjcmFmdFJvY2tzJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdoYW5kbGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEhhbmRsZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc3RpY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTaGVhciBvZmYgdGhhdCBiYXJrIHRvIGhvbGQgaXQgYmV0dGVyJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1NoYXJwIFJvY2tzOiAxJyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ1NoYXJwIFJvY2snXHJcbiAgICB9LFxyXG4gICAgJ3N0YWZmJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRTdGFmZkJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnaGFuZGxlJzogMiwgJ3JvcGUnOiAxIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1N0aWNrIHNvbWUgc2hlYXJlZCBzdGlja3MgdG9nZXRoZXInLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnSGFuZGxlczogMicsXHJcbiAgICAgICAgY2xhc3M6ICdyb3BlJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdmaXNoaW5ncm9kJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRGaXNoaW5ncm9kQnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnRmlzaGluZyBSb2QnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3N0YWZmJzogMSwgJ3JvcGUnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwiZmlzaGluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSB3ZWFwb24gZmVhcmVkIGJ5IHVuZGVyd2F0ZXIgbGlmZScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnZmlzaGluZydcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnc3BlYXInOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFNwZWFyQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7XHJcbiAgICAgICAgICAgICdzdGFmZic6IDEsXHJcbiAgICAgICAgICAgICdzaGFycHJvY2tzJzogMSxcclxuICAgICAgICAgICAgJ3JvcGUnOiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0EgbG9uZyBhbmQgcG9pbnR5IHN0aWNrJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1N0YWZmczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdyb3BlJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdheGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEF4ZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnaGFuZGxlJzogMSwgJ3JvcGUnOiAxLCAnc2hhcnByb2Nrcyc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJzcGVhclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnUHV0IGEgcm9jayBzdHJhaWdodCB0aHJvdWdoIHRoYXQgaGFuZGxlJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1NwZWFyczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdzcGVhcidcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAncGlja2F4ZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0UGlja2F4ZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDoge1xyXG4gICAgICAgICAgICAnaGFuZGxlJzogMSxcclxuICAgICAgICAgICAgJ3NoYXJwcm9ja3MnOiAzLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJzcGVhclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU2FkbHkgbm90IG1hZGUgb2YgZGlhbW9uZHMnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnQXhlczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdzcGVhcidcclxuICAgIH0sXHJcblxyXG4gICAgJ2dsYXNzJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRHbGFzc0J1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc2FuZCc6IDEwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnWW91IGNhbiBzZWUgcmlnaHQgdGhyb3VnaCBpdCEnLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwiZ2xhc3NCbG93aW5nXCIsXHJcbiAgICAgICAgY2xhc3M6ICdnbGFzc0Jsb3dpbmcnXHJcbiAgICB9LFxyXG4gICAgJ3BhcGVyJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRQYXBlckJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnd29vZCc6IDEyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnT3V0c291cmNlIHlvdXIgbWVtb3J5JyxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInBhcGVyXCIsXHJcbiAgICAgICAgY2xhc3M6ICdwYXBlcidcclxuICAgIH0sXHJcbiAgICAnZ29sZCc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0R29sZEJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnb3JlJzogMTAwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwibWV0YWxXb3JraW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHllbGxvdyBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdpcm9uJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRJcm9uQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiAyMCB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcIm1ldGFsV29ya2luZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoZXJlJ3Mgc29tZSBzdHVyZHktbG9va2luZyBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdzaWx2ZXInOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFNpbHZlckJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnb3JlJzogNTAgfSxcclxuXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwibWV0YWxXb3JraW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHNoaW55IGdyYXkgYml0cyBpbiB0aGlzIG9yZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ21ldGFsV29ya2luZydcclxuICAgIH0sXHJcbiAgICAnYnJpY2tzJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRCcmlja3NCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ2NsYXknOiAxNSB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcImNsYXlcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJMZWF2ZSBzb21lIGNsYXkgYnkgdGhlIGZpcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdjbGF5J1xyXG4gICAgfSxcclxuICAgICdzdGVlbCc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiA1IH0gfSxcclxuICAgICdiZWFtcyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3dvb2QnOiAxMCB9IH0sXHJcbiAgICAnY3JhdGVzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IDE1IH0gfSxcclxuICAgICduYWlscyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiAxIH0gfSxcclxuICAgICdzbGFicyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3JvY2tzJzogMjAgfSB9LFxyXG4gICAgJ21lZGljaW5lJzogeyB2YWx1ZTogMCwgY29zdDogeyAnaGVyYnMnOiA1MCB9IH0sXHJcbiAgICAnbGVhdGhlcic6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2hpZGVzJzogMTAgfSB9LFxyXG4gICAgJ2NvbmNyZXRlJzogeyB2YWx1ZTogMCwgY29zdDogeyAnc2FuZCc6IDMyIH0gfSxcclxuICAgICd3b29kJzogeyB2YWx1ZTogMCwgY29zdDogeyAnc3RpY2tzJzogOCB9IH0sXHJcbiAgICAnc3RpY2tzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IC4xIH0gfSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoaWQpIHtcclxuICAgIGZvciAoY29uc3QgW2MsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoY3JhZnRlZFJlc291cmNlcykpIHtcclxuICAgICAgICBpZiAodmFsLmlkID09PSBpZCB8fCB2YWwuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnKGNvbmZpZykge1xyXG4gICAgZm9yIChsZXQgayBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coayk7XHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXNba10uaWQgPT09IGNvbmZpZy5pZCkgcmV0dXJuIGs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRDcmFmdGVkUmVzb3VyY2VzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgdmFsLnZhbHVlID0gMDtcclxuICAgICAgICB2YWwuY3JhZnRlZE9uY2UgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjcmFmdGVkUmVzb3VyY2VzLFxyXG4gICAgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCxcclxuICAgIGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnLFxyXG4gICAgcmVzZXRDcmFmdGVkUmVzb3VyY2VzXHJcbn07IiwiXHJcblxyXG4vKipcclxuICogVGllciAxICg0MDAgcG9uZGVyKTpcclxuICogXHJcbiAqIEx1bWJlcmphY2tcclxuICogICsyNSUgd29vZCBwcm9kdWN0aW9uXHJcbiAqICArMjUlIHN0aWNrcyBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBNaW5lclxyXG4gKiAgKzI1JSBzdG9uZSAmIG9yZSBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBCb3RhbmlzdFxyXG4gKiAgKzI1JSB2aW5lcyAmIGhlcmJzICYgd2hlYXQgcHJvZHVjdGlvblxyXG4gKiBcclxuICogTGVhZGVyXHJcbiAqICA1MCUgY2xvbmUgZWZmZWN0aXZlbmVzc1xyXG4gKiBcclxuICogQXJjaGl0ZWN0XHJcbiAqICAtMjUlIGJ1aWxkaW5nIGNvc3RcclxuICogXHJcbiAqIFxyXG4gKiBUaWVyIDIgKDE1MDAgcG9uZGVyKTpcclxuICogXHJcbiAqIFRoaW5rZXJcclxuICogICs1MCUgcG9uZGVyIHByb2R1Y3Rpb24gYW5kIHN0b3JhZ2VcclxuICogIC0yNSUgcG9uZGVyIGNvc3RcclxuICogXHJcbiAqIEdlbmVyYWxcclxuICogICs1MCUgY29tYmF0IHN0cmVuZ3RoXHJcbiAqICArMjUlIGNsb25lIGVmZmVjdGl2ZW5lc3NcclxuICogXHJcbiAqIE1lcmNoYW50XHJcbiAqICAtMjUlIHRyYWRlIHByaWNlXHJcbiAqICArMjUlIGNoYW5jZSBvZiByYXJlIHRyYWRlXHJcbiAqIFxyXG4gKiBHZW5lcmFsaXN0XHJcbiAqICArMTAlIGdsb2JhbCBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBTcGVjaWFsaXN0XHJcbiAqICArMTAwJSBza2lsbCBnYWluXHJcbiAqICArMTAlIHNraWxsIGJvbnVzIHRvIHJlc291cmNlc1xyXG4gKiBcclxuICogXHJcbiAqIFxyXG4gKiBcclxuICovXHJcbmNvbnN0IHBlcmtzID0ge1xyXG4gICAgJ3RpZXIxJzogWydMdW1iZXJqYWNrJywgJ01pbmVyJywgJ0JvdGFuaXN0JywgJ0xlYWRlcicsICdBcmNoaXRlY3QnXSxcclxuICAgICd0aWVyMic6IFsnVGhpbmtlcicsICdHZW5lcmFsJywgJ01lcmNoYW50JywgJ0dlbmVyYWxpc3QnLCAnU3BlY2lhbGlzdCddLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBwZXJrczogcGVya3NcclxufTsiLCJsZXQgcG9uZGVycyA9IHtcclxuICAgICdwb25kZXIxJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUG9uZGVyMScsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAgfSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5rIEhhcmRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG5cclxuICAgIH0sXHJcbiAgICAnam9icy10YWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJKb2JzLXRhYicsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMjAgfSxcclxuICAgICAgICB0ZXh0OiBcIlVuZGVyc3RhbmQgQ2xvbmluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnV2h5IGFyZSB0aGVyZSB0d28gb2YgeW91PycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTYW5pdHkgKDIwIFBvbmRlciknLFxyXG5cclxuICAgIH0sXHJcbiAgICAnc2tpbGxzVGFibGUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJTa2lsbHNUYWJsZScsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAgfSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJZb3UncmUgc3RhcnRpbmcgdG8gbGVhcm4gdGhpbmdzLCByaWdodD9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIk5vdGljZSBJbXByb3ZlbWVudFwiXHJcbiAgICB9LFxyXG4gICAgJ2Zpc2hpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGaXNoaW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MCwgJ2Zpc2gnOiA1MCB9LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldoYXQgaWYuLi4geW91ciBjbG9uZXMgY291bGQgZ28gZmlzaGluZz9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIkZpc2hpbmcgSm9iXCJcclxuICAgIH0sXHJcbiAgICAvLyAnbWljcm9tYW5hZ2VtZW50Jzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyTWljcm9tYW5hZ2VtZW50JyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAsICdjbG9uZXMnOiA1IH0sXHJcbiAgICAvLyAgICAgdGV4dDogXCJNaWNyb21hbmFnZW1lbnRcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJZb3UgbWFuYWdlZCB0byBtYWtlIGNsb25lcyBtYW5hZ2UgZWFjaCBvdGhlci5cIlxyXG4gICAgLy8gfSxcclxuICAgICdmYXN0ZXJTa2lsbHMnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYXN0ZXJTa2lsbHMnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDgwIH0sXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJTa2lsbHMgSVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoaW5rIFNtYXJ0ZXIuIDUlIGJvbnVzIHRvIHNraWxsIGV4cFwiXHJcbiAgICB9LFxyXG4gICAgJ3RoaW5raW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyVGhpbmtpbmcnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE1MCB9LFxyXG4gICAgICAgIHRleHQ6IFwiVGhpbmtpbmcgSm9iXCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTGV0IHlvdXIgY2xvbmVzIHN0YXJ0IHRoaW5raW5nIGZvciB0aGVtc2VsdmVzLlwiXHJcblxyXG4gICAgfSxcclxuICAgICdmYXN0ZXJSZXNvdXJjZUdhaW4nOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYXN0ZXJSZXNvdXJjZUdhaW4nLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDEyMCB9LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiUHJvZHVjdGl2aXR5IElcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiA1JSBib251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgIH0sXHJcbiAgICAnbWV0YWxXb3JraW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyTWV0YWxXb3JraW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIk1ldGFsIFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTdGFydCBwcm9jZXNzaW5nIHRoYXQgb3JlXCIsXHJcbiAgICAgICAgLy8gY29zdDogW3sgbWF0ZXJpYWw6ICdwb25kZXInLCBhbW91bnQ6IDEwMCB9LCB7IG1hdGVyaWFsOiAnb3JlJywgYW1vdW50OiA1MCB9LCB7IG1hdGVyaWFsOiAncm9ja3MnLCBhbW91bnQ6IDUwIH1dXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAwLCAnb3JlJzogNTAsICdyb2Nrcyc6IDUwIH0sXHJcbiAgICB9LFxyXG4gICAgJ2dsYXNzQmxvd2luZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckdsYXNzQmxvd2luZycsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogJ0dsYXNzIEJsb3dpbmcnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnSHVmZiBhbmQgcHVmZiBhbmQgbWFrZSBhIGNvb2wgdmFzZScsXHJcbiAgICAgICAgY29zdDogeyAnc2FuZCc6IDIwLCAncG9uZGVyJzogODAgfVxyXG4gICAgfSxcclxuICAgICdvcmdhbml6YXRpb24nOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJPcmdhbml6YXRpb24nLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6ICdPcmdhbml6ZWQgU3RvcmFnZScsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdPcmdhbml6ZSB5b3VyIHN0b3JhZ2UgYnkgZ3JvdXBzJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAgfVxyXG4gICAgfSxcclxuICAgICdwYXBlcic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclBhcGVyJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiAnUGFwZXIgUHJvY2Vzc2luZycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTbWFzaCBkb3duIHNvbWUgd29vZCBpbnRvIHBhcGVyJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAsICd3b29kJzogMTAwIH1cclxuICAgIH0sXHJcbiAgICAnYXV0b0Nsb25lJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQXV0b0Nsb25lJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkF1dG8gQ2xvbmVcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBdXRvbWF0aWNhbGx5IHByb2R1Y2UgY2xvbmVzXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTQwLCAnY2xvbmVzJzogMjAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgJ2VmZmVjdGl2ZUJ1aWxkaW5ncyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckVmZmVjdGl2ZUJ1aWxkaW5ncycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJCdWlsZGluZ3MgSVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkluY3JlYXNlIGJ1aWxkaW5nIGVmZmVjdHMgYnkgMSVcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxODAgfSxcclxuICAgIH0sXHJcbiAgICAnYWdyaWN1bHR1cmUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJBZ3JpY3VsdHVyZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJBZ3JpY3VsdHVyZVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZpbmQgc29tZSBzZWVkcyBmcm9tIGFsbCB0aG9zZSBwbGFudHNcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxODAgfVxyXG4gICAgfSxcclxuICAgICdjb21iYXQnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJDb21iYXQnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQ29tYmF0XCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSXMgdGhlcmUgYW55b25lIHRvIHNwYXIgd2l0aCBiZXNpZGVzIHlvdT9cIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAzMDAsICdzcGVhcic6IDEwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2h1bnRpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJIdW50aW5nJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkh1bnRpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBdCBsZWFzdCB0aGVyZSBhcmUgYW5pbWFsc1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCwgJ2Zpc2gnOiA1MCB9XHJcbiAgICB9LFxyXG4gICAgJ3BlcmtzVGFiJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUGVya3NUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6ICdQZXJrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdNYXliZSB5b3UgYXMgdGhlIG9yaWdpbmFsIHNob3VsZCBzcGVjaWFsaXplJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA0MDAgfVxyXG4gICAgfSxcclxuICAgIC8vICdhdXRvY3JhZnQnOiB7XHJcbiAgICAvLyAgICAgaWQ6IFwicG9uZGVyQXV0b2NyYWZ0XCIsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgdGV4dDogXCJBdXRvIENyYWZ0XCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiQXV0b21hdGljYWxseSBjcmFmdCByZXNvdXJjZXMgd2hlbiB0aGV5IHJlYWNoIHRoZSBzdG9yYWdlIGxpbWl0XCIsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogNDAwLCAnd29vZCc6IDEwMDAsICdyb2Nrcyc6IDUwMCwgJ3doZWF0JzogMTAwMCB9XHJcbiAgICAvLyB9LFxyXG4gICAgJ2ZhY3RvcnlUYWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYWN0b3J5VGFiJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkZhY3Rvcmllc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkFzY2VuZCB0byB0aGUgbmV4dCBsZXZlbCBvZiBlY29ub215XCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAwLCAnZ29sZCc6IDEwLCAnd29vZCc6IDEwMDAsICd3aGVhdCc6IDEwMDAsICdyb2Nrcyc6IDEwMDAgfVxyXG4gICAgfSxcclxuICAgICdwb25kZXIyJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUG9uZGVyMicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJUaGluayBldmVuIGhhcmRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwMCB9XHJcbiAgICB9LFxyXG4gICAgJ3BvbmRlcjMnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJQb25kZXIzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5rIGhhcmRlc3RcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCI1JSBib29zdCB0byBwb25kZXJpbmdcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA2MDAgfVxyXG4gICAgfSxcclxuICAgICdiaWdnZXJTaGVsdGVyJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VyU2hlbHRlcicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJFeHBhbmQgU2hlbHRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlNoZWx0ZXJzIGNhbiBob3VzZSAxIG1vcmUgY2xvbmUgZWFjaFwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDUwMCwgJ3N0aWNrcyc6IDEwMDAgfVxyXG4gICAgfSxcclxuICAgICdiaWdnZXJIdXQnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJIdXQnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRXhwYW5kIEh1dFwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkh1dHMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNzUwLCAnc3RpY2tzJzogMTUwMCwgJ3ZpbmVzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2JpZ2dlckhvdXNlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VySG91c2UnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiVHdvLXN0b3J5IGhvdXNlc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkhvdXNlcyBjYW4gaG91c2UgMiBtb3JlIGNsb25lcyBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAwMCwgJ3dvb2QnOiAyMDAwLCAncm9ja3MnOiAyMDAwIH1cclxuICAgIH0sXHJcbiAgICAnYmlnZ2VyVGVlcGVlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VyVGVlcGVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkRvdWJsZSBkaWFtZXRlciBUZWVwZWVzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGVlcGVlcyBjYW4gaG91c2UgNCBtb3JlIGNsb25lcyBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTI1MCwgJ3dvb2QnOiAzMDAwLCAnaGlkZXMnOiAxNTAwIH1cclxuICAgIH0sXHJcbiAgICAnZXZlbkJpZ2dlclNoZWx0ZXInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJFdmVuQmlnZ2VyU2hlbHRlcicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJFeHBhbmQgU2hlbHRlciBBZ2FpblwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlNoZWx0ZXJzIGNhbiBob3VzZSAxIG1vcmUgY2xvbmUgZWFjaFwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE1MDAsICdzdGlja3MnOiAzMDAwLCAnZmlzaCc6IDEwMDAgfVxyXG4gICAgfSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIHJlc2V0UG9uZGVycygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhwb25kZXJzKSkge1xyXG4gICAgICAgIHZhbC5pc1BvbmRlcmVkID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcG9uZGVyczogcG9uZGVycyxcclxuICAgIHJlc2V0UG9uZGVyc1xyXG59OyIsImNvbnN0IHByZXN0aWdlID0ge1xyXG4gICAgJ21heENsb25lcyc6IHtcclxuICAgICAgICB0ZXh0OiAnQ3JhbXBlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdNYXggQ2xvbmVzICgrMSknLFxyXG4gICAgICAgIGNvc3Q6IDIsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2xvbmVCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnSGFuZHltYW4nLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ2xvbmUgUHJvZHVjdGl2aXR5ICgrNSUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlcmluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdQaWNrZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnR2F0aGVyaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ21hc29ucnlCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnUm9ja2VyJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01hc29ucnkgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2FycGVudHJ5Qm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ0Nob3BwZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ2FycGVudHJ5IEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ3RoaW5raW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ1dpemVuZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnVGhpbmtpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnZmFybWluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdQcnVuZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnRmFybWluZyBFZmZpY2llbmN5ICgrMTAlKScsXHJcbiAgICAgICAgY29zdDogMSxcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdmaXNoaW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ0hvb2tlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGaXNoaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2h1bnRpbmdCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnVHJhY2tlcicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdIdW50aW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2NoZWFwZXJCdWlsZGluZ3MnOiB7XHJcbiAgICAgICAgdGV4dDogJ1JpY2tldHknLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQnVpbGRpbmcgQ29zdCAoLTUlKScsXHJcbiAgICAgICAgY29zdDogMixcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdzdG9yYWdlU3BhY2UnOiB7XHJcbiAgICAgICAgdGV4dDogJ1N0dWZmZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU3RvcmFnZSBTcGFjZSAoKzUlKScsXHJcbiAgICAgICAgY29zdDogMixcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gaGFzUHJlc3RpZ2UocHJlcykge1xyXG4gICAgcmV0dXJuIGdldExldmVsT2ZQcmVzdGlnZShwcmVzKSA+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExldmVsT2ZQcmVzdGlnZShwcmVzKSB7XHJcbiAgICByZXR1cm4gcHJlc3RpZ2VbcHJlc10ubGV2ZWw7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBwcmVzdGlnZSxcclxuICAgIGhhc1ByZXN0aWdlLFxyXG4gICAgZ2V0TGV2ZWxPZlByZXN0aWdlXHJcbn07IiwiLy8gU3RhdGUgb2YgZWFjaCByZXNvdXJjZVxyXG5cclxuLy8gVE9ETzogQUREIFJFUVVJUkVNRU5UUyBGT1IgRUFDSCBUTyBNQUtFIFRIRU0gVklTSUJMRVxyXG4vLyBvciBqdXN0IGRpc3BsYXkgdGhlbSB3aGVuIHlvdSBnZXQgeW91ciBmaXJzdCBvbmU/XHJcbmNvbnN0IHJlc291cmNlcyA9IHtcclxuICAgIFwiY2xvbmVzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwibWFrZUNsb25lXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIG1heDogMFxyXG4gICAgfSxcclxuXHJcbiAgICBcInN0aWNrc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclN0aWNrc1wiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IHRydWUsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOGsfCTgJwgR2F0aGVyaW5nIFN0aWNrc1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4axIEdhdGhlciBTdGlja3NcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgZW1vamk6ICfwk4CdJyxcclxuICAgICAgICBtYXg6IDUwXHJcbiAgICB9LFxyXG4gICAgXCJ2aW5lc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclZpbmVzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JONr/CTgKogR2F0aGVyaW5nIFZpbmVzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTja8gR2F0aGVyIFZpbmVzXCIsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJBeGVcIiwgXCJ2YWxcIjogMS41IH1dLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgKonLFxyXG4gICAgICAgIG1heDogNTBcclxuICAgIH0sXHJcbiAgICBcInJvY2tzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyUm9ja3NcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4qW8JOAqSBHYXRoZXJpbmcgUm9ja3NcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOKliBHYXRoZXIgUm9ja3NcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICBtYXg6IDMwXHJcbiAgICB9LFxyXG4gICAgXCJmaXNoXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyRmlzaFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCThp3wk4af8JOGniDwk4GDIEdvbmUgRmlzaGluZ1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4ad8JOGn/CThp4gR28gRmlzaFwiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgYMnLFxyXG4gICAgICAgIFwidG9vbHNcIjogW3sgXCJ0b29sXCI6IFwiU3BlYXJcIiwgXCJ2YWxcIjogMSB9LCB7IFwidG9vbFwiOiBcIkZpc2hpbmcgUm9kXCIsIFwidmFsXCI6IDIgfV0sXHJcbiAgICAgICAgbWF4OiAxMFxyXG4gICAgfSxcclxuICAgIFwid29vZFwiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlcldvb2RcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CoIENob3BwaW5nIFdvb2RcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOMjyBDaG9wIFdvb2RcIixcclxuICAgICAgICBlbW9qaTogJ/CTgKgnLFxyXG4gICAgICAgIFwidG9vbHNcIjogW3sgXCJ0b29sXCI6IFwiQXhlXCIsIFwidmFsXCI6IDEuNSB9LCB7IFwidG9vbFwiOiBcIkNoYWluc2F3XCIsIFwidmFsXCI6IDMgfV0sXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIG1heDogNDBcclxuICAgIH0sXHJcbiAgICBcInBvbmRlclwiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclBvbmRlclwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgIEgUG9uZGVyaW5nXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgIEgUG9uZGVyXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CBJyxcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwib3JlXCI6IHtcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlck9yZVwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTibjwk4GEIE1pbmluZyBPcmVcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOJuCBNaW5lIE9yZVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOBhCcsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwic2FuZFwiOiB7XHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJTYW5kXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAqSBTY29vcGluZyBTYW5kXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgKkgU2Nvb3AgU2FuZFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwid2hlYXRcIjoge1xyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyV2hlYXRcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CpIEhhcnZlc3RpbmcgV2hlYXRcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAqSBIYXJ2ZXN0IFdoZWF0XCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CdJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgJ2ZyZXNod2F0ZXInOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyRnJlc2h3YXRlcicsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdoaWRlcyc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJIaWRlcycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgI4nLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG5cclxuICAgIH0sXHJcbiAgICAnY2xheSc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJDbGF5JyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2JlcnJpZXMnOiB7XHJcblxyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckJlcnJpZXMnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnaGVyYnMnOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVySGVyYnMnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnZ2FtZSc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJHYW1lJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ/CTg5rwk4COIEh1bnRpbmcnLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICfwk4COIEh1bnQnLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAjicsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2h1c2tzJzoge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGlkOiAnZ2F0aGVySHVza3MnLFxyXG4gICAgICAgIGlzR2V0dGluZzogZmFsc2UsXHJcbiAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVUZXh0OiAnJyxcclxuICAgICAgICBkZWZhdWx0VGV4dDogXCJcIixcclxuICAgICAgICBlbW9qaTogJ1gnLFxyXG4gICAgICAgICdtYXgnOiAxMDAwXHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIC8vIHJldHVybiByZXNvdXJjZXNbcmVzb3VyY2VdICE9PSBudWxsO1xyXG4gICAgcmV0dXJuIHJlc291cmNlIGluIHJlc291cmNlcztcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQoaWQpIHtcclxuICAgIGZvciAobGV0IHIgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKHJlc291cmNlc1tyXS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlc1tyXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRSZXNvdXJjZXMoKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG4gICAgICAgIHZhbC52YWx1ZSA9IDA7XHJcbiAgICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICByZXNvdXJjZXM6IHJlc291cmNlcyxcclxuICAgIGlzUmVzb3VyY2UsXHJcbiAgICBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQsXHJcbiAgICByZXNldFJlc291cmNlc1xyXG59OyIsImNvbnN0IHNraWxscyA9IHtcclxuICAgIGdhdGhlcmluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydzdGlja3MnLCAndmluZXMnLCAnc2FuZCcsICdoZXJicycsICdiZXJyaWVzJ11cclxuICAgIH0sXHJcbiAgICBtYXNvbnJ5OiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3JvY2tzJywgJ29yZScsICdjbGF5J10sXHJcbiAgICAgICAgbmVlZFRvb2xzOiBbeyAnUGlja2F4ZSc6IFsnb3JlJ10gfV1cclxuICAgIH0sXHJcbiAgICBjYXJwZW50cnk6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnd29vZCcsICdoYW5kbGUnLCAnc3RhZmYnLCAnZmlzaGluZ3JvZCddLFxyXG4gICAgICAgIG5lZWRUb29sczogW3sgJ0F4ZSc6IFsnd29vZCddIH1dXHJcbiAgICB9LFxyXG4gICAgdGhpbmtpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsncG9uZGVyJ11cclxuICAgIH0sXHJcbiAgICAvLyBzbWl0aGluZzoge1xyXG4gICAgLy8gICAgIGV4cDogMCxcclxuICAgIC8vICAgICBsZXZlbDogMCxcclxuICAgIC8vICAgICBhZmZlY3RlZFJlc291cmNlczogWydheGUnLCAncGlja2F4ZScsICdzcGVhcicsICdnbGFzcycsICdpcm9uJywgJ3NpbHZlcicsICdnb2xkJ11cclxuICAgIC8vIH0sXHJcbiAgICBmYXJtaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3doZWF0JywgJ2ZyZXNod2F0ZXInXVxyXG4gICAgfSxcclxuICAgIGNvbWJhdDoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogW11cclxuICAgIH0sXHJcbiAgICBmaXNoaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2Zpc2gnXVxyXG4gICAgfSxcclxuICAgIGh1bnRpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnaGlkZXMnLCAnZ2FtZSddXHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHNraWxsczogc2tpbGxzXHJcbn07IiwiY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzLCByZXNldENyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzLCByZXNldEJ1aWxkaW5ncyB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbmNvbnN0IHsgcG9uZGVycywgcmVzZXRQb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzLCByZXNldFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBzYXZlR2FtZSwgbG9hZEdhbWUgfSA9IHJlcXVpcmUoXCIuL3NhdmluZ1wiKTtcclxuY29uc3QgeyBnZW5lcmF0ZVRvb2x0aXBDb3N0LCBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zLCBpbmNyZWFzZU1hdGVyaWFsLCBjcmFmdEFsbFJlc291cmNlcywgY3JhZnRSZXNvdXJjZSwgY2FsY0luY3JlYXNlLCB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMsIGluY3JlYXNlTWF4IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1eU1heEJ1aWxkaW5ncywgYnV5QnVpbGRpbmcsIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uIH0gPSByZXF1aXJlKCcuL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IGhhc1BlcmssIHNlbGVjdEFiaWxpdHksIHJlc2V0UGVya3MgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBjbGVhclNpZGViYXIgfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBidXlGYWN0b3J5LCBhdHRlbXB0TWFudWZhY3R1cmUsIHVwZ3JhZGVCdWxrIH0gPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkLCBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL3BvbmRlclwiKTtcclxuY29uc3QgeyBoYXNUb29sLCBhZGRUb29sIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgZ2V0QXRlRmlzaCwgc2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcbmNvbnN0IHsgZHJhd0FsbENvbm5lY3Rpb25zLCB1cGRhdGVUb3RhbCwgY2xlYXJKb2JBc3NpZ25tZW50cywgcmVzZXRBbGxKb2JzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UsIHJlc2V0U3RhZ2VzIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZSgnLi9yZWNhbGNNYXhDbG9uZXMnKTtcclxuY29uc3QgeyBpbml0aWFsaXplUmVzb3VyY2VUYWdzLCB1cGRhdGVTaWRlYmFyLCB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHRyaWdnZXJGbG9hdFVwVGV4dCB9ID0gcmVxdWlyZSgnLi90cmlnZ2VyRmxvYXRVcFRleHQnKTtcclxuY29uc3QgeyB1cGRhdGVCb3VuY2VBbmltYXRpb24gfSA9IHJlcXVpcmUoJy4vdXBkYXRlQm91bmNlQW5pbWF0aW9uJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG9vbHRpcCwgaGlkZVRvb2x0aXAgfSA9IHJlcXVpcmUoJy4vdXBkYXRlVG9vbHRpcCcpO1xyXG5jb25zdCB7IGNhbkNyYWZ0IH0gPSByZXF1aXJlKCcuL2NhbkNyYWZ0Jyk7XHJcblxyXG5cclxuZnVuY3Rpb24gc2V0VG90YWxUaW1lKHRpbWUpIHtcclxuICAgIHRvdGFsX3RpbWUgPSB0aW1lO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuLyogR0FUSEVSSU5HIE1BVEVSSUFMUyovXHJcbmNvbnN0IHNpZGViYXJQYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc291cmNlc1wiKTtcclxuZnVuY3Rpb24gc3RvcEFsbEdhdGhlcmluZygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgdmFsLmlzR2V0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IHJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dhdGhlclwiICsgY2FwaXRhbGl6ZUZpcnN0KGtleSkpO1xyXG4gICAgICAgIGlmIChyQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHJCdXR0b24udGV4dENvbnRlbnQgPSB2YWwuZGVmYXVsdFRleHQ7XHJcbiAgICAgICAgICAgIHJCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZ2F0aGVyaW5nJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXQgc2lkZWJhciB0byBub3QgYm9sZFxyXG4gICAgICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gc2lkZWJhclBhcmVudC5xdWVyeVNlbGVjdG9yKCcjcmVzb3VyY2UtJyArIGtleSk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChzaWRlYmFyVGV4dCkgc2lkZWJhclRleHQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZW1vamlHYXRoZXJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW1vamlHYXRoZXJEaXNwbGF5Jyk7XHJcbmZ1bmN0aW9uIHRvZ2dsZVJlc291cmNlKHJlc291cmNlS2V5KSB7XHJcbiAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlc1tyZXNvdXJjZUtleV07XHJcblxyXG4gICAgLy8gZW1vamlEaXYudGV4dENvbnRlbnQgPSAn8JOGric7XHJcbiAgICBjb25zdCBzaWRlYmFyUGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIik7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBzaWRlYmFyVGV4dCA9IHNpZGViYXJQYXJlbnQucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyByZXNvdXJjZUtleSk7XHJcbiAgICBjb25zdCByZXNvdXJjZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYXRoZXInICsgcmVzb3VyY2VLZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXNvdXJjZUtleS5zbGljZSgxKSk7XHJcbiAgICBlbW9qaUdhdGhlckRpdi50ZXh0Q29udGVudCA9ICfwk4CfJzsgLy8gRGVmYXVsdCBlbW9qaSDwk4CfXHJcblxyXG5cclxuICAgIGlmICghcmVzb3VyY2UuaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgc3RvcEFsbEdhdGhlcmluZygpOyAvLyBTdG9wIGFsbCBnYXRoZXJpbmcgYWN0aW9uc1xyXG4gICAgICAgIHJlc291cmNlLmlzR2V0dGluZyA9IHRydWU7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLnRleHRDb250ZW50ID0gcmVzb3VyY2UuYWN0aXZlVGV4dDtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBlbW9qaUdhdGhlckRpdi50ZXh0Q29udGVudCA9IHJlc291cmNlLmVtb2ppO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlc291cmNlLmVtb2ppKTtcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdnYXRoZXJpbmcnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzb3VyY2UuaXNHZXR0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZ2F0aGVyaW5nJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLnRleHRDb250ZW50ID0gcmVzb3VyY2UuZGVmYXVsdFRleHQ7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChzaWRlYmFyVGV4dCkgc2lkZWJhclRleHQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLyogQlVUVE9OUyBHRU5FUkFURSAqL1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVCdXR0b25zKCkge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiR2VuZXJhdGluZyBidXR0b25zXCIpO1xyXG4gICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgLy8gQ3JlYXRlIHRoZSBjb2x1bW5zXHJcblxyXG5cclxuICAgIGZvciAobGV0IGJ1aWxkaW5nS2V5IGluIGJ1aWxkaW5ncykge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1aWxkaW5nQnV0dG9uKGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpO1xyXG4gICAgICAgIGJ1dHRvbnNbYnVpbGRpbmdLZXldID0gYnV0dG9uO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTWFkZSBidXR0b24gZm9yIFwiICsgYnVpbGRpbmdLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNyZWF0ZUNvbHVtbnMgPSAocGFyZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29sMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnN0IGNvbDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb25zdCBjb2wzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbDEuc3R5bGUud2lkdGggPSAnMzMuMzMlJztcclxuICAgICAgICBjb2wyLnN0eWxlLndpZHRoID0gJzMzLjMzJSc7XHJcbiAgICAgICAgY29sMy5zdHlsZS53aWR0aCA9ICczMy4zMyUnO1xyXG5cclxuICAgICAgICBjb2wxLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICBjb2wyLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgICAgICBjb2wzLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuXHJcbiAgICAgICAgY29sMS5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgY29sMi5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgY29sMy5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgIC8vIHBhcmVudC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXg7JyAgLy8gU2V0IHBhcmVudCB0byBiZSBhIGZsZXggY29udGFpbmVyXHJcblxyXG4gICAgICAgIHBhcmVudC5wcmVwZW5kKGNvbDMpO1xyXG4gICAgICAgIHBhcmVudC5wcmVwZW5kKGNvbDIpO1xyXG4gICAgICAgIHBhcmVudC5wcmVwZW5kKGNvbDEpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2NvbDEsIGNvbDIsIGNvbDNdO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB0YWJzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKTtcclxuICAgIGNvbnN0IHByb2R1Y3Rpb25Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjdGlvblRhYicpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgZXhwZXJpbWVudENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHBlcmltZW50VGFiJykucXVlcnlTZWxlY3RvcignLmJ1dHRvbi1jb2x1bW5zJyk7XHJcbiAgICBjb25zdCBwb25kZXJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9uZGVyVGFiJyk7XHJcbiAgICAvLyBjb25zdCBqb2JDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9ic1RhYicpO1xyXG4gICAgLy8gWW91IGNhbiBhZGQgbW9yZSBjb250YWluZXJzIGZvciBkaWZmZXJlbnQgdGFicyBhcyBuZWVkZWRcclxuXHJcbiAgICAvLyBjb25zdCBwcm9kdWN0aW9uQ29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMocHJvZHVjdGlvbkNvbnRhaW5lcik7XHJcbiAgICBjb25zdCBleHBlcmltZW50Q29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMoZXhwZXJpbWVudENvbnRhaW5lcik7XHJcbiAgICBjb25zdCBwb25kZXJDb2x1bW5zID0gY3JlYXRlQ29sdW1ucyhwb25kZXJDb250YWluZXIpO1xyXG4gICAgLy8gY29uc3Qgam9iQ29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMoam9iQ29udGFpbmVyKTtcclxuICAgIC8vIFNpbWlsYXJseSwgY3JlYXRlIGNvbHVtbnMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgbGV0IHByb2R1Y3Rpb25Db2x1bW5JbmRleCA9IDE7XHJcbiAgICBsZXQgZXhwZXJpbWVudENvbHVtbkluZGV4ID0gMDtcclxuICAgIGxldCBwb25kZXJDb2x1bW5JbmRleCA9IDA7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBsZXQgam9iQ29sdW1uSW5kZXggPSAwO1xyXG5cclxuICAgIC8vIEFkZCBjb3VudGVycyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuXHJcbiAgICBmb3IgKGxldCBrZXkgaW4gYnV0dG9ucykge1xyXG4gICAgICAgIGNvbnN0IGJ0biA9IGJ1dHRvbnNba2V5XTtcclxuICAgICAgICBjb25zdCBidXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcblxyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuaWQgPSBrZXk7XHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc05hbWUgPSBidG4uY2xhc3M7XHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC50ZXh0Q29udGVudCA9IGJ0bi50ZXh0LnNwbGl0KCdfJykuam9pbignICcpO1xyXG5cclxuICAgICAgICAvLyBidXR0b25FbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICAgIGlmIChidG4udG9vbHRpcERlc2MpIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsIGJ0bi50b29sdGlwRGVzYyk7XHJcbiAgICAgICAgaWYgKGJ0bi50b29sdGlwRWZmZWN0KSBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWVmZmVjdCcsIGJ0bi50b29sdGlwRWZmZWN0KTtcclxuICAgICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgndW5sb2NrJywgYnRuLnVubG9jayk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnRuKTtcclxuICAgICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycsIGJ0bi5kYXRhX2J1aWxkaW5nKTtcclxuICAgICAgICAvLyBpZiB0aGlzIHJlc291cmNlIGlzbid0IHVubG9ja2VkLCBoaWRlIGl0XHJcbiAgICAgICAgLy8gaWYgKCFidG4uaXNWaXNpYmxlKSBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYnV0dG9uIGNvcnJlc3BvbmRzIHRvIGEgY3JhZnRlZCByZXNvdXJjZSB1c2luZyB0aGUgSURcclxuICAgICAgICBjb25zdCBjcmFmdGVkUmVzb3VyY2UgPSBPYmplY3QudmFsdWVzKGNyYWZ0ZWRSZXNvdXJjZXMpLmZpbmQocmVzb3VyY2UgPT4gcmVzb3VyY2UuaWQgPT09IGtleSk7XHJcblxyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgYnRuLnRvb2x0aXBDb3N0ID0gZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2UuY29zdCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgYnRuLnRvb2x0aXBDb3N0KTtcclxuXHJcbiAgICAgICAgaWYgKGJ0bi5zaG93VGFiKSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzaG93VGFiKGJ0bi5zaG93VGFiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU3dpdGNoaW5nIHRvIHRhYjogXCIgKyBidG4uc2hvd1RhYik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBcHBlbmQgdG8gdGhlIGFwcHJvcHJpYXRlIGNvbHVtbiBiYXNlZCBvbiB0aGUgdGFiIHByb3BlcnR5XHJcbiAgICAgICAgaWYgKGJ0bi50YWIgPT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAvL3N0eWxlPSdncmlkLWNvbHVtbjoke2NvbH07IGdyaWQtcm93OiR7cm93fTtcclxuICAgICAgICAgICAgYnV0dG9uRWxlbWVudC5zdHlsZS5ncmlkQ29sdW1uID0gcHJvZHVjdGlvbkNvbHVtbkluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIC8vIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZ3JpZFJvdyA9ICcwJztcclxuICAgICAgICAgICAgcHJvZHVjdGlvbkNvbHVtbkluZGV4ID0gKHByb2R1Y3Rpb25Db2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICAgICAgcHJvZHVjdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gcHJvZHVjdGlvbkNvbHVtbnNbcHJvZHVjdGlvbkNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gcHJvZHVjdGlvbkNvbHVtbkluZGV4ID0gKHByb2R1Y3Rpb25Db2x1bW5JbmRleCArIDEpICUgMztcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAnZXhwZXJpbWVudCcpIHtcclxuICAgICAgICAgICAgZXhwZXJpbWVudENvbHVtbnNbZXhwZXJpbWVudENvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgZXhwZXJpbWVudENvbHVtbkluZGV4ID0gKGV4cGVyaW1lbnRDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICd0YWJzJykge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHRhYnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAncG9uZGVyJykge1xyXG4gICAgICAgICAgICBwb25kZXJDb2x1bW5zW3BvbmRlckNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgcG9uZGVyQ29sdW1uSW5kZXggPSAocG9uZGVyQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAnam9iJykge1xyXG4gICAgICAgICAgICAvLyBqb2JDb2x1bW5zW2pvYkNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gam9iQ29sdW1uSW5kZXggPSAoam9iQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCBtb3JlIGNvbmRpdGlvbnMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwIGZvciBidWlsZGluZ3NcclxuICAgICAgICBjb25zdCBidWlsZGluZyA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChidWlsZGluZyA9PiBidWlsZGluZyA9PT0ga2V5KTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnVpbGRpbmcsIGtleSk7XHJcbiAgICAgICAgICAgIC8vIGJ0bi50b29sdGlwQ29zdCA9IGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdChidWlsZGluZ3NbYnVpbGRpbmddLmNvc3QpO1xyXG4gICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXksIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEhpZGUgdGhlIGJ1dHRvbnMgd2Ugc2hvdWxkbid0IHNlZSB5ZXRcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghYnRuLnJlcXVpcmVtZW50KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkVsZW1lbnQsIGJ0bi5yZXF1aXJlbWVudCgpKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIHdpdGggcmVxdWlyZW1lbnQgd2hpbGUgZ2VuZXJhdGluZyBidXR0b25zOiAnLCBidG4sIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCB0b29sc1RvU3RhZ2VzID0ge1xyXG4gICAgJ1NoYXJwUm9ja3MnOiAnY3JhZnRSb2NrcycsXHJcbiAgICAnU3BlYXInOiAnZmlzaGluZycsXHJcbiAgICBcIkZpc2hpbmdSb2RcIjogJ2Zpc2hpbmcnLFxyXG4gICAgJ0F4ZSc6ICd3b29kJyxcclxuICAgIFwiUGlja2F4ZVwiOiAnb3JlJ1xyXG59O1xyXG5cclxuLy8gVXBkYXRlIHZpc2liaWxpdHkgb2YgYXNzZXRzXHJcbmNvbnN0IHZpc2liaWxpdHlSdWxlcyA9IFtcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKFwic3RpY2tzXCIsIHJlc291cmNlcykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKFwic3RpY2tcIilcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnc3RpY2tzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCd2aW5lcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdyb2NrcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoXCJyb2Nrc1wiLCByZXNvdXJjZXMpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7IG1ha2VWaXNpYmxlKFwidGFiLWJ1dHRvblwiKTsgbWFrZVZpc2libGUoJ2NyYWZ0Um9ja3MnKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnc3BlYXInLCBjcmFmdGVkUmVzb3VyY2VzKSA+IDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnc3BlYXInKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbChcImZpc2hcIiwgcmVzb3VyY2VzKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2Zpc2hpbmcnKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBoYXNUb29sKFwiQXhlXCIpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3dvb2QnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgncm9wZScpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgncm9wZScpXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdmaXNoJywgcmVzb3VyY2VzKSA+PSA1ICYmICFnZXRBdGVGaXNoKCksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIG1ha2VWaXNpYmxlKCdlYXRGaXNoJyk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VhdEZpc2gnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgLy8gLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWF0RmlzaCcpLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0QXRlRmlzaCgpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4geyBtYWtlVmlzaWJsZSgnY2xvbmUnKTsgbWFrZVZpc2libGUoJ3BvbmRlci10YWInKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ3BvbmRlckZpbmlzaCcpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbmF2aWdhdGVUbygnc3RhZ2UyLmh0bWwnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSB8fCBpc1BvbmRlcmVkKCdiaWdnZXJIdXQnKSB8fCBpc1BvbmRlcmVkKCdiaWdnZXJIb3VzZScpIHx8IGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpIHx8IGlzUG9uZGVyZWQoJ2V2ZW5CaWdnZXJTaGVsdGVyJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiByZWNhbGNNYXhDbG9uZXMoKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdjbG9uZXMnKSA+PSA0MCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdwcmVzdGlnZScpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ2NsYXknKSA+IDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnY2xheScpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGUtYmFzaWNzJykgJiYgaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBpbml0aWFsaXplUmVzb3VyY2VUYWdzKHRydWUpXHJcbiAgICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ3VwZGF0aW5nIHZpc2libGUnKTtcclxuICAgIHZpc2liaWxpdHlSdWxlcy5mb3JFYWNoKHJ1bGUgPT4ge1xyXG4gICAgICAgIGlmIChydWxlLmNvbmRpdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHJ1bGUuYWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZm9yIChsZXQgdG9vbCBpbiB0b29sc1RvU3RhZ2VzKSB7XHJcbiAgICAgICAgaWYgKCFoYXNUb29sKHRvb2wpICYmIGdldENyYWZ0ZWRSZXNvdXJjZSh0b29sKSA+IDApIHtcclxuICAgICAgICAgICAgYWRkVG9vbCh0b29sKTtcclxuICAgICAgICAgICAgbWFrZVZpc2libGUodG9vbHNUb1N0YWdlc1t0b29sXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSgpO1xyXG4gICAgICAgIC8vIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG4gICAgICAgIGlmIChjdXJyZW50SG92ZXJCdXR0b24gIT09IG51bGwpIHVwZGF0ZVRvb2x0aXAoY3VycmVudEhvdmVyQnV0dG9uKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIFN3aXRjaCB0YWJzXHJcbmxldCB0YWJDb250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YWItY29udGVudCA+IC5jb250ZW50XCIpOyAvLyBEaXJlY3QgY2hpbGRyZW4gb25seVxyXG5mdW5jdGlvbiBzaG93VGFiKHRhYk5hbWUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwic2hvdyB0YWI6IFwiICsgdGFiTmFtZSk7XHJcbiAgICAvLyBHZXQgYWxsIG1haW4gY29udGFpbmVyIGRpdnMgYW5kIGhpZGUgdGhlbVxyXG4gICAgbGV0IHByZXZUYWIgPSAnJztcclxuICAgIGZvciAobGV0IGNvbnRlbnQgb2YgdGFiQ29udGFpbmVycykge1xyXG4gICAgICAgIGlmIChjb250ZW50LmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgcHJldlRhYiA9IGNvbnRlbnQuaWQ7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29udGVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpOyB9LCAxMDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgYWxsIHRhYiBidXR0b25zIGFuZCByZW1vdmUgdGhlIGFjdGl2ZSBjbGFzc1xyXG4gICAgbGV0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi1idXR0b25cIik7XHJcbiAgICBmb3IgKGxldCB0YWIgb2YgdGFicykge1xyXG4gICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNob3cgdGhlIGNsaWNrZWQgdGFiJ3MgbWFpbiBjb250YWluZXIgZGl2IGFuZCBtYWtlIHRoZSB0YWIgYnV0dG9uIGFjdGl2ZVxyXG4gICAgbGV0IGFjdGl2ZUNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJOYW1lKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuXHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7IGFjdGl2ZUNvbnRlbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTsgfSwgMTAwKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGFjdGl2ZUNvbnRlbnQuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDIwMCk7XHJcblxyXG5cclxuICAgIC8vIEdldCB0aGUgY2xpY2tlZCB0YWIgYnV0dG9uIGFuZCBtYWtlIGl0IGFjdGl2ZVxyXG4gICAgY29uc3QgdGFiU3RyaW5nID0gYCMke3RhYk5hbWV9QnV0dG9uYDtcclxuICAgIGxldCBhY3RpdmVUYWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhYlN0cmluZyk7XHJcblxyXG4gICAgaWYgKGFjdGl2ZVRhYkJ1dHRvbikgYWN0aXZlVGFiQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09ICdqb2JzVGFiJylcclxuICAgICAgICBkcmF3QWxsQ29ubmVjdGlvbnMoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhwcmV2VGFiLCAnPicsIHRhYk5hbWUpO1xyXG5cclxuICAgIHVwZGF0ZVNpZGViYXIoKTtcclxufVxyXG5cclxuXHJcbi8qIEhPVEtFWVMgKi9cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgc3dpdGNoIChldmVudC5rZXkpIHtcclxuICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgc2hvd1RhYigncHJvZHVjdGlvblRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCd0YWItYnV0dG9uJykpIHNob3dUYWIoJ2V4cGVyaW1lbnRUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgLy8gQWRkIGNhc2VzIGZvciBvdGhlciB0YWJzIGFzIG5lZWRlZFxyXG4gICAgICAgIGNhc2UgJzMnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSkgc2hvd1RhYigncG9uZGVyVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzQnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ2pvYnMtdGFiJykpIHNob3dUYWIoJ2pvYnNUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNSc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnc2tpbGxzVGFibGUnKSkgc2hvd1RhYignc2tpbGxzVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzYnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3BlcmtzVGFiJykpIHNob3dUYWIoJ3BlcmtzVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzcnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ2ZhY3RvcnlUYWInKSkgc2hvd1RhYignZmFjdG9yeVRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuLyogREFSSyBNT0RFICovXHJcbi8vIGNvbnN0IGRhcmtNb2RlVG9nZ2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXJrTW9kZVRvZ2dsZVwiKTtcclxuY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyay1tb2RlJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuLy8gZGFya01vZGVUb2dnbGUuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyaycpO1xyXG5sZXQgaXNEYXJrID0gdHJ1ZTtcclxuXHJcblxyXG4vKiBDVVRTQ0VORVMgKi9cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBlYXRGaXNoKCkge1xyXG4gICAgaWYgKCFnZXRBdGVGaXNoKCkgJiYgZ2V0TWF0ZXJpYWwoJ2Zpc2gnLCByZXNvdXJjZXMpID49IDEpIHtcclxuICAgICAgICAvLyBlYXQgYSBmaXNoIGFuZCBibGFja291dFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdmaXNoJywgLTEpO1xyXG4gICAgICAgIC8vIENhbGwgdGhpcyBmdW5jdGlvbiB0byBzdGFydCB0aGUgc2VxdWVuY2VcclxuICAgICAgICBmYWRlVG9CbGFjaygpO1xyXG4gICAgICAgIC8vIEhpZGUgZmlzaCBidXR0b25cclxuICAgICAgICBzZXRBdGVGaXNoKHRydWUpO1xyXG4gICAgICAgIGNvbnN0IGZpc2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VhdEZpc2hcIik7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGZpc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY2hhbmdlTWVzc2FnZShcIllvdSBhcmUgd2l0aCB5b3Vyc2VsZiBpbiBhIGZvcmVzdC5cIiwgJ3dpdGggeW91cnNlbGYnKTtcclxuICAgICAgICAgICAgaW5jcmVhc2VNYXgoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAxKTtcclxuICAgICAgICB9LCAxMDAwKTsgLy8gZGVsYXkgb2YgMXNcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBmYWRlVG9CbGFjaygpIHtcclxuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpO1xyXG4gICAgY29uc3Qgb3ZlcmxheVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS10ZXh0Jyk7XHJcbiAgICBjb25zdCBvdmVybGF5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktYnV0dG9uJyk7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvdmVybGF5VGV4dC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgfSwgMjAwMCk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG92ZXJsYXlCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgb3ZlcmxheUJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgfSwgNTAwMCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVPdmVybGF5KCkge1xyXG4gICAgY29uc3Qgb3ZlcmxheVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS10ZXh0Jyk7XHJcbiAgICBvdmVybGF5VGV4dC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG5cclxuICAgIGNvbnN0IG92ZXJsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1idXR0b24nKTtcclxuICAgIG92ZXJsYXlCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcwJztcclxuXHJcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICBjb25zdCBpc2VrYWlCdXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lzZWthaUJ1dHRvbnMnKTtcclxuICAgIC8vIGlzZWthaUJ1dHRvbnMuY2hpbGROb2Rlcy5mb3JFYWNoKGNoaWxkID0+IGlzZWthaUJ1dHRvbnMucmVtb3ZlQ2hpbGQoY2hpbGQpKTtcclxuICAgIGlzZWthaUJ1dHRvbnMuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbmF2aWdhdGVUbyh1cmwpIHtcclxuICAgIC8vIFRyaWdnZXIgdGhlIG92ZXJsYXkgdG8gZmFkZSBpblxyXG4gICAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS10cmFuc2l0aW9uLW92ZXJsYXknKTtcclxuICAgIG92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnZmFkZS1pbicpO1xyXG5cclxuICAgIC8vIFdhaXQgZm9yIHRoZSBmYWRlIGluIHRvIGNvbXBsZXRlIGJlZm9yZSBjaGFuZ2luZyB0aGUgcGFnZVxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XHJcbiAgICB9LCAzMDApOyAvLyBUaGlzIGR1cmF0aW9uIHNob3VsZCBtYXRjaCB0aGUgQ1NTIG9wYWNpdHkgdHJhbnNpdGlvblxyXG59XHJcblxyXG4vLyBFeGFtcGxlIHVzYWdlXHJcbi8vIG5hdmlnYXRlVG8oJ25leHQtcGFnZS5odG1sJyk7XHJcblxyXG5cclxuXHJcbi8vIE1lc3NhZ2UgXHJcbmNvbnN0IG1lc3NhZ2VFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKTtcclxuZnVuY3Rpb24gY2hhbmdlTWVzc2FnZShuZXdNZXNzYWdlLCBjbG9uZVdvcmRzKSB7XHJcbiAgICBjb25zdCBtb2RpZmllZE1lc3NhZ2UgPSBuZXdNZXNzYWdlLnJlcGxhY2UoY2xvbmVXb3JkcywgYDxzcGFuIGNsYXNzPSd0b29sdGlwJyBpZD1cImFsb25lXCIgdG9vbHRpcERlc2M9XCJZb3UgZmVlbCBwZWNraXNoIGZvciBzb21lIHNlYWZvb2RcIj4ke2Nsb25lV29yZHN9PC9zcGFuPmApO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gbW9kaWZpZWRNZXNzYWdlO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1lc3NhZ2UoKSB7XHJcbiAgICByZXR1cm4gbWVzc2FnZUVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qIEdBTUUgTE9PUCAqL1xyXG5cclxuXHJcbmxldCBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gNTA7XHJcbmxldCBsYXN0X3RpbWUgPSBudWxsO1xyXG5sZXQgdG90YWxfdGltZSA9IDA7XHJcbmxldCBhY2N1bXVsYXRlZF9sYWcgPSAwO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGxvb3AoY3VycmVudF90aW1lKSB7XHJcbiAgICBpZiAobGFzdF90aW1lID09PSBudWxsKSBsYXN0X3RpbWUgPSBjdXJyZW50X3RpbWU7XHJcblxyXG4gICAgY29uc3QgZGVsdGFfdGltZSA9IGN1cnJlbnRfdGltZSAtIGxhc3RfdGltZTtcclxuXHJcbiAgICB0b3RhbF90aW1lICs9IGRlbHRhX3RpbWU7XHJcbiAgICBhY2N1bXVsYXRlZF9sYWcgKz0gZGVsdGFfdGltZTtcclxuXHJcbiAgICBsYXN0X3RpbWUgPSBjdXJyZW50X3RpbWU7XHJcblxyXG4gICAgLy8gQ2F0Y2ggdXAgYWxsIHRoZSBtaXNzZWQgdGlja3NcclxuICAgIGxldCBub3JtYWxSYXRlID0gbWlsbGlzZWNvbmRzX3Blcl9mcmFtZTtcclxuICAgIC8vIHNpbXVsYXRlIHdpdGggbGVzcyBmaWRlbGl0eSB0byBtYWtlIHVwIHRpbWVcclxuICAgIC8vIHdoaWxlIChhY2N1bXVsYXRlZF9sYWcgPj0gMTAwICogbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSkge1xyXG4gICAgLy8gICAgIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgKj0gMTAwO1xyXG4gICAgLy8gfVxyXG4gICAgaWYgKGFjY3VtdWxhdGVkX2xhZyA+PSAxMCAqIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUpIHtcclxuICAgICAgICBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gYWNjdW11bGF0ZWRfbGFnIC8gMTA7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoYWNjdW11bGF0ZWRfbGFnID49IG1pbGxpc2Vjb25kc19wZXJfZnJhbWUpIHtcclxuXHJcbiAgICAgICAgYWNjdW11bGF0ZWRfbGFnIC09IG1pbGxpc2Vjb25kc19wZXJfZnJhbWU7XHJcbiAgICAgICAgdXBkYXRlKG1pbGxpc2Vjb25kc19wZXJfZnJhbWUsIHRvdGFsX3RpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgPSBub3JtYWxSYXRlO1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG59XHJcblxyXG5cclxubGV0IHRpbWVfc2luY2VfbGFzdF9zYXZlID0gMDtcclxubGV0IHRpbWVfc2luY2VfbWFudWZhdHVyZSA9IDA7XHJcbmZ1bmN0aW9uIHVwZGF0ZShkZWx0YV90aW1lLCB0b3RhbF90aW1lKSB7XHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInVwZGF0aW5nIFwiICsga2V5KTtcclxuXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChrZXksIGNhbGNJbmNyZWFzZShrZXksIGRlbHRhX3RpbWUpKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMoKTtcclxuICAgIHJlbmRlcigpO1xyXG5cclxuICAgIC8vIFNhdmUgdGhlIGdhbWUgZXZlcnkgMTAgc2Vjb25kc1xyXG4gICAgdGltZV9zaW5jZV9sYXN0X3NhdmUgKz0gZGVsdGFfdGltZTtcclxuICAgIHRpbWVfc2luY2VfbWFudWZhdHVyZSArPSBkZWx0YV90aW1lO1xyXG4gICAgdG90YWxfdGltZSArPSBkZWx0YV90aW1lO1xyXG4gICAgaWYgKHRpbWVfc2luY2VfbGFzdF9zYXZlID49IDEwMDAwKSB7XHJcbiAgICAgICAgc2F2ZUdhbWUoKTtcclxuICAgICAgICB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFudWZhY3R1cmUgZXZlcnkgc2Vjb25kXHJcbiAgICBpZiAocGFzc2VkU3RhZ2UoJ2ZhY3RvcnlUYWInKSAmJiB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPj0gMTAwMCkge1xyXG4gICAgICAgIGF0dGVtcHRNYW51ZmFjdHVyZSgpO1xyXG4gICAgICAgIHRpbWVfc2luY2VfbWFudWZhdHVyZSA9IDA7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vLyB3aW5kb3cuc2V0SW50ZXJ2YWwocmVuZGVyLCAxMDApIC8vIFVwZGF0ZSB2aXN1YWxzIDEwIHRpbWVzIHBlciBzZWNvbmRcclxuLy8gd2luZG93LnNldEludGVydmFsKHRpY2ssIDEwMDApOyAvLyBFdmVyeSB0aWNrIGxhc3RzIGZvciAxIHNlY29uZFxyXG4vLyB3aW5kb3cuc2V0SW50ZXJ2YWwoc2F2ZUdhbWUsIDEwMDAwKTsgLy8gU2F2ZSB0aGUgZ2FtZSBldmVyeSAxMCBzZWNvbmRzXHJcbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFdlIHVzZSBhIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHNob3J0aGFuZCBiZWNhdXNlIHNhdmVnYW1lIHJldHVybnMgYSBzdHJpbmdcclxuICAgIGlmICghY3VycmVudGx5RGVsZXRpbmcpIHNhdmVHYW1lKCk7XHJcbn07XHJcblxyXG5cclxuLy8gY29uc3QgbXlSZXNvdXJjZXMgPSB7fTtcclxuXHJcbi8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkUmVzb3VyY2VCdG5cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VGb3JtXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbi8vIH0pO1xyXG5cclxuZnVuY3Rpb24gYWRkUmVzb3VyY2UoKSB7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlTmFtZVwiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGFjdGl2ZVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlQWN0aXZlVGV4dFwiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGRlZmF1bHRUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZURlZmF1bHRUZXh0XCIpLnZhbHVlO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGJ0blRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRleHRcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5Ub29sdGlwRGVzYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuVG9vbHRpcERlc2NcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5Ub29sdGlwQ29zdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuVG9vbHRpcENvc3RcIikudmFsdWU7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdmFyIG5ld1Jlc291cmNlID0gbXlSZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSA9IHtcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBpZDogXCJnYXRoZXJcIiArIHJlc291cmNlTmFtZSxcclxuICAgICAgICBpc0dldHRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZVRleHQ6IGFjdGl2ZVRleHQsXHJcbiAgICAgICAgZGVmYXVsdFRleHQ6IGRlZmF1bHRUZXh0LFxyXG4gICAgICAgIC8vIC4uLiBBZGQgb3RoZXIgYXR0cmlidXRlcyBhcyBmZXRjaGVkIGZyb20gZm9ybSAuLi5cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBidXR0b24gb2JqZWN0XHJcbiAgICB2YXIgbmV3QnV0dG9uID0gYnV0dG9uc1tcImdhdGhlclwiICsgcmVzb3VyY2VOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVzb3VyY2VOYW1lLnNsaWNlKDEpXSA9IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiBidG5UZXh0LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBidG5Ub29sdGlwRGVzYyxcclxuICAgICAgICB0b29sdGlwQ29zdDogYnRuVG9vbHRpcENvc3QsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUgLy8gQnkgZGVmYXVsdCwgbWFraW5nIHRoaXMgYWx3YXlzIHZpc2libGUuIE1vZGlmeSBhcyBuZWVkZWQuXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKG5ld1Jlc291cmNlKTtcclxuICAgIGNvbnNvbGUubG9nKG5ld0J1dHRvbik7XHJcblxyXG4gICAgLy8gSGlkZSBmb3JtIG9uY2UgcmVzb3VyY2UgaXMgYWRkZWRcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VGb3JtXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAvLyBPcHRpb25hbGx5LCB5b3UgY2FuIHVwZGF0ZSB0aGUgVUkgdG8gc2hvdyB0aGUgYWRkZWQgcmVzb3VyY2VcclxuICAgIC8vIHVwZGF0ZVVJKHJlc291cmNlTmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVVJKHJlc291cmNlTmFtZSkge1xyXG4gICAgLy8gSGVyZSB5b3UgY2FuIGNyZWF0ZSBhIG5ldyBET00gZWxlbWVudCB0byBkaXNwbGF5IHRoZSBhZGRlZCByZXNvdXJjZVxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgcmVzb3VyY2VEaXYuaW5uZXJIVE1MID0gYCR7cmVzb3VyY2VOYW1lfTogJHtyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS52YWx1ZX1gO1xyXG5cclxuICAgIC8vIEFwcGVuZCB0byBzb21lIGNvbnRhaW5lclxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZXNvdXJjZURpdik7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxubGV0IGN1cnJlbnRseURlbGV0aW5nID0gZmFsc2U7XHJcbndpbmRvdy5pbmNyZWFzZU1hdGVyaWFsID0gaW5jcmVhc2VNYXRlcmlhbDtcclxuXHJcbi8vIEFmdGVyIGFsbCBoYXMgYmVlbiBsb2FkZWRcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4ge1xyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zKHBvbmRlcnMpO1xyXG4gICAgLy8gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpO1xyXG4gICAgZ2VuZXJhdGVCdXR0b25zKCk7IC8vIENhbGwgdGhpcyBvbmNlIG9uIHBhZ2UgbG9hZCBvciBnYW1lIGluaXRpYWxpemF0aW9uXHJcblxyXG4gICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncygpO1xyXG4gICAgbG9hZEdhbWUoKTtcclxuXHJcbiAgICBjbGVhclNpZGViYXIoKTtcclxuICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MoaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJykpOyAvLyBjaGVjayBpZiB3ZSBuZWVkIGdyb3Vwc1xyXG5cclxuICAgIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKTtcclxuXHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcblxyXG4gICAgc2hvd1RhYigncHJvZHVjdGlvblRhYicpO1xyXG4gICAgcmVxdWlyZSgnLi90cmFkZScpLmdlbmVyYXRlVHJhZGVUYWJsZShyZXNvdXJjZXMpO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRSS2V5RnJvbUlEKGlkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbciwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlc1tyXS5pZCwgaWQpO1xyXG4gICAgICAgICAgICBpZiAodmFsLmlkID09PSBpZCkgcmV0dXJuIHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnZXJyb3IgJyArIGlkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0Q1JLZXlGcm9tSUQoaWQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtyLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHIsIHZhbCwgaWQpO1xyXG4gICAgICAgICAgICBpZiAodmFsLmlkID09PSBpZCkgcmV0dXJuIHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnZXJyb3IgJyArIGlkO1xyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCJidXR0b25cIikpIHtcclxuICAgICAgICAgICAgLy8gb25lIG9mIG91ciBidXR0b25zIHdhcyBjbGlja2VkXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NsaWNrZWQnLCBidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXBzIFxyXG4gICAgICAgICAgICAvLyBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndG9vbHRpcCcpKSB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEJVSUxESU5HIEJVVFRPTlNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpICYmIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKSAhPT0gJ3VuZGVmaW5lZCcgJiYgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygncHVyY2hhc2FibGUnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIHZhciBidWlsZGluZyA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IGJ1eU1heEJ1aWxkaW5ncyhidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArJHtjb3VudH0gJHtjYXBpdGFsaXplRmlyc3QoYnVpbGRpbmcpLnNwbGl0KCdfJykuam9pbignICcpfXNgLCAnYXF1YScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBidXlCdWlsZGluZyhidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArMSAke2NhcGl0YWxpemVGaXJzdChidWlsZGluZyl9YCwgJ2FxdWEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gUE9OREVSIEJVVFRPTlNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd1bmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdW5sb2NrQXR0ciA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3VubG9jaycpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb25kZXJzW3VubG9ja0F0dHJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhblVubG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA8IHBvbmRlcnNbdW5sb2NrQXR0cl0uY29zdFttYXRlcmlhbF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ2Fubm90IHVubG9jayBcIiArIHVubG9ja0F0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuVW5sb2NrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVubG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBwb25kZXJzW3VubG9ja0F0dHJdLmNvc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwobWF0ZXJpYWwsIC1wb25kZXJzW3VubG9ja0F0dHJdLmNvc3RbbWF0ZXJpYWxdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb25kZXJzW3VubG9ja0F0dHJdLmlzUG9uZGVyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlVmlzaWJsZSh1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhpcyBidXR0b24gZGlzYXBwZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVubG9ja2luZyBcIiArIHVubG9ja0F0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIHRoZSBwYWdlIHdoZW4gYnV5aW5nIG9yZ2FuaXplZCBzdG9yYWdlIHRvIGdlbmVyYXRlIHRoZSBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVubG9ja0F0dHIgPT09ICdvcmdhbml6YXRpb24nKSBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE9USEVSIEJVVFRPTlNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZC5zbGljZSgwLCA2KSA9PT0gXCJnYXRoZXJcIikgdG9nZ2xlUmVzb3VyY2UoZ2V0UktleUZyb21JRChidXR0b24uaWQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQuc2xpY2UoMCwgNSkgPT09ICdjcmFmdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNyID0gZ2V0Q1JLZXlGcm9tSUQoYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCBjcjogJywgY3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5DcmFmdChjcikpIHRyaWdnZXJGbG9hdFVwVGV4dChldmVudC5wYWdlWCwgZXZlbnQucGFnZVksIGArJHtjcn1gLCAnYXF1YScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkgY3JhZnRBbGxSZXNvdXJjZXMoY3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY3JhZnRSZXNvdXJjZShjcik7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ3NhdmVCdXR0b24nKSBzYXZlR2FtZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2VhdEZpc2gnKSBlYXRGaXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnb3ZlcmxheS1idXR0b24nKSBoaWRlT3ZlcmxheSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2RlbGV0ZVNhdmVCdXR0b24nICYmIGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHlvdXIgc2F2ZSBkYXRhPyBUaGlzIHdpbGwgcmVzZXQgYWxsIHlvdXIgcHJvZ3Jlc3MuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3NhdmUnKTsgY3VycmVudGx5RGVsZXRpbmcgPSB0cnVlOyBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2NsZWFySm9iQXNzaWdubWVudHMnKSBjbGVhckpvYkFzc2lnbm1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdkYXJrTW9kZVRvZ2dsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2RhcmstbW9kZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBkYXJrTW9kZVRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNEYXJrID0gIWlzRGFyaztcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgZGFya01vZGVUb2dnbGUudGV4dENvbnRlbnQgPSBpc0RhcmsgPyBcIkxpZ2h0IE1vZGVcIiA6IFwiRGFyayBNb2RlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJzJtYWluJykgc2hvd1RhYignbWFpblRhYicpO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnMmdyYXBocycpIHNob3dUYWIoJ2dyYXBoc1RhYicpO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAncHJlc3RpZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNla2FpKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3RpZXJPbmVCdXR0b24nKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgbGV0IHBlcmsgPSBidXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBYmlsaXR5KHBlcmspO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQubWF0Y2hlcyhcIiNhbG9uZVwiKSkge1xyXG4gICAgICAgICAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAxKTtcclxuICAgICAgICAgICAgbGV0IHRleHQgPSAnKzEgQ2xvbmUnO1xyXG4gICAgICAgICAgICAvLyBIYXJkY29kZWQgaW5zdGVhZCB0byBhdm9pZCBpbmNyZWFzZSBhZmZlY3RlZCBieSBwcm9kdWN0aXZpdHkgYm9udXNlc1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzWydjbG9uZXMnXS52YWx1ZSA8IHJlc291cmNlc1snY2xvbmVzJ10ubWF4KSB7IHJlc291cmNlc1snY2xvbmVzJ10udmFsdWUgKz0gMTsgfVxyXG4gICAgICAgICAgICBlbHNlIHRleHQgPSAnTWF4IENsb25lcyc7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDsgLy8gWCBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gZXZlbnQucGFnZVk7IC8vIFkgY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuICAgICAgICAgICAgY29uc3QgY29sb3IgPSB0ZXh0ID09PSAnKzEgQ2xvbmUnID8gJ2dyZWVuJyA6ICdyZWQnO1xyXG4gICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgdGV4dCwgY29sb3IpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUoJ2Nsb25lcycpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VGYWN0b3J5QnV0dG9ucygpIHtcclxuICAgICAgICBjb25zdCBmYWN0b3J5QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmYWN0b3J5QnV0dG9ucycpO1xyXG5cclxuICAgICAgICBjb25zdCBidXlGYWN0b3J5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd0b29sdGlwJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5pZCA9ICdidXlGYWN0b3J5QnV0dG9uJztcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLnRleHRDb250ZW50ID0gJ0J1eSBOZXcgRmFjdG9yeSc7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgJ1RoZSBmYWN0b3J5IG11c3QgZ3JvdyEnKTtcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCAnNTAgc2lsdmVyJyk7XHJcbiAgICAgICAgZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQoYnV5RmFjdG9yeUJ1dHRvbik7XHJcblxyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdidXlpbmcgZmFjdG9yeScpO1xyXG4gICAgICAgICAgICBidXlGYWN0b3J5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZ3JhZGVCdWxrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLmlkID0gJ3VwZ3JhZGVCdWxrQnV0dG9uJztcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi50ZXh0Q29udGVudCA9ICdVcGdyYWRlIEJ1bGsnO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCAnQ3JhZnQgbW9yZSByZXNvdXJjZXMgcGVyIHNlY29uZCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCAnMiDihpIgNDogMzAgc2lsdmVyJyk7XHJcbiAgICAgICAgZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQodXBncmFkZUJ1bGtCdXR0b24pO1xyXG5cclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygndXBncmFkaW5nIGJ1bGsnKTtcclxuICAgICAgICAgICAgdXBncmFkZUJ1bGsoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIH1cclxuICAgIG1ha2VGYWN0b3J5QnV0dG9ucygpO1xyXG4gICAgLy8gY3JlYXRlRmFjdG9yeURpdigpO1xyXG5cclxuXHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcblxyXG4gICAgLy8gU2FtcGxlIHVzYWdlOlxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvb2x0aXAnKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAvLyBFeHRyYWN0IHRoZSBkYXRhIGZyb20geW91ciBidWlsZGluZyBvciBhbnkgb3RoZXIgZGF0YSAtIHNvdXJjZVxyXG4gICAgICAgIC8vIGNvbnN0IGNvbnRlbnQgPSBcIllvdXIgdG9vbHRpcCBjb250ZW50IGhlcmVcIjtcclxuXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGN1cnJlbnRIb3ZlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8vIFRPRE86IG1vdmUgdGhpcyBldmVudCBsaXN0ZW5lclxyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdvbmNsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkgeyBoaWRlVG9vbHRpcCgpOyBjdXJyZW50SG92ZXJCdXR0b24gPSBudWxsOyB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgam9icyBjb3VudGVyXHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgdXBkYXRlQm91bmNlQW5pbWF0aW9uKCk7XHJcblxyXG5cclxufSk7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIG5leHRGaWJvbmFjY2kobikge1xyXG4gICAgbGV0IGEgPSBuICogKDEgKyBNYXRoLnNxcnQoNSkpIC8gMi4wO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByZXZGaWJvbmFjY2kobikge1xyXG4gICAgbGV0IGEgPSBuIC8gKCgxICsgTWF0aC5zcXJ0KDUpKSAvIDIuMCk7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNla2FpKCkge1xyXG4gICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5Jyk7XHJcbiAgICBjb25zdCBvdmVybGF5VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LXRleHQnKTtcclxuICAgIGNvbnN0IG92ZXJsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1idXR0b24nKTtcclxuICAgIGNvbnN0IG92ZXJsYXlCYWNrQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktYmFjay1idXR0b24nKTsgLy8gR2V0IHRoZSBcIkdvIEJhY2tcIiBidXR0b25cclxuXHJcbiAgICBvdmVybGF5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGh1c2tzRHVlID0gZ2V0TWF0ZXJpYWwoJ2Nsb25lcycpO1xyXG5cclxuICAgICAgICAvLyBSZXNldCBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWQgd2hlbiBcIkNvbnRpbnVlXCIgaXMgY2xpY2tlZFxyXG4gICAgICAgIHJlc2V0UmVzb3VyY2VzKCk7XHJcbiAgICAgICAgcmVzZXRDcmFmdGVkUmVzb3VyY2VzKCk7XHJcbiAgICAgICAgcmVzZXRQb25kZXJzKCk7XHJcbiAgICAgICAgcmVzZXRQZXJrcygpO1xyXG4gICAgICAgIHJlc2V0QnVpbGRpbmdzKCk7XHJcbiAgICAgICAgcmVzZXRBbGxKb2JzKCk7XHJcbiAgICAgICAgcmVzZXRTdGFnZXMoKTtcclxuXHJcbiAgICAgICAgLy8gR2l2ZSBodXNrcyBhZnRlcndhcmRzXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnaHVza3MnLCBodXNrc0R1ZSk7XHJcblxyXG5cclxuICAgICAgICAvLyBDbG9zZSB0aGUgb3ZlcmxheVxyXG4gICAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgLy8gbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncyhmYWxzZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBvdmVybGF5QmFja0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAvLyBKdXN0IGNsb3NlIHRoZSBvdmVybGF5IHdpdGhvdXQgZXhlY3V0aW5nIHJlc2V0IGZ1bmN0aW9uc1xyXG4gICAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENvbnZlcnQgY2xvbmVzIHRvIGh1c2tzXHJcbiAgICBjb25zdCBvbGRIdXNrVmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaHVza3NJc2VrYWlWYWx1ZScpO1xyXG4gICAgbGV0IGh1c2tWYWx1ZTtcclxuICAgIGlmIChvbGRIdXNrVmFsdWUpIGh1c2tWYWx1ZSA9IG9sZEh1c2tWYWx1ZTtcclxuICAgIGVsc2UgaHVza1ZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgaHVza1ZhbHVlLmlkID0gJ2h1c2tzSXNla2FpVmFsdWUnO1xyXG4gICAgaHVza1ZhbHVlLmlubmVySFRNTCA9IGBIdXNrczogICR7Z2V0TWF0ZXJpYWwoJ2h1c2tzJyl9IDxicj4gWW91IHdpbGwgZ2V0ICR7Z2V0TWF0ZXJpYWwoJ2Nsb25lcycpfSBIdXNrcyBwb3N0LWlzZWthaS5gO1xyXG4gICAgaHVza1ZhbHVlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICBvdmVybGF5LnByZXBlbmQoaHVza1ZhbHVlKTtcclxuICAgIC8vIE92ZXJsYXlcclxuICAgIG92ZXJsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ01pZG5pZ2h0Qmx1ZSc7XHJcbiAgICBvdmVybGF5VGV4dC50ZXh0Q29udGVudCA9ICdZb3Ugc3RlcCB0aHJvdWdoIHRvIGFub3RoZXIgd29ybGQuJztcclxuXHJcbiAgICBmYWRlVG9CbGFjaygpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvdmVybGF5QmFja0J1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgfSwgNTAwMCk7XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlUHJlc3RpZ2VCdXR0b25zKCkge1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXNla2FpQnV0dG9ucycpO1xyXG4gICAgICAgIGxldCBpID0gMTtcclxuICAgICAgICBPYmplY3Qua2V5cyhwcmVzdGlnZSkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8Yj4ke3ByZXN0aWdlW2tleV0udGV4dH08L2I+PGJyPkxldmVsOiAke3ByZXN0aWdlW2tleV0ubGV2ZWx9PGJyPkNvc3Q6ICR7cHJlc3RpZ2Vba2V5XS5jb3N0fWA7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgcHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnLCBwcmVzdGlnZVtrZXldLnRvb2x0aXBEZXNjKTtcclxuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Rvb2x0aXAnKTsgLy8gQWRkIGEgY2xhc3MgZm9yIHN0eWxpbmcgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5ncmlkQ29sdW1uID0gKGkgJSA0ICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmdyaWRSb3cgPSBNYXRoLmZsb29yKGkgLyA0ICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbDogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIGlmIHlvdSB3YW50IHRvIGhhbmRsZSBjbGlja3NcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBpbXBsZW1lbnQgd2hhdCBoYXBwZW5zIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQnV0dG9uICR7a2V5fSB3YXMgY2xpY2tlZGApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdldE1hdGVyaWFsKCdodXNrcycpIDwgcHJlc3RpZ2Vba2V5XS5jb3N0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmxldmVsKys7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdodXNrcycsIC1wcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5jb3N0ID0gbmV4dEZpYm9uYWNjaShwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGI+JHtwcmVzdGlnZVtrZXldLnRleHR9PC9iPjxicj5MZXZlbDogJHtwcmVzdGlnZVtrZXldLmxldmVsfTxicj5Db3N0OiAke3ByZXN0aWdlW2tleV0uY29zdH1gO1xyXG4gICAgICAgICAgICAgICAgaHVza1ZhbHVlLnRleHRDb250ZW50ID0gJ0h1c2tzOiAnICsgZ2V0TWF0ZXJpYWwoJ2h1c2tzJyk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBSaWdodC1jbGljayB0byBkZWNyZWFzZSBsZXZlbFxyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBpbXBsZW1lbnQgd2hhdCBoYXBwZW5zIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQnV0dG9uICR7a2V5fSB3YXMgcmlnaHQgY2xpY2tlZGApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXN0aWdlW2tleV0ubGV2ZWwgPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5sZXZlbC0tO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5jb3N0ID0gcHJldkZpYm9uYWNjaShwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnaHVza3MnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGI+JHtwcmVzdGlnZVtrZXldLnRleHR9PC9iPjxicj5MZXZlbDogJHtwcmVzdGlnZVtrZXldLmxldmVsfTxicj5Db3N0OiAke3ByZXN0aWdlW2tleV0uY29zdH1gO1xyXG4gICAgICAgICAgICAgICAgaHVza1ZhbHVlLnRleHRDb250ZW50ID0gJ0h1c2tzOiAnICsgZ2V0TWF0ZXJpYWwoJ2h1c2tzJyk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgZGF0YSBmcm9tIHlvdXIgYnVpbGRpbmcgb3IgYW55IG90aGVyIGRhdGEgLSBzb3VyY2VcclxuICAgICAgICAgICAgLy8gY29uc3QgY29udGVudCA9IFwiWW91ciB0b29sdGlwIGNvbnRlbnQgaGVyZVwiO1xyXG5cclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEhvdmVyQnV0dG9uID0gYnV0dG9uO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7IGhpZGVUb29sdGlwKCk7IGN1cnJlbnRIb3ZlckJ1dHRvbiA9IG51bGw7IH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgYnV0dG9uc1xyXG4gICAgc2V0VGltZW91dChjcmVhdGVQcmVzdGlnZUJ1dHRvbnMsIDUwMDApO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7IGh1c2tWYWx1ZS5zdHlsZS5vcGFjaXR5ID0gJzEnOyB9LCA1MDAwKTtcclxuXHJcbn1cclxuXHJcbnZhciBjdXJyZW50SG92ZXJCdXR0b24gPSBudWxsO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gICAgdXBkYXRlVUksXHJcbiAgICBzZXRUb3RhbFRpbWUsXHJcbiAgICBjaGFuZ2VNZXNzYWdlLFxyXG5cclxuICAgIGdldE1lc3NhZ2UsXHJcbiAgICB0b3RhbF90aW1lLFxyXG4gICAgY3VycmVudEhvdmVyQnV0dG9uXHJcblxyXG59O1xyXG4iLCJcclxuY29uc3QgeyBzZXRTdGFnZSwgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdXR0b25WaXNpYmlsaXR5Jyk7XHJcblxyXG4vKipcclxuICogTWFrZSBldmVyeXRoaW5nIHdpdGggdGhlIGNsYXNzIFwic3RhZ2VcIiB2aXNpYmxlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFnZVxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZVZpc2libGUoc3RhZ2UpIHtcclxuICAgIGlmICghcGFzc2VkU3RhZ2Uoc3RhZ2UpKSB7XHJcbiAgICAgICAgc2V0U3RhZ2Uoc3RhZ2UpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RhZ2VFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyBzdGFnZSk7XHJcbiAgICBzdGFnZUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICB9KTtcclxuICAgIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKTtcclxufVxyXG5leHBvcnRzLm1ha2VWaXNpYmxlID0gbWFrZVZpc2libGU7IiwiY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBwZXJrcyB9ID0gcmVxdWlyZSgnLi9qc29uL3BlcmtzJyk7XHJcbmxldCBteVBlcmtzID0gW107XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwZXJrTmFtZSBcclxuICogQHJldHVybnMgYm9vbGVhblxyXG4gKi9cclxuZnVuY3Rpb24gaGFzUGVyayhwZXJrTmFtZSkge1xyXG4gICAgcmV0dXJuIG15UGVya3MuaW5jbHVkZXMocGVya05hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBbGxQZXJrcygpIHtcclxuICAgIHJldHVybiBteVBlcmtzO1xyXG59XHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IHBlcmtOYW1lIFBlcmsgdG8gYWRkXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRQZXJrKHBlcmtOYW1lKSB7XHJcbiAgICBteVBlcmtzLnB1c2gocGVya05hbWUpO1xyXG5cclxuICAgIC8vIERvIGFsbCB0aGUgb25lLXRpbWUgdXBkYXRlc1xyXG4gICAgc3dpdGNoIChwZXJrTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ0FyY2hpdGVjdCc6XHJcbiAgICAgICAgICAgIGZvciAobGV0IGIgaW4gYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1aXJlKCcuL3JlY2FsY3VsYXRlQnVpbGRpbmdDb3N0JykucmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYiwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aWVyTnVtIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UGVya0Zyb21UaWVyKHRpZXJOdW0pIHtcclxuICAgIGZvciAobGV0IHBlcmsgaW4gcGVya3NbJ3RpZXInICsgdGllck51bV0pIHtcclxuICAgICAgICBpZiAoaGFzUGVyayhwZXJrKSkgcmV0dXJuIHBlcms7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gcGVyayBmb3IgdGhpcyB0aWVyXHJcbiAgICByZXR1cm4gJyc7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzZWxlY3RBYmlsaXR5KGFiaWxpdHlOYW1lKSB7XHJcbiAgICBpZiAoaGFzUGVyayhhYmlsaXR5TmFtZSkpIHJldHVybjtcclxuXHJcbiAgICBsZXQgY29uZmlybVNlbGVjdGlvbiA9IHdpbmRvdy5jb25maXJtKFwiRG8geW91IHdhbnQgdG8gc2VsZWN0IFwiICsgYWJpbGl0eU5hbWUgKyBcIj8gVGhpcyBkZWNpc2lvbiBjYW5ub3QgYmUgZWFzaWx5IGNoYW5nZWQuXCIpO1xyXG5cclxuICAgIGlmICghY29uZmlybVNlbGVjdGlvbikgcmV0dXJuO1xyXG4gICAgYWRkUGVyayhhYmlsaXR5TmFtZSk7XHJcblxyXG4gICAgLy8gZm9yIChsZXQgaSA9IDE7IGkgPD0gMTsgKytpKVxyXG4gICAgcmVxdWlyZSgnLi9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbicpLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKGFiaWxpdHlOYW1lKTtcclxuXHJcbiAgICAvLyBteVBlcmtzLnB1c2goYWJpbGl0eU5hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFBlcmtzKCkge1xyXG4gICAgbXlQZXJrcyA9IFtdO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGhhc1BlcmssXHJcbiAgICBhZGRQZXJrLFxyXG4gICAgc2VsZWN0QWJpbGl0eSxcclxuICAgIGdldFBlcmtGcm9tVGllcixcclxuICAgIGdldEFsbFBlcmtzLFxyXG4gICAgcmVzZXRQZXJrc1xyXG59OyIsIi8vIERFUEVORFMgT046IGpzb24vYnV0dG9ucy5qc1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKCcuL2pzb24vcG9uZGVyJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnV0dG9ucyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1dHRvbnMnKTtcclxuXHJcbmZ1bmN0aW9uIGlzUG9uZGVyZWQoaWQpIHtcclxuICAgIC8vIENoZWNrIGlmIHRoZSBpZCBleGlzdHMgaW4gdGhlIHVubG9ja3MgbWFwXHJcbiAgICAvLyBJZiB0aGUgaWQgZG9lc24ndCBleGlzdCBpbiB0aGUgbWFwLCByZXR1cm4gZmFsc2VcclxuXHJcbiAgICByZXR1cm4gcG9uZGVyc1tpZF0gPyBwb25kZXJzW2lkXS5pc1BvbmRlcmVkIDogZmFsc2U7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjYW5VbmxvY2sodW5sb2NrSWQpIHtcclxuICAgIC8vIEdldCB0aGUga2V5IGZyb20gdGhpcyBpZFxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB1bmxvY2s/ICcsIHVubG9ja0lkKTtcclxuICAgIHZhciB1bmxvY2tLZXkgPSAnJztcclxuICAgIGZvciAobGV0IHVubG9jayBpbiBwb25kZXJzKSB7XHJcbiAgICAgICAgaWYgKHBvbmRlcnNbdW5sb2NrXS5pZCA9PT0gdW5sb2NrSWQpIHtcclxuICAgICAgICAgICAgdW5sb2NrS2V5ID0gdW5sb2NrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodW5sb2NrS2V5ID09PSAnJykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcImludmFsaWQgdW5sb2NrIGlkOiBcIiwgdW5sb2NrSWQpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIHJlc291cmNlc1xyXG4gICAgdmFyIGNhbkJ1eSA9IHRydWU7XHJcbiAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBwb25kZXJzW3VubG9ja0tleV0uY29zdCkge1xyXG4gICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA8IHBvbmRlcnNbdW5sb2NrS2V5XS5jb3N0W21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkNhbm5vdCB1bmxvY2sgXCIgKyB1bmxvY2tJZCk7XHJcbiAgICAgICAgICAgIGNhbkJ1eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB3ZSB1bmxvY2sgJywgdW5sb2NrSWQsIGNhbkJ1eSk7XHJcbiAgICByZXR1cm4gY2FuQnV5O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVQb25kZXJCdXR0b25zKHBvbmRlck9iamVjdHMpIHtcclxuICAgIC8vIGNvbnN0IGdlbmVyYXRlZEJ1dHRvbnMgPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtwb25kZXJLZXksIHBvbmRlck9ial0gb2YgT2JqZWN0LmVudHJpZXMocG9uZGVyT2JqZWN0cykpIHtcclxuXHJcbiAgICAgICAgY29uc3QgYnV0dG9uS2V5ID0gYHBvbmRlciR7Y2FwaXRhbGl6ZUZpcnN0KHBvbmRlcktleSl9YDsgLy8gZS5nLiBwb25kZXJGaXNoaW5nXHJcblxyXG4gICAgICAgIC8vIGxldCB0b29sdGlwQ29zdCA9IE9iamVjdC5lbnRyaWVzKHBvbmRlck9iai5jb3N0KS5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYCR7YW1vdW50LnRvRml4ZWQoMCl9ICR7bWF0ZXJpYWx9YCkuam9pbignPGJyPicpO1xyXG4gICAgICAgIGxldCB0b29sdGlwQ29zdCA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuZ2VuZXJhdGVUb29sdGlwQ29zdChwb25kZXJPYmouY29zdCk7XHJcbiAgICAgICAgYnV0dG9uc1tidXR0b25LZXldID0ge1xyXG4gICAgICAgICAgICBjbGFzczogJ3Rvb2x0aXAgdW5sb2NrJyxcclxuICAgICAgICAgICAgdGV4dDogcG9uZGVyT2JqLnRleHQgfHwgJ1BvbmRlciBhIE15c3Rlcnk/JyxcclxuICAgICAgICAgICAgdG9vbHRpcERlc2M6IHBvbmRlck9iai50b29sdGlwRGVzYyB8fCBcIldobyBrbm93cyB3aGF0IHlvdSdsbCBkaXNjb3ZlclwiLFxyXG4gICAgICAgICAgICB0b29sdGlwQ29zdDogdG9vbHRpcENvc3QsXHJcbiAgICAgICAgICAgIHRhYjogJ3BvbmRlcicsXHJcbiAgICAgICAgICAgIHVubG9jazogcG9uZGVyS2V5LFxyXG4gICAgICAgICAgICByZXF1aXJlbWVudDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4vaGVscGVyJykuZ2V0TWF4KCdwb25kZXInKSA+PSBwb25kZXJzW3BvbmRlcktleV0uY29zdFsncG9uZGVyJ10gLyAyO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGlkZTogKCkgPT4gaXNQb25kZXJlZChwb25kZXJLZXkpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uS2V5LCBidXR0b25zW2J1dHRvbktleV0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyByZXR1cm4gZ2VuZXJhdGVkQnV0dG9ucztcclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2FuVW5sb2NrLFxyXG4gICAgaXNQb25kZXJlZCxcclxuICAgIGdlbmVyYXRlUG9uZGVyQnV0dG9uc1xyXG59OyIsIlxyXG5jb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoXCIuL2pzb24vcHJlc3RpZ2VcIik7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZShcIi4vcG9uZGVyXCIpO1xyXG5jb25zdCB7IHNldE1heCB9ID0gcmVxdWlyZShcIi4vcmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKFwiLi9zdGFnZXNcIik7XHJcbmNvbnN0IHsgdXBkYXRlQm91bmNlQW5pbWF0aW9uIH0gPSByZXF1aXJlKFwiLi91cGRhdGVCb3VuY2VBbmltYXRpb25cIik7XHJcblxyXG5mdW5jdGlvbiByZWNhbGNNYXhDbG9uZXMoKSB7XHJcbiAgICBsZXQgbWF4Q2xvbmVzID0gMDtcclxuICAgIGlmIChwYXNzZWRTdGFnZSgnY2xvbmUnKSkgbWF4Q2xvbmVzICs9IDE7XHJcblxyXG4gICAgY29uc3QgYnVpbGRpbmdzID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIikuYnVpbGRpbmdzO1xyXG4gICAgLy8gY29uc29sZS5sb2cocGFzc2VkU3RhZ2UoJ2Nsb25lJyksIG1heENsb25lcyk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIGJ1aWxkaW5nXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGtleSwgYnVpbGRpbmcsIGJ1aWxkaW5nLmVmZmVjdHMpO1xyXG4gICAgICAgIGlmIChidWlsZGluZy5lZmZlY3RzICYmIGJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddKVxyXG4gICAgICAgICAgICBtYXhDbG9uZXMgKz0gYnVpbGRpbmcuZWZmZWN0c1snY2xvbmVzJ10gKiBidWlsZGluZy5jb3VudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb25kZXIgYm9udXNlc1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ3NoZWx0ZXInXS5jb3VudDtcclxuICAgIGlmIChpc1BvbmRlcmVkKCdiaWdnZXJIdXQnKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ2h1dCddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlckhvdXNlJykpIG1heENsb25lcyArPSAyICogYnVpbGRpbmdzWydob3VzZSddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpKSBtYXhDbG9uZXMgKz0gNCAqIGJ1aWxkaW5nc1sndGVlcGVlJ10uY291bnQ7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnZXZlbkJpZ2dlclNoZWx0ZXInKSkgbWF4Q2xvbmVzICs9IDEgKiBidWlsZGluZ3NbJ3NoZWx0ZXInXS5jb3VudDtcclxuXHJcbiAgICBpZiAoaGFzUHJlc3RpZ2UoJ21heENsb25lcycpKSBtYXhDbG9uZXMgKz0gMSAqIGdldExldmVsT2ZQcmVzdGlnZSgnbWF4Q2xvbmVzJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtYXhDbG9uZXMpO1xyXG4gICAgLy8gcmV0dXJuIG1heENsb25lcztcclxuICAgIHNldE1heCgnY2xvbmVzJywgbWF4Q2xvbmVzKTtcclxuICAgIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG59XHJcblxyXG5leHBvcnRzLnJlY2FsY01heENsb25lcyA9IHJlY2FsY01heENsb25lczsiLCJjb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoJy4vanNvbi9wcmVzdGlnZScpO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ0tleSBUaGUgYnVpbGRpbmcgd2UgcmVjYWxjdWxhdGUgdGhlIGNvc3Qgb2ZcclxuICogQHBhcmFtIHtPYmplY3R9IGJ1aWxkaW5ncyBCdWlsZGluZ3Mgb2JqZWN0XHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhc1BlcmsgSGFzUGVyayBmdW5jdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYnVpbGRpbmdLZXksIGJ1aWxkaW5ncywgaGFzUGVyaykge1xyXG4gICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuICAgIGlmIChidWlsZGluZyAmJiBidWlsZGluZy5jb3N0ICYmIGJ1aWxkaW5nLnJhdGlvKSB7XHJcbiAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidWlsZGluZy5iYXNlY29zdFttYXRlcmlhbF0sIGJ1aWxkaW5nLnJhdGlvLCBidWlsZGluZy5jb3VudCk7XHJcbiAgICAgICAgICAgIGJ1aWxkaW5nLmNvc3RbbWF0ZXJpYWxdID0gTWF0aC5yb3VuZChidWlsZGluZy5iYXNlY29zdFttYXRlcmlhbF0gKiBNYXRoLnBvdyhidWlsZGluZy5yYXRpbywgYnVpbGRpbmcuY291bnQpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChoYXNQZXJrKCdBcmNoaXRlY3QnKSkgYnVpbGRpbmcuY29zdFttYXRlcmlhbF0gKj0gMC43NTsgLy8gMjUlIHJlZHVjdGlvbiBmb3IgYXJjaGl0ZWN0c1xyXG4gICAgICAgICAgICBpZiAoaGFzUHJlc3RpZ2UoJ2NoZWFwZXJCdWlsZGluZ3MnKSkgYnVpbGRpbmcuY29zdFttYXRlcmlhbF0gKj0gTWF0aC5wb3coMC45NSwgZ2V0TGV2ZWxPZlByZXN0aWdlKCdjaGVhcGVyQnVpbGRpbmdzJykpOyAvLyA1JSByZWR1Y3Rpb25cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIHRvb2x0aXAgY29zdFxyXG4gICAgY29uc3QgbXlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGJ1aWxkaW5nS2V5KTtcclxuICAgIHZhciBuZXdUZXh0ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KGJ1aWxkaW5nLmNvc3QpO1xyXG4gICAgaWYgKG15QnV0dG9uKSB7XHJcbiAgICAgICAgbXlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIG5ld1RleHQpO1xyXG4gICAgICAgIGNvbnN0IGVmZmVjdFN0cmluZyA9IHJlcXVpcmUoJy4vYnVpbGRpbmdzJykuZ2VuZXJhdGVFZmZlY3RTdHJpbmcoYnVpbGRpbmcpO1xyXG4gICAgICAgIG15QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWVmZmVjdCcsIGVmZmVjdFN0cmluZyk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSB7IHRocm93IFwiQnV0dG9uIG5vdCBmb3VuZCBmb3IgXCIgKyBidWlsZGluZ0tleTsgfVxyXG5cclxufVxyXG5leHBvcnRzLnJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0ID0gcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3Q7IiwiXHJcbi8vIERFUEVORFMgT046IHRvb2xzLmpzLCBqb2JzLmpzXHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IHsgcG9uZGVycyB9ID0gcmVxdWlyZShcIi4vanNvbi9wb25kZXJcIik7XHJcbmNvbnN0IHsgYnV0dG9ucyB9ID0gcmVxdWlyZShcIi4vanNvbi9idXR0b25zXCIpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5cclxuY29uc3QgeyBnZXRXb3JrZXJzLCB1cGRhdGVUb3RhbCB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgaGFzVG9vbCwgfSA9IHJlcXVpcmUoJy4vdG9vbHMnKTtcclxuY29uc3QgeyB1cGRhdGVTa2lsbHMsIGNhbGNDcmFmdEJvbnVzLCBnZXRNYXggfSA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuY29uc3QgeyBjYWxjSW5jcmVhc2UgfSA9IHJlcXVpcmUoXCIuL2NhbGNJbmNyZWFzZVwiKTtcclxuY29uc3QgeyB1cGRhdGVTaWRlYmFyIH0gPSByZXF1aXJlKFwiLi9zaWRlYmFyXCIpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlLCBnZXRBbGxTdGFnZXMgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTsgLy8gVXNlZCBmb3IgZXZhbCBmdW5jdGlvbnNcclxuY29uc3QgeyB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoXCIuL3NpZGViYXJcIik7XHJcbi8vIGNvbnNvbGUubG9nKGNhcGl0YWxpemVGaXJzdCk7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBqb2IgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2VBZmZlY3RlZEJ5Sm9iKGpvYiwgcmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IHNraWxsID0gc2tpbGxzW2pvYl07XHJcbiAgICBpZiAoIXNraWxsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgaWYgKHNraWxsLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlJ3MgYSB0b29sIHJlcXVpcmVtZW50IGZvciB0aGlzIHJlc291cmNlXHJcbiAgICAgICAgaWYgKHNraWxsLm5lZWRUb29scyAmJiBBcnJheS5pc0FycmF5KHNraWxsLm5lZWRUb29scykpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgdG9vbE9iaiBvZiBza2lsbC5uZWVkVG9vbHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRvb2wgaW4gdG9vbE9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sT2JqW3Rvb2xdLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaGFzIHRoaXMgdG9vbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm93LCBqdXN0IHJldHVybmluZyB0cnVlIHRvIGluZGljYXRlIHRoZSByZXNvdXJjZSBpcyBhZmZlY3RlZCBhbmQgYSB0b29sIGlzIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgeW91IG1heSB3YW50IHRvIHJlcGxhY2UgdGhpcyB3aXRoIGEgY2hlY2sgdG8gc2VlIGlmIHRoZSBwbGF5ZXIgcG9zc2Vzc2VzIHRoZSByZXF1aXJlZCB0b29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNUb29sKHRvb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBuZWVkZWQgYSB0b29sIGJ1dCBub3QgZm9yIHRoaXNcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIG5vIHRvb2wgcmVxdWlyZW1lbnQgd2FzIGZvdW5kIGZvciB0aGUgcmVzb3VyY2UsIGl0J3Mgc3RpbGwgYWZmZWN0ZWQgYnkgdGhlIGpvYlxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjU2Vjb25kc1JlbWFpbmluZyhyZXNvdXJjZU5hbWUsIG5lZWRlZCkge1xyXG4gICAgaWYgKG5lZWRlZCA8PSByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgcmV0dXJuIDA7XHJcblxyXG4gICAgLy8gSG93IG11Y2ggcGVyIHNlY29uZFxyXG4gICAgY29uc3QgaW5jcmVhc2UgPSBjYWxjSW5jcmVhc2UocmVzb3VyY2VOYW1lLCAxMDAwKTtcclxuICAgIGlmIChpbmNyZWFzZSA9PSAwKSByZXR1cm4gLTE7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncGluZycpO1xyXG4gICAgLy8gRGlmZmVyZW5jZSBvdmVyIHRpbWVcclxuICAgIGNvbnN0IHRpbWVSZW1haW5pbmcgPSBNYXRoLmNlaWwobmVlZGVkIC0gcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpIC8gaW5jcmVhc2U7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbGMgbWlsbGknLCByZXNvdXJjZU5hbWUsIG5lZWRlZCwgdGltZVJlbWFpbmluZyk7XHJcbiAgICAvLyBpZiAodGltZVJlbWFpbmluZyA9PSBJbmZpbml0eSB8fCB0aW1lUmVtYWluaW5nID09IC1JbmZpbml0eSkgcmV0dXJuIC0xO1xyXG4gICAgcmV0dXJuIHRpbWVSZW1haW5pbmc7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgcmVzb3VyY2VzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG5leHBvcnRzLnJlc291cmNlc0NvbnRhaW5lciA9IHJlc291cmNlc0NvbnRhaW5lcjtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRNYXgobWF0ZXJpYWwsIG51bSkge1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS5tYXggPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNyZWFzZU1heChtYXRlcmlhbCwgbnVtKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImluY3JlYXNlIG1heCBcIiwgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLm1heCArPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG5cclxufVxyXG5cclxuLy8gR2VuZXJpYyBpbmNyZWFzZVxyXG5mdW5jdGlvbiBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCBudW0pIHtcclxuICAgIC8vIEVuc3VyZSB3ZSBhY3R1YWxseSBuZWVkIHRvIGRvIGFueXRoaW5nXHJcbiAgICBpZiAobnVtID09IDApIHJldHVybjtcclxuICAgIG1hdGVyaWFsID0gbWF0ZXJpYWwudG9Mb3dlckNhc2UoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbmNyZWFzZSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgLy8gaWYgKE1hdGguYWJzKG51bSkgPiA1KSBjb25zb2xlLmxvZygnY2hhbmdpbmcnLCBtYXRlcmlhbCwgJ2J5JywgbnVtKTtcclxuXHJcbiAgICAvLyBUaGlzIGNoZWNrIGVuc3VyZXMgdGhhdCB0aGUgbWF0ZXJpYWwga2V5IGV4aXN0cyBpbiB0aGUgcmVzb3VyY2VzIG1hcC5cclxuICAgIGlmIChtYXRlcmlhbCBpbiByZXNvdXJjZXMpIHtcclxuXHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsKSA8IGdldE1heChtYXRlcmlhbCkgJiYgbnVtID4gMCkgeyAvLyBBZGRpbmcgcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKCdmYXN0ZXJSZXNvdXJjZUdhaW4nKSkgbnVtICo9IDEuMDU7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgICAgICB1cGRhdGVTa2lsbHMobWF0ZXJpYWwsIG51bSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChudW0gPCAwKSB7IC8vIFN1YnRyYWN0aW5nIHJlc291cmNlc1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuICAgICAgICB9IGVsc2UgeyAvLyBBbHJlYWR5IGF0IG1heFxyXG4gICAgICAgICAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlID0gZ2V0TWF4KG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoaXNQb25kZXJlZCgnYXV0b2NyYWZ0JykgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdXRvQ3JhZnRDaGVja2JveFwiKS5jaGVja2VkICYmIGF1dG9DcmFmdFRhYmxlW21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICAgICAgY3JhZnRBbGxSZXNvdXJjZXMoYXV0b0NyYWZ0VGFibGVbbWF0ZXJpYWxdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKTtcclxuICAgICAgICAvLyByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzKCk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobWF0ZXJpYWwgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjcmFmdGluZyBhIG1hdGVyaWFsJywgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShtYXRlcmlhbCk7XHJcbiAgICAgICAgdXBkYXRlU2tpbGxzKG1hdGVyaWFsLCBudW0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gQ3JlYXRpbmcgYSBuZXcgbWF0ZXJpYWxcclxuICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdKSBjcmFmdGVkUmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcblxyXG4gICAgICAgIHVwZGF0ZVNpZGViYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjcmFmdGVkIG1hdGVyaWFscyBoYXZlIG5vIG1heCwgYSBsYSBLaXR0ZW5zIEdhbWVcclxuXHJcblxyXG5cclxuICAgIC8vIHVwZGF0ZVNpZGViYXIoKTtcclxuXHJcblxyXG5cclxuICAgIC8vIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIG1hdGVyaWFsICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWU7XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzKCkge1xyXG4gICAgLy8gY29uc3QgcmVzb3VyY2VzID0gW1wiY2xvbmVzXCIsIFwic3RpY2tzXCIsIFwidmluZXNcIiwgXCJyb2Nrc1wiLCBcImZpc2hcIiwgXCJ3b29kXCIsIFwicG9uZGVyXCJdO1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbmNyZWFzZSBvZiBcIiArIHJlc291cmNlKTtcclxuICAgICAgICBjb25zdCByYXRlID0gY2FsY0luY3JlYXNlKHJlc291cmNlLCAxMDAwKTtcclxuICAgICAgICB2YXIgcmF0ZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtyZXNvdXJjZX1JbmNyZWFzZVJhdGVgKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHJhdGVFbGVtZW50KSByYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IHJhdGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBcclxuICogQHJldHVybnMgQnV0dG9uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY29uZmlnKSB7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBjb25maWcuY2xhc3MgKyAnIHRvb2x0aXAnO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnaWQnLCBjb25maWcuaWQpO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgncmVxdWlyZW1lbnQnLCBjb25maWcucmVxdWlyZWRTdGFnZSk7XHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5maW5kKGtleSA9PiBjcmFmdGVkUmVzb3VyY2VzW2tleV0gPT09IGNvbmZpZyk7XHJcbiAgICAvLyBjb25zdCBjbGVhbkNvdW50ID0gcGFyc2VGbG9hdChjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpLnRvRml4ZWQoMCk7XHJcbiAgICAvLyBidXR0b24uaW5uZXJIVE1MID0gYCR7Y29uZmlnLnRleHQgfHwgY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSl9OiA8c3BhbiBpZD1cIiR7cmVzb3VyY2VOYW1lICsgXCJWYWx1ZVwifVwiPiR7Y2xlYW5Db3VudH08L3NwYW4+YDtcclxuICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgJHtjb25maWcudGV4dCB8fCBjYXBpdGFsaXplRmlyc3QocmVzb3VyY2VOYW1lKX1gO1xyXG4gICAgLy8gYnV0dG9uLnRvb2x0aXBEZXNjID0gY29uZmlnLnRvb2x0aXBEZXNjOyBcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGJ1dHRvbi50YWIgPSAnZXhwZXJpbWVudCc7XHJcblxyXG4gICAgcmV0dXJuIGJ1dHRvbjtcclxufVxyXG5cclxuXHJcbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjcmFmdGVkUmVzb3VyY2VCdXR0b25zJyk7XHJcbmZ1bmN0aW9uIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKSB7XHJcblxyXG4gICAgLy8gRm9yIGVhY2ggcmVzb3VyY2UsIGNyZWF0ZSBhIGJ1dHRvbiB1c2luZyB0aGUgY2FwdHVyZWQgY291bnRzXHJcbiAgICBmb3IgKGxldCBuYW1lIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuXHJcbiAgICAgICAgLy8gY29uZmlnLmNvdW50ID0gY3JhZnRlZFJlc291cmNlc1tuYW1lXS52YWx1ZTtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY3JhZnRlZFJlc291cmNlc1tuYW1lXSk7XHJcbiAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnRvb2x0aXBEZXNjIHx8IFwiXCIpO1xyXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmNvc3QpIHx8IFwiXCIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b29sdGlwIGNvc3QnLCBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgICAgICBjb25zdCByZXFSZXN1bHQgPSBwYXNzZWRTdGFnZShidXR0b24uZ2V0QXR0cmlidXRlKCdyZXF1aXJlbWVudCcpKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXFSZXN1bHQsIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVtZW50JyksIE9iamVjdC52YWx1ZXMoZ2V0QWxsU3RhZ2VzKCkpKTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogRmlndXJlIG91dCB3aGF0IHRoZSBidWcgaXMgaGVyZVxyXG4gICAgICAgIGlmIChyZXFSZXN1bHQpIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcclxuICAgICAgICBlbHNlIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuXHJcblxyXG4gICAgICAgIGJ1dHRvbnNbY3JhZnRlZFJlc291cmNlc1tuYW1lXS5pZF0gPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihuYW1lKSB7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uKGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0pO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnRvb2x0aXBEZXNjKTtcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmNvc3QpKTtcclxuXHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgIGJ1dHRvbnNbY3JhZnRlZFJlc291cmNlc1tuYW1lXS5pZF0gPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdG8gcmVwbGFjZSA8cD4gZWxlbWVudHMgd2l0aCB0aGUgYnV0dG9uc1xyXG4vLyBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b24oJ3N0aWNrcycpO1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVUb29sdGlwQ29zdChyZXF1aXJlbWVudHMpIHtcclxuICAgIGlmIChyZXF1aXJlbWVudHMgPT09IG51bGwpIHJldHVybiAnJztcclxuICAgIHZhciBzdHIgPSAnJztcclxuICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHJlcXVpcmVtZW50cykge1xyXG5cclxuICAgICAgICBjb25zdCBoYXNFbm91Z2ggPSBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA+PSByZXF1aXJlbWVudHNbbWF0ZXJpYWxdOy8qIFlvdXIgbG9naWMgdG8gY2hlY2sgaWYgdGhlcmUncyBlbm91Z2ggb2YgdGhlIG1hdGVyaWFsICovO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICBzdHIgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHtyZXF1aXJlbWVudHNbbWF0ZXJpYWxdfSAke21hdGVyaWFsfTwvc3Bhbj48YnI+YDtcclxuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IGVtb2ppRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbW9qaURpc3BsYXknKTtcclxuZnVuY3Rpb24gdXBkYXRlRW1vamlEaXNwbGF5KCkge1xyXG4gICAgbGV0IGVtb2ppU3RyID0gXCJcIjtcclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIGpvYkNvdW50cyBtYXAgdG8gZ2V0IGVhY2ggam9iIGFuZCBpdHMgY291bnRcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGxldCByZXNvdXJjZSA9IHJlc291cmNlc1tnZXRBZmZlY3RlZFJlc291cmNlcyhqb2IpWzBdXTtcclxuICAgICAgICBsZXQgY291bnQgPSBnZXRXb3JrZXJzKHJlc291cmNlKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZSwgY291bnQpO1xyXG4gICAgICAgIGlmIChjb3VudCA9PT0gdW5kZWZpbmVkIHx8IGNvdW50ID09IDApIGNvbnRpbnVlO1xyXG4gICAgICAgIGxldCBlbW9qaSA9IHJlc291cmNlc1tyZXNvdXJjZV0uZW1vamkgfHwgJ/CTgJ8nOyAgLy8gZ2V0IHRoZSBlbW9qaSBjb3JyZXNwb25kaW5nIHRvIHRoZSBqb2IgZnJvbSB0aGUgcmVzb3VyY2VzIG1hcFxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGpvYiwgZW1vamkpO1xyXG4gICAgICAgIGlmIChlbW9qaSkge1xyXG4gICAgICAgICAgICBlbW9qaVN0ciArPSBlbW9qaS5yZXBlYXQoY291bnQpOyAgLy8gcmVwZWF0IHRoZSBlbW9qaSBiYXNlZCBvbiB0aGUgY291bnRcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZW1vamlEaXNwbGF5LnRleHRDb250ZW50ID0gZW1vamlTdHI7ICAvLyB1cGRhdGUgdGhlIGVtb2ppRGlzcGxheSBkaXYgd2l0aCB0aGUgZ2VuZXJhdGVkIGVtb2ppIHN0cmluZ1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkanVzdEZvbnRTaXplKCkge1xyXG4gICAgICAgIGxldCBmb250U2l6ZSA9IDQ4OyAgLy8gU3RhcnRpbmcgZm9udCBzaXplXHJcblxyXG4gICAgICAgIGVtb2ppRGlzcGxheS5zdHlsZS5mb250U2l6ZSA9IGAke2ZvbnRTaXplfXB4YDtcclxuXHJcbiAgICAgICAgd2hpbGUgKChlbW9qaURpc3BsYXkub2Zmc2V0V2lkdGggPiA2MDApICYmIGZvbnRTaXplID4gMzApIHtcclxuICAgICAgICAgICAgLy8gMTAgaXMgYSBtaW5pbXVtIGZvbnQtc2l6ZSB0aHJlc2hvbGQgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVtb2ppRGlzcGxheS5vZmZzZXRXaWR0aCwgZW1vamlEaXNwbGF5Lm9mZnNldEhlaWdodCk7XHJcbiAgICAgICAgICAgIGZvbnRTaXplIC09IDE7IC8vIGRlY3JlYXNlIHRoZSBmb250IHNpemVcclxuICAgICAgICAgICAgZW1vamlEaXNwbGF5LnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udFNpemV9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gd2hlbmV2ZXIgdGhlIGNvbnRlbnQgb2YgI2Vtb2ppRGlzcGxheSBjaGFuZ2VzXHJcbiAgICBhZGp1c3RGb250U2l6ZSgpO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB1cGRhdGVFbW9qaURpc3BsYXkgZXZlcnkgdGltZSBqb2JDb3VudHMgaXMgdXBkYXRlZDpcclxuLy8gRm9yIGV4YW1wbGU6XHJcbi8vIGpvYkNvdW50cy5zZXQoJ2Zpc2hpbmcnLCA0KTtcclxudXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcblxyXG5cclxuY29uc3QgYXV0b0NyYWZ0VGFibGUgPSB7XHJcbiAgICAnc3RpY2tzJzogJ2hhbmRsZScsXHJcbiAgICAnd29vZCc6ICdwYXBlcicsXHJcbiAgICAncm9ja3MnOiAnc2hhcnByb2NrcycsXHJcbiAgICAndmluZXMnOiAncm9wZScsXHJcbiAgICAnc2FuZCc6ICdnbGFzcycsXHJcbiAgICAnb3JlJzogJ2dvbGQnLFxyXG4gICAgJ2NsYXknOiAnYnJpY2tzJ1xyXG59O1xyXG5cclxuZnVuY3Rpb24gY3JhZnRBbGxSZXNvdXJjZXMocmVzb3VyY2VLZXkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29zdCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcbiAgICAgICAgbGV0IHN1ZmZpY2llbnRSZXNvdXJjZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtYXQgaW4gY29zdCkge1xyXG4gICAgICAgICAgICAvLyBpZiAoZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIDwgY29zdFttYXRdKSB7XHJcbiAgICAgICAgICAgIHN1ZmZpY2llbnRSZXNvdXJjZXMucHVzaChnZXRNYXRlcmlhbChtYXQsIHJlc291cmNlcykgLyBjb3N0W21hdF0pO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtaW4gPSBNYXRoLmZsb29yKE1hdGgubWluKC4uLnN1ZmZpY2llbnRSZXNvdXJjZXMpKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXNvdXJjZUtleSwgbWluKTtcclxuICAgICAgICBjcmFmdFJlc291cmNlUXVhbnRpdHkocmVzb3VyY2VLZXksIG1pbik7XHJcblxyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBjcmFmdGFsbCBmb3I6ICcsIHJlc291cmNlS2V5LCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyYWZ0UmVzb3VyY2VRdWFudGl0eShyZXNvdXJjZUtleSwgcXVhbnRpdHkpIHtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZUtleSkpIHRocm93IFwiSW52YWxpZCBjcmFmdCBmb3IgbWlzc2luZyByZXNvdXJjZTogXCIgKyByZXNvdXJjZUtleTtcclxuXHJcbiAgICBpZiAoIWNhbkNyYWZ0KHJlc291cmNlS2V5KSkgcmV0dXJuOyAvLyBUYWtlcyBjYXJlIG9mIHF1YW50aXR5IDwgMVxyXG4gICAgbGV0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgLy8gbGV0IGNyYWZ0Qm9udXMgPSBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSk7XHJcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHF1YW50aXR5OyArK2kpIHtcclxuICAgIC8vICAgICBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cyk7XHJcbiAgICAvLyB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguZmxvb3IocXVhbnRpdHkpOyArK2kpIHsgLy8gT25seSBjcmFmdCB3aG9sZSBudW1iZXIsIHNvIDEuNCBvbmx5IHJ1bnMgb25jZVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjcmFmdGluZycsIHF1YW50aXR5LCByZXNvdXJjZUtleSwgY29zdCk7XHJcbiAgICAgICAgY3JhZnRPbmUocmVzb3VyY2VLZXksIGNvc3QsIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSk7XHJcbiAgICB9XHJcbiAgICAvLyBmb3IgKGxldCBtYXQgaW4gY29zdCkge1xyXG4gICAgLy8gICAgIGluY3JlYXNlTWF0ZXJpYWwobWF0LCAtY29zdFttYXRdICogcXVhbnRpdHkpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZUtleSwgcXVhbnRpdHkpO1xyXG5cclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UpIGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlID0gdHJ1ZTtcclxuXHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUocmVzb3VyY2VLZXkpO1xyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjcmFmdEJvbnVzKSB7XHJcbiAgICBmb3IgKGNvbnN0IFttYXQsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoY29zdCkpIHtcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdCwgLXZhbCk7XHJcbiAgICB9XHJcbiAgICBpbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlS2V5LCBjcmFmdEJvbnVzKTtcclxuXHJcbn1cclxuLy8gQ3JhZnQgZnVuY3Rpb25cclxuZnVuY3Rpb24gY3JhZnRSZXNvdXJjZShyZXNvdXJjZUtleSkge1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlS2V5KSkgdGhyb3cgXCJJbnZhbGlkIGNyYWZ0IGZvciBtaXNzaW5nIHJlc291cmNlOiBcIiArIHJlc291cmNlS2V5O1xyXG5cclxuICAgIGlmICghY2FuQ3JhZnQocmVzb3VyY2VLZXkpKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgbGV0IGNyYWZ0Qm9udXMgPSBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSk7XHJcblxyXG5cclxuICAgIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjcmFmdEJvbnVzKTtcclxuXHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgcmVzb3VyY2VLZXkgKyBcIlZhbHVlXCIpLnRleHRDb250ZW50ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0udmFsdWUudG9GaXhlZCgyKTtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UpIGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlID0gdHJ1ZTtcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShyZXNvdXJjZUtleSk7XHJcbn1cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBpbmNyZWFzZU1hdGVyaWFsLFxyXG4gICAgc2V0TWF4LFxyXG4gICAgaW5jcmVhc2VNYXgsXHJcbiAgICBjcmFmdEFsbFJlc291cmNlcyxcclxuICAgIGNyYWZ0UmVzb3VyY2UsXHJcbiAgICB1cGRhdGVFbW9qaURpc3BsYXksXHJcbiAgICBnZW5lcmF0ZVRvb2x0aXBDb3N0LFxyXG4gICAgY2FsY1NlY29uZHNSZW1haW5pbmcsXHJcbiAgICBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zLFxyXG4gICAgY2FsY0luY3JlYXNlLFxyXG4gICAgdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzLFxyXG4gICAgY3JhZnRSZXNvdXJjZVF1YW50aXR5XHJcblxyXG59OyIsIi8vIERFUEVORFMgT046IHJlc291cmNlcy5qc1xyXG5jb25zdCB7IGNhbGNJbmNyZWFzZSwgdXBkYXRlRW1vamlEaXNwbGF5IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGFkZFRvb2wsIGdldEFsbFRvb2xzIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgYWxsVmlzaWJsZUJ1dHRvbnMsIHBvcHVsYXRlU2tpbGxzVGFibGUsIHNldFZpc2libGVCdXR0b24gfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmNvbnN0IHsgZ2V0QWxsUGVya3MsIGFkZFBlcmssIGhhc1BlcmssIHNlbGVjdEFiaWxpdHkgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGpvYkNvdW50cywgc2V0Q29ubmVjdGlvbnMsIGdldENvbm5lY3Rpb25zLCBkaXN0cmlidXRlV29ya2VycywgdXBkYXRlRGlzcGxheSB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgdG90YWxfdGltZSB9ID0gcmVxdWlyZSgnLi9tYWluJyk7XHJcbmNvbnN0IHsgc2V0QXRlRmlzaCwgZ2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcblxyXG5cclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbmNvbnN0IHsgcG9uZGVycyB9ID0gcmVxdWlyZShcIi4vanNvbi9wb25kZXJcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKFwiLi9qc29uL3NraWxsc1wiKTtcclxuY29uc3QgeyBnZXRBbGxTdGFnZXMgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nLCBsb2FkRmFjdG9yeSB9ID0gcmVxdWlyZSgnLi9mYWN0b3J5Jyk7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKCcuL3JlY2FsY01heENsb25lcycpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nTGlzdCB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuXHJcbi8vIGltcG9ydCBqb2JDb3VudHM7XHJcbi8qIFNBVklORyAqL1xyXG4vLyB2YXIgc2F2ZSA9IHtcclxuLy8gICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4vLyAgICAgY3JhZnRlZFJlc291cmNlczogY3JhZnRlZFJlc291cmNlcyxcclxuLy8gICAgIHNraWxsczogc2tpbGxzLFxyXG4vLyAgICAgcGxheWVyVG9vbHM6IHBsYXllclRvb2xzXHJcbi8vIH1cclxuXHJcbmZ1bmN0aW9uIHNhdmVHYW1lKCkge1xyXG4gICAgbGV0IHNhdmUgPSB7XHJcbiAgICAgICAgc2tpbGxzOiB7fSwgLy8gVGhpcyB3aWxsIGhvbGQgdGhlIGV4cGVyaWVuY2UgYW5kIGxldmVsIGZvciBlYWNoIHNraWxsXHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlczoge30sIC8vIFRoaXMgd2lsbCBob2xkIHRoZSB2YWx1ZSBmb3IgZWFjaCBjcmFmdGVkIGl0ZW1cclxuICAgICAgICByZXNvdXJjZXM6IHt9LFxyXG4gICAgICAgIHRvb2xzOiBbXSxcclxuICAgICAgICBzdGFnZXM6IFtdLFxyXG4gICAgICAgIHVubG9ja3M6IHt9LFxyXG4gICAgICAgIGpvYnM6IHt9LFxyXG4gICAgICAgIGJ1aWxkaW5nczoge30sXHJcbiAgICAgICAgdGltZToge30sXHJcbiAgICAgICAgYWxsVmlzaWJsZUJ1dHRvbnM6IFtdLFxyXG4gICAgICAgIG1lc3NhZ2U6IFtdLFxyXG4gICAgICAgIGNvbm5lY3Rpb25zOiBuZXcgTWFwKCksXHJcbiAgICAgICAgcGVya3M6IFtdLFxyXG4gICAgICAgIGZhY3Rvcmllczoge30sXHJcbiAgICAgICAgcHJlc3RpZ2U6IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEV4dHJhY3QgZXhwIGFuZCBsZXZlbCBmcm9tIHNraWxscyBhbmQgc2F2ZSB0byBzYXZlLnNraWxsc1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgc2F2ZS5za2lsbHNbc2tpbGxdID0ge1xyXG4gICAgICAgICAgICBleHA6IHNraWxsc1tza2lsbF0uZXhwLFxyXG4gICAgICAgICAgICBsZXZlbDogc2tpbGxzW3NraWxsXS5sZXZlbFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXh0cmFjdCB2YWx1ZSBmcm9tIGNyYWZ0ZWRSZXNvdXJjZXMgYW5kIHNhdmUgdG8gc2F2ZS5jcmFmdGVkSXRlbXNcclxuICAgIGZvciAobGV0IGl0ZW0gaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG4gICAgICAgIGlmICghc2F2ZS5jcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIHNhdmUuY3JhZnRlZFJlc291cmNlc1tpdGVtXSA9IHsgdmFsdWU6IDAsIGNyYWZ0ZWRPbmNlOiBmYWxzZSB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2F2ZS5jcmFmdGVkUmVzb3VyY2VzW2l0ZW1dLnZhbHVlID0gZ2V0Q3JhZnRlZFJlc291cmNlKGl0ZW0pO1xyXG4gICAgICAgIHNhdmUuY3JhZnRlZFJlc291cmNlc1tpdGVtXS5jcmFmdGVkT25jZSA9IGNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0uY3JhZnRlZE9uY2U7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGl0ZW0gaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGl0ZW0gZXhpc3RzIGluIHRoZSBzYXZlLnJlc291cmNlcyBvYmplY3QuIElmIG5vdCwgaW5pdGlhbGl6ZSBpdC5cclxuICAgICAgICBpZiAoIXNhdmUucmVzb3VyY2VzLmhhc093blByb3BlcnR5KGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIHNhdmUucmVzb3VyY2VzW2l0ZW1dID0geyB2YWx1ZTogMCwgbWF4OiAwIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzYXZlLnJlc291cmNlc1tpdGVtXS52YWx1ZSA9IGdldE1hdGVyaWFsKGl0ZW0sIHJlc291cmNlcyk7XHJcbiAgICAgICAgc2F2ZS5yZXNvdXJjZXNbaXRlbV0ubWF4ID0gcmVzb3VyY2VzW2l0ZW1dLm1heDtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlLnRvb2xzID0gZ2V0QWxsVG9vbHMoKTtcclxuICAgIHNhdmUuc3RhZ2VzID0gZ2V0QWxsU3RhZ2VzKCk7XHJcbiAgICBzYXZlLmpvYnMgPSBqb2JDb3VudHM7XHJcbiAgICBzYXZlLnBlcmtzID0gZ2V0QWxsUGVya3MoKTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBzYXZlLmNvbm5lY3Rpb25zID0gQXJyYXkuZnJvbShnZXRDb25uZWN0aW9ucygpLmVudHJpZXMoKSk7XHJcblxyXG4gICAgZm9yIChsZXQgdSBpbiBwb25kZXJzKSB7XHJcbiAgICAgICAgc2F2ZS51bmxvY2tzW3VdID0gaXNQb25kZXJlZCh1KTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBiIGluIGJ1aWxkaW5ncykge1xyXG4gICAgICAgIHNhdmUuYnVpbGRpbmdzW2JdID0gYnVpbGRpbmdzW2JdLmNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKGFsbFZpc2libGVCdXR0b25zLnZhbHVlcygpKTtcclxuICAgIGZvciAobGV0IGEgaW4gYWxsVmlzaWJsZUJ1dHRvbnMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhhKTtcclxuICAgICAgICBzYXZlLmFsbFZpc2libGVCdXR0b25zLnB1c2goYSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2F2ZS5hbGxWaXNpYmxlQnV0dG9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFRleHRGcm9tSFRNTChodG1sU3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWxTdHJpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gZGl2LnRleHRDb250ZW50O1xyXG4gICAgICAgIGNvbnN0IHNwYW5UZXh0ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKS50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt0ZXh0Q29udGVudCwgc3BhblRleHRdO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmcpKSB7XHJcbiAgICAgICAgc2F2ZS5mYWN0b3JpZXNba2V5XSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBodG1sU3RyaW5nID0gcmVxdWlyZSgnLi9tYWluJykuZ2V0TWVzc2FnZSgpLmlubmVySFRNTDtcclxuXHJcbiAgICBzYXZlLm1lc3NhZ2UgPSBleHRyYWN0VGV4dEZyb21IVE1MKGh0bWxTdHJpbmcpOyAvLyBbbWVzc2FnZSwgc3Bhbl1cclxuXHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHByZXN0aWdlKSkge1xyXG4gICAgICAgIHNhdmUucHJlc3RpZ2Vba2V5XSA9IHsgY29zdDogdmFsLmNvc3QsIGxldmVsOiB2YWwubGV2ZWwgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhjb21iaW5lZFRleHQpOyAvLyBcIllvdSBmaW5kIHlvdXJzZWxmIGFsb25lIGluIGEgZm9yZXN0XCJcclxuICAgIC8vIGNvbnNvbGUubG9nKHNwYW5UZXh0KTsgLy8gXCJhbG9uZVwiXHJcblxyXG5cclxuICAgIHNhdmUudGltZVsndG90YWxfdGltZSddID0gdG90YWxfdGltZTtcclxuICAgIHNhdmUudGltZVsndGltZV9vZl9zYXZlJ10gPSBEYXRlLm5vdygpO1xyXG4gICAgLy8gWW91IGNhbiBub3cgdXNlIHRoZSBzYXZlIG9iamVjdCB0byBzdG9yZSB0aGUgZGF0YSBzb21ld2hlcmUgb3IgZGlzcGxheSBpdCB0byB0aGUgdXNlclxyXG5cclxuICAgIGNvbnNvbGUubG9nKHNhdmUpO1xyXG4gICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoc2F2ZSkpO1xyXG5cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic2F2ZVwiLCBKU09OLnN0cmluZ2lmeShzYXZlKSk7XHJcbiAgICByZXR1cm4gc2F2ZTtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBsb2FkR2FtZSgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBHYW1lXCIpO1xyXG4gICAgdmFyIHNhdmVnYW1lID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNhdmVcIikpO1xyXG4gICAgY29uc29sZS5sb2coc2F2ZWdhbWUpO1xyXG4gICAgaWYgKHNhdmVnYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgLy8gTkVXIEdBTUVcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnJlc291cmNlcyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gc2F2ZWdhbWUucmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChpLnZhbHVlT2YoKSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpID09PSBudWxsKSBjb250aW51ZTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW2ldLnZhbHVlID0gc2F2ZWdhbWUucmVzb3VyY2VzW2ldLnZhbHVlO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbaV0ubWF4ID0gc2F2ZWdhbWUucmVzb3VyY2VzW2ldLm1heDtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVcGRhdGluZyByZXNvdXJjZXMgZm9yIFwiICsgaSArIFwiIHRvIFwiICsgc2F2ZWdhbWUucmVzb3VyY2VzW2ldLnZhbHVlLCBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0ubWF4KTtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1tpXS52YWx1ZSAhPSAwKSByZXF1aXJlKCcuL3NpZGViYXInKS51cGRhdGVEaXNwbGF5VmFsdWUoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuc2tpbGxzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gc2F2ZWdhbWUuc2tpbGxzKSB7XHJcbiAgICAgICAgICAgIHNraWxsc1tpXS5leHAgPSBzYXZlZ2FtZS5za2lsbHNbaV0uZXhwO1xyXG4gICAgICAgICAgICBza2lsbHNbaV0ubGV2ZWwgPSBzYXZlZ2FtZS5za2lsbHNbaV0ubGV2ZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlcyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBvZiBPYmplY3Qua2V5cyhzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9hZGluZyBjcmFmdGVkJywga2V5LCBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzW2tleV0sIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XSk7XHJcbiAgICAgICAgICAgIGlmICghY3JhZnRlZFJlc291cmNlc1trZXldKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlID0gc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZSkpIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS5jcmFmdGVkT25jZSA9IHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXNba2V5XS5jcmFmdGVkT25jZTtcclxuICAgICAgICAgICAgcmVxdWlyZSgnLi9zaWRlYmFyJykudXBkYXRlRGlzcGxheVZhbHVlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUudG9vbHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gcGxheWVyVG9vbHMgPSBzYXZlZ2FtZS50b29scztcclxuICAgICAgICAvLyBVbmlvbiB0aGUgdG9vbCBsaXN0cyB0b2dldGhlclxyXG4gICAgICAgIGxldCB1bmlvbiA9IFsuLi5uZXcgU2V0KFsuLi5nZXRBbGxUb29scygpLCAuLi5zYXZlZ2FtZS50b29sc10pXTtcclxuICAgICAgICAvLyBwbGF5ZXJUb29scyA9IHVuaW9uO1xyXG4gICAgICAgIGZvciAobGV0IHRvb2wgaW4gdW5pb24pIHtcclxuICAgICAgICAgICAgYWRkVG9vbCh0b29sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZvciAobGV0IHQgaW4gcGxheWVyVG9vbHMpIHtcclxuICAgICAgICAvLyAgICAgdXBkYXRlVG9vbFVJKHBsYXllclRvb2xzW3RdKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5zdGFnZXMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgcyBpbiBzYXZlZ2FtZS5zdGFnZXMpIHtcclxuICAgICAgICAgICAgbWFrZVZpc2libGUoc2F2ZWdhbWUuc3RhZ2VzW3NdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmpvYnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gam9iQ291bnRzID0gc2F2ZWdhbWUuam9icztcclxuICAgICAgICBmb3IgKGxldCBqIGluIHNhdmVnYW1lLmpvYnMpIHtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pdID0gc2F2ZWdhbWUuam9ic1tqXTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaik7XHJcbiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS51bmxvY2tzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAobGV0IHUgaW4gc2F2ZWdhbWUudW5sb2Nrcykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcG9uZGVyc1t1XS5pc1BvbmRlcmVkID0gc2F2ZWdhbWUudW5sb2Nrc1t1XTtcclxuXHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ09sZCBzYXZlIGRhdGEgaW5jbHVkZXMgb2Jzb2xldGUgcG9uZGVyJywgdSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ3NraWxsc1RhYmxlJykpIHtcclxuICAgICAgICBwb3B1bGF0ZVNraWxsc1RhYmxlKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmJ1aWxkaW5ncyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCBiIGluIHNhdmVnYW1lLmJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhiLCBzYXZlZ2FtZS5idWlsZGluZ3NbYl0pO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRpbmdzW2JdLmNvdW50ID0gc2F2ZWdhbWUuYnVpbGRpbmdzW2JdO1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGJ1dHRvbiB0ZXh0XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVpbGRpbmdzW2JdLmNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYiwgYnVpbGRpbmdzW2JdLmNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjb3N0cyBvZiBhbGwgdGhlIGJ1aWxkaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGIsIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIG1heCBhcyBpbmZsdWVuY2VkIGJ5IHRoaXMgYnVpbGRpbmdcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IERvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBidWlsZGluZyBib29zdHNcclxuICAgICAgICAgICAgICAgIC8vIGlmIChidWlsZGluZ3NbYl0uZWZmZWN0cykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGZvciAobGV0IG1hdCBpbiBidWlsZGluZ3NbYl0uZWZmZWN0cykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBzZXRNYXgobWF0LCBidWlsZGluZ3NbYl0uY291bnQgKiBidWlsZGluZ3NbYl0uZWZmZWN0c1ttYXRdKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2Vycm9yIHdpdGggYnVpbGRpbmcnLCBiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWZ0ZXIgcG9uZGVycyBhbmQgYnVpbGRpbmdzIHdlIGNhbiByZWNhbGN1bGF0ZSBtYXggY2xvbmVzXHJcbiAgICByZWNhbGNNYXhDbG9uZXMoKTtcclxuICAgIHVwZGF0ZUJ1aWxkaW5nTGlzdCgpO1xyXG5cclxuXHJcbiAgICAvLyBJZiB3ZSBoYXZlIGEgY2xvbmUsIHRoZW4gd2UgYXRlIGZpc2hcclxuICAgIHNldEF0ZUZpc2gocmVzb3VyY2VzLmNsb25lcy5tYXggPj0gMSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnYXRlZmlzaCcsIGF0ZUZpc2gpO1xyXG4gICAgaWYgKGdldEF0ZUZpc2goKSkge1xyXG4gICAgICAgIGNvbnN0IGZpc2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VhdEZpc2hcIik7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGZpc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuICAgIC8vIENoYW5nZSB0aGUgbWVzc2FnZSB0byB0aGUgbGF0ZXN0IG9uZVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5tZXNzYWdlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIC8vIFtmdWxsIG1lc3NhZ2UsIHNwYW5dXHJcbiAgICAgICAgcmVxdWlyZSgnLi9tYWluJykuY2hhbmdlTWVzc2FnZShzYXZlZ2FtZS5tZXNzYWdlWzBdLCBzYXZlZ2FtZS5tZXNzYWdlWzFdKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIENhbGN1bGF0ZSByZXNvdXJjZXMgZWFybmVkIHdoaWxlIGF3YXlcclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUudGltZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXF1aXJlKCcuL21haW4nKS5zZXRUb3RhbFRpbWUoc2F2ZWdhbWUudGltZVt0b3RhbF90aW1lXSk7XHJcbiAgICAgICAgY29uc3QgdGltZV9kaWZmZXJlbmNlID0gRGF0ZS5ub3coKSAtIHNhdmVnYW1lLnRpbWVbJ3RpbWVfb2Zfc2F2ZSddO1xyXG4gICAgICAgIGZvciAobGV0IHIgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluYyA9IGNhbGNJbmNyZWFzZShyLCB0aW1lX2RpZmZlcmVuY2UpO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbcl0udmFsdWUgKz0gaW5jO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyLCB0aW1lX2RpZmZlcmVuY2UsIGluYyk7XHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcl0udmFsdWUgPiByZXNvdXJjZXNbcl0ubWF4KSByZXNvdXJjZXNbcl0udmFsdWUgPSByZXNvdXJjZXNbcl0ubWF4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmFsbFZpc2libGVCdXR0b25zICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHNhdmVnYW1lLmFsbFZpc2libGVCdXR0b25zKTtcclxuICAgICAgICBmb3IgKGxldCBhIGluIHNhdmVnYW1lLmFsbFZpc2libGVCdXR0b25zKSB7XHJcbiAgICAgICAgICAgIHNldFZpc2libGVCdXR0b24oYSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmNvbm5lY3Rpb25zICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHNldENvbm5lY3Rpb25zKG5ldyBNYXAoc2F2ZWdhbWUuY29ubmVjdGlvbnMpKTtcclxuXHJcbiAgICAgICAgaWYgKGdldENvbm5lY3Rpb25zKCkuc2l6ZSA9PT0gMCkgc2V0Q29ubmVjdGlvbnMobmV3IE1hcCgpKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhnZXRDb25uZWN0aW9ucygpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZm9yIChsZXQgam9iIGluIGpvYkNvdW50cykge1xyXG4gICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKGpvYiwgam9iQ291bnRzW2pvYl0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUVtb2ppRGlzcGxheSgpO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUucGVya3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gbXlQZXJrcyA9IHNhdmVnYW1lLnBlcmtzO1xyXG4gICAgICAgIGZvciAobGV0IFtpLCBwZXJrXSBvZiBPYmplY3QuZW50cmllcyhzYXZlZ2FtZS5wZXJrcykpIHtcclxuICAgICAgICAgICAgYWRkUGVyayhwZXJrKTtcclxuICAgICAgICAgICAgcmVxdWlyZSgnLi9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbicpLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKHBlcmspO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmZhY3RvcmllcyAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHNhdmVnYW1lLmZhY3RvcmllcykpXHJcbiAgICAgICAgICAgIGlmICh2YWwgPiAwKVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWw7ICsraSlcclxuICAgICAgICAgICAgICAgICAgICBsb2FkRmFjdG9yeShrZXkpO1xyXG5cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnByZXN0aWdlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhzYXZlZ2FtZS5wcmVzdGlnZSkpIHtcclxuXHJcbiAgICAgICAgICAgIHByZXN0aWdlW2tleV0uY29zdCA9IHZhbFsnY29zdCddO1xyXG4gICAgICAgICAgICBwcmVzdGlnZVtrZXldLmxldmVsID0gdmFsWydsZXZlbCddO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG4vLyBzYXZlIHRoZSB0aW1lIHdoZW4gdGhlIHBsYXllciBleGl0cyB0aGUgYnJvd3NlciB0YWJcclxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgKCkgPT4gc2F2ZUdhbWUoKSk7XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2F2ZUdhbWUsXHJcbiAgICBsb2FkR2FtZVxyXG59OyIsIi8qKlxyXG4gKiBTZWxlY3QgdGhlIHBlcmsgYnV0dG9uIHRoYXQgd2UndmUgY2hvc2VuIGFuZCBkaXNhYmxlIHRoZSBvdGhlcnNcclxuICogQHBhcmFtIHtzdHJpbmd9IGFiaWxpdHlOYW1lIE5hbWUgb2YgdGhlIGNob3NlbiBwZXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBzZWxlY3RDb3JyZWN0UGVya0J1dHRvbihhYmlsaXR5TmFtZSkge1xyXG4gICAgLy8gRGlzYWJsZSBhbGwgYnV0dG9uc1xyXG4gICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGllck9uZUJ1dHRvbicpO1xyXG4gICAgbGV0IHNlbGVjdGVkQnV0dG9uO1xyXG4gICAgdHJ5IHsgc2VsZWN0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHthYmlsaXR5TmFtZX1QZXJrYCk7IH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICBpZiAoc2VsZWN0ZWRCdXR0b24pIHtcclxuICAgICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBFbmFibGUgYW5kIGhpZ2hsaWdodCB0aGUgc2VsZWN0ZWQgYnV0dG9uXHJcbiAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWRCdXR0b24sIGFiaWxpdHlOYW1lKTtcclxuICAgICAgICBzZWxlY3RlZEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgc2VsZWN0ZWRCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBidXR0b24gZm91bmQgd2l0aCBhYmlsaXR5IG5hbWU6ICcgKyBhYmlsaXR5TmFtZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zZWxlY3RDb3JyZWN0UGVya0J1dHRvbiA9IHNlbGVjdENvcnJlY3RQZXJrQnV0dG9uOyIsImNvbnN0IHsgY2FsY0luY3JlYXNlIH0gPSByZXF1aXJlKFwiLi9jYWxjSW5jcmVhc2VcIik7XHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9nZXRNYXRlcmlhbFwiKTtcclxuY29uc3QgeyBnZXRNYXggfSA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcmVzb3VyY2VzXCIpO1xyXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiB0b2dnbGVHcm91cFZpc2liaWxpdHkoZ3JvdXBOYW1lKSB7XHJcbiAgICBjb25zdCBncm91cCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBncm91cC0ke2dyb3VwTmFtZX1gKTtcclxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB0b2dnbGUtJHtncm91cE5hbWV9YCk7IC8vIEVuc3VyZSB5b3UgaGF2ZSB0aGlzIGJ1dHRvbiB3aXRoIHRoZSBpZCAndG9nZ2xlLWdyb3VwTmFtZSdcclxuXHJcbiAgICBBcnJheS5mcm9tKGdyb3VwLmNoaWxkcmVuKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdQJykgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZSBncm91cCBpcyBjdXJyZW50bHkgaGlkZGVuXHJcbiAgICBpZiAodG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnYXJyb3ctZG93bicpKSB7XHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Fycm93LWRvd24nKTtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYXJyb3ctcmlnaHQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Fycm93LXJpZ2h0Jyk7XHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Fycm93LWRvd24nKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGdyb3VwIGNvbnRhaW5lclxyXG5mdW5jdGlvbiBjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyKGdyb3VwTmFtZSkge1xyXG4gICAgY29uc3QgZ3JvdXBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGdyb3VwQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdyZXNvdXJjZUdyb3VwJztcclxuICAgIGdyb3VwQ29udGFpbmVyLmlkID0gYGdyb3VwLSR7Z3JvdXBOYW1lfWA7XHJcblxyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICB0b2dnbGVCdXR0b24udGV4dENvbnRlbnQgPSBncm91cE5hbWUudG9VcHBlckNhc2UoKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdG9nZ2xlR3JvdXBWaXNpYmlsaXR5KGdyb3VwTmFtZSk7XHJcbiAgICB0b2dnbGVCdXR0b24uY2xhc3NOYW1lID0gJ3RvZ2dsZS1idXR0b24gYXJyb3ctZG93bic7XHJcbiAgICB0b2dnbGVCdXR0b24uaWQgPSBgdG9nZ2xlLSR7Z3JvdXBOYW1lfWA7XHJcblxyXG4gICAgZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQodG9nZ2xlQnV0dG9uKTtcclxuICAgIHJldHVybiBncm91cENvbnRhaW5lcjtcclxufVxyXG5cclxuXHJcblxyXG4vLyBJdGVyYXRlcyBvdmVyIGVhY2ggZ3JvdXAgYW5kIHJlc291cmNlIHRvIGNyZWF0ZSB0YWdzXHJcbmZ1bmN0aW9uIGluaXRpYWxpemVSZXNvdXJjZVRhZ3Mod2l0aEdyb3Vwcykge1xyXG4gICAgLy8gaWYgKGlzUG9uZGVyZWQoJ29yZ2FuaXphdGlvbicpKSB3aXRoR3JvdXBzID0gdHJ1ZTtcclxuICAgIGNvbnNvbGUubG9nKFwiaW5pdGlhbHppbmcgcmVzb3VyY2UgdGFnc1wiKTtcclxuICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICAgIC8vIERlZmluZSBncm91cHMgZm9yIHlvdXIgcmVzb3VyY2VzXHJcbiAgICBjb25zdCByZXNvdXJjZUdyb3VwcyA9IHtcclxuICAgICAgICAnc3BlY2lhbCc6IFsnY2xvbmVzJywgJ2h1c2tzJywgJ3BvbmRlciddLFxyXG4gICAgICAgIGJhc2ljczogWydzdGlja3MnLCAnYmVycmllcycsICdmaXNoJywgJ2dhbWUnLCAnd2hlYXQnLCAnZnJlc2h3YXRlciddLFxyXG4gICAgICAgIG1hdGVyaWFsczogWyd3b29kJywgJ3NhbmQnLCAnY2xheScsICd2aW5lcycsICdyb2NrcycsICdoaWRlcycsICdoZXJicyddLFxyXG4gICAgICAgIHRvb2xzOiBbJ3NoYXJwcm9ja3MnLCAncm9wZScsICdoYW5kbGUnLCAnZmlzaGluZ3JvZCcsICdwaWNrYXhlJywgJ2F4ZScsICdzcGVhcicsICdzdGFmZiddLFxyXG4gICAgICAgIGFkdmFuY2VkOiBbJ2dsYXNzJywgJ3BhcGVyJywgJ2NyYXRlcycsICdtZWRpY2luZScsICdsZWF0aGVyJ10sXHJcbiAgICAgICAgbWV0YWw6IFsnb3JlJywgJ2dvbGQnLCAnaXJvbicsICdzaWx2ZXInLCAnc3RlZWwnXSxcclxuICAgICAgICBjb25zdHJ1Y3Rpb246IFsnYnJpY2tzJywgJ2JlYW1zJywgJ25haWxzJywgJ3NsYWJzJywgJ2NvbmNyZXRlJ10sXHJcbiAgICAgICAgLy8gLi4uIEFkZCBvdGhlciBncm91cHMgYXMgbmVjZXNzYXJ5XHJcbiAgICB9O1xyXG4gICAgZm9yIChsZXQgW2dyb3VwTmFtZSwgZ3JvdXBPZlJlc291cmNlc10gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VHcm91cHMpKSB7XHJcblxyXG4gICAgICAgIGdyb3VwT2ZSZXNvdXJjZXMuZm9yRWFjaChyZXNvdXJjZU5hbWUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlLScgKyByZXNvdXJjZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF3aXRoR3JvdXBzKSBncm91cE5hbWUgPSBudWxsOyAvLyBTZXQgZ3JvdXAgdG8gcmVzb3VyY2VzXHJcblxyXG4gICAgICAgICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHBhcmVudEVsZW1lbnQgPSBjcmVhdGVSZXNvdXJjZVRhZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhcmVudEVsZW1lbnQpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIGVsZW1lbnQgaWYgd2Ugc2hvdWxkLCBvdGhlcndpc2UgY3JlYXRlIGEgcmVzb3VyY2UgdGFnXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc291cmNlTmFtZSwgc2hvdWxkSGlkZShyZXNvdXJjZU5hbWUpLCBnZXRNYXRlcmlhbChyZXNvdXJjZU5hbWUpKTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZEhpZGUocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2hvdWxkSGlkZSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG91bGRIaWRlKHJlc291cmNlTmFtZSkge1xyXG5cclxuICAgIHZhciBzaG91bGRIaWRlID0gdHJ1ZTtcclxuICAgIC8vIGZvciAobGV0IGMgaW4gcGFyZW50RWxlbWVudC5jbGFzc0xpc3QpIHtcclxuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZygnaGFzIHBhc3NlZCcsIHJlc291cmNlTmFtZSwgcGFzc2VkU3RhZ2UoYykpO1xyXG4gICAgLy8gICAgIGlmIChyZXF1aXJlKCcuL3N0YWdlcycpLnBhc3NlZFN0YWdlKGMpKSB7IHNob3VsZEhpZGUgPSBmYWxzZTsgY29uc29sZS5sb2coJ2RvbnQgaGlkZScsIHJlc291cmNlTmFtZSwgYyk7IH1cclxuICAgIC8vIH1cclxuXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKSA+IDApIHtcclxuICAgICAgICBzaG91bGRIaWRlID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHJlc291cmNlc1tyZXNvdXJjZU5hbWVdKSByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlc291cmNlc1tyZXNvdXJjZU5hbWVdICYmIHJlc291cmNlc1tyZXNvdXJjZU5hbWVdLmlzVmlzaWJsZSkgeyBzaG91bGRIaWRlID0gZmFsc2U7IH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnc2hvdWxkIGhpZGU/JywgcmVzb3VyY2VOYW1lLCBzaG91bGRIaWRlKTtcclxuICAgIHJldHVybiBzaG91bGRIaWRlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gYWJicmV2aWF0ZU51bWJlcihudW0pIHtcclxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgdW5pdCkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwKSByZXR1cm4gcm91bmRUb0RlY2ltYWxzKHZhbHVlLCAyKSArIHVuaXQ7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMTAwKSByZXR1cm4gcm91bmRUb0RlY2ltYWxzKHZhbHVlLCAxKSArIHVuaXQ7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMTAwMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMCkgKyB1bml0O1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKSArIHVuaXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcm91bmRUb0RlY2ltYWxzKG51bWJlciwgZGVjaW1hbHMpIHtcclxuICAgICAgICBjb25zdCBmYWN0b3IgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xyXG4gICAgICAgIHJldHVybiAoTWF0aC5yb3VuZChudW1iZXIgKiBmYWN0b3IpIC8gZmFjdG9yKS50b0ZpeGVkKGRlY2ltYWxzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobnVtIDwgMWUzKSByZXR1cm4gcm91bmRUb0RlY2ltYWxzKG51bSwgMSk7IC8vIElmIGxlc3MgdGhhbiAxLDAwMFxyXG4gICAgaWYgKG51bSA8IDFlNikgcmV0dXJuIGZvcm1hdChudW0gLyAxZTMsICdLJyk7IC8vIFRob3VzYW5kc1xyXG4gICAgaWYgKG51bSA8IDFlOSkgcmV0dXJuIGZvcm1hdChudW0gLyAxZTYsICdNJyk7IC8vIE1pbGxpb25zXHJcbiAgICBpZiAobnVtIDwgMWUxMikgcmV0dXJuIGZvcm1hdChudW0gLyAxZTksICdCJyk7IC8vIEJpbGxpb25zXHJcbiAgICAvLyBBZGQgbW9yZSBjYXNlcyBmb3IgbGFyZ2VyIG51bWJlcnMgaWYgbmVlZGVkXHJcblxyXG4gICAgaWYgKG51bSA9PT0gSW5maW5pdHkpIG51bSA9ICfiiJ4nO1xyXG4gICAgcmV0dXJuIG51bS50b1N0cmluZygpO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgcmVzb3VyY2UgY291bnQgYW5kIG1heGVzIG9mIGFsbCByZXNvdXJjZXNcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVTaWRlYmFyKCkge1xyXG4gICAgY29uc3QgYWxsTWF0ZXJpYWxzID0gcmVxdWlyZSgnLi9mYWN0b3J5JykuYWxsTWF0ZXJpYWxzO1xyXG4gICAgQXJyYXkuZnJvbShhbGxNYXRlcmlhbHMpLmZvckVhY2gociA9PiB7IGlmIChyZXNvdXJjZXNbcl0pIHVwZGF0ZURpc3BsYXlWYWx1ZShyKTsgfSk7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZm9yIChjb25zdCBbaW5kZXgsIHJlc291cmNlTmFtZV0gb2YgT2JqZWN0LmVudHJpZXMoYWxsTWF0ZXJpYWxzKSkge1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZS0nICsgcmVzb3VyY2VOYW1lKTtcclxuICAgICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHsgY29uc29sZS53YXJuKCdubyBwYXJlbnQgZWxlbWVudCBmb3VuZCBmb3InLCByZXNvdXJjZU5hbWUpOyByZXR1cm47IH1cclxuXHJcbiAgICAgICAgaWYgKHNob3VsZEhpZGUocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpc3BsYXlFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVzb3VyY2VOYW1lICsgJ1ZhbHVlJyk7XHJcbiAgICAgICAgaWYgKGRpc3BsYXlFbGVtKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGFiYnJldmlhdGVOdW1iZXIocmVzb3VyY2VEYXRhKSk7XHJcbiAgICAgICAgICAgIHZhciBjb2xvciA9ICcjZmZmJztcclxuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgbWF4ID0gZ2V0TWF4KHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSBtYXgpIGNvbG9yID0gJyNmY2MnO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgZWxzZSBpZiAoYW1vdW50IC8gbWF4ID4gLjYpIGNvbG9yID0gJyNlZWInO1xyXG5cclxuICAgICAgICAgICAgZGlzcGxheUVsZW0uaW5uZXJIVE1MID0gYDxzcGFuIHN0eWxlPVwiY29sb3I6JHtjb2xvcn1cIj4ke2FiYnJldmlhdGVOdW1iZXIoYW1vdW50KX0gLyAke2FiYnJldmlhdGVOdW1iZXIobWF4KX0gPC9zcGFuPmA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIENyZWF0ZSBhbGwgb3VyIHJlc291cmNlIHRhZ3MgaW4gdGhlIHNpZGViYXJcclxuY29uc3QgcmVzb3VyY2VzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG5mdW5jdGlvbiBjcmVhdGVSZXNvdXJjZVRhZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSkge1xyXG4gICAgLy8gaWYgKCFyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VOYW1lKSkgdGhyb3cgXCJJbnZhbGlkIHJlc291cmNlOiBcIiArIHJlc291cmNlTmFtZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgcmVzb3VyY2UgdGFnIGZvciBcIiwgcmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgbGV0IGdyb3VwQ29udGFpbmVyO1xyXG4gICAgaWYgKGdyb3VwTmFtZSkge1xyXG4gICAgICAgIGdyb3VwQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgICAgIGlmICghZ3JvdXBDb250YWluZXIpIHtcclxuICAgICAgICAgICAgZ3JvdXBDb250YWluZXIgPSBjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyKGdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgIHJlc291cmNlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChncm91cENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhcHBlbmRpbmcnLCBncm91cENvbnRhaW5lciwgcmVzb3VyY2VzQ29udGFpbmVyLCByZXNvdXJjZXNDb250YWluZXIuY2hpbGRFbGVtZW50Q291bnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGdyb3VwQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKGdyb3VwQ29udGFpbmVyKTtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZURpc3BsYXlOYW1lID0gY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSkuc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmNsYXNzTmFtZSA9IGByZXNvdXJjZWA7XHJcbiAgICByZXNvdXJjZUVsZW1lbnQuaWQgPSBgcmVzb3VyY2UtJHtyZXNvdXJjZU5hbWV9YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VOYW1lU3Bhbi5jbGFzc05hbWUgPSAncmVzb3VyY2VOYW1lJztcclxuICAgIHJlc291cmNlTmFtZVNwYW4udGV4dENvbnRlbnQgPSBgJHtyZXNvdXJjZURpc3BsYXlOYW1lfTpgO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlVmFsdWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4uY2xhc3NOYW1lID0gJ3Jlc291cmNlVmFsdWUnO1xyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4uaWQgPSBgJHtyZXNvdXJjZU5hbWV9VmFsdWVgO1xyXG4gICAgbGV0IG1heCA9IChnZXRNYXgocmVzb3VyY2VOYW1lKSAmJiBnZXRNYXgocmVzb3VyY2VOYW1lKSA8IEluZmluaXR5KSA/IGdldE1heChyZXNvdXJjZU5hbWUpLnRvRml4ZWQoMikgOiAn4oieJztcclxuXHJcbiAgICByZXNvdXJjZVZhbHVlU3Bhbi50ZXh0Q29udGVudCA9IGAke2dldE1hdGVyaWFsKHJlc291cmNlTmFtZSkudG9GaXhlZCgyKX0gLyAke21heH1gO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlUmF0ZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICByZXNvdXJjZVJhdGVTcGFuLmNsYXNzTmFtZSA9ICdyZXNvdXJjZVJhdGUnO1xyXG4gICAgcmVzb3VyY2VSYXRlU3Bhbi5pbm5lckhUTUwgPSBgKCtcclxuICAgICAgICAgICAgPHNwYW4gaWQ9XCIke3Jlc291cmNlTmFtZX1JbmNyZWFzZVJhdGVcIj4wPC9zcGFuPi9zKWA7XHJcblxyXG4gICAgcmVzb3VyY2VFbGVtZW50LmFwcGVuZENoaWxkKHJlc291cmNlTmFtZVNwYW4pO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmFwcGVuZENoaWxkKHJlc291cmNlVmFsdWVTcGFuKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZVJhdGVTcGFuKTtcclxuXHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZChyZXNvdXJjZUVsZW1lbnQpO1xyXG5cclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIG9yZGVyaW5nXHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBvcmRlciBvZiBhIHJlc291cmNlXHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VSZXNvdXJjZU9yZGVyKHJlc291cmNlSWQsIG5ld09yZGVyKSB7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyZXNvdXJjZUlkKTtcclxuICAgICAgICBpZiAocmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgcmVzb3VyY2Uuc3R5bGUub3JkZXIgPSBuZXdPcmRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1jbG9uZXNcIiwgMSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utc3RpY2tzXCIsIDIpOyAvLyBNb3ZlIFwiU3RpY2tzXCIgdG8gb3JkZXIgMlxyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXZpbmVzXCIsIDMpOyAvLyBNb3ZlIFwiVmluZXNcIiB0byBvcmRlciAzXHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utcm9ja3NcIiwgNCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZmlzaFwiLCA1KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1mcmVzaHdhdGVyXCIsIDYpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXdvb2RcIiwgNyk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utb3JlXCIsIDgpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXNhbmRcIiwgOSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtY2xheVwiLCAxMCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utd2hlYXRcIiwgMTEpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWhpZGVzXCIsIDEyKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1nYW1lXCIsIDEzKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1oZXJic1wiLCAxNCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtYmVycmllc1wiLCAxNSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtcG9uZGVyXCIsIDUwKTtcclxuXHJcbiAgICByZXR1cm4gcmVzb3VyY2VFbGVtZW50O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICB1cGRhdGVTaWRlYmFyLFxyXG4gICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncyxcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZVxyXG59O1xyXG4vKipcclxuICogVXBkYXRlcyB0aGUgZGlzcGxheSB2YWx1ZSBvZiBvbmUgcmVzb3VyY2UsIGEgc3BlY2lmaWMgdXBkYXRlU2lkZWJhcigpXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gcmVzb3VyY2VzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCMke21hdGVyaWFsfVZhbHVlYCk7XHJcbiAgICBjb25zdCBlbGVtZW50SW5jcmVhc2UgPSByZXNvdXJjZXNDb250YWluZXIucXVlcnlTZWxlY3RvcihgIyR7bWF0ZXJpYWx9SW5jcmVhc2VSYXRlYCk7XHJcbiAgICAvLyBjb25zdCBjcmFmdGVkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYnV0dG9uI2NyYWZ0JHtjYXBpdGFsaXplRmlyc3QobWF0ZXJpYWwpfWApO1xyXG4gICAgLy8gdHJ5IHsgaWYgKCFlbGVtZW50KSBjcmVhdGVSZXNvdXJjZVRhZyhtYXRlcmlhbCk7IH1cclxuICAgIC8vIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhtYXRlcmlhbCwgZWxlbWVudCwgY3JhZnRlZEJ1dHRvbik7XHJcbiAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGxldCBtYXggPSAoZ2V0TWF4KG1hdGVyaWFsKSAmJiBnZXRNYXgobWF0ZXJpYWwpIDwgSW5maW5pdHkpID8gZ2V0TWF4KG1hdGVyaWFsKS50b0ZpeGVkKDEpIDogJ+KInic7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHtnZXRNYXRlcmlhbChtYXRlcmlhbCkudG9GaXhlZCgxKX0gLyAke21heH1gO1xyXG5cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnRJbmNyZWFzZSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudEluY3JlYXNlLnRleHRDb250ZW50ID0gY2FsY0luY3JlYXNlKG1hdGVyaWFsLCAxMDAwKS50b0ZpeGVkKDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1hdGVyaWFsLCBzaG91bGRIaWRlKG1hdGVyaWFsKSwgZ2V0TWF0ZXJpYWwobWF0ZXJpYWwpKTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZEhpZGUobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVsZW1lbnQsIG1hdGVyaWFsLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXS5pc0dldHRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIikucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyBtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGlmIChjcmFmdGVkQnV0dG9uKSB7XHJcbiAgICAvLyAgICAgY29uc3QgY291bnRTcGFuID0gY3JhZnRlZEJ1dHRvbi5xdWVyeVNlbGVjdG9yKGAjJHttYXRlcmlhbH1WYWx1ZWApO1xyXG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKCdjcmFmdGVkIGJ1dHRvbiB3YXMgZm91bmQnLCBjb3VudFNwYW4sIG1hdGVyaWFsLCBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwpKTtcclxuICAgIC8vICAgICBpZiAoY291bnRTcGFuKSBjb3VudFNwYW4udGV4dENvbnRlbnQgPSBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwpLnRvRml4ZWQoMCk7XHJcbiAgICAvLyAgICAgZWxzZSBjb25zb2xlLndhcm4oYFJlc291cmNlIGJ1dHRvbiBmb3VuZCBidXQgbm8gY291bnQgc3BhbiBmb3I6ICR7bWF0ZXJpYWx9YCk7XHJcbiAgICAvLyB9XHJcbn1cclxuIiwibGV0IHN0YWdlcyA9IFtdO1xyXG5mdW5jdGlvbiBzZXRTdGFnZShzdGFnZSkge1xyXG4gICAgc3RhZ2VzLnB1c2goc3RhZ2UpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2UgU3RhZ2UgdG8gY2hlY2tcclxuICogQHJldHVybnMgYm9vbGVhbiBpZiBzdGFnZSBpbiBzdGFnZXNcclxuICovXHJcbmZ1bmN0aW9uIHBhc3NlZFN0YWdlKHN0YWdlKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdGFnZXMpLmluY2x1ZGVzKHN0YWdlKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBbGxTdGFnZXMoKSB7XHJcbiAgICByZXR1cm4gc3RhZ2VzO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFN0YWdlcygpIHtcclxuICAgIHdoaWxlIChzdGFnZXMubGVuZ3RoID4gMClcclxuICAgICAgICBzdGFnZXMucG9wKCk7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZXRTdGFnZSxcclxuICAgIHBhc3NlZFN0YWdlLFxyXG4gICAgZ2V0QWxsU3RhZ2VzLFxyXG4gICAgcmVzZXRTdGFnZXNcclxufTsiLCIvKiBUT09MUyAqL1xyXG5cclxuXHJcbi8vIExpc3QgdG8gaG9sZCB0aGUgdG9vbHNcclxubGV0IHBsYXllclRvb2xzID0gWydCYXJlIEhhbmRzJ107XHJcblxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdG9vbCBpcyBwcmVzZW50IGluIHRoZSBsaXN0IFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9vbCBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNUb29sKHRvb2wpIHtcclxuICAgIHJldHVybiBwbGF5ZXJUb29scy5pbmNsdWRlcyh0b29sKTtcclxufVxyXG5cclxuLy8gRnVuY3Rpb24gdG8gYWRkIGEgdG9vbCBpZiBpdCdzIG5vdCBhbHJlYWR5IHByZXNlbnRcclxuZnVuY3Rpb24gYWRkVG9vbCh0b29sKSB7XHJcbiAgICAvLyBJZ25vcmUgdG9vbHMgdGhhdCBhcmUganVzdCBudW1iZXJzXHJcbiAgICBpZiAoIWlzTmFOKHRvb2wpICYmIC8vIHVzZSB0eXBlIGNvZXJjaW9uIHRvIHBhcnNlIHRoZSBfZW50aXJldHlfIG9mIHRoZSBzdHJpbmcgKGBwYXJzZUZsb2F0YCBhbG9uZSBkb2VzIG5vdCBkbyB0aGlzKS4uLlxyXG4gICAgICAgICFpc05hTihwYXJzZUZsb2F0KHRvb2wpKSkgLy8gLi4uYW5kIGVuc3VyZSBzdHJpbmdzIG9mIHdoaXRlc3BhY2UgZmFpbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaGFzVG9vbCh0b29sKSkge1xyXG4gICAgICAgIHBsYXllclRvb2xzLnB1c2godG9vbCk7XHJcblxyXG4gICAgICAgIHVwZGF0ZVRvb2xVSSh0b29sKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsVG9vbHMoKSB7XHJcbiAgICByZXR1cm4gcGxheWVyVG9vbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvb2xVSSh0b29sKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIFVJXHJcbiAgICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvb2xzLWxpc3RcIik7XHJcbiAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b29sKSk7XHJcbiAgICBpZiAodWwpIHVsLmFwcGVuZENoaWxkKGxpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9vbFZhbHVlRm9yUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIGlmICghcmVzb3VyY2UpIHJldHVybiAxO1xyXG4gICAgaWYgKCFyZXNvdXJjZS50b29scykgcmV0dXJuIDE7XHJcblxyXG4gICAgLy8gU29ydCB0aGUgdG9vbHMgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiB0aGVpciB2YWxcclxuICAgIGNvbnN0IHNvcnRlZFRvb2xzID0gcmVzb3VyY2UudG9vbHMuc29ydCgoYSwgYikgPT4gYi52YWwgLSBhLnZhbCk7XHJcblxyXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzb3J0ZWQgdG9vbHNcclxuICAgIGZvciAobGV0IHRvb2wgb2Ygc29ydGVkVG9vbHMpIHtcclxuICAgICAgICBpZiAoaGFzVG9vbCh0b29sLnRvb2wpKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBwbGF5ZXIgaGFzIHRoZSB0b29sLCByZXR1cm4gaXRzIGFzc29jaWF0ZWQgdmFsdWVcclxuICAgICAgICAgICAgcmV0dXJuIHRvb2wudmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSWYgbm9uZSBvZiB0aGUgdG9vbHMgYXJlIGZvdW5kLCByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWVcclxuICAgIHJldHVybiAxO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGhhc1Rvb2wsXHJcbiAgICBhZGRUb29sLFxyXG4gICAgZ2V0QWxsVG9vbHMsXHJcbiAgICBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZVxyXG59OyIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcblxyXG5jb25zdCByZXNvdXJjZUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2VMaXN0Jyk7XHJcbmNvbnN0IGdvbGRBbW91bnRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnb2xkQW1vdW50Jyk7XHJcbi8vIGxldCBnb2xkQW1vdW50ID0gMTAwMDsgLy8gU2FtcGxlIHN0YXJ0aW5nIGFtb3VudFxyXG4vLyBjb25zdCB0cmFkZUJvbnVzID0gMC45OyAvLyAxMCUgZGlzY291bnRcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVHJhZGVUYWJsZShyZXNvdXJjZXMpIHtcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgMTA7IC8vIFJhbmRvbSBwcmljZSBiZXR3ZWVuIDEwIGFuZCAxMTAgZm9yIHRoaXMgZXhhbXBsZS5cclxuXHJcbiAgICAgICAgcm93LmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cmVzb3VyY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cHJpY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiIHN0eWxlPVwiZGlzcGxheTpmbGV4OyBmbGV4LWRpcmVjdGlvbjpyb3c7XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV5QnRuXCIgZGF0YS1yZXNvdXJjZT1cIiR7cmVzb3VyY2V9XCIgZGF0YS1wcmljZT1cIiR7cHJpY2V9XCI+QnV5PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2VsbEJ0blwiIGRhdGEtcmVzb3VyY2U9XCIke3Jlc291cmNlfVwiIGRhdGEtcHJpY2U9XCIke3ByaWNlfVwiPlNlbGw8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICByZXNvdXJjZUxpc3QuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgYnV5IGFuZCBzZWxsIGJ1dHRvbnNcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXlCdG4nKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1yZXNvdXJjZScpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcGFyc2VGbG9hdChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJpY2UnKSk7XHJcbiAgICAgICAgICAgIGJ1eVJlc291cmNlKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxsQnRuJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzb3VyY2UnKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXByaWNlJykpO1xyXG4gICAgICAgICAgICBzZWxsUmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNpbWlsYXJseSwgeW91IGNhbiBhZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBzZWxsIGJ1dHRvbnMgaGVyZVxyXG59XHJcblxyXG5leHBvcnRzLmdlbmVyYXRlVHJhZGVUYWJsZSA9IGdlbmVyYXRlVHJhZGVUYWJsZTtcclxuXHJcbmV4cG9ydHMuYnV5UmVzb3VyY2UgPSBidXlSZXNvdXJjZTtcclxuZXhwb3J0cy5zZWxsUmVzb3VyY2UgPSBzZWxsUmVzb3VyY2U7XHJcblxyXG5mdW5jdGlvbiBidXlSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpIHtcclxuXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSBwcmljZSkge1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIC1wcmljZSk7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgZ29sZEFtb3VudEVsLnRleHRDb250ZW50ID0gZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKTtcclxuICAgICAgICAvLyBhbGVydChgWW91IGJvdWdodCAke3Jlc291cmNlfSBmb3IgJHtwcmljZS50b0ZpeGVkKDIpfSBnb2xkIWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBhbGVydChcIllvdSBkb24ndCBoYXZlIGVub3VnaCBnb2xkIVwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2VsbFJlc291cmNlKHJlc291cmNlLCBwcmljZSkge1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKHJlc291cmNlLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSAxKSB7XHJcblxyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIHByaWNlKTtcclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC0xKTtcclxuICAgICAgICBnb2xkQW1vdW50RWwudGV4dENvbnRlbnQgPSBnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gYWxlcnQoYFlvdSBzb2xkICR7cmVzb3VyY2V9IGZvciAke3ByaWNlLnRvRml4ZWQoMil9IGdvbGQhYCk7XHJcbn0iLCJmdW5jdGlvbiB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgdGV4dCwgY29sb3IpIHtcclxuICAgIGNvbnN0IGZsb2F0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZmxvYXRUZXh0LnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS5sZWZ0ID0gYCR7eH1weGA7XHJcbiAgICBmbG9hdFRleHQuc3R5bGUudG9wID0gYCR7eSAtIDMwfXB4YDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS5jb2xvciA9IGNvbG9yO1xyXG4gICAgZmxvYXRUZXh0LmNsYXNzTGlzdC5hZGQoJ2Zsb2F0LXVwLWZhZGUtb3V0Jyk7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmbG9hdFRleHQpO1xyXG5cclxuICAgIC8vIFJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBET00gYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcclxuICAgIGZsb2F0VGV4dC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgZmxvYXRUZXh0LnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy50cmlnZ2VyRmxvYXRVcFRleHQgPSB0cmlnZ2VyRmxvYXRVcFRleHQ7XHJcbiIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlQm91bmNlQW5pbWF0aW9uKCkge1xyXG4gICAgY29uc3QgYWxvbmVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fsb25lJyk7XHJcblxyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnKSA8IGdldE1heCgnY2xvbmVzJykpIHtcclxuICAgICAgICAvLyBBcHBseSB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgYWxvbmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2JvdW5jaW5nJyk7XHJcblxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgcGx1cyBhbiBhZGRpdGlvbmFsIGRlbGF5LCB0aGVuIGNoZWNrIHRoZSBjb25kaXRpb24gYWdhaW5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBhbmltYXRpb24gY2xhc3MgdG8gcmVzZXRcclxuICAgICAgICAgICAgYWxvbmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvdW5jaW5nJyk7XHJcbiAgICAgICAgICAgIHZvaWQgYWxvbmVFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgLy8gUmVjdXJzaXZlIGNhbGwgdG8gcmUtY2hlY2sgdGhlIGNvbmRpdGlvbiBhbmQgcG90ZW50aWFsbHkgcmVhcHBseSB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG4gICAgICAgIH0sIDExMDAwKTsgLy8gV2FpdCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24gKDFzKSArIGRlbGF5ICgxMHMpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgYW5pbWF0aW9uIGNsYXNzIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldFxyXG4gICAgICAgIGFsb25lRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdib3VuY2luZycpO1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnRzLnVwZGF0ZUJvdW5jZUFuaW1hdGlvbiA9IHVwZGF0ZUJvdW5jZUFuaW1hdGlvbjsiLCJjb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYnVpbGRpbmdOYW1lLCBidWlsZGluZ0NvdW50KSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtidWlsZGluZ05hbWV9YCkudGV4dENvbnRlbnQgPSBgJHtjYXBpdGFsaXplRmlyc3QoYnVpbGRpbmdOYW1lKS5zcGxpdCgnXycpLmpvaW4oJyAnKX0gKCR7YnVpbGRpbmdDb3VudH0pYDtcclxuXHJcbn1cclxuZXhwb3J0cy51cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50ID0gdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudDsiLCJjb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IHVwZGF0ZVRvb2x0aXAsIGhpZGVUb29sdGlwIH0gPSByZXF1aXJlKCcuL3VwZGF0ZVRvb2x0aXAnKTtcclxuY29uc3QgeyBmaXRDaGFyVG9DZWxsIH0gPSByZXF1aXJlKCcuL2ZpdENoYXJUb0NlbGwnKTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nTGlzdCgpIHtcclxuICAgIGNvbnN0IGJ1aWxkaW5nTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWlsZGluZ0xpc3QnKTtcclxuICAgIGJ1aWxkaW5nTGlzdC5pbm5lckhUTUwgPSAnJztcclxuICAgIGxldCBpID0gMDtcclxuICAgIGNvbnN0IGdyaWRTaXplID0gNjtcclxuICAgIGNvbnN0IG1heENlbGxXaWR0aCA9IDM2O1xyXG4gICAgY29uc3QgbWF4Q2VsbEhlaWdodCA9IDQ4O1xyXG4gICAgY29uc3QgaW5pdGlhbEZvbnRTaXplID0gMzY7IC8vIHN0YXJ0aW5nIGZvbnQgc2l6ZVxyXG5cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWwuY291bnQ7ICsraiwgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2wgPSAoaSAlIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgbGV0IHJvdyA9IE1hdGguZmxvb3IoaSAvIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYmVzdCBmb250IHNpemUgZm9yIHRoaXMgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGZvbnRTaXplID0gZml0Q2hhclRvQ2VsbCh2YWwuZW1vamkgfHwgJz8nLCBtYXhDZWxsV2lkdGgsIG1heENlbGxIZWlnaHQsIGluaXRpYWxGb250U2l6ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdGhlIHNwYW4gd2l0aCB0aGUgY2FsY3VsYXRlZCBmb250IHNpemVcclxuICAgICAgICAgICAgYnVpbGRpbmdMaXN0LmlubmVySFRNTCArPSBgPHNwYW4gY2xhc3MgPSAndG9vbHRpcCcgc3R5bGU9J2dyaWQtY29sdW1uOiR7Y29sfTsgZ3JpZC1yb3c6JHtyb3d9OyBmb250LXNpemU6JHtpbml0aWFsRm9udFNpemV9cHgnIHRvb2x0aXBEZXNjPScke2tleX0nPiR7dmFsLmVtb2ppIHx8ICc/J308L3NwYW4+YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBidWlsZGluZ0xpc3QucXVlcnlTZWxlY3RvckFsbCgnc3Bhbi50b29sdGlwJykuZm9yRWFjaCgoc3BhbikgPT4ge1xyXG4gICAgICAgIHNwYW4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChzcGFuKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGhpZGVUb29sdGlwKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnVwZGF0ZUJ1aWxkaW5nTGlzdCA9IHVwZGF0ZUJ1aWxkaW5nTGlzdDsiLCJjb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoJy4vanNvbi9idXR0b25zJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBnZXRCdWlsZGluZ0NvdW50IH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCwgY2FuVW5sb2NrIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnIH0gPSByZXF1aXJlKFwiLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgaXNCdXR0b25JZFZpc2libGUsIHNldFZpc2libGVCdXR0b24gfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgY2FuQ3JhZnQgfSA9IHJlcXVpcmUoJy4vY2FuQ3JhZnQnKTtcclxuY29uc3QgeyBjYW5CdXlCdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9jYW5CdXlCdWlsZGluZycpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG4vKipcclxuICogQ2hhbmdlcyB0aGUgc3RhdGVzIG9mIGJ1dHRvbnMgYmV0d2VlbiAnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgYW5kICdidXR0b24tZGlzYWJsZWQnXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCkge1xyXG4gICAgY29uc3Qgc2VsZWN0QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFjY29yZGluZ2x5XHJcblxyXG4gICAgc2VsZWN0QnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29uZmlnID0gYnV0dG9uc1tidXR0b24uaWRdOyAvKiBnZXQgdGhlIGJ1dHRvbidzIGNvbmZpZ3VyYXRpb24gdXNpbmcgaXRzIGRhdGEgYXR0cmlidXRlIG9yIElELCBldGMuICovO1xyXG4gICAgICAgIGlmICghYnV0dG9uQ29uZmlnKSB7IC8qY29uc29sZS53YXJuKCdubyBidXR0b24gY29uZmlnIGZvdW5kIGZvcicsIGJ1dHRvbiwgYnV0dG9uLmlkKTsgKi9yZXR1cm47IH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcuZGF0YV9idWlsZGluZywgYnV0dG9uQ29uZmlnLnJlcXVpcmVtZW50KTtcclxuICAgICAgICAvLyBSZXNldCBhbGwgc3RhdGVzIGZpcnN0XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgIGlmIChidXR0b24uaWQgJiYgaXNCdXR0b25JZFZpc2libGUoYnV0dG9uLmlkKSkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcbiAgICAgICAgLy8gSWYgcmVxdWlyZW1lbnQgaXMgbWV0LCBpdCBzaG91bGQgYmUgdmlzaWJsZVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIGxldCBnZXRNYXRlcmlhbCA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKS5nZXRNYXRlcmlhbDtcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5yZXF1aXJlbWVudCAmJiBidXR0b25Db25maWcucmVxdWlyZW1lbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAgICAgICAgIC8vIGFsd2F5cyBwdXJjaGFzYWJsZSBnYXRoZXIgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgJiYgIWJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiA9PT0gJ3Byb2R1Y3Rpb24nKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcG9uZGVyIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZCAmJiBidXR0b24uaWQgPT09ICdnYXRoZXJQb25kZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHBvbmRlciB1bmxvY2tzXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiBidXR0b25Db25maWcudGFiID09PSAncG9uZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbi5jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWQgJiYgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndW5sb2NrJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVubG9jayhidXR0b24uaWQpKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGEgcG9uZGVyIGJ1dHRvbiBpcyB1bmxvY2tlZCwgaGlkZSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNQb25kZXJlZChidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKSkpIHN0YXRlID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbiwgc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyB0YWIgYnV0dG9ucyBhbHdheXMgZWl0aGVyIGhpZGRlbiBvciBlbmFibGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiBidXR0b25Db25maWcudGFiID09PSAndGFicycpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICd2aXNpYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIHdpdGggY2hlY2tpbmcgcmVxdWlyZW1lbnQgb2YgYnV0dG9uOiAnLCBidXR0b25Db25maWcsIGVycik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmlkICYmIGJ1dHRvbkNvbmZpZy5pZC5zbGljZSgwLCA1KSA9PT0gJ2NyYWZ0Jykge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHVubG9ja2VkIHRoZSBidXR0b24sIG5ldmVyIGRpc3BsYXkgaXRcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UpO1xyXG4gICAgICAgICAgICAvLyBpZiAoYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UgJiYgIXBhc3NlZFN0YWdlKGJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgc3RhdGUgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8gbmV2ZXIgaGlkZSB0aGlzIGJ1dHRvbiBvbmNlIGl0cyBiZWVuIHVubG9ja2VkXHJcbiAgICAgICAgICAgIGlmIChidXR0b25Db25maWcuY3JhZnRlZE9uY2UpIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAgICAgdmFyIGNyYWZ0ZWQgPSBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbkNvbmZpZy5pZCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNyYWZ0ZWQpO1xyXG4gICAgICAgICAgICBpZiAoY3JhZnRlZC52YWx1ZSA+IDApIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBjYW4gYWZmb3JkIHRoaXMgY3JhZnQsIGl0IHNob3VsZCBiZSBwdXJjaGFzYWJsZVxyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyhjcmFmdGVkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coa2V5KTtcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChjYW5DcmFmdChrZXkpKVxyXG4gICAgICAgICAgICAgICAgaWYgKCFidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSB8fCBidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSAmJiBwYXNzZWRTdGFnZShidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSkpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgIGVsc2Ugc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGNhbiBhZmZvcmQgdGhpcyBidWlsZGluZywgaXQgc2hvdWxkIGJlIHB1cmNoYXNhYmxlXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBwdXJjaGFzZWQgYSBidWlsZGluZywgaXQgc2hvdWxkIGJlIHZpc2libGVcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHN0YXRlID0gZ2V0QnVpbGRpbmdDb3VudChidXR0b25Db25maWcuZGF0YV9idWlsZGluZykgPyAnYnV0dG9uLWRpc2FibGVkJyA6IHN0YXRlO1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBidWlsZGluZyBjb3N0XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBzdGF0ZSA9IGNhbkJ1eUJ1aWxkaW5nKGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSA/ICdwdXJjaGFzYWJsZScgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGhpZGRlbiBpcyBtZXQsIGl0IHNob3VsZCBiZSBoaWRkZW5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmhpZGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBidXR0b25Db25maWcuaGlkZSgpID8gJ2hpZGRlbicgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIGN1cnJlbnQgc3RhdGVcclxuICAgICAgICBpZiAoc3RhdGUgIT09ICcnKSBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QtcHVyY2hhc2FibGUsIGRpc2FibGUgdGhlIGJ1dHRvblxyXG4gICAgICAgIC8vIGJ1dHRvbi5kaXNhYmxlZCA9IHN0YXRlID09PSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgZm9yIHRoaXMgYnV0dG9uIGlmIGl0cyBhY3RpdmVcclxuICAgICAgICAvLyBpZiAoYnV0dG9uID09PSBjdXJyZW50SG92ZXJCdXR0b24pIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAvLyBJZiB0aGUgc3RhdGUgaXMgaGlkZGVuLCBzZXQgdGhlIGJ1dHRvbidzIGRpc3BsYXkgdG8gbm9uZVxyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGwgdmlzaWJsZSAnLCBidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7IC8vIFRoaXMgd2lsbCByZXZlcnQgaXQgYmFjayB0byBpdHMgb3JpZ2luYWwgZGlzcGxheSBzdGF0ZSBvciBkZWZhdWx0IChlLmcuLCAnYmxvY2snIG9yICdpbmxpbmUtYmxvY2snKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJykuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGpvYiA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICBjb25zdCByZXFQb25kZXIgPSAocmVxdWlyZSgnLi9qb2JSZXF1aXJlZFBvbmRlcnMnKS5qb2JSZXF1aXJlZFBvbmRlcnMpW2pvYl07XHJcbiAgICAgICAgaWYgKHJlcVBvbmRlciA9PT0gbnVsbCB8fCByZXFQb25kZXIgPT09IHVuZGVmaW5lZCkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKGlzUG9uZGVyZWQocmVxUG9uZGVyKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKHJlcVBvbmRlciA9PT0gJ25vdC11bmxvY2thYmxlJykgc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICBlbHNlIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhqb2IsIGJ1dHRvbiwgcmVxUG9uZGVyLCBzdGF0ZSk7XHJcbiAgICAgICAgLy8gYnV0dG9uLmNsYXNzTGlzdC5cclxuICAgICAgICBpZiAoc3RhdGUgPT09ICdoaWRkZW4nKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoaWRpbmcnLCBidXR0b24pO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWxsIHZpc2libGUgJywgYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgc2V0VmlzaWJsZUJ1dHRvbihidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gVGhpcyB3aWxsIHJldmVydCBpdCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBkaXNwbGF5IHN0YXRlIG9yIGRlZmF1bHQgKGUuZy4sICdibG9jaycgb3IgJ2lubGluZS1ibG9jaycpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVCdXR0b25WaXNpYmlsaXR5ID0gdXBkYXRlQnV0dG9uVmlzaWJpbGl0eTsiLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIGdldFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNhbGNTZWNvbmRzUmVtYWluaW5nIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgdG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkeW5hbWljLXRvb2x0aXAnKTtcclxuZnVuY3Rpb24gc2hvd1Rvb2x0aXAodGFyZ2V0LCBkZXNjLCBlZmZlY3QsIGNvc3QpIHtcclxuICAgIGxldCBjb250ZW50ID0gJyc7XHJcblxyXG4gICAgaWYgKGRlc2MpIHtcclxuICAgICAgICBjb250ZW50ICs9IGA8c3BhbiA+JHtkZXNjfTwvc3Bhbj48aHI+YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWZmZWN0KSB7XHJcbiAgICAgICAgY29udGVudCArPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjojNGNmXCI+JHtlZmZlY3R9PC9zcGFuPjxocj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb3N0KSB7XHJcbiAgICAgICAgLy8gY29udGVudCArPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjojRjREMDNGXCI+JHtjb3N0fTwvc3Bhbj48YnI+YDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW21hdGVyaWFsLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGNvc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBtYXRlcmlhbCA9IHJlcTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IGFtb3VudDsgLyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi8vKiBZb3VyIGxvZ2ljIHRvIGNoZWNrIGlmIHRoZXJlJ3MgZW5vdWdoIG9mIHRoZSBtYXRlcmlhbCAqLztcclxuICAgICAgICAgICAgICAgIHZhciBjb2xvckNsYXNzID0gaGFzRW5vdWdoID8gJ2Vub3VnaCcgOiAnbm90LWVub3VnaCc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWF4KG1hdGVyaWFsKSA8IGFtb3VudCkgY29sb3JDbGFzcyA9ICdleGNlZWRzLW1heCc7XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHthbW91bnQudG9GaXhlZCgwKX0gJHttYXRlcmlhbH08L3NwYW4+YDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kc1JlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkgc2Vjb25kc1JlbWFpbmluZyA9IGNhbGNTZWNvbmRzUmVtYWluaW5nKG1hdGVyaWFsLCBhbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2Vjb25kc1JlbWFpbmluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kc1JlbWFpbmluZyA+IDAgJiYgY29sb3JDbGFzcyAhPSAnZXhjZWVkcy1tYXgnKSB7IHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0aW1lLXJlbWFpbmluZ1wiPigkeyhzZWNvbmRzUmVtYWluaW5nKS50b0ZpeGVkKDApfSBzZWNvbmRzKTwvc3Bhbj5gOyB9XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxicj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gc3RyO1xyXG5cclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29udGVudCArPSBjb3N0O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgbWFrZSBub3JtYWwgY29zdCBmb3IgYnV0dG9uOiBcIiwgdGFyZ2V0LCBjb3N0LCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2codGFyZ2V0LCBjb250ZW50KTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuaW5uZXJIVE1MID0gY29udGVudDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUubGVmdCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQgKyA1KSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLnRvcCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gdG9vbHRpcC5vZmZzZXRIZWlnaHQgLyAyKSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlVG9vbHRpcCgpIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxufVxyXG5leHBvcnRzLmhpZGVUb29sdGlwID0gaGlkZVRvb2x0aXA7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVUb29sdGlwKGJ1dHRvbikge1xyXG4gICAgY29uc3QgZGVzYyA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJykgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnKTtcclxuICAgIGNvbnN0IGVmZmVjdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1lZmZlY3QnKTtcclxuICAgIC8vIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpO1xyXG4gICAgY29uc3QgY29uZmlnID0gZ2V0UmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbi5pZCkgfHwgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZChidXR0b24uaWQpIHx8IGJ1aWxkaW5nc1tidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJyldIHx8IHBvbmRlcnNbYnV0dG9uLmdldEF0dHJpYnV0ZSgndW5sb2NrJyldO1xyXG4gICAgLy8gY29uc29sZS5sb2coY29uZmlnKTtcclxuICAgIGNvbnN0IGNvc3QgPSAoY29uZmlnICYmIGNvbmZpZy5jb3N0KSB8fCBidXR0b24uZ2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcpIHx8IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0Jyk7XHJcbiAgICBzaG93VG9vbHRpcChidXR0b24sIGRlc2MsIGVmZmVjdCwgY29zdCk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVUb29sdGlwID0gdXBkYXRlVG9vbHRpcDtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDgpO1xuIl0sIm5hbWVzIjpbImF0ZUZpc2giLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0QXRlRmlzaCIsImJvb2wiLCJnZXRBdGVGaXNoIiwiYnVpbGRpbmdzIiwiaXNQb3BCdWlsZGluZyIsImJ1dHRvbnMiLCJyZXNvdXJjZXMiLCJpbmNyZWFzZU1hdGVyaWFsIiwiaW5jcmVhc2VNYXgiLCJ1cGRhdGVUb3RhbCIsImhhc1BlcmsiLCJnZXRNYXRlcmlhbCIsInBhc3NlZFN0YWdlIiwicmVjYWxjTWF4Q2xvbmVzIiwidXBkYXRlU2lkZWJhciIsInVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQiLCJyZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCIsImNhbkJ1eUJ1aWxkaW5nIiwiaXNQb25kZXJlZCIsInVwZGF0ZUJ1aWxkaW5nTGlzdCIsImJ1eUJ1aWxkaW5nIiwiYnVpbGRpbmdOYW1lIiwiY29uc29sZSIsImxvZyIsImJ1aWxkaW5nIiwiY291bnQiLCJyZXNvdXJjZSIsImNvc3QiLCJhbW91bnQiLCJPYmplY3QiLCJlbnRyaWVzIiwiZWZmZWN0cyIsImdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdCIsIm1hcCIsIm1hdGVyaWFsIiwidG9GaXhlZCIsImpvaW4iLCJjcmVhdGVCdWlsZGluZ0J1dHRvbiIsImJ1aWxkaW5nS2V5IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiYmFzZWNvc3QiLCJjb3N0cyIsInJlcXVpcmVtZW50RnVuY3Rpb24iLCJjb3N0Q29uZGl0aW9uIiwiZXZlcnkiLCJNYXRoIiwiZmxvb3IiLCJjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsInRvb2x0aXBEZXNjIiwiYnV5TWF4QnVpbGRpbmdzIiwiaSIsImdlbmVyYXRlRWZmZWN0U3RyaW5nIiwiZWZmZWN0UGFydHMiLCJ2YWx1ZSIsInB1c2giLCJib29zdCIsInBlcmNlbnRhZ2VCb29zdCIsInJvdW5kIiwiY3JhZnRlZFJlc291cmNlcyIsInNraWxscyIsImdldFdvcmtlcnMiLCJnZXRGYWN0b3J5UHJvZHVjdGlvbiIsImhhc1ByZXN0aWdlIiwiZ2V0TGV2ZWxPZlByZXN0aWdlIiwiaGFzVG9vbCIsImNhbGNJbmNyZWFzZSIsInJlc291cmNlTmFtZSIsImRlbHRhX3RpbWUiLCJ0b3RhbCIsImhhc093blByb3BlcnR5IiwiaXNHZXR0aW5nIiwiY2xvbmVNdWx0Iiwic2tpbGwiLCJhZmZlY3RlZFJlc291cmNlcyIsImluY2x1ZGVzIiwic2tpbGxSYXRpbyIsInBvdyIsImxldmVsIiwia2V5cyIsImJvb3N0RGF0YSIsImluY3JlYXNlIiwicGFyc2VGbG9hdCIsImNhbkJ1eSIsImNhbkNyYWZ0IiwicmVzb3VyY2VLZXkiLCJyZXF1aXJlbWVudHMiLCJtYXQiLCJlcnIiLCJ3YXJuIiwiY2FwaXRhbGl6ZUZpcnN0Iiwic3RyIiwic3dpdGNoZWRNYW51ZmFjdHVyZWRNYXAiLCJhbGxNYXRlcmlhbHMiLCJmb3JFYWNoIiwiciIsImFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZyIsImFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZyIsImNyZWF0ZUZhY3RvcnlEaXYiLCJBcnJheSIsImZyb20iLCJmYWN0b3JpZXNDb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZmFjdG9yeURpdiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJsZWZ0VGV4dCIsImNsYXNzTGlzdCIsImFkZCIsInJpZ2h0U2VsZWN0Iiwib3B0aW9uIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjdXJyZW50UHJvZHVjZWQiLCJ0aGlzIiwiZ2V0QXR0cmlidXRlIiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiY29sb3IiLCJuZXdQcm9kdWNlZCIsIm9sZFByb2R1Y2VkIiwiZmFjdG9yeUluZGV4IiwidXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmciLCJkYXRhc2V0IiwiaW5uZXJIVE1MIiwiYXJyb3ciLCJzZWxlY3RFbGVtZW50IiwidGV4dCIsImluaXRpYWxPcHRpb24iLCJkaXNhYmxlZCIsInNlbGVjdGVkIiwiYWRkSW5pdGlhbE9wdGlvbiIsIm1hbnVmYWN0dXJlQnVsayIsImJ1bGtVcGdyYWRlQ29zdCIsIm5ld0ZhY3RvcnlTaWx2ZXJDb3N0IiwiYXR0ZW1wdE1hbnVmYWN0dXJlIiwicXVlcnlTZWxlY3RvckFsbCIsImZhY3RvcnkiLCJnb2FsUmVzb3VyY2UiLCJhcnIiLCJudW0iLCJtaW4iLCJtYW51ZmFjdHVyZSIsImJ1eUZhY3RvcnkiLCJidXlGYWN0b3J5QnV0dG9uIiwidXBncmFkZUJ1bGsiLCJsb2FkRmFjdG9yeSIsImNyYWZ0aW5nIiwiZGl2IiwiZml0Q2hhclRvQ2VsbCIsImNoYXIiLCJjZWxsV2lkdGgiLCJjZWxsSGVpZ2h0IiwiaW5pdGlhbEZvbnRTaXplIiwic3BhbiIsImZvbnRTaXplIiwicG9zaXRpb24iLCJ3aGl0ZVNwYWNlIiwidmlzaWJpbGl0eSIsImJvZHkiLCJjdXJyZW50Rm9udFNpemUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInJlbW92ZUNoaWxkIiwiZ2V0Q3JhZnRlZFJlc291cmNlIiwidG9Mb3dlckNhc2UiLCJpc1Jlc291cmNlIiwidHJpZ2dlckZsb2F0VXBUZXh0IiwiYWxsVmlzaWJsZUJ1dHRvbnMiLCJTZXQiLCJoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlIiwicG9wdWxhdGVTa2lsbHNUYWJsZSIsInRhYmxlIiwiZXhwIiwiZGlzcGxheSIsInByb2dyZXNzQmFyIiwid2lkdGgiLCJ0ciIsImlkIiwidGRQcm9ncmVzcyIsImhlaWdodCIsInNraWxsVGV4dCIsImxlZnQiLCJ0b3AiLCJ0cmFuc2Zvcm0iLCJnZXRNYXgiLCJtYXgiLCJJbmZpbml0eSIsInVwZGF0ZVNraWxscyIsImFicyIsImxldmVsdXAiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwieCIsInkiLCJjYWxjQ3JhZnRCb251cyIsImlzQnV0dG9uSWRWaXNpYmxlIiwiaGFzIiwic2V0VmlzaWJsZUJ1dHRvbiIsImNsZWFyU2lkZWJhciIsImpvYkNvdW50cyIsImpvYnNUYWIiLCJnZXRUb3RhbEpvYnMiLCJqIiwiam9iRGl2IiwiZGVjcmVtZW50RGl2Iiwiam9iTmFtZVNwYW4iLCJpbmNyZW1lbnREaXYiLCJidG4iLCJldmVudCIsImpvYlR5cGUiLCJjbG9zZXN0IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiZGlmZmVyZW5jZSIsImRpc3RyaWJ1dGVXb3JrZXJzIiwidXBkYXRlRGlzcGxheSIsIm51bVdvcmtlcnMiLCJ3b3JrZXJzRGlzdHJpYnV0aW9uIiwiTWFwIiwidG90YWxXb3JrZXJzIiwiZmlsdGVyIiwibnVtYmVyT2ZSZXNvdXJjZXMiLCJsZW5ndGgiLCJwZXJSZXNvdXJjZSIsInNldCIsIm1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2UiLCJyZW1haW5pbmdXb3JrZXJzIiwiZ2V0IiwiYWZmZWN0ZWRSZXNvdXJjZSIsImpvYkJ1dHRvbiIsImZpbmQiLCJyZXNvdXJjZURpc3BsYXkiLCJqb2JCdXR0b25SZWN0IiwicmVzb3VyY2VSZWN0IiwiYmFsbCIsImJvcmRlclJhZGl1cyIsImJhY2tncm91bmRDb2xvciIsIm9wYWNpdHkiLCJ3aW5kb3ciLCJzY3JvbGxYIiwic2Nyb2xsWSIsImFuaW1hdGUiLCJkdXJhdGlvbiIsImVhc2luZyIsIm9uZmluaXNoIiwidGhpc0pvYkJ1dHRvbiIsImpvYkVsZW1lbnQiLCJjb25uZWN0aW9ucyIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJkcmF3TGluZSIsInN0YXJ0RWxlbWVudCIsImVuZFgiLCJlbmRZIiwic3RhcnRYIiwic3RhcnRZIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiY29udGV4dCIsImZyb21YIiwiZnJvbVkiLCJ0b1giLCJ0b1kiLCJyYWRpdXMiLCJhbmdsZSIsInhfY2VudGVyIiwieV9jZW50ZXIiLCJhdGFuMiIsImNvcyIsInNpbiIsIlBJIiwiY2xvc2VQYXRoIiwiZmlsbCIsImRyYXdBcnJvd2hlYWQiLCJzd2l0Y2hKb2IiLCJvbGRKb2JJZCIsIm5ld0pvYklkIiwid29ya2VycyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNsZWFySm9iQXNzaWdubWVudHMiLCJjbGVhclJlY3QiLCJyZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzIiwidW5kZWZpbmVkIiwiZGF0YUpvYiIsIm9sZElkIiwicmVwbGFjZSIsIm5ld0lkIiwibWF4ZWRPdXQiLCJyZXNvdXJjZUFycmF5IiwiZXJyb3IiLCJkcmF3QWxsQ29ubmVjdGlvbnMiLCJvbGRCdXR0b24iLCJuZXdCdXR0b24iLCJuZXdYIiwibmV3WSIsImJvdHRvbSIsIm9mZnNldFRvcCIsInNldENvbm5lY3Rpb25zIiwibmV3Q29ubmVjdGlvbnMiLCJnZXRDb25uZWN0aW9ucyIsInJlc2V0QWxsSm9icyIsImVtb2ppIiwicmF0aW8iLCJyb2NrcyIsIndvb2QiLCJ2aW5lcyIsInN0aWNrcyIsImdhbWUiLCJmaXNoIiwiZ2xhc3MiLCJwb25kZXIiLCJnZXRCdWlsZGluZ0NvdW50IiwiZ2V0Qm9vc3QiLCJyZXNldEJ1aWxkaW5ncyIsImtleSIsInZhbCIsImNsYXNzIiwidGFiIiwidG9vbHRpcENvc3QiLCJyZXF1aXJlbWVudCIsImhpZGUiLCJzaG93VGFiIiwiY3JhZnRlZE9uY2UiLCJyZXF1aXJlZFN0YWdlIiwiZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCIsImMiLCJnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyIsImNvbmZpZyIsImsiLCJyZXNldENyYWZ0ZWRSZXNvdXJjZXMiLCJwZXJrcyIsInBvbmRlcnMiLCJyZXNldFBvbmRlcnMiLCJwcmVzdGlnZSIsInByZXMiLCJpc1Zpc2libGUiLCJhY3RpdmVUZXh0IiwiZGVmYXVsdFRleHQiLCJnZXRSZXNvdXJjZUNvbmZpZ0J5SWQiLCJyZXNldFJlc291cmNlcyIsImdhdGhlcmluZyIsIm1hc29ucnkiLCJuZWVkVG9vbHMiLCJjYXJwZW50cnkiLCJ0aGlua2luZyIsImZhcm1pbmciLCJjb21iYXQiLCJmaXNoaW5nIiwiaHVudGluZyIsInNhdmVHYW1lIiwibG9hZEdhbWUiLCJnZW5lcmF0ZVRvb2x0aXBDb3N0IiwiYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucyIsImNyYWZ0QWxsUmVzb3VyY2VzIiwiY3JhZnRSZXNvdXJjZSIsInVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyIsInNlbGVjdEFiaWxpdHkiLCJyZXNldFBlcmtzIiwibWFrZVZpc2libGUiLCJ1cGRhdGVCdXR0b25WaXNpYmlsaXR5IiwiZ2VuZXJhdGVQb25kZXJCdXR0b25zIiwiYWRkVG9vbCIsInJlc2V0U3RhZ2VzIiwiaW5pdGlhbGl6ZVJlc291cmNlVGFncyIsInVwZGF0ZURpc3BsYXlWYWx1ZSIsInVwZGF0ZUJvdW5jZUFuaW1hdGlvbiIsInVwZGF0ZVRvb2x0aXAiLCJoaWRlVG9vbHRpcCIsInNpZGViYXJQYXJlbnQiLCJlbW9qaUdhdGhlckRpdiIsInRvb2xzVG9TdGFnZXMiLCJ2aXNpYmlsaXR5UnVsZXMiLCJjb25kaXRpb24iLCJhY3Rpb24iLCJzZXRUaW1lb3V0IiwibG9jYXRpb24iLCJocmVmIiwidGFiQ29udGFpbmVycyIsInRhYk5hbWUiLCJwcmV2VGFiIiwiY29udGVudCIsImNvbnRhaW5zIiwicmVtb3ZlIiwidGFicyIsImFjdGl2ZUNvbnRlbnQiLCJ0YWJTdHJpbmciLCJhY3RpdmVUYWJCdXR0b24iLCJ0b2dnbGUiLCJpc0RhcmsiLCJmYWRlVG9CbGFjayIsIm92ZXJsYXkiLCJvdmVybGF5VGV4dCIsIm92ZXJsYXlCdXR0b24iLCJtZXNzYWdlRWxlbWVudCIsImNoYW5nZU1lc3NhZ2UiLCJuZXdNZXNzYWdlIiwiY2xvbmVXb3JkcyIsIm1vZGlmaWVkTWVzc2FnZSIsIm1pbGxpc2Vjb25kc19wZXJfZnJhbWUiLCJsYXN0X3RpbWUiLCJ0b3RhbF90aW1lIiwiYWNjdW11bGF0ZWRfbGFnIiwibG9vcCIsImN1cnJlbnRfdGltZSIsIm5vcm1hbFJhdGUiLCJ1cGRhdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0aW1lX3NpbmNlX2xhc3Rfc2F2ZSIsInRpbWVfc2luY2VfbWFudWZhdHVyZSIsInJ1bGUiLCJ0b29sIiwiY3VycmVudEhvdmVyQnV0dG9uIiwicmVuZGVyIiwib25iZWZvcmV1bmxvYWQiLCJjdXJyZW50bHlEZWxldGluZyIsInRyYWNlIiwiYnV0dG9uIiwiY3JlYXRlQ29sdW1ucyIsInBhcmVudCIsImNvbDEiLCJjb2wyIiwiY29sMyIsInByZXBlbmQiLCJ0YWJzQ29udGFpbmVyIiwicHJvZHVjdGlvbkNvbnRhaW5lciIsImV4cGVyaW1lbnRDb250YWluZXIiLCJwb25kZXJDb250YWluZXIiLCJleHBlcmltZW50Q29sdW1ucyIsInBvbmRlckNvbHVtbnMiLCJwcm9kdWN0aW9uQ29sdW1uSW5kZXgiLCJleHBlcmltZW50Q29sdW1uSW5kZXgiLCJwb25kZXJDb2x1bW5JbmRleCIsImJ1dHRvbkVsZW1lbnQiLCJzcGxpdCIsInRvb2x0aXBFZmZlY3QiLCJ1bmxvY2siLCJkYXRhX2J1aWxkaW5nIiwiY3JhZnRlZFJlc291cmNlIiwidmFsdWVzIiwiZ3JpZENvbHVtbiIsInRvU3RyaW5nIiwiZ2VuZXJhdGVCdXR0b25zIiwidGFyZ2V0IiwibWF0Y2hlcyIsInVubG9ja0F0dHIiLCJjYW5VbmxvY2siLCJyZWxvYWQiLCJzaWRlYmFyVGV4dCIsInJlc291cmNlQnV0dG9uIiwiZm9udFdlaWdodCIsInJCdXR0b24iLCJzdG9wQWxsR2F0aGVyaW5nIiwidG9nZ2xlUmVzb3VyY2UiLCJnZXRSS2V5RnJvbUlEIiwiY3IiLCJnZXRDUktleUZyb21JRCIsImNvbmZpcm0iLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiZGFya01vZGVUb2dnbGUiLCJvdmVybGF5QmFja0J1dHRvbiIsImh1c2tzRHVlIiwib2xkSHVza1ZhbHVlIiwiaHVza1ZhbHVlIiwiYnV0dG9uQ29udGFpbmVyIiwiZ3JpZFJvdyIsIm4iLCJhIiwic3FydCIsIm5leHRGaWJvbmFjY2kiLCJlIiwicHJldmVudERlZmF1bHQiLCJwcmV2Rmlib25hY2NpIiwiaXNla2FpIiwicGVyayIsImZhY3RvcnlCdXR0b25zIiwidXBncmFkZUJ1bGtCdXR0b24iLCJtYWtlRmFjdG9yeUJ1dHRvbnMiLCJ1cGRhdGVVSSIsInJlc291cmNlRGl2Iiwic2V0VG90YWxUaW1lIiwidGltZSIsImdldE1lc3NhZ2UiLCJzZXRTdGFnZSIsInN0YWdlIiwiZWxlbWVudCIsIm15UGVya3MiLCJwZXJrTmFtZSIsImFkZFBlcmsiLCJiIiwiYWJpbGl0eU5hbWUiLCJnZXRQZXJrRnJvbVRpZXIiLCJ0aWVyTnVtIiwiZ2V0QWxsUGVya3MiLCJ1bmxvY2tJZCIsInVubG9ja0tleSIsInBvbmRlck9iamVjdHMiLCJwb25kZXJLZXkiLCJwb25kZXJPYmoiLCJidXR0b25LZXkiLCJzZXRNYXgiLCJtYXhDbG9uZXMiLCJteUJ1dHRvbiIsIm5ld1RleHQiLCJlZmZlY3RTdHJpbmciLCJnZXRBbGxTdGFnZXMiLCJyZXNvdXJjZXNDb250YWluZXIiLCJjaGVja2VkIiwiYXV0b0NyYWZ0VGFibGUiLCJjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24iLCJjb250YWluZXIiLCJlbW9qaURpc3BsYXkiLCJ1cGRhdGVFbW9qaURpc3BsYXkiLCJlbW9qaVN0ciIsInJlcGVhdCIsImFkanVzdEZvbnRTaXplIiwic3VmZmljaWVudFJlc291cmNlcyIsImNyYWZ0UmVzb3VyY2VRdWFudGl0eSIsInF1YW50aXR5IiwiY3JhZnRPbmUiLCJjcmFmdEJvbnVzIiwiY2FsY1NlY29uZHNSZW1haW5pbmciLCJuZWVkZWQiLCJjZWlsIiwibmFtZSIsInJhdGUiLCJyYXRlRWxlbWVudCIsImdldEFsbFRvb2xzIiwic2F2ZSIsInRvb2xzIiwic3RhZ2VzIiwidW5sb2NrcyIsImpvYnMiLCJtZXNzYWdlIiwiZmFjdG9yaWVzIiwiaXRlbSIsInUiLCJodG1sU3RyaW5nIiwiZXh0cmFjdFRleHRGcm9tSFRNTCIsIkRhdGUiLCJub3ciLCJzZXRJdGVtIiwic2F2ZWdhbWUiLCJnZXRJdGVtIiwidmFsdWVPZiIsIk51bWJlciIsImlzTmFOIiwidW5pb24iLCJzIiwiY2xvbmVzIiwidGltZV9kaWZmZXJlbmNlIiwiaW5jIiwic2l6ZSIsImpvYiIsInNlbGVjdENvcnJlY3RQZXJrQnV0dG9uIiwic2VsZWN0ZWRCdXR0b24iLCJyZW1vdmVBdHRyaWJ1dGUiLCJzaG91bGRIaWRlIiwiYWJicmV2aWF0ZU51bWJlciIsImZvcm1hdCIsInVuaXQiLCJyb3VuZFRvRGVjaW1hbHMiLCJudW1iZXIiLCJkZWNpbWFscyIsImZhY3RvciIsImNyZWF0ZVJlc291cmNlVGFnIiwiZ3JvdXBOYW1lIiwiZ3JvdXBDb250YWluZXIiLCJ0b2dnbGVCdXR0b24iLCJvbmNsaWNrIiwiZ3JvdXAiLCJjaGlsZHJlbiIsInRhZ05hbWUiLCJ0b2dnbGVHcm91cFZpc2liaWxpdHkiLCJjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyIiwicmVzb3VyY2VEaXNwbGF5TmFtZSIsInJlc291cmNlRWxlbWVudCIsInJlc291cmNlTmFtZVNwYW4iLCJyZXNvdXJjZVZhbHVlU3BhbiIsInJlc291cmNlUmF0ZVNwYW4iLCJjaGFuZ2VSZXNvdXJjZU9yZGVyIiwicmVzb3VyY2VJZCIsIm5ld09yZGVyIiwib3JkZXIiLCJlbGVtZW50SW5jcmVhc2UiLCJwYXJlbnRFbGVtZW50IiwiaW5kZXgiLCJkaXNwbGF5RWxlbSIsIndpdGhHcm91cHMiLCJyZXNvdXJjZUdyb3VwcyIsImJhc2ljcyIsIm1hdGVyaWFscyIsImFkdmFuY2VkIiwibWV0YWwiLCJjb25zdHJ1Y3Rpb24iLCJncm91cE9mUmVzb3VyY2VzIiwicG9wIiwicGxheWVyVG9vbHMiLCJ1bCIsImxpIiwiY3JlYXRlVGV4dE5vZGUiLCJ1cGRhdGVUb29sVUkiLCJnZXRUb29sVmFsdWVGb3JSZXNvdXJjZSIsInNvcnRlZFRvb2xzIiwic29ydCIsInJlc291cmNlTGlzdCIsImdvbGRBbW91bnRFbCIsImJ1eVJlc291cmNlIiwicHJpY2UiLCJzZWxsUmVzb3VyY2UiLCJnZW5lcmF0ZVRyYWRlVGFibGUiLCJyb3ciLCJyYW5kb20iLCJmbG9hdFRleHQiLCJhbG9uZUVsZW1lbnQiLCJidWlsZGluZ0NvdW50IiwiYnVpbGRpbmdMaXN0IiwiY29sIiwiYnV0dG9uQ29uZmlnIiwic3RhdGUiLCJjcmFmdGVkIiwicmVxUG9uZGVyIiwidG9vbHRpcCIsImRlc2MiLCJlZmZlY3QiLCJjb2xvckNsYXNzIiwic2Vjb25kc1JlbWFpbmluZyIsInJpZ2h0Iiwic2hvd1Rvb2x0aXAiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==