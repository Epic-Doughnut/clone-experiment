(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},151:(e,t,o)=>{const{buildings:s}=o(882),{buttons:n}=o(54),{resources:i}=o(587),{increaseMaterial:r,increaseMax:a}=o(594),{canBuyBuilding:c,updateSidebar:l}=o(78),{updateTotal:d}=o(150),{hasPerk:u}=o(134),{capitalizeFirst:f}=o(681),{getMaterial:p}=o(924),{passedStage:b}=o(751);function g(e,t,o){let s=t[e];if(s&&s.cost&&s.ratio)for(let e in s.cost)s.cost[e]=Math.round(s.basecost[e]*Math.pow(s.ratio,s.count)),o("Architect")&&(s.cost[e]*=.75);const n=document.querySelector("#"+e);var i=h(s.cost);if(!n)throw"Button not found for "+e;{n.setAttribute("data-tooltip-cost",i);const e=function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));t.push(`+${e}% ${o} production`)}return t.join(", ")}(s);n.setAttribute("data-tooltip-effect",e)}}function h(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")}function m(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e,t){return function(o){const s=Object.entries(e).every((([e,t])=>p(e,o)>=Math.floor(t/2))),n=!t.effects||!t.effects.clones||b("clones");return s&&n}}(o.cost,o);return{class:"tooltip "+e,tab:"production",text:`${e.charAt(0).toUpperCase()+e.slice(1)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}}for(let e in s){const t=m(e,s);n[e]=t}function y(e){console.log("Buying building "+e);const t=s[e];if(c(e)){for(const e in t.cost)r(e,-t.cost[e]);for(const e in t.effects)a(e,t.effects[e]);t.count++,l(),d(),v(e,t.count),g(e,s,u)}}function v(e,t){document.getElementById(`${e}`).textContent=`${f(e).split("_").join(" ")} (${t})`}e.exports={recalculateBuildingCost:g,generateBuildingTooltipCost:h,createBuildingButton:m,updateBuildingButtonCount:v,buyMaxBuildings:function(e){for(;c(e);)y(e)},buyBuilding:y}},64:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=n[e].cost;try{for(let e in o)if(i(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},51:(e,t,o)=>{const{craftedResources:s}=o(371),{resources:n}=o(587),{increaseMaterial:i,getMaterial:r,craftResource:a}=o(594);var c={clay:["bricks"],herbs:["medicine"],hides:["leather"],iron:["steel","nails"],ore:["iron","silver","gold"],sand:["glass","concrete"],rocks:["slabs"],vines:["rope"],wood:["paper","beams","crates"]},l=[];function d(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const o=document.createElement("span"),s=document.createElement("select");Object.values(c).forEach((e=>{e.forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,s.appendChild(t)}))})),s.addEventListener("change",(function(){document.querySelector(`#resource-${s.value}`).style.color="thistle";let e=null;for(const[t,o]of Object.entries(c))if(o.includes(s.value)){e=t;break}e&&(o.textContent=e)}));const n=document.createElement("span");n.innerHTML="&#8594;",t.appendChild(o),t.appendChild(n),t.appendChild(s),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.disabled=!0,o.selected=!0,e.appendChild(o)}(s),e.appendChild(t)}Object.keys(n).forEach((e=>l.push(e))),Object.keys(s).forEach((e=>l.push(e))),console.log("All materials: ",l);let u=2,f=30;var p=50;e.exports={createFactoryDiv:d,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("span:first-child"),o=e.querySelector("select:last-child"),s=t.textContent,n=o.value;console.log("checking factory",s,n),s&&n&&function(e,t){let o=Math.min(u,r(e));o*=1;for(let e=0;e<o;++e)a(t)}(s,n)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");r("silver")<p?console.log("Not enough silver!"):(i("silver",-p),d(),p*=1.2,e.setAttribute("data-tooltip-cost",`${p.toFixed(2)} silver`))},upgradeBulk:function(){u+=2,f+=10,document.getElementById("upgradeBulkButton").setAttribute("data-tooltip-cost",`${u} → ${u+2}: ${f.toFixed(0)} silver`)},allMaterials:l}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)?t[e].value||0:(console.warn("Invalid crafted resource:"+e),0)}},924:(e,t,o)=>{const{getCraftedResource:s}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},78:(e,t,o)=>{const{resources:s}=o(587),{skills:n}=o(324),{buildings:i}=o(882),{getMaterial:r}=o(924);let a=new Set(["gatherSticks"]);function c(e){return s.hasOwnProperty(e)?s[e].max:1/0}function l(e){function t(e,t){return e<10?o(e,3)+t:e<100?o(e,2)+t:e<1e3?o(e,1)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,2):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):e.toString()}t.allVisibleButtons=a;const d=document.getElementById("levelUpMessage");let u=!1;function f(){const e=document.getElementById("skillsTable");if(u)for(let e in n){(n[e].exp>0||n[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=n[e].exp+"%",document.querySelector("#level-"+e).textContent="["+n[e].level+"]   "+e)}else{console.log("Generating table for the first time"),u=!0;for(let t in n){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent="["+n[t].level+"]   "+t,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==n[t].exp&&0==n[t].level&&(o.style.display="none"),s.appendChild(i),s.appendChild(r),o.appendChild(s),e.appendChild(o)}}}e.exports={getMaterial:r,getMax:c,updateSidebar:function(){Array.from(o(51).allMaterials).forEach((e=>o(594).updateDisplayValue(e)));for(const[n,i]of Object.entries(s)){const r=document.getElementById("resource-"+n);if(!r)return;var e=!0;for(let t in r.classList)o(751).passedStage(t)&&(e=!1,console.log("dont hide",n,t));i.value>0&&(e=!1,s[n].isVisible=!0),i.isVisible&&(e=!1),e&&(r.style.display="none");const a=document.getElementById(n+"Value");if(a){var t="#fff";i.value===c(n)?t="#fcc":i.value/c(n)>.6&&(t="#eeb"),a.innerHTML=`<span style="color:${t}">${l(i.value)} / ${l(c(n))} </span>`}}},updateSkills:function(e,t){t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05);for(let o in n)if(n[o].affectedResources.includes(e)){if(n[o].level>=100){n[o].level=100,n[o].exp=0;continue}n[o].exp+=t/Math.pow(1.4,n[o].level),n[o].exp>=100&&(n[o].level+=1,n[o].exp=0,d.textContent=`Level up! ${o} → ${n[o].level}`,d.classList.remove("hidden"),setTimeout((()=>{d.classList.add("hidden")}),3e3))}o(751).passedStage("skillsTable")&&f()},populateSkillsTable:f,calcCraftBonus:function(e){return 1},isButtonIdVisible:function(e){return a.has(e)},setVisibleButton:function(e){a.add(e)},canBuyBuilding:function(e){let t=!0;const o=i[e];for(const e in o.cost)if(o.cost[e]>r(e,s)){t=!1;break}return t},hasGeneratedSkillTable:u,clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combat",hunting:"hunting"}},150:(e,t,o)=>{const{skills:s}=o(324),{resources:n}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),c={};for(let e in s)c[e]=0;const l=document.getElementById("jobsTab");function d(){var e=0;for(let t in c)e+=c[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),l.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");i("clones",n)>d()&&c[e]++,f(e,c[e]),p(e),b(),console.log(u)}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");c[e]>0&&(c[e]--,f(e,c[e]),p(e),b())}))}));let u=new Map;function f(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let e of o)u.set(e,r);let a=t-r*i;for(let e of o)a>0&&(u.set(e,u.get(e)+1),a--)}function p(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${c[e]}`),o(594).updateEmojiDisplay()}function b(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+d()+" / "+a("clones")}let g=new Map,h=document.getElementById("lineCanvas"),m=h.getContext("2d");function y(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;m.beginPath(),m.moveTo(n,i),m.lineTo(t,o),m.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,d=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(m,n,i,t,o,10)}function v(e,t){let o=c[e];c[e]=0,c[t]+=o,p(e),p(t)}h.width=window.innerWidth,h.height=window.innerHeight,e.exports={clearJobAssignments:function(){m.clearRect(0,0,h.width,h.height),g=new Map},reassignJobsBasedOnResources:function(){try{const e=g.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let l=!0,d=s[e].affectedResources;if(!d)return;for(const e of d)if(void 0!==n[e]&&i(e)<n[e].max){l=!1;break}l&&c[e]>0&&(v(r,a),f(r,c[r]),f(a,c[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:v,drawAllConnections:function(){m.clearRect(0,0,h.width,h.height);try{for(let[e,t]of g.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,y(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return u.get(e)},updateTotal:b,setConnections:function(e){g=e},getConnections:function(){return g},distributeWorkers:f,updateDisplay:p,jobCounts:c}},882:e=>{const t={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.3,tooltipDesc:"For when you need a home away from home."},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.2,tooltipDesc:"A cozy, idyllic chunk of wood."},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.4,tooltipDesc:"Every clone's dream. Minus the white picket fence."},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home."},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.1,tooltipDesc:"The ultimate storage solution for the pack rat in you."},stockpile:{basecost:{rocks:30},effects:{wood:100},ratio:1.1,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.1,tooltipDesc:"Air drying: Nature's way of preserving food."},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.2,tooltipDesc:"DIY's dream destination."},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing."},bakery:{basecost:{wood:80,wheat:100,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready."},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you."},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster."},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required."},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore."},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.05},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted."},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!"},fishery:{basecost:{wood:40,rope:15},effects:{},boost:{fish:1.1},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food."},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals."},water_well:{basecost:{rocks:30,rope:1,wood:10},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar."},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather."},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.2,herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter."},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power."},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly."},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!"}};e.exports={buildings:t,getBuildingCount:function(e){return t[e].count},getBoost:function(e,o){const s=t[e];if(s&&s.boost){if(s.boost[o])return s.boost[o];if(s.boost.all)return s.boost.all}return null}}},54:(e,t,o)=>{const{passedStage:s}=o(751),{getMaterial:n}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:s}=o(924),{getCraftedResource:n}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocks",value:0,cost:{rocks:2},craftedOnce:!1,requirement:()=>s("rocks",i)>=5,tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRope",value:0,cost:{vines:3},craftedOnce:!1,requirement:()=>s("vines",i)>=3,tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"rope"},handle:{id:"craftHandle",value:0,cost:{sticks:2},craftedOnce:!1,requirement:()=>n("sharpRocks")>=1,tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaff",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requirement:()=>n("handle")>=1,tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requirement:()=>r("fishing"),tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"rope"},spear:{id:"craftSpear",value:0,cost:{staff:1,sharpRocks:1,rope:1},craftedOnce:!1,requirement:()=>n("staff")>=1,tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxe",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requirement:()=>n("spear")>=1,tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"rope"},pickaxe:{id:"craftPickaxe",value:0,cost:{handle:1,sharpRocks:3,rope:1,rocks:10},craftedOnce:!1,requirement:()=>n("axe")>=1,tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"rope"},glass:{id:"craftGlass",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requirement:()=>r("glassBlowing")},paper:{id:"craftPaper",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requirement:()=>r("paper")},gold:{id:"craftGold",value:0,cost:{ore:100},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIron",value:0,cost:{ore:20},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilver",value:0,cost:{ore:50},craftedOnce:!1,requirement:()=>r("metalWorking"),tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricks",value:0,cost:{clay:15},craftedOnce:!1,requirement:()=>s("clay",i)>5,tooltipDesc:"Leave some clay by the fire",tooltipCost:""},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(let t in a)if(a[t].id===e)return a[t];return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{e.exports={ponders:{ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:40},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 1%",cost:{ponder:140}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:150}},combat:{id:"ponderCombat",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:140,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}}}}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},smithing:{exp:0,level:0,affectedResources:["axe","pickaxe","spear","glass","iron","silver","gold"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:[]},fishing:{exp:0,level:0,affectedResources:["fish","freshwater"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,getCraftedResourceConfigById:n}=o(371),{buildings:i}=o(882),{ponders:r}=o(397),{buttons:a}=o(54),{resources:c,getResourceConfigById:l}=o(587),{saveGame:d,loadGame:u}=o(502),{generateTooltipCost:f,appendCraftedResourceButtons:p,increaseMaterial:b,craftAllResources:g,craftResource:h,calcIncrease:m,updateResourceIncreaseRates:y,calcSecondsRemaining:v,increaseMax:k,initializeResourceTags:x}=o(594),{recalculateBuildingCost:w,buyMaxBuildings:C,buyBuilding:T}=o(151),{hasPerk:B,selectAbility:S}=o(134),{updateSidebar:A,getMax:E,clearSidebar:M}=o(78),{makeVisible:R}=o(123),{updateButtonVisibility:q}=o(667),{getCraftedResource:D}=o(590),{getMaterial:j}=o(924),{createFactoryDiv:F,buyFactory:P,attemptManufacture:L,upgradeBulk:$}=o(51),{isPondered:I,generatePonderButtons:O}=o(369),{hasTool:G,addTool:V}=o(609),{getAteFish:W,setAteFish:N}=o(621),{drawAllConnections:H,updateTotal:_}=o(150),{capitalizeFirst:J}=o(681),{passedStage:z}=o(751),U=document.querySelector("#resources"),Y=document.querySelector("#emojiGatherDisplay"),K={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},Q=[{condition:()=>j("sticks",c)>=1,action:()=>R("stick")},{condition:()=>j("sticks",c)>=10,action:()=>R("vines")},{condition:()=>j("vines",c)>=10,action:()=>R("rocks")},{condition:()=>j("rocks",c)>=1,action:()=>{R("tab-button"),R("craftRocks")}},{condition:()=>j("fish",c)>=1,action:()=>R("fishing")},{condition:()=>G("Axe"),action:()=>R("wood")},{condition:()=>D("rope")>=1,action:()=>R("rope")},{condition:()=>j("fish",c)>=5&&!W(),action:()=>{document.getElementById("eatFish").style.display="block",document.getElementById("eatFish").classList.add("visible")}},{condition:()=>W(),action:()=>{R("clone"),R("ponder-tab")}},{condition:()=>I("ponderFinish"),action:()=>(document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))}];let X=document.querySelectorAll(".tab-content > .content");function Z(e){console.log("show tab: "+e);let t="";for(let e of X)e.classList.contains("active")&&(t=e.id,e.classList.remove("active"));let o=document.querySelectorAll(".tab-button");for(let e of o)e.classList.remove("active");document.getElementById(e).classList.add("active");const s=`#${e}Button`;let n=document.querySelector(s);n&&n.classList.add("active"),"jobsTab"===e&&H(),"factoryTab"===e&&"factoryTab"!==t?(M(),x()):"factoryTab"===t&&(M(),A())}document.addEventListener("keydown",(function(e){switch(e.key){case"1":Z("productionTab");break;case"2":z("tab-button")&&Z("experimentTab");break;case"3":z("ponder-tab")&&Z("ponderTab");break;case"4":z("jobs-tab")&&Z("jobsTab");break;case"5":z("skillsTable")&&Z("skillsTab");break;case"6":z("perksTab")&&Z("perksTab");break;case"7":Z("factoryTab")}}));const ee=document.getElementById("darkModeToggle"),te=document.body;te.classList.toggle("dark-mode"),ee.classList.toggle("dark");let oe=!0;const se=document.getElementById("overlay"),ne=document.getElementById("message");function ie(e,t){const o=e.replace(t,`<span id="alone" title="You feel peckish for some seafood">${t}</span>`);ne.innerHTML=o}let re=50,ae=null,ce=0,le=0;function de(e){null===ae&&(ae=e);const t=e-ae;ce+=t,le+=t,ae=e;let o=re;for(le>=10*re&&(re=le/10);le>=re;)le-=re,pe(re);re=o,requestAnimationFrame(de)}let ue=0,fe=0;function pe(e,t){for(let t in c)b(t,m(t,e));y(),function(){Q.forEach((e=>{e.condition()&&e.action()}));for(let e in K)!G(e)&&D(e)>0&&(V(e),R(K[e]));try{q(),null!==he&&ge(he)}catch(e){console.warn(e)}}(),ue+=e,fe+=e,ue>=1e4&&(d(),ue=0),fe>=1e3&&(L(),fe=0)}const be=document.getElementById("dynamic-tooltip");function ge(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),s=l(e.id)||n(e.id)||i[e.getAttribute("data_building")]||r[e.getAttribute("unlock")],a=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||s.cost;!function(e,t,o,s){let n="";if(t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#00ABE7">${o}</span><hr>`),s)try{var i="";for(let e in s){const t=s[e];var r=j(e,c)>=t?"enough":"not-enough";E(e)<t&&(r="exceeds-max"),i+=`<span class="tooltip-${e} ${r}">${t.toFixed(0)} ${e}</span>`;const o=v(e,t);o>0&&"exceeds-max"!=r&&(i+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),i+="<br>"}n+=i}catch(e){n+=s}be.innerHTML=n,be.style.left=e.getBoundingClientRect().right+5+"px",be.style.top=e.getBoundingClientRect().top-be.offsetHeight/2+"px",be.style.display="block"}(e,t,o,a)}document.addEventListener("DOMContentLoaded",(e=>{function t(e){for(let t in s)if(s[t].id===e)return t;return""}O(r),p(),function(){console.log("Generating buttons"),console.trace();const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),n=document.getElementById("experimentTab").querySelector(".button-columns"),r=document.getElementById("ponderTab"),c=e(o),l=e(n),d=e(r);let u=0,p=0,b=0;for(let e in a){const o=a[e],n=document.createElement("button");n.id=e,n.className=o.class,n.textContent=o.text,o.tooltipDesc&&n.setAttribute("data-tooltip-desc",o.tooltipDesc),o.tooltipEffect&&n.setAttribute("data-tooltip-effect",o.tooltipEffect),n.setAttribute("unlock",o.unlock),n.setAttribute("data_building",o.data_building);const r=Object.values(s).find((t=>t.id===e));r&&(o.tooltipCost=f(r.cost)),n.setAttribute("data-tooltip-cost",o.tooltipCost),o.showTab&&n.addEventListener("click",(()=>{Z(o.showTab),console.log("Switching to tab: "+o.showTab)})),"production"===o.tab?(c[u].appendChild(n),u=(u+1)%3):"experiment"===o.tab?(l[p].appendChild(n),p=(p+1)%3):"tabs"===o.tab?t.appendChild(n):"ponder"===o.tab?(d[b].appendChild(n),b=(b+1)%3):o.tab,Object.keys(i).find((t=>t===e))&&w(e,i,B);try{o.requirement()||(n.style.display="none")}catch(e){}}}(),u(),A(),Z("productionTab"),o(864).generateTradeTable(c),document.addEventListener("click",(e=>{if(e.target.matches("button")){const n=e.target;if(n.getAttribute("data_building")&&"undefined"!==n.getAttribute("data_building")&&n.classList.contains("purchasable")){var o=n.getAttribute("data_building");e.shiftKey?C(o):T(o)}if(n.classList.contains("unlock")){const e=n.getAttribute("unlock");if(console.log(e),r[e]){var s=!0;for(let t in r[e].cost)if(j(t,c)<r[e].cost[t]){console.log("Cannot unlock "+e),s=!1;break}if(s){for(let t in r[e].cost)b(t,-r[e].cost[t]);r[e].isPondered=!0,R(e),n.display="none",console.log("Unlocking "+e)}}}if("undefined"!==n.id&&(console.log(n),"gather"===n.id.slice(0,6)?function(e){const t=c[e],o=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));t.isGetting?(t.isGetting=!1,s.textContent=t.defaultText,o&&(o.style.fontWeight="normal")):(function(){for(let e in c){c[e].isGetting=!1;const t=document.querySelector("#gather"+J(e));t&&(t.textContent=c[e].defaultText);const o=U.querySelector("#resource-"+e);o&&(o.style.fontWeight="normal")}}(),t.isGetting=!0,s.textContent=t.activeText,o&&(o.style.fontWeight="bold"),Y.textContent=t.emoji,console.log(t.emoji))}(function(e){for(let t in c)if(c[t].id===e)return t;return""}(n.id)):"craft"===n.id.slice(0,5)?e.shiftKey?g(t(n.id)):h(t(n.id)):"saveButton"===n.id?d():"eatFish"===n.id?!W()&&j("fish",c)>=1&&(b("fish",-1),function(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block"}),5e3)}(),N(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{ie("You are with yourself in a forest.","with yourself"),k("clones",1),b("clones",1)}),1e3)):"overlay-button"===n.id?se.style.display="none":"deleteSaveButton"===n.id?(localStorage.removeItem("save"),location.reload()):"clearJobAssignments"===n.id?clearJobAssignments():"darkModeToggle"===n.id?(te.classList.toggle("dark-mode"),ee.classList.toggle("dark"),oe=!oe,ee.textContent=oe?"Light Mode":"Dark Mode"):"2main"===n.id?Z("mainTab"):"2graphs"===n.id&&Z("graphsTab")),n.classList.contains("tierOneButton")){let e=n.textContent;S(e)}}e.target.matches("#alone")&&(c.clones.value<c.clones.max&&(c.clones.value+=1),_())})),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("data-tooltip-cost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),P()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("data-tooltip-cost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),$()}))}(),F(),requestAnimationFrame(de),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){ge(e),he=e})),e.addEventListener("onclick",(function(){ge(e)})),e.addEventListener("mouseleave",(function(){be.style.display="none",he=null}))})),_()}));var he=null;e.exports={updateSidebar:A,updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${c[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){ce=e},changeMessage:ie,getMessage:function(){return ne},total_time:ce,currentHoverButton:he}},123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){n(e)||s(e);const t=document.querySelectorAll("p."+e);t.forEach((e=>e.classList.add("visible"))),t.forEach((e=>e.style.display="")),i()}},134:(e,t,o)=>{const{buildings:s}=o(882),{perks:n}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e)for(let e in s)o(151).recalculateBuildingCost(e,s,r)}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i}}},369:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{ponders:n}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:i.tooltipCost,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{buildings:i,getBoost:r}=o(882),{ponders:a}=o(397),{buttons:c}=o(54),{skills:l}=o(324),{getWorkers:d,updateTotal:u,reassignJobsBasedOnResources:f}=o(150),{hasTool:p,getToolValueForResource:b}=o(609),{updateSidebar:g,updateSkills:h,calcCraftBonus:m,getMax:y}=o(78),{canCraft:v}=o(64),{capitalizeFirst:k}=o(681),{getMaterial:x}=o(924),{hasPerk:w}=o(134),{isPondered:C}=o(369),{getCraftedResource:T}=o(590);function B(e,t){var o=0;if(n.hasOwnProperty(e));else if(!s.hasOwnProperty(e))return o;"clones"===e&&C("autoClone")&&(o=1);var a=b(s[e]);s[e].isGetting&&(o+=a),o+=(w("Leader")?.375:.25)*d(e)||0,!w("Lumberjack")||"wood"!=e&&"sticks"!=e||(o*=1.25),!w("Miner")||"rocks"!=e&&"ore"!=e||(o*=1.25),!w("Botanist")||"vines"!=e&&"herbs"!=e&&"wheat"!=e||(o*=1.25);for(let t in l)if(l[t].affectedResources.includes(e)){let e=1.06;o*=1+(Math.pow(e,l[t].level)-1)/100}for(let t in i){const s=r(t,e);if(s){var c=Math.pow(s,i[t].count);C("effectiveBuildings")&&(c*=1.01),o*=c}}return"ponder"===e&&C("ponder1")&&(o*=1.05),C("fasterResourceGain")&&(o*=1.05),o*=t/1e3,parseFloat(o.toFixed(3))}const S=document.getElementById("resources");function A(e,t){let o;console.log("Creating resource tag for ",e,t),t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),S.appendChild(o))):o=document.getElementById("resources");const s=k(e).split("_").join(" "),n=document.createElement("p");n.className=`${e} resource`,n.id=`resource-${e}`;const i=document.createElement("span");i.className="resourceName",i.textContent=`${s}:`;const r=document.createElement("span");r.className="resourceValue",r.id=`${e}Value`;let a=y(e)===1/0?"∞":y(e).toFixed(2);r.textContent=`${x(e).toFixed(2)} / ${a}`;const c=document.createElement("span");function l(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}c.className="resourceRate",c.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,n.appendChild(i),n.appendChild(r),n.appendChild(c),o.appendChild(n),l("resource-clones",1),l("resource-sticks",2),l("resource-vines",3),l("resource-rocks",4),l("resource-fish",5),l("resource-freshwater",6),l("resource-wood",7),l("resource-ore",8),l("resource-sand",9),l("resource-clay",10),l("resource-wheat",11),l("resource-hides",12),l("resource-game",13),l("resource-herbs",14),l("resource-berries",15),l("resource-ponder",50)}const E={basics:["clones","sticks","berries","fish","game","wheat","freshwater"],materials:["wood","ore","sand","clay","vines","rocks","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};function M(e){const t=S.querySelector(`#${e}Value`),o=document.querySelector(`button#craft${k(e)}`);try{t||A(e)}catch(e){}if(t){try{let o=y(e)===1/0?"∞":y(e).toFixed(2);t.textContent=`${x(e).toFixed(2)} / ${o}`}catch(o){console.error(t,e,o)}if(s[e]){const t=document.querySelector("#resources").querySelector("#resource-"+e);s[e].isGetting&&t&&(t.style.fontWeight="bold")}}if(o){const t=o.querySelector(`#${e}Value`);t?t.textContent=T(e).toFixed(0):console.warn(`Resource button found but no count span for: ${e}`)}}function R(e,t){0!=t&&(e=e.toLowerCase(),s.hasOwnProperty(e)?(x(e)<y(e)&&t>0?(C("fasterResourceGain")&&(t*=1.05),s[e].value+=t,h(e,t)):t<0?s[e].value+=t:(s[e].value=y(e),C("autocraft")&&document.querySelector("#autoCraftCheckbox").checked&&L[e]&&$(L[e])),M(e),f()):n.hasOwnProperty(e)?(n[e].value+=t,M(e),h(e,t)):(A(e),R(e,t)),g())}function q(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.requirement=e.requirement;const o=Object.keys(n).find((t=>n[t]===e)),s=parseFloat(n[o].value).toFixed(0);return t.innerHTML=`${e.text||k(o)}: <span id="${o+"Value"}">${s}</span>`,t.tab="experiment",t}const D=document.querySelector("#craftedResourceButtons");function j(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${x(o,s)>=e[o]?"enough":"not-enough"}">${e[o]} ${o}</span><br>`;return t}const F=document.getElementById("emojiDisplay");function P(){let e="";for(let t in s){let o=d(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=n.repeat(o))}F.textContent=e,function(){let e=48;for(F.style.fontSize=`${e}px`;F.offsetWidth>600&&e>30;)e-=1,F.style.fontSize=`${e}px`}()}P();const L={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function $(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(x(e,s)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),function(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!v(e))return;let o=n[e].cost;for(let e in o)R(e,-o[e]*t);R(e,t),n[e].craftedOnce||(n[e].craftedOnce=!0),M(e)}(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}}e.exports={getMaterial:x,increaseMaterial:R,setMax:function(e,t){s[e].max=t,g(),u()},increaseMax:function(e,t){s[e].max+=t,g(),u()},craftAllResources:$,craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!v(e))return;let t=n[e].cost;m(e),function(e,t,o){for(let e in t)R(e,-t[e]);R(e,1)}(e,t),n[e].craftedOnce||(n[e].craftedOnce=!0),M(e)},updateEmojiDisplay:P,updateDisplayValue:M,generateTooltipCost:j,calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=B(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},createResourceTag:A,appendCraftedResourceButtons:function(){for(let e in n){const t=q(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",j(n[e].cost)||""),D.appendChild(t),c[n[e].id]=n[e]}},calcIncrease:B,updateResourceIncreaseRates:function(){for(let t in s){const o=B(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},initializeResourceTags:function(){for(let e in E)E[e].forEach((t=>{try{A(t,e)}catch(e){console.log(e)}}))}}},502:(e,t,o)=>{const{updateBuildingButtonCount:s,recalculateBuildingCost:n}=o(151),{updateDisplayValue:i,calcIncrease:r,updateEmojiDisplay:a}=o(594),{addTool:c,getAllTools:l}=o(609),{allVisibleButtons:d,updateSidebar:u,populateSkillsTable:f,setVisibleButton:p}=o(78),{makeVisible:b}=o(123),{getCraftedResource:g}=o(590),{getMaterial:h}=o(924),{getAllPerks:m,addPerk:y,hasPerk:v}=o(134),{isPondered:k}=o(369),{jobCounts:x,setConnections:w,getConnections:C,distributeWorkers:T,updateDisplay:B}=o(150),{total_time:S}=o(808),{setAteFish:A,getAteFish:E}=o(621),{craftedResources:M}=o(371),{buildings:R}=o(882),{ponders:q}=o(397),{resources:D}=o(587),{skills:j}=o(324),{getAllStages:F}=o(751);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[]};for(let t in j)e.skills[t]={exp:j[t].exp,level:j[t].level};for(let t in M)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=g(t),e.craftedResources[t].craftedOnce=M[t].craftedOnce;for(let t in D)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=h(t,D),e.resources[t].max=D[t].max;e.tools=l(),e.stages=F(),e.jobs=x,e.perks=m(),e.connections=Array.from(C().entries());for(let t in q)e.unlocks[t]=k(t);for(let t in R)e.buildings[t]=R[t].count;for(let t in d)e.allVisibleButtons.push(t);const t=o(808).getMessage().innerHTML;return e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t),e.time.total_time=S,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(D[t].value=e.resources[t].value,D[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=D[t].value&&i(t));if(void 0!==e.skills)for(let t in e.skills)j[t].exp=e.skills[t].exp,j[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))M[t]&&(M[t].value=e.craftedResources[t].value,Number.isNaN(M[t].value)&&(M[t].value=0),M[t].craftedOnce=e.craftedResources[t].craftedOnce,i(t));if(void 0!==e.tools){let t=[...new Set([...l(),...e.tools])];for(let e in t)c(e)}if(void 0!==e.stages)for(let t in e.stages)b(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)x[t]=e.jobs[t],B(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{q[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(k("skillsTable")&&f(),void 0!==e.buildings){for(let t in e.buildings)R[t].count=e.buildings[t],s(t,R[t].count),n(t,R,v);u()}if(A(D.clones.max>=1),E()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[S]);const t=Date.now()-e.time.time_of_save;for(let e in D){const o=r(e,t);D[e].value+=o,D[e].value>D[e].max&&(D[e].value=D[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)p(t)}void 0!==e.connections&&(w(new Map(e.connections)),0===C().size&&w(new Map),console.log(C()));for(let e in x)T(e,x[e]);if(a(),void 0!==e.perks)for(let t in e.perks)y(t),o(495).selectCorrectPerkButton(t)}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return t.includes(e)},getAllStages:function(){return t}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(e.tools){const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val}return 1}}},864:(e,t,o)=>{const{getMaterial:s}=o(924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){s("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),i.textContent=s("gold",o(587).resources))}function a(e,t){s(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),i.textContent=s("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},667:(e,t,o)=>{const{buttons:s}=o(54),{getCraftedResourceConfigById:n}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,canBuyBuilding:d,setVisibleButton:u}=o(78),{canCraft:f}=o(64),{getMaterial:p}=o(924);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var p=n(t.id);p.value>0&&(o="button-disabled");const e=c(p);f(e)&&(o="purchasable")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=d(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(s),e.style.display="")}))}}},t={};!function o(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEMsR0NqSkkrWixFQUEyQixDQUFDLEdBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJyVCxJQUFqQnNULEVBQ0gsT0FBT0EsRUFBYWxrQixRQUdyQixJQUFJRCxFQUFTZ2tCLEVBQXlCRSxHQUFZLENBR2pEamtCLFFBQVMsQ0FBQyxHQU9YLE9BSEFta0IsRUFBb0JGLEdBQVVsa0IsRUFBUUEsRUFBT0MsUUFBU2drQixHQUcvQ2prQixFQUFPQyxPQUNmLENDbkIwQmdrQixDQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvYXRlRmlzaC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9idWlsZGluZ3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FuQ3JhZnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FwaXRhbGl6ZUZpcnN0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2V0Q3JhZnRlZFJlc291cmNlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2dldE1hdGVyaWFsLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2hlbHBlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qb2JSZXF1aXJlZFBvbmRlcnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvam9icy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2J1aWxkaW5ncy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2J1dHRvbnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9jcmFmdGVkUmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vcGVya3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wb25kZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9za2lsbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvbWFpbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9tYWtlVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9wZXJrcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9wb25kZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NhdmluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zdGFnZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdG9vbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdHJhZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlQnV0dG9uVmlzaWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhdGVGaXNoID0gZmFsc2U7XHJcblxyXG5mdW5jdGlvbiBzZXRBdGVGaXNoKGJvb2wpIHtcclxuICAgIGF0ZUZpc2ggPSBib29sO1xyXG4gICAgcmV0dXJuIGF0ZUZpc2g7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QXRlRmlzaCgpIHtcclxuICAgIHJldHVybiBhdGVGaXNoO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGF0ZUZpc2gsXHJcbiAgICBzZXRBdGVGaXNoLFxyXG4gICAgZ2V0QXRlRmlzaFxyXG59OyIsImNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgYnV0dG9ucyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1dHRvbnMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBpbmNyZWFzZU1hdGVyaWFsLCBpbmNyZWFzZU1heCB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBjYW5CdXlCdWlsZGluZywgdXBkYXRlU2lkZWJhciB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyB1cGRhdGVUb3RhbCB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgaGFzUGVyayB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5cclxuLyogQlVJTERJTkdTICovXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtPYmplY3R9IGJ1aWxkaW5nIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRWZmZWN0U3RyaW5nKGJ1aWxkaW5nKSB7XHJcbiAgICBsZXQgZWZmZWN0UGFydHMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBbcmVzb3VyY2UsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZy5lZmZlY3RzKSkge1xyXG4gICAgICAgIC8vIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhlZmZlY3QpKSB7XHJcbiAgICAgICAgZWZmZWN0UGFydHMucHVzaChgKyR7dmFsdWV9IG1heCAke3Jlc291cmNlfWApO1xyXG4gICAgICAgIC8vIEFkZCBtb3JlIGNvbmRpdGlvbnMgaGVyZSBpZiB5b3UgaW50cm9kdWNlIG5ldyB0eXBlcyBvZiBlZmZlY3RzXHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IFtyZXNvdXJjZSwgYm9vc3RdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmJvb3N0KSkge1xyXG4gICAgICAgIGxldCBwZXJjZW50YWdlQm9vc3QgPSBNYXRoLnJvdW5kKChib29zdCAtIDEpICogMTAwKTtcclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHtwZXJjZW50YWdlQm9vc3R9JSAke3Jlc291cmNlfSBwcm9kdWN0aW9uYCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlZmZlY3RQYXJ0cy5qb2luKCcsICcpO1xyXG59XHJcblxyXG4vLyBVc2FnZTpcclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdLZXkgXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBidWlsZGluZ3NcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gaGFzUGVya1xyXG4gKi9cclxuZnVuY3Rpb24gcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYnVpbGRpbmdLZXksIGJ1aWxkaW5ncywgaGFzUGVyaykge1xyXG4gICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuICAgIGlmIChidWlsZGluZyAmJiBidWlsZGluZy5jb3N0ICYmIGJ1aWxkaW5nLnJhdGlvKSB7XHJcbiAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidWlsZGluZy5iYXNlY29zdFttYXRlcmlhbF0sIGJ1aWxkaW5nLnJhdGlvLCBidWlsZGluZy5jb3VudCk7XHJcbiAgICAgICAgICAgIGJ1aWxkaW5nLmNvc3RbbWF0ZXJpYWxdID0gTWF0aC5yb3VuZChidWlsZGluZy5iYXNlY29zdFttYXRlcmlhbF0gKiBNYXRoLnBvdyhidWlsZGluZy5yYXRpbywgYnVpbGRpbmcuY291bnQpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChoYXNQZXJrKCdBcmNoaXRlY3QnKSkgYnVpbGRpbmcuY29zdFttYXRlcmlhbF0gKj0gMC43NTsgLy8gMjUlIHJlZHVjdGlvbiBmb3IgYXJjaGl0ZWN0c1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdG9vbHRpcCBjb3N0XHJcbiAgICBjb25zdCBteUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYnVpbGRpbmdLZXkpO1xyXG4gICAgdmFyIG5ld1RleHQgPSBnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QoYnVpbGRpbmcuY29zdCk7XHJcbiAgICBpZiAobXlCdXR0b24pIHtcclxuICAgICAgICBteUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgbmV3VGV4dCk7XHJcbiAgICAgICAgY29uc3QgZWZmZWN0U3RyaW5nID0gZ2VuZXJhdGVFZmZlY3RTdHJpbmcoYnVpbGRpbmcpO1xyXG4gICAgICAgIG15QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWVmZmVjdCcsIGVmZmVjdFN0cmluZyk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSB7IHRocm93IFwiQnV0dG9uIG5vdCBmb3VuZCBmb3IgXCIgKyBidWlsZGluZ0tleTsgfVxyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdChjb3N0KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoY29zdCkubWFwKChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IGAke2Ftb3VudC50b0ZpeGVkKDIpfSAke21hdGVyaWFsfWApLmpvaW4oJ1xcbicpO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQnVpbGRpbmdCdXR0b24oYnVpbGRpbmdLZXksIGJ1aWxkaW5ncykge1xyXG4gICAgY29uc3QgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdLZXldO1xyXG5cclxuICAgIC8vIGJ1aWxkaW5nLmNvc3QgPSBidWlsZGluZy5iYXNlY29zdDtcclxuICAgIGJ1aWxkaW5nLmNvc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGJ1aWxkaW5nLmJhc2Vjb3N0KSk7XHJcblxyXG4gICAgY29uc3QgY29zdHMgPSBPYmplY3QuZW50cmllcyhidWlsZGluZy5jb3N0KVxyXG4gICAgICAgIC5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYCR7bWF0ZXJpYWx9OiAke2Ftb3VudH1gKVxyXG4gICAgICAgIC5qb2luKCcsICcpO1xyXG5cclxuICAgIC8vIGNvbnN0IGhhbGZDb3N0UmVxdWlyZW1lbnQgPSBPYmplY3QuZW50cmllcyhidWlsZGluZy5jb3N0KVxyXG4gICAgLy8gICAgIC5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYGdldE1hdGVyaWFsKCcke21hdGVyaWFsfSxyZXNvdXJjZXMnKSA+PSAke01hdGguZmxvb3IoYW1vdW50IC8gMil9YClcclxuICAgIC8vICAgICAuam9pbignICYmICcpO1xyXG5cclxuICAgIC8vIGxldCByZXF1aXJlbWVudFN0cmluZyA9IGByZXR1cm4gJHtoYWxmQ29zdFJlcXVpcmVtZW50fWA7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGJ1aWxkaW5nIGhhcyBhbiBlZmZlY3Qgb24gY2xvbmVzIG1heFxyXG4gICAgLy8gaWYgKGJ1aWxkaW5nLmVmZmVjdHMgJiYgYnVpbGRpbmcuZWZmZWN0c1snY2xvbmVzJ10pIHtcclxuICAgIC8vICAgICByZXF1aXJlbWVudFN0cmluZyArPSBgICYmIHBhc3NlZFN0YWdlKCdjbG9uZXMnKWA7XHJcbiAgICAvLyB9XHJcbiAgICBjb25zdCByZXF1aXJlbWVudEZ1bmN0aW9uID0gY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbihidWlsZGluZy5jb3N0LCBidWlsZGluZyk7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uID0ge1xyXG4gICAgICAgICdjbGFzcyc6ICd0b29sdGlwICcgKyBidWlsZGluZ0tleSxcclxuICAgICAgICAndGFiJzogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgICd0ZXh0JzogYCR7YnVpbGRpbmdLZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBidWlsZGluZ0tleS5zbGljZSgxKX1gLFxyXG4gICAgICAgICd0b29sdGlwRGVzYyc6IGJ1aWxkaW5nc1tidWlsZGluZ0tleV0udG9vbHRpcERlc2MgfHwgXCJBIG15c3RlcmlvdXMgYnVpbGRpbmcgd2l0aCB1bnRvbGQgYmVuZWZpdHMuXCIsXHJcbiAgICAgICAgJ3Rvb2x0aXBDb3N0JzogY29zdHMsXHJcbiAgICAgICAgJ3JlcXVpcmVtZW50JzogKCkgPT4gcmVxdWlyZW1lbnRGdW5jdGlvbigpLFxyXG4gICAgICAgICdkYXRhX2J1aWxkaW5nJzogYnVpbGRpbmdLZXksXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBidXR0b247XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmVtZW50RnVuY3Rpb24oY29zdHMsIGJ1aWxkaW5nKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlc291cmNlcykge1xyXG4gICAgICAgIGNvbnN0IGNvc3RDb25kaXRpb24gPSBPYmplY3QuZW50cmllcyhjb3N0cylcclxuICAgICAgICAgICAgLmV2ZXJ5KChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IE1hdGguZmxvb3IoYW1vdW50IC8gMikpO1xyXG5cclxuICAgICAgICBjb25zdCBjbG9uZUNvbmRpdGlvbiA9ICFidWlsZGluZy5lZmZlY3RzIHx8ICFidWlsZGluZy5lZmZlY3RzWydjbG9uZXMnXSB8fCBwYXNzZWRTdGFnZSgnY2xvbmVzJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb3N0Q29uZGl0aW9uICYmIGNsb25lQ29uZGl0aW9uO1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5mb3IgKGxldCBidWlsZGluZ0tleSBpbiBidWlsZGluZ3MpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1aWxkaW5nQnV0dG9uKGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpO1xyXG4gICAgYnV0dG9uc1tidWlsZGluZ0tleV0gPSBidXR0b247XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIk1hZGUgYnV0dG9uIGZvciBcIiArIGJ1aWxkaW5nS2V5KTtcclxufVxyXG5cclxuXHJcbi8vIGNvbnNvbGUubG9nKGJ1dHRvbnMpO1xyXG5cclxuZnVuY3Rpb24gZ2V0QnVpbGRpbmdDb3N0KGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgcmV0dXJuIGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdLmNvc3Q7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBidXlCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiQnV5aW5nIGJ1aWxkaW5nIFwiICsgYnVpbGRpbmdOYW1lKTtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG5cclxuXHJcbiAgICBpZiAoIWNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkpIHJldHVybjtcclxuXHJcbiAgICAvLyBTdWJ0cmFjdCB0aGUgY29zdFxyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJSZWR1Y2luZyBcIiwgcmVzb3VyY2UsIFwiYnlcIiwgYnVpbGRpbmcuY29zdFtyZXNvdXJjZV0pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGluY3JlYXNlTWF0ZXJpYWwpO1xyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1idWlsZGluZy5jb3N0W3Jlc291cmNlXSk7XHJcbiAgICB9XHJcbiAgICAvLyBBZGQgdGhlIGVmZmVjdHNcclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gYnVpbGRpbmcuZWZmZWN0cykge1xyXG4gICAgICAgIGluY3JlYXNlTWF4KHJlc291cmNlLCBidWlsZGluZy5lZmZlY3RzW3Jlc291cmNlXSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBBY3R1YWxseSBidWlsZCB0aGUgYnVpbGRpbmdcclxuICAgIGJ1aWxkaW5nLmNvdW50Kys7XHJcblxyXG4gICAgdXBkYXRlU2lkZWJhcigpO1xyXG5cclxuICAgIHVwZGF0ZVRvdGFsKCk7XHJcbiAgICAvLyBVcGRhdGUgYnV0dG9uIHRleHRcclxuICAgIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYnVpbGRpbmdOYW1lLCBidWlsZGluZy5jb3VudCk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBjb3N0IG9mIHRoZSBidWlsZGluZ1xyXG4gICAgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYnVpbGRpbmdOYW1lLCBidWlsZGluZ3MsIGhhc1BlcmspO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidXlNYXhCdWlsZGluZ3MoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICB3aGlsZSAoY2FuQnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKSkge1xyXG4gICAgICAgIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYnVpbGRpbmdOYW1lLCBidWlsZGluZ0NvdW50KSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtidWlsZGluZ05hbWV9YCkudGV4dENvbnRlbnQgPSBgJHtjYXBpdGFsaXplRmlyc3QoYnVpbGRpbmdOYW1lKS5zcGxpdCgnXycpLmpvaW4oJyAnKX0gKCR7YnVpbGRpbmdDb3VudH0pYDtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8vIGZ1bmN0aW9uIGRvdWJsZVN0b3JhZ2VFZmZlY3RzSWZQYXNzZWQoKSB7XHJcbi8vICAgICBpZiAocGFzc2VkU3RhZ2UoXCJkb3VibGVTdG9yYWdlMVwiKSkge1xyXG4vLyAgICAgICAgIGZvciAobGV0IGJ1aWxkaW5nS2V5IGluIGJ1aWxkaW5ncykge1xyXG4vLyAgICAgICAgICAgICBsZXQgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdLZXldO1xyXG5cclxuLy8gICAgICAgICAgICAgaWYgKGJ1aWxkaW5nLmVmZmVjdHMpIHtcclxuLy8gICAgICAgICAgICAgICAgIGZvciAobGV0IG1hdGVyaWFsIGluIGJ1aWxkaW5nLmVmZmVjdHMpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBidWlsZGluZy5lZmZlY3RzW21hdGVyaWFsXS5tYXggKj0gMjtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QsXHJcbiAgICBnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QsXHJcbiAgICBjcmVhdGVCdWlsZGluZ0J1dHRvbixcclxuICAgIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQsXHJcbiAgICBidXlNYXhCdWlsZGluZ3MsXHJcbiAgICBidXlCdWlsZGluZ1xyXG59OyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9jcmFmdGVkUmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5mdW5jdGlvbiBjYW5DcmFmdChyZXNvdXJjZUtleSkge1xyXG4gICAgbGV0IGNhbkNyYWZ0ID0gdHJ1ZTtcclxuICAgIGxldCByZXF1aXJlbWVudHMgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGFsbCByZXF1aXJlbWVudHMgYXJlIG1ldFxyXG4gICAgdHJ5IHtcclxuICAgICAgICBmb3IgKGxldCBtYXQgaW4gcmVxdWlyZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGlmIChnZXRNYXRlcmlhbChtYXQsIHJlc291cmNlcykgPCByZXF1aXJlbWVudHNbbWF0XSkge1xyXG4gICAgICAgICAgICAgICAgY2FuQ3JhZnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBpbiBjYWxjdWxhdGluZyByZXF1aXJlbWVudHM6ICcsIHJlc291cmNlS2V5LCByZXF1aXJlbWVudHMsIGVycik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNhbkNyYWZ0O1xyXG59XHJcbmV4cG9ydHMuY2FuQ3JhZnQgPSBjYW5DcmFmdDsiLCIvKipcclxuICogQ2FwaXRhbGl6ZXMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIHN0cmluZ1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZ0V4YW1wbGVcclxuICogQHJldHVybnMgU3RyaW5nRXhhbXBsZVxyXG4gKi9cclxuZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0KHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcclxufVxyXG5leHBvcnRzLmNhcGl0YWxpemVGaXJzdCA9IGNhcGl0YWxpemVGaXJzdDsiLCJjb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgaW5jcmVhc2VNYXRlcmlhbCwgZ2V0TWF0ZXJpYWwsIGNyYWZ0UmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbi8vIEFzc3VtaW5nIHRoZXNlIGFyZSBkZWZpbmVkIGdsb2JhbGx5XHJcbnZhciBtYW51ZmFjdHVyZWRNYXAgPSB7XHJcbiAgICBjbGF5OiBbJ2JyaWNrcyddLFxyXG4gICAgaGVyYnM6IFsnbWVkaWNpbmUnXSxcclxuICAgIGhpZGVzOiBbJ2xlYXRoZXInXSxcclxuICAgIGlyb246IFsnc3RlZWwnLCAnbmFpbHMnXSxcclxuICAgIG9yZTogWydpcm9uJywgJ3NpbHZlcicsICdnb2xkJ10sXHJcbiAgICBzYW5kOiBbJ2dsYXNzJywgJ2NvbmNyZXRlJ10sXHJcbiAgICByb2NrczogWydzbGFicyddLFxyXG4gICAgdmluZXM6IFsncm9wZSddLFxyXG4gICAgd29vZDogWydwYXBlcicsICdiZWFtcycsICdjcmF0ZXMnXSxcclxufTtcclxuXHJcbnZhciBhbGxNYXRlcmlhbHMgPSBbXTtcclxuT2JqZWN0LmtleXMocmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG5PYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG5jb25zb2xlLmxvZyhcIkFsbCBtYXRlcmlhbHM6IFwiLCBhbGxNYXRlcmlhbHMpO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlRmFjdG9yeURpdigpIHtcclxuICAgIGNvbnN0IGZhY3Rvcmllc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWN0b3JpZXMnKTtcclxuICAgIGNvbnN0IGZhY3RvcnlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGZhY3RvcnlEaXYuY2xhc3NOYW1lID0gJ2ZhY3RvcnknO1xyXG5cclxuICAgIGNvbnN0IGxlZnRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgY29uc3QgcmlnaHRTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuXHJcbiAgICAvLyBQb3B1bGF0ZSB0aGUgcmlnaHQgZHJvcGRvd25cclxuICAgIE9iamVjdC52YWx1ZXMobWFudWZhY3R1cmVkTWFwKS5mb3JFYWNoKHJlc291cmNlID0+IHtcclxuICAgICAgICByZXNvdXJjZS5mb3JFYWNoKHIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gcjtcclxuICAgICAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gcjtcclxuICAgICAgICAgICAgcmlnaHRTZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgcmlnaHRTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNyZXNvdXJjZS0ke3JpZ2h0U2VsZWN0LnZhbHVlfWApLnN0eWxlLmNvbG9yID0gJ3RoaXN0bGUnO1xyXG5cclxuICAgICAgICBsZXQgZm91bmRSZXNvdXJjZSA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgbWFudWZhY3R1cmVkTWFwIHRvIGZpbmQgdGhlIHJpZ2h0IHJlc291cmNlXHJcbiAgICAgICAgZm9yIChjb25zdCBbcmVzb3VyY2UsIHByb2R1Y3RzXSBvZiBPYmplY3QuZW50cmllcyhtYW51ZmFjdHVyZWRNYXApKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9kdWN0cy5pbmNsdWRlcyhyaWdodFNlbGVjdC52YWx1ZSkpIHsgLy8gTWFrZSBzdXJlIHRvIHVzZSAudmFsdWUgZm9yIDxzZWxlY3Q+IGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICBmb3VuZFJlc291cmNlID0gcmVzb3VyY2U7XHJcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gU3RvcCB0aGUgbG9vcCBvbmNlIHRoZSByZXNvdXJjZSBpcyBmb3VuZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIGxlZnRUZXh0IGlmIHRoZSByZXNvdXJjZSB3YXMgZm91bmRcclxuICAgICAgICBpZiAoZm91bmRSZXNvdXJjZSkge1xyXG4gICAgICAgICAgICBsZWZ0VGV4dC50ZXh0Q29udGVudCA9IGZvdW5kUmVzb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBpbml0aWFsIG9wdGlvbiBmb3IgbGVmdCBzZWxlY3RcclxuICAgIGZ1bmN0aW9uIGFkZEluaXRpYWxPcHRpb24oc2VsZWN0RWxlbWVudCwgdGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBpbml0aWFsT3B0aW9uLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmRDaGlsZChpbml0aWFsT3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIGFycm93LmlubmVySFRNTCA9ICcmIzg1OTQ7JzsgLy8gUmlnaHQgYXJyb3cgSFRNTCBlbnRpdHlcclxuXHJcbiAgICBmYWN0b3J5RGl2LmFwcGVuZENoaWxkKGxlZnRUZXh0KTtcclxuICAgIGZhY3RvcnlEaXYuYXBwZW5kQ2hpbGQoYXJyb3cpO1xyXG4gICAgZmFjdG9yeURpdi5hcHBlbmRDaGlsZChyaWdodFNlbGVjdCk7XHJcblxyXG4gICAgYWRkSW5pdGlhbE9wdGlvbihyaWdodFNlbGVjdCwgJ1NlbGVjdCBhIFJlc291cmNlJyk7XHJcblxyXG4gICAgZmFjdG9yaWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGZhY3RvcnlEaXYpO1xyXG5cclxufVxyXG5cclxuXHJcbmxldCBtYW51ZmFjdHVyZUJ1bGsgPSAyO1xyXG5sZXQgYnVsa1VwZ3JhZGVDb3N0ID0gMzA7XHJcbmxldCBtYW51ZmFjdHVyZUJvbnVzID0gMTtcclxuZnVuY3Rpb24gbWFudWZhY3R1cmUocmVzb3VyY2UsIGdvYWxSZXNvdXJjZSkge1xyXG4gICAgLy8gQ2FsY3VsYXRlIGhvdyBtYW55IHdlIGNhbiBhZmZvcmRcclxuICAgIGxldCBudW0gPSBNYXRoLm1pbihtYW51ZmFjdHVyZUJ1bGssIGdldE1hdGVyaWFsKHJlc291cmNlKSk7XHJcbiAgICBudW0gKj0gbWFudWZhY3R1cmVCb251cztcclxuICAgIC8vIFRoZSBmYWN0b3JpZXMgZ2V0IHRvIGJlIGhhbGYgcHJpY2Ugb2Ygbm9ybWFsIGNyYWZ0aW5nIGJjIGVmZmljaWVuY3lcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyArK2kpXHJcbiAgICAgICAgY3JhZnRSZXNvdXJjZShnb2FsUmVzb3VyY2UpO1xyXG4gICAgLy8gaW5jcmVhc2VNYXRlcmlhbChnb2FsUmVzb3VyY2UsIG51bSk7XHJcbiAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCAtY3JhZnRlZFJlc291cmNlc1tnb2FsUmVzb3VyY2VdLmNvc3QpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGdyYWRlQnVsaygpIHtcclxuICAgIG1hbnVmYWN0dXJlQnVsayArPSAyO1xyXG4gICAgYnVsa1VwZ3JhZGVDb3N0ICs9IDEwO1xyXG5cclxuICAgIGNvbnN0IHVwQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VwZ3JhZGVCdWxrQnV0dG9uJyk7XHJcbiAgICB1cEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgYCR7bWFudWZhY3R1cmVCdWxrfSDihpIgJHttYW51ZmFjdHVyZUJ1bGsgKyAyfTogJHtidWxrVXBncmFkZUNvc3QudG9GaXhlZCgwKX0gc2lsdmVyYCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF0dGVtcHRNYW51ZmFjdHVyZSgpIHtcclxuICAgIGNvbnN0IGZhY3RvcmllcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYWN0b3J5Jyk7XHJcbiAgICBmYWN0b3JpZXMuZm9yRWFjaChmYWN0b3J5ID0+IHtcclxuXHJcbiAgICAgICAgY29uc3QgbGVmdFNlbGVjdCA9IGZhY3RvcnkucXVlcnlTZWxlY3Rvcignc3BhbjpmaXJzdC1jaGlsZCcpO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZmFjdG9yeS5xdWVyeVNlbGVjdG9yKCdzZWxlY3Q6bGFzdC1jaGlsZCcpO1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlID0gbGVmdFNlbGVjdC50ZXh0Q29udGVudDtcclxuICAgICAgICBjb25zdCBnb2FsUmVzb3VyY2UgPSByaWdodFNlbGVjdC52YWx1ZTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImNoZWNraW5nIGZhY3RvcnlcIiwgcmVzb3VyY2UsIGdvYWxSZXNvdXJjZSk7XHJcbiAgICAgICAgaWYgKHJlc291cmNlICYmIGdvYWxSZXNvdXJjZSkge1xyXG4gICAgICAgICAgICBtYW51ZmFjdHVyZShyZXNvdXJjZSwgZ29hbFJlc291cmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIENhbGwgdGhpcyBmdW5jdGlvbiB3aGVuZXZlciB5b3Ugd2FudCB0byBzdGFydCB0aGUgbWFudWZhY3R1cmluZyBwcm9jZXNzXHJcbi8vIGZvciBleGFtcGxlLCBhZnRlciBjcmVhdGluZyB0aGUgZmFjdG9yeSBkaXZzIGluaXRpYWxseSBvciBhZnRlciBhZGRpbmcgYSBuZXcgb25lXHJcbi8vIHN0YXJ0TWFudWZhY3R1cmluZ1Byb2Nlc3MoKTtcclxudmFyIG5ld0ZhY3RvcnlTaWx2ZXJDb3N0ID0gNTA7XHJcbmZ1bmN0aW9uIGJ1eUZhY3RvcnkoKSB7XHJcbiAgICBjb25zdCBidXlGYWN0b3J5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1eUZhY3RvcnlCdXR0b24nKTtcclxuICAgIGlmIChnZXRNYXRlcmlhbCgnc2lsdmVyJykgPCBuZXdGYWN0b3J5U2lsdmVyQ29zdCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdOb3QgZW5vdWdoIHNpbHZlciEnKTsgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhcyBlbm91Z2ggc2lsdmVyIHRvIGFmZm9yZCBmYWN0b3J5XHJcbiAgICBpbmNyZWFzZU1hdGVyaWFsKCdzaWx2ZXInLCAtbmV3RmFjdG9yeVNpbHZlckNvc3QpO1xyXG4gICAgY3JlYXRlRmFjdG9yeURpdigpO1xyXG5cclxuICAgIG5ld0ZhY3RvcnlTaWx2ZXJDb3N0ICo9IDEuMjtcclxuICAgIGJ1eUZhY3RvcnlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGAke25ld0ZhY3RvcnlTaWx2ZXJDb3N0LnRvRml4ZWQoMil9IHNpbHZlcmApO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNyZWF0ZUZhY3RvcnlEaXYsXHJcbiAgICBhdHRlbXB0TWFudWZhY3R1cmUsXHJcbiAgICBidXlGYWN0b3J5LFxyXG4gICAgdXBncmFkZUJ1bGssXHJcbiAgICBhbGxNYXRlcmlhbHNcclxufTtcclxuIiwiLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Q3JhZnRlZFJlc291cmNlKG1hdGVyaWFsLCBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcblxyXG4gICAgbWF0ZXJpYWwgPSBtYXRlcmlhbC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlcyA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJykuY3JhZnRlZFJlc291cmNlcztcclxuICAgICAgICAvLyBjb25zb2xlLndhcm4oJ01pc3NpbmcgY3JhZnRlZFJlc291cmNlcyBkZWZpbml0aW9uLCBsb2FkaW5nIGRlZmF1bHQnLCBjcmFmdGVkUmVzb3VyY2VzKTtcclxuICAgIH1cclxuICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkge1xyXG4gICAgICAgIHJldHVybiBjcmFmdGVkUmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSB8fCAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIGNyYWZ0ZWQgcmVzb3VyY2U6XCIgKyBtYXRlcmlhbCk7IC8vIEZvciBkZWJ1Z2dpbmdcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdldENyYWZ0ZWRSZXNvdXJjZSA9IGdldENyYWZ0ZWRSZXNvdXJjZTtcclxuIiwiY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbi8vIGNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuXHJcbi8vIEdldCBmdW5jdGlvbiBmb3IgbWF0ZXJpYWxzXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBtYXRlcmlhbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWxcclxuICogQHJldHVybnMgVmFsdWUgb2YgbWF0ZXJpYWxcclxuKi9cclxuZnVuY3Rpb24gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykge1xyXG4gICAgaWYgKCFyZXNvdXJjZXMpIHJlc291cmNlcyA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXM7XHJcbiAgICBpZiAocmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkge1xyXG4gICAgICAgIHJldHVybiByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBtYXRlcmlhbDpcIiwgbWF0ZXJpYWwpOyAgLy8gRm9yIGRlYnVnZ2luZ1xyXG4gICAgICAgIHJldHVybiBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwsIG51bGwpO1xyXG5cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdldE1hdGVyaWFsID0gZ2V0TWF0ZXJpYWw7IiwiY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuXHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcblxyXG5cclxubGV0IGFsbFZpc2libGVCdXR0b25zID0gbmV3IFNldChbJ2dhdGhlclN0aWNrcyddKTtcclxuZXhwb3J0cy5hbGxWaXNpYmxlQnV0dG9ucyA9IGFsbFZpc2libGVCdXR0b25zO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nTmFtZSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBjYW5CdXlCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIHJlc291cmNlc1xyXG4gICAgbGV0IGNhbkJ1eSA9IHRydWU7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG5cclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgIGlmIChidWlsZGluZy5jb3N0W3Jlc291cmNlXSA+IGdldE1hdGVyaWFsKHJlc291cmNlLCByZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIGNhbkJ1eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB3ZSBidXkgJyxidWlsZGluZ05hbWUsY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuLy8gQ2FsY3VsYXRlIHRoZSBmaW5hbCBudW1iZXIgb2YgY3JhZnRlZCBnb29kcyBmcm9tIGJvbnVzZXNcclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSB7XHJcbiAgICByZXR1cm4gMTtcclxufVxyXG5cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gZ2V0QWZmZWN0ZWRSZXNvdXJjZXMoc2tpbGwpIHtcclxuICAgIGlmIChza2lsbHNbc2tpbGxdKSB7XHJcbiAgICAgICAgcmV0dXJuIHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDsgIC8vIG9yIGFuIGVtcHR5IGFycmF5IFtdLCBiYXNlZCBvbiB5b3VyIHByZWZlcmVuY2VcclxufVxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbCBcclxuICogQHJldHVybnMgTWF4IG9mIG1hdGVyaWFsIG9yIEluZmluaXR5XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRNYXgobWF0ZXJpYWwpIHtcclxuICAgIGlmIChyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlc1ttYXRlcmlhbF0ubWF4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gSW5maW5pdHk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFyU2lkZWJhcigpIHtcclxuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc291cmNlc1wiKTtcclxuICAgIHNpZGViYXIuaW5uZXJIVE1MID0gJyc7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiB1cGRhdGVTaWRlYmFyKCkge1xyXG4gICAgQXJyYXkuZnJvbShyZXF1aXJlKCcuL2ZhY3RvcnknKS5hbGxNYXRlcmlhbHMpLmZvckVhY2gociA9PiByZXF1aXJlKCcuL3Jlc291cmNlcycpLnVwZGF0ZURpc3BsYXlWYWx1ZShyKSk7XHJcblxyXG4gICAgZm9yIChjb25zdCBbcmVzb3VyY2VOYW1lLCByZXNvdXJjZUNvbmZpZ10gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG5cclxuICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlLScgKyByZXNvdXJjZU5hbWUpO1xyXG4gICAgICAgIGlmICghcGFyZW50RWxlbWVudCkgcmV0dXJuO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBhcmVudEVsZW1lbnQpO1xyXG4gICAgICAgIHZhciBzaG91bGRIaWRlID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKGxldCBjIGluIHBhcmVudEVsZW1lbnQuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoYXMgcGFzc2VkJywgcmVzb3VyY2VOYW1lLCBwYXNzZWRTdGFnZShjKSk7XHJcbiAgICAgICAgICAgIGlmIChyZXF1aXJlKCcuL3N0YWdlcycpLnBhc3NlZFN0YWdlKGMpKSB7IHNob3VsZEhpZGUgPSBmYWxzZTsgY29uc29sZS5sb2coJ2RvbnQgaGlkZScsIHJlc291cmNlTmFtZSwgYyk7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc291cmNlQ29uZmlnLnZhbHVlID4gMCkgeyBzaG91bGRIaWRlID0gZmFsc2U7IHJlc291cmNlc1tyZXNvdXJjZU5hbWVdLmlzVmlzaWJsZSA9IHRydWU7IH1cclxuICAgICAgICBpZiAocmVzb3VyY2VDb25maWcuaXNWaXNpYmxlKSB7IHNob3VsZEhpZGUgPSBmYWxzZTsgfVxyXG5cclxuICAgICAgICBpZiAoc2hvdWxkSGlkZSkge1xyXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpc3BsYXlFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVzb3VyY2VOYW1lICsgJ1ZhbHVlJyk7XHJcbiAgICAgICAgaWYgKGRpc3BsYXlFbGVtKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGFiYnJldmlhdGVOdW1iZXIocmVzb3VyY2VEYXRhKSk7XHJcbiAgICAgICAgICAgIHZhciBjb2xvciA9ICcjZmZmJztcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZUNvbmZpZy52YWx1ZSA9PT0gZ2V0TWF4KHJlc291cmNlTmFtZSkpIGNvbG9yID0gJyNmY2MnO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgZWxzZSBpZiAocmVzb3VyY2VDb25maWcudmFsdWUgLyBnZXRNYXgocmVzb3VyY2VOYW1lKSA+IC42KSBjb2xvciA9ICcjZWViJztcclxuXHJcbiAgICAgICAgICAgIGRpc3BsYXlFbGVtLmlubmVySFRNTCA9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiR7Y29sb3J9XCI+JHthYmJyZXZpYXRlTnVtYmVyKHJlc291cmNlQ29uZmlnLnZhbHVlKX0gLyAke2FiYnJldmlhdGVOdW1iZXIoZ2V0TWF4KHJlc291cmNlTmFtZSkpfSA8L3NwYW4+YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBhYmJyZXZpYXRlTnVtYmVyKG51bSkge1xyXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlLCB1bml0KSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMTApIHJldHVybiByb3VuZFRvRGVjaW1hbHModmFsdWUsIDMpICsgdW5pdDtcclxuICAgICAgICBpZiAodmFsdWUgPCAxMDApIHJldHVybiByb3VuZFRvRGVjaW1hbHModmFsdWUsIDIpICsgdW5pdDtcclxuICAgICAgICBpZiAodmFsdWUgPCAxMDAwKSByZXR1cm4gcm91bmRUb0RlY2ltYWxzKHZhbHVlLCAxKSArIHVuaXQ7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUpICsgdW5pdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByb3VuZFRvRGVjaW1hbHMobnVtYmVyLCBkZWNpbWFscykge1xyXG4gICAgICAgIGNvbnN0IGZhY3RvciA9IE1hdGgucG93KDEwLCBkZWNpbWFscyk7XHJcbiAgICAgICAgcmV0dXJuIChNYXRoLnJvdW5kKG51bWJlciAqIGZhY3RvcikgLyBmYWN0b3IpLnRvRml4ZWQoZGVjaW1hbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChudW0gPCAxZTMpIHJldHVybiByb3VuZFRvRGVjaW1hbHMobnVtLCAyKTsgLy8gSWYgbGVzcyB0aGFuIDEsMDAwXHJcbiAgICBpZiAobnVtIDwgMWU2KSByZXR1cm4gZm9ybWF0KG51bSAvIDFlMywgJ0snKTsgLy8gVGhvdXNhbmRzXHJcbiAgICBpZiAobnVtIDwgMWU5KSByZXR1cm4gZm9ybWF0KG51bSAvIDFlNiwgJ00nKTsgLy8gTWlsbGlvbnNcclxuICAgIGlmIChudW0gPCAxZTEyKSByZXR1cm4gZm9ybWF0KG51bSAvIDFlOSwgJ0InKTsgLy8gQmlsbGlvbnNcclxuICAgIC8vIEFkZCBtb3JlIGNhc2VzIGZvciBsYXJnZXIgbnVtYmVycyBpZiBuZWVkZWRcclxuICAgIHJldHVybiBudW0udG9TdHJpbmcoKTtcclxufVxyXG5jb25zdCBsZXZlbFVwTWVzc2FnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsZXZlbFVwTWVzc2FnZScpO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlU2tpbGxzKHJlc291cmNlLCBudW0pIHtcclxuICAgIG51bSA9IE1hdGguYWJzKG51bSk7XHJcbiAgICBpZiAocmVxdWlyZSgnLi9wb25kZXInKS5pc1BvbmRlcmVkKCdmYXN0ZXJTa2lsbHMnKSkgbnVtICo9IDEuMDU7XHJcbiAgICAvLyBcclxuICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgIC8vIFxyXG4gICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgICAgICAvLyBtYXggbGV2ZWwgMTAwXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmxldmVsID49IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgc2tpbGxzW3NraWxsXS5sZXZlbCA9IDEwMDtcclxuICAgICAgICAgICAgICAgIHNraWxsc1tza2lsbF0uZXhwID0gMDtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCArPSBudW0gLyBNYXRoLnBvdygxLjQsIHNraWxsc1tza2lsbF0ubGV2ZWwpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVwZGF0aW5nIHNraWxsOlwiICsgc2tpbGwgKyBcIiB0byBcIiArIHNraWxsc1tza2lsbF0uZXhwKVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA+PSAxMDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAgICAgc2tpbGxzW3NraWxsXS5sZXZlbCArPSAxO1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCA9IDA7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkxldmVsIFVwISBcIiArIHNraWxsICsgc2tpbGxzW3NraWxsXS5sZXZlbCk7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIGxldmVsVXBNZXNzYWdlLnRleHRDb250ZW50ID0gYExldmVsIHVwISAke3NraWxsfSDihpIgJHtza2lsbHNbc2tpbGxdLmxldmVsfWA7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIGxldmVsVXBNZXNzYWdlLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgLy8gSGlkZSB0aGUgbWVzc2FnZSBhZnRlciAzIHNlY29uZHNcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxldmVsVXBNZXNzYWdlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxVcE1lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAwKTsgLy8gMzAwMCBtaWxsaXNlY29uZHMgKDMgc2Vjb25kcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChyZXF1aXJlKCcuL3N0YWdlcycpLnBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpKSB7XHJcbiAgICAgICAgcG9wdWxhdGVTa2lsbHNUYWJsZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSA9IGZhbHNlO1xyXG5cclxuZnVuY3Rpb24gcG9wdWxhdGVTa2lsbHNUYWJsZSgpIHtcclxuICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NraWxsc1RhYmxlJyk7XHJcblxyXG4gICAgLy8gSWYgdGhlIHRhYmxlIGlzIGVtcHR5LCBjcmVhdGUgdGhlIHJvd3MgYW5kIHByb2dyZXNzIGJhcnNcclxuICAgIGlmICghaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiR2VuZXJhdGluZyB0YWJsZSBmb3IgdGhlIGZpcnN0IHRpbWVcIik7XHJcbiAgICAgICAgaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSA9IHRydWU7XHJcbiAgICAgICAgLy8gXHJcbiAgICAgICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgICAgIGxldCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgICAgIHRyLmlkID0gJ3RyLScgKyBza2lsbDtcclxuICAgICAgICAgICAgbGV0IHRkUHJvZ3Jlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgICAgICAgICB0ZFByb2dyZXNzLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuXHJcbiAgICAgICAgICAgIGxldCBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBwcm9ncmVzc0Jhci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Byb2dyZXNzQmFyJyk7XHJcbiAgICAgICAgICAgIC8vIGlmIChpc0RhcmspIHtcclxuICAgICAgICAgICAgLy8gICAgIHByb2dyZXNzQmFyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMjI4QjIyJztcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBlbHNlIHtcclxuICAgICAgICAgICAgLy8gICAgIHByb2dyZXNzQmFyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjNTBDODc4JztcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS5oZWlnaHQgPSAnMjBweCc7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldEF0dHJpYnV0ZSgnZGF0YS1za2lsbCcsIHNraWxsKTsgLy8gQXNzaWduIGEgZGF0YSBhdHRyaWJ1dGUgZm9yIGlkZW50aWZpY2F0aW9uXHJcblxyXG4gICAgICAgICAgICBsZXQgc2tpbGxUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHNraWxsVGV4dC50ZXh0Q29udGVudCA9ICdbJyArIHNraWxsc1tza2lsbF0ubGV2ZWwgKyAnXSAgICcgKyBza2lsbDtcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnNldEF0dHJpYnV0ZSgnaWQnLCAnbGV2ZWwtJyArIHNraWxsKTtcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLmxlZnQgPSAnMTBweCc7XHJcbiAgICAgICAgICAgIHNraWxsVGV4dC5zdHlsZS50b3AgPSAnNTAlJztcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKC01MCUpJztcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPT0gMCAmJiBza2lsbHNbc2tpbGxdLmxldmVsID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5hcHBlbmRDaGlsZChwcm9ncmVzc0Jhcik7XHJcbiAgICAgICAgICAgIHRkUHJvZ3Jlc3MuYXBwZW5kQ2hpbGQoc2tpbGxUZXh0KTtcclxuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRQcm9ncmVzcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodHIpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gRGlzcGxheSBldmVyeXRoaW5nIHdlIGNhblxyXG4gICAgICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG5cclxuICAgICAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uZXhwID4gMCB8fCBza2lsbHNbc2tpbGxdLmxldmVsID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHItJyArIHNraWxsKS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLnByb2dyZXNzQmFyW2RhdGEtc2tpbGw9XCIke3NraWxsfVwiXWApO1xyXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NCYXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBza2lsbHNbc2tpbGxdLmV4cCArICclJztcclxuICAgICAgICAgICAgICAgIGxldCBza2lsbE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xldmVsLVwiICsgc2tpbGwpO1xyXG4gICAgICAgICAgICAgICAgc2tpbGxOYW1lLnRleHRDb250ZW50ID0gJ1snICsgc2tpbGxzW3NraWxsXS5sZXZlbCArICddICAgJyArIHNraWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaXNCdXR0b25JZFZpc2libGUoaWQpIHtcclxuICAgIHJldHVybiBhbGxWaXNpYmxlQnV0dG9ucy5oYXMoaWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWaXNpYmxlQnV0dG9uKGlkKSB7XHJcbiAgICBhbGxWaXNpYmxlQnV0dG9ucy5hZGQoaWQpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdldE1hdGVyaWFsLFxyXG4gICAgZ2V0TWF4LFxyXG4gICAgdXBkYXRlU2lkZWJhcixcclxuICAgIHVwZGF0ZVNraWxscyxcclxuICAgIHBvcHVsYXRlU2tpbGxzVGFibGUsXHJcbiAgICBjYWxjQ3JhZnRCb251cyxcclxuICAgIGlzQnV0dG9uSWRWaXNpYmxlLFxyXG4gICAgc2V0VmlzaWJsZUJ1dHRvbixcclxuICAgIGNhbkJ1eUJ1aWxkaW5nLFxyXG4gICAgaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSxcclxuICAgIGNsZWFyU2lkZWJhcixcclxufTtcclxuXHJcbiIsIi8qKlxyXG4gKiBBIG1hcCBvZiBhbGwgam9icyB0aGF0IHJlcXVpcmUgYSBwb25kZXIgdG8gYmUgdW5sb2NrZWRcclxuICpcclxuICogSm9iOiBSZXF1aXJlZFBvbmRlclxyXG4gKi9cclxuY29uc3Qgam9iUmVxdWlyZWRQb25kZXJzID0ge1xyXG4gICAgJ3RoaW5raW5nJzogJ3RoaW5raW5nJyxcclxuICAgICdmaXNoaW5nJzogJ2Zpc2hpbmcnLFxyXG4gICAgJ3NtaXRoaW5nJzogJ25vdC11bmxvY2thYmxlJyxcclxuICAgICdmYXJtaW5nJzogJ2FncmljdWx0dXJlJyxcclxuICAgICdjb21iYXQnOiAnY29tYmF0JyxcclxuICAgICdodW50aW5nJzogJ2h1bnRpbmcnXHJcbn07XHJcbmV4cG9ydHMuam9iUmVxdWlyZWRQb25kZXJzID0gam9iUmVxdWlyZWRQb25kZXJzO1xyXG4iLCIvLyBAdHMtbm9jaGVja1xyXG4vLyBERVBFTkRTIE9OOiBza2lsbHMuanMsIHBvbmRlci5qc1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuXHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKFwiLi9wb25kZXJcIik7XHJcbmNvbnN0IHsgZ2V0TWF4IH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5cclxuLyogSk9CUyBGVU5DVElPTkFMSVRZICovXHJcblxyXG5cclxuY29uc3Qgam9iQ291bnRzID0ge307XHJcbmZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgam9iQ291bnRzW3NraWxsXSA9IDA7XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3Qgam9ic1RhYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2JzVGFiJyk7XHJcblxyXG5PYmplY3Qua2V5cyhza2lsbHMpLmZvckVhY2goc2tpbGwgPT4ge1xyXG4gICAgY29uc3Qgam9iRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBqb2JEaXYuY2xhc3NMaXN0LmFkZCgnam9iLWJ1dHRvbicpO1xyXG4gICAgam9iRGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1qb2InLCBza2lsbCk7XHJcbiAgICBqb2JEaXYuaWQgPSAnam9iLWJ1dHRvbi0nICsgc2tpbGw7XHJcblxyXG4gICAgY29uc3QgZGVjcmVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkZWNyZW1lbnREaXYuY2xhc3NMaXN0LmFkZCgnYnRuLWRlY3JlbWVudCcpO1xyXG4gICAgZGVjcmVtZW50RGl2LnRleHRDb250ZW50ID0gJy0nO1xyXG4gICAgam9iRGl2LmFwcGVuZENoaWxkKGRlY3JlbWVudERpdik7XHJcblxyXG4gICAgY29uc3Qgam9iTmFtZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBqb2JOYW1lU3Bhbi5jbGFzc0xpc3QuYWRkKCdqb2ItbmFtZScpO1xyXG4gICAgam9iTmFtZVNwYW4udGV4dENvbnRlbnQgPSBgJHtza2lsbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHNraWxsLnNsaWNlKDEpfTogMGA7XHJcbiAgICBqb2JEaXYuYXBwZW5kQ2hpbGQoam9iTmFtZVNwYW4pO1xyXG5cclxuICAgIGNvbnN0IGluY3JlbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgaW5jcmVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2J0bi1pbmNyZW1lbnQnKTtcclxuICAgIGluY3JlbWVudERpdi50ZXh0Q29udGVudCA9ICcrJztcclxuICAgIGpvYkRpdi5hcHBlbmRDaGlsZChpbmNyZW1lbnREaXYpO1xyXG5cclxuICAgIGpvYnNUYWIuYXBwZW5kQ2hpbGQoam9iRGl2KTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnRuLWluY3JlbWVudCcpLmZvckVhY2goYnRuID0+IHtcclxuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBqb2JUeXBlID0gdGhpcy5jbG9zZXN0KCcuam9iLWJ1dHRvbicpLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2Nsb25lcycsIHJlc291cmNlcykgPiBnZXRUb3RhbEpvYnMoKSkge1xyXG4gICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0rKztcclxuICAgICAgICAgICAgLy8gaW5jcmVhc2VNYXRlcmlhbCgnY2xvbmVzJywgLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXkoam9iVHlwZSk7XHJcbiAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh3b3JrZXJzRGlzdHJpYnV0aW9uKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idG4tZGVjcmVtZW50JykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGpvYlR5cGUgPSB0aGlzLmNsb3Nlc3QoJy5qb2ItYnV0dG9uJykuZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpO1xyXG4gICAgICAgIGlmIChqb2JDb3VudHNbam9iVHlwZV0gPiAwKSB7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXS0tO1xyXG4gICAgICAgICAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAxKTtcclxuICAgICAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMoam9iVHlwZSwgam9iQ291bnRzW2pvYlR5cGVdKTtcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheShqb2JUeXBlKTtcclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0VG90YWxKb2JzKCkge1xyXG4gICAgdmFyIHRvdGFsID0gMDtcclxuICAgIGZvciAobGV0IGogaW4gam9iQ291bnRzKSB7XHJcbiAgICAgICAgdG90YWwgKz0gam9iQ291bnRzW2pdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG4vLyBHbG9iYWwgZm9yIHdoaWNoIHJlc291cmNlIGVhY2ggY2xvbmUgZ2F0aGVyc1xyXG5sZXQgd29ya2Vyc0Rpc3RyaWJ1dGlvbiA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gZGlzdHJpYnV0ZVdvcmtlcnMoc2tpbGwsIHRvdGFsV29ya2Vycykge1xyXG4gICAgaWYgKCFza2lsbHNbc2tpbGxdKSByZXR1cm4gbnVsbDsgIC8vIFJldHVybiBudWxsIGlmIHRoZSBza2lsbCBkb2Vzbid0IGV4aXN0XHJcblxyXG4gICAgbGV0IGFmZmVjdGVkUmVzb3VyY2VzID0gc2tpbGxzW3NraWxsXS5hZmZlY3RlZFJlc291cmNlcztcclxuXHJcbiAgICAvLyBGaWx0ZXIgYWZmZWN0ZWRSZXNvdXJjZXMgdG8gb25seSBjb250YWluIGtleXMgdGhhdCBhcmUgcHJlc2VudCBpbiB0aGUgcmVzb3VyY2VzIG1hcFxyXG4gICAgYWZmZWN0ZWRSZXNvdXJjZXMgPSBhZmZlY3RlZFJlc291cmNlcy5maWx0ZXIocmVzb3VyY2UgPT4gcmVzb3VyY2UgaW4gcmVzb3VyY2VzKTtcclxuXHJcbiAgICAvLyBsZXQgYTtcclxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgYWZmZWN0ZWRSZXNvdXJjZXMubGVuZ3RoOyBhID0gYWZmZWN0ZWRSZXNvdXJjZXNbaV0pIHtcclxuXHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coYSk7XHJcbiAgICAvLyAgICAgaWYgKCFyZXNvdXJjZXNbYV0pIHtcclxuXHJcbiAgICAvLyAgICAgICAgIGNvbnN0IGluZGV4ID0gYWZmZWN0ZWRSZXNvdXJjZXMuaW5kZXhPZihhKTtcclxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coYSwgaW5kZXgpO1xyXG4gICAgLy8gICAgICAgICBsZXQgeCA9IGFmZmVjdGVkUmVzb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAvLyAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgKytpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGFmZmVjdGVkUmVzb3VyY2VzKTtcclxuICAgIGxldCBudW1iZXJPZlJlc291cmNlcyA9IGFmZmVjdGVkUmVzb3VyY2VzLmxlbmd0aDtcclxuXHJcbiAgICAvLyBJbml0aWFsIGV2ZW4gZGlzdHJpYnV0aW9uXHJcbiAgICBsZXQgcGVyUmVzb3VyY2UgPSBNYXRoLmZsb29yKHRvdGFsV29ya2VycyAvIG51bWJlck9mUmVzb3VyY2VzKTtcclxuXHJcbiAgICAvLyBFdmVubHkgZGlzdHJpYnV0ZSB3b3JrZXJzIGFtb25nIHRoZSBhZmZlY3RlZCByZXNvdXJjZXNcclxuICAgIGZvciAobGV0IHJlc291cmNlIG9mIGFmZmVjdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgd29ya2Vyc0Rpc3RyaWJ1dGlvbi5zZXQocmVzb3VyY2UsIHBlclJlc291cmNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXN0cmlidXRlIGFueSByZW1haW5pbmcgd29ya2VycyBkdWUgdG8gcm91bmRpbmdcclxuICAgIGxldCByZW1haW5pbmdXb3JrZXJzID0gdG90YWxXb3JrZXJzIC0gKHBlclJlc291cmNlICogbnVtYmVyT2ZSZXNvdXJjZXMpO1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2Ugb2YgYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICBpZiAocmVtYWluaW5nV29ya2VycyA+IDApIHtcclxuICAgICAgICAgICAgd29ya2Vyc0Rpc3RyaWJ1dGlvbi5zZXQocmVzb3VyY2UsIHdvcmtlcnNEaXN0cmlidXRpb24uZ2V0KHJlc291cmNlKSArIDEpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdXb3JrZXJzLS07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKHdvcmtlcnNEaXN0cmlidXRpb24pO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0V29ya2VycyhyZXNvdXJjZU5hbWUpIHtcclxuICAgIHJldHVybiB3b3JrZXJzRGlzdHJpYnV0aW9uLmdldChyZXNvdXJjZU5hbWUpO1xyXG59XHJcblxyXG4vLyBjb25zdCBhbGxKb2JCdXR0b25icyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJyk7XHJcbmZ1bmN0aW9uIHVwZGF0ZURpc3BsYXkoam9iVHlwZSkge1xyXG4gICAgY29uc3QgdGhpc0pvYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5qb2ItYnV0dG9uW2RhdGEtam9iPVwiJHtqb2JUeXBlfVwiXWApO1xyXG4gICAgaWYgKCF0aGlzSm9iQnV0dG9uKSBjb25zb2xlLndhcm4oXCJDb3VsZG4ndCBmaW5kIGpvYiBidXR0b24gZm9yIGpvYjogXCIsIGpvYlR5cGUpO1xyXG4gICAgY29uc3Qgam9iRWxlbWVudCA9IHRoaXNKb2JCdXR0b24ucXVlcnlTZWxlY3RvcihgLmpvYi1uYW1lYCk7XHJcbiAgICBpZiAoam9iRWxlbWVudCkgam9iRWxlbWVudC50ZXh0Q29udGVudCA9IGAke2pvYlR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBqb2JUeXBlLnNsaWNlKDEpfTogJHtqb2JDb3VudHNbam9iVHlwZV19YDtcclxuXHJcbiAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLnVwZGF0ZUVtb2ppRGlzcGxheSgpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZSB0b3RhbCBhc3NpZ25lZCBjbG9uZXMgY291bnRlclxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlVG90YWwoKSB7XHJcbiAgICBjb25zdCB0b3RhbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjam9icy10b3RhbCcpO1xyXG4gICAgdG90YWxFbGVtZW50LnRleHRDb250ZW50ID0gXCJBc3NpZ25lZCBDbG9uZXM6IFwiICsgZ2V0VG90YWxKb2JzKCkgKyBcIiAvIFwiICsgZ2V0TWF4KCdjbG9uZXMnKTtcclxufVxyXG5cclxuXHJcbmxldCBzdGFydEJ1dHRvbiA9IG51bGw7XHJcbmxldCBjb25uZWN0aW9ucyA9IG5ldyBNYXAoKTsgIC8vIE1hcCB0byBzdG9yZSBjb25uZWN0aW9uc1xyXG5sZXQgbWFuYWdlbWVudCA9IHsgJ2Nvbm5lY3Rpb25zJzogY29ubmVjdGlvbnMsICdtaW5zJzoge30sICdtYXhlcyc6IHt9LCAndHJpZ2dlcnMnOiB7fSB9O1xyXG5sZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmVDYW52YXMnKTtcclxuXHJcbmZ1bmN0aW9uIHNldENvbm5lY3Rpb25zKG5ld0Nvbm5lY3Rpb25zKSB7XHJcbiAgICBjb25uZWN0aW9ucyA9IG5ld0Nvbm5lY3Rpb25zO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDb25uZWN0aW9ucygpIHtcclxuICAgIHJldHVybiBjb25uZWN0aW9ucztcclxufVxyXG5cclxuLy8gaWYgKGNhbnZhcykge1xyXG4vLyBAdHMtaWdub3JlXHJcbmxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuLy8gQHRzLWlnbm9yZVxyXG5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuLy8gQHRzLWlnbm9yZVxyXG5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4vLyB9XHJcblxyXG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpO1xyXG5cclxuLy8gICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4vLyAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCcuYnRuLWRlY3JlbWVudCcpIHx8IGUudGFyZ2V0LmNsb3Nlc3QoJy5idG4taW5jcmVtZW50JykpIHJldHVybjtcclxuXHJcbi8vICAgICAgICAgICAgIGlmICghaXNQb25kZXJlZCgnbWFuYWdlbWVudCcpKSByZXR1cm47XHJcblxyXG4vLyAgICAgICAgICAgICBsZXQgam9iQnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdCgnLmpvYi1idXR0b24nKTtcclxuXHJcbi8vICAgICAgICAgICAgIGlmIChqb2JCdXR0b24pIHtcclxuLy8gICAgICAgICAgICAgICAgIGlmICghc3RhcnRCdXR0b24pIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbiA9IGpvYkJ1dHRvbjtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRCdXR0b24uaWQgJiYgam9iQnV0dG9uLmlkKSB7IC8vIEVuc3VyZSBib3RoIElEcyBhcmUgYXZhaWxhYmxlXHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbnMuc2V0KHN0YXJ0QnV0dG9uLmlkLCBqb2JCdXR0b24uaWQpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBEcmF3IGFsbCBjb25uZWN0aW9uc1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGRyYXdBbGxDb25uZWN0aW9ucygpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgICAgICAvLyBSZXNldFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnV0dG9uID0gbnVsbDtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyBJRCBmb3Igb25lIG9mIHRoZSBidXR0b25zOicsIHN0YXJ0QnV0dG9uLCBqb2JCdXR0b24pO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ2xpY2tlZCBlbGVtZW50IGlzIG5vdCBpbnNpZGUgYSBqb2IgYnV0dG9uOicsIGUudGFyZ2V0KTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgaWYgKHN0YXJ0QnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIERyYXcgZXhpc3RpbmcgY29ubmVjdGlvbnNcclxuLy8gICAgICAgICAgICAgZHJhd0FsbENvbm5lY3Rpb25zKCk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBEcmF3IHRoZSBsaW5lIGZyb20gc3RhcnRCdXR0b24gdG8gY3VycmVudCBtb3VzZSBwb3NpdGlvblxyXG4vLyAgICAgICAgICAgICBkcmF3TGluZShzdGFydEJ1dHRvbiwgZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0pO1xyXG4vLyB9KTtcclxuXHJcbmZ1bmN0aW9uIGRyYXdBbGxDb25uZWN0aW9ucygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIHRyeSB7XHJcblxyXG5cclxuICAgICAgICBmb3IgKGxldCBbb2xkSWQsIG5ld0lkXSBvZiBjb25uZWN0aW9ucy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgbGV0IG9sZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9sZElkKTtcclxuICAgICAgICAgICAgbGV0IG5ld0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5ld0lkKTtcclxuICAgICAgICAgICAgbGV0IHJlY3QgPSBuZXdCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGxldCBuZXdYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIGxldCBuZXdZID0gMDtcclxuICAgICAgICAgICAgaWYgKHJlY3QuYm90dG9tID4gb2xkQnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSkgbmV3WSA9IG5ld0J1dHRvbi5vZmZzZXRUb3AgLSAxMDtcclxuICAgICAgICAgICAgZWxzZSBuZXdZID0gbmV3QnV0dG9uLm9mZnNldFRvcCArIG5ld0J1dHRvbi5vZmZzZXRIZWlnaHQgKyAxMDtcclxuICAgICAgICAgICAgZHJhd0xpbmUob2xkQnV0dG9uLCBuZXdYLCBuZXdZKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS53YXJuKCdkcmF3QWxsQ29ubmVjdGlvbnMnLCBlcnJvcik7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0Fycm93aGVhZChjb250ZXh0LCBmcm9tWCwgZnJvbVksIHRvWCwgdG9ZLCByYWRpdXMpIHtcclxuICAgIGxldCB4X2NlbnRlciA9IHRvWDtcclxuICAgIGxldCB5X2NlbnRlciA9IHRvWTtcclxuXHJcbiAgICBsZXQgYW5nbGU7XHJcbiAgICBsZXQgeDtcclxuICAgIGxldCB5O1xyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgYW5nbGUgPSBNYXRoLmF0YW4yKHRvWSAtIGZyb21ZLCB0b1ggLSBmcm9tWCk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgYW5nbGUgKz0gKDEgLyAzKSAqICgyICogTWF0aC5QSSk7XHJcbiAgICB4ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpICsgeF9jZW50ZXI7XHJcbiAgICB5ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpICsgeV9jZW50ZXI7XHJcblxyXG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcblxyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0xpbmUoc3RhcnRFbGVtZW50LCBlbmRYLCBlbmRZKSB7XHJcbiAgICBsZXQgcmVjdCA9IHN0YXJ0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIC8vIGxldCBvZmZzZXQgPSBNYXRoLnJhbmRvbSgpICogMTAwICsgMTAwXHJcbiAgICBsZXQgc3RhcnRYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7IC8vIC0gb2Zmc2V0O1xyXG4gICAgLy8gZW5kWCAtPSBvZmZzZXQ7XHJcbiAgICBsZXQgc3RhcnRZID0gc2Nyb2xsWSArIHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyO1xyXG5cclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oc3RhcnRYLCBzdGFydFkpO1xyXG4gICAgY3R4LmxpbmVUbyhlbmRYLCBlbmRZKTtcclxuICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAvLyBEcmF3IGFycm93IGF0IHRoZSBlbmQgb2YgdGhlIGxpbmVcclxuICAgIGRyYXdBcnJvd2hlYWQoY3R4LCBzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgMTApOyAgLy8gYWRqdXN0IHRoZSBsYXN0IHBhcmFtZXRlciBmb3IgYXJyb3cgc2l6ZVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckpvYkFzc2lnbm1lbnRzKCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgY29ubmVjdGlvbnMgPSBuZXcgTWFwKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMoKSB7XHJcbiAgICAvLyBGb3IgZWFjaCBjb25uZWN0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBjb25uZWN0aW9ucy5lbnRyaWVzKCk7XHJcbiAgICAgICAgaWYgKGVudHJpZXMgPT09IHVuZGVmaW5lZCkgdGhyb3cgJ0VudHJpZXMgaXMgdW5kZWZpbmVkJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgW29sZEpvYklkLCBuZXdKb2JJZF0gb2YgZW50cmllcykge1xyXG4gICAgICAgICAgICBsZXQgb2xkSm9iQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob2xkSm9iSWQpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YUpvYiA9IG9sZEpvYkJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvbGRJZCA9IG9sZEpvYklkLnJlcGxhY2UoJ2pvYi1idXR0b24tJywgJycpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdJZCA9IG5ld0pvYklkLnJlcGxhY2UoJ2pvYi1idXR0b24tJywgJycpO1xyXG4gICAgICAgICAgICBsZXQgbWF4ZWRPdXQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc291cmNlQXJyYXkgPSBza2lsbHNbZGF0YUpvYl0uYWZmZWN0ZWRSZXNvdXJjZXM7XHJcbiAgICAgICAgICAgIGlmICghcmVzb3VyY2VBcnJheSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZUFycmF5KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIHJlc291cmNlQXJyYXkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXRlcmlhbChyKSA8IHJlc291cmNlc1tyXS5tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyLCBnZXRNYXRlcmlhbChyKSwgcmVzb3VyY2VzW3JdLm1heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ZWRPdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1heGVkT3V0ICYmIGpvYkNvdW50c1tkYXRhSm9iXSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaEpvYihvbGRJZCwgbmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMob2xkSWQsIGpvYkNvdW50c1tvbGRJZF0pO1xyXG4gICAgICAgICAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMobmV3SWQsIGpvYkNvdW50c1tuZXdJZF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpZiAocmVzb3VyY2VzW2FmZmVjdGVkUmVzb3VyY2VdLmN1cnJlbnRWYWx1ZSA+PSByZXNvdXJjZXNbYWZmZWN0ZWRSZXNvdXJjZV0ubWF4VmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gICAgIHN3aXRjaEpvYihvbGRKb2JJZCwgbmV3Sm9iSWQpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgY29uc29sZS53YXJuKCdyZWFzc2lnbkpvYnMnLCBlcnJvcik7IH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN3aXRjaEpvYihvbGRKb2JJZCwgbmV3Sm9iSWQpIHtcclxuICAgIC8vIFRoaXMgZnVuY3Rpb24gc3dpdGNoZXMgd29ya2VycyBmcm9tIG9sZEpvYiB0byBuZXdKb2IuXHJcbiAgICAvLyBEZXBlbmRpbmcgb24geW91ciBhcHBsaWNhdGlvbiBzdHJ1Y3R1cmUsIHlvdSBjYW4gaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gYWNjb3JkaW5nbHkuXHJcbiAgICAvLyBGb3IgZXhhbXBsZSwgcmVkdWNlIHRoZSBjb3VudCBvZiB3b3JrZXJzIGluIG9sZEpvYiBhbmQgaW5jcmVhc2UgaW4gbmV3Sm9iLlxyXG4gICAgLy8gY29uc29sZS5sb2coYFN3aXRjaGluZyB3b3JrZXJzIGZyb20gJHtvbGRKb2JJZH0gdG8gJHtuZXdKb2JJZH1gKTtcclxuXHJcbiAgICBsZXQgd29ya2VycyA9IGpvYkNvdW50c1tvbGRKb2JJZF07XHJcbiAgICBqb2JDb3VudHNbb2xkSm9iSWRdID0gMDtcclxuICAgIGpvYkNvdW50c1tuZXdKb2JJZF0gKz0gd29ya2VycztcclxuICAgIHVwZGF0ZURpc3BsYXkob2xkSm9iSWQpO1xyXG4gICAgdXBkYXRlRGlzcGxheShuZXdKb2JJZCk7XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNsZWFySm9iQXNzaWdubWVudHMsXHJcbiAgICByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzLFxyXG4gICAgc3dpdGNoSm9iLFxyXG4gICAgZHJhd0FsbENvbm5lY3Rpb25zLFxyXG4gICAgZ2V0V29ya2VycyxcclxuICAgIHVwZGF0ZVRvdGFsLFxyXG4gICAgc2V0Q29ubmVjdGlvbnMsXHJcbiAgICBnZXRDb25uZWN0aW9ucyxcclxuICAgIGRpc3RyaWJ1dGVXb3JrZXJzLFxyXG4gICAgdXBkYXRlRGlzcGxheSxcclxuICAgIGpvYkNvdW50c1xyXG59OyIsImNvbnN0IGJ1aWxkaW5ncyA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhPVVNJTkdcclxuICAgICAqL1xyXG4gICAgXCJzaGVsdGVyXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJzdGlja3NcIjogMzAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcImNsb25lc1wiOiAxIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRm9yIHdoZW4geW91IG5lZWQgYSBob21lIGF3YXkgZnJvbSBob21lLlwiXHJcbiAgICB9LFxyXG4gICAgJ2h1dCc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyAnc3RpY2tzJzogNTAsICd2aW5lcyc6IDMwIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICdjbG9uZXMnOiAxIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIGNvenksIGlkeWxsaWMgY2h1bmsgb2Ygd29vZC4nXHJcbiAgICB9LFxyXG4gICAgXCJob3VzZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA1MCwgXCJyb2Nrc1wiOiAyMCwgJ2Zpc2gnOiAxMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiY2xvbmVzXCI6IDIgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJFdmVyeSBjbG9uZSdzIGRyZWFtLiBNaW51cyB0aGUgd2hpdGUgcGlja2V0IGZlbmNlLlwiXHJcbiAgICB9LFxyXG4gICAgJ3RlZXBlZSc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyAnd29vZCc6IDEwLCAnaGlkZXMnOiAyNSwgJ2Zpc2gnOiAxNSB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ2Nsb25lcyc6IDIgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuNSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXcmFwIHNvbWUgaGlkZXMgYXJvdW5kIHNvbWUgd29vZCBhbmQgY2FsbCBpdCBhIGhvbWUuXCJcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTVE9SQUdFXHJcbiAgICAgKi9cclxuICAgIFwic2hlZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA0MCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwid29vZFwiOiA1MCwgXCJzdGlja3NcIjogNTAsIFwicm9ja3NcIjogMjAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGUgdWx0aW1hdGUgc3RvcmFnZSBzb2x1dGlvbiBmb3IgdGhlIHBhY2sgcmF0IGluIHlvdS5cIlxyXG4gICAgfSxcclxuICAgICdzdG9ja3BpbGUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgcm9ja3M6IDMwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyB3b29kOiAxMDAgfSxcclxuICAgICAgICByYXRpbzogMS4xLFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJDaHVjayBhIGJ1bmNoIG9mIGxvZ3MgaW4gYSBwaWxlLCB3aGF0IGNvdWxkIGhhcHBlbj9cIlxyXG4gICAgfSxcclxuICAgIFwiZHJ5aW5nX3JhY2tzXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHsgXCJzdGlja3NcIjogMzAsIFwiZmlzaFwiOiA1IH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJmaXNoXCI6IDIwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjEsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQWlyIGRyeWluZzogTmF0dXJlJ3Mgd2F5IG9mIHByZXNlcnZpbmcgZm9vZC5cIlxyXG4gICAgfSxcclxuICAgIFwid29ya3Nob3BcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcIndvb2RcIjogNDAsIFwic3RpY2tzXCI6IDIwLCBcInJvY2tzXCI6IDEwIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgJ3JvY2tzJzogNTAsICdvcmUnOiA1MCwgJ3NhbmQnOiAxMDAsICdjbGF5JzogNTAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJESVkncyBkcmVhbSBkZXN0aW5hdGlvbi5cIlxyXG4gICAgfSxcclxuICAgICdiYXJuJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHsgJ3dvb2QnOiAzMCwgJ3doZWF0JzogNSB9LFxyXG4gICAgICAgICdlZmZlY3RzJzogeyAnd2hlYXQnOiAxMDAsICdiZXJyaWVzJzogNDAsICd2aW5lcyc6IDQwIH0sXHJcbiAgICAgICAgJ2Jvb3N0Jzoge30sXHJcbiAgICAgICAgJ2NvdW50JzogMCxcclxuICAgICAgICAncmF0aW8nOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSGF5LCB3aGF0J3MgaW4gdGhhdCBidWlsZGluZz9cIlxyXG4gICAgfSxcclxuICAgICdoZXJiYWxpc3RfaHV0Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICdzdGlja3MnOiA1MCwgJ3ZpbmVzJzogNTAsICdoZXJicyc6IDUwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnaGVyYnMnOiAxMDAsICd2aW5lcyc6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdoZXJicyc6IDEuMiwgdmluZXM6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBwbGFjZSBmb3IgYnJld2luZyBhbmQgc3Rld2luZy5cIlxyXG4gICAgfSxcclxuICAgIFwiYmFrZXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDgwLFxyXG4gICAgICAgICAgICBcIndoZWF0XCI6IDEwMCxcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgJ3doZWF0JzogMjAwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjI1LFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJGcmVzaGx5IGJha2VkIGJyZWFkLCBob3QgYW5kIHJlYWR5LlwiXHJcbiAgICB9LFxyXG4gICAgXCJhbmltYWxfcGVuXCI6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBzdGlja3M6IDUwLFxyXG4gICAgICAgICAgICBnYW1lOiAyMCxcclxuICAgICAgICAgICAgZmlzaDogMjVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ2dhbWUnOiAxMDAsICdoaWRlcyc6IDMwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBwbGFjZSB0byBwdXQgdGhvc2UgbGVzc2VyIHRoYW4geW91LlwiXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBST0RVQ1RJT04gQk9PU1RcclxuICAgICAqL1xyXG4gICAgXCJncm92ZVwiOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3dvb2QnOiAyMCwgJ3ZpbmVzJzogMjAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyAnd29vZCc6IDEuMDUsICdzdGlja3MnOiAxLjEgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgbmljZSBncm92ZSBvZiB0cmVlcyB0byBmaW5kIHdvb2QgZmFzdGVyLlwiXHJcbiAgICB9LFxyXG4gICAgXCJmaXNoX3RyYXBzXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiZmlzaFwiOiAxLjA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmlzaGluZyBtYWRlIGVhc3kuIE5vIHBhdGllbmNlIHJlcXVpcmVkLlwiXHJcbiAgICB9LFxyXG4gICAgXCJtaW5lXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiAzMCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwib3JlXCI6IDEuMDUsICdyb2Nrcyc6IDEuMDVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJEaWcgZGVlcCBhbmQgZmluZCB5b3VyIGlubmVyIG9yZS5cIlxyXG4gICAgfSxcclxuICAgIFwiY2FtcGZpcmVcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDIwLFxyXG4gICAgICAgICAgICBcInN0aWNrc1wiOiAyMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjogeyAnYWxsJzogMS4wNSB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXaGVyZSBzdG9yaWVzIGFyZSB0b2xkIGFuZCBtYXJzaG1hbGxvd3MgYXJlIHRvYXN0ZWQuXCJcclxuICAgIH0sXHJcbiAgICBcImx1bWJlcl95YXJkXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDIwMCxcclxuICAgICAgICAgICAgXCJpcm9uXCI6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldvb2QgeW91IGxpa2Ugc29tZSBtb3JlIHdvb2Q/XCJcclxuICAgIH0sXHJcbiAgICBcInN0b25lX3F1YXJyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiUm9jayBvbiB3aXRoIHlvdXIgYmFkIHNlbGYhXCJcclxuICAgIH0sXHJcbiAgICBcImZpc2hlcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogNDAsXHJcbiAgICAgICAgICAgIFwicm9wZVwiOiAxNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcImZpc2hcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmlzaCBhcmUgZnJpZW5kcy4gQW5kIGZvb2QuXCJcclxuICAgIH0sXHJcbiAgICBcInZpbmV5YXJkXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDIwLFxyXG4gICAgICAgICAgICBcInZpbmVzXCI6IDUwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwidmluZXNcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRm9yIHRoZSBmaW5lc3QgdmluZXMuIFdoYXQgZWxzZSB3b3VsZCBpdCBncm93P1wiXHJcbiAgICB9LFxyXG4gICAgXCJmb3JnZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNDAsXHJcbiAgICAgICAgICAgIFwib3JlXCI6IDIwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwib3JlXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIk1lbHQsIG1vbGQsIGFuZCBtYWtlIG1hcnZlbG91cyBtZXRhbHMuXCJcclxuICAgIH0sXHJcbiAgICAnd2F0ZXJfd2VsbCc6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7XHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDMwLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgICAgICd3b29kJzogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgICdlZmZlY3RzJzogeyAnZnJlc2h3YXRlcic6IDMwIH0sXHJcbiAgICAgICAgJ2Jvb3N0Jzoge1xyXG4gICAgICAgICAgICAnZnJlc2h3YXRlcic6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2NvdW50JzogMCxcclxuICAgICAgICAncmF0aW8nOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRnJlc2ggd2F0ZXIgb24gZGVtYW5kIVwiXHJcbiAgICB9LFxyXG4gICAgJ3Rvd2VyJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHtcclxuICAgICAgICAgICAgJ2JyaWNrcyc6IDIwLFxyXG4gICAgICAgICAgICAncm9ja3MnOiAxMCxcclxuICAgICAgICAgICAgJ3dvb2QnOiAzMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7fSxcclxuICAgICAgICAnYm9vc3QnOiB7ICdoaWRlcyc6IDEuMDUsICdnYW1lJzogMS4xIH0sXHJcbiAgICAgICAgJ2NvdW50JzogMCxcclxuICAgICAgICByYXRpbzogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlNlZSB0aGluZ3MgZnJvbSBhZmFyLlwiXHJcbiAgICB9LFxyXG4gICAgXCJ0YW5uZXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDYwLFxyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnaGlkZXMnOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJUcmVhdCBoaWRlcyB0byBtYWtlIHF1YWxpdHkgbGVhdGhlci5cIlxyXG4gICAgfSxcclxuICAgIFwibWFya2V0cGxhY2VcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDUwLFxyXG4gICAgICAgICAgICBcImJlcnJpZXNcIjogNDAsXHJcbiAgICAgICAgICAgIFwiZ29sZFwiOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiYmVycmllc1wiOiAxLjIsXHJcbiAgICAgICAgICAgIFwiaGVyYnNcIjogMS4yLFxyXG4gICAgICAgICAgICAnb3JlJzogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjI1LFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJBIGJ1c3RsaW5nIGh1YiBvZiB0cmFkZSBhbmQgYmFydGVyLlwiXHJcbiAgICB9LFxyXG4gICAgXCJ3aW5kbWlsbFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNjAsXHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3aGVhdFwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiR3JpbmQgZ3JhaW5zIGVmZmljaWVudGx5IHdpdGggd2luZCBwb3dlci5cIlxyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUE9OREVSXHJcbiAgICAgKi9cclxuICAgICd0ZWxlc2NvcGUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgZ2xhc3M6IDEsXHJcbiAgICAgICAgICAgIHdvb2Q6IDEwLFxyXG4gICAgICAgICAgICBwb25kZXI6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyBwb25kZXI6IDEuMDUgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkxvb2ssIHVwIGluIHRoZSBza3khIEl0J3MgYSBzdGFyIVwiXHJcbiAgICB9LFxyXG4gICAgXCJvYnNlcnZhdG9yeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiYnJpY2tzXCI6IDcwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMzAsXHJcbiAgICAgICAgICAgIFwiZ2xhc3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDUwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlN0YXJnYXppbmcgaGFzIG5ldmVyIGJlZW4gc28uLi4gcHJvZHVjdGl2ZT9cIlxyXG4gICAgfSxcclxuICAgIFwibGlicmFyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA3MCxcclxuICAgICAgICAgICAgXCJwYXBlclwiOiAyNSxcclxuICAgICAgICAgICAgXCJnbGFzc1wiOiA1LFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAyNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgXCJwb25kZXJcIjogNTAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiS25vd2xlZGdlIGlzIHBvd2VyLiBBbmQgYSBmaXJlIGhhemFyZCBpZiBub3Qgc3RvcmVkIHByb3Blcmx5LlwiXHJcbiAgICB9LFxyXG4gICAgXCJkZXNrXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDE1LFxyXG4gICAgICAgICAgICBcInN0aWNrc1wiOiAyMCxcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwicG9uZGVyXCI6IDMwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7IFwicG9uZGVyXCI6IDEuMDUgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSB3cml0ZXIncyBibG9jayBpcyBubyBtYXRjaCBmb3IgYXJtb3ItcGllcmNpbmcgcGVuY2lscyFcIlxyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0QnVpbGRpbmdDb3VudChidWlsZGluZ05hbWUpIHtcclxuICAgIHJldHVybiBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXS5jb3VudDtcclxufVxyXG5mdW5jdGlvbiBnZXRCb29zdChidWlsZGluZ05hbWUsIHJlc291cmNlKSB7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG5cclxuICAgIGlmIChidWlsZGluZyAmJiBidWlsZGluZy5ib29zdCkge1xyXG4gICAgICAgIGlmIChidWlsZGluZy5ib29zdFtyZXNvdXJjZV0pIHJldHVybiBidWlsZGluZy5ib29zdFtyZXNvdXJjZV07XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmJvb3N0WydhbGwnXSkgcmV0dXJuIGJ1aWxkaW5nLmJvb3N0WydhbGwnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBidWlsZGluZ3M6IGJ1aWxkaW5ncyxcclxuICAgIGdldEJ1aWxkaW5nQ291bnQsXHJcbiAgICBnZXRCb29zdFxyXG59OyIsImNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4uL3N0YWdlcycpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGhhc1Rvb2wgfSA9IHJlcXVpcmUoJy4uL3Rvb2xzJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5cclxuLyogQlVUVE9OUyAqL1xyXG5jb25zdCBidXR0b25zID0ge1xyXG5cclxuICAgIC8qIFBST0RVQ1RJT04gVEFCICovXHJcbiAgICAnZ2F0aGVyU3RpY2tzJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBzdGFydFZpc2libGUnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4CdIEdhdGhlciBTdGlja3MnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnRml2ZSwgU2l4LCBQaWNrIHVwIHN0aWNrcy4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2UgLy8gVGhpcyBidXR0b24gaXMgYWx3YXlzIHZpc2libGVcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyVmluZXMnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0aWNrJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JONryBHYXRoZXIgVmluZXMnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU29tZSB2aW5lcyBhcmUgcnViYmVyeSwgb3RoZXJzIGFyZSBndW1teS4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldE1hdGVyaWFsKCdzdGlja3MnLCByZXNvdXJjZXMpID49IDEwIHx8IHBhc3NlZFN0YWdlKCd2aW5lcycpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlclJvY2tzJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBzdGljaycsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTipbwk4CpIEdhdGhlciBSb2NrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdOb3QgYSBzaW5nbGUgd2luZG93IHRvIHRocm93IHRoZW0gdGhyb3VnaC4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldE1hdGVyaWFsKCd2aW5lcycsIHJlc291cmNlcykgPj0gMTAgfHwgcGFzc2VkU3RhZ2UoJ3JvY2tzJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyRmlzaCc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgZmlzaGluZycsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CThp0g8JOGnyDwk4aeIEdvIEZpc2gnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnR290IGFueSB0dW5hPycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnU3BlYXInKSB8fCBoYXNUb29sKFwiRmlzaGluZyBSb2RcIikgfHwgcGFzc2VkU3RhZ2UoJ2Zpc2hpbmcnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJXb29kJzoge1xyXG4gICAgICAgIGNsYXNzOiAnd29vZFRvZ2dsZSB3b29kJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOMjyBDaG9wIFdvb2QnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQW4gYXhlIGh1cnRzIHdheSBsZXNzIHRoYW4gdXNpbmcgeW91ciBoYW5kcy4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnQXhlJykgfHwgcGFzc2VkU3RhZ2UoJ3dvb2QnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJPcmUnOiB7XHJcbiAgICAgICAgXCJjbGFzc1wiOiBcInRvb2x0aXAgXCIsXHJcbiAgICAgICAgXCJ0YWJcIjogXCJwcm9kdWN0aW9uXCIsXHJcbiAgICAgICAgXCJ0ZXh0XCI6IFwi8JOJuCBNaW5lIE9yZVwiLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJEaWdneSBEaWdneSBIb2xlXCIsXHJcbiAgICAgICAgXCJ0b29sdGlwQ29zdFwiOiBcIkZyZWVcIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnUGlja2F4ZScpIHx8IHBhc3NlZFN0YWdlKCdvcmUnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qIFRBQlMgKi9cclxuICAgICdwcm9kdWN0aW9uVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHNob3dUYWI6ICdwcm9kdWN0aW9uVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3RhYi1idXR0b24nKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdleHBlcmltZW50VGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ0V4cGVyaW1lbnQnLFxyXG4gICAgICAgIHNob3dUYWI6ICdleHBlcmltZW50VGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3RhYi1idXR0b24nKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdwb25kZXJUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnUG9uZGVyJyxcclxuICAgICAgICBzaG93VGFiOiAncG9uZGVyVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdqb2JzVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ0pvYnMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdqb2JzVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ2pvYnMtdGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnc2tpbGxzVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1NraWxscycsXHJcbiAgICAgICAgc2hvd1RhYjogJ3NraWxsc1RhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ3BlcmtzVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1BlcmtzJyxcclxuICAgICAgICBzaG93VGFiOiAncGVya3NUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgncGVya3NUYWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdmYWN0b3J5VGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ0ZhY3RvcmllcycsXHJcbiAgICAgICAgc2hvd1RhYjogJ2ZhY3RvcnlUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnZmFjdG9yeVRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIC8qIFBPTkRFUiBUQUIgKi9cclxuICAgICdnYXRoZXJQb25kZXInOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwJyxcclxuICAgICAgICB0ZXh0OiAnUG9uZGVyJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1dyYXAgeW91ciBoZWFkIGFyb3VuZCB0aGUgZ3JlYXQgbXlzdGVyaWVzJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1RpbWUnLFxyXG4gICAgICAgIHRhYjogJ3BvbmRlcicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGJ1dHRvbnM6IGJ1dHRvbnNcclxufTsiLCIvKiBDUkFGVElORyBSRVNPVVJDRVMgKi9cclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4uL2dldENyYWZ0ZWRSZXNvdXJjZScpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi4vc3RhZ2VzJyk7XHJcblxyXG5cclxuY29uc3QgY3JhZnRlZFJlc291cmNlcyA9IHtcclxuICAgICdzaGFycHJvY2tzJzoge1xyXG4gICAgICAgIHRleHQ6ICdTaGFycCBSb2NrcycsXHJcbiAgICAgICAgaWQ6ICdjcmFmdFNoYXJwcm9ja3MnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3JvY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3JvY2tzJywgcmVzb3VyY2VzKSA+PSA1LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ3JhZnQgYSByb2NrIHVzaW5nIG5vdGhpbmcgYnV0IHJvY2tzIScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdSb2NrczogNScsXHJcbiAgICAgICAgY2xhc3M6ICdjcmFmdFJvY2tzJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdyb3BlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRSb3BlJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICd2aW5lcyc6IDMgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldE1hdGVyaWFsKCd2aW5lcycsIHJlc291cmNlcykgPj0gMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1RoZSBiYXNpcyBvZiBhdHRhY2hpbmcgdGhpbmdzIHRvIG90aGVyIHRoaW5ncy4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnVmluZXM6IDMnLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnaGFuZGxlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRIYW5kbGUnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3N0aWNrcyc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnc2hhcnBSb2NrcycpID49IDEsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTaGVhciBvZmYgdGhhdCBiYXJrIHRvIGhvbGQgaXQgYmV0dGVyJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1NoYXJwIFJvY2tzOiAxJyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ1NoYXJwIFJvY2snXHJcbiAgICB9LFxyXG4gICAgJ3N0YWZmJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRTdGFmZicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnaGFuZGxlJzogMiwgJ3JvcGUnOiAxIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRDcmFmdGVkUmVzb3VyY2UoJ2hhbmRsZScpID49IDEsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTdGljayBzb21lIHNoZWFyZWQgc3RpY2tzIHRvZ2V0aGVyJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0hhbmRsZXM6IDInLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnZmlzaGluZ3JvZCc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0RmlzaGluZ3JvZCcsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc3RhZmYnOiAxLCAncm9wZSc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdmaXNoaW5nJyksXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIHdlYXBvbiBmZWFyZWQgYnkgdW5kZXJ3YXRlciBsaWZlJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdyb3BlJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdzcGVhcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0U3BlYXInLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHtcclxuICAgICAgICAgICAgJ3N0YWZmJzogMSxcclxuICAgICAgICAgICAgJ3NoYXJwUm9ja3MnOiAxLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnc3RhZmYnKSA+PSAxLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSBsb25nIGFuZCBwb2ludHkgc3RpY2snLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU3RhZmZzOiAxJyxcclxuICAgICAgICBjbGFzczogJ3JvcGUnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ2F4ZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0QXhlJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdoYW5kbGUnOiAxLCAncm9wZSc6IDEsICdzaGFycHJvY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0Q3JhZnRlZFJlc291cmNlKCdzcGVhcicpID49IDEsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdQdXQgYSByb2NrIHN0cmFpZ2h0IHRocm91Z2ggdGhhdCBoYW5kbGUnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU3BlYXJzOiAxJyxcclxuICAgICAgICBjbGFzczogJ3JvcGUnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ3BpY2theGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFBpY2theGUnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHtcclxuICAgICAgICAgICAgJ2hhbmRsZSc6IDEsXHJcbiAgICAgICAgICAgICdzaGFycFJvY2tzJzogMyxcclxuICAgICAgICAgICAgJ3JvcGUnOiAxLFxyXG4gICAgICAgICAgICAncm9ja3MnOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBnZXRDcmFmdGVkUmVzb3VyY2UoJ2F4ZScpID49IDEsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTYWRseSBub3QgbWFkZSBvZiBkaWFtb25kcycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdBeGVzOiAxJyxcclxuICAgICAgICBjbGFzczogJ3JvcGUnXHJcbiAgICB9LFxyXG5cclxuICAgICdnbGFzcyc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0R2xhc3MnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3NhbmQnOiAxMCB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1lvdSBjYW4gc2VlIHJpZ2h0IHRocm91Z2ggaXQhJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoXCJnbGFzc0Jsb3dpbmdcIilcclxuICAgIH0sXHJcbiAgICAncGFwZXInOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFBhcGVyJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICd3b29kJzogMTIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdPdXRzb3VyY2UgeW91ciBtZW1vcnknLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgncGFwZXInKSxcclxuICAgIH0sXHJcbiAgICAnZ29sZCc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0R29sZCcsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnb3JlJzogMTAwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnbWV0YWxXb3JraW5nJyksXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHllbGxvdyBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdpcm9uJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRJcm9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiAyMCB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ21ldGFsV29ya2luZycpLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoZXJlJ3Mgc29tZSBzdHVyZHktbG9va2luZyBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdzaWx2ZXInOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFNpbHZlcicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnb3JlJzogNTAgfSxcclxuXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnbWV0YWxXb3JraW5nJyksXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHNoaW55IGdyYXkgYml0cyBpbiB0aGlzIG9yZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ21ldGFsV29ya2luZydcclxuICAgIH0sXHJcbiAgICAnYnJpY2tzJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRCcmlja3MnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ2NsYXknOiAxNSB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ2NsYXknLCByZXNvdXJjZXMpID4gNSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJMZWF2ZSBzb21lIGNsYXkgYnkgdGhlIGZpcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJydcclxuICAgIH0sXHJcbiAgICAnc3RlZWwnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICdpcm9uJzogNSB9IH0sXHJcbiAgICAnYmVhbXMnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICd3b29kJzogMTAgfSB9LFxyXG4gICAgJ2NyYXRlcyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3dvb2QnOiAxNSB9IH0sXHJcbiAgICAnbmFpbHMnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICdpcm9uJzogMSB9IH0sXHJcbiAgICAnc2xhYnMnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICdyb2Nrcyc6IDIwIH0gfSxcclxuICAgICdtZWRpY2luZSc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2hlcmJzJzogNTAgfSB9LFxyXG4gICAgJ2xlYXRoZXInOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICdoaWRlcyc6IDEwIH0gfSxcclxuICAgICdjb25jcmV0ZSc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3NhbmQnOiAzMiB9IH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoaWQpIHtcclxuICAgIGZvciAobGV0IGMgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW2NdLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JhZnRlZFJlc291cmNlc1tjXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWcoY29uZmlnKSB7XHJcbiAgICBmb3IgKGxldCBrIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrKTtcclxuICAgICAgICBpZiAoY3JhZnRlZFJlc291cmNlc1trXS5pZCA9PT0gY29uZmlnLmlkKSByZXR1cm4gaztcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNyYWZ0ZWRSZXNvdXJjZXMsXHJcbiAgICBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkLFxyXG4gICAgZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWdcclxufTsiLCJcclxuXHJcbi8qKlxyXG4gKiBUaWVyIDEgKDQwMCBwb25kZXIpOlxyXG4gKiBMdW1iZXJqYWNrXHJcbiAqICArMjUlIHdvb2QgcHJvZHVjdGlvblxyXG4gKiAgKzI1JSBzdGlja3MgcHJvZHVjdGlvblxyXG4gKiBcclxuICogTWluZXJcclxuICogICsyNSUgc3RvbmUgJiBvcmUgcHJvZHVjdGlvblxyXG4gKiBcclxuICogQm90YW5pc3RcclxuICogICsyNSUgdmluZXMgJiBoZXJicyAmIHdoZWF0IHByb2R1Y3Rpb25cclxuICogXHJcbiAqIExlYWRlclxyXG4gKiAgNTAlIGNsb25lIGVmZmVjdGl2ZW5lc3NcclxuICogXHJcbiAqIEFyY2hpdGVjdFxyXG4gKiAgLTI1JSBidWlsZGluZyBjb3N0XHJcbiAqIFxyXG4gKiBcclxuICogVGllciAyICgxNTAwIHBvbmRlcik6XHJcbiAqIFRoaW5rZXJcclxuICogICs1MCUgcG9uZGVyIHByb2R1Y3Rpb24gYW5kIHN0b3JhZ2VcclxuICogIC0yNSUgcG9uZGVyIGNvc3RcclxuICogXHJcbiAqIEdlbmVyYWxcclxuICogICs1MCUgY29tYmF0IHN0cmVuZ3RoXHJcbiAqICArMjUlIGNsb25lIGVmZmVjdGl2ZW5lc3NcclxuICogXHJcbiAqIE1lcmNoYW50XHJcbiAqICAtMjUlIHRyYWRlIHByaWNlXHJcbiAqICArMjUlIGNoYW5jZSBvZiByYXJlIHRyYWRlXHJcbiAqIFxyXG4gKiBHZW5lcmFsaXN0XHJcbiAqICArMTAlIGdsb2JhbCBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBTcGVjaWFsaXN0XHJcbiAqICArMTAwJSBza2lsbCBnYWluXHJcbiAqICArMTAlIHNraWxsIGJvbnVzIHRvIHJlc291cmNlc1xyXG4gKiBcclxuICovXHJcbmNvbnN0IHBlcmtzID0ge1xyXG4gICAgJ3RpZXIxJzogWydMdW1iZXJqYWNrJywgJ01pbmVyJywgJ0JvdGFuaXN0JywgJ0xlYWRlcicsICdBcmNoaXRlY3QnXSxcclxuICAgICd0aWVyMic6IFsnVGhpbmtlcicsICdHZW5lcmFsJywgJ01lcmNoYW50JywgJ0dlbmVyYWxpc3QnLCAnU3BlY2lhbGlzdCddXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHBlcmtzOiBwZXJrc1xyXG59IiwibGV0IHBvbmRlcnMgPSB7XHJcbiAgICAncG9uZGVyMSc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclBvbmRlcjEnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDEwIH0sXHJcbiAgICAgICAgdGV4dDogXCJUaGluayBIYXJkZXJcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCI1JSBib29zdCB0byBwb25kZXJpbmdcIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuXHJcbiAgICB9LFxyXG4gICAgJ2pvYnMtdGFiJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVySm9icy10YWInLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwIH0sXHJcbiAgICAgICAgdGV4dDogXCJVbmRlcnN0YW5kIENsb25pbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1doeSBhcmUgdGhlcmUgdHdvIG9mIHlvdT8nLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnU2FuaXR5ICgyMCBQb25kZXIpJyxcclxuXHJcbiAgICB9LFxyXG4gICAgJ3NraWxsc1RhYmxlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyU2tpbGxzVGFibGUnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwIH0sXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiWW91J3JlIHN0YXJ0aW5nIHRvIGxlYXJuIHRoaW5ncywgcmlnaHQ/XCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJOb3RpY2UgSW1wcm92ZW1lbnRcIlxyXG4gICAgfSxcclxuICAgICdmaXNoaW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRmlzaGluZycsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAsICdmaXNoJzogNTAgfSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXaGF0IGlmLi4uIHlvdXIgY2xvbmVzIGNvdWxkIGdvIGZpc2hpbmc/XCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJGaXNoaW5nIEpvYlwiXHJcbiAgICB9LFxyXG4gICAgLy8gJ21pY3JvbWFuYWdlbWVudCc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlck1pY3JvbWFuYWdlbWVudCcsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogMjAwLCAnY2xvbmVzJzogNSB9LFxyXG4gICAgLy8gICAgIHRleHQ6IFwiTWljcm9tYW5hZ2VtZW50XCIsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiWW91IG1hbmFnZWQgdG8gbWFrZSBjbG9uZXMgbWFuYWdlIGVhY2ggb3RoZXIuXCJcclxuICAgIC8vIH0sXHJcbiAgICAnZmFzdGVyU2tpbGxzJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRmFzdGVyU2tpbGxzJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA4MCB9LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiU2tpbGxzIElcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGluayBTbWFydGVyLiA1JSBib251cyB0byBza2lsbCBleHBcIlxyXG4gICAgfSxcclxuICAgICd0aGlua2luZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclRoaW5raW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxNTAgfSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5raW5nIEpvYlwiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkxldCB5b3VyIGNsb25lcyBzdGFydCB0aGlua2luZyBmb3IgdGhlbXNlbHZlcy5cIlxyXG5cclxuICAgIH0sXHJcbiAgICAnZmFzdGVyUmVzb3VyY2VHYWluJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRmFzdGVyUmVzb3VyY2VHYWluJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMjAgfSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIlByb2R1Y3Rpdml0eSBJXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSnVzdCB3b3JrIGhhcmRlci4gNSUgYm9udXMgdG8gcmVzb3VyY2UgZ2FpblwiXHJcbiAgICB9LFxyXG4gICAgLy8gJ21ldGFsV29ya2luZyc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlck1ldGFsV29ya2luZycsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgdGV4dDogXCJNZXRhbCBXb3JraW5nXCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiU3RhcnQgcHJvY2Vzc2luZyB0aGF0IG9yZVwiLFxyXG4gICAgLy8gICAgIC8vIGNvc3Q6IFt7IG1hdGVyaWFsOiAncG9uZGVyJywgYW1vdW50OiAxMDAgfSwgeyBtYXRlcmlhbDogJ29yZScsIGFtb3VudDogNTAgfSwgeyBtYXRlcmlhbDogJ3JvY2tzJywgYW1vdW50OiA1MCB9XVxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDEwMCwgJ29yZSc6IDUwLCAncm9ja3MnOiA1MCB9LFxyXG4gICAgLy8gfSxcclxuICAgICdhdXRvQ2xvbmUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJBdXRvQ2xvbmUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQXV0byBDbG9uZVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkF1dG9tYXRpY2FsbHkgcHJvZHVjZSBjbG9uZXNcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxNDAsICdjbG9uZXMnOiAyMCB9LFxyXG4gICAgfSxcclxuXHJcbiAgICAnZWZmZWN0aXZlQnVpbGRpbmdzJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRWZmZWN0aXZlQnVpbGRpbmdzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkJ1aWxkaW5ncyBJXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSW5jcmVhc2UgYnVpbGRpbmcgZWZmZWN0cyBieSAxJVwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE0MCB9LFxyXG4gICAgfSxcclxuICAgICdhZ3JpY3VsdHVyZSc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckFncmljdWx0dXJlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkFncmljdWx0dXJlXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmluZCBzb21lIHNlZWRzIGZyb20gYWxsIHRob3NlIHBsYW50c1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE1MCB9XHJcbiAgICB9LFxyXG4gICAgJ2NvbWJhdCc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckNvbWJhdCcsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJDb21iYXRcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJJcyB0aGVyZSBhbnlvbmUgdG8gc3BhciB3aXRoIGJlc2lkZXMgeW91P1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwMCwgJ3NwZWFyJzogMTAwIH1cclxuICAgIH0sXHJcbiAgICAnaHVudGluZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckh1bnRpbmcnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiSHVudGluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkF0IGxlYXN0IHRoZXJlIGFyZSBhbmltYWxzXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTQwLCAnZmlzaCc6IDUwIH1cclxuICAgIH0sXHJcbiAgICAncGVya3NUYWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJQZXJrc1RhYicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogJ1BlcmtzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01heWJlIHlvdSBhcyB0aGUgb3JpZ2luYWwgc2hvdWxkIHNwZWNpYWxpemUnLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwMCB9XHJcbiAgICB9LFxyXG4gICAgLy8gJ2F1dG9jcmFmdCc6IHtcclxuICAgIC8vICAgICBpZDogXCJwb25kZXJBdXRvY3JhZnRcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIkF1dG8gQ3JhZnRcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJBdXRvbWF0aWNhbGx5IGNyYWZ0IHJlc291cmNlcyB3aGVuIHRoZXkgcmVhY2ggdGhlIHN0b3JhZ2UgbGltaXRcIixcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiA0MDAsICd3b29kJzogMTAwMCwgJ3JvY2tzJzogNTAwLCAnd2hlYXQnOiAxMDAwIH1cclxuICAgIC8vIH0sXHJcbiAgICAnZmFjdG9yeVRhYic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckZhY3RvcnlUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRmFjdG9yaWVzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQXNjZW5kIHRvIHRoZSBuZXh0IGxldmVsIG9mIGVjb25vbXlcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MDAsICdnb2xkJzogMTAsICd3b29kJzogMTAwMCwgJ3doZWF0JzogMTAwMCwgJ3JvY2tzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgLy8gJ2V4cGxvcmF0aW9uJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyRXhwbG9yYXRpb24nLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IFt7XHJcbiAgICAvLyAgICAgICAgIG1hdGVyaWFsOiAncG9uZGVyJyxcclxuICAgIC8vICAgICAgICAgYW1vdW50OiAxNjBcclxuICAgIC8vICAgICB9XVxyXG4gICAgLy8gfSxcclxuICAgIC8vICd0cmFkaW5nJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyVHJhZGluZycsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgdGV4dDogXCJUcmFkaW5nXCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiWW91IG1ldCBzb21lb25lISBUaW1lIHRvIHRyYWRlIHdpdGggdGhlbS5cIixcclxuICAgIC8vICAgICBjb3N0OiB7ICdnb2xkJzogMTAsICdwb25kZXInOiA0MDAgfVxyXG4gICAgLy8gfSxcclxuICAgIC8vICdzY2llbmNlJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyU2NpZW5jZScsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogW3tcclxuICAgIC8vICAgICAgICAgbWF0ZXJpYWw6ICdwb25kZXInLFxyXG4gICAgLy8gICAgICAgICBhbW91bnQ6IDIwMFxyXG4gICAgLy8gICAgIH1dXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ21hZ2ljJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyTWFnaWMnLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IFt7XHJcbiAgICAvLyAgICAgICAgIG1hdGVyaWFsOiAncG9uZGVyJyxcclxuICAgIC8vICAgICAgICAgYW1vdW50OiAyMjBcclxuICAgIC8vICAgICB9XVxyXG4gICAgLy8gfSxcclxuICAgIC8vICdkaXBsb21hY3knOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJEaXBsb21hY3knLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IFt7XHJcbiAgICAvLyAgICAgICAgIG1hdGVyaWFsOiAncG9uZGVyJyxcclxuICAgIC8vICAgICAgICAgYW1vdW50OiAyNDBcclxuICAgIC8vICAgICB9XVxyXG4gICAgLy8gfSxcclxuICAgIC8vICdjb25zdHJ1Y3Rpb24nOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJDb25zdHJ1Y3Rpb24nLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IFt7XHJcbiAgICAvLyAgICAgICAgIG1hdGVyaWFsOiAncG9uZGVyJyxcclxuICAgIC8vICAgICAgICAgYW1vdW50OiAyNjBcclxuICAgIC8vICAgICB9XVxyXG4gICAgLy8gfSxcclxuICAgIC8vICdhcnRzJzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyQXJ0cycsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogW3tcclxuICAgIC8vICAgICAgICAgbWF0ZXJpYWw6ICdwb25kZXInLFxyXG4gICAgLy8gICAgICAgICBhbW91bnQ6IDI4MFxyXG4gICAgLy8gICAgIH1dXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gJ2FzdHJvbm9teSc6IHtcclxuICAgIC8vICAgICBpZDogJ3BvbmRlckFzdHJvbm9teScsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgY29zdDogW3tcclxuICAgIC8vICAgICAgICAgbWF0ZXJpYWw6ICdwb25kZXInLFxyXG4gICAgLy8gICAgICAgICBhbW91bnQ6IDMwMFxyXG4gICAgLy8gICAgIH1dXHJcbiAgICAvLyB9XHJcbn07XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBwb25kZXJzOiBwb25kZXJzXHJcbn07IiwiLy8gU3RhdGUgb2YgZWFjaCByZXNvdXJjZVxyXG5cclxuLy8gVE9ETzogQUREIFJFUVVJUkVNRU5UUyBGT1IgRUFDSCBUTyBNQUtFIFRIRU0gVklTSUJMRVxyXG4vLyBvciBqdXN0IGRpc3BsYXkgdGhlbSB3aGVuIHlvdSBnZXQgeW91ciBmaXJzdCBvbmU/XHJcbmNvbnN0IHJlc291cmNlcyA9IHtcclxuICAgIFwiY2xvbmVzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwibWFrZUNsb25lXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIG1heDogMFxyXG4gICAgfSxcclxuXHJcbiAgICBcInN0aWNrc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclN0aWNrc1wiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IHRydWUsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOGsfCTgJwgR2F0aGVyaW5nIFN0aWNrc1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4axIEdhdGhlciBTdGlja3NcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgZW1vamk6ICfwk4CdJyxcclxuICAgICAgICBtYXg6IDUwXHJcbiAgICB9LFxyXG4gICAgXCJ2aW5lc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclZpbmVzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JONr/CTgKogR2F0aGVyaW5nIFZpbmVzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTja8gR2F0aGVyIFZpbmVzXCIsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJBeGVcIiwgXCJ2YWxcIjogMS41IH1dLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgKonLFxyXG4gICAgICAgIG1heDogNTBcclxuICAgIH0sXHJcbiAgICBcInJvY2tzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyUm9ja3NcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4qW8JOAqSBHYXRoZXJpbmcgUm9ja3NcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOKliBHYXRoZXIgUm9ja3NcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICBtYXg6IDMwXHJcbiAgICB9LFxyXG4gICAgXCJmaXNoXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyRmlzaFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCThp3wk4af8JOGniDwk4GDIEdvbmUgRmlzaGluZ1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4ad8JOGn/CThp4gR28gRmlzaFwiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgYMnLFxyXG4gICAgICAgIFwidG9vbHNcIjogW3sgXCJ0b29sXCI6IFwiU3BlYXJcIiwgXCJ2YWxcIjogMSB9LCB7IFwidG9vbFwiOiBcIkZpc2hpbmcgUm9kXCIsIFwidmFsXCI6IDIgfV0sXHJcbiAgICAgICAgbWF4OiAxMFxyXG4gICAgfSxcclxuICAgIFwid29vZFwiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlcldvb2RcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CoIENob3BwaW5nIFdvb2RcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOMjyBDaG9wIFdvb2RcIixcclxuICAgICAgICBlbW9qaTogJ/CTgKgnLFxyXG4gICAgICAgIFwidG9vbHNcIjogW3sgXCJ0b29sXCI6IFwiQXhlXCIsIFwidmFsXCI6IDEuNSB9LCB7IFwidG9vbFwiOiBcIkNoYWluc2F3XCIsIFwidmFsXCI6IDMgfV0sXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIG1heDogNDBcclxuICAgIH0sXHJcbiAgICBcInBvbmRlclwiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclBvbmRlclwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgIEgUG9uZGVyaW5nXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgIEgUG9uZGVyXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CBJyxcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwib3JlXCI6IHtcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlck9yZVwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTibjwk4GEIE1pbmluZyBPcmVcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOJuCBNaW5lIE9yZVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOBhCcsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwic2FuZFwiOiB7XHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJTYW5kXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAqSBTY29vcGluZyBTYW5kXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgKkgU2Nvb3AgU2FuZFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwid2hlYXRcIjoge1xyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyV2hlYXRcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CpIEhhcnZlc3RpbmcgV2hlYXRcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAqSBIYXJ2ZXN0IFdoZWF0XCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CdJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgJ2ZyZXNod2F0ZXInOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyRnJlc2h3YXRlcicsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdoaWRlcyc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJIaWRlcycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgI4nLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG5cclxuICAgIH0sXHJcbiAgICAnY2xheSc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJDbGF5JyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2JlcnJpZXMnOiB7XHJcblxyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckJlcnJpZXMnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnaGVyYnMnOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVySGVyYnMnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnZ2FtZSc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJHYW1lJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ/CTg5rwk4COIEh1bnRpbmcnLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICfwk4COIEh1bnQnLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAjicsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIC8vIHJldHVybiByZXNvdXJjZXNbcmVzb3VyY2VdICE9PSBudWxsO1xyXG4gICAgcmV0dXJuIHJlc291cmNlIGluIHJlc291cmNlcztcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQoaWQpIHtcclxuICAgIGZvciAobGV0IHIgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKHJlc291cmNlc1tyXS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlc1tyXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4gICAgaXNSZXNvdXJjZSxcclxuICAgIGdldFJlc291cmNlQ29uZmlnQnlJZFxyXG59OyIsImNvbnN0IHNraWxscyA9IHtcclxuICAgIGdhdGhlcmluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydzdGlja3MnLCAndmluZXMnLCAnc2FuZCcsICdoZXJicycsICdiZXJyaWVzJ11cclxuICAgIH0sXHJcbiAgICBtYXNvbnJ5OiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3JvY2tzJywgJ29yZScsICdjbGF5J10sXHJcbiAgICAgICAgbmVlZFRvb2xzOiBbeyAnUGlja2F4ZSc6IFsnb3JlJ10gfV1cclxuICAgIH0sXHJcbiAgICBjYXJwZW50cnk6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnd29vZCcsICdoYW5kbGUnLCAnc3RhZmYnLCAnZmlzaGluZ3JvZCddLFxyXG4gICAgICAgIG5lZWRUb29sczogW3sgJ0F4ZSc6IFsnd29vZCddIH1dXHJcbiAgICB9LFxyXG4gICAgdGhpbmtpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsncG9uZGVyJ11cclxuICAgIH0sXHJcbiAgICBzbWl0aGluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydheGUnLCAncGlja2F4ZScsICdzcGVhcicsICdnbGFzcycsICdpcm9uJywgJ3NpbHZlcicsICdnb2xkJ11cclxuICAgIH0sXHJcbiAgICBmYXJtaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3doZWF0JywgJ2ZyZXNod2F0ZXInXVxyXG4gICAgfSxcclxuICAgIGNvbWJhdDoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogW11cclxuICAgIH0sXHJcbiAgICBmaXNoaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2Zpc2gnLCAnZnJlc2h3YXRlciddXHJcbiAgICB9LFxyXG4gICAgaHVudGluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydoaWRlcycsICdnYW1lJ11cclxuICAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2tpbGxzOiBza2lsbHNcclxufTsiLCJjb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMsIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzLCBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuXHJcbmNvbnN0IHsgc2F2ZUdhbWUsIGxvYWRHYW1lIH0gPSByZXF1aXJlKFwiLi9zYXZpbmdcIik7XHJcbmNvbnN0IHsgZ2VuZXJhdGVUb29sdGlwQ29zdCwgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucywgaW5jcmVhc2VNYXRlcmlhbCwgY3JhZnRBbGxSZXNvdXJjZXMsIGNyYWZ0UmVzb3VyY2UsIGNhbGNJbmNyZWFzZSwgdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzLCBjYWxjU2Vjb25kc1JlbWFpbmluZywgaW5jcmVhc2VNYXgsIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QsIGJ1eU1heEJ1aWxkaW5ncywgYnV5QnVpbGRpbmcgfSA9IHJlcXVpcmUoJy4vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgaGFzUGVyaywgc2VsZWN0QWJpbGl0eSB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIsIGdldE1heCwgY2xlYXJTaWRlYmFyIH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IG1ha2VWaXNpYmxlIH0gPSByZXF1aXJlKCcuL21ha2VWaXNpYmxlJyk7XHJcbmNvbnN0IHsgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdXR0b25WaXNpYmlsaXR5Jyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlIH0gPSByZXF1aXJlKCcuL2dldENyYWZ0ZWRSZXNvdXJjZScpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgY3JlYXRlRmFjdG9yeURpdiwgYnV5RmFjdG9yeSwgYXR0ZW1wdE1hbnVmYWN0dXJlLCB1cGdyYWRlQnVsayB9ID0gcmVxdWlyZSgnLi9mYWN0b3J5Jyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBpc1BvbmRlcmVkLCBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL3BvbmRlclwiKTtcclxuY29uc3QgeyBoYXNUb29sLCBhZGRUb29sIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgZ2V0QXRlRmlzaCwgc2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcbmNvbnN0IHsgZHJhd0FsbENvbm5lY3Rpb25zLCB1cGRhdGVUb3RhbCB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG4vKiBNWSBDT0RFIFNUQVJUUyBIRVJFICovXHJcblxyXG5cclxuXHJcbi8vIEluaXRpYWxpemUgdmFsdWVzXHJcbi8vIGxldCBza2lsbGVkID0gZmFsc2U7XHJcblxyXG5cclxuZnVuY3Rpb24gc2V0VG90YWxUaW1lKHRpbWUpIHtcclxuICAgIHRvdGFsX3RpbWUgPSB0aW1lO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuLyogR0FUSEVSSU5HIE1BVEVSSUFMUyovXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IHNpZGViYXJQYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc291cmNlc1wiKTtcclxuZnVuY3Rpb24gc3RvcEFsbEdhdGhlcmluZygpIHtcclxuICAgIGZvciAobGV0IGtleSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICByZXNvdXJjZXNba2V5XS5pc0dldHRpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCByQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNnYXRoZXJcIiArIGNhcGl0YWxpemVGaXJzdChrZXkpKTtcclxuICAgICAgICBpZiAockJ1dHRvbikgckJ1dHRvbi50ZXh0Q29udGVudCA9IHJlc291cmNlc1trZXldLmRlZmF1bHRUZXh0O1xyXG5cclxuICAgICAgICAvLyBTZXQgc2lkZWJhciB0byBub3QgYm9sZFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCBzaWRlYmFyVGV4dCA9IHNpZGViYXJQYXJlbnQucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyBrZXkpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGVtb2ppR2F0aGVyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Vtb2ppR2F0aGVyRGlzcGxheScpO1xyXG5mdW5jdGlvbiB0b2dnbGVSZXNvdXJjZShyZXNvdXJjZUtleSkge1xyXG4gICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZXNbcmVzb3VyY2VLZXldO1xyXG5cclxuICAgIC8vIGVtb2ppRGl2LnRleHRDb250ZW50ID0gJ/CThq4nO1xyXG4gICAgY29uc3Qgc2lkZWJhclBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3Qgc2lkZWJhclRleHQgPSBzaWRlYmFyUGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXNvdXJjZS0nICsgcmVzb3VyY2VLZXkpO1xyXG4gICAgY29uc3QgcmVzb3VyY2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2F0aGVyJyArIHJlc291cmNlS2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVzb3VyY2VLZXkuc2xpY2UoMSkpO1xyXG5cclxuICAgIGlmICghcmVzb3VyY2UuaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgc3RvcEFsbEdhdGhlcmluZygpOyAvLyBTdG9wIGFsbCBnYXRoZXJpbmcgYWN0aW9uc1xyXG4gICAgICAgIHJlc291cmNlLmlzR2V0dGluZyA9IHRydWU7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLnRleHRDb250ZW50ID0gcmVzb3VyY2UuYWN0aXZlVGV4dDtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBlbW9qaUdhdGhlckRpdi50ZXh0Q29udGVudCA9IHJlc291cmNlLmVtb2ppO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlc291cmNlLmVtb2ppKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzb3VyY2UuaXNHZXR0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLnRleHRDb250ZW50ID0gcmVzb3VyY2UuZGVmYXVsdFRleHQ7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChzaWRlYmFyVGV4dCkgc2lkZWJhclRleHQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLyogQlVUVE9OUyBHRU5FUkFURSAqL1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVCdXR0b25zKCkge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiR2VuZXJhdGluZyBidXR0b25zXCIpO1xyXG4gICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgLy8gQ3JlYXRlIHRoZSBjb2x1bW5zXHJcbiAgICBjb25zdCBjcmVhdGVDb2x1bW5zID0gKHBhcmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb25zdCBjb2wyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29uc3QgY29sMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgICBjb2wxLnN0eWxlLndpZHRoID0gJzMzLjMzJSc7XHJcbiAgICAgICAgY29sMi5zdHlsZS53aWR0aCA9ICczMy4zMyUnO1xyXG4gICAgICAgIGNvbDMuc3R5bGUud2lkdGggPSAnMzMuMzMlJztcclxuXHJcbiAgICAgICAgY29sMS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XHJcbiAgICAgICAgY29sMi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XHJcbiAgICAgICAgY29sMy5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XHJcblxyXG4gICAgICAgIGNvbDEuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgICAgIGNvbDIuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgICAgIGNvbDMuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG5cclxuICAgICAgICAvLyBwYXJlbnQuc3R5bGUuZGlzcGxheSA9ICdmbGV4OycgIC8vIFNldCBwYXJlbnQgdG8gYmUgYSBmbGV4IGNvbnRhaW5lclxyXG5cclxuICAgICAgICBwYXJlbnQucHJlcGVuZChjb2wzKTtcclxuICAgICAgICBwYXJlbnQucHJlcGVuZChjb2wyKTtcclxuICAgICAgICBwYXJlbnQucHJlcGVuZChjb2wxKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtjb2wxLCBjb2wyLCBjb2wzXTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdGFic0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJzJyk7XHJcbiAgICBjb25zdCBwcm9kdWN0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2R1Y3Rpb25UYWInKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGV4cGVyaW1lbnRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhwZXJpbWVudFRhYicpLnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24tY29sdW1ucycpO1xyXG4gICAgY29uc3QgcG9uZGVyQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvbmRlclRhYicpO1xyXG4gICAgLy8gY29uc3Qgam9iQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYnNUYWInKTtcclxuICAgIC8vIFlvdSBjYW4gYWRkIG1vcmUgY29udGFpbmVycyBmb3IgZGlmZmVyZW50IHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgY29uc3QgcHJvZHVjdGlvbkNvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKHByb2R1Y3Rpb25Db250YWluZXIpO1xyXG4gICAgY29uc3QgZXhwZXJpbWVudENvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKGV4cGVyaW1lbnRDb250YWluZXIpO1xyXG4gICAgY29uc3QgcG9uZGVyQ29sdW1ucyA9IGNyZWF0ZUNvbHVtbnMocG9uZGVyQ29udGFpbmVyKTtcclxuICAgIC8vIGNvbnN0IGpvYkNvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKGpvYkNvbnRhaW5lcik7XHJcbiAgICAvLyBTaW1pbGFybHksIGNyZWF0ZSBjb2x1bW5zIGZvciBvdGhlciB0YWJzIGFzIG5lZWRlZFxyXG5cclxuICAgIGxldCBwcm9kdWN0aW9uQ29sdW1uSW5kZXggPSAwO1xyXG4gICAgbGV0IGV4cGVyaW1lbnRDb2x1bW5JbmRleCA9IDA7XHJcbiAgICBsZXQgcG9uZGVyQ29sdW1uSW5kZXggPSAwO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgbGV0IGpvYkNvbHVtbkluZGV4ID0gMDtcclxuXHJcbiAgICAvLyBBZGQgY291bnRlcnMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgZm9yIChsZXQga2V5IGluIGJ1dHRvbnMpIHtcclxuICAgICAgICBjb25zdCBidG4gPSBidXR0b25zW2tleV07XHJcbiAgICAgICAgY29uc3QgYnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG5cclxuICAgICAgICBidXR0b25FbGVtZW50LmlkID0ga2V5O1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NOYW1lID0gYnRuLmNsYXNzO1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBidG4udGV4dDtcclxuXHJcbiAgICAgICAgLy8gYnV0dG9uRWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgICAgICBpZiAoYnRuLnRvb2x0aXBEZXNjKSBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCBidG4udG9vbHRpcERlc2MpO1xyXG4gICAgICAgIGlmIChidG4udG9vbHRpcEVmZmVjdCkgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1lZmZlY3QnLCBidG4udG9vbHRpcEVmZmVjdCk7XHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3VubG9jaycsIGJ0bi51bmxvY2spO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ0bik7XHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnLCBidG4uZGF0YV9idWlsZGluZyk7XHJcbiAgICAgICAgLy8gaWYgdGhpcyByZXNvdXJjZSBpc24ndCB1bmxvY2tlZCwgaGlkZSBpdFxyXG4gICAgICAgIC8vIGlmICghYnRuLmlzVmlzaWJsZSkgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGJ1dHRvbiBjb3JyZXNwb25kcyB0byBhIGNyYWZ0ZWQgcmVzb3VyY2UgdXNpbmcgdGhlIElEXHJcbiAgICAgICAgY29uc3QgY3JhZnRlZFJlc291cmNlID0gT2JqZWN0LnZhbHVlcyhjcmFmdGVkUmVzb3VyY2VzKS5maW5kKHJlc291cmNlID0+IHJlc291cmNlLmlkID09PSBrZXkpO1xyXG5cclxuICAgICAgICBpZiAoY3JhZnRlZFJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIGJ0bi50b29sdGlwQ29zdCA9IGdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlLmNvc3QpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGJ0bi50b29sdGlwQ29zdCk7XHJcblxyXG4gICAgICAgIGlmIChidG4uc2hvd1RhYikge1xyXG4gICAgICAgICAgICBidXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2hvd1RhYihidG4uc2hvd1RhYik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN3aXRjaGluZyB0byB0YWI6IFwiICsgYnRuLnNob3dUYWIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXBwZW5kIHRvIHRoZSBhcHByb3ByaWF0ZSBjb2x1bW4gYmFzZWQgb24gdGhlIHRhYiBwcm9wZXJ0eVxyXG4gICAgICAgIGlmIChidG4udGFiID09PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgcHJvZHVjdGlvbkNvbHVtbnNbcHJvZHVjdGlvbkNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgcHJvZHVjdGlvbkNvbHVtbkluZGV4ID0gKHByb2R1Y3Rpb25Db2x1bW5JbmRleCArIDEpICUgMztcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAnZXhwZXJpbWVudCcpIHtcclxuICAgICAgICAgICAgZXhwZXJpbWVudENvbHVtbnNbZXhwZXJpbWVudENvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgZXhwZXJpbWVudENvbHVtbkluZGV4ID0gKGV4cGVyaW1lbnRDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICd0YWJzJykge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHRhYnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAncG9uZGVyJykge1xyXG4gICAgICAgICAgICBwb25kZXJDb2x1bW5zW3BvbmRlckNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgcG9uZGVyQ29sdW1uSW5kZXggPSAocG9uZGVyQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidG4udGFiID09PSAnam9iJykge1xyXG4gICAgICAgICAgICAvLyBqb2JDb2x1bW5zW2pvYkNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gam9iQ29sdW1uSW5kZXggPSAoam9iQ29sdW1uSW5kZXggKyAxKSAlIDM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCBtb3JlIGNvbmRpdGlvbnMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwIGZvciBidWlsZGluZ3NcclxuICAgICAgICBjb25zdCBidWlsZGluZyA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChidWlsZGluZyA9PiBidWlsZGluZyA9PT0ga2V5KTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnVpbGRpbmcsIGtleSk7XHJcbiAgICAgICAgICAgIC8vIGJ0bi50b29sdGlwQ29zdCA9IGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdChidWlsZGluZ3NbYnVpbGRpbmddLmNvc3QpO1xyXG4gICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXksIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEhpZGUgdGhlIGJ1dHRvbnMgd2Ugc2hvdWxkbid0IHNlZSB5ZXRcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghYnRuLnJlcXVpcmVtZW50KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkVsZW1lbnQsIGJ0bi5yZXF1aXJlbWVudCgpKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIHdpdGggcmVxdWlyZW1lbnQgd2hpbGUgZ2VuZXJhdGluZyBidXR0b25zOiAnLCBidG4sIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCB0b29sc1RvU3RhZ2VzID0ge1xyXG4gICAgJ1NoYXJwUm9ja3MnOiAnY3JhZnRSb2NrcycsXHJcbiAgICAnU3BlYXInOiAnZmlzaGluZycsXHJcbiAgICBcIkZpc2hpbmdSb2RcIjogJ2Zpc2hpbmcnLFxyXG4gICAgJ0F4ZSc6ICd3b29kJyxcclxuICAgIFwiUGlja2F4ZVwiOiAnb3JlJ1xyXG59O1xyXG5cclxuLy8gVXBkYXRlIHZpc2liaWxpdHkgb2YgYXNzZXRzXHJcbmNvbnN0IHZpc2liaWxpdHlSdWxlcyA9IFtcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKFwic3RpY2tzXCIsIHJlc291cmNlcykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKFwic3RpY2tcIilcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnc3RpY2tzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCd2aW5lcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdyb2NrcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoXCJyb2Nrc1wiLCByZXNvdXJjZXMpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7IG1ha2VWaXNpYmxlKFwidGFiLWJ1dHRvblwiKTsgbWFrZVZpc2libGUoJ2NyYWZ0Um9ja3MnKTsgfVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbChcImZpc2hcIiwgcmVzb3VyY2VzKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2Zpc2hpbmcnKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBoYXNUb29sKFwiQXhlXCIpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3dvb2QnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgncm9wZScpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgncm9wZScpXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdmaXNoJywgcmVzb3VyY2VzKSA+PSA1ICYmICFnZXRBdGVGaXNoKCksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VhdEZpc2gnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWF0RmlzaCcpLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0QXRlRmlzaCgpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4geyBtYWtlVmlzaWJsZSgnY2xvbmUnKTsgbWFrZVZpc2libGUoJ3BvbmRlci10YWInKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ3BvbmRlckZpbmlzaCcpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbmF2aWdhdGVUbygnc3RhZ2UyLmh0bWwnKVxyXG4gICAgfVxyXG4gICAgLy8ge1xyXG4gICAgLy8gICAgIGNvbmRpdGlvbjogKCkgPT4gaXNQb25kZXJlZCgnam9icy10YWInKSxcclxuICAgIC8vICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdqb2JzLXRhYicpXHJcbiAgICAvLyB9LFxyXG4gICAgLy8ge1xyXG4gICAgLy8gICAgIGNvbmRpdGlvbjogKCkgPT4gaXNQb25kZXJlZCgnc2tpbGxzVGFibGUnKSxcclxuICAgIC8vICAgICBhY3Rpb246ICgpID0+IHsgbWFrZVZpc2libGUoXCJza2lsbGVkXCIpOyBwb3B1bGF0ZVNraWxsc1RhYmxlKCk7IH1cclxuICAgIC8vIH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCd1cGRhdGluZyB2aXNpYmxlJyk7XHJcbiAgICB2aXNpYmlsaXR5UnVsZXMuZm9yRWFjaChydWxlID0+IHtcclxuICAgICAgICBpZiAocnVsZS5jb25kaXRpb24oKSkge1xyXG4gICAgICAgICAgICBydWxlLmFjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZvciAobGV0IHRvb2wgaW4gdG9vbHNUb1N0YWdlcykge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoIWhhc1Rvb2wodG9vbCkgJiYgZ2V0Q3JhZnRlZFJlc291cmNlKHRvb2wpID4gMCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGFkZFRvb2wodG9vbCk7XHJcbiAgICAgICAgICAgIG1ha2VWaXNpYmxlKHRvb2xzVG9TdGFnZXNbdG9vbF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRIb3ZlckJ1dHRvbiAhPT0gbnVsbCkgdXBkYXRlVG9vbHRpcChjdXJyZW50SG92ZXJCdXR0b24pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGVycik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gU3dpdGNoIHRhYnNcclxubGV0IHRhYkNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi1jb250ZW50ID4gLmNvbnRlbnRcIik7IC8vIERpcmVjdCBjaGlsZHJlbiBvbmx5XHJcbmZ1bmN0aW9uIHNob3dUYWIodGFiTmFtZSkge1xyXG4gICAgY29uc29sZS5sb2coXCJzaG93IHRhYjogXCIgKyB0YWJOYW1lKTtcclxuICAgIC8vIEdldCBhbGwgbWFpbiBjb250YWluZXIgZGl2cyBhbmQgaGlkZSB0aGVtXHJcbiAgICBsZXQgcHJldlRhYiA9ICcnO1xyXG4gICAgZm9yIChsZXQgY29udGVudCBvZiB0YWJDb250YWluZXJzKSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICBwcmV2VGFiID0gY29udGVudC5pZDtcclxuICAgICAgICAgICAgY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgYWxsIHRhYiBidXR0b25zIGFuZCByZW1vdmUgdGhlIGFjdGl2ZSBjbGFzc1xyXG4gICAgbGV0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi1idXR0b25cIik7XHJcbiAgICBmb3IgKGxldCB0YWIgb2YgdGFicykge1xyXG4gICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNob3cgdGhlIGNsaWNrZWQgdGFiJ3MgbWFpbiBjb250YWluZXIgZGl2IGFuZCBtYWtlIHRoZSB0YWIgYnV0dG9uIGFjdGl2ZVxyXG4gICAgbGV0IGFjdGl2ZUNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJOYW1lKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGFjdGl2ZUNvbnRlbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuXHJcbiAgICAvLyBHZXQgdGhlIGNsaWNrZWQgdGFiIGJ1dHRvbiBhbmQgbWFrZSBpdCBhY3RpdmVcclxuICAgIGNvbnN0IHRhYlN0cmluZyA9IGAjJHt0YWJOYW1lfUJ1dHRvbmA7XHJcbiAgICBsZXQgYWN0aXZlVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YWJTdHJpbmcpO1xyXG5cclxuICAgIGlmIChhY3RpdmVUYWJCdXR0b24pIGFjdGl2ZVRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgIGlmICh0YWJOYW1lID09PSAnam9ic1RhYicpXHJcbiAgICAgICAgZHJhd0FsbENvbm5lY3Rpb25zKCk7XHJcblxyXG5cclxuICAgIGlmICh0YWJOYW1lID09PSAnZmFjdG9yeVRhYicgJiYgcHJldlRhYiAhPT0gJ2ZhY3RvcnlUYWInKSB7XHJcbiAgICAgICAgY2xlYXJTaWRlYmFyKCk7XHJcbiAgICAgICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncygpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJldlRhYiA9PT0gJ2ZhY3RvcnlUYWInKSB7XHJcbiAgICAgICAgY2xlYXJTaWRlYmFyKCk7XHJcbiAgICAgICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyogSE9US0VZUyAqL1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xyXG4gICAgICAgIGNhc2UgJzEnOlxyXG4gICAgICAgICAgICBzaG93VGFiKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3RhYi1idXR0b24nKSkgc2hvd1RhYignZXhwZXJpbWVudFRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAvLyBBZGQgY2FzZXMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcbiAgICAgICAgY2FzZSAnMyc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpKSBzaG93VGFiKCdwb25kZXJUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNCc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnam9icy10YWInKSkgc2hvd1RhYignam9ic1RhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc1JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpKSBzaG93VGFiKCdza2lsbHNUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncGVya3NUYWInKSkgc2hvd1RhYigncGVya3NUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNyc6XHJcbiAgICAgICAgICAgIGlmICh0cnVlKSBzaG93VGFiKCdmYWN0b3J5VGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBEQVJLIE1PREUgKi9cclxuY29uc3QgZGFya01vZGVUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhcmtNb2RlVG9nZ2xlXCIpO1xyXG5jb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcclxuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrLW1vZGUnKTtcclxuLy8gQHRzLWlnbm9yZVxyXG5kYXJrTW9kZVRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJyk7XHJcbmxldCBpc0RhcmsgPSB0cnVlO1xyXG5cclxuXHJcbi8qIENVVFNDRU5FUyAqL1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGVhdEZpc2goKSB7XHJcbiAgICBpZiAoIWdldEF0ZUZpc2goKSAmJiBnZXRNYXRlcmlhbCgnZmlzaCcsIHJlc291cmNlcykgPj0gMSkge1xyXG4gICAgICAgIC8vIGVhdCBhIGZpc2ggYW5kIGJsYWNrb3V0XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoJ2Zpc2gnLCAtMSk7XHJcbiAgICAgICAgLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIHRvIHN0YXJ0IHRoZSBzZXF1ZW5jZVxyXG4gICAgICAgIGZhZGVUb0JsYWNrKCk7XHJcbiAgICAgICAgLy8gSGlkZSBmaXNoIGJ1dHRvblxyXG4gICAgICAgIHNldEF0ZUZpc2godHJ1ZSk7XHJcbiAgICAgICAgY29uc3QgZmlzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWF0RmlzaFwiKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjaGFuZ2VNZXNzYWdlKFwiWW91IGFyZSB3aXRoIHlvdXJzZWxmIGluIGEgZm9yZXN0LlwiLCAnd2l0aCB5b3Vyc2VsZicpO1xyXG4gICAgICAgICAgICBpbmNyZWFzZU1heCgnY2xvbmVzJywgMSk7XHJcbiAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgIH0sIDEwMDApOyAvLyBkZWxheSBvZiAxc1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZhZGVUb0JsYWNrKCkge1xyXG4gICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5Jyk7XHJcbiAgICBjb25zdCBvdmVybGF5VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LXRleHQnKTtcclxuICAgIGNvbnN0IG92ZXJsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1idXR0b24nKTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG92ZXJsYXlUZXh0LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICB9LCAyMDAwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgb3ZlcmxheUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH0sIDUwMDApO1xyXG59XHJcblxyXG5jb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGhpZGVPdmVybGF5KCkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuYXZpZ2F0ZVRvKHVybCkge1xyXG4gICAgLy8gVHJpZ2dlciB0aGUgb3ZlcmxheSB0byBmYWRlIGluXHJcbiAgICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWdlLXRyYW5zaXRpb24tb3ZlcmxheScpO1xyXG4gICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdmYWRlLWluJyk7XHJcblxyXG4gICAgLy8gV2FpdCBmb3IgdGhlIGZhZGUgaW4gdG8gY29tcGxldGUgYmVmb3JlIGNoYW5naW5nIHRoZSBwYWdlXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcclxuICAgIH0sIDMwMCk7IC8vIFRoaXMgZHVyYXRpb24gc2hvdWxkIG1hdGNoIHRoZSBDU1Mgb3BhY2l0eSB0cmFuc2l0aW9uXHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuLy8gbmF2aWdhdGVUbygnbmV4dC1wYWdlLmh0bWwnKTtcclxuXHJcblxyXG5cclxuLy8gTWVzc2FnZSBcclxuY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZScpO1xyXG5mdW5jdGlvbiBjaGFuZ2VNZXNzYWdlKG5ld01lc3NhZ2UsIGNsb25lV29yZHMpIHtcclxuICAgIGNvbnN0IG1vZGlmaWVkTWVzc2FnZSA9IG5ld01lc3NhZ2UucmVwbGFjZShjbG9uZVdvcmRzLCBgPHNwYW4gaWQ9XCJhbG9uZVwiIHRpdGxlPVwiWW91IGZlZWwgcGVja2lzaCBmb3Igc29tZSBzZWFmb29kXCI+JHtjbG9uZVdvcmRzfTwvc3Bhbj5gKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIG1lc3NhZ2VFbGVtZW50LmlubmVySFRNTCA9IG1vZGlmaWVkTWVzc2FnZTtcclxufVxyXG5mdW5jdGlvbiBnZXRNZXNzYWdlKCkge1xyXG4gICAgcmV0dXJuIG1lc3NhZ2VFbGVtZW50O1xyXG59XHJcblxyXG4vKiBHQU1FIExPT1AgKi9cclxuXHJcblxyXG5sZXQgbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSA9IDUwO1xyXG5sZXQgbGFzdF90aW1lID0gbnVsbDtcclxubGV0IHRvdGFsX3RpbWUgPSAwO1xyXG5sZXQgYWNjdW11bGF0ZWRfbGFnID0gMDtcclxuXHJcblxyXG5mdW5jdGlvbiBsb29wKGN1cnJlbnRfdGltZSkge1xyXG4gICAgaWYgKGxhc3RfdGltZSA9PT0gbnVsbCkgbGFzdF90aW1lID0gY3VycmVudF90aW1lO1xyXG5cclxuICAgIGNvbnN0IGRlbHRhX3RpbWUgPSBjdXJyZW50X3RpbWUgLSBsYXN0X3RpbWU7XHJcblxyXG4gICAgdG90YWxfdGltZSArPSBkZWx0YV90aW1lO1xyXG4gICAgYWNjdW11bGF0ZWRfbGFnICs9IGRlbHRhX3RpbWU7XHJcblxyXG4gICAgbGFzdF90aW1lID0gY3VycmVudF90aW1lO1xyXG5cclxuICAgIC8vIENhdGNoIHVwIGFsbCB0aGUgbWlzc2VkIHRpY2tzXHJcbiAgICBsZXQgbm9ybWFsUmF0ZSA9IG1pbGxpc2Vjb25kc19wZXJfZnJhbWU7XHJcbiAgICAvLyBzaW11bGF0ZSB3aXRoIGxlc3MgZmlkZWxpdHkgdG8gbWFrZSB1cCB0aW1lXHJcbiAgICAvLyB3aGlsZSAoYWNjdW11bGF0ZWRfbGFnID49IDEwMCAqIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUpIHtcclxuICAgIC8vICAgICBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lICo9IDEwMDtcclxuICAgIC8vIH1cclxuICAgIGlmIChhY2N1bXVsYXRlZF9sYWcgPj0gMTAgKiBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKSB7XHJcbiAgICAgICAgbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSA9IGFjY3VtdWxhdGVkX2xhZyAvIDEwO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKGFjY3VtdWxhdGVkX2xhZyA+PSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKSB7XHJcblxyXG4gICAgICAgIGFjY3VtdWxhdGVkX2xhZyAtPSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lO1xyXG4gICAgICAgIHVwZGF0ZShtaWxsaXNlY29uZHNfcGVyX2ZyYW1lLCB0b3RhbF90aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gbm9ybWFsUmF0ZTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcclxufVxyXG5cclxuXHJcbmxldCB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSA9IDA7XHJcbmxldCB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPSAwO1xyXG5mdW5jdGlvbiB1cGRhdGUoZGVsdGFfdGltZSwgdG90YWxfdGltZSkge1xyXG5cclxuICAgIGZvciAobGV0IGtleSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInVwZGF0aW5nIFwiICsga2V5KTtcclxuXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChrZXksIGNhbGNJbmNyZWFzZShrZXksIGRlbHRhX3RpbWUpKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMoKTtcclxuICAgIHJlbmRlcigpO1xyXG5cclxuICAgIC8vIFNhdmUgdGhlIGdhbWUgZXZlcnkgMTAgc2Vjb25kc1xyXG4gICAgdGltZV9zaW5jZV9sYXN0X3NhdmUgKz0gZGVsdGFfdGltZTtcclxuICAgIHRpbWVfc2luY2VfbWFudWZhdHVyZSArPSBkZWx0YV90aW1lO1xyXG4gICAgdG90YWxfdGltZSArPSBkZWx0YV90aW1lO1xyXG4gICAgaWYgKHRpbWVfc2luY2VfbGFzdF9zYXZlID49IDEwMDAwKSB7XHJcbiAgICAgICAgc2F2ZUdhbWUoKTtcclxuICAgICAgICB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFudWZhY3R1cmUgZXZlcnkgc2Vjb25kXHJcbiAgICBpZiAodGltZV9zaW5jZV9tYW51ZmF0dXJlID49IDEwMDApIHtcclxuICAgICAgICBhdHRlbXB0TWFudWZhY3R1cmUoKTtcclxuICAgICAgICB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPSAwO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLy8gd2luZG93LnNldEludGVydmFsKHJlbmRlciwgMTAwKSAvLyBVcGRhdGUgdmlzdWFscyAxMCB0aW1lcyBwZXIgc2Vjb25kXHJcbi8vIHdpbmRvdy5zZXRJbnRlcnZhbCh0aWNrLCAxMDAwKTsgLy8gRXZlcnkgdGljayBsYXN0cyBmb3IgMSBzZWNvbmRcclxuLy8gd2luZG93LnNldEludGVydmFsKHNhdmVHYW1lLCAxMDAwMCk7IC8vIFNhdmUgdGhlIGdhbWUgZXZlcnkgMTAgc2Vjb25kc1xyXG5cclxuXHJcblxyXG4vLyBjb25zdCBteVJlc291cmNlcyA9IHt9O1xyXG5cclxuLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGRSZXNvdXJjZUJ0blwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZUZvcm1cIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuLy8gfSk7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gYWRkUmVzb3VyY2UoKSB7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlTmFtZVwiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGFjdGl2ZVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlQWN0aXZlVGV4dFwiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGRlZmF1bHRUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZURlZmF1bHRUZXh0XCIpLnZhbHVlO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGJ0blRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRleHRcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5Ub29sdGlwRGVzYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuVG9vbHRpcERlc2NcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5Ub29sdGlwQ29zdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuVG9vbHRpcENvc3RcIikudmFsdWU7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdmFyIG5ld1Jlc291cmNlID0gbXlSZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSA9IHtcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBpZDogXCJnYXRoZXJcIiArIHJlc291cmNlTmFtZSxcclxuICAgICAgICBpc0dldHRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZVRleHQ6IGFjdGl2ZVRleHQsXHJcbiAgICAgICAgZGVmYXVsdFRleHQ6IGRlZmF1bHRUZXh0LFxyXG4gICAgICAgIC8vIC4uLiBBZGQgb3RoZXIgYXR0cmlidXRlcyBhcyBmZXRjaGVkIGZyb20gZm9ybSAuLi5cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBidXR0b24gb2JqZWN0XHJcbiAgICB2YXIgbmV3QnV0dG9uID0gYnV0dG9uc1tcImdhdGhlclwiICsgcmVzb3VyY2VOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVzb3VyY2VOYW1lLnNsaWNlKDEpXSA9IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiBidG5UZXh0LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBidG5Ub29sdGlwRGVzYyxcclxuICAgICAgICB0b29sdGlwQ29zdDogYnRuVG9vbHRpcENvc3QsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUgLy8gQnkgZGVmYXVsdCwgbWFraW5nIHRoaXMgYWx3YXlzIHZpc2libGUuIE1vZGlmeSBhcyBuZWVkZWQuXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKG5ld1Jlc291cmNlKTtcclxuICAgIGNvbnNvbGUubG9nKG5ld0J1dHRvbik7XHJcblxyXG4gICAgLy8gSGlkZSBmb3JtIG9uY2UgcmVzb3VyY2UgaXMgYWRkZWRcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VGb3JtXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAvLyBPcHRpb25hbGx5LCB5b3UgY2FuIHVwZGF0ZSB0aGUgVUkgdG8gc2hvdyB0aGUgYWRkZWQgcmVzb3VyY2VcclxuICAgIC8vIHVwZGF0ZVVJKHJlc291cmNlTmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVVJKHJlc291cmNlTmFtZSkge1xyXG4gICAgLy8gSGVyZSB5b3UgY2FuIGNyZWF0ZSBhIG5ldyBET00gZWxlbWVudCB0byBkaXNwbGF5IHRoZSBhZGRlZCByZXNvdXJjZVxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgcmVzb3VyY2VEaXYuaW5uZXJIVE1MID0gYCR7cmVzb3VyY2VOYW1lfTogJHtyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS52YWx1ZX1gO1xyXG5cclxuICAgIC8vIEFwcGVuZCB0byBzb21lIGNvbnRhaW5lclxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZXNvdXJjZURpdik7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCB0b29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R5bmFtaWMtdG9vbHRpcCcpO1xyXG5cclxuZnVuY3Rpb24gc2hvd1Rvb2x0aXAodGFyZ2V0LCBkZXNjLCBlZmZlY3QsIGNvc3QpIHtcclxuICAgIGxldCBjb250ZW50ID0gJyc7XHJcblxyXG4gICAgaWYgKGRlc2MpIHtcclxuICAgICAgICBjb250ZW50ICs9IGA8c3BhbiA+JHtkZXNjfTwvc3Bhbj48aHI+YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWZmZWN0KSB7XHJcbiAgICAgICAgY29udGVudCArPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjojMDBBQkU3XCI+JHtlZmZlY3R9PC9zcGFuPjxocj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb3N0KSB7XHJcbiAgICAgICAgLy8gY29udGVudCArPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjojRjREMDNGXCI+JHtjb3N0fTwvc3Bhbj48YnI+YDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG1hdGVyaWFsIGluIGNvc3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IG1hdGVyaWFsID0gcmVxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gY29zdFttYXRlcmlhbF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNFbm91Z2ggPSBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA+PSBhbW91bnQ7LyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi87XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JDbGFzcyA9IGhhc0Vub3VnaCA/ICdlbm91Z2gnIDogJ25vdC1lbm91Z2gnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdldE1heChtYXRlcmlhbCkgPCBhbW91bnQpIGNvbG9yQ2xhc3MgPSAnZXhjZWVkcy1tYXgnO1xyXG4gICAgICAgICAgICAgICAgc3RyICs9IGA8c3BhbiBjbGFzcz1cInRvb2x0aXAtJHttYXRlcmlhbH0gJHtjb2xvckNsYXNzfVwiPiR7YW1vdW50LnRvRml4ZWQoMCl9ICR7bWF0ZXJpYWx9PC9zcGFuPmA7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vjb25kc1JlbWFpbmluZyA9IGNhbGNTZWNvbmRzUmVtYWluaW5nKG1hdGVyaWFsLCBhbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2Vjb25kc1JlbWFpbmluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kc1JlbWFpbmluZyA+IDAgJiYgY29sb3JDbGFzcyAhPSAnZXhjZWVkcy1tYXgnKSB7IHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0aW1lLXJlbWFpbmluZ1wiPigkeyhzZWNvbmRzUmVtYWluaW5nKS50b0ZpeGVkKDApfSBzZWNvbmRzKTwvc3Bhbj5gOyB9XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxicj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gc3RyO1xyXG5cclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29udGVudCArPSBjb3N0O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgbWFrZSBub3JtYWwgY29zdCBmb3IgYnV0dG9uOiBcIiwgdGFyZ2V0LCBjb3N0LCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2codGFyZ2V0LCBjb250ZW50KTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuaW5uZXJIVE1MID0gY29udGVudDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUubGVmdCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQgKyA1KSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLnRvcCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gdG9vbHRpcC5vZmZzZXRIZWlnaHQgLyAyKSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlVG9vbHRpcCgpIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVG9vbHRpcChidXR0b24pIHtcclxuICAgIGNvbnN0IGRlc2MgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycpIHx8IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBEZXNjJyk7XHJcbiAgICBjb25zdCBlZmZlY3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZWZmZWN0Jyk7XHJcbiAgICAvLyBjb25zdCBjb3N0ID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnKTtcclxuXHJcbiAgICBjb25zdCBjb25maWcgPSBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQoYnV0dG9uLmlkKSB8fCBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbi5pZCkgfHwgYnVpbGRpbmdzW2J1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKV0gfHwgcG9uZGVyc1tidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKV07XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjb25maWcpO1xyXG4gICAgY29uc3QgY29zdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JykgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnKSB8fCBjb25maWcuY29zdDtcclxuICAgIHNob3dUb29sdGlwKGJ1dHRvbiwgZGVzYywgZWZmZWN0LCBjb3N0KTtcclxufVxyXG5cclxuXHJcbi8vIEFmdGVyIGFsbCBoYXMgYmVlbiBsb2FkZWRcclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBAdHMtaWdub3JlXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoZXZlbnQpID0+IHtcclxuICAgIGdlbmVyYXRlUG9uZGVyQnV0dG9ucyhwb25kZXJzKTtcclxuICAgIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKTtcclxuICAgIGdlbmVyYXRlQnV0dG9ucygpOyAvLyBDYWxsIHRoaXMgb25jZSBvbiBwYWdlIGxvYWQgb3IgZ2FtZSBpbml0aWFsaXphdGlvblxyXG5cclxuICAgIGxvYWRHYW1lKCk7XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICBzaG93VGFiKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICByZXF1aXJlKCcuL3RyYWRlJykuZ2VuZXJhdGVUcmFkZVRhYmxlKHJlc291cmNlcyk7XHJcbiAgICAvLyBjcmVhdGVSZXNvdXJjZVRhZygnc3RpY2tzJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UktleUZyb21JRChpZCkge1xyXG4gICAgICAgIGZvciAobGV0IHIgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlc1tyXS5pZCwgaWQpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW3JdLmlkID09PSBpZCkgcmV0dXJuIHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldENSS2V5RnJvbUlEKGlkKSB7XHJcbiAgICAgICAgZm9yIChsZXQgciBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlc1tyXS5pZCwgaWQpO1xyXG4gICAgICAgICAgICBpZiAoY3JhZnRlZFJlc291cmNlc1tyXS5pZCA9PT0gaWQpIHJldHVybiByO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQubWF0Y2hlcyhcImJ1dHRvblwiKSkge1xyXG4gICAgICAgICAgICAvLyBvbmUgb2Ygb3VyIGJ1dHRvbnMgd2FzIGNsaWNrZWRcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2xpY2tlZCcsIGJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdG9vbHRpcHMgXHJcbiAgICAgICAgICAgIC8vIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd0b29sdGlwJykpIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAgICAgLy8gdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpICYmIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKSAhPT0gJ3VuZGVmaW5lZCcgJiYgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygncHVyY2hhc2FibGUnKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgdmFyIGJ1aWxkaW5nID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJ1eU1heEJ1aWxkaW5ncyhidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBidXlCdWlsZGluZyhidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndW5sb2NrJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVubG9ja0F0dHIgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGljaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9uZGVyc1t1bmxvY2tBdHRyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW5VbmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHBvbmRlcnNbdW5sb2NrQXR0cl0uY29zdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPCBwb25kZXJzW3VubG9ja0F0dHJdLmNvc3RbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbm5vdCB1bmxvY2sgXCIgKyB1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhblVubG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCAtcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0W21hdGVyaWFsXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9uZGVyc1t1bmxvY2tBdHRyXS5pc1BvbmRlcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVZpc2libGUodW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyByZXNvdXJjZUtleSArIFwiVmFsdWVcIikudGV4dENvbnRlbnQgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS52YWx1ZS50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMgYnV0dG9uIGRpc2FwcGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmxvY2tpbmcgXCIgKyB1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChidXR0b24uaWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZC5zbGljZSgwLCA2KSA9PT0gXCJnYXRoZXJcIikgdG9nZ2xlUmVzb3VyY2UoZ2V0UktleUZyb21JRChidXR0b24uaWQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQuc2xpY2UoMCwgNSkgPT09ICdjcmFmdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSBjcmFmdEFsbFJlc291cmNlcyhnZXRDUktleUZyb21JRChidXR0b24uaWQpKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGNyYWZ0UmVzb3VyY2UoZ2V0Q1JLZXlGcm9tSUQoYnV0dG9uLmlkKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnc2F2ZUJ1dHRvbicpIHNhdmVHYW1lKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnZWF0RmlzaCcpIGVhdEZpc2goKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdvdmVybGF5LWJ1dHRvbicpIGhpZGVPdmVybGF5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnZGVsZXRlU2F2ZUJ1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2F2ZScpOyBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2NsZWFySm9iQXNzaWdubWVudHMnKSBjbGVhckpvYkFzc2lnbm1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdkYXJrTW9kZVRvZ2dsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2RhcmstbW9kZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBkYXJrTW9kZVRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNEYXJrID0gIWlzRGFyaztcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgZGFya01vZGVUb2dnbGUudGV4dENvbnRlbnQgPSBpc0RhcmsgPyBcIkxpZ2h0IE1vZGVcIiA6IFwiRGFyayBNb2RlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJzJtYWluJykgc2hvd1RhYignbWFpblRhYicpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnMmdyYXBocycpIHNob3dUYWIoJ2dyYXBoc1RhYicpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3RpZXJPbmVCdXR0b24nKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBlcmsgPSBidXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBYmlsaXR5KHBlcmspO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQubWF0Y2hlcyhcIiNhbG9uZVwiKSkge1xyXG4gICAgICAgICAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKCdjbG9uZXMnLCAxKTtcclxuICAgICAgICAgICAgLy8gSGFyZGNvZGVkIGluc3RlYWQgdG8gYXZvaWQgaW5jcmVhc2UgYWZmZWN0ZWQgYnkgcHJvZHVjdGl2aXR5IGJvbnVzZXNcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1snY2xvbmVzJ10udmFsdWUgPCByZXNvdXJjZXNbJ2Nsb25lcyddLm1heCkgcmVzb3VyY2VzWydjbG9uZXMnXS52YWx1ZSArPSAxO1xyXG5cclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlRmFjdG9yeUJ1dHRvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yeUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmFjdG9yeUJ1dHRvbnMnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYnV5RmFjdG9yeUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uaWQgPSAnYnV5RmFjdG9yeUJ1dHRvbic7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi50ZXh0Q29udGVudCA9ICdCdXkgTmV3IEZhY3RvcnknO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsICdUaGUgZmFjdG9yeSBtdXN0IGdyb3chJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgJzUwIHNpbHZlcicpO1xyXG4gICAgICAgIGZhY3RvcnlCdXR0b25zLmFwcGVuZENoaWxkKGJ1eUZhY3RvcnlCdXR0b24pO1xyXG5cclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYnV5aW5nIGZhY3RvcnknKTtcclxuICAgICAgICAgICAgYnV5RmFjdG9yeSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB1cGdyYWRlQnVsa0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Rvb2x0aXAnKTtcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5pZCA9ICd1cGdyYWRlQnVsa0J1dHRvbic7XHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24udGV4dENvbnRlbnQgPSAnVXBncmFkZSBCdWxrJztcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgJ0NyYWZ0IG1vcmUgcmVzb3VyY2VzIHBlciBzZWNvbmQnKTtcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgJzIg4oaSIDQ6IDMwIHNpbHZlcicpO1xyXG4gICAgICAgIGZhY3RvcnlCdXR0b25zLmFwcGVuZENoaWxkKHVwZ3JhZGVCdWxrQnV0dG9uKTtcclxuXHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwZ3JhZGluZyBidWxrJyk7XHJcbiAgICAgICAgICAgIHVwZ3JhZGVCdWxrKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcbiAgICBtYWtlRmFjdG9yeUJ1dHRvbnMoKTtcclxuICAgIGNyZWF0ZUZhY3RvcnlEaXYoKTtcclxuXHJcblxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG5cclxuICAgIC8vIFNhbXBsZSB1c2FnZTpcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b29sdGlwJykuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbik7XHJcbiAgICAgICAgLy8gRXh0cmFjdCB0aGUgZGF0YSBmcm9tIHlvdXIgYnVpbGRpbmcgb3IgYW55IG90aGVyIGRhdGEgLSBzb3VyY2VcclxuICAgICAgICAvLyBjb25zdCBjb250ZW50ID0gXCJZb3VyIHRvb2x0aXAgY29udGVudCBoZXJlXCI7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAgICAgY3VycmVudEhvdmVyQnV0dG9uID0gYnV0dG9uO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgLy8gVE9ETzogbW92ZSB0aGlzIGV2ZW50IGxpc3RlbmVyXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ29uY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7IGhpZGVUb29sdGlwKCk7IGN1cnJlbnRIb3ZlckJ1dHRvbiA9IG51bGw7IH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBqb2JzIGNvdW50ZXJcclxuICAgIHVwZGF0ZVRvdGFsKCk7XHJcblxyXG5cclxufSk7XHJcblxyXG52YXIgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAgIHVwZGF0ZVNpZGViYXIsXHJcbiAgICB1cGRhdGVVSSxcclxuICAgIHNldFRvdGFsVGltZSxcclxuICAgIGNoYW5nZU1lc3NhZ2UsXHJcblxyXG4gICAgZ2V0TWVzc2FnZSxcclxuICAgIHRvdGFsX3RpbWUsXHJcbiAgICBjdXJyZW50SG92ZXJCdXR0b25cclxuXHJcbn07XHJcbiIsIlxyXG5jb25zdCB7IHNldFN0YWdlLCBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuXHJcbi8qKlxyXG4gKiBNYWtlIGV2ZXJ5dGhpbmcgd2l0aCB0aGUgY2xhc3MgXCJzdGFnZVwiIHZpc2libGVcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0YWdlXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlVmlzaWJsZShzdGFnZSkge1xyXG4gICAgaWYgKCFwYXNzZWRTdGFnZShzdGFnZSkpIHtcclxuICAgICAgICBzZXRTdGFnZShzdGFnZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGFnZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInAuXCIgKyBzdGFnZSk7XHJcbiAgICBzdGFnZUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKSk7XHJcbiAgICAvLyBcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHN0YWdlRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnKTtcclxuICAgIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKTtcclxufVxyXG5leHBvcnRzLm1ha2VWaXNpYmxlID0gbWFrZVZpc2libGU7IiwiY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBwZXJrcyB9ID0gcmVxdWlyZSgnLi9qc29uL3BlcmtzJyk7XHJcbmxldCBteVBlcmtzID0gW107XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwZXJrTmFtZSBcclxuICogQHJldHVybnMgYm9vbGVhblxyXG4gKi9cclxuZnVuY3Rpb24gaGFzUGVyayhwZXJrTmFtZSkge1xyXG4gICAgcmV0dXJuIG15UGVya3MuaW5jbHVkZXMocGVya05hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBbGxQZXJrcygpIHtcclxuICAgIHJldHVybiBteVBlcmtzO1xyXG59XHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IHBlcmtOYW1lIFBlcmsgdG8gYWRkXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRQZXJrKHBlcmtOYW1lKSB7XHJcbiAgICBteVBlcmtzLnB1c2gocGVya05hbWUpO1xyXG5cclxuICAgIC8vIERvIGFsbCB0aGUgb25lLXRpbWUgdXBkYXRlc1xyXG4gICAgc3dpdGNoIChwZXJrTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ0FyY2hpdGVjdCc6XHJcbiAgICAgICAgICAgIGZvciAobGV0IGIgaW4gYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2J1aWxkaW5ncycpLnJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGIsIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdGllck51bSBcclxuICovXHJcbmZ1bmN0aW9uIGdldFBlcmtGcm9tVGllcih0aWVyTnVtKSB7XHJcbiAgICBmb3IgKGxldCBwZXJrIGluIHBlcmtzWyd0aWVyJyArIHRpZXJOdW1dKSB7XHJcbiAgICAgICAgaWYgKGhhc1BlcmsocGVyaykpIHJldHVybiBwZXJrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vIHBlcmsgZm9yIHRoaXMgdGllclxyXG4gICAgcmV0dXJuICcnO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gc2VsZWN0QWJpbGl0eShhYmlsaXR5TmFtZSkge1xyXG4gICAgaWYgKGhhc1BlcmsoYWJpbGl0eU5hbWUpKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGNvbmZpcm1TZWxlY3Rpb24gPSB3aW5kb3cuY29uZmlybShcIkRvIHlvdSB3YW50IHRvIHNlbGVjdCBcIiArIGFiaWxpdHlOYW1lICsgXCI/IFRoaXMgZGVjaXNpb24gY2Fubm90IGJlIGVhc2lseSBjaGFuZ2VkLlwiKTtcclxuXHJcbiAgICBpZiAoIWNvbmZpcm1TZWxlY3Rpb24pIHJldHVybjtcclxuICAgIGFkZFBlcmsoYWJpbGl0eU5hbWUpO1xyXG5cclxuICAgIC8vIGZvciAobGV0IGkgPSAxOyBpIDw9IDE7ICsraSlcclxuICAgIHJlcXVpcmUoJy4vc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24nKS5zZWxlY3RDb3JyZWN0UGVya0J1dHRvbihhYmlsaXR5TmFtZSk7XHJcblxyXG4gICAgLy8gbXlQZXJrcy5wdXNoKGFiaWxpdHlOYW1lKTtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGhhc1BlcmssXHJcbiAgICBhZGRQZXJrLFxyXG4gICAgc2VsZWN0QWJpbGl0eSxcclxuICAgIGdldFBlcmtGcm9tVGllcixcclxuICAgIGdldEFsbFBlcmtzXHJcbn07IiwiLy8gREVQRU5EUyBPTjoganNvbi9idXR0b25zLmpzXHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoJy4vanNvbi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5cclxuZnVuY3Rpb24gaXNQb25kZXJlZChpZCkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGlkIGV4aXN0cyBpbiB0aGUgdW5sb2NrcyBtYXBcclxuICAgIC8vIElmIHRoZSBpZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBtYXAsIHJldHVybiBmYWxzZVxyXG5cclxuICAgIHJldHVybiBwb25kZXJzW2lkXSA/IHBvbmRlcnNbaWRdLmlzUG9uZGVyZWQgOiBmYWxzZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhblVubG9jayh1bmxvY2tJZCkge1xyXG4gICAgLy8gR2V0IHRoZSBrZXkgZnJvbSB0aGlzIGlkXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHVubG9jaz8gJywgdW5sb2NrSWQpO1xyXG4gICAgdmFyIHVubG9ja0tleSA9ICcnO1xyXG4gICAgZm9yIChsZXQgdW5sb2NrIGluIHBvbmRlcnMpIHtcclxuICAgICAgICBpZiAocG9uZGVyc1t1bmxvY2tdLmlkID09PSB1bmxvY2tJZCkge1xyXG4gICAgICAgICAgICB1bmxvY2tLZXkgPSB1bmxvY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh1bmxvY2tLZXkgPT09ICcnKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiaW52YWxpZCB1bmxvY2sgaWQ6IFwiLCB1bmxvY2tJZCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICB2YXIgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHBvbmRlcnNbdW5sb2NrS2V5XS5jb3N0KSB7XHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpIDwgcG9uZGVyc1t1bmxvY2tLZXldLmNvc3RbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ2Fubm90IHVubG9jayBcIiArIHVubG9ja0lkKTtcclxuICAgICAgICAgICAgY2FuQnV5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHdlIHVubG9jayAnLCB1bmxvY2tJZCwgY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMocG9uZGVyT2JqZWN0cykge1xyXG4gICAgLy8gY29uc3QgZ2VuZXJhdGVkQnV0dG9ucyA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgW3BvbmRlcktleSwgcG9uZGVyT2JqXSBvZiBPYmplY3QuZW50cmllcyhwb25kZXJPYmplY3RzKSkge1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25LZXkgPSBgcG9uZGVyJHtjYXBpdGFsaXplRmlyc3QocG9uZGVyS2V5KX1gOyAvLyBlLmcuIHBvbmRlckZpc2hpbmdcclxuXHJcbiAgICAgICAgYnV0dG9uc1tidXR0b25LZXldID0ge1xyXG4gICAgICAgICAgICBjbGFzczogJ3Rvb2x0aXAgdW5sb2NrJyxcclxuICAgICAgICAgICAgdGV4dDogcG9uZGVyT2JqLnRleHQgfHwgJ1BvbmRlciBhIE15c3Rlcnk/JyxcclxuICAgICAgICAgICAgdG9vbHRpcERlc2M6IHBvbmRlck9iai50b29sdGlwRGVzYyB8fCBcIldobyBrbm93cyB3aGF0IHlvdSdsbCBkaXNjb3ZlclwiLFxyXG4gICAgICAgICAgICB0b29sdGlwQ29zdDogcG9uZGVyT2JqLnRvb2x0aXBDb3N0LFxyXG4gICAgICAgICAgICB0YWI6ICdwb25kZXInLFxyXG4gICAgICAgICAgICB1bmxvY2s6IHBvbmRlcktleSxcclxuICAgICAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1aXJlKCcuL2hlbHBlcicpLmdldE1heCgncG9uZGVyJykgPj0gcG9uZGVyc1twb25kZXJLZXldLmNvc3RbJ3BvbmRlciddIC8gMjtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhpZGU6ICgpID0+IGlzUG9uZGVyZWQocG9uZGVyS2V5KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbktleSwgYnV0dG9uc1tidXR0b25LZXldKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIGdlbmVyYXRlZEJ1dHRvbnM7XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNhblVubG9jayxcclxuICAgIGlzUG9uZGVyZWQsXHJcbiAgICBnZW5lcmF0ZVBvbmRlckJ1dHRvbnNcclxufTsiLCJcclxuLy8gREVQRU5EUyBPTjogdG9vbHMuanMsIGpvYnMuanNcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzLCBnZXRCb29zdCB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcblxyXG5jb25zdCB7IGdldFdvcmtlcnMsIHVwZGF0ZVRvdGFsLCByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNUb29sLCBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi90b29scycpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIsIHVwZGF0ZVNraWxscywgY2FsY0NyYWZ0Qm9udXMsIGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5jb25zdCB7IGNhbkNyYWZ0IH0gPSByZXF1aXJlKCcuL2NhbkNyYWZ0Jyk7XHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5jb25zdCB7IGhhc1BlcmsgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuLy8gY29uc29sZS5sb2coY2FwaXRhbGl6ZUZpcnN0KTtcclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IGpvYiBcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gaXNSZXNvdXJjZUFmZmVjdGVkQnlKb2Ioam9iLCByZXNvdXJjZSkge1xyXG4gICAgY29uc3Qgc2tpbGwgPSBza2lsbHNbam9iXTtcclxuICAgIGlmICghc2tpbGwpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBpZiAoc2tpbGwuYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2UpKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBhIHRvb2wgcmVxdWlyZW1lbnQgZm9yIHRoaXMgcmVzb3VyY2VcclxuICAgICAgICBpZiAoc2tpbGwubmVlZFRvb2xzICYmIEFycmF5LmlzQXJyYXkoc2tpbGwubmVlZFRvb2xzKSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB0b29sT2JqIG9mIHNraWxsLm5lZWRUb29scykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdG9vbCBpbiB0b29sT2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2xPYmpbdG9vbF0uaW5jbHVkZXMocmVzb3VyY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHBsYXllciBoYXMgdGhpcyB0b29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBub3csIGp1c3QgcmV0dXJuaW5nIHRydWUgdG8gaW5kaWNhdGUgdGhlIHJlc291cmNlIGlzIGFmZmVjdGVkIGFuZCBhIHRvb2wgaXMgbmVlZGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ1dCB5b3UgbWF5IHdhbnQgdG8gcmVwbGFjZSB0aGlzIHdpdGggYSBjaGVjayB0byBzZWUgaWYgdGhlIHBsYXllciBwb3NzZXNzZXMgdGhlIHJlcXVpcmVkIHRvb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc1Rvb2wodG9vbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFdlIG5lZWRlZCBhIHRvb2wgYnV0IG5vdCBmb3IgdGhpc1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgbm8gdG9vbCByZXF1aXJlbWVudCB3YXMgZm91bmQgZm9yIHRoZSByZXNvdXJjZSwgaXQncyBzdGlsbCBhZmZlY3RlZCBieSB0aGUgam9iXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIENsb25lcyB3b3JrIGF0IDEvNCB0aGUgc3BlZWQgYnkgZGVmYXVsdFxyXG52YXIgY2xvbmVNdWx0ID0gMC4yNTtcclxuLy8gY29uc29sZS5sb2coJ2luaXRpYWwnLCB3b3JrZXJzRGlzdHJpYnV0aW9uKTtcclxuZnVuY3Rpb24gY2FsY0luY3JlYXNlKHJlc291cmNlTmFtZSwgZGVsdGFfdGltZSkge1xyXG4gICAgdmFyIHRvdGFsID0gMDtcclxuXHJcbiAgICAvLyBjbG9uZXMgaW5jcmVhc2UgYnkgMSBwZXIgc2Vjb25kIGFzIGxvbmcgYXMgdGhlcmUncyBzcGFjZVxyXG4gICAgLy8gaWYgKHJlc291cmNlID09PSAnY2xvbmVzJyAmJiBwYXNzZWRTdGFnZSgnY2xvbmUnKSkge1xyXG4gICAgLy8gICAgIHRvdGFsID0gMTtcclxuICAgIC8vICAgICByZXR1cm4gdG90YWw7XHJcbiAgICAvLyB9XHJcbiAgICBpZiAoY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZU5hbWUpKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgb3VyIGZhY3Rvcmllc1xyXG5cclxuICAgIH0gZWxzZSBpZiAoIXJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZU5hbWUpKSByZXR1cm4gdG90YWw7XHJcblxyXG4gICAgaWYgKHJlc291cmNlTmFtZSA9PT0gJ2Nsb25lcycgJiYgaXNQb25kZXJlZCgnYXV0b0Nsb25lJykpIHRvdGFsID0gMTtcclxuICAgIC8vIENoZWNrIHRvb2xzXHJcbiAgICB2YXIgY3VyclRvb2wgPSBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZShyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSk7XHJcbiAgICAvLyBHYXRoZXJpbmcgcGVyc29uYWxseVxyXG4gICAgaWYgKHJlc291cmNlc1tyZXNvdXJjZU5hbWVdLmlzR2V0dGluZykge1xyXG4gICAgICAgIHRvdGFsICs9IGN1cnJUb29sO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGpvYnNcclxuICAgIGxldCBsZWFkZXJNdWx0ID0gaGFzUGVyaygnTGVhZGVyJykgPyBjbG9uZU11bHQgKiAxLjUgOiBjbG9uZU11bHQ7XHJcbiAgICB0b3RhbCArPSBsZWFkZXJNdWx0ICogZ2V0V29ya2VycyhyZXNvdXJjZU5hbWUpIHx8IDA7XHJcblxyXG5cclxuICAgIC8vIEFwcGx5IHBlcmtzIHByb2R1Y3Rpb24gYm9vc3RcclxuICAgIGlmIChoYXNQZXJrKCdMdW1iZXJqYWNrJykgJiYgKHJlc291cmNlTmFtZSA9PSAnd29vZCcgfHwgcmVzb3VyY2VOYW1lID09ICdzdGlja3MnKSkgdG90YWwgKj0gMS4yNTtcclxuICAgIGlmIChoYXNQZXJrKCdNaW5lcicpICYmIChyZXNvdXJjZU5hbWUgPT0gJ3JvY2tzJyB8fCByZXNvdXJjZU5hbWUgPT0gJ29yZScpKSB0b3RhbCAqPSAxLjI1O1xyXG4gICAgaWYgKGhhc1BlcmsoJ0JvdGFuaXN0JykgJiYgKHJlc291cmNlTmFtZSA9PSAndmluZXMnIHx8IHJlc291cmNlTmFtZSA9PSAnaGVyYnMnIHx8IHJlc291cmNlTmFtZSA9PSAnd2hlYXQnKSkgdG90YWwgKj0gMS4yNTtcclxuXHJcbiAgICAvLyBBcHBseSBza2lsbHMgdG8gYWxsIGNsb25lc1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICBsZXQgc2tpbGxSYXRpbyA9IDEuMDY7XHJcbiAgICAgICAgICAgIHZhciBtdWx0ID0gMSArIChNYXRoLnBvdyhza2lsbFJhdGlvLCBza2lsbHNbc2tpbGxdLmxldmVsKSAtIDEpIC8gMTAwO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIk11bHRpcGx5aW5nIGdhaW4gYnkgXCIgKyBtdWx0KTtcclxuICAgICAgICAgICAgdG90YWwgKj0gbXVsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEFsbCBidWlsZGluZ3MgYWZ0ZXIgbGV2ZWxcclxuICAgIGZvciAobGV0IGJ1aWxkaW5nIGluIGJ1aWxkaW5ncykge1xyXG4gICAgICAgIGNvbnN0IGJvb3N0RGF0YSA9IGdldEJvb3N0KGJ1aWxkaW5nLCByZXNvdXJjZU5hbWUpO1xyXG4gICAgICAgIGlmIChib29zdERhdGEpIHtcclxuICAgICAgICAgICAgdmFyIGluY3JlYXNlID0gTWF0aC5wb3coYm9vc3REYXRhLCBidWlsZGluZ3NbYnVpbGRpbmddLmNvdW50KTtcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2VmZmVjdGl2ZUJ1aWxkaW5ncycpKSBpbmNyZWFzZSAqPSAxLjAxO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBpbmNyZWFzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocmVzb3VyY2VOYW1lID09PSAncG9uZGVyJykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiUE9OREVSSU5HIElOQzogXCIsdG90YWwpO1xyXG4gICAgICAgIGlmIChpc1BvbmRlcmVkKCdwb25kZXIxJykpIHRvdGFsICo9IDEuMDU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2Zhc3RlclJlc291cmNlR2FpbicpKSB0b3RhbCAqPSAxLjA1O1xyXG5cclxuICAgIC8vIENvbnZlcnQgZnJvbSBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xyXG4gICAgdG90YWwgKj0gZGVsdGFfdGltZSAvIDEwMDA7XHJcbiAgICAvLyByb3VuZCB0b3RhbCB0byBuZWFyZXN0IHRob3VzYW5kdGhcclxuICAgIHRvdGFsID0gcGFyc2VGbG9hdCh0b3RhbC50b0ZpeGVkKDMpKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwidGltZSBmb3IgcmVzb3VyY2VzXCIsIGRlbHRhX3RpbWUsIHJlc291cmNlTmFtZSwgdG90YWwpO1xyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjU2Vjb25kc1JlbWFpbmluZyhyZXNvdXJjZU5hbWUsIG5lZWRlZCkge1xyXG4gICAgaWYgKG5lZWRlZCA8PSByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgcmV0dXJuIDA7XHJcblxyXG4gICAgLy8gSG93IG11Y2ggcGVyIHNlY29uZFxyXG4gICAgY29uc3QgaW5jcmVhc2UgPSBjYWxjSW5jcmVhc2UocmVzb3VyY2VOYW1lLCAxMDAwKTtcclxuICAgIGlmIChpbmNyZWFzZSA9PSAwKSByZXR1cm4gLTE7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncGluZycpO1xyXG4gICAgLy8gRGlmZmVyZW5jZSBvdmVyIHRpbWVcclxuICAgIGNvbnN0IHRpbWVSZW1haW5pbmcgPSBNYXRoLmNlaWwobmVlZGVkIC0gcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpIC8gaW5jcmVhc2U7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbGMgbWlsbGknLCByZXNvdXJjZU5hbWUsIG5lZWRlZCwgdGltZVJlbWFpbmluZyk7XHJcbiAgICAvLyBpZiAodGltZVJlbWFpbmluZyA9PSBJbmZpbml0eSB8fCB0aW1lUmVtYWluaW5nID09IC1JbmZpbml0eSkgcmV0dXJuIC0xO1xyXG4gICAgcmV0dXJuIHRpbWVSZW1haW5pbmc7XHJcbn1cclxuXHJcbi8vIENyZWF0ZSBhbGwgb3VyIHJlc291cmNlIHRhZ3MgaW4gdGhlIHNpZGViYXJcclxuY29uc3QgcmVzb3VyY2VzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG5mdW5jdGlvbiBjcmVhdGVSZXNvdXJjZVRhZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSkge1xyXG4gICAgLy8gaWYgKCFyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VOYW1lKSkgdGhyb3cgXCJJbnZhbGlkIHJlc291cmNlOiBcIiArIHJlc291cmNlTmFtZTtcclxuICAgIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgcmVzb3VyY2UgdGFnIGZvciBcIiwgcmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgbGV0IGdyb3VwQ29udGFpbmVyO1xyXG4gICAgaWYgKGdyb3VwTmFtZSkge1xyXG4gICAgICAgIGdyb3VwQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgICAgIGlmICghZ3JvdXBDb250YWluZXIpIHtcclxuICAgICAgICAgICAgZ3JvdXBDb250YWluZXIgPSBjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyKGdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgIHJlc291cmNlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChncm91cENvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ3JvdXBDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2VzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXNwbGF5TmFtZSA9IGNhcGl0YWxpemVGaXJzdChyZXNvdXJjZU5hbWUpLnNwbGl0KCdfJykuam9pbignICcpO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5jbGFzc05hbWUgPSBgJHtyZXNvdXJjZU5hbWV9IHJlc291cmNlYDtcclxuICAgIHJlc291cmNlRWxlbWVudC5pZCA9IGByZXNvdXJjZS0ke3Jlc291cmNlTmFtZX1gO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlTmFtZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICByZXNvdXJjZU5hbWVTcGFuLmNsYXNzTmFtZSA9ICdyZXNvdXJjZU5hbWUnO1xyXG4gICAgcmVzb3VyY2VOYW1lU3Bhbi50ZXh0Q29udGVudCA9IGAke3Jlc291cmNlRGlzcGxheU5hbWV9OmA7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VWYWx1ZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICByZXNvdXJjZVZhbHVlU3Bhbi5jbGFzc05hbWUgPSAncmVzb3VyY2VWYWx1ZSc7XHJcbiAgICByZXNvdXJjZVZhbHVlU3Bhbi5pZCA9IGAke3Jlc291cmNlTmFtZX1WYWx1ZWA7XHJcbiAgICBsZXQgbWF4ID0gZ2V0TWF4KHJlc291cmNlTmFtZSkgPT09IEluZmluaXR5ID8gJ+KInicgOiBnZXRNYXgocmVzb3VyY2VOYW1lKS50b0ZpeGVkKDIpO1xyXG5cclxuICAgIHJlc291cmNlVmFsdWVTcGFuLnRleHRDb250ZW50ID0gYCR7Z2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKS50b0ZpeGVkKDIpfSAvICR7bWF4fWA7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VSYXRlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlUmF0ZVNwYW4uY2xhc3NOYW1lID0gJ3Jlc291cmNlUmF0ZSc7XHJcbiAgICByZXNvdXJjZVJhdGVTcGFuLmlubmVySFRNTCA9IGAoK1xyXG4gICAgICAgICAgICA8c3BhbiBpZD1cIiR7cmVzb3VyY2VOYW1lfUluY3JlYXNlUmF0ZVwiPjA8L3NwYW4+L3MpYDtcclxuXHJcbiAgICByZXNvdXJjZUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzb3VyY2VOYW1lU3Bhbik7XHJcbiAgICByZXNvdXJjZUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzb3VyY2VWYWx1ZVNwYW4pO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmFwcGVuZENoaWxkKHJlc291cmNlUmF0ZVNwYW4pO1xyXG5cclxuICAgIC8vIHJlc291cmNlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChyZXNvdXJjZUVsZW1lbnQpO1xyXG4gICAgZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQocmVzb3VyY2VFbGVtZW50KTtcclxuXHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBvcmRlcmluZ1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgb3JkZXIgb2YgYSByZXNvdXJjZVxyXG4gICAgZnVuY3Rpb24gY2hhbmdlUmVzb3VyY2VPcmRlcihyZXNvdXJjZUlkLCBuZXdPcmRlcikge1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVzb3VyY2VJZCk7XHJcbiAgICAgICAgaWYgKHJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlLnN0eWxlLm9yZGVyID0gbmV3T3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtY2xvbmVzXCIsIDEpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXN0aWNrc1wiLCAyKTsgLy8gTW92ZSBcIlN0aWNrc1wiIHRvIG9yZGVyIDJcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS12aW5lc1wiLCAzKTsgLy8gTW92ZSBcIlZpbmVzXCIgdG8gb3JkZXIgM1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXJvY2tzXCIsIDQpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWZpc2hcIiwgNSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZnJlc2h3YXRlclwiLCA2KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS13b29kXCIsIDcpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLW9yZVwiLCA4KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1zYW5kXCIsIDkpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWNsYXlcIiwgMTApO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXdoZWF0XCIsIDExKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1oaWRlc1wiLCAxMik7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZ2FtZVwiLCAxMyk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtaGVyYnNcIiwgMTQpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWJlcnJpZXNcIiwgMTUpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXBvbmRlclwiLCA1MCk7XHJcblxyXG5cclxufVxyXG5cclxuXHJcbi8vIERlZmluZSBncm91cHMgZm9yIHlvdXIgcmVzb3VyY2VzXHJcbmNvbnN0IHJlc291cmNlR3JvdXBzID0ge1xyXG4gICAgYmFzaWNzOiBbJ2Nsb25lcycsICdzdGlja3MnLCAnYmVycmllcycsICdmaXNoJywgJ2dhbWUnLCAnd2hlYXQnLCAnZnJlc2h3YXRlciddLFxyXG4gICAgbWF0ZXJpYWxzOiBbJ3dvb2QnLCAnb3JlJywgJ3NhbmQnLCAnY2xheScsICd2aW5lcycsICdyb2NrcycsICdoaWRlcycsICdoZXJicyddLFxyXG4gICAgdG9vbHM6IFsnc2hhcnByb2NrcycsICdyb3BlJywgJ2hhbmRsZScsICdmaXNoaW5ncm9kJywgJ3BpY2theGUnLCAnYXhlJywgJ3NwZWFyJywgJ3N0YWZmJ10sXHJcbiAgICBhZHZhbmNlZDogWydnbGFzcycsICdwYXBlcicsICdjcmF0ZXMnLCAnbWVkaWNpbmUnLCAnbGVhdGhlciddLFxyXG4gICAgbWV0YWw6IFsnZ29sZCcsICdpcm9uJywgJ3NpbHZlcicsICdzdGVlbCddLFxyXG4gICAgY29uc3RydWN0aW9uOiBbJ2JyaWNrcycsICdiZWFtcycsICduYWlscycsICdzbGFicycsICdjb25jcmV0ZSddXHJcbiAgICAvLyAuLi4gQWRkIG90aGVyIGdyb3VwcyBhcyBuZWNlc3NhcnlcclxufTtcclxuXHJcblxyXG5mdW5jdGlvbiB0b2dnbGVHcm91cFZpc2liaWxpdHkoZ3JvdXBOYW1lKSB7XHJcbiAgICBjb25zdCBncm91cCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBncm91cC0ke2dyb3VwTmFtZX1gKTtcclxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB0b2dnbGUtJHtncm91cE5hbWV9YCk7IC8vIEVuc3VyZSB5b3UgaGF2ZSB0aGlzIGJ1dHRvbiB3aXRoIHRoZSBpZCAndG9nZ2xlLWdyb3VwTmFtZSdcclxuXHJcbiAgICBBcnJheS5mcm9tKGdyb3VwLmNoaWxkcmVuKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdQJykgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZSBncm91cCBpcyBjdXJyZW50bHkgaGlkZGVuXHJcbiAgICBpZiAodG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnYXJyb3ctZG93bicpKSB7XHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Fycm93LWRvd24nKTtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYXJyb3ctcmlnaHQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Fycm93LXJpZ2h0Jyk7XHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Fycm93LWRvd24nKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGdyb3VwIGNvbnRhaW5lclxyXG5mdW5jdGlvbiBjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyKGdyb3VwTmFtZSkge1xyXG4gICAgY29uc3QgZ3JvdXBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGdyb3VwQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdyZXNvdXJjZUdyb3VwJztcclxuICAgIGdyb3VwQ29udGFpbmVyLmlkID0gYGdyb3VwLSR7Z3JvdXBOYW1lfWA7XHJcblxyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICB0b2dnbGVCdXR0b24udGV4dENvbnRlbnQgPSBncm91cE5hbWUudG9VcHBlckNhc2UoKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdG9nZ2xlR3JvdXBWaXNpYmlsaXR5KGdyb3VwTmFtZSk7XHJcbiAgICB0b2dnbGVCdXR0b24uY2xhc3NOYW1lID0gJ3RvZ2dsZS1idXR0b24gYXJyb3ctZG93bic7XHJcbiAgICB0b2dnbGVCdXR0b24uaWQgPSBgdG9nZ2xlLSR7Z3JvdXBOYW1lfWA7XHJcblxyXG4gICAgZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQodG9nZ2xlQnV0dG9uKTtcclxuICAgIHJldHVybiBncm91cENvbnRhaW5lcjtcclxufVxyXG5cclxuXHJcbi8vIEl0ZXJhdGVzIG92ZXIgZWFjaCBncm91cCBhbmQgcmVzb3VyY2UgdG8gY3JlYXRlIHRhZ3NcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJlc291cmNlVGFncygpIHtcclxuICAgIGZvciAobGV0IGdyb3VwTmFtZSBpbiByZXNvdXJjZUdyb3Vwcykge1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlcyA9IHJlc291cmNlR3JvdXBzW2dyb3VwTmFtZV07XHJcbiAgICAgICAgcmVzb3VyY2VzLmZvckVhY2gocmVzb3VyY2VOYW1lID0+IHtcclxuICAgICAgICAgICAgdHJ5IHsgY3JlYXRlUmVzb3VyY2VUYWcocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpOyB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmxvZyhlcnJvcik7IH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIG9uY2UgdG8gc2V0IHVwIHlvdXIgcmVzb3VyY2UgdGFnc1xyXG4vLyBpbml0aWFsaXplUmVzb3VyY2VUYWdzKCk7XHJcblxyXG5cclxuZnVuY3Rpb24gdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gcmVzb3VyY2VzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCMke21hdGVyaWFsfVZhbHVlYCk7XHJcbiAgICBjb25zdCBjcmFmdGVkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYnV0dG9uI2NyYWZ0JHtjYXBpdGFsaXplRmlyc3QobWF0ZXJpYWwpfWApO1xyXG4gICAgdHJ5IHsgaWYgKCFlbGVtZW50KSBjcmVhdGVSZXNvdXJjZVRhZyhtYXRlcmlhbCk7IH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcblxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKG1hdGVyaWFsLCBlbGVtZW50LCBjcmFmdGVkQnV0dG9uKTtcclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGV0IG1heCA9IGdldE1heChtYXRlcmlhbCkgPT09IEluZmluaXR5ID8gJ+KInicgOiBnZXRNYXgobWF0ZXJpYWwpLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHtnZXRNYXRlcmlhbChtYXRlcmlhbCkudG9GaXhlZCgyKX0gLyAke21heH1gO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVsZW1lbnQsIG1hdGVyaWFsLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICBjb25zdCBzaWRlYmFyVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpLnF1ZXJ5U2VsZWN0b3IoJyNyZXNvdXJjZS0nICsgbWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXS5pc0dldHRpbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGlmIChzaWRlYmFyVGV4dCkgc2lkZWJhclRleHQuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhzLCBtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgIC8vICAgICBpZiAocy52YWx1ZSA9PT0gbWF0ZXJpYWwgJiYgc2lkZWJhclRleHQpIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICBzaWRlYmFyVGV4dC5zdHlsZS5jb2xvciA9ICd0aGlzdGxlJztcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjcmFmdGVkQnV0dG9uKSB7XHJcbiAgICAgICAgY29uc3QgY291bnRTcGFuID0gY3JhZnRlZEJ1dHRvbi5xdWVyeVNlbGVjdG9yKGAjJHttYXRlcmlhbH1WYWx1ZWApO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjcmFmdGVkIGJ1dHRvbiB3YXMgZm91bmQnLCBjb3VudFNwYW4sIG1hdGVyaWFsLCBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwpKTtcclxuICAgICAgICBpZiAoY291bnRTcGFuKSBjb3VudFNwYW4udGV4dENvbnRlbnQgPSBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwpLnRvRml4ZWQoMCk7XHJcbiAgICAgICAgZWxzZSBjb25zb2xlLndhcm4oYFJlc291cmNlIGJ1dHRvbiBmb3VuZCBidXQgbm8gY291bnQgc3BhbiBmb3I6ICR7bWF0ZXJpYWx9YCk7XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0TWF4KG1hdGVyaWFsLCBudW0pIHtcclxuICAgIHJlc291cmNlc1ttYXRlcmlhbF0ubWF4ID0gbnVtO1xyXG4gICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgdXBkYXRlVG90YWwoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5jcmVhc2VNYXgobWF0ZXJpYWwsIG51bSkge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJpbmNyZWFzZSBtYXggXCIsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS5tYXggKz0gbnVtO1xyXG4gICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgdXBkYXRlVG90YWwoKTtcclxuXHJcbn1cclxuXHJcbi8vIEdlbmVyaWMgaW5jcmVhc2VcclxuZnVuY3Rpb24gaW5jcmVhc2VNYXRlcmlhbChtYXRlcmlhbCwgbnVtKSB7XHJcbiAgICAvLyBFbnN1cmUgd2UgYWN0dWFsbHkgbmVlZCB0byBkbyBhbnl0aGluZ1xyXG4gICAgaWYgKG51bSA9PSAwKSByZXR1cm47XHJcbiAgICBtYXRlcmlhbCA9IG1hdGVyaWFsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnaW5jcmVhc2UgbWF0ZXJpYWwnLCBtYXRlcmlhbCwgbnVtKTtcclxuICAgIC8vIGlmIChNYXRoLmFicyhudW0pID4gNSkgY29uc29sZS5sb2coJ2NoYW5naW5nJywgbWF0ZXJpYWwsICdieScsIG51bSk7XHJcblxyXG4gICAgLy8gVGhpcyBjaGVjayBlbnN1cmVzIHRoYXQgdGhlIG1hdGVyaWFsIGtleSBleGlzdHMgaW4gdGhlIHJlc291cmNlcyBtYXAuXHJcbiAgICBpZiAocmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkge1xyXG5cclxuICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwpIDwgZ2V0TWF4KG1hdGVyaWFsKSAmJiBudW0gPiAwKSB7IC8vIEFkZGluZyByZXNvdXJjZXNcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2Zhc3RlclJlc291cmNlR2FpbicpKSBudW0gKj0gMS4wNTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAgICAgICAgIHVwZGF0ZVNraWxscyhtYXRlcmlhbCwgbnVtKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG51bSA8IDApIHsgLy8gU3VidHJhY3RpbmcgcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgIH0gZWxzZSB7IC8vIEFscmVhZHkgYXQgbWF4XHJcbiAgICAgICAgICAgIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgPSBnZXRNYXgobWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICBpZiAoaXNQb25kZXJlZCgnYXV0b2NyYWZ0JykgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdXRvQ3JhZnRDaGVja2JveFwiKS5jaGVja2VkICYmIGF1dG9DcmFmdFRhYmxlW21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICAgICAgY3JhZnRBbGxSZXNvdXJjZXMoYXV0b0NyYWZ0VGFibGVbbWF0ZXJpYWxdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKTtcclxuICAgICAgICByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzKCk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShtYXRlcmlhbCkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY3JhZnRpbmcgYSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpO1xyXG4gICAgICAgIHVwZGF0ZVNraWxscyhtYXRlcmlhbCwgbnVtKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHRocm93IFwiVHJpZWQgdG8gaW5jcmVhc2UgSW52YWxpZCBtYXRlcmlhbDogXCIgKyBtYXRlcmlhbDtcclxuICAgICAgICBjcmVhdGVSZXNvdXJjZVRhZyhtYXRlcmlhbCk7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChtYXRlcmlhbCwgbnVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjcmFmdGVkIG1hdGVyaWFscyBoYXZlIG5vIG1heCwgYSBsYSBLaXR0ZW5zIEdhbWVcclxuXHJcblxyXG5cclxuICAgIHVwZGF0ZVNpZGViYXIoKTtcclxuXHJcblxyXG5cclxuICAgIC8vIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIG1hdGVyaWFsICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWU7XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzKCkge1xyXG4gICAgLy8gY29uc3QgcmVzb3VyY2VzID0gW1wiY2xvbmVzXCIsIFwic3RpY2tzXCIsIFwidmluZXNcIiwgXCJyb2Nrc1wiLCBcImZpc2hcIiwgXCJ3b29kXCIsIFwicG9uZGVyXCJdO1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbmNyZWFzZSBvZiBcIiArIHJlc291cmNlKTtcclxuICAgICAgICBjb25zdCByYXRlID0gY2FsY0luY3JlYXNlKHJlc291cmNlLCAxMDAwKTtcclxuICAgICAgICB2YXIgcmF0ZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtyZXNvdXJjZX1JbmNyZWFzZVJhdGVgKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHJhdGVFbGVtZW50KSByYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IHJhdGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBcclxuICogQHJldHVybnMgQnV0dG9uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY29uZmlnKSB7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBjb25maWcuY2xhc3MgKyAnIHRvb2x0aXAnO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnaWQnLCBjb25maWcuaWQpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgYnV0dG9uLnJlcXVpcmVtZW50ID0gY29uZmlnLnJlcXVpcmVtZW50O1xyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lID0gT2JqZWN0LmtleXMoY3JhZnRlZFJlc291cmNlcykuZmluZChrZXkgPT4gY3JhZnRlZFJlc291cmNlc1trZXldID09PSBjb25maWcpO1xyXG4gICAgY29uc3QgY2xlYW5Db3VudCA9IHBhcnNlRmxvYXQoY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZU5hbWVdLnZhbHVlKS50b0ZpeGVkKDApO1xyXG4gICAgYnV0dG9uLmlubmVySFRNTCA9IGAke2NvbmZpZy50ZXh0IHx8IGNhcGl0YWxpemVGaXJzdChyZXNvdXJjZU5hbWUpfTogPHNwYW4gaWQ9XCIke3Jlc291cmNlTmFtZSArIFwiVmFsdWVcIn1cIj4ke2NsZWFuQ291bnR9PC9zcGFuPmA7XHJcbiAgICAvLyBidXR0b24udG9vbHRpcERlc2MgPSBjb25maWcudG9vbHRpcERlc2M7IFxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgYnV0dG9uLnRhYiA9ICdleHBlcmltZW50JztcclxuXHJcbiAgICByZXR1cm4gYnV0dG9uO1xyXG59XHJcblxyXG5cclxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMnKTtcclxuZnVuY3Rpb24gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpIHtcclxuXHJcbiAgICAvLyBGb3IgZWFjaCByZXNvdXJjZSwgY3JlYXRlIGEgYnV0dG9uIHVzaW5nIHRoZSBjYXB0dXJlZCBjb3VudHNcclxuICAgIGZvciAobGV0IG5hbWUgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG5cclxuICAgICAgICAvLyBjb25maWcuY291bnQgPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihjcmFmdGVkUmVzb3VyY2VzW25hbWVdKTtcclxuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsIGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0udG9vbHRpcERlc2MgfHwgXCJcIik7XHJcbiAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBnZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uY29zdCkgfHwgXCJcIik7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgICAgIGJ1dHRvbnNbY3JhZnRlZFJlc291cmNlc1tuYW1lXS5pZF0gPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihuYW1lKSB7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uKGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0pO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnRvb2x0aXBEZXNjKTtcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmNvc3QpKTtcclxuXHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgIGJ1dHRvbnNbY3JhZnRlZFJlc291cmNlc1tuYW1lXS5pZF0gPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdG8gcmVwbGFjZSA8cD4gZWxlbWVudHMgd2l0aCB0aGUgYnV0dG9uc1xyXG4vLyBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b24oJ3N0aWNrcycpO1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVUb29sdGlwQ29zdChyZXF1aXJlbWVudHMpIHtcclxuICAgIGlmIChyZXF1aXJlbWVudHMgPT09IG51bGwpIHJldHVybiAnJztcclxuICAgIHZhciBzdHIgPSAnJztcclxuICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHJlcXVpcmVtZW50cykge1xyXG5cclxuICAgICAgICBjb25zdCBoYXNFbm91Z2ggPSBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA+PSByZXF1aXJlbWVudHNbbWF0ZXJpYWxdOy8qIFlvdXIgbG9naWMgdG8gY2hlY2sgaWYgdGhlcmUncyBlbm91Z2ggb2YgdGhlIG1hdGVyaWFsICovO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICBzdHIgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHtyZXF1aXJlbWVudHNbbWF0ZXJpYWxdfSAke21hdGVyaWFsfTwvc3Bhbj48YnI+YDtcclxuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IGVtb2ppRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbW9qaURpc3BsYXknKTtcclxuZnVuY3Rpb24gdXBkYXRlRW1vamlEaXNwbGF5KCkge1xyXG4gICAgbGV0IGVtb2ppU3RyID0gXCJcIjtcclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIGpvYkNvdW50cyBtYXAgdG8gZ2V0IGVhY2ggam9iIGFuZCBpdHMgY291bnRcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGxldCByZXNvdXJjZSA9IHJlc291cmNlc1tnZXRBZmZlY3RlZFJlc291cmNlcyhqb2IpWzBdXTtcclxuICAgICAgICBsZXQgY291bnQgPSBnZXRXb3JrZXJzKHJlc291cmNlKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZSwgY291bnQpO1xyXG4gICAgICAgIGlmIChjb3VudCA9PT0gdW5kZWZpbmVkIHx8IGNvdW50ID09IDApIGNvbnRpbnVlO1xyXG4gICAgICAgIGxldCBlbW9qaSA9IHJlc291cmNlc1tyZXNvdXJjZV0uZW1vamkgfHwgJ/CTgJ8nOyAgLy8gZ2V0IHRoZSBlbW9qaSBjb3JyZXNwb25kaW5nIHRvIHRoZSBqb2IgZnJvbSB0aGUgcmVzb3VyY2VzIG1hcFxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGpvYiwgZW1vamkpO1xyXG4gICAgICAgIGlmIChlbW9qaSkge1xyXG4gICAgICAgICAgICBlbW9qaVN0ciArPSBlbW9qaS5yZXBlYXQoY291bnQpOyAgLy8gcmVwZWF0IHRoZSBlbW9qaSBiYXNlZCBvbiB0aGUgY291bnRcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZW1vamlEaXNwbGF5LnRleHRDb250ZW50ID0gZW1vamlTdHI7ICAvLyB1cGRhdGUgdGhlIGVtb2ppRGlzcGxheSBkaXYgd2l0aCB0aGUgZ2VuZXJhdGVkIGVtb2ppIHN0cmluZ1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkanVzdEZvbnRTaXplKCkge1xyXG4gICAgICAgIGxldCBmb250U2l6ZSA9IDQ4OyAgLy8gU3RhcnRpbmcgZm9udCBzaXplXHJcblxyXG4gICAgICAgIGVtb2ppRGlzcGxheS5zdHlsZS5mb250U2l6ZSA9IGAke2ZvbnRTaXplfXB4YDtcclxuXHJcbiAgICAgICAgd2hpbGUgKChlbW9qaURpc3BsYXkub2Zmc2V0V2lkdGggPiA2MDApICYmIGZvbnRTaXplID4gMzApIHtcclxuICAgICAgICAgICAgLy8gMTAgaXMgYSBtaW5pbXVtIGZvbnQtc2l6ZSB0aHJlc2hvbGQgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVtb2ppRGlzcGxheS5vZmZzZXRXaWR0aCwgZW1vamlEaXNwbGF5Lm9mZnNldEhlaWdodCk7XHJcbiAgICAgICAgICAgIGZvbnRTaXplIC09IDE7IC8vIGRlY3JlYXNlIHRoZSBmb250IHNpemVcclxuICAgICAgICAgICAgZW1vamlEaXNwbGF5LnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udFNpemV9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gd2hlbmV2ZXIgdGhlIGNvbnRlbnQgb2YgI2Vtb2ppRGlzcGxheSBjaGFuZ2VzXHJcbiAgICBhZGp1c3RGb250U2l6ZSgpO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB1cGRhdGVFbW9qaURpc3BsYXkgZXZlcnkgdGltZSBqb2JDb3VudHMgaXMgdXBkYXRlZDpcclxuLy8gRm9yIGV4YW1wbGU6XHJcbi8vIGpvYkNvdW50cy5zZXQoJ2Zpc2hpbmcnLCA0KTtcclxudXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcblxyXG5cclxuY29uc3QgYXV0b0NyYWZ0VGFibGUgPSB7XHJcbiAgICAnc3RpY2tzJzogJ2hhbmRsZScsXHJcbiAgICAnd29vZCc6ICdwYXBlcicsXHJcbiAgICAncm9ja3MnOiAnc2hhcnByb2NrcycsXHJcbiAgICAndmluZXMnOiAncm9wZScsXHJcbiAgICAnc2FuZCc6ICdnbGFzcycsXHJcbiAgICAnb3JlJzogJ2dvbGQnLFxyXG4gICAgJ2NsYXknOiAnYnJpY2tzJ1xyXG59O1xyXG5cclxuZnVuY3Rpb24gY3JhZnRBbGxSZXNvdXJjZXMocmVzb3VyY2VLZXkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29zdCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcbiAgICAgICAgbGV0IHN1ZmZpY2llbnRSZXNvdXJjZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtYXQgaW4gY29zdCkge1xyXG4gICAgICAgICAgICAvLyBpZiAoZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIDwgY29zdFttYXRdKSB7XHJcbiAgICAgICAgICAgIHN1ZmZpY2llbnRSZXNvdXJjZXMucHVzaChnZXRNYXRlcmlhbChtYXQsIHJlc291cmNlcykgLyBjb3N0W21hdF0pO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtaW4gPSBNYXRoLmZsb29yKE1hdGgubWluKC4uLnN1ZmZpY2llbnRSZXNvdXJjZXMpKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXNvdXJjZUtleSwgbWluKTtcclxuICAgICAgICBjcmFmdFJlc291cmNlUXVhbnRpdHkocmVzb3VyY2VLZXksIG1pbik7XHJcblxyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBjcmFmdGFsbCBmb3I6ICcsIHJlc291cmNlS2V5LCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyYWZ0UmVzb3VyY2VRdWFudGl0eShyZXNvdXJjZUtleSwgcXVhbnRpdHkpIHtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZUtleSkpIHRocm93IFwiSW52YWxpZCBjcmFmdCBmb3IgbWlzc2luZyByZXNvdXJjZTogXCIgKyByZXNvdXJjZUtleTtcclxuXHJcbiAgICBpZiAoIWNhbkNyYWZ0KHJlc291cmNlS2V5KSkgcmV0dXJuOyAvLyBUYWtlcyBjYXJlIG9mIHF1YW50aXR5IDwgMVxyXG4gICAgbGV0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgLy8gbGV0IGNyYWZ0Qm9udXMgPSBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSk7XHJcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHF1YW50aXR5OyArK2kpIHtcclxuICAgIC8vICAgICBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cyk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZm9yIChsZXQgbWF0IGluIGNvc3QpIHtcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdCwgLWNvc3RbbWF0XSAqIHF1YW50aXR5KTtcclxuICAgIH1cclxuICAgIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2VLZXksIHF1YW50aXR5KTtcclxuXHJcblxyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSkgY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UgPSB0cnVlO1xyXG5cclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShyZXNvdXJjZUtleSk7XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY3JhZnRPbmUocmVzb3VyY2VLZXksIGNvc3QsIGNyYWZ0Qm9udXMpIHtcclxuICAgIGZvciAobGV0IG1hdCBpbiBjb3N0KSB7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChtYXQsIC1jb3N0W21hdF0pO1xyXG4gICAgfVxyXG4gICAgaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZUtleSwgMSB8fCBjcmFmdEJvbnVzKTtcclxuXHJcbn1cclxuLy8gQ3JhZnQgZnVuY3Rpb25cclxuZnVuY3Rpb24gY3JhZnRSZXNvdXJjZShyZXNvdXJjZUtleSkge1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlS2V5KSkgdGhyb3cgXCJJbnZhbGlkIGNyYWZ0IGZvciBtaXNzaW5nIHJlc291cmNlOiBcIiArIHJlc291cmNlS2V5O1xyXG5cclxuICAgIGlmICghY2FuQ3JhZnQocmVzb3VyY2VLZXkpKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgbGV0IGNyYWZ0Qm9udXMgPSBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSk7XHJcblxyXG5cclxuICAgIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjcmFmdEJvbnVzKTtcclxuXHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgcmVzb3VyY2VLZXkgKyBcIlZhbHVlXCIpLnRleHRDb250ZW50ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0udmFsdWUudG9GaXhlZCgyKTtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UpIGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlID0gdHJ1ZTtcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShyZXNvdXJjZUtleSk7XHJcbn1cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBnZXRNYXRlcmlhbCxcclxuICAgIGluY3JlYXNlTWF0ZXJpYWwsXHJcbiAgICBzZXRNYXgsXHJcbiAgICBpbmNyZWFzZU1heCxcclxuICAgIGNyYWZ0QWxsUmVzb3VyY2VzLFxyXG4gICAgY3JhZnRSZXNvdXJjZSxcclxuICAgIHVwZGF0ZUVtb2ppRGlzcGxheSxcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZSxcclxuICAgIGdlbmVyYXRlVG9vbHRpcENvc3QsXHJcbiAgICBjYWxjU2Vjb25kc1JlbWFpbmluZyxcclxuICAgIGNyZWF0ZVJlc291cmNlVGFnLFxyXG4gICAgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucyxcclxuICAgIGNhbGNJbmNyZWFzZSxcclxuICAgIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyxcclxuICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3NcclxuXHJcbn07IiwiLy8gREVQRU5EUyBPTjogcmVzb3VyY2VzLmpzXHJcbmNvbnN0IHsgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCwgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgfSA9IHJlcXVpcmUoJy4vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgdXBkYXRlRGlzcGxheVZhbHVlLCBjYWxjSW5jcmVhc2UsIHVwZGF0ZUVtb2ppRGlzcGxheSB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBhZGRUb29sLCBnZXRBbGxUb29scyB9ID0gcmVxdWlyZSgnLi90b29scycpO1xyXG5jb25zdCB7IGFsbFZpc2libGVCdXR0b25zLCB1cGRhdGVTaWRlYmFyLCBwb3B1bGF0ZVNraWxsc1RhYmxlLCBzZXRWaXNpYmxlQnV0dG9uIH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IG1ha2VWaXNpYmxlIH0gPSByZXF1aXJlKCcuL21ha2VWaXNpYmxlJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlIH0gPSByZXF1aXJlKCcuL2dldENyYWZ0ZWRSZXNvdXJjZScpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5jb25zdCB7IGdldEFsbFBlcmtzLCBhZGRQZXJrLCBoYXNQZXJrIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyBqb2JDb3VudHMsIHNldENvbm5lY3Rpb25zLCBnZXRDb25uZWN0aW9ucywgZGlzdHJpYnV0ZVdvcmtlcnMsIHVwZGF0ZURpc3BsYXkgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IHRvdGFsX3RpbWUgfSA9IHJlcXVpcmUoJy4vbWFpbicpO1xyXG5jb25zdCB7IHNldEF0ZUZpc2gsIGdldEF0ZUZpc2ggfSA9IHJlcXVpcmUoJy4vYXRlRmlzaCcpO1xyXG5cclxuXHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcG9uZGVyXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZShcIi4vanNvbi9za2lsbHNcIik7XHJcbmNvbnN0IHsgZ2V0QWxsU3RhZ2VzIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5cclxuLy8gaW1wb3J0IGpvYkNvdW50cztcclxuLyogU0FWSU5HICovXHJcbi8vIHZhciBzYXZlID0ge1xyXG4vLyAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXHJcbi8vICAgICBjcmFmdGVkUmVzb3VyY2VzOiBjcmFmdGVkUmVzb3VyY2VzLFxyXG4vLyAgICAgc2tpbGxzOiBza2lsbHMsXHJcbi8vICAgICBwbGF5ZXJUb29sczogcGxheWVyVG9vbHNcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gc2F2ZUdhbWUoKSB7XHJcbiAgICBsZXQgc2F2ZSA9IHtcclxuICAgICAgICBza2lsbHM6IHt9LCAvLyBUaGlzIHdpbGwgaG9sZCB0aGUgZXhwZXJpZW5jZSBhbmQgbGV2ZWwgZm9yIGVhY2ggc2tpbGxcclxuICAgICAgICBjcmFmdGVkUmVzb3VyY2VzOiB7fSwgLy8gVGhpcyB3aWxsIGhvbGQgdGhlIHZhbHVlIGZvciBlYWNoIGNyYWZ0ZWQgaXRlbVxyXG4gICAgICAgIHJlc291cmNlczoge30sXHJcbiAgICAgICAgdG9vbHM6IFtdLFxyXG4gICAgICAgIHN0YWdlczogW10sXHJcbiAgICAgICAgdW5sb2Nrczoge30sXHJcbiAgICAgICAgam9iczoge30sXHJcbiAgICAgICAgYnVpbGRpbmdzOiB7fSxcclxuICAgICAgICB0aW1lOiB7fSxcclxuICAgICAgICBhbGxWaXNpYmxlQnV0dG9uczogW10sXHJcbiAgICAgICAgbWVzc2FnZTogW10sXHJcbiAgICAgICAgY29ubmVjdGlvbnM6IG5ldyBNYXAoKSxcclxuICAgICAgICBwZXJrczogW11cclxuICAgIH07XHJcblxyXG4gICAgLy8gRXh0cmFjdCBleHAgYW5kIGxldmVsIGZyb20gc2tpbGxzIGFuZCBzYXZlIHRvIHNhdmUuc2tpbGxzXHJcbiAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICBzYXZlLnNraWxsc1tza2lsbF0gPSB7XHJcbiAgICAgICAgICAgIGV4cDogc2tpbGxzW3NraWxsXS5leHAsXHJcbiAgICAgICAgICAgIGxldmVsOiBza2lsbHNbc2tpbGxdLmxldmVsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHRyYWN0IHZhbHVlIGZyb20gY3JhZnRlZFJlc291cmNlcyBhbmQgc2F2ZSB0byBzYXZlLmNyYWZ0ZWRJdGVtc1xyXG4gICAgZm9yIChsZXQgaXRlbSBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKCFzYXZlLmNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICAgICAgc2F2ZS5jcmFmdGVkUmVzb3VyY2VzW2l0ZW1dID0geyB2YWx1ZTogMCwgY3JhZnRlZE9uY2U6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0udmFsdWUgPSBnZXRDcmFmdGVkUmVzb3VyY2UoaXRlbSk7XHJcbiAgICAgICAgc2F2ZS5jcmFmdGVkUmVzb3VyY2VzW2l0ZW1dLmNyYWZ0ZWRPbmNlID0gY3JhZnRlZFJlc291cmNlc1tpdGVtXS5jcmFmdGVkT25jZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaXRlbSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgaXRlbSBleGlzdHMgaW4gdGhlIHNhdmUucmVzb3VyY2VzIG9iamVjdC4gSWYgbm90LCBpbml0aWFsaXplIGl0LlxyXG4gICAgICAgIGlmICghc2F2ZS5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICAgICAgc2F2ZS5yZXNvdXJjZXNbaXRlbV0gPSB7IHZhbHVlOiAwLCBtYXg6IDAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNhdmUucmVzb3VyY2VzW2l0ZW1dLnZhbHVlID0gZ2V0TWF0ZXJpYWwoaXRlbSwgcmVzb3VyY2VzKTtcclxuICAgICAgICBzYXZlLnJlc291cmNlc1tpdGVtXS5tYXggPSByZXNvdXJjZXNbaXRlbV0ubWF4O1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmUudG9vbHMgPSBnZXRBbGxUb29scygpO1xyXG4gICAgc2F2ZS5zdGFnZXMgPSBnZXRBbGxTdGFnZXMoKTtcclxuICAgIHNhdmUuam9icyA9IGpvYkNvdW50cztcclxuICAgIHNhdmUucGVya3MgPSBnZXRBbGxQZXJrcygpO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHNhdmUuY29ubmVjdGlvbnMgPSBBcnJheS5mcm9tKGdldENvbm5lY3Rpb25zKCkuZW50cmllcygpKTtcclxuXHJcbiAgICBmb3IgKGxldCB1IGluIHBvbmRlcnMpIHtcclxuICAgICAgICBzYXZlLnVubG9ja3NbdV0gPSBpc1BvbmRlcmVkKHUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGIgaW4gYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgc2F2ZS5idWlsZGluZ3NbYl0gPSBidWlsZGluZ3NbYl0uY291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coYWxsVmlzaWJsZUJ1dHRvbnMudmFsdWVzKCkpO1xyXG4gICAgZm9yIChsZXQgYSBpbiBhbGxWaXNpYmxlQnV0dG9ucykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgICAgIHNhdmUuYWxsVmlzaWJsZUJ1dHRvbnMucHVzaChhKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzYXZlLmFsbFZpc2libGVCdXR0b25zKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHRyYWN0VGV4dEZyb21IVE1MKGh0bWxTdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbFN0cmluZztcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBkaXYudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgY29uc3Qgc3BhblRleHQgPSBkaXYucXVlcnlTZWxlY3Rvcignc3BhbicpLnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICByZXR1cm4gW3RleHRDb250ZW50LCBzcGFuVGV4dF07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaHRtbFN0cmluZyA9IHJlcXVpcmUoJy4vbWFpbicpLmdldE1lc3NhZ2UoKS5pbm5lckhUTUw7XHJcblxyXG4gICAgc2F2ZS5tZXNzYWdlID0gZXh0cmFjdFRleHRGcm9tSFRNTChodG1sU3RyaW5nKTsgLy8gW21lc3NhZ2UsIHNwYW5dXHJcblxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKGNvbWJpbmVkVGV4dCk7IC8vIFwiWW91IGZpbmQgeW91cnNlbGYgYWxvbmUgaW4gYSBmb3Jlc3RcIlxyXG4gICAgLy8gY29uc29sZS5sb2coc3BhblRleHQpOyAvLyBcImFsb25lXCJcclxuXHJcblxyXG4gICAgc2F2ZS50aW1lWyd0b3RhbF90aW1lJ10gPSB0b3RhbF90aW1lO1xyXG4gICAgc2F2ZS50aW1lWyd0aW1lX29mX3NhdmUnXSA9IERhdGUubm93KCk7XHJcbiAgICAvLyBZb3UgY2FuIG5vdyB1c2UgdGhlIHNhdmUgb2JqZWN0IHRvIHN0b3JlIHRoZSBkYXRhIHNvbWV3aGVyZSBvciBkaXNwbGF5IGl0IHRvIHRoZSB1c2VyXHJcblxyXG4gICAgY29uc29sZS5sb2coc2F2ZSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShzYXZlKSk7XHJcblxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzYXZlXCIsIEpTT04uc3RyaW5naWZ5KHNhdmUpKTtcclxuICAgIHJldHVybiBzYXZlO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGxvYWRHYW1lKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJMb2FkaW5nIEdhbWVcIik7XHJcbiAgICB2YXIgc2F2ZWdhbWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2F2ZVwiKSk7XHJcbiAgICBjb25zb2xlLmxvZyhzYXZlZ2FtZSk7XHJcbiAgICBpZiAoc2F2ZWdhbWUgPT09IG51bGwpIHtcclxuICAgICAgICAvLyBORVcgR0FNRVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUucmVzb3VyY2VzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBzYXZlZ2FtZS5yZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgaWYgKGkudmFsdWVPZigpID09PSBcInVuZGVmaW5lZFwiIHx8IGkgPT09IG51bGwpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbaV0udmFsdWUgPSBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0udmFsdWU7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1tpXS5tYXggPSBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0ubWF4O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVwZGF0aW5nIHJlc291cmNlcyBmb3IgXCIgKyBpICsgXCIgdG8gXCIgKyBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0udmFsdWUsIHNhdmVnYW1lLnJlc291cmNlc1tpXS5tYXgpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW2ldLnZhbHVlICE9IDApIHVwZGF0ZURpc3BsYXlWYWx1ZShpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5za2lsbHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBzYXZlZ2FtZS5za2lsbHMpIHtcclxuICAgICAgICAgICAgc2tpbGxzW2ldLmV4cCA9IHNhdmVnYW1lLnNraWxsc1tpXS5leHA7XHJcbiAgICAgICAgICAgIHNraWxsc1tpXS5sZXZlbCA9IHNhdmVnYW1lLnNraWxsc1tpXS5sZXZlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IG9mIE9iamVjdC5rZXlzKHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIGNyYWZ0ZWQnLCBrZXksIHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXNba2V5XSwgY3JhZnRlZFJlc291cmNlc1trZXldKTtcclxuICAgICAgICAgICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzW2tleV0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWUgPSBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlKSkgY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlID0gMDtcclxuICAgICAgICAgICAgY3JhZnRlZFJlc291cmNlc1trZXldLmNyYWZ0ZWRPbmNlID0gc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlc1trZXldLmNyYWZ0ZWRPbmNlO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS50b29scyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBwbGF5ZXJUb29scyA9IHNhdmVnYW1lLnRvb2xzO1xyXG4gICAgICAgIC8vIFVuaW9uIHRoZSB0b29sIGxpc3RzIHRvZ2V0aGVyXHJcbiAgICAgICAgbGV0IHVuaW9uID0gWy4uLm5ldyBTZXQoWy4uLmdldEFsbFRvb2xzKCksIC4uLnNhdmVnYW1lLnRvb2xzXSldO1xyXG4gICAgICAgIC8vIHBsYXllclRvb2xzID0gdW5pb247XHJcbiAgICAgICAgZm9yIChsZXQgdG9vbCBpbiB1bmlvbikge1xyXG4gICAgICAgICAgICBhZGRUb29sKHRvb2wpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZm9yIChsZXQgdCBpbiBwbGF5ZXJUb29scykge1xyXG4gICAgICAgIC8vICAgICB1cGRhdGVUb29sVUkocGxheWVyVG9vbHNbdF0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnN0YWdlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCBzIGluIHNhdmVnYW1lLnN0YWdlcykge1xyXG4gICAgICAgICAgICBtYWtlVmlzaWJsZShzYXZlZ2FtZS5zdGFnZXNbc10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuam9icyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBqb2JDb3VudHMgPSBzYXZlZ2FtZS5qb2JzO1xyXG4gICAgICAgIGZvciAobGV0IGogaW4gc2F2ZWdhbWUuam9icykge1xyXG4gICAgICAgICAgICBqb2JDb3VudHNbal0gPSBzYXZlZ2FtZS5qb2JzW2pdO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhqKTtcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheShqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnVubG9ja3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgdSBpbiBzYXZlZ2FtZS51bmxvY2tzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBwb25kZXJzW3VdLmlzUG9uZGVyZWQgPSBzYXZlZ2FtZS51bmxvY2tzW3VdO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignT2xkIHNhdmUgZGF0YSBpbmNsdWRlcyBvYnNvbGV0ZSBwb25kZXInLCB1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNQb25kZXJlZCgnc2tpbGxzVGFibGUnKSkge1xyXG4gICAgICAgIHBvcHVsYXRlU2tpbGxzVGFibGUoKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuYnVpbGRpbmdzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAobGV0IGIgaW4gc2F2ZWdhbWUuYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGIsIHNhdmVnYW1lLmJ1aWxkaW5nc1tiXSk7XHJcbiAgICAgICAgICAgIGJ1aWxkaW5nc1tiXS5jb3VudCA9IHNhdmVnYW1lLmJ1aWxkaW5nc1tiXTtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIGJ1dHRvbiB0ZXh0XHJcbiAgICAgICAgICAgIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYiwgYnVpbGRpbmdzW2JdLmNvdW50KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY29zdHMgb2YgYWxsIHRoZSBidWlsZGluZ3NcclxuICAgICAgICAgICAgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYiwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbWF4IGFzIGluZmx1ZW5jZWQgYnkgdGhpcyBidWlsZGluZ1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBEb24ndCBvdmVyd3JpdGUgZXhpc3RpbmcgYnVpbGRpbmcgYm9vc3RzXHJcbiAgICAgICAgICAgIC8vIGlmIChidWlsZGluZ3NbYl0uZWZmZWN0cykge1xyXG4gICAgICAgICAgICAvLyAgICAgZm9yIChsZXQgbWF0IGluIGJ1aWxkaW5nc1tiXS5lZmZlY3RzKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgc2V0TWF4KG1hdCwgYnVpbGRpbmdzW2JdLmNvdW50ICogYnVpbGRpbmdzW2JdLmVmZmVjdHNbbWF0XSk7XHJcbiAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHdlIGhhdmUgYSBjbG9uZSwgdGhlbiB3ZSBhdGUgZmlzaFxyXG4gICAgc2V0QXRlRmlzaChyZXNvdXJjZXMuY2xvbmVzLm1heCA+PSAxKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdhdGVmaXNoJywgYXRlRmlzaCk7XHJcbiAgICBpZiAoZ2V0QXRlRmlzaCgpKSB7XHJcbiAgICAgICAgY29uc3QgZmlzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWF0RmlzaFwiKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hhbmdlIHRoZSBtZXNzYWdlIHRvIHRoZSBsYXRlc3Qgb25lXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLm1lc3NhZ2UgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gW2Z1bGwgbWVzc2FnZSwgc3Bhbl1cclxuICAgICAgICByZXF1aXJlKCcuL21haW4nKS5jaGFuZ2VNZXNzYWdlKHNhdmVnYW1lLm1lc3NhZ2VbMF0sIHNhdmVnYW1lLm1lc3NhZ2VbMV0pO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHJlc291cmNlcyBlYXJuZWQgd2hpbGUgYXdheVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS50aW1lICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJlcXVpcmUoJy4vbWFpbicpLnNldFRvdGFsVGltZShzYXZlZ2FtZS50aW1lW3RvdGFsX3RpbWVdKTtcclxuICAgICAgICBjb25zdCB0aW1lX2RpZmZlcmVuY2UgPSBEYXRlLm5vdygpIC0gc2F2ZWdhbWUudGltZVsndGltZV9vZl9zYXZlJ107XHJcbiAgICAgICAgZm9yIChsZXQgciBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5jID0gY2FsY0luY3JlYXNlKHIsIHRpbWVfZGlmZmVyZW5jZSk7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1tyXS52YWx1ZSArPSBpbmM7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHIsIHRpbWVfZGlmZmVyZW5jZSwgaW5jKTtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1tyXS52YWx1ZSA+IHJlc291cmNlc1tyXS5tYXgpIHJlc291cmNlc1tyXS52YWx1ZSA9IHJlc291cmNlc1tyXS5tYXg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuYWxsVmlzaWJsZUJ1dHRvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coc2F2ZWdhbWUuYWxsVmlzaWJsZUJ1dHRvbnMpO1xyXG4gICAgICAgIGZvciAobGV0IGEgaW4gc2F2ZWdhbWUuYWxsVmlzaWJsZUJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgc2V0VmlzaWJsZUJ1dHRvbihhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuY29ubmVjdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvbnMobmV3IE1hcChzYXZlZ2FtZS5jb25uZWN0aW9ucykpO1xyXG5cclxuICAgICAgICBpZiAoZ2V0Q29ubmVjdGlvbnMoKS5zaXplID09PSAwKSBzZXRDb25uZWN0aW9ucyhuZXcgTWFwKCkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGdldENvbm5lY3Rpb25zKCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmb3IgKGxldCBqb2IgaW4gam9iQ291bnRzKSB7XHJcbiAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMoam9iLCBqb2JDb3VudHNbam9iXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5wZXJrcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBteVBlcmtzID0gc2F2ZWdhbWUucGVya3M7XHJcbiAgICAgICAgZm9yIChsZXQgcGVyayBpbiBzYXZlZ2FtZS5wZXJrcykge1xyXG4gICAgICAgICAgICBhZGRQZXJrKHBlcmspO1xyXG4gICAgICAgICAgICByZXF1aXJlKCcuL3NlbGVjdENvcnJlY3RQZXJrQnV0dG9uJykuc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24ocGVyayk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIHNhdmUgdGhlIHRpbWUgd2hlbiB0aGUgcGxheWVyIGV4aXRzIHRoZSBicm93c2VyIHRhYlxyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiBzYXZlR2FtZSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzYXZlR2FtZSxcclxuICAgIGxvYWRHYW1lXHJcbn07IiwiLyoqXHJcbiAqIFNlbGVjdCB0aGUgcGVyayBidXR0b24gdGhhdCB3ZSd2ZSBjaG9zZW4gYW5kIGRpc2FibGUgdGhlIG90aGVyc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gYWJpbGl0eU5hbWUgTmFtZSBvZiB0aGUgY2hvc2VuIHBlcmtcclxuICovXHJcbmZ1bmN0aW9uIHNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKGFiaWxpdHlOYW1lKSB7XHJcbiAgICAvLyBEaXNhYmxlIGFsbCBidXR0b25zXHJcbiAgICBsZXQgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50aWVyT25lQnV0dG9uJyk7XHJcbiAgICBsZXQgc2VsZWN0ZWRCdXR0b247XHJcbiAgICB0cnkgeyBzZWxlY3RlZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2FiaWxpdHlOYW1lfVBlcmtgKTsgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cclxuICAgIGlmIChzZWxlY3RlZEJ1dHRvbikge1xyXG4gICAgICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEVuYWJsZSBhbmQgaGlnaGxpZ2h0IHRoZSBzZWxlY3RlZCBidXR0b25cclxuICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZEJ1dHRvbiwgYWJpbGl0eU5hbWUpO1xyXG4gICAgICAgIHNlbGVjdGVkQnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICBzZWxlY3RlZEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ05vIGJ1dHRvbiBmb3VuZCB3aXRoIGFiaWxpdHkgbmFtZTogJyArIGFiaWxpdHlOYW1lKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uID0gc2VsZWN0Q29ycmVjdFBlcmtCdXR0b247IiwibGV0IHN0YWdlcyA9IFtdO1xyXG5mdW5jdGlvbiBzZXRTdGFnZShzdGFnZSkge1xyXG4gICAgc3RhZ2VzLnB1c2goc3RhZ2UpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2UgU3RhZ2UgdG8gY2hlY2tcclxuICogQHJldHVybnMgYm9vbGVhbiBpZiBzdGFnZSBpbiBzdGFnZXNcclxuICovXHJcbmZ1bmN0aW9uIHBhc3NlZFN0YWdlKHN0YWdlKSB7XHJcbiAgICByZXR1cm4gc3RhZ2VzLmluY2x1ZGVzKHN0YWdlKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBbGxTdGFnZXMoKSB7XHJcbiAgICByZXR1cm4gc3RhZ2VzO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHNldFN0YWdlLFxyXG4gICAgcGFzc2VkU3RhZ2UsXHJcbiAgICBnZXRBbGxTdGFnZXNcclxufTsiLCIvKiBUT09MUyAqL1xyXG5cclxuXHJcbi8vIExpc3QgdG8gaG9sZCB0aGUgdG9vbHNcclxubGV0IHBsYXllclRvb2xzID0gWydCYXJlIEhhbmRzJ107XHJcblxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdG9vbCBpcyBwcmVzZW50IGluIHRoZSBsaXN0IFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9vbCBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNUb29sKHRvb2wpIHtcclxuICAgIHJldHVybiBwbGF5ZXJUb29scy5pbmNsdWRlcyh0b29sKTtcclxufVxyXG5cclxuLy8gRnVuY3Rpb24gdG8gYWRkIGEgdG9vbCBpZiBpdCdzIG5vdCBhbHJlYWR5IHByZXNlbnRcclxuZnVuY3Rpb24gYWRkVG9vbCh0b29sKSB7XHJcbiAgICAvLyBJZ25vcmUgdG9vbHMgdGhhdCBhcmUganVzdCBudW1iZXJzXHJcbiAgICBpZiAoIWlzTmFOKHRvb2wpICYmIC8vIHVzZSB0eXBlIGNvZXJjaW9uIHRvIHBhcnNlIHRoZSBfZW50aXJldHlfIG9mIHRoZSBzdHJpbmcgKGBwYXJzZUZsb2F0YCBhbG9uZSBkb2VzIG5vdCBkbyB0aGlzKS4uLlxyXG4gICAgICAgICFpc05hTihwYXJzZUZsb2F0KHRvb2wpKSkgLy8gLi4uYW5kIGVuc3VyZSBzdHJpbmdzIG9mIHdoaXRlc3BhY2UgZmFpbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaGFzVG9vbCh0b29sKSkge1xyXG4gICAgICAgIHBsYXllclRvb2xzLnB1c2godG9vbCk7XHJcblxyXG4gICAgICAgIHVwZGF0ZVRvb2xVSSh0b29sKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsVG9vbHMoKSB7XHJcbiAgICByZXR1cm4gcGxheWVyVG9vbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvb2xVSSh0b29sKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIFVJXHJcbiAgICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvb2xzLWxpc3RcIik7XHJcbiAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b29sKSk7XHJcbiAgICBpZiAodWwpIHVsLmFwcGVuZENoaWxkKGxpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9vbFZhbHVlRm9yUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIGlmIChyZXNvdXJjZS50b29scykge1xyXG4gICAgICAgIC8vIFNvcnQgdGhlIHRvb2xzIGluIGRlc2NlbmRpbmcgb3JkZXIgYmFzZWQgb24gdGhlaXIgdmFsXHJcbiAgICAgICAgY29uc3Qgc29ydGVkVG9vbHMgPSByZXNvdXJjZS50b29scy5zb3J0KChhLCBiKSA9PiBiLnZhbCAtIGEudmFsKTtcclxuXHJcbiAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzb3J0ZWQgdG9vbHNcclxuICAgICAgICBmb3IgKGxldCB0b29sIG9mIHNvcnRlZFRvb2xzKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXNUb29sKHRvb2wudG9vbCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwbGF5ZXIgaGFzIHRoZSB0b29sLCByZXR1cm4gaXRzIGFzc29jaWF0ZWQgdmFsdWVcclxuICAgICAgICAgICAgICAgIHJldHVybiB0b29sLnZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBub25lIG9mIHRoZSB0b29scyBhcmUgZm91bmQsIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZVxyXG4gICAgcmV0dXJuIDE7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaGFzVG9vbCxcclxuICAgIGFkZFRvb2wsXHJcbiAgICBnZXRBbGxUb29scyxcclxuICAgIGdldFRvb2xWYWx1ZUZvclJlc291cmNlXHJcbn07IiwiY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuXHJcbmNvbnN0IHJlc291cmNlTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZUxpc3QnKTtcclxuY29uc3QgZ29sZEFtb3VudEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dvbGRBbW91bnQnKTtcclxuLy8gbGV0IGdvbGRBbW91bnQgPSAxMDAwOyAvLyBTYW1wbGUgc3RhcnRpbmcgYW1vdW50XHJcbi8vIGNvbnN0IHRyYWRlQm9udXMgPSAwLjk7IC8vIDEwJSBkaXNjb3VudFxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVUcmFkZVRhYmxlKHJlc291cmNlcykge1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgICAgICBjb25zdCBwcmljZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkgKyAxMDsgLy8gUmFuZG9tIHByaWNlIGJldHdlZW4gMTAgYW5kIDExMCBmb3IgdGhpcyBleGFtcGxlLlxyXG5cclxuICAgICAgICByb3cuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ0cmFkZXRkXCI+JHtyZXNvdXJjZX08L3RkPlxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ0cmFkZXRkXCI+JHtwcmljZX08L3RkPlxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ0cmFkZXRkXCIgc3R5bGU9XCJkaXNwbGF5OmZsZXg7IGZsZXgtZGlyZWN0aW9uOnJvdztcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidXlCdG5cIiBkYXRhLXJlc291cmNlPVwiJHtyZXNvdXJjZX1cIiBkYXRhLXByaWNlPVwiJHtwcmljZX1cIj5CdXk8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzZWxsQnRuXCIgZGF0YS1yZXNvdXJjZT1cIiR7cmVzb3VyY2V9XCIgZGF0YS1wcmljZT1cIiR7cHJpY2V9XCI+U2VsbDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgIGA7XHJcblxyXG4gICAgICAgIHJlc291cmNlTGlzdC5hcHBlbmRDaGlsZChyb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBidXkgYW5kIHNlbGwgYnV0dG9uc1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ1eUJ0bicpLmZvckVhY2goYnRuID0+IHtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJlc291cmNlJyk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wcmljZScpKTtcclxuICAgICAgICAgICAgYnV5UmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlbGxCdG4nKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1yZXNvdXJjZScpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcGFyc2VGbG9hdChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJpY2UnKSk7XHJcbiAgICAgICAgICAgIHNlbGxSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gU2ltaWxhcmx5LCB5b3UgY2FuIGFkZCBldmVudCBsaXN0ZW5lcnMgZm9yIHNlbGwgYnV0dG9ucyBoZXJlXHJcbn1cclxuXHJcbmV4cG9ydHMuZ2VuZXJhdGVUcmFkZVRhYmxlID0gZ2VuZXJhdGVUcmFkZVRhYmxlO1xyXG5cclxuZXhwb3J0cy5idXlSZXNvdXJjZSA9IGJ1eVJlc291cmNlO1xyXG5leHBvcnRzLnNlbGxSZXNvdXJjZSA9IHNlbGxSZXNvdXJjZTtcclxuXHJcbmZ1bmN0aW9uIGJ1eVJlc291cmNlKHJlc291cmNlLCBwcmljZSkge1xyXG5cclxuICAgIGlmIChnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpID49IHByaWNlKSB7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKCdnb2xkJywgLXByaWNlKTtcclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICBnb2xkQW1vdW50RWwudGV4dENvbnRlbnQgPSBnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpO1xyXG4gICAgICAgIC8vIGFsZXJ0KGBZb3UgYm91Z2h0ICR7cmVzb3VyY2V9IGZvciAke3ByaWNlLnRvRml4ZWQoMil9IGdvbGQhYCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGFsZXJ0KFwiWW91IGRvbid0IGhhdmUgZW5vdWdoIGdvbGQhXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZWxsUmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKSB7XHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwocmVzb3VyY2UsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpID49IDEpIHtcclxuXHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKCdnb2xkJywgcHJpY2UpO1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZSwgLTEpO1xyXG4gICAgICAgIGdvbGRBbW91bnRFbC50ZXh0Q29udGVudCA9IGdldE1hdGVyaWFsKCdnb2xkJywgcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcyk7XHJcbiAgICB9XHJcbiAgICAvLyBhbGVydChgWW91IHNvbGQgJHtyZXNvdXJjZX0gZm9yICR7cHJpY2UudG9GaXhlZCgyKX0gZ29sZCFgKTtcclxufSIsImNvbnN0IHsgYnV0dG9ucyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1dHRvbnMnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IGdldEJ1aWxkaW5nQ291bnQgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkLCBjYW5VbmxvY2sgfSA9IHJlcXVpcmUoJy4vcG9uZGVyJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWcgfSA9IHJlcXVpcmUoXCIuL2pzb24vY3JhZnRlZFJlc291cmNlc1wiKTtcclxuY29uc3QgeyBpc0J1dHRvbklkVmlzaWJsZSwgY2FuQnV5QnVpbGRpbmcsIHNldFZpc2libGVCdXR0b24gfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgY2FuQ3JhZnQgfSA9IHJlcXVpcmUoJy4vY2FuQ3JhZnQnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG4vKipcclxuICogQ2hhbmdlcyB0aGUgc3RhdGVzIG9mIGJ1dHRvbnMgYmV0d2VlbiAnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgYW5kICdidXR0b24tZGlzYWJsZWQnXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCkge1xyXG4gICAgY29uc3Qgc2VsZWN0QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFjY29yZGluZ2x5XHJcblxyXG4gICAgc2VsZWN0QnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29uZmlnID0gYnV0dG9uc1tidXR0b24uaWRdOyAvKiBnZXQgdGhlIGJ1dHRvbidzIGNvbmZpZ3VyYXRpb24gdXNpbmcgaXRzIGRhdGEgYXR0cmlidXRlIG9yIElELCBldGMuICovIC8qIGdldCB0aGUgYnV0dG9uJ3MgY29uZmlndXJhdGlvbiB1c2luZyBpdHMgZGF0YSBhdHRyaWJ1dGUgb3IgSUQsIGV0Yy4gKi8vKiBnZXQgdGhlIGJ1dHRvbidzIGNvbmZpZ3VyYXRpb24gdXNpbmcgaXRzIGRhdGEgYXR0cmlidXRlIG9yIElELCBldGMuICovIC8qIGdldCB0aGUgYnV0dG9uJ3MgY29uZmlndXJhdGlvbiB1c2luZyBpdHMgZGF0YSBhdHRyaWJ1dGUgb3IgSUQsIGV0Yy4gKi87XHJcbiAgICAgICAgaWYgKCFidXR0b25Db25maWcpIHJldHVybjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcuZGF0YV9idWlsZGluZywgYnV0dG9uQ29uZmlnLnJlcXVpcmVtZW50KTtcclxuICAgICAgICAvLyBSZXNldCBhbGwgc3RhdGVzIGZpcnN0XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgIGlmIChidXR0b24uaWQgJiYgaXNCdXR0b25JZFZpc2libGUoYnV0dG9uLmlkKSkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcbiAgICAgICAgLy8gSWYgcmVxdWlyZW1lbnQgaXMgbWV0LCBpdCBzaG91bGQgYmUgdmlzaWJsZVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIGxldCBnZXRNYXRlcmlhbCA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKS5nZXRNYXRlcmlhbDtcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5yZXF1aXJlbWVudCgpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICdidXR0b24tZGlzYWJsZWQnO1xyXG4gICAgICAgICAgICAgICAgLy8gYWx3YXlzIHB1cmNoYXNhYmxlIGdhdGhlciBidXR0b25zXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiAhYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiID09PSAncHJvZHVjdGlvbicpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwb25kZXIgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmlkICYmIGJ1dHRvbi5pZCA9PT0gJ2dhdGhlclBvbmRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcG9uZGVyIHVubG9ja3NcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiICYmIGJ1dHRvbkNvbmZpZy50YWIgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uLmNsYXNzTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZCAmJiBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd1bmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuVW5sb2NrKGJ1dHRvbi5pZCkpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBwb25kZXIgYnV0dG9uIGlzIHVubG9ja2VkLCBoaWRlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3VubG9jaycpKSkgc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uLCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRhYiBidXR0b25zIGFsd2F5cyBlaXRoZXIgaGlkZGVuIG9yIGVuYWJsZWRcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiICYmIGJ1dHRvbkNvbmZpZy50YWIgPT09ICd0YWJzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gJ3Zpc2libGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignRXJyb3Igd2l0aCBjaGVja2luZyByZXF1aXJlbWVudCBvZiBidXR0b246ICcsIGJ1dHRvbkNvbmZpZywgZXJyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChidXR0b25Db25maWcuaWQgJiYgYnV0dG9uQ29uZmlnLmlkLnNsaWNlKDAsIDUpID09PSAnY3JhZnQnKSB7XHJcbiAgICAgICAgICAgIC8vIG5ldmVyIGhpZGUgdGhpcyBidXR0b24gb25jZSBpdHMgYmVlbiB1bmxvY2tlZFxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmNyYWZ0ZWRPbmNlKSBzdGF0ZSA9ICdidXR0b24tZGlzYWJsZWQnO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHdlIGNhbiBhZmZvcmQgdGhpcyBjcmFmdCwgaXQgc2hvdWxkIGJlIHB1cmNoYXNhYmxlXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICB2YXIgY3JhZnRlZCA9IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoYnV0dG9uQ29uZmlnLmlkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3JhZnRlZCk7XHJcbiAgICAgICAgICAgIGlmIChjcmFmdGVkLnZhbHVlID4gMCkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyhjcmFmdGVkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coa2V5KTtcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChjYW5DcmFmdChrZXkpKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB3ZSBjYW4gYWZmb3JkIHRoaXMgYnVpbGRpbmcsIGl0IHNob3VsZCBiZSBwdXJjaGFzYWJsZVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZyk7XHJcbiAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgcHVyY2hhc2VkIGEgYnVpbGRpbmcsIGl0IHNob3VsZCBiZSB2aXNpYmxlXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBzdGF0ZSA9IGdldEJ1aWxkaW5nQ291bnQoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpID8gJ2J1dHRvbi1kaXNhYmxlZCcgOiBzdGF0ZTtcclxuICAgICAgICAgICAgLy8gRmluZCB0aGUgYnVpbGRpbmcgY29zdFxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcpO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgc3RhdGUgPSBjYW5CdXlCdWlsZGluZyhidXR0b25Db25maWcuZGF0YV9idWlsZGluZykgPyAncHVyY2hhc2FibGUnIDogc3RhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBoaWRkZW4gaXMgbWV0LCBpdCBzaG91bGQgYmUgaGlkZGVuXHJcbiAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5oaWRlKSB7XHJcbiAgICAgICAgICAgIHN0YXRlID0gYnV0dG9uQ29uZmlnLmhpZGUoKSA/ICdoaWRkZW4nIDogc3RhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gQWRkIHRoZSBjdXJyZW50IHN0YXRlXHJcbiAgICAgICAgaWYgKHN0YXRlICE9PSAnJykgYnV0dG9uLmNsYXNzTGlzdC5hZGQoc3RhdGUpO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90LXB1cmNoYXNhYmxlLCBkaXNhYmxlIHRoZSBidXR0b25cclxuICAgICAgICAvLyBidXR0b24uZGlzYWJsZWQgPSBzdGF0ZSA9PT0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcbiAgICAgICAgLy8gVXBkYXRlIHRoZSB0b29sdGlwIGZvciB0aGlzIGJ1dHRvbiBpZiBpdHMgYWN0aXZlXHJcbiAgICAgICAgLy8gaWYgKGJ1dHRvbiA9PT0gY3VycmVudEhvdmVyQnV0dG9uKSB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgLy8gSWYgdGhlIHN0YXRlIGlzIGhpZGRlbiwgc2V0IHRoZSBidXR0b24ncyBkaXNwbGF5IHRvIG5vbmVcclxuICAgICAgICBpZiAoc3RhdGUgPT09ICdoaWRkZW4nKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoaWRpbmcnLGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGwgdmlzaWJsZSAnLCBidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7IC8vIFRoaXMgd2lsbCByZXZlcnQgaXQgYmFjayB0byBpdHMgb3JpZ2luYWwgZGlzcGxheSBzdGF0ZSBvciBkZWZhdWx0IChlLmcuLCAnYmxvY2snIG9yICdpbmxpbmUtYmxvY2snKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJykuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGpvYiA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICBjb25zdCByZXFQb25kZXIgPSAocmVxdWlyZSgnLi9qb2JSZXF1aXJlZFBvbmRlcnMnKS5qb2JSZXF1aXJlZFBvbmRlcnMpW2pvYl07XHJcbiAgICAgICAgaWYgKHJlcVBvbmRlciA9PT0gbnVsbCB8fCByZXFQb25kZXIgPT09IHVuZGVmaW5lZCkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKGlzUG9uZGVyZWQocmVxUG9uZGVyKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKHJlcVBvbmRlciA9PT0gJ25vdC11bmxvY2thYmxlJykgc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICBlbHNlIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhqb2IsIGJ1dHRvbiwgcmVxUG9uZGVyLCBzdGF0ZSk7XHJcbiAgICAgICAgLy8gYnV0dG9uLmNsYXNzTGlzdC5cclxuICAgICAgICBpZiAoc3RhdGUgPT09ICdoaWRkZW4nKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoaWRpbmcnLGJ1dHRvbik7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGwgdmlzaWJsZSAnLCBidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKHN0YXRlKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9ICcnOyAvLyBUaGlzIHdpbGwgcmV2ZXJ0IGl0IGJhY2sgdG8gaXRzIG9yaWdpbmFsIGRpc3BsYXkgc3RhdGUgb3IgZGVmYXVsdCAoZS5nLiwgJ2Jsb2NrJyBvciAnaW5saW5lLWJsb2NrJylcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnVwZGF0ZUJ1dHRvblZpc2liaWxpdHkgPSB1cGRhdGVCdXR0b25WaXNpYmlsaXR5OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODA4KTtcbiJdLCJuYW1lcyI6WyJhdGVGaXNoIiwibW9kdWxlIiwiZXhwb3J0cyIsInNldEF0ZUZpc2giLCJib29sIiwiZ2V0QXRlRmlzaCIsImJ1aWxkaW5ncyIsImJ1dHRvbnMiLCJyZXNvdXJjZXMiLCJpbmNyZWFzZU1hdGVyaWFsIiwiaW5jcmVhc2VNYXgiLCJjYW5CdXlCdWlsZGluZyIsInVwZGF0ZVNpZGViYXIiLCJ1cGRhdGVUb3RhbCIsImhhc1BlcmsiLCJjYXBpdGFsaXplRmlyc3QiLCJnZXRNYXRlcmlhbCIsInBhc3NlZFN0YWdlIiwicmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QiLCJidWlsZGluZ0tleSIsImJ1aWxkaW5nIiwiY29zdCIsInJhdGlvIiwibWF0ZXJpYWwiLCJNYXRoIiwicm91bmQiLCJiYXNlY29zdCIsInBvdyIsImNvdW50IiwibXlCdXR0b24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJuZXdUZXh0IiwiZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0Iiwic2V0QXR0cmlidXRlIiwiZWZmZWN0U3RyaW5nIiwiZWZmZWN0UGFydHMiLCJyZXNvdXJjZSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImVmZmVjdHMiLCJwdXNoIiwiYm9vc3QiLCJwZXJjZW50YWdlQm9vc3QiLCJqb2luIiwiZ2VuZXJhdGVFZmZlY3RTdHJpbmciLCJtYXAiLCJhbW91bnQiLCJ0b0ZpeGVkIiwiY3JlYXRlQnVpbGRpbmdCdXR0b24iLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJjb3N0cyIsInJlcXVpcmVtZW50RnVuY3Rpb24iLCJjb3N0Q29uZGl0aW9uIiwiZXZlcnkiLCJmbG9vciIsImNsb25lQ29uZGl0aW9uIiwiY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbiIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b29sdGlwRGVzYyIsImJ1dHRvbiIsImJ1eUJ1aWxkaW5nIiwiYnVpbGRpbmdOYW1lIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQiLCJidWlsZGluZ0NvdW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0ZXh0Q29udGVudCIsInNwbGl0IiwiYnV5TWF4QnVpbGRpbmdzIiwiY3JhZnRlZFJlc291cmNlcyIsImNhbkNyYWZ0IiwicmVzb3VyY2VLZXkiLCJyZXF1aXJlbWVudHMiLCJtYXQiLCJlcnIiLCJ3YXJuIiwic3RyIiwiY3JhZnRSZXNvdXJjZSIsIm1hbnVmYWN0dXJlZE1hcCIsImNsYXkiLCJoZXJicyIsImhpZGVzIiwiaXJvbiIsIm9yZSIsInNhbmQiLCJyb2NrcyIsInZpbmVzIiwid29vZCIsImFsbE1hdGVyaWFscyIsImNyZWF0ZUZhY3RvcnlEaXYiLCJmYWN0b3JpZXNDb250YWluZXIiLCJmYWN0b3J5RGl2IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImxlZnRUZXh0IiwicmlnaHRTZWxlY3QiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiciIsIm9wdGlvbiIsImFwcGVuZENoaWxkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0eWxlIiwiY29sb3IiLCJmb3VuZFJlc291cmNlIiwicHJvZHVjdHMiLCJpbmNsdWRlcyIsImFycm93IiwiaW5uZXJIVE1MIiwic2VsZWN0RWxlbWVudCIsInRleHQiLCJpbml0aWFsT3B0aW9uIiwiZGlzYWJsZWQiLCJzZWxlY3RlZCIsImFkZEluaXRpYWxPcHRpb24iLCJrZXlzIiwibWFudWZhY3R1cmVCdWxrIiwiYnVsa1VwZ3JhZGVDb3N0IiwibmV3RmFjdG9yeVNpbHZlckNvc3QiLCJhdHRlbXB0TWFudWZhY3R1cmUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmFjdG9yeSIsImxlZnRTZWxlY3QiLCJnb2FsUmVzb3VyY2UiLCJudW0iLCJtaW4iLCJpIiwibWFudWZhY3R1cmUiLCJidXlGYWN0b3J5IiwiYnV5RmFjdG9yeUJ1dHRvbiIsInVwZ3JhZGVCdWxrIiwiZ2V0Q3JhZnRlZFJlc291cmNlIiwidG9Mb3dlckNhc2UiLCJoYXNPd25Qcm9wZXJ0eSIsInNraWxscyIsImFsbFZpc2libGVCdXR0b25zIiwiU2V0IiwiZ2V0TWF4IiwibWF4IiwiSW5maW5pdHkiLCJhYmJyZXZpYXRlTnVtYmVyIiwiZm9ybWF0IiwidW5pdCIsInJvdW5kVG9EZWNpbWFscyIsIm51bWJlciIsImRlY2ltYWxzIiwiZmFjdG9yIiwidG9TdHJpbmciLCJsZXZlbFVwTWVzc2FnZSIsImhhc0dlbmVyYXRlZFNraWxsVGFibGUiLCJwb3B1bGF0ZVNraWxsc1RhYmxlIiwidGFibGUiLCJza2lsbCIsImV4cCIsImxldmVsIiwiZGlzcGxheSIsInByb2dyZXNzQmFyIiwid2lkdGgiLCJ0ciIsImlkIiwidGRQcm9ncmVzcyIsInBvc2l0aW9uIiwiaGVpZ2h0Iiwic2tpbGxUZXh0IiwibGVmdCIsInRvcCIsInRyYW5zZm9ybSIsIkFycmF5IiwiZnJvbSIsInJlc291cmNlTmFtZSIsInJlc291cmNlQ29uZmlnIiwicGFyZW50RWxlbWVudCIsInNob3VsZEhpZGUiLCJjIiwiY2xhc3NMaXN0IiwiaXNWaXNpYmxlIiwiZGlzcGxheUVsZW0iLCJ1cGRhdGVTa2lsbHMiLCJhYnMiLCJhZmZlY3RlZFJlc291cmNlcyIsInJlbW92ZSIsInNldFRpbWVvdXQiLCJhZGQiLCJjYWxjQ3JhZnRCb251cyIsImlzQnV0dG9uSWRWaXNpYmxlIiwiaGFzIiwic2V0VmlzaWJsZUJ1dHRvbiIsImNhbkJ1eSIsImNsZWFyU2lkZWJhciIsImlzUG9uZGVyZWQiLCJqb2JDb3VudHMiLCJqb2JzVGFiIiwiZ2V0VG90YWxKb2JzIiwidG90YWwiLCJqIiwiam9iRGl2IiwiZGVjcmVtZW50RGl2Iiwiam9iTmFtZVNwYW4iLCJpbmNyZW1lbnREaXYiLCJidG4iLCJqb2JUeXBlIiwidGhpcyIsImNsb3Nlc3QiLCJnZXRBdHRyaWJ1dGUiLCJkaXN0cmlidXRlV29ya2VycyIsInVwZGF0ZURpc3BsYXkiLCJ3b3JrZXJzRGlzdHJpYnV0aW9uIiwiTWFwIiwidG90YWxXb3JrZXJzIiwiZmlsdGVyIiwibnVtYmVyT2ZSZXNvdXJjZXMiLCJsZW5ndGgiLCJwZXJSZXNvdXJjZSIsInNldCIsInJlbWFpbmluZ1dvcmtlcnMiLCJnZXQiLCJ0aGlzSm9iQnV0dG9uIiwiam9iRWxlbWVudCIsImNvbm5lY3Rpb25zIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImRyYXdMaW5lIiwic3RhcnRFbGVtZW50IiwiZW5kWCIsImVuZFkiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic3RhcnRYIiwic3RhcnRZIiwic2Nyb2xsWSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImNvbnRleHQiLCJmcm9tWCIsImZyb21ZIiwidG9YIiwidG9ZIiwicmFkaXVzIiwiYW5nbGUiLCJ4IiwieSIsInhfY2VudGVyIiwieV9jZW50ZXIiLCJhdGFuMiIsImNvcyIsInNpbiIsIlBJIiwiY2xvc2VQYXRoIiwiZmlsbCIsImRyYXdBcnJvd2hlYWQiLCJzd2l0Y2hKb2IiLCJvbGRKb2JJZCIsIm5ld0pvYklkIiwid29ya2VycyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNsZWFySm9iQXNzaWdubWVudHMiLCJjbGVhclJlY3QiLCJyZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzIiwidW5kZWZpbmVkIiwiZGF0YUpvYiIsIm9sZElkIiwicmVwbGFjZSIsIm5ld0lkIiwibWF4ZWRPdXQiLCJyZXNvdXJjZUFycmF5IiwiZXJyb3IiLCJkcmF3QWxsQ29ubmVjdGlvbnMiLCJvbGRCdXR0b24iLCJuZXdCdXR0b24iLCJuZXdYIiwibmV3WSIsImJvdHRvbSIsIm9mZnNldFRvcCIsIm9mZnNldEhlaWdodCIsImdldFdvcmtlcnMiLCJzZXRDb25uZWN0aW9ucyIsIm5ld0Nvbm5lY3Rpb25zIiwiZ2V0Q29ubmVjdGlvbnMiLCJzdGlja3MiLCJnYW1lIiwiZmlzaCIsImdsYXNzIiwicG9uZGVyIiwiZ2V0QnVpbGRpbmdDb3VudCIsImdldEJvb3N0IiwiaGFzVG9vbCIsImNsYXNzIiwidGFiIiwidG9vbHRpcENvc3QiLCJyZXF1aXJlbWVudCIsImhpZGUiLCJzaG93VGFiIiwiY3JhZnRlZE9uY2UiLCJnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkIiwiZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWciLCJjb25maWciLCJrIiwicGVya3MiLCJwb25kZXJzIiwiZW1vamkiLCJpc1Jlc291cmNlIiwiZ2V0UmVzb3VyY2VDb25maWdCeUlkIiwiZ2F0aGVyaW5nIiwibWFzb25yeSIsIm5lZWRUb29scyIsImNhcnBlbnRyeSIsInRoaW5raW5nIiwic21pdGhpbmciLCJmYXJtaW5nIiwiY29tYmF0IiwiZmlzaGluZyIsImh1bnRpbmciLCJzYXZlR2FtZSIsImxvYWRHYW1lIiwiZ2VuZXJhdGVUb29sdGlwQ29zdCIsImFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMiLCJjcmFmdEFsbFJlc291cmNlcyIsImNhbGNJbmNyZWFzZSIsInVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyIsImNhbGNTZWNvbmRzUmVtYWluaW5nIiwiaW5pdGlhbGl6ZVJlc291cmNlVGFncyIsInNlbGVjdEFiaWxpdHkiLCJtYWtlVmlzaWJsZSIsInVwZGF0ZUJ1dHRvblZpc2liaWxpdHkiLCJnZW5lcmF0ZVBvbmRlckJ1dHRvbnMiLCJhZGRUb29sIiwic2lkZWJhclBhcmVudCIsImVtb2ppR2F0aGVyRGl2IiwidG9vbHNUb1N0YWdlcyIsInZpc2liaWxpdHlSdWxlcyIsImNvbmRpdGlvbiIsImFjdGlvbiIsImxvY2F0aW9uIiwiaHJlZiIsInRhYkNvbnRhaW5lcnMiLCJ0YWJOYW1lIiwicHJldlRhYiIsImNvbnRlbnQiLCJjb250YWlucyIsInRhYnMiLCJ0YWJTdHJpbmciLCJhY3RpdmVUYWJCdXR0b24iLCJldmVudCIsImtleSIsImRhcmtNb2RlVG9nZ2xlIiwiYm9keSIsInRvZ2dsZSIsImlzRGFyayIsIm92ZXJsYXkiLCJtZXNzYWdlRWxlbWVudCIsImNoYW5nZU1lc3NhZ2UiLCJuZXdNZXNzYWdlIiwiY2xvbmVXb3JkcyIsIm1vZGlmaWVkTWVzc2FnZSIsIm1pbGxpc2Vjb25kc19wZXJfZnJhbWUiLCJsYXN0X3RpbWUiLCJ0b3RhbF90aW1lIiwiYWNjdW11bGF0ZWRfbGFnIiwibG9vcCIsImN1cnJlbnRfdGltZSIsImRlbHRhX3RpbWUiLCJub3JtYWxSYXRlIiwidXBkYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGltZV9zaW5jZV9sYXN0X3NhdmUiLCJ0aW1lX3NpbmNlX21hbnVmYXR1cmUiLCJydWxlIiwidG9vbCIsImN1cnJlbnRIb3ZlckJ1dHRvbiIsInVwZGF0ZVRvb2x0aXAiLCJyZW5kZXIiLCJ0b29sdGlwIiwiZGVzYyIsImVmZmVjdCIsInRhcmdldCIsImNvbG9yQ2xhc3MiLCJzZWNvbmRzUmVtYWluaW5nIiwicmlnaHQiLCJzaG93VG9vbHRpcCIsImdldENSS2V5RnJvbUlEIiwidHJhY2UiLCJjcmVhdGVDb2x1bW5zIiwicGFyZW50IiwiY29sMSIsImNvbDIiLCJjb2wzIiwicHJlcGVuZCIsInRhYnNDb250YWluZXIiLCJwcm9kdWN0aW9uQ29udGFpbmVyIiwiZXhwZXJpbWVudENvbnRhaW5lciIsInBvbmRlckNvbnRhaW5lciIsInByb2R1Y3Rpb25Db2x1bW5zIiwiZXhwZXJpbWVudENvbHVtbnMiLCJwb25kZXJDb2x1bW5zIiwicHJvZHVjdGlvbkNvbHVtbkluZGV4IiwiZXhwZXJpbWVudENvbHVtbkluZGV4IiwicG9uZGVyQ29sdW1uSW5kZXgiLCJidXR0b25FbGVtZW50IiwidG9vbHRpcEVmZmVjdCIsInVubG9jayIsImRhdGFfYnVpbGRpbmciLCJjcmFmdGVkUmVzb3VyY2UiLCJmaW5kIiwiZ2VuZXJhdGVCdXR0b25zIiwibWF0Y2hlcyIsInNoaWZ0S2V5IiwidW5sb2NrQXR0ciIsImNhblVubG9jayIsInNpZGViYXJUZXh0IiwicmVzb3VyY2VCdXR0b24iLCJpc0dldHRpbmciLCJkZWZhdWx0VGV4dCIsImZvbnRXZWlnaHQiLCJyQnV0dG9uIiwic3RvcEFsbEdhdGhlcmluZyIsImFjdGl2ZVRleHQiLCJ0b2dnbGVSZXNvdXJjZSIsImdldFJLZXlGcm9tSUQiLCJvdmVybGF5VGV4dCIsIm92ZXJsYXlCdXR0b24iLCJvcGFjaXR5IiwiZmFkZVRvQmxhY2siLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwicmVsb2FkIiwicGVyayIsImZhY3RvcnlCdXR0b25zIiwidXBncmFkZUJ1bGtCdXR0b24iLCJtYWtlRmFjdG9yeUJ1dHRvbnMiLCJlIiwidXBkYXRlVUkiLCJyZXNvdXJjZURpdiIsInNldFRvdGFsVGltZSIsInRpbWUiLCJnZXRNZXNzYWdlIiwic2V0U3RhZ2UiLCJzdGFnZSIsInN0YWdlRWxlbWVudHMiLCJlbGVtZW50IiwibXlQZXJrcyIsInBlcmtOYW1lIiwiYWRkUGVyayIsImIiLCJhYmlsaXR5TmFtZSIsImNvbmZpcm0iLCJnZXRQZXJrRnJvbVRpZXIiLCJ0aWVyTnVtIiwiZ2V0QWxsUGVya3MiLCJ1bmxvY2tJZCIsInVubG9ja0tleSIsInBvbmRlck9iamVjdHMiLCJwb25kZXJLZXkiLCJwb25kZXJPYmoiLCJidXR0b25LZXkiLCJnZXRUb29sVmFsdWVGb3JSZXNvdXJjZSIsImN1cnJUb29sIiwiY2xvbmVNdWx0Iiwic2tpbGxSYXRpbyIsImJvb3N0RGF0YSIsImluY3JlYXNlIiwicGFyc2VGbG9hdCIsInJlc291cmNlc0NvbnRhaW5lciIsImNyZWF0ZVJlc291cmNlVGFnIiwiZ3JvdXBOYW1lIiwiZ3JvdXBDb250YWluZXIiLCJ0b2dnbGVCdXR0b24iLCJvbmNsaWNrIiwiZ3JvdXAiLCJjaGlsZHJlbiIsInRhZ05hbWUiLCJ0b2dnbGVHcm91cFZpc2liaWxpdHkiLCJjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyIiwicmVzb3VyY2VEaXNwbGF5TmFtZSIsInJlc291cmNlRWxlbWVudCIsInJlc291cmNlTmFtZVNwYW4iLCJyZXNvdXJjZVZhbHVlU3BhbiIsInJlc291cmNlUmF0ZVNwYW4iLCJjaGFuZ2VSZXNvdXJjZU9yZGVyIiwicmVzb3VyY2VJZCIsIm5ld09yZGVyIiwib3JkZXIiLCJyZXNvdXJjZUdyb3VwcyIsImJhc2ljcyIsIm1hdGVyaWFscyIsInRvb2xzIiwiYWR2YW5jZWQiLCJtZXRhbCIsImNvbnN0cnVjdGlvbiIsInVwZGF0ZURpc3BsYXlWYWx1ZSIsImNyYWZ0ZWRCdXR0b24iLCJjb3VudFNwYW4iLCJjaGVja2VkIiwiYXV0b0NyYWZ0VGFibGUiLCJjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24iLCJjbGVhbkNvdW50IiwiY29udGFpbmVyIiwiZW1vamlEaXNwbGF5IiwidXBkYXRlRW1vamlEaXNwbGF5IiwiZW1vamlTdHIiLCJyZXBlYXQiLCJmb250U2l6ZSIsIm9mZnNldFdpZHRoIiwiYWRqdXN0Rm9udFNpemUiLCJzdWZmaWNpZW50UmVzb3VyY2VzIiwicXVhbnRpdHkiLCJjcmFmdFJlc291cmNlUXVhbnRpdHkiLCJzZXRNYXgiLCJjcmFmdEJvbnVzIiwiY3JhZnRPbmUiLCJuZWVkZWQiLCJjZWlsIiwibmFtZSIsInJhdGUiLCJyYXRlRWxlbWVudCIsImdldEFsbFRvb2xzIiwiZ2V0QWxsU3RhZ2VzIiwic2F2ZSIsInN0YWdlcyIsInVubG9ja3MiLCJqb2JzIiwibWVzc2FnZSIsIml0ZW0iLCJ1IiwiYSIsImh0bWxTdHJpbmciLCJkaXYiLCJleHRyYWN0VGV4dEZyb21IVE1MIiwiRGF0ZSIsIm5vdyIsInNldEl0ZW0iLCJzYXZlZ2FtZSIsImdldEl0ZW0iLCJ2YWx1ZU9mIiwiTnVtYmVyIiwiaXNOYU4iLCJ1bmlvbiIsInMiLCJjbG9uZXMiLCJ0aW1lX2RpZmZlcmVuY2UiLCJpbmMiLCJzaXplIiwiam9iIiwic2VsZWN0Q29ycmVjdFBlcmtCdXR0b24iLCJzZWxlY3RlZEJ1dHRvbiIsInJlbW92ZUF0dHJpYnV0ZSIsInBsYXllclRvb2xzIiwidWwiLCJsaSIsImNyZWF0ZVRleHROb2RlIiwidXBkYXRlVG9vbFVJIiwic29ydGVkVG9vbHMiLCJzb3J0IiwidmFsIiwicmVzb3VyY2VMaXN0IiwiZ29sZEFtb3VudEVsIiwiYnV5UmVzb3VyY2UiLCJwcmljZSIsInNlbGxSZXNvdXJjZSIsImdlbmVyYXRlVHJhZGVUYWJsZSIsInJvdyIsInJhbmRvbSIsImJ1dHRvbkNvbmZpZyIsInN0YXRlIiwiY3JhZnRlZCIsInJlcVBvbmRlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iXSwic291cmNlUm9vdCI6IiJ9