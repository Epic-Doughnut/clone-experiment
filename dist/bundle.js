(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},151:(e,t,o)=>{const{buildings:s}=o(882),{buttons:n}=o(54),{resources:r}=o(587),{increaseMaterial:i,increaseMax:a,generateTooltipCost:c}=o(594),{canBuyBuilding:l}=o(78),{updateTotal:d}=o(150),{hasPerk:u}=o(134),{capitalizeFirst:f}=o(681),{getMaterial:p}=o(924),{passedStage:g}=o(751),{recalcMaxClones:b}=o(995),{updateSidebar:h}=o(453);function m(e,t,o){let s=t[e];if(s&&s.cost&&s.ratio)for(let e in s.cost)s.cost[e]=Math.round(s.basecost[e]*Math.pow(s.ratio,s.count)),o("Architect")&&(s.cost[e]*=.75);const n=document.querySelector("#"+e);var r=c(s.cost);if(!n)throw"Button not found for "+e;{n.setAttribute("data-tooltip-cost",r);const e=function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));t.push(`+${e}% ${o} production`)}return t.join(", ")}(s);n.setAttribute("data-tooltip-effect",e)}}function y(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e,t){return function(o){const s=Object.entries(e).every((([e,t])=>p(e,o)>=Math.floor(t/2))),n=!t.effects||!t.effects.clones||g("clones");return s&&n}}(o.cost,o);return{class:"tooltip "+e,tab:"production",text:`${e.charAt(0).toUpperCase()+e.slice(1)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}}for(let e in s){const t=y(e,s);n[e]=t}function v(e){console.log("Buying building "+e);const t=s[e];if(l(e)){for(const e in t.cost)i(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))console.log("bought building effects",e,o),a(e,o);t.count++,h(),d(),k(e,t.count),m(e,s,u),b()}}function k(e,t){document.getElementById(`${e}`).textContent=`${f(e).split("_").join(" ")} (${t})`}e.exports={recalculateBuildingCost:m,generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:y,updateBuildingButtonCount:k,buyMaxBuildings:function(e){for(;l(e);)v(e)},buyBuilding:v}},121:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{buildings:r,getBoost:i}=o(882),{skills:a}=o(324),{getWorkers:c}=o(150),{getToolValueForResource:l}=o(609),{hasPerk:d}=o(134),{isPondered:u}=o(369),{getFactoryProduction:f}=o(51);t.calcIncrease=function(e,t){var o=0;if(!s.hasOwnProperty(e)){if(!n.hasOwnProperty(e))return o;if((o=f(e))>0)return o}"clones"===e&&u("autoClone")&&(o=1),s[e]&&s[e].isGetting&&(o+=1),o+=(d("Leader")?.375:.25)*c(e)||0,!d("Lumberjack")||"wood"!=e&&"sticks"!=e||(o*=1.25),!d("Miner")||"rocks"!=e&&"ore"!=e||(o*=1.25),!d("Botanist")||"vines"!=e&&"herbs"!=e&&"wheat"!=e||(o*=1.25);for(let t in a)if(a[t].affectedResources.includes(e)){let e=1.06;o*=1+(Math.pow(e,a[t].level)-1)/100}for(let t in r){const s=i(t,e);if(s){var l=Math.pow(s,r[t].count);u("effectiveBuildings")&&(l*=1.01),o*=l}}return"ponder"===e&&(u("ponder1")&&(o*=1.05),u("ponder2")&&(o*=1.05),u("ponder3")&&(o*=1.05)),u("fasterResourceGain")&&(o*=1.05),o*=t/1e3,parseFloat(o.toFixed(3))}},64:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{getMaterial:r}=o(924);t.canCraft=function(e){let t=!0,o=n[e].cost;try{for(let e in o)if(r(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},51:(e,t,o)=>{const{getMaterial:s}=o(924),{craftedResources:n}=o(371),{resources:r}=o(587);var i={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},a=[];Object.keys(r).forEach((e=>a.push(e))),Object.keys(n).forEach((e=>a.push(e))),console.log("All materials: ",a);let c={},l={};function d(){Object.keys(n).forEach((e=>{c[e]=0,Array.from(n[e].cost).forEach((e=>{l[e.resource]||(l[e.resource]=0)}))}));const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const s=document.createElement("span");s.classList.add("factoryCost");const r=document.createElement("select");Object.keys(i).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,r.appendChild(t)})),r.setAttribute("data-produced","none"),r.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=r.value;(function(e,t,o){e&&"none"!==e&&(c[e]--,Array.from(n[e].cost).forEach((e=>{l[e.resource]-=e.amount}))),c[t]++,Array.from(n[t].cost).forEach((e=>{l[e.resource]+=e.amount}))})(e,t,this.dataset.factoryIndex),this.setAttribute("data-produced",t),document.querySelector(`#resource-${t}`).style.color="thistle",s.innerHTML="",s.innerHTML+=`${o(594).generateTooltipCost(n[r.value].cost)}`}));const a=document.createElement("span");return a.innerHTML="&#8594;",t.appendChild(s),t.appendChild(a),t.appendChild(r),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.disabled=!0,o.selected=!0,e.appendChild(o)}(r),e.appendChild(t),t}let u=2,f=30;var p=50;e.exports={createFactoryDiv:d,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,n=i[t];console.log("checking factory",t),n&&t&&function(e,t){let n=[];e.forEach((e=>n.push(s(e))));let r=Math.min(u,...n);r*=1,o(594).craftResourceQuantity(t,r)}(n,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");s("silver")<p?console.log("Not enough silver!"):(o(594).increaseMaterial("silver",-p),d(),p*=1.2,e.setAttribute("tooltipCost",`${p.toFixed(2)} silver`))},upgradeBulk:function(){u+=2,f+=10,document.getElementById("upgradeBulkButton").setAttribute("tooltipCost",`${u} → ${u+2}: ${f.toFixed(0)} silver`)},allMaterials:a,getFactoryProduction:function(e){return c[e]*u},loadFactory:function(e){let t=d();t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(594).generateTooltipCost(n[e].cost)}`},activeFactoriesProducing:c}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},924:(e,t,o)=>{const{getCraftedResource:s}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},78:(e,t,o)=>{const{resources:s,isResource:n}=o(587),{skills:r}=o(324),{buildings:i}=o(882),{getMaterial:a}=o(924);let c=new Set(["gatherSticks"]);t.allVisibleButtons=c;const l=document.getElementById("levelUpMessage");let d=!1;function u(){const e=document.getElementById("skillsTable");if(d)for(let e in r){(r[e].exp>0||r[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=r[e].exp+"%",document.querySelector("#level-"+e).textContent="["+r[e].level+"]   "+e)}else{console.log("Generating table for the first time"),d=!0;for(let t in r){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let n=document.createElement("div");n.setAttribute("class","progressBar"),n.style.height="20px",n.setAttribute("data-skill",t);let i=document.createElement("span");i.textContent="["+r[t].level+"]   "+t,i.setAttribute("id","level-"+t),i.style.position="absolute",i.style.left="10px",i.style.top="50%",i.style.transform="translateY(-50%)",0==r[t].exp&&0==r[t].level&&(o.style.display="none"),s.appendChild(n),s.appendChild(i),o.appendChild(s),e.appendChild(o)}}}e.exports={getMax:function(e){return n(e)?s[e].max:1/0},updateSkills:function(e,t){t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05);for(let o in r)if(r[o].affectedResources.includes(e)){if(r[o].level>=100){r[o].level=100,r[o].exp=0;continue}r[o].exp+=t/Math.pow(1.4,r[o].level),r[o].exp>=100&&(r[o].level+=1,r[o].exp=0,l.textContent=`Level up! ${o} → ${r[o].level}`,l.classList.remove("hidden"),setTimeout((()=>{l.classList.add("hidden")}),3e3))}o(751).passedStage("skillsTable")&&u()},populateSkillsTable:u,calcCraftBonus:function(e){let t=1;for(let o in r)if(r[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,r[o].level)-1)/100}return t},isButtonIdVisible:function(e){return c.has(e)},setVisibleButton:function(e){c.add(e)},canBuyBuilding:function(e){let t=!0;const o=i[e];for(const e in o.cost)if(o.cost[e]>a(e,s)){t=!1;break}return t},hasGeneratedSkillTable:d,clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combat",hunting:"hunting"}},150:(e,t,o)=>{const{skills:s}=o(324),{resources:n}=o(587),{getMaterial:r}=o(924),{isPondered:i}=o(369),{getMax:a}=o(78),c={};for(let e in s)c[e]=0;const l=document.getElementById("jobsTab");function d(){var e=0;for(let t in c)e+=c[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),l.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");r("clones",n)>d()&&c[e]++,f(e,c[e]),p(e),g(),console.log(u)}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(){const e=this.closest(".job-button").getAttribute("data-job");c[e]>0&&(c[e]--,f(e,c[e]),p(e),g())}))}));let u=new Map;function f(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let r=o.length,i=Math.floor(t/r);for(let e of o)u.set(e,i);let a=t-i*r;for(let e of o)a>0&&(u.set(e,u.get(e)+1),a--)}function p(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${c[e]}`),o(594).updateEmojiDisplay()}function g(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+d()+" / "+a("clones")}let b=new Map,h=document.getElementById("lineCanvas"),m=h.getContext("2d");function y(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,r=scrollY+s.top+s.height/2;m.beginPath(),m.moveTo(n,r),m.lineTo(t,o),m.stroke(),function(e,t,o,s,n,r){let i,a,c,l=s,d=n;e.beginPath(),i=Math.atan2(n-o,s-t),a=r*Math.cos(i)+l,c=r*Math.sin(i)+d,e.moveTo(a,c),i+=1/3*(2*Math.PI),a=r*Math.cos(i)+l,c=r*Math.sin(i)+d,e.lineTo(a,c),i+=1/3*(2*Math.PI),a=r*Math.cos(i)+l,c=r*Math.sin(i)+d,e.lineTo(a,c),e.closePath(),e.fill()}(m,n,r,t,o,10)}function v(e,t){let o=c[e];c[e]=0,c[t]+=o,p(e),p(t)}h.width=window.innerWidth,h.height=window.innerHeight,e.exports={clearJobAssignments:function(){m.clearRect(0,0,h.width,h.height),b=new Map},reassignJobsBasedOnResources:function(){try{const e=b.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const i=t.replace("job-button-",""),a=o.replace("job-button-","");let l=!0,d=s[e].affectedResources;if(!d)return;for(const e of d)if(void 0!==n[e]&&r(e)<n[e].max){l=!1;break}l&&c[e]>0&&(v(i,a),f(i,c[i]),f(a,c[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:v,drawAllConnections:function(){m.clearRect(0,0,h.width,h.height);try{for(let[e,t]of b.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),r=n.left+n.width/2,i=0;i=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,y(o,r,i)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return u.get(e)},updateTotal:g,setConnections:function(e){b=e},getConnections:function(){return b},distributeWorkers:f,updateDisplay:p,jobCounts:c}},882:e=>{const t={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.3,tooltipDesc:"For when you need a home away from home."},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.2,tooltipDesc:"A cozy, idyllic chunk of wood."},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.4,tooltipDesc:"Every clone's dream. Minus the white picket fence."},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home."},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.1,tooltipDesc:"The ultimate storage solution for the pack rat in you."},stockpile:{basecost:{rocks:30},effects:{wood:100},ratio:1.1,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.1,tooltipDesc:"Air drying: Nature's way of preserving food."},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.2,tooltipDesc:"DIY's dream destination."},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing."},bakery:{basecost:{wood:80,wheat:100,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready."},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you."},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster."},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required."},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore."},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.05},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted."},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!"},fishery:{basecost:{wood:40,rope:15},effects:{},boost:{fish:1.1},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food."},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals."},water_well:{basecost:{rocks:30,rope:1,wood:10},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar."},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather."},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.2,herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter."},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power."},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly."},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!"}};e.exports={buildings:t,getBuildingCount:function(e){return t[e].count},getBoost:function(e,o){const s=t[e];if(s&&s.boost){if(s.boost[o])return s.boost[o];if(s.boost.all)return s.boost.all}return null}}},54:(e,t,o)=>{const{passedStage:s}=o(751),{getMaterial:n}=o(924),{hasTool:r}=o(609),{resources:i}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",i)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",i)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>r("Spear")||r("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>r("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>r("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:s}=o(924),{getCraftedResource:n}=o(590),{resources:r}=o(587),{passedStage:i}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocks",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRope",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandle",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaff",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrod",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"fishing"},spear:{id:"craftSpear",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxe",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxe",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlass",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaper",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requiredStage:"paper",class:"paper"},gold:{id:"craftGold",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIron",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilver",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricks",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:""},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}},wood:{value:0,cost:{sticks:8}},sticks:{value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id+"Button"===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id+"Button"===e.id)return t;return null}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{e.exports={ponders:{ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organizized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 1%",cost:{ponder:180}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combat:{id:"ponderCombat",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},ponder2:{id:"ponderPonder2",requirement:()=>!0,isPondered:!1,text:"Think even harder",tooltipDesc:"5% boost to pondering",cost:{ponder:300}},ponder3:{id:"ponderPonder3",requirement:()=>!0,isPondered:!1,text:"Think hardest",tooltipDesc:"5% boost to pondering",cost:{ponder:600}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double diameter Teepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}}}}},425:(e,t)=>{t.prestige={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},cheaperBuildings:{text:"Rickety",tooltipDesc:"Building Cost (-5%)",cost:2,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",max:1e3}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},smithing:{exp:0,level:0,affectedResources:["axe","pickaxe","spear","glass","iron","silver","gold"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:[]},fishing:{exp:0,level:0,affectedResources:["fish","freshwater"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,getCraftedResourceConfigById:n}=o(371),{buildings:r}=o(882),{ponders:i}=o(397),{buttons:a}=o(54),{resources:c,getResourceConfigById:l}=o(587),{saveGame:d,loadGame:u}=o(502),{generateTooltipCost:f,appendCraftedResourceButtons:p,increaseMaterial:g,craftAllResources:b,craftResource:h,calcIncrease:m,updateResourceIncreaseRates:y,calcSecondsRemaining:v,increaseMax:k,updateDisplayValue:x}=o(594),{recalculateBuildingCost:w,buyMaxBuildings:C,buyBuilding:T}=o(151),{hasPerk:B,selectAbility:S}=o(134),{getMax:E,clearSidebar:A}=o(78),{makeVisible:M}=o(123),{updateButtonVisibility:D}=o(667),{getCraftedResource:q}=o(590),{getMaterial:R}=o(924),{buyFactory:P,attemptManufacture:j,upgradeBulk:L}=o(51),{isPondered:$,generatePonderButtons:F}=o(369),{hasTool:O,addTool:I}=o(609),{getAteFish:G,setAteFish:V}=o(621),{drawAllConnections:H,updateTotal:W,clearJobAssignments:N}=o(150),{capitalizeFirst:_}=o(681),{passedStage:z}=o(751),{recalcMaxClones:J}=o(995),{initializeResourceTags:U,updateSidebar:Y}=o(453),{prestige:K}=o(425),Q=document.querySelector("#resources"),X=document.querySelector("#emojiGatherDisplay"),Z={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},ee=[{condition:()=>R("sticks",c)>=1,action:()=>M("stick")},{condition:()=>R("sticks",c)>=10,action:()=>M("vines")},{condition:()=>R("vines",c)>=10,action:()=>M("rocks")},{condition:()=>R("rocks",c)>=1,action:()=>{M("tab-button"),M("craftRocks")}},{condition:()=>q("spear",s)>0,action:()=>M("spear")},{condition:()=>R("fish",c)>=1,action:()=>M("fishing")},{condition:()=>O("Axe"),action:()=>M("wood")},{condition:()=>q("rope")>=1,action:()=>M("rope")},{condition:()=>R("fish",c)>=5&&!G(),action:()=>{M("eatFish")}},{condition:()=>G(),action:()=>{M("clone"),M("ponder-tab")}},{condition:()=>$("ponderFinish"),action:()=>(document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>$("biggerShelter")||$("biggerHut")||$("biggerHouse")||$("biggerTeepee")||$("evenBiggerShelter"),action:()=>J()},{condition:()=>R("clones")>=50,action:()=>M("prestige")},{condition:()=>R("clay")>0,action:()=>M("clay")},{condition:()=>document.getElementById("toggle-basics")&&$("organization"),action:()=>U(!0)}];let te=document.querySelectorAll(".tab-content > .content");function oe(e){console.log("show tab: "+e);let t="";for(let e of te)e.classList.contains("active")&&(t=e.id,e.style.opacity="0",setTimeout((()=>{e.classList.remove("active")}),100));let o=document.querySelectorAll(".tab-button");for(let e of o)e.classList.remove("active");let s=document.getElementById(e);setTimeout((()=>{s.classList.add("active")}),100),setTimeout((()=>{s.style.opacity="1"}),200);const n=`#${e}Button`;let r=document.querySelector(n);r&&r.classList.add("active"),"jobsTab"===e&&H(),console.log(t,">",e),Y()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":oe("productionTab");break;case"2":z("tab-button")&&oe("experimentTab");break;case"3":z("ponder-tab")&&oe("ponderTab");break;case"4":z("jobs-tab")&&oe("jobsTab");break;case"5":z("skillsTable")&&oe("skillsTab");break;case"6":z("perksTab")&&oe("perksTab");break;case"7":z("factoryTab")&&oe("factoryTab")}}));const se=document.getElementById("darkModeToggle"),ne=document.body;ne.classList.toggle("dark-mode"),se.classList.toggle("dark");let re=!0;function ie(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block"}),5e3)}const ae=document.getElementById("overlay"),ce=document.getElementById("message");function le(e,t){const o=e.replace(t,`<span id="alone" title="You feel peckish for some seafood">${t}</span>`);ce.innerHTML=o}let de=50,ue=null,fe=0,pe=0;function ge(e){null===ue&&(ue=e);const t=e-ue;fe+=t,pe+=t,ue=e;let o=de;for(pe>=10*de&&(de=pe/10);pe>=de;)pe-=de,me(de);de=o,requestAnimationFrame(ge)}let be=0,he=0;function me(e,t){for(const[t,o]of Object.entries(c))g(t,m(t,e));y(),function(){ee.forEach((e=>{e.condition()&&e.action()}));for(let e in Z)!O(e)&&q(e)>0&&(I(e),M(Z[e]));try{D(),null!==ke&&ve(ke)}catch(e){console.warn(e)}}(),be+=e,he+=e,be>=1e4&&(d(),be=0),z("factoryTab")&&he>=1e3&&(j(),he=0)}const ye=document.getElementById("dynamic-tooltip");function ve(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),s=l(e.id)||n(e.id)||r[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],a=s&&s.cost||e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost");!function(e,t,o,s){let n="";if(t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#00ABE7">${o}</span><hr>`),s)try{var r="";for(const[e,t]of Object.entries(s)){var i=R(e,c)>=t?"enough":"not-enough";E(e)<t&&(i="exceeds-max"),r+=`<span class="tooltip-${e} ${i}">${t.toFixed(0)} ${e}</span>`;let o=0;c[e]&&(o=v(e,t)),o>0&&"exceeds-max"!=i&&(r+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),r+="<br>"}n+=r}catch(e){n+=s}ye.innerHTML=n,ye.style.left=e.getBoundingClientRect().right+5+"px",ye.style.top=e.getBoundingClientRect().top-ye.offsetHeight/2+"px",ye.style.display="block"}(e,t,o,a)}document.addEventListener("DOMContentLoaded",(e=>{function t(e){for(const[t,o]of Object.entries(s))if(console.log(t,o,e),o.id+"Button"===e)return t;return"error "+e}F(i),function(){console.log("Generating buttons"),console.trace();const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),n=document.getElementById("experimentTab").querySelector(".button-columns"),i=document.getElementById("ponderTab"),c=e(o),l=e(n),d=e(i);let u=0,p=0,g=0;for(let e in a){const o=a[e],n=document.createElement("button");n.id=e,n.className=o.class,n.textContent=o.text,o.tooltipDesc&&n.setAttribute("data-tooltip-desc",o.tooltipDesc),o.tooltipEffect&&n.setAttribute("data-tooltip-effect",o.tooltipEffect),n.setAttribute("unlock",o.unlock),n.setAttribute("data_building",o.data_building);const i=Object.values(s).find((t=>t.id===e));i&&(o.tooltipCost=f(i.cost)),n.setAttribute("data-tooltip-cost",o.tooltipCost),o.showTab&&n.addEventListener("click",(()=>{oe(o.showTab),console.log("Switching to tab: "+o.showTab)})),"production"===o.tab?(c[u].appendChild(n),u=(u+1)%3):"experiment"===o.tab?(l[p].appendChild(n),p=(p+1)%3):"tabs"===o.tab?t.appendChild(n):"ponder"===o.tab?(d[g].appendChild(n),g=(g+1)%3):o.tab,Object.keys(r).find((t=>t===e))&&w(e,r,B);try{o.requirement()||(n.style.display="none")}catch(e){}}}(),u(),p(),U(),Y(),oe("productionTab"),o(864).generateTradeTable(c),document.addEventListener("click",(e=>{if(e.target.matches("button")){const n=e.target;if(n.getAttribute("data_building")&&"undefined"!==n.getAttribute("data_building")&&n.classList.contains("purchasable")){var o=n.getAttribute("data_building");e.shiftKey?C(o):T(o)}if(n.classList.contains("unlock")){const e=n.getAttribute("unlock");if(console.log(e),i[e]){var s=!0;for(let t in i[e].cost)if(R(t,c)<i[e].cost[t]){console.log("Cannot unlock "+e),s=!1;break}if(s){for(let t in i[e].cost)g(t,-i[e].cost[t]);i[e].isPondered=!0,M(e),n.display="none",console.log("Unlocking "+e)}}}if("undefined"!==n.id&&(console.log(n),"gather"===n.id.slice(0,6)?function(e){const t=c[e],o=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));X.textContent="𓀟",t.isGetting?(t.isGetting=!1,s.textContent=t.defaultText,o&&(o.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(c)){t.isGetting=!1;const o=document.querySelector("#gather"+_(e));o&&(o.textContent=t.defaultText);const s=Q.querySelector("#resource-"+e);s&&(s.style.fontWeight="normal")}}(),t.isGetting=!0,s.textContent=t.activeText,o&&(o.style.fontWeight="bold"),X.textContent=t.emoji,console.log(t.emoji))}(function(e){for(const[t,o]of Object.entries(c))if(o.id===e)return t;return"error "+e}(n.id)):"craft"===n.id.slice(0,5)?e.shiftKey?b(t(n.id)):h(t(n.id)):"saveButton"===n.id?d():"eatFish"===n.id?!G()&&R("fish",c)>=1&&(g("fish",-1),ie(),V(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{le("You are with yourself in a forest.","with yourself"),k("clones",1),g("clones",1)}),1e3)):"overlay-button"===n.id?ae.style.display="none":"deleteSaveButton"===n.id?(localStorage.removeItem("save"),location.reload()):"clearJobAssignments"===n.id?N():"darkModeToggle"===n.id?(ne.classList.toggle("dark-mode"),se.classList.toggle("dark"),re=!re,se.textContent=re?"Light Mode":"Dark Mode"):"2main"===n.id?oe("mainTab"):"2graphs"===n.id?oe("graphsTab"):"prestige"===n.id&&function(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=(document.getElementById("overlay-button"),document.createElement("p"));o.id="huskValue",g("husks",R("clones")),g("clones",-R("clones")),o.textContent="Husks: "+R("husks"),o.style.opacity="0",e.prepend(o),e.style.backgroundColor="MidnightBlue",t.textContent="You step through to another world.",ie(),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(K).forEach((o=>{const s=document.createElement("button");s.innerHTML=`<b>${K[o].text}</b><br>Level: ${K[o].level}<br>Cost: ${K[o].cost}`,s.setAttribute("tooltipCost",K[o].cost),s.setAttribute("tooltipDesc",K[o].tooltipDesc),s.classList.add("tooltip"),s.style.gridColumn=(t%4+1).toString(),s.style.gridRow=Math.floor(t/4+1).toString(),++t,s.addEventListener("click",(()=>{console.log(`Button ${o} was clicked`),R("husks")<K[o].cost||(K[o].level++,g("husks",-K[o].cost),K[o].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(K[o].cost),s.innerHTML=`<b>${K[o].text}</b><br>Level: ${K[o].level}<br>Cost: ${K[o].cost}`)})),s.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${o} was right clicked`),K[o].level<=0||(K[o].level--,K[o].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(K[o].cost),g("husks",K[o].cost),s.innerHTML=`<b>${K[o].text}</b><br>Level: ${K[o].level}<br>Cost: ${K[o].cost}`)})),e.appendChild(s)}))}),5e3),setTimeout((()=>{o.style.opacity="1"}),5e3)}()),n.classList.contains("tierOneButton")){let e=n.textContent;S(e)}}e.target.matches("#alone")&&(c.clones.value<c.clones.max&&(c.clones.value+=1),W())})),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),P()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("tooltipCost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),L()}))}(),requestAnimationFrame(ge),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){ve(e),ke=e})),e.addEventListener("onclick",(function(){ve(e)})),e.addEventListener("mouseleave",(function(){ye.style.display="none",ke=null}))})),W()}));var ke=null;e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${c[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){fe=e},changeMessage:le,getMessage:function(){return ce},total_time:fe,currentHoverButton:ke}},123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(751),{updateButtonVisibility:r}=o(667);t.makeVisible=function(e){n(e)||s(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),r()}},134:(e,t,o)=>{const{buildings:s}=o(882),{perks:n}=o(55);let r=[];function i(e){return r.includes(e)}function a(e){if(r.push(e),"Architect"===e)for(let e in s)o(151).recalculateBuildingCost(e,s,i)}e.exports={hasPerk:i,addPerk:a,selectAbility:function(e){i(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(i(t))return t;return""},getAllPerks:function(){return r}}},369:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{ponders:n}=o(397),{getMaterial:r}=o(924),{resources:i}=o(587),{buttons:a}=o(54);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(r(e,i)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,r]of Object.entries(e)){const e=`ponder${s(t)}`;let i=o(594).generateTooltipCost(r.cost);a[e]={class:"tooltip unlock",text:r.text||"Ponder a Mystery?",tooltipDesc:r.tooltipDesc||"Who knows what you'll discover",tooltipCost:i,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},995:(e,t,o)=>{const{buildings:s}=o(882),{isPondered:n}=o(369),{setMax:r}=o(594),{passedStage:i}=o(751);t.recalcMaxClones=function(){let e=0;i("clone")&&(e+=1);for(const[t,o]of Object.entries(s))console.log(t,o,o.effects),o.effects&&o.effects.clones&&(e+=o.effects.clones*o.count);n("biggerShelter")&&(e+=1*s.shelter.count),n("biggerHut")&&(e+=1*s.hut.count),n("biggerHouse")&&(e+=2*s.house.count),n("biggerTeepee")&&(e+=4*s.teepee.count),n("evenBiggerShelter")&&(e+=1*s.shelter.count),r("clones",e)}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{ponders:r}=o(397),{buttons:i}=o(54),{skills:a}=o(324),{getWorkers:c,updateTotal:l}=o(150),{hasTool:d}=o(609),{updateSkills:u,calcCraftBonus:f,getMax:p}=o(78),{canCraft:g}=o(64),{capitalizeFirst:b}=o(681),{getMaterial:h}=o(924),{isPondered:m}=o(369),{getCraftedResource:y}=o(590),{calcIncrease:v}=o(121),{updateSidebar:k}=o(453),{passedStage:x,getAllStages:w}=o(751),C=document.getElementById("resources");function T(e){const t=C.querySelector(`#${e}Value`),o=C.querySelector(`#${e}IncreaseRate`),n=document.querySelector(`button#craft${b(e)}`);if(t){try{let s=p(e)&&p(e)<1/0?p(e).toFixed(2):"∞";t.textContent=`${h(e).toFixed(2)} / ${s}`,o&&(o.textContent=v(e,1e3).toFixed(2))}catch(o){console.error(t,e,o)}if(s[e]&&s[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}if(n){const t=n.querySelector(`#${e}Value`);t?t.textContent=y(e).toFixed(0):console.warn(`Resource button found but no count span for: ${e}`)}}function B(e,t){0!=t&&((e=e.toLowerCase())in s?(h(e)<p(e)&&t>0?(m("fasterResourceGain")&&(t*=1.05),s[e].value+=t,u(e,t)):t<0?s[e].value+=t:(s[e].value=p(e),m("autocraft")&&document.querySelector("#autoCraftCheckbox").checked&&q[e]&&R(q[e])),T(e)):e in n?(n[e].value+=t,T(e),u(e,t)):(s[e]&&(s[e].value+=t),n[e]&&(n[e].value+=t),k()),k())}function S(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id+"Button"),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(n).find((t=>n[t]===e));return t.innerHTML=`${e.text||b(o)}`,t.tab="experiment",t}const E=document.querySelector("#craftedResourceButtons");function A(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${h(o,s)>=e[o]?"enough":"not-enough"}">${e[o]} ${o}</span><br>`;return t}const M=document.getElementById("emojiDisplay");function D(){let e="";for(let t in s){let o=c(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=n.repeat(o))}M.textContent=e,function(){let e=48;for(M.style.fontSize=`${e}px`;M.offsetWidth>600&&e>30;)e-=1,M.style.fontSize=`${e}px`}()}D();const q={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function R(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(h(e,s)/t[e]);let r=Math.floor(Math.min(...o));console.log(e,r),P(e,r)}catch(t){console.log("Failed to craftall for: ",e,t)}}function P(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!g(e))return;let o=n[e].cost;for(let s=0;s<t;++s)j(e,o,f(e));n[e].craftedOnce||(n[e].craftedOnce=!0),T(e)}function j(e,t,o){for(const[e,o]of Object.entries(t))B(e,-o);B(e,o)}e.exports={increaseMaterial:B,setMax:function(e,t){s[e].max=t,k(),l()},increaseMax:function(e,t){s[e].max+=t,k(),l()},craftAllResources:R,craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;g(e)&&(j(e,n[e].cost,f(e)),n[e].craftedOnce||(n[e].craftedOnce=!0),T(e))},updateEmojiDisplay:D,updateDisplayValue:T,generateTooltipCost:A,calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=v(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},appendCraftedResourceButtons:function(){for(let e in n){const t=S(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",A(n[e].cost)||""),E.appendChild(t),x(t.getAttribute("requirement"))?t.classList.remove("hidden"):t.classList.add("hidden"),i[n[e].id]=n[e]}},calcIncrease:v,updateResourceIncreaseRates:function(){for(let t in s){const o=v(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:P}},502:(e,t,o)=>{const{updateBuildingButtonCount:s,recalculateBuildingCost:n}=o(151),{updateDisplayValue:r,calcIncrease:i,updateEmojiDisplay:a}=o(594),{addTool:c,getAllTools:l}=o(609),{allVisibleButtons:d,populateSkillsTable:u,setVisibleButton:f}=o(78),{makeVisible:p}=o(123),{getCraftedResource:g}=o(590),{getMaterial:b}=o(924),{getAllPerks:h,addPerk:m,hasPerk:y}=o(134),{isPondered:v}=o(369),{jobCounts:k,setConnections:x,getConnections:w,distributeWorkers:C,updateDisplay:T}=o(150),{total_time:B}=o(808),{setAteFish:S,getAteFish:E}=o(621),{craftedResources:A}=o(371),{buildings:M}=o(882),{ponders:D}=o(397),{resources:q}=o(587),{skills:R}=o(324),{getAllStages:P}=o(751),{activeFactoriesProducing:j,loadFactory:L}=o(51),{recalcMaxClones:$}=o(995),{updateSidebar:F}=o(453);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{}};for(let t in R)e.skills[t]={exp:R[t].exp,level:R[t].level};for(let t in A)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=g(t),e.craftedResources[t].craftedOnce=A[t].craftedOnce;for(let t in q)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=b(t,q),e.resources[t].max=q[t].max;e.tools=l(),e.stages=P(),e.jobs=k,e.perks=h(),e.connections=Array.from(w().entries());for(let t in D)e.unlocks[t]=v(t);for(let t in M)e.buildings[t]=M[t].count;for(let t in d)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries(j))e.factories[t]=o;const t=o(808).getMessage().innerHTML;return e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t),e.time.total_time=B,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(q[t].value=e.resources[t].value,q[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=q[t].value&&r(t));if(void 0!==e.skills)for(let t in e.skills)R[t].exp=e.skills[t].exp,R[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))A[t]&&(A[t].value=e.craftedResources[t].value,Number.isNaN(A[t].value)&&(A[t].value=0),A[t].craftedOnce=e.craftedResources[t].craftedOnce,r(t));if(void 0!==e.tools){let t=[...new Set([...l(),...e.tools])];for(let e in t)c(e)}if(void 0!==e.stages)for(let t in e.stages)p(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)k[t]=e.jobs[t],T(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{D[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(v("skillsTable")&&u(),void 0!==e.buildings){for(let t in e.buildings)M[t].count=e.buildings[t],s(t,M[t].count),n(t,M,y);F()}if($(),S(q.clones.max>=1),E()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[B]);const t=Date.now()-e.time.time_of_save;for(let e in q){const o=i(e,t);q[e].value+=o,q[e].value>q[e].max&&(q[e].value=q[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)f(t)}void 0!==e.connections&&(x(new Map(e.connections)),0===w().size&&x(new Map),console.log(w()));for(let e in k)C(e,k[e]);if(a(),void 0!==e.perks)for(let t in e.perks)m(t),o(495).selectCorrectPerkButton(t);if(void 0!==e.factories)for(const[t,o]of Object.entries(e.factories))if(o>0)for(let e=0;e<o;++e)L(t)}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},453:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{getMaterial:n}=o(924),{getMax:r}=o(78),{resources:i}=o(587),{isPondered:a}=o(369);function c(e){var t=!0;return n(e)>0&&(t=!1,i[e]&&(i[e].isVisible=!0)),i[e]&&i[e].isVisible&&(t=!1),t}function l(e){function t(e,t){return e<10?o(e,3)+t:e<100?o(e,2)+t:e<1e3?o(e,1)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,2):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const d=document.getElementById("resources");function u(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),d.appendChild(o))):o=document.getElementById("resources");const i=s(e).split("_").join(" "),a=document.createElement("p");a.className="resource",a.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${i}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let u=r(e)&&r(e)<1/0?r(e).toFixed(2):"∞";l.textContent=`${n(e).toFixed(2)} / ${u}`;const f=document.createElement("span");function p(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}return f.className="resourceRate",f.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,a.appendChild(c),a.appendChild(l),a.appendChild(f),o.appendChild(a),p("resource-clones",1),p("resource-sticks",2),p("resource-vines",3),p("resource-rocks",4),p("resource-fish",5),p("resource-freshwater",6),p("resource-wood",7),p("resource-ore",8),p("resource-sand",9),p("resource-clay",10),p("resource-wheat",11),p("resource-hides",12),p("resource-game",13),p("resource-herbs",14),p("resource-berries",15),p("resource-ponder",50),a}e.exports={updateSidebar:function(){const e=o(51).allMaterials;Array.from(e).forEach((e=>{i[e]&&o(594).updateDisplayValue(e)}));for(const[o,s]of Object.entries(e)){const e=document.getElementById("resource-"+s);if(!e)return void console.warn("no parent element found for",s);c(s)?e.style.display="none":e.style.display="";const o=document.getElementById(s+"Value");if(o){var t="#fff";const e=n(s),i=r(s);e===i?t="#fcc":e/i>.6&&(t="#eeb"),o.innerHTML=`<span style="color:${t}">${l(e)} / ${l(i)} </span>`}}},initializeResourceTags:function(e){a("organization")&&(e=!0),console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder"],basics:["sticks","berries","fish","game","wheat","freshwater"],materials:["wood","sand","clay","vines","rocks","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,s]of Object.entries(t))s.forEach((t=>{console.log(t,o);let s=document.getElementById("resource-"+t);e||(o=null),s||(s=u(t,o)),console.log(s),c(t)&&(s.style.display="none"),console.log(c)}))}}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},864:(e,t,o)=>{const{getMaterial:s}=o(924),n=document.getElementById("resourceList"),r=document.getElementById("goldAmount");function i(e,t){s("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),r.textContent=s("gold",o(587).resources))}function a(e,t){s(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),r.textContent=s("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{i(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=i,t.sellResource=a},667:(e,t,o)=>{const{buttons:s}=o(54),{getCraftedResourceConfigById:n}=o(371),{getBuildingCount:r}=o(882),{isPondered:i,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,canBuyBuilding:d,setVisibleButton:u}=o(78),{canCraft:f}=o(64),{getMaterial:p}=o(924),{passedStage:g}=o(751);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),i(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var p=n(t.id);p.value>0&&(o="button-disabled");const e=c(p);f(e)&&(o="purchasable")}t.data_building&&(o=r(t.data_building)?"button-disabled":o,o=d(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(842).O[t];"hidden"==(s=null==n||i(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(s),e.style.display="")}))}}},t={};!function o(s){var n=t[s];if(void 0!==n)return n.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,o),r.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,