(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},151:(e,t,o)=>{const{buildings:s,isPopBuilding:n}=o(882),{increaseMaterial:i,increaseMax:r}=o(594),{updateTotal:a}=o(150),{hasPerk:c}=o(134),{getMaterial:l}=o(924),{passedStage:d}=o(751),{recalcMaxClones:u}=o(995),{updateBuildingButtonCount:f}=o(607),{recalculateBuildingCost:p}=o(22),{canBuyBuilding:g}=o(23),{isPondered:b}=o(369),{updateBuildingList:m}=o(831);function h(e){console.log("Buying building "+e);const t=s[e];if(g(e)){t.count++;for(const e in t.cost)i(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))console.log("bought building effects",e,o),r(e,o),"clones"===e&&(u(),a());f(e,t.count),p(e,s,c),m()}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){const o=t[e];o.cost=JSON.parse(JSON.stringify(o.basecost));const s=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),n=function(e,t){return function(){const t=Object.entries(e).every((([e,t])=>l(e)>=Math.floor(t/2)));return d("clones")&&t}}(o.cost);return{class:"tooltip "+e,tab:"production",text:`${e.charAt(0).toUpperCase()+e.slice(1)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:s,requirement:()=>n(),data_building:e}},buyMaxBuildings:function(e){let t=0;for(s[e];g(e);)h(e),++t;return t},buyBuilding:h,generateEffectString:function(e){let t=[];for(let[o,s]of Object.entries(e.effects))t.push(`+${s} max ${o}`);for(let[o,s]of Object.entries(e.boost)){let e=Math.round(100*(s-1));b("effectiveBuildings")&&(e*=1.01),t.push(`+${e}% ${o} production`)}return t.join(", ")},updateBuildingList:m}},121:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{skills:i}=o(324),{getWorkers:r}=o(150),{hasPerk:a}=o(134),{isPondered:c}=o(369),{getFactoryProduction:l}=o(51),{hasPrestige:d,getLevelOfPrestige:u}=o(425),{getMaterial:f}=o(924),{hasTool:p}=o(609),g={Lumberjack:["wood","sticks"],Miner:["rocks","ore"],Botanist:["vines","herbs","wheat"]},b={gathering:["gatheringBoost"],masonry:["masonryBoost"],carpentry:["carpentryBoost"],thinking:["thinkingBoost"],farming:["farmingBoost"],fishing:["fishingBoost"],hunting:["huntingBoost"]},m={wood:"axe",ore:"pickaxe",fish:"fishingrod",game:"spear",ponder:"paper",sticks:"staff"};t.calcIncrease=function(e,t){var p=0;const h=o(882).buildings;if(!s.hasOwnProperty(e)){if(!n.hasOwnProperty(e))return p;if((p=l(e))>0)return p}"clones"===e&&c("autoClone")&&(p=1),s[e]&&s[e].isGetting&&(p+=1),p=function(e,t){for(const[o,s]of Object.entries(g))s.includes(t)&&a(o)&&(e*=1.75);return e}(p+=(a("Leader")?.375:.25)*r(e)||0,e),p=function(e,t){for(const[o,s]of Object.entries(b))if(i[o].affectedResources.includes(t)){s.forEach((t=>{d(t)&&(e*=1.1*u(t))}));let t=1.06,n=1+(Math.pow(t,i[o].level)-1)/100;e*=n}return e}(p,e);for(const t of Object.keys(h)){const s=o(882).getBoost(t,e);if(s){var y=Math.pow(s,h[t].count);c("effectiveBuildings")&&(y*=1.03),p*=y}}return"ponder"===e&&(c("ponder1")&&(p*=1.05),c("ponder2")&&(p*=1.05),c("ponder3")&&(p*=1.05)),c("fasterResourceGain")&&(p*=1.05),d("cloneBoost")&&(p*=1.05*u("cloneBoost")),p=function(e,t){const o=m[t];return o&&f(o)>10&&(e*=1+Math.log10(f(o)/10)),e}(p,e),f("husks")>10&&(p*=1+Math.log(f("husks")/10)),parseFloat((p*t/1e3).toFixed(3))}},23:(e,t,o)=>{const{resources:s}=o(587),{getMaterial:n}=o(924),{passedStage:i}=o(751);t.canBuyBuilding=function(e){let t=!0;const r=o(882).buildings[e];for(const e in r.cost)if(r.cost[e]>n(e,s)){t=!1;break}return r.effects&&r.effects.clones&&!i("clone")&&(t=!1),t}},64:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=n[e].cost;try{for(let e in o)if(i(e,s)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},856:(e,t,o)=>{const{getMaterial:s}=o(924),{increaseMaterial:n}=o(594),i={husks:{probability:.05,quantity:1},nails:{probability:.1,quantity:50},slabs:{probability:.2,quantity:50},beams:{probability:.1,quantity:60},axe:{probability:.15,quantity:5},spear:{probability:1,quantity:5},gold:{probability:.1,quantity:10},iron:{probability:.15,quantity:50},silver:{probability:.05,quantity:20},steel:{probability:.1,quantity:30},bricks:{probability:.15,quantity:80}};let r={};function a(){return r}function c(){let e={};for(const t in i)if(Math.random()<i[t].probability){const o=Math.floor(i[t].quantity*(.4*Math.random()+.8));o>0&&(e[t]=o)}return r=e,console.log(r),e}const l=document.getElementById("arena");function d(e,t){for(let o=0;o<t;o++){const t=document.createElement("div");t.className=`ball ${e}`,t.style.left=("player"===e?10:90)+"%",t.style.top=10+30*o+"px",l.appendChild(t),"player"===e?u.push(t):f.push(t)}}let u=[],f=[],p=[];function g(){document.querySelectorAll(".ball").forEach((e=>{const t=e.classList.contains("player")?l.offsetWidth:-l.offsetWidth;p.push(e.animate([{transform:`translateX(${t}px)`}],{duration:3e3,fill:"none"}).finished.then((()=>{e.remove()})))})),h(),setTimeout((()=>{const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0!==e&&0!==t){for(const e of document.querySelectorAll(".ball"))e.remove();d("player",e),d("enemy",t),g()}}),2900)}let b=!1;function m(e,t){const o=e.getBoundingClientRect(),s=t.getBoundingClientRect();return!(o.right<s.left||o.left>s.right||o.bottom<s.top||o.top>s.bottom)}function h(){!function(e,t){for(let n=0;n<e.length;n++)for(let e=0;e<t.length;e++)m(u[n],f[e])&&(o=u[n],s=f[e],Math.random()<.5?s.remove():o.remove());var o,s}(u,f),function(){if(b)return;const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0===e||0===t){const t=document.getElementById("combatResult");if(t.textContent=(0===e?"The Enemy":"You")+" won!",v.disabled=!1,e>0){b=!0;let e=1;"aggressive"===w()&&(e=.75),"careful"===w()&&(e=1.25);for(const[o,s]of Object.entries(r))n(o,s*e),t.innerHTML+=`<br>+${s*e} ${o}`;c(),T()}return!0}return!1}()||b||requestAnimationFrame(h)}function y(){const e=k(),t=Math.ceil(e/12),o=Math.ceil(400/12),s=Math.max(t,o),n=Math.floor(e/s),i=Math.floor(400/s);return document.getElementById("approximateBall").textContent=s.toString(),[n,i]}const v=document.querySelector("button#startCombat");function k(){let e=s("violence")+s("spear");return"aggressive"===w()?e*=1.2:"careful"===w()&&(e*=.8),e}let x="balanced";function w(){return x}const C=document.querySelectorAll("button.stance");function B(e){console.log("switch stance to ",e),C.forEach((e=>{e.disabled=!1})),document.querySelector(`#${e}Stance`).disabled=!0,function(e){x=e}(e)}function T(){console.log(a()),Object.keys(a()).length<1&&c();const e=document.getElementById("lootList");e.innerHTML="";for(const[t,o]of Object.entries(a()))e.innerHTML+=`<span>${t} (${o})</span> <br>`;y()}t.switchStance=B,window.switchStance=B,t.combat=function(){for(const e of document.querySelectorAll(".ball"))e.remove();let[e,t]=y();d("player",e),d("enemy",t),document.getElementById("combatResult").textContent="",v.disabled=!0,b=!1,g()},t.calculateWinChance=function(){const e=k(),t=1/(1+Math.pow(10,(400-e)/200)),o=document.getElementById("playerMight");o.textContent=e.toFixed(0),o.setAttribute("tooltipdesc",`${s("violence").toFixed(0)} violence + ${s("spear").toFixed(0)} spears`),document.getElementById("enemyMight").textContent=400..toFixed(0);const n=document.getElementById("chanceToWin");return n.textContent=(100*t).toFixed(1)+"%",n.style.color=`hsl(${(120*t).toString(10)},100%,50%)`,t},t.refreshValues=T},51:(e,t,o)=>{const{getMaterial:s}=o(924),{craftedResources:n}=o(371),{resources:i}=o(587);var r={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},a=[];Object.keys(i).forEach((e=>a.push(e))),Object.keys(n).forEach((e=>a.push(e))),console.log("All materials: ",a);let c={},l={};function d(){Object.keys(n).forEach((e=>{c[e]=0,Array.from(n[e].cost).forEach((e=>{l[e.resource]||(l[e.resource]=0)}))}));const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const s=document.createElement("span");s.classList.add("factoryCost");const i=document.createElement("select");Object.keys(r).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,i.appendChild(t)})),i.setAttribute("data-produced","none"),i.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=i.value;(function(e,t,o){e&&"none"!==e&&(c[e]--,Array.from(n[e].cost).forEach((e=>{l[e.resource]-=e.amount}))),c[t]++,Array.from(n[t].cost).forEach((e=>{l[e.resource]+=e.amount}))})(e,t,this.dataset.factoryIndex),this.setAttribute("data-produced",t),document.querySelector(`#resource-${t}`).style.color="thistle",s.innerHTML="",s.innerHTML+=`${o(594).generateTooltipCost(n[i.value].cost)}`}));const a=document.createElement("span");return a.innerHTML="&#8594;",t.appendChild(s),t.appendChild(a),t.appendChild(i),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.selected=!0,e.appendChild(o)}(i),e.appendChild(t),t}let u=2,f=30;var p=50;e.exports={createFactoryDiv:d,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,i=r[t];i&&t&&function(e,t){let i=[];e.forEach((e=>i.push(s(e)/n[t].cost[e])));let r=Math.min(u,...i);r*=1,o(594).craftResourceQuantity(t,r)}(i,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");s("silver")<p?console.log("Not enough silver!"):(o(594).increaseMaterial("silver",-p),d(),p*=1.2,e.setAttribute("tooltipCost",`${p.toFixed(2)} silver`))},upgradeBulk:function(){s("silver")<f||(u+=2,f+=10,document.getElementById("upgradeBulkButton").setAttribute("tooltipCost",`${u} → ${u+2}: ${f.toFixed(0)} silver`))},allMaterials:a,getFactoryProduction:function(e){return c[e]*u},loadFactory:function(e){console.log("loading a factory for ",e);let t=d();t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(594).generateTooltipCost(n[e].cost)}`;const s=document.getElementById("buyFactoryButton");p*=1.2,s.setAttribute("tooltipCost",`${p.toFixed(0)} silver`)},activeFactoriesProducing:c}},531:(e,t)=>{t.fitCharToCell=function(e,t,o,s){const n=document.createElement("span");n.textContent=e,n.style.fontSize=`${s}px`,n.style.position="absolute",n.style.whiteSpace="nowrap",n.style.visibility="hidden",document.body.appendChild(n);let i=s;for(;n.offsetWidth<t&&n.offsetHeight<o&&(i++,n.style.fontSize=`${i}px`,!(i>=1e3)););return document.body.removeChild(n),i}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},924:(e,t,o)=>{const{getCraftedResource:s}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:s(e,null)}},78:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425),{resources:i,isResource:r}=o(587),{skills:a}=o(324);let c=new Set(["gatherSticks"]);t.allVisibleButtons=c,e.exports={getMax:function(e){if(r(e)){let t=i[e].max;return s("storageSpace")&&"clones"!==e?t*=1.05*n("storageSpace"):"clones"===e&&s("maxClones")&&(t+=n("maxClones")),t}return 1/0},calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return c.has(e)},setVisibleButton:function(e){c.add(e)},clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combatTab",hunting:"hunting"}},150:(e,t,o)=>{const{skills:s}=o(324),{resources:n}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),{triggerFloatUpText:c}=o(727),l=new Audio("./audio/job.wav"),d={};for(let e in s)d[e]=0;const u=document.getElementById("jobsTab");function f(){var e=0;for(let t in d)e+=d[t];return e}Object.keys(s).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const s=document.createElement("span");s.classList.add("job-name"),s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(s);const n=document.createElement("div");n.classList.add("btn-increment"),n.textContent="+",t.appendChild(n),u.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(l.play(),i("clones",n)>f()){const o=e.pageX,s=e.pageY;if(e.shiftKey){let e=i("clones",n)-f();d[t]+=e,c(o,s,`+${e} workers`,"green")}else if(e.ctrlKey){let e=Math.min(10,i("clones",n)-f());d[t]+=e,c(o,s,`+${e} workers`,"green")}else d[t]++,c(o,s,"+1 worker","green");g(t,d[t]),m(t),h()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job"),o=e.pageX,s=e.pageY;if(l.play(),e.shiftKey){let e=d[t];d[t]=0,e>0&&c(o,s,`-${e} workers`,"red")}else if(e.ctrlKey){let e=Math.min(10,d[t]);d[t]-=e,c(o,s,`-${e} workers`,"red")}else d[t]>0&&(d[t]--,c(o,s,"-1 worker","red"));g(t,d[t]),m(t),h()}))}));let p=new Map;function g(e,t){if(!s[e])return null;let o=s[e].affectedResources;o=o.filter((e=>e in n));let i=o.length,r=Math.floor(t/i);for(let t of o)p.set(t,r),r>0&&b(e,t);let a=t-r*i;for(let t of o)a>0&&(p.set(t,p.get(t)+1),a--,b(e,t))}function b(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const s=document.getElementById(`resource-${t}`);if(!s||"none"===s.style.display)return;const n=o.getBoundingClientRect(),i=s.getBoundingClientRect(),r=document.createElement("div");r.style.position="absolute",r.style.width="10px",r.style.height="10px",r.style.borderRadius="50%",r.style.backgroundColor="white",r.style.opacity=".8",r.style.left=`${n.left+window.scrollX}px`,r.style.top=`${n.top+window.scrollY}px`,document.body.appendChild(r),r.animate([{transform:`translate(${i.left-n.left}px, ${i.top-n.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{r.style.display="none"}}function m(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const s=t.querySelector(".job-name");s&&(s.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${d[e]}`),o(594).updateEmojiDisplay()}function h(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+f()+" / "+a("clones")}let y=new Map,v=document.getElementById("lineCanvas"),k=v.getContext("2d");function x(e,t,o){let s=e.getBoundingClientRect(),n=s.left+s.width/2,i=scrollY+s.top+s.height/2;k.beginPath(),k.moveTo(n,i),k.lineTo(t,o),k.stroke(),function(e,t,o,s,n,i){let r,a,c,l=s,d=n;e.beginPath(),r=Math.atan2(n-o,s-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(k,n,i,t,o,10)}function w(e,t){let o=d[e];d[e]=0,d[t]+=o,m(e),m(t)}v.width=window.innerWidth,v.height=window.innerHeight,e.exports={clearJobAssignments:function(){k.clearRect(0,0,v.width,v.height),y=new Map},reassignJobsBasedOnResources:function(){try{const e=y.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,l=s[e].affectedResources;if(!l)return;for(const e of l)if(void 0!==n[e]&&i(e)<n[e].max){c=!1;break}c&&d[e]>0&&(w(r,a),g(r,d[r]),g(a,d[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:w,drawAllConnections:function(){k.clearRect(0,0,v.width,v.height);try{for(let[e,t]of y.entries()){let o=document.getElementById(e),s=document.getElementById(t),n=s.getBoundingClientRect(),i=n.left+n.width/2,r=0;r=n.bottom>o.getBoundingClientRect().bottom?s.offsetTop-10:s.offsetTop+s.offsetHeight+10,x(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return p.get(e)},updateTotal:h,setConnections:function(e){y=e},getConnections:function(){return y},distributeWorkers:g,updateDisplay:m,jobCounts:d,resetAllJobs:function(){for(let e in s)d[e]=0,g(e,0),h(),m(e)}}},882:(e,t,o)=>{const{hasPerk:s}=o(134),{recalcMaxClones:n}=o(995),{recalculateBuildingCost:i}=o(22),{updateBuildingButtonCount:r}=o(607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},hospital:{basecost:{concrete:10,medicine:20,fish:20},effects:{clones:3},boost:{},count:0,ratio:1.7,tooltipDesc:"Keep yourself safe.",emoji:"+"},barracks:{basecost:{spear:20,violence:1,wood:200},effects:{clones:1,violence:20},boost:{},count:0,ratio:1.5,tooltipDesc:"A hall of raucous soldiers.",emoji:"𓈏"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.2,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30,wood:40},effects:{wood:100},ratio:1.2,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.2,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.4,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,berries:40,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,wheat:100,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},reservoir:{basecost:{rocks:100,clay:50,water:10},effects:{water:100},boost:{},count:0,ratio:1.3,tooltipDesc:"A hole filled with water. Useful.",emoji:"𓈞"},stone_depot:{basecost:{rocks:200},effects:{rocks:250},boost:{},count:0,ratio:1.2,tooltipDesc:"A big stack of rocks.",emoji:"𓈓"},warehouse:{basecost:{crates:10,concrete:20},effects:{wood:100,rocks:100,clay:100,sand:100},boost:{},count:0,ratio:1.3,tooltipDesc:"Put stuff in a box inside a larger box.",emoji:"𓇦"},military_school:{basecost:{bricks:20,violence:10},effects:{violence:100},boost:{violence:1.05},count:0,ratio:1.4,tooltipDesc:"Learn the art of hurting others.",emoji:"𓇻"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.02},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{fish:50},boost:{},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,berries:40,gold:1},effects:{},boost:{berries:1.2,herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"𓇬"},garden:{basecost:{beams:20,herbs:20,berries:50,freshwater:10},effects:{},boost:{berries:1.1,herbs:1.1,sticks:1.05},count:0,ratio:1.3,tooltipDesc:"Nice nature, carefully cultivated.",emoji:"𓆷"},sand_scoop:{basecost:{beams:10,iron:5},effects:{},boost:{sand:1.1},count:0,ratio:1.2,tooltipDesc:"Scoop the sand from the shore? Sure!",emoji:"𓄛"},traps:{basecost:{nails:10,sticks:20,herbs:20},effects:{},boost:{game:1.1},count:0,ratio:1.2,tooltipDesc:"Watch your step!",emoji:"𓄦"},rock_role:{basecost:{slabs:20,freshwater:30},effects:{},boost:{rocks:1.2},count:0,ratio:1.3,tooltipDesc:"In order to gather the rock you must become the rock.",emoji:"𓆇"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,r(e,0),i(e,a,s);n()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"teepee":return!0;default:return!1}}}},54:(e,t,o)=>{const{passedStage:s}=o(751),{getMaterial:n}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>n("sticks",r)>=10||s("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>n("vines",r)>=10||s("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||s("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||s("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||s("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>s("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>s("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>s("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>s("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>s("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>s("factoryTab"),hide:()=>!1},combatTabButton:{class:"tab-button",text:"Combat",showTab:"combatTab",tab:"tabs",requirement:()=>s("combatTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>s("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:s}=o(924),{getCraftedResource:n}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}},wood:{value:0,cost:{sticks:8}},sticks:{value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id===e||o.id===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null},resetCraftedResources:function(){for(const[e,t]of Object.entries(a))t.value=0,t.craftedOnce=!1}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{let t={ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 3%",cost:{ponder:180}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combatTab:{id:"ponderCombatTab",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},ponder2:{id:"ponderPonder2",requirement:()=>!0,isPondered:!1,text:"Think even harder",tooltipDesc:"5% boost to pondering",cost:{ponder:300}},ponder3:{id:"ponderPonder3",requirement:()=>!0,isPondered:!1,text:"Think hardest",tooltipDesc:"5% boost to pondering",cost:{ponder:600}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double diameter Teepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}}};e.exports={ponders:t,resetPonders:function(){for(const[e,o]of Object.entries(t))o.isPondered=!1}}},425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},cheaperBuildings:{text:"Rickety",tooltipDesc:"Building Cost (-5%)",cost:2,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},berries:{value:0,id:"gatherBerries",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",max:1e3},violence:{value:0,id:"gatherViolence",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"",max:100}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:["violence"]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:s,resetCraftedResources:n}=o(371),{buildings:i,resetBuildings:r}=o(882),{ponders:a,resetPonders:c}=o(397),{buttons:l}=o(54),{resources:d,resetResources:u}=o(587),{saveGame:f,loadGame:p}=o(502),{generateTooltipCost:g,appendCraftedResourceButtons:b,increaseMaterial:m,craftAllResources:h,craftResource:y,calcIncrease:v,updateResourceIncreaseRates:k,increaseMax:x}=o(594),{buyMaxBuildings:w,buyBuilding:C,createBuildingButton:B}=o(151),{hasPerk:T,selectAbility:S,resetPerks:E}=o(134),{clearSidebar:M}=o(78),{makeVisible:A}=o(123),{updateButtonVisibility:j}=o(667),{getCraftedResource:q}=o(590),{getMaterial:D}=o(924),{buyFactory:L,attemptManufacture:P,upgradeBulk:R}=o(51),{isPondered:$,generatePonderButtons:I}=o(369),{hasTool:O,addTool:F}=o(609),{getAteFish:H,setAteFish:V}=o(621),{drawAllConnections:G,updateTotal:W,clearJobAssignments:N,resetAllJobs:_}=o(150),{capitalizeFirst:z}=o(681),{passedStage:J,resetStages:U}=o(751),{recalcMaxClones:Y}=o(995),{initializeResourceTags:K,updateSidebar:X,updateDisplayValue:Q}=o(453),{prestige:Z}=o(425),{recalculateBuildingCost:ee}=o(22),{triggerFloatUpText:te}=o(727),{updateBounceAnimation:oe}=o(994),{updateTooltip:se,hideTooltip:ne}=o(208),{canCraft:ie}=o(64),{calculateWinChance:re,combat:ae,refreshValues:ce,switchStance:le}=o(856),de=document.querySelector("#resources");const ue=document.querySelector("#emojiGatherDisplay");function fe(e){const t=d[e],o=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));ue.textContent="𓀟",t.isGetting?(t.isGetting=!1,s.classList.remove("gathering"),s.textContent=t.defaultText,o&&(o.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(d)){t.isGetting=!1;const o=document.querySelector("#gather"+z(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const s=de.querySelector("#resource-"+e);s&&(s.style.fontWeight="normal")}}(),t.isGetting=!0,s.textContent=t.activeText,o&&(o.style.fontWeight="bold"),ue.textContent=t.emoji,console.log(t.emoji),s.classList.add("gathering"))}const pe={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},ge=[{condition:()=>D("sticks",d)>=1,action:()=>A("stick")},{condition:()=>D("sticks",d)>=10,action:()=>A("vines")},{condition:()=>D("vines",d)>=10,action:()=>A("rocks")},{condition:()=>D("rocks",d)>=1,action:()=>{A("tab-button"),A("craftRocks")}},{condition:()=>q("spear",s)>0,action:()=>A("spear")},{condition:()=>D("fish",d)>=1,action:()=>A("fishing")},{condition:()=>O("Axe"),action:()=>A("wood")},{condition:()=>q("rope")>=1,action:()=>A("rope")},{condition:()=>D("fish",d)>=5&&!H(),action:()=>A("eatFish")},{condition:()=>H(),action:()=>{A("clone"),A("ponder-tab")}},{condition:()=>$("ponderFinish"),action:()=>("stage2.html",document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>$("biggerShelter")||$("biggerHut")||$("biggerHouse")||$("biggerTeepee")||$("evenBiggerShelter"),action:()=>Y()},{condition:()=>D("clones")>=40,action:()=>A("prestige")},{condition:()=>D("clay")>0,action:()=>A("clay")},{condition:()=>!document.getElementById("toggle-basics")&&$("organization"),action:()=>K(!0)},{condition:()=>J("combatTab"),action:()=>re()}],be=["./audio/song1.wav","./audio/song2.wav","./audio/song3.wav","./audio/song4.wav","./audio/song5.wav","./audio/song6.wav","./audio/song7.wav","./audio/song8.wav","./audio/song9.wav","./audio/song10.wav"];let me=null,he=null;function ye(){me&&(me.pause(),me.currentTime=0);const e=Math.floor(Math.random()*be.length);me=new Audio(be[e]),me.volume=ve,me.play(),function(){he&&clearTimeout(he);const e=3e4*Math.random()+5e3;me.onended=()=>{he=setTimeout(ye,e)}}()}let ve=.5,ke=.5;function xe(){let e="";for(let t of we)t.classList.contains("active")&&(e=t.id);return e}let we=document.querySelectorAll(".tab-content > .content");function Ce(e){console.log("show tab: "+e);let t=xe();if(e===t)return;let o=new Audio("./audio/tab.wav");o.volume=ke,o.play();let s=document.getElementById(t);s.classList.remove("active"),s.style.opacity="0";let n=document.querySelectorAll(".tab-button");for(let e of n)e.classList.remove("active");let i=document.getElementById(e);setTimeout((()=>{i.classList.add("active")}),100),setTimeout((()=>{i.style.opacity="1"}),200);const r=`#${e}Button`;let a=document.querySelector(r);a&&a.classList.add("active"),"jobsTab"===e&&G(),"combatTab"===e&&ce(),console.log(t,">",e),X()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":Ce("productionTab");break;case"2":J("tab-button")&&Ce("experimentTab");break;case"3":J("ponder-tab")&&Ce("ponderTab");break;case"4":J("jobs-tab")&&Ce("jobsTab");break;case"5":J("skillsTable")&&Ce("skillsTab");break;case"6":J("perksTab")&&Ce("perksTab");break;case"7":J("factoryTab")&&Ce("factoryTab");break;case"8":J("combatTab")&&Ce("combatTab");break;case"a":"combatTab"===xe()&&le("aggressive");break;case"b":"combatTab"===xe()&&le("balanced");break;case"c":"combatTab"===xe()&&le("careful");break;case"f":"combatTab"!==xe()||document.getElementById("startCombat").disabled?fe("fish"):ae();break;case"s":fe("sticks");break;case"r":J("rocks")&&fe("rocks");break;case"v":J("vines")&&fe("vines");break;case"w":J("wood")&&fe("wood");break;case"o":J("ore")&&fe("ore");break;case"p":J("ponder-tab")&&fe("ponder")}}));const Be=document.body;Be.classList.toggle("dark-mode");let Te=!0;function Se(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block",o.style.opacity="1"}),5e3)}const Ee=document.getElementById("message");function Me(e,t){const o=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="You feel peckish for some seafood">${t}</span>`);Ee.innerHTML=o}let Ae=50,je=null,qe=0,De=0;function Le(e){null===je&&(je=e);const t=e-je;qe+=t,De+=t,je=e;let o=Ae;for(De>=10*Ae&&(Ae=De/10);De>=Ae;)De-=Ae,$e(Ae);Ae=o,requestAnimationFrame(Le)}let Pe=0,Re=0;function $e(e,t){for(const[t,o]of Object.entries(d))m(t,v(t,e));k(),function(){for(let e=ge.length-1;e>=0;e--){const t=ge[e];t.condition()&&(t.action(),ge.splice(e,1))}for(let e in pe)!O(e)&&q(e)>0&&(F(e),A(pe[e]));try{j(),null!==Oe&&se(Oe)}catch(e){console.warn(e)}}(),Pe+=e,Re+=e,Pe>=1e4&&(f(),Pe=0),J("factoryTab")&&Re>=1e3&&(P(),Re=0)}window.onbeforeunload=function(){Ie||f()};let Ie=!1;document.addEventListener("DOMContentLoaded",(e=>{I(a),function(){console.log("Generating buttons"),console.trace();for(let e in i){const t=B(e,i);l[e]=t}const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",s.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",s.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),s.classList.add("visible"),e.prepend(s),e.prepend(o),e.prepend(t),[t,o,s]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),n=document.getElementById("experimentTab").querySelector(".button-columns"),r=document.getElementById("ponderTab"),a=e(n),c=e(r);let d=1,u=0,f=0;for(let e in l){const n=l[e],r=document.createElement("button");r.id=e,r.className=n.class,r.textContent=n.text.split("_").join(" "),n.tooltipDesc&&r.setAttribute("data-tooltip-desc",n.tooltipDesc),n.tooltipEffect&&r.setAttribute("data-tooltip-effect",n.tooltipEffect),r.setAttribute("unlock",n.unlock),r.setAttribute("data_building",n.data_building);const p=Object.values(s).find((t=>t.id===e));p&&(n.tooltipCost=g(p.cost)),r.setAttribute("data-tooltip-cost",n.tooltipCost),n.showTab&&r.addEventListener("click",(()=>{Ce(n.showTab),console.log("Switching to tab: "+n.showTab)})),"production"===n.tab?(r.style.gridColumn=d.toString(),d=(d+1)%3,o.appendChild(r)):"experiment"===n.tab?(a[u].appendChild(r),u=(u+1)%3):"tabs"===n.tab?t.appendChild(r):"ponder"===n.tab?(c[f].appendChild(r),f=(f+1)%3):"job"===n.tab||document.getElementById(n.tab).appendChild(n),Object.keys(i).find((t=>t===e))&&ee(e,i,T);try{n.requirement()||(r.style.display="none")}catch(e){}}}(),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),L()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("tooltipCost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),R()}))}(),K(),p(),M(),K($("organization")),b(),X(),Ce("productionTab"),o(864).generateTradeTable(d),document.addEventListener("click",(e=>{if(null===me&&ye(),e.target.matches("button")){const i=e.target;if(i.getAttribute("data_building")&&"undefined"!==i.getAttribute("data_building")&&i.classList.contains("purchasable")){var t=i.getAttribute("data_building");const o=e.pageX,s=e.pageY;let n=new Audio("./audio/building.wav");n.volume=ke,n.play();const r=z(t).split("_").join(" ");if(e.shiftKey){let e=w(t);te(o,s,`+${e} ${r}s`,"aqua")}else C(t),te(o,s,`+1 ${r}`,"aqua")}else if(i.classList.contains("unlock")){const e=i.getAttribute("unlock");if(console.log(e),a[e]){var o=!0;for(let t in a[e].cost)if(D(t,d)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)m(t,-a[e].cost[t]);a[e].isPondered=!0,A(e),i.display="none";let t=new Audio("./audio/ponder.wav");t.volume=ke,t.play(),"organization"===e&&location.reload()}}}else if("undefined"!==i.id)if("gather"===i.id.slice(0,6))fe(function(e){for(const[t,o]of Object.entries(d))if(o.id===e)return t;return"error "+e}(i.id));else if("craft"===i.id.slice(0,5)){let t=new Audio("./audio/craft.wav");t.volume=ke,t.play();let o=function(e){for(const[t,o]of Object.entries(s))if(console.log(t,o,e),o.id===e)return t;return"error "+e}(i.id);console.log("clicked cr: ",o),ie(o)&&te(e.pageX,e.pageY,`+${o}`,"aqua"),e.shiftKey?h(o):y(o)}else"saveButton"===i.id?f():"eatFish"===i.id?!H()&&D("fish",d)>=1&&(m("fish",-1),Se(),V(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{Me("You are with yourself in a forest.","with yourself"),x("clones",1),m("clones",1)}),1e3)):"overlay-button"===i.id?(document.getElementById("overlay-text").style.opacity="0",document.getElementById("overlay-button").style.opacity="0",document.getElementById("overlay").style.display="none",document.getElementById("isekaiButtons").innerHTML="",location.reload()):"deleteSaveButton"===i.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?(localStorage.removeItem("save"),Ie=!0,location.reload()):"clearJobAssignments"===i.id?N():"darkModeToggle"===i.id?(Be.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),Te=!Te,darkModeToggle.textContent=Te?"Light Mode":"Dark Mode"):"2main"===i.id?Ce("mainTab"):"2graphs"===i.id?Ce("graphsTab"):"prestige"===i.id?function(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button"),s=document.getElementById("overlay-back-button");o.addEventListener("click",(()=>{const t=D("clones");u(),n(),c(),E(),r(),_(),U();for(let[e,t]of Object.entries(d))t.max=100;m("husks",t),e.style.display="none",K(!1)})),s.addEventListener("click",(()=>{e.style.display="none"}));const i=document.getElementById("husksIsekaiValue");let a;a=i||document.createElement("p"),a.id="husksIsekaiValue",a.innerHTML=`Husks:  ${D("husks")} <br> You will get ${D("clones")} Husks post-isekai.`,a.style.opacity="0",e.prepend(a),e.style.backgroundColor="MidnightBlue",t.textContent="You step through to another world.",Se(),setTimeout((()=>{s.style.opacity="1"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(Z).forEach((o=>{const s=document.createElement("button");s.innerHTML=`<b>${Z[o].text}</b><br>Level: ${Z[o].level}<br>Cost: ${Z[o].cost}`,s.setAttribute("tooltipCost",Z[o].cost),s.setAttribute("tooltipDesc",Z[o].tooltipDesc),s.classList.add("tooltip"),s.style.gridColumn=(t%4+1).toString(),s.style.gridRow=Math.floor(t/4+1).toString(),++t,s.addEventListener("click",(()=>{console.log(`Button ${o} was clicked`),D("husks")<Z[o].cost||(Z[o].level++,m("husks",-Z[o].cost),Z[o].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(Z[o].cost),s.setAttribute("tooltipCost",Z[o].cost),s.innerHTML=`<b>${Z[o].text}</b><br>Level: ${Z[o].level}<br>Cost: ${Z[o].cost}`,a.textContent="Husks: "+D("husks"),se(s))})),s.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${o} was right clicked`),Z[o].level<=0||(Z[o].level--,Z[o].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(Z[o].cost),s.setAttribute("tooltipCost",Z[o].cost),m("husks",Z[o].cost),s.innerHTML=`<b>${Z[o].text}</b><br>Level: ${Z[o].level}<br>Cost: ${Z[o].cost}`,a.textContent="Husks: "+D("husks"),se(s))})),e.appendChild(s),s.addEventListener("mouseenter",(function(e){se(s),Oe=s})),s.addEventListener("mouseleave",(function(){ne(),Oe=null}))}))}),5e3),setTimeout((()=>{a.style.opacity="1"}),5e3)}():"startCombat"===i.id&&ae();if(i.classList.contains("tierOneButton")){let e=i.textContent;S(e)}}if(e.target.matches("#alone")){let t="+1 Clone";d.clones.value<d.clones.max?d.clones.value+=1:t="Max Clones";const o=e.pageX,s=e.pageY;te(o,s,t,"+1 Clone"===t?"green":"red"),W(),Q("clones")}})),document.getElementById("optionsButton").addEventListener("click",(function(){const e=document.getElementById("optionsMenu");e.style.display="none"===e.style.display?"block":"none"})),document.getElementById("musicVolume").addEventListener("input",(function(){ve=this.value,me.volume=ve})),document.getElementById("sfxVolume").addEventListener("input",(function(){ke=this.value})),requestAnimationFrame(Le),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){se(e),Oe=e})),e.addEventListener("onclick",(function(){se(e)})),e.addEventListener("mouseleave",(function(){ne(),Oe=null}))})),W(),oe()}));var Oe=null;e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${d[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){qe=e},changeMessage:Me,getMessage:function(){return Ee},total_time:qe,currentHoverButton:Oe}},123:(e,t,o)=>{const{setStage:s,passedStage:n}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){n(e)||s(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),i()}},134:(e,t,o)=>{const{buildings:s}=o(882),{perks:n}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e)for(let e in s)o(22).recalculateBuildingCost(e,s,r)}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in n["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i},resetPerks:function(){i=[]}}},369:(e,t,o)=>{const{capitalizeFirst:s}=o(681),{ponders:n}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!n[e]&&n[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in n)n[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in n[t].cost)if(i(e,r)<n[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${s(t)}`;let r=o(594).generateTooltipCost(i.cost);a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:r,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=n[t].cost.ponder/2,hide:()=>c(t)}}}}},995:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425),{isPondered:i}=o(369),{setMax:r}=o(594),{passedStage:a}=o(751),{updateBounceAnimation:c}=o(994);t.recalcMaxClones=function(){let e=0;a("clone")&&(e+=1);const t=o(882).buildings;for(const[o,s]of Object.entries(t))s.effects&&s.effects.clones&&(e+=s.effects.clones*s.count);i("biggerShelter")&&(e+=1*t.shelter.count),i("biggerHut")&&(e+=1*t.hut.count),i("biggerHouse")&&(e+=2*t.house.count),i("biggerTeepee")&&(e+=4*t.teepee.count),i("evenBiggerShelter")&&(e+=1*t.shelter.count),s("maxClones")&&(e+=1*n("maxClones")),r("clones",e),c()}},22:(e,t,o)=>{const{hasPrestige:s,getLevelOfPrestige:n}=o(425);t.recalculateBuildingCost=function(e,t,i){let r=t[e];if(r&&r.cost&&r.ratio)for(let e in r.cost)r.cost[e]=Math.round(r.basecost[e]*Math.pow(r.ratio,r.count)),i("Architect")&&(r.cost[e]*=.75),s("cheaperBuildings")&&(r.cost[e]*=Math.pow(.95,n("cheaperBuildings")));const a=document.querySelector("#"+e);var c=o(594).generateTooltipCost(r.cost);if(!a)throw"Button not found for "+e;{a.setAttribute("data-tooltip-cost",c);const e=o(151).generateEffectString(r);a.setAttribute("data-tooltip-effect",e)}}},594:(e,t,o)=>{const{resources:s}=o(587),{craftedResources:n}=o(371),{ponders:i}=o(397),{buttons:r}=o(54),{skills:a}=o(324),{getWorkers:c,updateTotal:l}=o(150),{hasTool:d}=o(609),{calcCraftBonus:u,getMax:f}=o(78),{canCraft:p}=o(64),{capitalizeFirst:g}=o(681),{getMaterial:b}=o(924),{isPondered:m}=o(369),{getCraftedResource:h}=o(590),{calcIncrease:y}=o(121),{updateSidebar:v,abbreviateNumber:k}=o(453),{passedStage:x,getAllStages:w}=o(751),{updateDisplayValue:C}=o(453),{updateSkills:B}=o(491),T=document.getElementById("resources");function S(e,t){0!=t&&((e=e.toLowerCase())in s?(b(e)<f(e)&&t>0?(m("fasterResourceGain")&&(t*=1.05),s[e].value+=t,B(e,t)):t<0?s[e].value+=t:(s[e].value=f(e),m("autocraft")&&document.querySelector("#autoCraftCheckbox").checked&&D[e]&&L(D[e])),C(e)):e in n?(console.log("crafting a material",e,t),n[e].value+=t,C(e),B(e,t)):(s[e]&&(s[e].value+=t),n[e]&&(n[e].value+=t),v()))}function E(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(n).find((t=>n[t]===e));return t.innerHTML=`${e.text||g(o)}`,t.tab="experiment",t}t.resourcesContainer=T,window.increaseMaterial=S;const M=document.querySelector("#craftedResourceButtons");function A(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${b(o,s)>=e[o]?"enough":"not-enough"}">${k(e[o])} ${o}</span><br>`;return t}const j=document.getElementById("emojiDisplay");function q(){let e="";for(let t in s){let o=c(t);if(void 0===o||0==o)continue;let n=s[t].emoji||"𓀟";n&&(e+=n.repeat(o))}j.textContent=e,function(){let e=48;for(j.style.fontSize=`${e}px`;j.offsetWidth>600&&e>30;)e-=1,j.style.fontSize=`${e}px`}()}q();const D={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function L(e){try{const t=n[e].cost;let o=[];for(let e in t)o.push(b(e,s)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),P(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}}function P(e,t){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!p(e))return;let o=n[e].cost;for(let s=0;s<Math.floor(t);++s)console.log("crafting",t,e,o),R(e,o,u(e));n[e].craftedOnce||(n[e].craftedOnce=!0),C(e)}function R(e,t,o){for(const[e,o]of Object.entries(t))S(e,-o);S(e,o)}e.exports={increaseMaterial:S,setMax:function(e,t){s[e].max=t,v(),l()},increaseMax:function(e,t){s[e].max+=t,v(),l()},craftAllResources:L,craftResource:function(e){if(!n.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;p(e)&&(R(e,n[e].cost,u(e)),n[e].craftedOnce||(n[e].craftedOnce=!0),C(e))},updateEmojiDisplay:q,generateTooltipCost:A,calcSecondsRemaining:function(e,t){if(t<=s[e])return 0;const o=y(e,1e3);return 0==o?-1:Math.ceil(t-s[e].value)/o},appendCraftedResourceButtons:function(){for(let e in n){const t=E(n[e]);t.setAttribute("data-tooltip-desc",n[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",A(n[e].cost)||""),M.appendChild(t),x(t.getAttribute("requirement"))?t.classList.remove("hidden"):t.classList.add("hidden"),r[n[e].id]=n[e]}},calcIncrease:y,updateResourceIncreaseRates:function(){for(let t in s){const o=y(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:P}},502:(e,t,o)=>{const{calcIncrease:s,updateEmojiDisplay:n}=o(594),{addTool:i,getAllTools:r}=o(609),{allVisibleButtons:a,setVisibleButton:c}=o(78),{makeVisible:l}=o(123),{getCraftedResource:d}=o(590),{getMaterial:u}=o(924),{getAllPerks:f,addPerk:p,hasPerk:g,selectAbility:b}=o(134),{isPondered:m}=o(369),{jobCounts:h,setConnections:y,getConnections:v,distributeWorkers:k,updateDisplay:x}=o(150),{total_time:w}=o(808),{setAteFish:C,getAteFish:B}=o(621),{craftedResources:T}=o(371),{buildings:S}=o(882),{ponders:E}=o(397),{resources:M}=o(587),{skills:A}=o(324),{getAllStages:j}=o(751),{activeFactoriesProducing:q,loadFactory:D}=o(51),{recalcMaxClones:L}=o(995),{updateSidebar:P}=o(453),{prestige:R}=o(425),{recalculateBuildingCost:$}=o(22),{updateBuildingButtonCount:I}=o(607),{updateBuildingList:O}=o(151),{populateSkillsTable:F}=o(491);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{}};for(let t in A)e.skills[t]={exp:A[t].exp,level:A[t].level};for(let t in T)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=d(t),e.craftedResources[t].craftedOnce=T[t].craftedOnce;for(let t in M)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=u(t,M),e.resources[t].max=M[t].max;e.tools=r(),e.stages=j(),e.jobs=h,e.perks=f(),e.connections=Array.from(v().entries());for(let t in E)e.unlocks[t]=m(t);for(let t in S)e.buildings[t]=S[t].count;for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries(q))e.factories[t]=o;const t=o(808).getMessage().innerHTML;e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t);for(const[t,o]of Object.entries(R))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=w,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(M[t].value=e.resources[t].value,M[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=M[t].value&&o(453).updateDisplayValue(t));if(void 0!==e.skills)for(let t in e.skills)A[t].exp=e.skills[t].exp,A[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))T[t]&&(T[t].value=e.craftedResources[t].value,Number.isNaN(T[t].value)&&(T[t].value=0),T[t].craftedOnce=e.craftedResources[t].craftedOnce,o(453).updateDisplayValue(t));if(void 0!==e.tools){let t=[...new Set([...r(),...e.tools])];for(let e in t)i(e)}if(void 0!==e.stages)for(let t in e.stages)l(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)h[t]=e.jobs[t],x(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{E[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(m("skillsTable")&&F(),void 0!==e.perks)for(let[t,s]of Object.entries(e.perks))p(s),o(495).selectCorrectPerkButton(s);if(void 0!==e.prestige)for(const[t,o]of Object.entries(e.prestige))R[t].cost=o.cost,R[t].level=o.level;if(void 0!==e.buildings){for(let t in e.buildings)try{S[t].count=e.buildings[t],S[t].count>0&&(I(t,S[t].count),$(t,S,g))}catch(e){console.warn("error with building",t)}P()}if(L(),O(),C(M.clones.max>=1),B()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[w]);const t=Date.now()-e.time.time_of_save;for(let e in M){const o=s(e,t);M[e].value+=o,M[e].value>M[e].max&&(M[e].value=M[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)c(t)}void 0!==e.connections&&(y(new Map(e.connections)),0===v().size&&y(new Map),console.log(v()));for(let e in h)k(e,h[e]);if(n(),void 0!==e.factories)for(const[t,o]of Object.entries(e.factories))if(o>0)for(let e=0;e<o;++e)D(t)}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},453:(e,t,o)=>{const{calcIncrease:s}=o(121),{capitalizeFirst:n}=o(681),{getMaterial:i}=o(924),{getMax:r}=o(78),{resources:a}=o(587),{isPondered:c}=o(369);function l(e){var t=!0;return i(e)>0&&(t=!1,a[e]&&(a[e].isVisible=!0)),a[e]&&a[e].isVisible&&(t=!1),t}function d(e){if("number"!=typeof e)return e;function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const u=document.getElementById("resources");function f(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),u.appendChild(o))):o=document.getElementById("resources");const s=n(e).split("_").join(" "),a=document.createElement("p");a.className="resource",a.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${s}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let d=r(e)&&r(e)<1/0?r(e).toFixed(2):"∞";l.textContent=`${i(e).toFixed(2)} / ${d}`;const f=document.createElement("span");function p(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}return f.className="resourceRate",f.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,a.appendChild(c),a.appendChild(l),a.appendChild(f),o.appendChild(a),p("resource-clones",1),p("resource-sticks",2),p("resource-vines",3),p("resource-rocks",4),p("resource-fish",5),p("resource-freshwater",6),p("resource-wood",7),p("resource-ore",8),p("resource-sand",9),p("resource-clay",10),p("resource-wheat",11),p("resource-hides",12),p("resource-game",13),p("resource-herbs",14),p("resource-berries",15),p("resource-ponder",50),a}function p(e){const t=u.querySelector(`#${e}Value`),o=u.querySelector(`#${e}IncreaseRate`);if(t){try{t.textContent=`${d(i(e))} / ${d(r(e))}`,o&&(o.textContent=s(e,1e3).toFixed(1)),l(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(a[e]&&a[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}}e.exports={updateSidebar:function(){const e=o(51).allMaterials;Array.from(e).forEach((e=>{a[e]&&p(e)}));for(const[o,s]of Object.entries(e)){if(a[s])continue;const e=document.getElementById("resource-"+s);if(!e)return void console.warn("no parent element found for",s);l(s)?e.style.display="none":e.style.display="";const o=document.getElementById(s+"Value");if(o){var t="#fff";const e=i(s),n=r(s);e===n?t="#fcc":e/n>.6&&(t="#eeb"),o.innerHTML=`<span style="color:${t}">${d(e)} / ${d(n)} </span>`}}},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder","violence"],basics:["sticks","berries","fish","game","wheat","freshwater"],materials:["wood","sand","clay","vines","rocks","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,s]of Object.entries(t))s.forEach((t=>{let s=document.getElementById("resource-"+t);e||(o=null),s||(s=f(t,o)),l(t)?s.style.display="none":s.style.display=""}))},updateDisplayValue:p,abbreviateNumber:d}},491:(e,t,o)=>{const{skills:s}=o(324),{triggerFloatUpText:n}=o(727),i=function(e){let t={};for(const[o,s]of Object.entries(e))for(const e of s.affectedResources)t[e]||(t[e]=[]),t[e].push(o);return t}(s);console.log(i);let r=!1;function a(){const e=document.getElementById("skillsTable");if(r)for(let e in s){(s[e].exp>0||s[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=s[e].exp+"%",document.querySelector("#level-"+e).textContent="[level "+s[e].level+"]   "+e)}else{console.log("Generating table for the first time"),r=!0;for(let t in s){let o=document.createElement("tr");o.id="tr-"+t;let n=document.createElement("td");n.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent="[level "+s[t].level+"]   "+t,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==s[t].exp&&0==s[t].level&&(o.style.display="none"),n.appendChild(i),n.appendChild(r),o.appendChild(n),e.appendChild(o)}}}e.exports={updateSkills:function(e,t){if(t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05),!i[e])return;const r=i[e][0].toString();if(s[r].level>=100)return s[r].level=100,void(s[r].exp=0);if(s[r].exp+=t/Math.pow(1.4,s[r].level),s[r].exp>=100){s[r].level+=1,s[r].exp=0;let e=`Level up! ${r} → ${s[r].level}`;const t=document.getElementById("prestige").getBoundingClientRect();n(t.x,t.y,e,"#F4D03F")}o(751).passedStage("skillsTable")&&a()},populateSkillsTable:a}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},864:(e,t,o)=>{const{getMaterial:s}=o(924),n=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){s("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),i.textContent=s("gold",o(587).resources))}function a(e,t){s(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),i.textContent=s("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,n.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,s){const n=document.createElement("div");n.textContent=o,n.style.left=`${e}px`,n.style.top=t-30+"px",n.style.color=s,n.classList.add("float-up-fade-out"),document.body.appendChild(n),n.addEventListener("animationend",(()=>{n.remove()}))}},994:(e,t,o)=>{const{getMaterial:s}=o(924),{getMax:n}=o(78);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");s("clones")<n("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},607:(e,t,o)=>{const{capitalizeFirst:s}=o(681);t.updateBuildingButtonCount=function(e,t){document.getElementById(`${e}`).textContent=`${s(e).split("_").join(" ")} (${t})`}},831:(e,t,o)=>{const{buildings:s}=o(882),{updateTooltip:n,hideTooltip:i}=o(208),{fitCharToCell:r}=o(531),a=document.getElementById("buildingList");t.updateBuildingList=function(){const e=document.createDocumentFragment();let t=0;for(const[o,n]of Object.entries(s))for(let s=0;s<n.count;++s,++t){let s=(t%6+1).toString(),i=Math.floor(t/6+1).toString();const r=document.createElement("span");r.className="tooltip",r.style.gridColumn=s,r.style.gridRow=i,r.style.fontSize="36px",r.setAttribute("tooltipDesc",o),r.textContent=n.emoji||"?",e.appendChild(r)}a.innerHTML="",a.appendChild(e),a.addEventListener("mouseenter",(e=>{e.target.classList.contains("tooltip")&&n(e.target)}),!0),a.addEventListener("mouseleave",(e=>{e.target.classList.contains("tooltip")&&i()}),!0)}},667:(e,t,o)=>{const{buttons:s}=o(54),{getCraftedResourceConfigById:n}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,setVisibleButton:d}=o(78),{canCraft:u}=o(64),{canBuyBuilding:f}=o(23),{passedStage:p}=o(751);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=s[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var g=n(t.id);g.value>0&&(o="button-disabled");const e=c(g);u(e)&&(o=!t.requiredStage||t.requiredStage&&p(t.requiredStage)?"purchasable":"hidden")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(d(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var s;const n=o(842).O[t];"hidden"==(s=null==n||r(n)?"purchasable":"not-unlockable"===n?"hidden":"button-disabled")?e.style.display="none":(d(e.id),e.classList.add(s),e.style.display="")}))}},208:(e,t,o)=>{const{getCraftedResourceConfigById:s}=o(371),{buildings:n}=o(882),{ponders:i}=o(397),{resources:r,getResourceConfigById:a}=o(587),{calcSecondsRemaining:c}=o(594),{getMax:l}=o(78),{getMaterial:d}=o(924),u=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){u.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||s(e.id)||n[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],p=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||f&&f.cost;!function(e,t,o,s){let n="";function i(e){let t=parseFloat(e);return e.includes("K")?t*=1e3:e.includes("M")?t*=1e6:e.includes("B")&&(t*=1e9),t}t&&(n+=`<span >${t}</span><hr>`),o&&(n+=`<span style="color:#4cf">${o}</span><hr>`);try{if(s.toString().includes("span"))n+=function(e,t){const o=/class="tooltip-(\w+) .+?">([\d.]+[KM]?)\s(\w+)</g;let s,n="";for(;null!==(s=o.exec(e));){const e=s[1],o=s[2],a=i(o);var r=d(e,t)>=a?"enough":"not-enough";l(e)<a&&(r="exceeds-max"),n+=`<span class="tooltip-${e} ${r}">${o} ${e}</span>`;let u=0;t[e]&&(u=c(e,a)),u>0&&"exceeds-max"!=r&&(n+=`<span class="time-remaining">(${u.toFixed(0)} seconds)</span>`),n+="<br>"}return n}(s,r);else{var a="";for(const[e,t]of Object.entries(s)){var f=d(e,r)>=t?"enough":"not-enough";l(e)<t&&(f="exceeds-max"),a+=`<span class="tooltip-${e} ${f}">${t.toFixed(0)} ${e}</span>`;let o=0;r[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=f&&(a+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),a+="<br>"}n+=a}}catch(e){void 0!==s&&"undefined"!==s&&(n+=s)}u.innerHTML=n,u.style.left=e.getBoundingClientRect().right+5+"px",u.style.top=e.getBoundingClientRect().top-u.offsetHeight/2+"px",u.style.display="block"}(e,t,o,p)}}},t={};!function o(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsR0FHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQnpZLElBQWpCMFksRUFDSCxPQUFPQSxFQUFhcHdCLFFBR3JCLElBQUlELEVBQVNrd0IsRUFBeUJFLEdBQVksQ0FHakRud0IsUUFBUyxDQUFDLEdBT1gsT0FIQXF3QixFQUFvQkYsR0FBVXB3QixFQUFRQSxFQUFPQyxRQUFTa3dCLEdBRy9DbndCLEVBQU9DLE9BQ2YsQ0NuQjBCa3dCLENBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9hdGVGaXNoLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2J1aWxkaW5ncy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jYWxjSW5jcmVhc2UuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FuQnV5QnVpbGRpbmcuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FuQ3JhZnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FwaXRhbGl6ZUZpcnN0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NvbWJhdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9mYWN0b3J5LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2ZpdENoYXJUb0NlbGwuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2V0Q3JhZnRlZFJlc291cmNlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2dldE1hdGVyaWFsLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2hlbHBlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qb2JSZXF1aXJlZFBvbmRlcnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvam9icy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2J1aWxkaW5ncy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2J1dHRvbnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9jcmFmdGVkUmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vcGVya3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wb25kZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wcmVzdGlnZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3Jlc291cmNlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3NraWxscy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9tYWluLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL21ha2VWaXNpYmxlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BlcmtzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9yZWNhbGNNYXhDbG9uZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NhdmluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zaWRlYmFyLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NraWxscy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zdGFnZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdG9vbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdHJhZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdHJpZ2dlckZsb2F0VXBUZXh0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJvdW5jZUFuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJ1aWxkaW5nTGlzdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy91cGRhdGVCdXR0b25WaXNpYmlsaXR5LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZVRvb2x0aXAuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXRlRmlzaCA9IGZhbHNlO1xyXG5cclxuZnVuY3Rpb24gc2V0QXRlRmlzaChib29sKSB7XHJcbiAgICBhdGVGaXNoID0gYm9vbDtcclxuICAgIHJldHVybiBhdGVGaXNoO1xyXG59XHJcbmZ1bmN0aW9uIGdldEF0ZUZpc2goKSB7XHJcbiAgICByZXR1cm4gYXRlRmlzaDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBhdGVGaXNoLFxyXG4gICAgc2V0QXRlRmlzaCxcclxuICAgIGdldEF0ZUZpc2hcclxufTsiLCJjb25zdCB7IGJ1aWxkaW5ncywgaXNQb3BCdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IGluY3JlYXNlTWF0ZXJpYWwsIGluY3JlYXNlTWF4LCB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyB1cGRhdGVUb3RhbCB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgaGFzUGVyayB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKCcuL3JlY2FsY01heENsb25lcycpO1xyXG5cclxuY29uc3QgeyB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IGNhbkJ1eUJ1aWxkaW5nIH0gPSByZXF1aXJlKCcuL2NhbkJ1eUJ1aWxkaW5nJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyB1cGRhdGVCdWlsZGluZ0xpc3QgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnVpbGRpbmdMaXN0Jyk7XHJcblxyXG4vKiBCVUlMRElOR1MgKi9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmcgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVFZmZlY3RTdHJpbmcoYnVpbGRpbmcpIHtcclxuICAgIGxldCBlZmZlY3RQYXJ0cyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IFtyZXNvdXJjZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmVmZmVjdHMpKSB7XHJcbiAgICAgICAgLy8gZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVmZmVjdCkpIHtcclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHt2YWx1ZX0gbWF4ICR7cmVzb3VyY2V9YCk7XHJcbiAgICAgICAgLy8gQWRkIG1vcmUgY29uZGl0aW9ucyBoZXJlIGlmIHlvdSBpbnRyb2R1Y2UgbmV3IHR5cGVzIG9mIGVmZmVjdHNcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgW3Jlc291cmNlLCBib29zdF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuYm9vc3QpKSB7XHJcbiAgICAgICAgbGV0IHBlcmNlbnRhZ2VCb29zdCA9IE1hdGgucm91bmQoKGJvb3N0IC0gMSkgKiAxMDApO1xyXG4gICAgICAgIGlmIChpc1BvbmRlcmVkKCdlZmZlY3RpdmVCdWlsZGluZ3MnKSkgcGVyY2VudGFnZUJvb3N0ICo9IDEuMDE7XHJcbiAgICAgICAgZWZmZWN0UGFydHMucHVzaChgKyR7cGVyY2VudGFnZUJvb3N0fSUgJHtyZXNvdXJjZX0gcHJvZHVjdGlvbmApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWZmZWN0UGFydHMuam9pbignLCAnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0KGNvc3QpIHtcclxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhjb3N0KS5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYCR7YW1vdW50LnRvRml4ZWQoMil9ICR7bWF0ZXJpYWx9YCkuam9pbignXFxuJyk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVCdWlsZGluZ0J1dHRvbihidWlsZGluZ0tleSwgYnVpbGRpbmdzKSB7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ0tleV07XHJcblxyXG4gICAgLy8gYnVpbGRpbmcuY29zdCA9IGJ1aWxkaW5nLmJhc2Vjb3N0O1xyXG4gICAgYnVpbGRpbmcuY29zdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYnVpbGRpbmcuYmFzZWNvc3QpKTtcclxuXHJcbiAgICBjb25zdCBjb3N0cyA9IE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmNvc3QpXHJcbiAgICAgICAgLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHttYXRlcmlhbH06ICR7YW1vdW50fWApXHJcbiAgICAgICAgLmpvaW4oJywgJyk7XHJcblxyXG4gICAgLy8gY29uc3QgaGFsZkNvc3RSZXF1aXJlbWVudCA9IE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmNvc3QpXHJcbiAgICAvLyAgICAgLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgZ2V0TWF0ZXJpYWwoJyR7bWF0ZXJpYWx9LHJlc291cmNlcycpID49ICR7TWF0aC5mbG9vcihhbW91bnQgLyAyKX1gKVxyXG4gICAgLy8gICAgIC5qb2luKCcgJiYgJyk7XHJcblxyXG4gICAgLy8gbGV0IHJlcXVpcmVtZW50U3RyaW5nID0gYHJldHVybiAke2hhbGZDb3N0UmVxdWlyZW1lbnR9YDtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgYnVpbGRpbmcgaGFzIGFuIGVmZmVjdCBvbiBjbG9uZXMgbWF4XHJcbiAgICAvLyBpZiAoYnVpbGRpbmcuZWZmZWN0cyAmJiBidWlsZGluZy5lZmZlY3RzWydjbG9uZXMnXSkge1xyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50U3RyaW5nICs9IGAgJiYgcGFzc2VkU3RhZ2UoJ2Nsb25lcycpYDtcclxuICAgIC8vIH1cclxuICAgIGNvbnN0IHJlcXVpcmVtZW50RnVuY3Rpb24gPSBjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uKGJ1aWxkaW5nLmNvc3QsIGJ1aWxkaW5nS2V5KTtcclxuXHJcbiAgICBjb25zdCBidXR0b24gPSB7XHJcbiAgICAgICAgJ2NsYXNzJzogJ3Rvb2x0aXAgJyArIGJ1aWxkaW5nS2V5LFxyXG4gICAgICAgICd0YWInOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgJ3RleHQnOiBgJHtidWlsZGluZ0tleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGJ1aWxkaW5nS2V5LnNsaWNlKDEpfWAsXHJcbiAgICAgICAgJ3Rvb2x0aXBEZXNjJzogYnVpbGRpbmdzW2J1aWxkaW5nS2V5XS50b29sdGlwRGVzYyB8fCBcIkEgbXlzdGVyaW91cyBidWlsZGluZyB3aXRoIHVudG9sZCBiZW5lZml0cy5cIixcclxuICAgICAgICAndG9vbHRpcENvc3QnOiBjb3N0cyxcclxuICAgICAgICAncmVxdWlyZW1lbnQnOiAoKSA9PiByZXF1aXJlbWVudEZ1bmN0aW9uKCksXHJcbiAgICAgICAgJ2RhdGFfYnVpbGRpbmcnOiBidWlsZGluZ0tleSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGJ1dHRvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbihjb3N0cywgYnVpbGRpbmdLZXkpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29zdENvbmRpdGlvbiA9IE9iamVjdC5lbnRyaWVzKGNvc3RzKVxyXG4gICAgICAgICAgICAuZXZlcnkoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzRW5vdWdoUmVzb3VyY2UgPSBnZXRNYXRlcmlhbChtYXRlcmlhbCkgPj0gTWF0aC5mbG9vcihhbW91bnQgLyAyKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBDaGVja2luZyAke21hdGVyaWFsfTogTmVlZCAke01hdGguZmxvb3IoYW1vdW50IC8gMil9LCBIYXZlICR7Z2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcyl9LCBSZXN1bHQ6ICR7aGFzRW5vdWdoUmVzb3VyY2V9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzRW5vdWdoUmVzb3VyY2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBQYXNzZWRTdGFnZSBmb3IgJHtidWlsZGluZ0tleX06ICR7cGFzc2VkU3RhZ2UoJ2Nsb25lcycpfWApO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBDb3N0IGNvbmRpdGlvbiBmb3IgJHtidWlsZGluZ0tleX06ICR7Y29zdENvbmRpdGlvbn1gKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhc3NlZFN0YWdlKCdjbG9uZXMnKSAmJiBjb3N0Q29uZGl0aW9uO1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIGNvbnNvbGUubG9nKGJ1dHRvbnMpO1xyXG5cclxuZnVuY3Rpb24gZ2V0QnVpbGRpbmdDb3N0KGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgcmV0dXJuIGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdLmNvc3Q7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBidXlCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiQnV5aW5nIGJ1aWxkaW5nIFwiICsgYnVpbGRpbmdOYW1lKTtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG5cclxuXHJcbiAgICBpZiAoIWNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkpIHJldHVybjtcclxuICAgIC8vIEFjdHVhbGx5IGJ1aWxkIHRoZSBidWlsZGluZ1xyXG4gICAgYnVpbGRpbmcuY291bnQrKztcclxuXHJcbiAgICAvLyBTdWJ0cmFjdCB0aGUgY29zdFxyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJSZWR1Y2luZyBcIiwgcmVzb3VyY2UsIFwiYnlcIiwgYnVpbGRpbmcuY29zdFtyZXNvdXJjZV0pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGluY3JlYXNlTWF0ZXJpYWwpO1xyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1idWlsZGluZy5jb3N0W3Jlc291cmNlXSk7XHJcbiAgICB9XHJcbiAgICAvLyBBZGQgdGhlIGVmZmVjdHNcclxuICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmVmZmVjdHMpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2JvdWdodCBidWlsZGluZyBlZmZlY3RzJywgcmVzb3VyY2UsIGFtb3VudCk7XHJcbiAgICAgICAgaW5jcmVhc2VNYXgocmVzb3VyY2UsIGFtb3VudCk7XHJcbiAgICAgICAgLy8gVXBkYXRlIG1heCBjbG9uZXMgYWZ0ZXIgdXBkYXRpbmcgdGhlIGNvdW50XHJcbiAgICAgICAgaWYgKHJlc291cmNlID09PSAnY2xvbmVzJykge1xyXG4gICAgICAgICAgICByZWNhbGNNYXhDbG9uZXMoKTtcclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFVwZGF0ZSBidXR0b24gdGV4dFxyXG4gICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChidWlsZGluZ05hbWUsIGJ1aWxkaW5nLmNvdW50KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGNvc3Qgb2YgdGhlIGJ1aWxkaW5nXHJcbiAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChidWlsZGluZ05hbWUsIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcblxyXG5cclxuICAgIC8vIGFkZFRvQnVpbGRpbmdMaXN0KGJ1aWxkaW5nTmFtZSwgYnVpbGRpbmcuZW1vamkpO1xyXG4gICAgdXBkYXRlQnVpbGRpbmdMaXN0KCk7XHJcbn1cclxuZnVuY3Rpb24gYnV5TWF4QnVpbGRpbmdzKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcbiAgICAvLyBUT0RPIHVwZGF0ZSB3aXRoIGNvb2wgZm9ybXVsYVxyXG4gICAgLy8gTWF0aC5mbG9vcihNYXRoLmxvZygoY3VycmVuY3kgKiAoYnVpbGRpbmcucmF0aW8gLSAxKSkgLyAoYnVpbGRpbmcuYmFzZWNvc3QgKiBNYXRoLnBvdyhidWlsZGluZy5yYXRpbywgYnVpbGRpbmcuY291bnQpKSkgLyBNYXRoLmxvZyhidWlsZGluZy5yYXRpbykpO1xyXG4gICAgd2hpbGUgKGNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkpIHtcclxuICAgICAgICBidXlCdWlsZGluZyhidWlsZGluZ05hbWUpO1xyXG4gICAgICAgICsraTtcclxuICAgIH1cclxuICAgIHJldHVybiBpO1xyXG59XHJcblxyXG4vLyBmdW5jdGlvbiBkb3VibGVTdG9yYWdlRWZmZWN0c0lmUGFzc2VkKCkge1xyXG4vLyAgICAgaWYgKHBhc3NlZFN0YWdlKFwiZG91YmxlU3RvcmFnZTFcIikpIHtcclxuLy8gICAgICAgICBmb3IgKGxldCBidWlsZGluZ0tleSBpbiBidWlsZGluZ3MpIHtcclxuLy8gICAgICAgICAgICAgbGV0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuXHJcbi8vICAgICAgICAgICAgIGlmIChidWlsZGluZy5lZmZlY3RzKSB7XHJcbi8vICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBidWlsZGluZy5lZmZlY3RzKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmcuZWZmZWN0c1ttYXRlcmlhbF0ubWF4ICo9IDI7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdCxcclxuICAgIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uLFxyXG4gICAgYnV5TWF4QnVpbGRpbmdzLFxyXG4gICAgYnV5QnVpbGRpbmcsXHJcbiAgICBnZW5lcmF0ZUVmZmVjdFN0cmluZyxcclxuICAgIHVwZGF0ZUJ1aWxkaW5nTGlzdFxyXG59OyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKFwiLi9qc29uL3Jlc291cmNlc1wiKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyBnZXRXb3JrZXJzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZSgnLi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRGYWN0b3J5UHJvZHVjdGlvbiB9ID0gcmVxdWlyZShcIi4vZmFjdG9yeVwiKTtcclxuY29uc3QgeyBoYXNQcmVzdGlnZSwgZ2V0TGV2ZWxPZlByZXN0aWdlIH0gPSByZXF1aXJlKFwiLi9qc29uL3ByZXN0aWdlXCIpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKFwiLi9nZXRNYXRlcmlhbFwiKTtcclxuY29uc3QgeyBoYXNUb29sIH0gPSByZXF1aXJlKFwiLi90b29sc1wiKTtcclxuXHJcbi8vIENsb25lcyB3b3JrIGF0IDEvNCB0aGUgc3BlZWQgYnkgZGVmYXVsdFxyXG52YXIgY2xvbmVNdWx0ID0gMC4yNTtcclxuXHJcbi8vIFBlcmtzXHJcblxyXG5jb25zdCBwZXJrQm9vc3RzID0ge1xyXG4gICAgJ0x1bWJlcmphY2snOiBbJ3dvb2QnLCAnc3RpY2tzJ10sXHJcbiAgICAnTWluZXInOiBbJ3JvY2tzJywgJ29yZSddLFxyXG4gICAgJ0JvdGFuaXN0JzogWyd2aW5lcycsICdoZXJicycsICd3aGVhdCddLFxyXG4gICAgLy8gQWRkIG90aGVyIHBlcmtzIGFzIG5lZWRlZFxyXG59O1xyXG5cclxuXHJcbmZ1bmN0aW9uIGFwcGx5UGVya0Jvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpIHtcclxuICAgIGZvciAoY29uc3QgW3BlcmssIHJlc291cmNlc10gb2YgT2JqZWN0LmVudHJpZXMocGVya0Jvb3N0cykpIHtcclxuICAgICAgICBpZiAocmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlTmFtZSkgJiYgaGFzUGVyayhwZXJrKSkge1xyXG4gICAgICAgICAgICB0b3RhbCAqPSAxLjc1OyAvLyA3NSUgYm9udXMgdG8gc3BlY2lmaWNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIFNraWxsc1xyXG5cclxuY29uc3Qgc2tpbGxCb29zdHMgPSB7XHJcbiAgICAnZ2F0aGVyaW5nJzogWydnYXRoZXJpbmdCb29zdCddLFxyXG4gICAgJ21hc29ucnknOiBbJ21hc29ucnlCb29zdCddLFxyXG4gICAgJ2NhcnBlbnRyeSc6IFsnY2FycGVudHJ5Qm9vc3QnXSxcclxuICAgICd0aGlua2luZyc6IFsndGhpbmtpbmdCb29zdCddLFxyXG4gICAgJ2Zhcm1pbmcnOiBbJ2Zhcm1pbmdCb29zdCddLFxyXG4gICAgJ2Zpc2hpbmcnOiBbJ2Zpc2hpbmdCb29zdCddLFxyXG4gICAgJ2h1bnRpbmcnOiBbJ2h1bnRpbmdCb29zdCddLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gYXBwbHlTa2lsbEJvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpIHtcclxuICAgIGZvciAoY29uc3QgW3NraWxsLCBib29zdHNdIG9mIE9iamVjdC5lbnRyaWVzKHNraWxsQm9vc3RzKSkge1xyXG4gICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAgICAgYm9vc3RzLmZvckVhY2goYm9vc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc1ByZXN0aWdlKGJvb3N0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICo9IDEuMSAqIGdldExldmVsT2ZQcmVzdGlnZShib29zdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZXQgc2tpbGxSYXRpbyA9IDEuMDY7XHJcbiAgICAgICAgICAgIGxldCBtdWx0ID0gMSArIChNYXRoLnBvdyhza2lsbFJhdGlvLCBza2lsbHNbc2tpbGxdLmxldmVsKSAtIDEpIC8gMTAwO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBtdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0b3RhbDtcclxufVxyXG5cclxuLy8gVG9vbHNcclxuXHJcbmNvbnN0IHJlc291cmNlVG9vbE1hcCA9IHtcclxuICAgICd3b29kJzogJ2F4ZScsXHJcbiAgICAnb3JlJzogJ3BpY2theGUnLFxyXG4gICAgJ2Zpc2gnOiAnZmlzaGluZ3JvZCcsXHJcbiAgICAnZ2FtZSc6ICdzcGVhcicsXHJcbiAgICAncG9uZGVyJzogJ3BhcGVyJyxcclxuICAgICdzdGlja3MnOiAnc3RhZmYnLFxyXG4gICAgLy8gQWRkIG1vcmUgbWFwcGluZ3MgYXMgbmVlZGVkXHJcbn07XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvb2xCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKSB7XHJcbiAgICBjb25zdCB0b29sTmFtZSA9IHJlc291cmNlVG9vbE1hcFtyZXNvdXJjZU5hbWVdO1xyXG4gICAgaWYgKHRvb2xOYW1lICYmIGdldE1hdGVyaWFsKHRvb2xOYW1lKSA+IDEwKSB7XHJcbiAgICAgICAgdG90YWwgKj0gMSArIE1hdGgubG9nMTAoZ2V0TWF0ZXJpYWwodG9vbE5hbWUpIC8gMTApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlIHRoZSBhbW91bnQgYSByZXNvdXJjZSBzaG91bGQgaW5jcmVhc2UgYnkgaW4gYSBnaXZlbiB0aW1lIHBlcmlvZFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VOYW1lIFRoZSByZXNvdXJjZSB0byBjYWxjdWxhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhX3RpbWUgSG93IG11Y2ggdGltZSBoYXMgZWxhcHNlZFxyXG4gKiBAcmV0dXJucyBUaGUgYW1vdW50IHRoYXQgcmVzb3VyY2Ugc2hvdWxkIGluY3JlYXNlIGJ5XHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjSW5jcmVhc2UocmVzb3VyY2VOYW1lLCBkZWx0YV90aW1lKSB7XHJcbiAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgY29uc3QgYnVpbGRpbmdzID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIikuYnVpbGRpbmdzO1xyXG4gICAgLy8gY2xvbmVzIGluY3JlYXNlIGJ5IDEgcGVyIHNlY29uZCBhcyBsb25nIGFzIHRoZXJlJ3Mgc3BhY2VcclxuICAgIC8vIGlmIChyZXNvdXJjZSA9PT0gJ2Nsb25lcycgJiYgcGFzc2VkU3RhZ2UoJ2Nsb25lJykpIHtcclxuICAgIC8vICAgICB0b3RhbCA9IDE7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRvdGFsO1xyXG4gICAgLy8gfVxyXG4gICAgaWYgKCFyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgb3VyIGZhY3Rvcmllc1xyXG4gICAgICAgICAgICB0b3RhbCA9IGdldEZhY3RvcnlQcm9kdWN0aW9uKHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgICAgIGlmICh0b3RhbCA+IDApIHJldHVybiB0b3RhbDsgLy8gRG9uJ3QgYXBwbHkgc2tpbGxzIHRvIGZhY3Rvcmllc1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiB0b3RhbDsgLy8gaWYgbm90IGEgcmVzb3VyY2Ugb3IgYSBjcmFmdGVkIHJlc291cmNlLCByZXR1cm4gMFxyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdjbG9uZXMnICYmIGlzUG9uZGVyZWQoJ2F1dG9DbG9uZScpKSB0b3RhbCA9IDE7XHJcblxyXG4gICAgLy8gR2F0aGVyaW5nIHBlcnNvbmFsbHlcclxuICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSAmJiByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS5pc0dldHRpbmcpIHtcclxuICAgICAgICB0b3RhbCArPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGpvYnNcclxuICAgIGxldCBsZWFkZXJNdWx0ID0gaGFzUGVyaygnTGVhZGVyJykgPyBjbG9uZU11bHQgKiAxLjUgOiBjbG9uZU11bHQ7XHJcbiAgICB0b3RhbCArPSBsZWFkZXJNdWx0ICogZ2V0V29ya2VycyhyZXNvdXJjZU5hbWUpIHx8IDA7XHJcblxyXG5cclxuICAgIC8vIEFwcGx5IHBlcmtzIHByb2R1Y3Rpb24gYm9vc3RcclxuICAgIHRvdGFsID0gYXBwbHlQZXJrQm9vc3QodG90YWwsIHJlc291cmNlTmFtZSk7XHJcbiAgICAvLyBBcHBseSBza2lsbHMgdG8gYWxsIGNsb25lc1xyXG4gICAgdG90YWwgPSBhcHBseVNraWxsQm9vc3QodG90YWwsIHJlc291cmNlTmFtZSk7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coZ2V0Qm9vc3QoJ2NhbXBmaScpKVxyXG4gICAgLy8gQWxsIGJ1aWxkaW5ncyBhZnRlciBsZXZlbFxyXG4gICAgZm9yIChjb25zdCBidWlsZGluZyBvZiBPYmplY3Qua2V5cyhidWlsZGluZ3MpKSB7XHJcbiAgICAgICAgY29uc3QgYm9vc3REYXRhID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIikuZ2V0Qm9vc3QoYnVpbGRpbmcsIHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgaWYgKGJvb3N0RGF0YSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGluY3JlYXNlID0gTWF0aC5wb3coYm9vc3REYXRhLCBidWlsZGluZ3NbYnVpbGRpbmddLmNvdW50KTtcclxuICAgICAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ2VmZmVjdGl2ZUJ1aWxkaW5ncycpKSBpbmNyZWFzZSAqPSAxLjAzO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBpbmNyZWFzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocmVzb3VyY2VOYW1lID09PSAncG9uZGVyJykge1xyXG4gICAgICAgIGlmIChpc1BvbmRlcmVkKCdwb25kZXIxJykpIHRvdGFsICo9IDEuMDU7XHJcbiAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ3BvbmRlcjInKSkgdG90YWwgKj0gMS4wNTtcclxuICAgICAgICBpZiAoaXNQb25kZXJlZCgncG9uZGVyMycpKSB0b3RhbCAqPSAxLjA1O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1BvbmRlcmVkKCdmYXN0ZXJSZXNvdXJjZUdhaW4nKSkgdG90YWwgKj0gMS4wNTtcclxuICAgIGlmIChoYXNQcmVzdGlnZSgnY2xvbmVCb29zdCcpKSB0b3RhbCAqPSAxLjA1ICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdjbG9uZUJvb3N0Jyk7XHJcblxyXG4gICAgLy8gQ2hlY2sgdG9vbHNcclxuICAgIHRvdGFsID0gYXBwbHlUb29sQm9vc3QodG90YWwsIHJlc291cmNlTmFtZSk7XHJcblxyXG4gICAgLy8gTmVlZCBhdCBsZWFzdCAxMCBodXNrcyB0byBib29zdCBtYXRoZW1hdGljYWxseSAobG4oMSkgPSAwKVxyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdodXNrcycpID4gMTApIHRvdGFsICo9IDEgKyBNYXRoLmxvZyhnZXRNYXRlcmlhbCgnaHVza3MnKSAvIDEwKTtcclxuICAgIC8vIENvbnZlcnQgZnJvbSBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoKHRvdGFsICogZGVsdGFfdGltZSAvIDEwMDApLnRvRml4ZWQoMykpO1xyXG59XHJcbmV4cG9ydHMuY2FsY0luY3JlYXNlID0gY2FsY0luY3JlYXNlOyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdOYW1lXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBjYW5CdXlCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIHJlc291cmNlc1xyXG4gICAgbGV0IGNhbkJ1eSA9IHRydWU7XHJcbiAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJykuYnVpbGRpbmdzO1xyXG4gICAgY29uc3QgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHJlc291cmNlIGluIGJ1aWxkaW5nLmNvc3QpIHtcclxuICAgICAgICBpZiAoYnVpbGRpbmcuY29zdFtyZXNvdXJjZV0gPiBnZXRNYXRlcmlhbChyZXNvdXJjZSwgcmVzb3VyY2VzKSkge1xyXG4gICAgICAgICAgICBjYW5CdXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbid0IGJ1eSBjbG9uaW5nIGJ1aWxkaW5ncyBiZWZvcmUgY2xvbmVzIHVubG9ja2VkXHJcbiAgICBpZiAoYnVpbGRpbmcuZWZmZWN0cyAmJiBidWlsZGluZy5lZmZlY3RzWydjbG9uZXMnXSAmJiAhcGFzc2VkU3RhZ2UoJ2Nsb25lJykpIGNhbkJ1eSA9IGZhbHNlO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdjYW4gd2UgYnV5ICcsYnVpbGRpbmdOYW1lLGNhbkJ1eSk7XHJcbiAgICByZXR1cm4gY2FuQnV5O1xyXG59XHJcbmV4cG9ydHMuY2FuQnV5QnVpbGRpbmcgPSBjYW5CdXlCdWlsZGluZzsiLCJjb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vY3JhZnRlZFJlc291cmNlc1wiKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuZnVuY3Rpb24gY2FuQ3JhZnQocmVzb3VyY2VLZXkpIHtcclxuICAgIGxldCBjYW5DcmFmdCA9IHRydWU7XHJcbiAgICBsZXQgcmVxdWlyZW1lbnRzID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY29zdDtcclxuXHJcbiAgICAvLyBDaGVjayBpZiBhbGwgcmVxdWlyZW1lbnRzIGFyZSBtZXRcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VLZXksIHJlcXVpcmVtZW50cyk7XHJcbiAgICAgICAgZm9yIChsZXQgbWF0IGluIHJlcXVpcmVtZW50cykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdCwgcmVzb3VyY2VzKSA8IHJlcXVpcmVtZW50c1ttYXRdKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5DcmFmdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGluIGNhbGN1bGF0aW5nIHJlcXVpcmVtZW50czogJywgcmVzb3VyY2VLZXksIHJlcXVpcmVtZW50cywgZXJyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2FuQ3JhZnQ7XHJcbn1cclxuZXhwb3J0cy5jYW5DcmFmdCA9IGNhbkNyYWZ0OyIsIi8qKlxyXG4gKiBDYXBpdGFsaXplcyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nRXhhbXBsZVxyXG4gKiBAcmV0dXJucyBTdHJpbmdFeGFtcGxlXHJcbiAqL1xyXG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3Qoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xyXG59XHJcbmV4cG9ydHMuY2FwaXRhbGl6ZUZpcnN0ID0gY2FwaXRhbGl6ZUZpcnN0OyIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGluY3JlYXNlTWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL3Jlc291cmNlc1wiKTtcclxuXHJcblxyXG5jb25zdCBsb290VGFibGUgPSB7XHJcbiAgICBodXNrczogeyBwcm9iYWJpbGl0eTogMC4wNSwgcXVhbnRpdHk6IDEgfSxcclxuXHJcbiAgICBuYWlsczogeyBwcm9iYWJpbGl0eTogMC4xMCwgcXVhbnRpdHk6IDUwIH0sXHJcbiAgICBzbGFiczogeyBwcm9iYWJpbGl0eTogMC4yMCwgcXVhbnRpdHk6IDUwIH0sXHJcbiAgICBiZWFtczogeyBwcm9iYWJpbGl0eTogMC4xMCwgcXVhbnRpdHk6IDYwIH0sXHJcblxyXG4gICAgYXhlOiB7IHByb2JhYmlsaXR5OiAwLjE1LCBxdWFudGl0eTogNSB9LFxyXG4gICAgc3BlYXI6IHsgcHJvYmFiaWxpdHk6IDEsIHF1YW50aXR5OiA1IH0sXHJcblxyXG4gICAgZ29sZDogeyBwcm9iYWJpbGl0eTogLjEsIHF1YW50aXR5OiAxMCB9LFxyXG4gICAgaXJvbjogeyBwcm9iYWJpbGl0eTogMC4xNSwgcXVhbnRpdHk6IDUwIH0sXHJcbiAgICBzaWx2ZXI6IHsgcHJvYmFiaWxpdHk6IDAuMDUsIHF1YW50aXR5OiAyMCB9LFxyXG4gICAgc3RlZWw6IHsgcHJvYmFiaWxpdHk6IDAuMTAsIHF1YW50aXR5OiAzMCB9LFxyXG5cclxuICAgIGJyaWNrczogeyBwcm9iYWJpbGl0eTogMC4xNSwgcXVhbnRpdHk6IDgwIH0sXHJcblxyXG59O1xyXG5cclxubGV0IGN1cnJMb290ID0ge307XHJcblxyXG5mdW5jdGlvbiBnZXRDdXJyTG9vdCgpIHtcclxuICAgIHJldHVybiBjdXJyTG9vdDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVMb290KCkge1xyXG4gICAgbGV0IGxvb3QgPSB7fTtcclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gbG9vdFRhYmxlKSB7XHJcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCBsb290VGFibGVbcmVzb3VyY2VdLnByb2JhYmlsaXR5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1YW50aXR5ID0gTWF0aC5mbG9vcihsb290VGFibGVbcmVzb3VyY2VdLnF1YW50aXR5ICogKE1hdGgucmFuZG9tKCkgKiAuNCArIC44KSk7IC8vIEdldCBsb290IDgwJSAtIDEyMCVcclxuICAgICAgICAgICAgaWYgKHF1YW50aXR5ID4gMCkgbG9vdFtyZXNvdXJjZV0gPSBxdWFudGl0eTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjdXJyTG9vdCA9IGxvb3Q7XHJcbiAgICBjb25zb2xlLmxvZyhjdXJyTG9vdCk7XHJcbiAgICByZXR1cm4gbG9vdDtcclxufVxyXG5cclxuXHJcblxyXG4vLyBzY3JpcHQuanNcclxuY29uc3QgYXJlbmEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXJlbmEnKTtcclxuZnVuY3Rpb24gY3JlYXRlQmFsbHModGVhbSwgY291bnQpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGJhbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBiYWxsLmNsYXNzTmFtZSA9IGBiYWxsICR7dGVhbX1gO1xyXG4gICAgICAgIGJhbGwuc3R5bGUubGVmdCA9IGAke3RlYW0gPT09ICdwbGF5ZXInID8gMTAgOiA5MH0lYDsgLy8gU3RhcnRpbmcgcG9zaXRpb25zXHJcbiAgICAgICAgYmFsbC5zdHlsZS50b3AgPSBgJHsxMCArIGkgKiAzMH1weGA7XHJcbiAgICAgICAgYXJlbmEuYXBwZW5kQ2hpbGQoYmFsbCk7XHJcbiAgICAgICAgaWYgKHRlYW0gPT09ICdwbGF5ZXInKSBwbGF5ZXJUcm9vcHMucHVzaChiYWxsKTtcclxuICAgICAgICBlbHNlIGVuZW15VHJvb3BzLnB1c2goYmFsbCk7XHJcbiAgICB9XHJcbn1cclxubGV0IHBsYXllclRyb29wcyA9IFtdO1xyXG5sZXQgZW5lbXlUcm9vcHMgPSBbXTtcclxubGV0IGFuaW1hdGlvbnMgPSBbXTtcclxuZnVuY3Rpb24gc3RhcnRBbmltYXRpb24oKSB7XHJcblxyXG4gICAgY29uc3QgYmFsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmFsbCcpO1xyXG4gICAgY29uc3QgYW5pbVRpbWUgPSAzMDAwO1xyXG4gICAgYmFsbHMuZm9yRWFjaChiYWxsID0+IHtcclxuICAgICAgICBjb25zdCBpc3BsYXllclRlYW0gPSBiYWxsLmNsYXNzTGlzdC5jb250YWlucygncGxheWVyJyk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0WCA9IGlzcGxheWVyVGVhbSA/IGFyZW5hLm9mZnNldFdpZHRoIDogLWFyZW5hLm9mZnNldFdpZHRoOyAvLyBUYXJnZXQgcG9zaXRpb25zXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYmFsbCwgdGFyZ2V0WCk7XHJcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGJhbGwuYW5pbWF0ZShbXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgke3RhcmdldFh9cHgpYCB9XHJcbiAgICAgICAgXSwge1xyXG4gICAgICAgICAgICBkdXJhdGlvbjogYW5pbVRpbWUsXHJcbiAgICAgICAgICAgIGZpbGw6ICdub25lJ1xyXG4gICAgICAgIH0pLmZpbmlzaGVkLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBiYWxsLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH0pO1xyXG4gICAgdXBkYXRlKCk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyQmFsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxheWVyJykubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGVuZW15QmFsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZW5lbXknKS5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmIChwbGF5ZXJCYWxscyA9PT0gMCB8fCBlbmVteUJhbGxzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgYmFsbCBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmFsbCcpKSB7XHJcbiAgICAgICAgICAgIGJhbGwucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5lZWQgdG8gYmF0dGxlIGFnYWluXHJcbiAgICAgICAgY3JlYXRlQmFsbHMoJ3BsYXllcicsIHBsYXllckJhbGxzKTtcclxuICAgICAgICBjcmVhdGVCYWxscygnZW5lbXknLCBlbmVteUJhbGxzKTtcclxuICAgICAgICBzdGFydEFuaW1hdGlvbigpO1xyXG5cclxuICAgIH0sIGFuaW1UaW1lIC0gMTAwKTsgLy8gTmVlZCB0byBleGVjdXRlIGJlZm9yZSB0aGUgYmFsbHMgYXJlIGRlbGV0ZWRcclxufVxyXG5cclxubGV0IGhhc1Jld2FyZGVkID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGNoZWNrRm9yV2luKCkge1xyXG4gICAgaWYgKGhhc1Jld2FyZGVkKSByZXR1cm47XHJcbiAgICBjb25zdCBwbGF5ZXJCYWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGF5ZXInKS5sZW5ndGg7XHJcbiAgICBjb25zdCBlbmVteUJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVuZW15JykubGVuZ3RoO1xyXG4gICAgaWYgKHBsYXllckJhbGxzID09PSAwIHx8IGVuZW15QmFsbHMgPT09IDApIHtcclxuICAgICAgICBjb25zdCBjb21iYXRSZXN1bHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tYmF0UmVzdWx0Jyk7XHJcbiAgICAgICAgY29tYmF0UmVzdWx0LnRleHRDb250ZW50ID0gKGAke3BsYXllckJhbGxzID09PSAwID8gJ1RoZSBFbmVteScgOiAnWW91J30gd29uIWApO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmaWdodEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBSZXdhcmQgdGhlIHBsYXllciB0aGVpciBsb290XHJcbiAgICAgICAgaWYgKHBsYXllckJhbGxzID4gMCkge1xyXG4gICAgICAgICAgICBoYXNSZXdhcmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBzdGFuY2VNdWx0ID0gMTtcclxuICAgICAgICAgICAgaWYgKGdldFN0YW5jZSgpID09PSAnYWdncmVzc2l2ZScpIHN0YW5jZU11bHQgPSAuNzU7XHJcbiAgICAgICAgICAgIGlmIChnZXRTdGFuY2UoKSA9PT0gJ2NhcmVmdWwnKSBzdGFuY2VNdWx0ID0gMS4yNTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2xvb3ROYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY3Vyckxvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKGxvb3ROYW1lLCB2YWx1ZSAqIHN0YW5jZU11bHQpO1xyXG4gICAgICAgICAgICAgICAgY29tYmF0UmVzdWx0LmlubmVySFRNTCArPSBgPGJyPiske3ZhbHVlICogc3RhbmNlTXVsdH0gJHtsb290TmFtZX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdlbmVyYXRlTG9vdCgpO1xyXG4gICAgICAgICAgICByZWZyZXNoVmFsdWVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG5cclxufVxyXG5mdW5jdGlvbiBkZXRlY3RDb2xsaXNpb25zKHBsYXllciwgZW5lbXkpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxheWVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbmVteS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoaXNDb2xsaWRpbmcocGxheWVyVHJvb3BzW2ldLCBlbmVteVRyb29wc1tqXSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY29sbGlzaW9uXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVDb2xsaXNpb24ocGxheWVyVHJvb3BzW2ldLCBlbmVteVRyb29wc1tqXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQ29sbGlkaW5nKGJhbGwxLCBiYWxsMikge1xyXG4gICAgY29uc3QgcmVjdDEgPSBiYWxsMS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IHJlY3QyID0gYmFsbDIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgcmV0dXJuICEoXHJcbiAgICAgICAgcmVjdDEucmlnaHQgPCByZWN0Mi5sZWZ0IHx8XHJcbiAgICAgICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0IHx8XHJcbiAgICAgICAgcmVjdDEuYm90dG9tIDwgcmVjdDIudG9wIHx8XHJcbiAgICAgICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tXHJcbiAgICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDb2xsaXNpb24ocGxheWVyQmFsbCwgZW5lbXlCYWxsKSB7XHJcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA8IC41KSBlbmVteUJhbGwucmVtb3ZlKCk7XHJcbiAgICBlbHNlIHBsYXllckJhbGwucmVtb3ZlKCk7XHJcblxyXG59XHJcblxyXG4vLyBDYWxsIHRoaXMgZnVuY3Rpb24gY29udGludW91c2x5LCBlLmcuLCB1c2luZyByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuZnVuY3Rpb24gdXBkYXRlKCkge1xyXG4gICAgZGV0ZWN0Q29sbGlzaW9ucyhwbGF5ZXJUcm9vcHMsIGVuZW15VHJvb3BzKTtcclxuICAgIGlmICghY2hlY2tGb3JXaW4oKSAmJiAhaGFzUmV3YXJkZWQpIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjUm91bmRpbmcoKSB7XHJcbiAgICBjb25zdCBwbGF5ZXJNaWdodCA9IGNhbGN1bGF0ZVBsYXllck1pZ2h0KCk7XHJcbiAgICBjb25zdCBlbmVteU1pZ2h0ID0gY2FsY3VsYXRlRW5lbXlNaWdodCgpO1xyXG5cclxuICAgIGNvbnN0IGJhbGxDb3VudCA9IDEyO1xyXG4gICAgY29uc3QgcGxheWVyUm91bmRpbmcgPSBNYXRoLmNlaWwocGxheWVyTWlnaHQgLyBiYWxsQ291bnQpO1xyXG4gICAgY29uc3QgZW5lbXlSb3VuZGluZyA9IE1hdGguY2VpbChlbmVteU1pZ2h0IC8gYmFsbENvdW50KTtcclxuXHJcbiAgICBjb25zdCBoaWdoZXJSb3VuZGluZyA9IE1hdGgubWF4KHBsYXllclJvdW5kaW5nLCBlbmVteVJvdW5kaW5nKTtcclxuICAgIGNvbnN0IHBsYXllckNvdW50ID0gTWF0aC5mbG9vcihwbGF5ZXJNaWdodCAvIGhpZ2hlclJvdW5kaW5nKTtcclxuICAgIGNvbnN0IGVuZW15Q291bnQgPSBNYXRoLmZsb29yKGVuZW15TWlnaHQgLyBoaWdoZXJSb3VuZGluZyk7XHJcblxyXG4gICAgY29uc3QgYXBwcm94RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHByb3hpbWF0ZUJhbGwnKTtcclxuICAgIGFwcHJveEVsZW1lbnQudGV4dENvbnRlbnQgPSBoaWdoZXJSb3VuZGluZy50b1N0cmluZygpO1xyXG5cclxuICAgIHJldHVybiBbcGxheWVyQ291bnQsIGVuZW15Q291bnRdO1xyXG59XHJcblxyXG5jb25zdCBmaWdodEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbiNzdGFydENvbWJhdCcpO1xyXG4vKipcclxuICogTWFpbiBjb21iYXQgZnVuY3Rpb24sIHN0YXJ0IGV2ZXJ5dGhpbmdcclxuICovXHJcbmZ1bmN0aW9uIGNvbWJhdCgpIHtcclxuICAgIC8vIFJlbW92ZSBhbGwgYmFsbHNcclxuICAgIGZvciAoY29uc3QgYmFsbCBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmFsbCcpKSB7XHJcbiAgICAgICAgYmFsbC5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBmb3IgKGNvbnN0IFtpLCBhbmltYXRpb25dIG9mIE9iamVjdC5lbnRyaWVzKGFuaW1hdGlvbnMpKSB7XHJcbiAgICAvLyAgICAgYW5pbWF0aW9uLnBhdXNlKCk7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBSb3VuZCBkb3duIHRoZSBiYWxscyB0byAxMlxyXG4gICAgbGV0IFtwbGF5ZXJDb3VudCwgZW5lbXlDb3VudF0gPSBjYWxjUm91bmRpbmcoKTtcclxuXHJcbiAgICBjcmVhdGVCYWxscygncGxheWVyJywgcGxheWVyQ291bnQpO1xyXG4gICAgY3JlYXRlQmFsbHMoJ2VuZW15JywgZW5lbXlDb3VudCk7XHJcblxyXG4gICAgY29uc3QgY29tYmF0UmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbWJhdFJlc3VsdCcpO1xyXG4gICAgY29tYmF0UmVzdWx0LnRleHRDb250ZW50ID0gJyc7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZmlnaHRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgaGFzUmV3YXJkZWQgPSBmYWxzZTtcclxuICAgIHN0YXJ0QW5pbWF0aW9uKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVBsYXllck1pZ2h0KCkge1xyXG4gICAgbGV0IG1pZ2h0ID0gZ2V0TWF0ZXJpYWwoJ3Zpb2xlbmNlJykgKyBnZXRNYXRlcmlhbCgnc3BlYXInKTtcclxuICAgIGlmIChnZXRTdGFuY2UoKSA9PT0gJ2FnZ3Jlc3NpdmUnKSBtaWdodCAqPSAxLjI7XHJcbiAgICBlbHNlIGlmIChnZXRTdGFuY2UoKSA9PT0gJ2NhcmVmdWwnKSBtaWdodCAqPSAwLjg7XHJcbiAgICByZXR1cm4gbWlnaHQ7XHJcbn1cclxuZnVuY3Rpb24gY2FsY3VsYXRlRW5lbXlNaWdodCgpIHtcclxuICAgIHJldHVybiA0MDA7XHJcbn1cclxuZnVuY3Rpb24gY2FsY3VsYXRlV2luQ2hhbmNlKCkge1xyXG5cclxuICAgIGNvbnN0IGNoYW5jZVNwcmVhZCA9IDIwMDsgLy8gTGFyZ2VyIG1lYW5zIHNtYWxsZXIgYXJtaWVzIGhhdmUgaGlnaGVyIGNoYW5jZSB0byBiZWF0IGxhcmdlciBhcm1pZXNcclxuICAgIGNvbnN0IHBsYXllck1pZ2h0ID0gY2FsY3VsYXRlUGxheWVyTWlnaHQoKTtcclxuICAgIGNvbnN0IGVuZW15TWlnaHQgPSBjYWxjdWxhdGVFbmVteU1pZ2h0KCk7XHJcbiAgICBjb25zdCBjaGFuY2UgPSAxIC8gKDEgKyBNYXRoLnBvdygxMCwgKGVuZW15TWlnaHQgLSBwbGF5ZXJNaWdodCkgLyBjaGFuY2VTcHJlYWQpKTtcclxuXHJcbiAgICBjb25zdCBwbGF5ZXJNaWdodEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheWVyTWlnaHQnKTtcclxuICAgIHBsYXllck1pZ2h0RWxlbWVudC50ZXh0Q29udGVudCA9IHBsYXllck1pZ2h0LnRvRml4ZWQoMCk7XHJcbiAgICBwbGF5ZXJNaWdodEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0b29sdGlwZGVzYycsIGAke2dldE1hdGVyaWFsKCd2aW9sZW5jZScpLnRvRml4ZWQoMCl9IHZpb2xlbmNlICsgJHtnZXRNYXRlcmlhbCgnc3BlYXInKS50b0ZpeGVkKDApfSBzcGVhcnNgKTtcclxuXHJcbiAgICBjb25zdCBlbmVteU1pZ2h0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmVteU1pZ2h0Jyk7XHJcbiAgICBlbmVteU1pZ2h0RWxlbWVudC50ZXh0Q29udGVudCA9IGVuZW15TWlnaHQudG9GaXhlZCgwKTtcclxuXHJcbiAgICBjb25zdCBjaGFuY2VFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYW5jZVRvV2luJyk7XHJcbiAgICBjaGFuY2VFbGVtZW50LnRleHRDb250ZW50ID0gKGNoYW5jZSAqIDEwMCkudG9GaXhlZCgxKSArICclJztcclxuXHJcbiAgICBjaGFuY2VFbGVtZW50LnN0eWxlLmNvbG9yID0gKGBoc2woJHsoY2hhbmNlICogMTIwKS50b1N0cmluZygxMCl9LDEwMCUsNTAlKWApO1xyXG5cclxuICAgIHJldHVybiBjaGFuY2U7XHJcbn1cclxuXHJcbmxldCBzdGFuY2UgPSAnYmFsYW5jZWQnO1xyXG5cclxuZnVuY3Rpb24gZ2V0U3RhbmNlKCkge1xyXG4gICAgcmV0dXJuIHN0YW5jZTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0U3RhbmNlKG5ld1N0YW5jZSkge1xyXG4gICAgc3RhbmNlID0gbmV3U3RhbmNlO1xyXG59XHJcblxyXG5jb25zdCBzdGFuY2VCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLnN0YW5jZScpO1xyXG5mdW5jdGlvbiBzd2l0Y2hTdGFuY2UobmV3U3RhbmNlKSB7XHJcbiAgICBjb25zb2xlLmxvZygnc3dpdGNoIHN0YW5jZSB0byAnLCBuZXdTdGFuY2UpO1xyXG4gICAgc3RhbmNlQnV0dG9ucy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICB9KTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke25ld1N0YW5jZX1TdGFuY2VgKS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICBzZXRTdGFuY2UobmV3U3RhbmNlKTtcclxufVxyXG5leHBvcnRzLnN3aXRjaFN0YW5jZSA9IHN3aXRjaFN0YW5jZTtcclxuLy8gQHRzLWlnbm9yZVxyXG53aW5kb3cuc3dpdGNoU3RhbmNlID0gc3dpdGNoU3RhbmNlO1xyXG5cclxuXHJcbmZ1bmN0aW9uIHJlZnJlc2hWYWx1ZXMoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhnZXRDdXJyTG9vdCgpKTtcclxuICAgIGlmIChPYmplY3Qua2V5cyhnZXRDdXJyTG9vdCgpKS5sZW5ndGggPCAxKSBnZW5lcmF0ZUxvb3QoKTtcclxuXHJcbiAgICBjb25zdCBsb290TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb290TGlzdCcpO1xyXG4gICAgbG9vdExpc3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBmb3IgKGNvbnN0IFtyZXNvdXJjZSwgcXVhbnRpdHldIG9mIE9iamVjdC5lbnRyaWVzKGdldEN1cnJMb290KCkpKSB7XHJcbiAgICAgICAgbG9vdExpc3QuaW5uZXJIVE1MICs9IGA8c3Bhbj4ke3Jlc291cmNlfSAoJHtxdWFudGl0eX0pPC9zcGFuPiA8YnI+YDtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjUm91bmRpbmcoKTtcclxufVxyXG5cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuLy8gc2V0dXBHYW1lKDUsIDUpOyAvLyA1IGJhbGxzIGZvciBlYWNoIHRlYW1cclxuZXhwb3J0cy5jb21iYXQgPSBjb21iYXQ7XHJcbmV4cG9ydHMuY2FsY3VsYXRlV2luQ2hhbmNlID0gY2FsY3VsYXRlV2luQ2hhbmNlO1xyXG5leHBvcnRzLnJlZnJlc2hWYWx1ZXMgPSByZWZyZXNoVmFsdWVzOyIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG4vLyBBc3N1bWluZyB0aGVzZSBhcmUgZGVmaW5lZCBnbG9iYWxseVxyXG4vLyB2YXIgbWFudWZhY3R1cmVkTWFwID0ge1xyXG4vLyAgICAgY2xheTogWydicmlja3MnXSxcclxuLy8gICAgIGhlcmJzOiBbJ21lZGljaW5lJ10sXHJcbi8vICAgICBoaWRlczogWydsZWF0aGVyJ10sXHJcbi8vICAgICBpcm9uOiBbJ3N0ZWVsJywgJ25haWxzJ10sXHJcbi8vICAgICBvcmU6IFsnaXJvbicsICdzaWx2ZXInLCAnZ29sZCddLFxyXG4vLyAgICAgc2FuZDogWydnbGFzcycsICdjb25jcmV0ZSddLFxyXG4vLyAgICAgcm9ja3M6IFsnc2xhYnMnXSxcclxuLy8gICAgIHZpbmVzOiBbJ3JvcGUnXSxcclxuLy8gICAgIHdvb2Q6IFsncGFwZXInLCAnYmVhbXMnLCAnY3JhdGVzJ10sXHJcbi8vIH07XHJcblxyXG52YXIgc3dpdGNoZWRNYW51ZmFjdHVyZWRNYXAgPSB7XHJcbiAgICAnYmVhbXMnOiBbJ3dvb2QnXSxcclxuICAgICdicmlja3MnOiBbJ2NsYXknXSxcclxuICAgICdjb25jcmV0ZSc6IFsnc2FuZCddLFxyXG4gICAgJ2NyYXRlcyc6IFsnd29vZCddLFxyXG4gICAgJ2dsYXNzJzogWydzYW5kJ10sXHJcbiAgICAnZ29sZCc6IFsnb3JlJ10sXHJcbiAgICAnaGFuZGxlJzogWydzdGlja3MnXSxcclxuICAgICdpcm9uJzogWydvcmUnXSxcclxuICAgICdsZWF0aGVyJzogWydoaWRlcyddLFxyXG4gICAgJ21lZGljaW5lJzogWydoZXJicyddLFxyXG4gICAgJ25haWxzJzogWydpcm9uJ10sXHJcbiAgICAncGFwZXInOiBbJ3dvb2QnXSxcclxuICAgICdzaGFycHJvY2tzJzogWydyb2NrcyddLFxyXG4gICAgJ3NpbHZlcic6IFsnb3JlJ10sXHJcbiAgICAnc2xhYnMnOiBbJ3JvY2tzJ10sXHJcbiAgICAnc3BlYXInOiBbJ3N0YWZmJywgJ3NoYXJwcm9ja3MnLCAncm9wZSddLFxyXG4gICAgJ3N0YWZmJzogWydoYW5kbGUnLCAncm9wZSddLFxyXG4gICAgJ3N0ZWVsJzogWydpcm9uJ10sXHJcbiAgICAnc3RpY2tzJzogWyd3b29kJ10sXHJcbiAgICAncm9wZSc6IFsndmluZXMnXSxcclxuICAgICd3b29kJzogWydzdGlja3MnXSxcclxufTtcclxuXHJcblxyXG52YXIgYWxsTWF0ZXJpYWxzID0gW107XHJcbk9iamVjdC5rZXlzKHJlc291cmNlcykuZm9yRWFjaChyID0+IGFsbE1hdGVyaWFscy5wdXNoKHIpKTtcclxuT2JqZWN0LmtleXMoY3JhZnRlZFJlc291cmNlcykuZm9yRWFjaChyID0+IGFsbE1hdGVyaWFscy5wdXNoKHIpKTtcclxuY29uc29sZS5sb2coXCJBbGwgbWF0ZXJpYWxzOiBcIiwgYWxsTWF0ZXJpYWxzKTtcclxuXHJcbmxldCBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmcgPSB7fTtcclxubGV0IGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZyA9IHt9O1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBpc1Byb2R1Y2luZyhyZXNvdXJjZSkge1xyXG4gICAgcmV0dXJuIHJlc291cmNlIGluIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZztcclxufVxyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBpc0NvbnN1bWluZyhyZXNvdXJjZSkge1xyXG4gICAgcmV0dXJuIHJlc291cmNlIGluIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZztcclxufVxyXG5cclxuLy8gZnVuY3Rpb24gZ2V0RmFjdG9yeUNvbnN1bXB0aW9uKHJlc291cmNlKSB7XHJcbi8vICAgICByZXR1cm4gYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW3Jlc291cmNlXSAqIDtcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gZ2V0RmFjdG9yeVByb2R1Y3Rpb24ocmVzb3VyY2UpIHtcclxuICAgIHJldHVybiBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbcmVzb3VyY2VdICogbWFudWZhY3R1cmVCdWxrO1xyXG59XHJcblxyXG5cclxuLy8gRnVuY3Rpb24gdG8gdXBkYXRlIHJlc291cmNlIHByb2R1Y3Rpb24gYW5kIGNvbnN1bXB0aW9uXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gdXBkYXRlRmFjdG9yeVJlc291cmNlVHJhY2tpbmcob2xkUHJvZHVjZWQsIG5ld1Byb2R1Y2VkLCBmYWN0b3J5SW5kZXgpIHtcclxuICAgIC8vIElmIHRoaXMgZmFjdG9yeSB3YXMgcHJldmlvdXNseSBwcm9kdWNpbmcgc29tZXRoaW5nLCByZWR1Y2UgdGhlIGNvdW50XHJcbiAgICBpZiAob2xkUHJvZHVjZWQgJiYgb2xkUHJvZHVjZWQgIT09ICdub25lJykge1xyXG4gICAgICAgIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tvbGRQcm9kdWNlZF0tLTtcclxuICAgICAgICBBcnJheS5mcm9tKGNyYWZ0ZWRSZXNvdXJjZXNbb2xkUHJvZHVjZWRdLmNvc3QpLmZvckVhY2goKGNvc3QpID0+IHtcclxuICAgICAgICAgICAgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW2Nvc3QucmVzb3VyY2VdIC09IGNvc3QuYW1vdW50O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgcHJvZHVjdGlvbiBjb3VudCBmb3IgdGhlIG5ldyByZXNvdXJjZVxyXG4gICAgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW25ld1Byb2R1Y2VkXSsrO1xyXG4gICAgQXJyYXkuZnJvbShjcmFmdGVkUmVzb3VyY2VzW25ld1Byb2R1Y2VkXS5jb3N0KS5mb3JFYWNoKChjb3N0KSA9PiB7XHJcbiAgICAgICAgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW2Nvc3QucmVzb3VyY2VdICs9IGNvc3QuYW1vdW50O1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIENhbGwgdGhpcyB3aGVuZXZlciBhIGZhY3RvcnkncyBzZXR0aW5ncyBjaGFuZ2VcclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBvbkZhY3RvcnlNb2RpZmllZChmYWN0b3J5SW5kZXgsIG5ld1Byb2R1Y2VkKSB7XHJcbiAgICBjb25zdCByaWdodFNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNmYWN0b3J5LSR7ZmFjdG9yeUluZGV4fSAucmlnaHRTZWxlY3RgKTtcclxuICAgIHVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nKHJpZ2h0U2VsZWN0LmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcpLCBuZXdQcm9kdWNlZCwgZmFjdG9yeUluZGV4KTtcclxuICAgIHJpZ2h0U2VsZWN0LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsIG5ld1Byb2R1Y2VkKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVGYWN0b3J5RGl2KCkge1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgcmVzb3VyY2UgdHJhY2tpbmcgb2JqZWN0c1xyXG4gICAgT2JqZWN0LmtleXMoY3JhZnRlZFJlc291cmNlcykuZm9yRWFjaCgocmVzb3VyY2UpID0+IHtcclxuICAgICAgICBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbcmVzb3VyY2VdID0gMDtcclxuICAgICAgICBBcnJheS5mcm9tKGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VdLmNvc3QpLmZvckVhY2goKGNvc3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0pIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZ1tjb3N0LnJlc291cmNlXSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBjb25zdCBmYWN0b3JpZXNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjdG9yaWVzJyk7XHJcbiAgICBjb25zdCBmYWN0b3J5RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBmYWN0b3J5RGl2LmNsYXNzTmFtZSA9ICdmYWN0b3J5JztcclxuXHJcbiAgICBjb25zdCBsZWZ0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIGxlZnRUZXh0LmNsYXNzTGlzdC5hZGQoJ2ZhY3RvcnlDb3N0Jyk7XHJcbiAgICBjb25zdCByaWdodFNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xyXG5cclxuICAgIC8vIFBvcHVsYXRlIHRoZSByaWdodCBkcm9wZG93blxyXG4gICAgT2JqZWN0LmtleXMoc3dpdGNoZWRNYW51ZmFjdHVyZWRNYXApLmZvckVhY2gocmVzb3VyY2UgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBvcHRpb24udmFsdWUgPSByZXNvdXJjZTtcclxuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSByZXNvdXJjZTtcclxuICAgICAgICByaWdodFNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xyXG5cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICByaWdodFNlbGVjdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZHVjZWQnLCAnbm9uZScpO1xyXG5cclxuXHJcbiAgICByaWdodFNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHByb2R1Y2VkIHJlc291cmNlIGZvciB0aGlzIGZhY3RvcnlcclxuICAgICAgICBjb25zdCBjdXJyZW50UHJvZHVjZWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoY3VycmVudFByb2R1Y2VkICE9PSAnbm9uZScpIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNyZXNvdXJjZS0ke2N1cnJlbnRQcm9kdWNlZH1gKS5zdHlsZS5jb2xvciA9ICcnO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdQcm9kdWNlZCA9IHJpZ2h0U2VsZWN0LnZhbHVlO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgcmVzb3VyY2UgdHJhY2tpbmdcclxuICAgICAgICB1cGRhdGVGYWN0b3J5UmVzb3VyY2VUcmFja2luZyhjdXJyZW50UHJvZHVjZWQsIG5ld1Byb2R1Y2VkLCB0aGlzLmRhdGFzZXQuZmFjdG9yeUluZGV4KTtcclxuXHJcbiAgICAgICAgLy8gTm93IHVwZGF0ZSB0aGUgZGF0YXNldCBmb3IgdGhlIG5leHQgY2hhbmdlIGV2ZW50XHJcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZHVjZWQnLCBuZXdQcm9kdWNlZCk7XHJcblxyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Jlc291cmNlLSR7bmV3UHJvZHVjZWR9YCkuc3R5bGUuY29sb3IgPSAndGhpc3RsZSc7XHJcbiAgICAgICAgbGVmdFRleHQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgbGVmdFRleHQuaW5uZXJIVE1MICs9IGAke3JlcXVpcmUoJy4vcmVzb3VyY2VzJykuZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW3JpZ2h0U2VsZWN0LnZhbHVlXS5jb3N0KX1gO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgaW5pdGlhbCBvcHRpb24gZm9yIGxlZnQgc2VsZWN0XHJcbiAgICBmdW5jdGlvbiBhZGRJbml0aWFsT3B0aW9uKHNlbGVjdEVsZW1lbnQsIHRleHQpIHtcclxuICAgICAgICBjb25zdCBpbml0aWFsT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGluaXRpYWxPcHRpb24udGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgICAgIC8vIGluaXRpYWxPcHRpb24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIGluaXRpYWxPcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kQ2hpbGQoaW5pdGlhbE9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBhcnJvdy5pbm5lckhUTUwgPSAnJiM4NTk0Oyc7IC8vIFJpZ2h0IGFycm93IEhUTUwgZW50aXR5XHJcblxyXG4gICAgZmFjdG9yeURpdi5hcHBlbmRDaGlsZChsZWZ0VGV4dCk7XHJcbiAgICBmYWN0b3J5RGl2LmFwcGVuZENoaWxkKGFycm93KTtcclxuICAgIGZhY3RvcnlEaXYuYXBwZW5kQ2hpbGQocmlnaHRTZWxlY3QpO1xyXG5cclxuICAgIGFkZEluaXRpYWxPcHRpb24ocmlnaHRTZWxlY3QsICdTZWxlY3QgYSBSZXNvdXJjZScpO1xyXG5cclxuICAgIGZhY3Rvcmllc0NvbnRhaW5lci5hcHBlbmRDaGlsZChmYWN0b3J5RGl2KTtcclxuXHJcbiAgICByZXR1cm4gZmFjdG9yeURpdjtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRGYWN0b3J5KGNyYWZ0aW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgYSBmYWN0b3J5IGZvciBcIiwgY3JhZnRpbmcpO1xyXG4gICAgbGV0IGRpdiA9IGNyZWF0ZUZhY3RvcnlEaXYoKTtcclxuICAgIGRpdi5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKS52YWx1ZSA9IGNyYWZ0aW5nO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Jlc291cmNlLSR7Y3JhZnRpbmd9YCkuc3R5bGUuY29sb3IgPSAndGhpc3RsZSc7XHJcbiAgICBkaXYucXVlcnlTZWxlY3RvcignLmZhY3RvcnlDb3N0JykuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBkaXYucXVlcnlTZWxlY3RvcignLmZhY3RvcnlDb3N0JykuaW5uZXJIVE1MICs9IGAke3JlcXVpcmUoJy4vcmVzb3VyY2VzJykuZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW2NyYWZ0aW5nXS5jb3N0KX1gO1xyXG5cclxuICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5RmFjdG9yeUJ1dHRvbicpO1xyXG5cclxuICAgIG5ld0ZhY3RvcnlTaWx2ZXJDb3N0ICo9IDEuMjtcclxuICAgIGJ1eUZhY3RvcnlCdXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIGAke25ld0ZhY3RvcnlTaWx2ZXJDb3N0LnRvRml4ZWQoMCl9IHNpbHZlcmApO1xyXG5cclxufVxyXG5cclxuXHJcbmxldCBtYW51ZmFjdHVyZUJ1bGsgPSAyO1xyXG5sZXQgYnVsa1VwZ3JhZGVDb3N0ID0gMzA7XHJcbmxldCBtYW51ZmFjdHVyZUJvbnVzID0gMTtcclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSByZXNvdXJjZXMgQWxsIHJlc291cmNlcyByZXF1aXJlZCBmb3IgdGhlIGNyYWZ0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBnb2FsUmVzb3VyY2UgV2hhdCB3ZSdsbCBiZSBjcmFmdGluZ1xyXG4gKi9cclxuZnVuY3Rpb24gbWFudWZhY3R1cmUocmVzb3VyY2VzLCBnb2FsUmVzb3VyY2UpIHtcclxuICAgIC8vIENhbGN1bGF0ZSBob3cgbWFueSB3ZSBjYW4gYWZmb3JkXHJcbiAgICBsZXQgYXJyID0gW107XHJcbiAgICByZXNvdXJjZXMuZm9yRWFjaChyZXNvdXJjZSA9PiBhcnIucHVzaChnZXRNYXRlcmlhbChyZXNvdXJjZSkgLyBjcmFmdGVkUmVzb3VyY2VzW2dvYWxSZXNvdXJjZV0uY29zdFtyZXNvdXJjZV0pKTtcclxuICAgIGxldCBudW0gPSBNYXRoLm1pbihtYW51ZmFjdHVyZUJ1bGssIC4uLmFycik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhudW0sIG1hbnVmYWN0dXJlQnVsaywgLi4uYXJyKTtcclxuICAgIG51bSAqPSBtYW51ZmFjdHVyZUJvbnVzO1xyXG4gICAgLy8gVGhlIGZhY3RvcmllcyBnZXQgdG8gYmUgaGFsZiBwcmljZSBvZiBub3JtYWwgY3JhZnRpbmcgYmMgZWZmaWNpZW5jeVxyXG4gICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5jcmFmdFJlc291cmNlUXVhbnRpdHkoZ29hbFJlc291cmNlLCBudW0pO1xyXG4gICAgLy8gaW5jcmVhc2VNYXRlcmlhbChnb2FsUmVzb3VyY2UsIG51bSk7XHJcbiAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCAtY3JhZnRlZFJlc291cmNlc1tnb2FsUmVzb3VyY2VdLmNvc3QpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGdyYWRlQnVsaygpIHtcclxuICAgIGlmIChnZXRNYXRlcmlhbCgnc2lsdmVyJykgPCBidWxrVXBncmFkZUNvc3QpIHJldHVybjtcclxuICAgIG1hbnVmYWN0dXJlQnVsayArPSAyO1xyXG4gICAgYnVsa1VwZ3JhZGVDb3N0ICs9IDEwO1xyXG5cclxuICAgIGNvbnN0IHVwQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VwZ3JhZGVCdWxrQnV0dG9uJyk7XHJcbiAgICB1cEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgYCR7bWFudWZhY3R1cmVCdWxrfSDihpIgJHttYW51ZmFjdHVyZUJ1bGsgKyAyfTogJHtidWxrVXBncmFkZUNvc3QudG9GaXhlZCgwKX0gc2lsdmVyYCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF0dGVtcHRNYW51ZmFjdHVyZSgpIHtcclxuICAgIGNvbnN0IGZhY3RvcmllcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYWN0b3J5Jyk7XHJcbiAgICBmYWN0b3JpZXMuZm9yRWFjaChmYWN0b3J5ID0+IHtcclxuXHJcbiAgICAgICAgLy8gY29uc3QgbGVmdFNlbGVjdCA9IGZhY3RvcnkucXVlcnlTZWxlY3Rvcignc3BhbjpmaXJzdC1jaGlsZCcpO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZmFjdG9yeS5xdWVyeVNlbGVjdG9yKCdzZWxlY3Q6bGFzdC1jaGlsZCcpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCBnb2FsUmVzb3VyY2UgPSByaWdodFNlbGVjdC52YWx1ZTtcclxuICAgICAgICBjb25zdCByZXNvdXJjZXMgPSBzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcFtnb2FsUmVzb3VyY2VdO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgZmFjdG9yeVwiLCBnb2FsUmVzb3VyY2UpO1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXMgJiYgZ29hbFJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIG1hbnVmYWN0dXJlKHJlc291cmNlcywgZ29hbFJlc291cmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIENhbGwgdGhpcyBmdW5jdGlvbiB3aGVuZXZlciB5b3Ugd2FudCB0byBzdGFydCB0aGUgbWFudWZhY3R1cmluZyBwcm9jZXNzXHJcbi8vIGZvciBleGFtcGxlLCBhZnRlciBjcmVhdGluZyB0aGUgZmFjdG9yeSBkaXZzIGluaXRpYWxseSBvciBhZnRlciBhZGRpbmcgYSBuZXcgb25lXHJcbi8vIHN0YXJ0TWFudWZhY3R1cmluZ1Byb2Nlc3MoKTtcclxuLy8gZnVuY3Rpb24gZGV0ZXJtaW5lTmV3RmFjdG9yeUNvc3QoKSB7XHJcbi8vICAgICB2YXIgY29zdCA9IDUwO1xyXG4vLyAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZykpIHtcclxuLy8gICAgICAgICBpZiAodmFsID4gMClcclxuLy8gICAgICAgICAgICAgY29zdCAqPSBNYXRoLnBvdygxLjIsIHZhbCk7XHJcbi8vICAgICB9XHJcbi8vICAgICByZXR1cm4gY29zdDtcclxuLy8gfVxyXG4vLyB2YXIgbmV3RmFjdG9yeVNpbHZlckNvc3QgPSBkZXRlcm1pbmVOZXdGYWN0b3J5Q29zdCgpO1xyXG52YXIgbmV3RmFjdG9yeVNpbHZlckNvc3QgPSA1MDtcclxuZnVuY3Rpb24gYnV5RmFjdG9yeSgpIHtcclxuICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5RmFjdG9yeUJ1dHRvbicpO1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdzaWx2ZXInKSA8IG5ld0ZhY3RvcnlTaWx2ZXJDb3N0KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ05vdCBlbm91Z2ggc2lsdmVyIScpOyByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFzIGVub3VnaCBzaWx2ZXIgdG8gYWZmb3JkIGZhY3RvcnlcclxuICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnc2lsdmVyJywgLW5ld0ZhY3RvcnlTaWx2ZXJDb3N0KTtcclxuICAgIGNyZWF0ZUZhY3RvcnlEaXYoKTtcclxuXHJcbiAgICBuZXdGYWN0b3J5U2lsdmVyQ29zdCAqPSAxLjI7XHJcbiAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBgJHtuZXdGYWN0b3J5U2lsdmVyQ29zdC50b0ZpeGVkKDIpfSBzaWx2ZXJgKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjcmVhdGVGYWN0b3J5RGl2LFxyXG4gICAgYXR0ZW1wdE1hbnVmYWN0dXJlLFxyXG4gICAgYnV5RmFjdG9yeSxcclxuICAgIHVwZ3JhZGVCdWxrLFxyXG4gICAgYWxsTWF0ZXJpYWxzLFxyXG4gICAgZ2V0RmFjdG9yeVByb2R1Y3Rpb24sXHJcbiAgICBsb2FkRmFjdG9yeSxcclxuICAgIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1xyXG59O1xyXG4iLCJmdW5jdGlvbiBmaXRDaGFyVG9DZWxsKGNoYXIsIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgaW5pdGlhbEZvbnRTaXplKSB7XHJcbiAgICAvLyBDcmVhdGUgYSB0ZW1wb3Jhcnkgc3BhbiBlbGVtZW50IHRvIG1lYXN1cmUgdGhlIGNoYXJhY3RlclxyXG4gICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHNwYW4udGV4dENvbnRlbnQgPSBjaGFyO1xyXG4gICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IGAke2luaXRpYWxGb250U2l6ZX1weGA7XHJcbiAgICBzcGFuLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsgLy8gc28gaXQgZG9lc24ndCBhZmZlY3QgdGhlIGxheW91dFxyXG4gICAgc3Bhbi5zdHlsZS53aGl0ZVNwYWNlID0gJ25vd3JhcCc7IC8vIHRvIHByZXZlbnQgbGluZSBicmVha3NcclxuICAgIHNwYW4uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOyAvLyB0byBrZWVwIGl0IGhpZGRlblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzcGFuKTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgc3BhbiBmaXRzIHdpdGhpbiB0aGUgZGltZW5zaW9ucywgYW5kIGFkanVzdCBmb250IHNpemUgaWYgbm90XHJcbiAgICBsZXQgY3VycmVudEZvbnRTaXplID0gaW5pdGlhbEZvbnRTaXplO1xyXG4gICAgd2hpbGUgKHNwYW4ub2Zmc2V0V2lkdGggPCBjZWxsV2lkdGggJiYgc3Bhbi5vZmZzZXRIZWlnaHQgPCBjZWxsSGVpZ2h0KSB7XHJcbiAgICAgICAgY3VycmVudEZvbnRTaXplKys7XHJcbiAgICAgICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IGAke2N1cnJlbnRGb250U2l6ZX1weGA7XHJcblxyXG4gICAgICAgIC8vIE9wdGlvbmFsOiBzdG9wIGlmIHRoZSBmb250IHNpemUgZ2V0cyB0b28gc21hbGxcclxuICAgICAgICBpZiAoY3VycmVudEZvbnRTaXplID49IDEwMDApIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFuIHVwOiByZW1vdmUgdGhlIHRlbXBvcmFyeSBzcGFuIGVsZW1lbnRcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3Bhbik7XHJcblxyXG4gICAgcmV0dXJuIGN1cnJlbnRGb250U2l6ZTtcclxufVxyXG5leHBvcnRzLmZpdENoYXJUb0NlbGwgPSBmaXRDaGFyVG9DZWxsO1xyXG4iLCIvKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwsIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuXHJcbiAgICBtYXRlcmlhbCA9IG1hdGVyaWFsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBMb2FkIGNyYWZ0ZWRSZXNvdXJjZXMgaWYgbm90IHByb3ZpZGVkXHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXMpIGNyYWZ0ZWRSZXNvdXJjZXMgPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpLmNyYWZ0ZWRSZXNvdXJjZXM7XHJcblxyXG4gICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSByZXR1cm4gY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgfHwgMDtcclxuICAgIGVsc2UgcmV0dXJuIDA7XHJcblxyXG59XHJcbmV4cG9ydHMuZ2V0Q3JhZnRlZFJlc291cmNlID0gZ2V0Q3JhZnRlZFJlc291cmNlO1xyXG4iLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuLy8gY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5cclxuLy8gR2V0IGZ1bmN0aW9uIGZvciBtYXRlcmlhbHNcclxuLyoqXHJcbiAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIG1hdGVyaWFsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKiBAcmV0dXJucyBWYWx1ZSBvZiBtYXRlcmlhbFxyXG4qL1xyXG5mdW5jdGlvbiBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSB7XHJcbiAgICBpZiAoIXJlc291cmNlcykgcmVzb3VyY2VzID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcztcclxuICAgIGlmIChyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG1hdGVyaWFsOlwiLCBtYXRlcmlhbCk7ICAvLyBGb3IgZGVidWdnaW5nXHJcbiAgICAgICAgcmV0dXJuIGdldENyYWZ0ZWRSZXNvdXJjZShtYXRlcmlhbCwgbnVsbCk7XHJcblxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ2V0TWF0ZXJpYWwgPSBnZXRNYXRlcmlhbDsiLCJjb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoJy4vanNvbi9wcmVzdGlnZScpO1xyXG5jb25zdCB7IHJlc291cmNlcywgaXNSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5cclxuXHJcblxyXG5cclxubGV0IGFsbFZpc2libGVCdXR0b25zID0gbmV3IFNldChbJ2dhdGhlclN0aWNrcyddKTtcclxuZXhwb3J0cy5hbGxWaXNpYmxlQnV0dG9ucyA9IGFsbFZpc2libGVCdXR0b25zO1xyXG5cclxuXHJcbi8vIENhbGN1bGF0ZSB0aGUgZmluYWwgbnVtYmVyIG9mIGNyYWZ0ZWQgZ29vZHMgZnJvbSBib251c2VzXHJcbmZ1bmN0aW9uIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSB7XHJcbiAgICBsZXQgdG90YWwgPSAxO1xyXG4gICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcbiAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2VLZXkpKSB7XHJcbiAgICAgICAgICAgIGxldCBza2lsbFJhdGlvID0gMS4wNjtcclxuICAgICAgICAgICAgdmFyIG11bHQgPSAxICsgKE1hdGgucG93KHNraWxsUmF0aW8sIHNraWxsc1tza2lsbF0ubGV2ZWwpIC0gMSkgLyAxMDA7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTXVsdGlwbHlpbmcgZ2FpbiBieSBcIiArIG11bHQpO1xyXG4gICAgICAgICAgICB0b3RhbCAqPSBtdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGdldEFmZmVjdGVkUmVzb3VyY2VzKHNraWxsKSB7XHJcbiAgICBpZiAoc2tpbGxzW3NraWxsXSkge1xyXG4gICAgICAgIHJldHVybiBza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7ICAvLyBvciBhbiBlbXB0eSBhcnJheSBbXSwgYmFzZWQgb24geW91ciBwcmVmZXJlbmNlXHJcbn1cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWwgXHJcbiAqIEByZXR1cm5zIE1heCBvZiBtYXRlcmlhbCBvciBJbmZpbml0eVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TWF4KG1hdGVyaWFsKSB7XHJcbiAgICBpZiAoaXNSZXNvdXJjZShtYXRlcmlhbCkpIHtcclxuICAgICAgICBsZXQgbWF4ID0gcmVzb3VyY2VzW21hdGVyaWFsXS5tYXg7XHJcbiAgICAgICAgaWYgKGhhc1ByZXN0aWdlKCdzdG9yYWdlU3BhY2UnKSAmJiBtYXRlcmlhbCAhPT0gJ2Nsb25lcycpIG1heCAqPSAxLjA1ICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdzdG9yYWdlU3BhY2UnKTtcclxuICAgICAgICBlbHNlIGlmIChtYXRlcmlhbCA9PT0gJ2Nsb25lcycgJiYgaGFzUHJlc3RpZ2UoJ21heENsb25lcycpKSBtYXggKz0gZ2V0TGV2ZWxPZlByZXN0aWdlKCdtYXhDbG9uZXMnKTtcclxuICAgICAgICByZXR1cm4gbWF4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gSW5maW5pdHk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFyU2lkZWJhcigpIHtcclxuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc291cmNlc1wiKTtcclxuICAgIHNpZGViYXIuaW5uZXJIVE1MID0gJyc7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpc0J1dHRvbklkVmlzaWJsZShpZCkge1xyXG4gICAgcmV0dXJuIGFsbFZpc2libGVCdXR0b25zLmhhcyhpZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZpc2libGVCdXR0b24oaWQpIHtcclxuICAgIGFsbFZpc2libGVCdXR0b25zLmFkZChpZCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZ2V0TWF4LFxyXG4gICAgY2FsY0NyYWZ0Qm9udXMsXHJcbiAgICBpc0J1dHRvbklkVmlzaWJsZSxcclxuICAgIHNldFZpc2libGVCdXR0b24sXHJcbiAgICBjbGVhclNpZGViYXIsXHJcbn07XHJcblxyXG4iLCIvKipcclxuICogQSBtYXAgb2YgYWxsIGpvYnMgdGhhdCByZXF1aXJlIGEgcG9uZGVyIHRvIGJlIHVubG9ja2VkXHJcbiAqXHJcbiAqIEpvYjogUmVxdWlyZWRQb25kZXJcclxuICovXHJcbmNvbnN0IGpvYlJlcXVpcmVkUG9uZGVycyA9IHtcclxuICAgICd0aGlua2luZyc6ICd0aGlua2luZycsXHJcbiAgICAnZmlzaGluZyc6ICdmaXNoaW5nJyxcclxuICAgICdzbWl0aGluZyc6ICdub3QtdW5sb2NrYWJsZScsXHJcbiAgICAnZmFybWluZyc6ICdhZ3JpY3VsdHVyZScsXHJcbiAgICAnY29tYmF0JzogJ2NvbWJhdFRhYicsXHJcbiAgICAnaHVudGluZyc6ICdodW50aW5nJ1xyXG59O1xyXG5leHBvcnRzLmpvYlJlcXVpcmVkUG9uZGVycyA9IGpvYlJlcXVpcmVkUG9uZGVycztcclxuIiwiLy8gQHRzLW5vY2hlY2tcclxuLy8gREVQRU5EUyBPTjogc2tpbGxzLmpzLCBwb25kZXIuanNcclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuXHJcblxyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZShcIi4vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyB0cmlnZ2VyRmxvYXRVcFRleHQgfSA9IHJlcXVpcmUoJy4vdHJpZ2dlckZsb2F0VXBUZXh0Jyk7XHJcblxyXG4vKiBKT0JTIEZVTkNUSU9OQUxJVFkgKi9cclxuXHJcbmNvbnN0IGpvYkF1ZGlvID0gbmV3IEF1ZGlvKCcuL2F1ZGlvL2pvYi53YXYnKTtcclxuXHJcbmNvbnN0IGpvYkNvdW50cyA9IHt9O1xyXG5mb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgIGpvYkNvdW50c1tza2lsbF0gPSAwO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IGpvYnNUYWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9ic1RhYicpO1xyXG5cclxuT2JqZWN0LmtleXMoc2tpbGxzKS5mb3JFYWNoKHNraWxsID0+IHtcclxuICAgIGNvbnN0IGpvYkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgam9iRGl2LmNsYXNzTGlzdC5hZGQoJ2pvYi1idXR0b24nKTtcclxuICAgIGpvYkRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJywgc2tpbGwpO1xyXG4gICAgam9iRGl2LmlkID0gJ2pvYi1idXR0b24tJyArIHNraWxsO1xyXG5cclxuICAgIGNvbnN0IGRlY3JlbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGVjcmVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2J0bi1kZWNyZW1lbnQnKTtcclxuICAgIGRlY3JlbWVudERpdi50ZXh0Q29udGVudCA9ICctJztcclxuICAgIGpvYkRpdi5hcHBlbmRDaGlsZChkZWNyZW1lbnREaXYpO1xyXG5cclxuICAgIGNvbnN0IGpvYk5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgam9iTmFtZVNwYW4uY2xhc3NMaXN0LmFkZCgnam9iLW5hbWUnKTtcclxuICAgIGpvYk5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7c2tpbGwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBza2lsbC5zbGljZSgxKX06IDBgO1xyXG4gICAgam9iRGl2LmFwcGVuZENoaWxkKGpvYk5hbWVTcGFuKTtcclxuXHJcbiAgICBjb25zdCBpbmNyZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGluY3JlbWVudERpdi5jbGFzc0xpc3QuYWRkKCdidG4taW5jcmVtZW50Jyk7XHJcbiAgICBpbmNyZW1lbnREaXYudGV4dENvbnRlbnQgPSAnKyc7XHJcbiAgICBqb2JEaXYuYXBwZW5kQ2hpbGQoaW5jcmVtZW50RGl2KTtcclxuXHJcbiAgICBqb2JzVGFiLmFwcGVuZENoaWxkKGpvYkRpdik7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1pbmNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBqb2JUeXBlID0gdGhpcy5jbG9zZXN0KCcuam9iLWJ1dHRvbicpLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBqb2JBdWRpby5wbGF5KCk7XHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnLCByZXNvdXJjZXMpID4gZ2V0VG90YWxKb2JzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYOyAvLyBYIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTsgLy8gWSBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGlmZmVyZW5jZSA9IGdldE1hdGVyaWFsKCdjbG9uZXMnLCByZXNvdXJjZXMpIC0gZ2V0VG90YWxKb2JzKCk7XHJcbiAgICAgICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0gKz0gZGlmZmVyZW5jZTtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgKyR7ZGlmZmVyZW5jZX0gd29ya2Vyc2AsICdncmVlbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFkZCAxMCBvciBtYXggY2xvbmVzXHJcbiAgICAgICAgICAgICAgICBsZXQgZGlmZmVyZW5jZSA9IE1hdGgubWluKDEwLCBnZXRNYXRlcmlhbCgnY2xvbmVzJywgcmVzb3VyY2VzKSAtIGdldFRvdGFsSm9icygpKTtcclxuICAgICAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSArPSBkaWZmZXJlbmNlO1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArJHtkaWZmZXJlbmNlfSB3b3JrZXJzYCwgJ2dyZWVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0rKztcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCAnKzEgd29ya2VyJywgJ2dyZWVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKGpvYlR5cGUsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoam9iVHlwZSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHdvcmtlcnNEaXN0cmlidXRpb24pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1kZWNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgam9iVHlwZSA9IHRoaXMuY2xvc2VzdCgnLmpvYi1idXR0b24nKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYOyAvLyBYIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LnBhZ2VZOyAvLyBZIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgam9iQXVkaW8ucGxheSgpO1xyXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICBsZXQgbnVtV29ya2VycyA9IGpvYkNvdW50c1tqb2JUeXBlXTtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChudW1Xb3JrZXJzID4gMCkgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGAtJHtudW1Xb3JrZXJzfSB3b3JrZXJzYCwgJ3JlZCcpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuY3RybEtleSkge1xyXG4gICAgICAgICAgICAvLyBTdWJ0cmFjdCAxMCBvciBtYXggY2xvbmVzXHJcbiAgICAgICAgICAgIGxldCBkaWZmZXJlbmNlID0gTWF0aC5taW4oMTAsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSAtPSBkaWZmZXJlbmNlO1xyXG4gICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYC0ke2RpZmZlcmVuY2V9IHdvcmtlcnNgLCAncmVkJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChqb2JDb3VudHNbam9iVHlwZV0gPiAwKSB7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXS0tO1xyXG5cclxuICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksICctMSB3b3JrZXInLCAncmVkJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXkoam9iVHlwZSk7XHJcbiAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXRUb3RhbEpvYnMoKSB7XHJcbiAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgZm9yIChsZXQgaiBpbiBqb2JDb3VudHMpIHtcclxuICAgICAgICB0b3RhbCArPSBqb2JDb3VudHNbal07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIEdsb2JhbCBmb3Igd2hpY2ggcmVzb3VyY2UgZWFjaCBjbG9uZSBnYXRoZXJzXHJcbmxldCB3b3JrZXJzRGlzdHJpYnV0aW9uID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBkaXN0cmlidXRlV29ya2Vycyhza2lsbCwgdG90YWxXb3JrZXJzKSB7XHJcbiAgICBpZiAoIXNraWxsc1tza2lsbF0pIHJldHVybiBudWxsOyAgLy8gUmV0dXJuIG51bGwgaWYgdGhlIHNraWxsIGRvZXNuJ3QgZXhpc3RcclxuXHJcbiAgICBsZXQgYWZmZWN0ZWRSZXNvdXJjZXMgPSBza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG5cclxuICAgIC8vIEZpbHRlciBhZmZlY3RlZFJlc291cmNlcyB0byBvbmx5IGNvbnRhaW4ga2V5cyB0aGF0IGFyZSBwcmVzZW50IGluIHRoZSByZXNvdXJjZXMgbWFwXHJcbiAgICBhZmZlY3RlZFJlc291cmNlcyA9IGFmZmVjdGVkUmVzb3VyY2VzLmZpbHRlcihyZXNvdXJjZSA9PiByZXNvdXJjZSBpbiByZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIGxldCBhO1xyXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhZmZlY3RlZFJlc291cmNlcy5sZW5ndGg7IGEgPSBhZmZlY3RlZFJlc291cmNlc1tpXSkge1xyXG5cclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhhKTtcclxuICAgIC8vICAgICBpZiAoIXJlc291cmNlc1thXSkge1xyXG5cclxuICAgIC8vICAgICAgICAgY29uc3QgaW5kZXggPSBhZmZlY3RlZFJlc291cmNlcy5pbmRleE9mKGEpO1xyXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhhLCBpbmRleCk7XHJcbiAgICAvLyAgICAgICAgIGxldCB4ID0gYWZmZWN0ZWRSZXNvdXJjZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICArK2k7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gY29uc29sZS5sb2coYWZmZWN0ZWRSZXNvdXJjZXMpO1xyXG4gICAgbGV0IG51bWJlck9mUmVzb3VyY2VzID0gYWZmZWN0ZWRSZXNvdXJjZXMubGVuZ3RoO1xyXG5cclxuICAgIC8vIEluaXRpYWwgZXZlbiBkaXN0cmlidXRpb25cclxuICAgIGxldCBwZXJSZXNvdXJjZSA9IE1hdGguZmxvb3IodG90YWxXb3JrZXJzIC8gbnVtYmVyT2ZSZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIEV2ZW5seSBkaXN0cmlidXRlIHdvcmtlcnMgYW1vbmcgdGhlIGFmZmVjdGVkIHJlc291cmNlc1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2Ugb2YgYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICB3b3JrZXJzRGlzdHJpYnV0aW9uLnNldChyZXNvdXJjZSwgcGVyUmVzb3VyY2UpO1xyXG4gICAgICAgIGlmIChwZXJSZXNvdXJjZSA+IDApIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoc2tpbGwsIHJlc291cmNlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGlzdHJpYnV0ZSBhbnkgcmVtYWluaW5nIHdvcmtlcnMgZHVlIHRvIHJvdW5kaW5nXHJcbiAgICBsZXQgcmVtYWluaW5nV29ya2VycyA9IHRvdGFsV29ya2VycyAtIChwZXJSZXNvdXJjZSAqIG51bWJlck9mUmVzb3VyY2VzKTtcclxuICAgIGZvciAobGV0IHJlc291cmNlIG9mIGFmZmVjdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKHJlbWFpbmluZ1dvcmtlcnMgPiAwKSB7XHJcbiAgICAgICAgICAgIHdvcmtlcnNEaXN0cmlidXRpb24uc2V0KHJlc291cmNlLCB3b3JrZXJzRGlzdHJpYnV0aW9uLmdldChyZXNvdXJjZSkgKyAxKTtcclxuICAgICAgICAgICAgcmVtYWluaW5nV29ya2Vycy0tO1xyXG4gICAgICAgICAgICBtb3ZlQmFsbEZyb21Kb2JUb1Jlc291cmNlKHNraWxsLCByZXNvdXJjZSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cod29ya2Vyc0Rpc3RyaWJ1dGlvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoam9iVHlwZSwgYWZmZWN0ZWRSZXNvdXJjZSkge1xyXG4gICAgLy8gRmluZCB0aGUgam9iIGJ1dHRvblxyXG4gICAgY29uc3Qgam9iQnV0dG9uID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpKVxyXG4gICAgICAgIC5maW5kKGJ0biA9PiBidG4uZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpID09PSBqb2JUeXBlKTtcclxuXHJcbiAgICBpZiAoIWpvYkJ1dHRvbiB8fCBqb2JCdXR0b24uc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47IC8vIEpvYiBidXR0b24gbm90IGZvdW5kXHJcblxyXG5cclxuICAgIGNvbnN0IHJlc291cmNlRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByZXNvdXJjZS0ke2FmZmVjdGVkUmVzb3VyY2V9YCk7XHJcbiAgICBpZiAoIXJlc291cmNlRGlzcGxheSB8fCByZXNvdXJjZURpc3BsYXkuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47IC8vIFJlc291cmNlIGRpc3BsYXkgbm90IGZvdW5kXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHBvc2l0aW9uc1xyXG4gICAgY29uc3Qgam9iQnV0dG9uUmVjdCA9IGpvYkJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IHJlc291cmNlUmVjdCA9IHJlc291cmNlRGlzcGxheS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBiYWxsIGVsZW1lbnRcclxuICAgIGNvbnN0IGJhbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGJhbGwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgYmFsbC5zdHlsZS53aWR0aCA9ICcxMHB4JztcclxuICAgIGJhbGwuc3R5bGUuaGVpZ2h0ID0gJzEwcHgnO1xyXG4gICAgYmFsbC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnNTAlJztcclxuICAgIGJhbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcclxuICAgIGJhbGwuc3R5bGUub3BhY2l0eSA9ICcuOCc7XHJcbiAgICBiYWxsLnN0eWxlLmxlZnQgPSBgJHtqb2JCdXR0b25SZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWH1weGA7XHJcbiAgICBiYWxsLnN0eWxlLnRvcCA9IGAke2pvYkJ1dHRvblJlY3QudG9wICsgd2luZG93LnNjcm9sbFl9cHhgO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChiYWxsKTtcclxuXHJcbiAgICAvLyBBbmltYXRlIHRoZSBiYWxsXHJcbiAgICBjb25zdCBhbmltYXRpb24gPSBiYWxsLmFuaW1hdGUoW1xyXG4gICAgICAgIHsgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7cmVzb3VyY2VSZWN0LmxlZnQgLSBqb2JCdXR0b25SZWN0LmxlZnR9cHgsICR7cmVzb3VyY2VSZWN0LnRvcCAtIGpvYkJ1dHRvblJlY3QudG9wfXB4KWAgfVxyXG4gICAgXSwge1xyXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLCAvLyBBbmltYXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgLy8gZmlsbDogJ2ZvcndhcmRzJyAvLyBLZWVwIHRoZSBiYWxsIGF0IHRoZSBlbmQgcG9zaXRpb24gYWZ0ZXIgYW5pbWF0aW9uXHJcbiAgICAgICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKC4yMywtMC4zNCwwLDEuMDYpJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRXZlbnQgbGlzdGVuZXIgdG8gaGlkZSB0aGUgYmFsbCBhZnRlciBhbmltYXRpb25cclxuICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcclxuICAgICAgICBiYWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldFdvcmtlcnMocmVzb3VyY2VOYW1lKSB7XHJcbiAgICByZXR1cm4gd29ya2Vyc0Rpc3RyaWJ1dGlvbi5nZXQocmVzb3VyY2VOYW1lKTtcclxufVxyXG5cclxuLy8gY29uc3QgYWxsSm9iQnV0dG9uYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpO1xyXG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpIHtcclxuICAgIGNvbnN0IHRoaXNKb2JCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuam9iLWJ1dHRvbltkYXRhLWpvYj1cIiR7am9iVHlwZX1cIl1gKTtcclxuICAgIGlmICghdGhpc0pvYkJ1dHRvbikgY29uc29sZS53YXJuKFwiQ291bGRuJ3QgZmluZCBqb2IgYnV0dG9uIGZvciBqb2I6IFwiLCBqb2JUeXBlKTtcclxuICAgIGNvbnN0IGpvYkVsZW1lbnQgPSB0aGlzSm9iQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoYC5qb2ItbmFtZWApO1xyXG4gICAgaWYgKGpvYkVsZW1lbnQpIGpvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHtqb2JUeXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgam9iVHlwZS5zbGljZSgxKX06ICR7am9iQ291bnRzW2pvYlR5cGVdfWA7XHJcblxyXG4gICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS51cGRhdGVFbW9qaURpc3BsYXkoKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgdG90YWwgYXNzaWduZWQgY2xvbmVzIGNvdW50ZXJcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvdGFsKCkge1xyXG4gICAgY29uc3QgdG90YWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2pvYnMtdG90YWwnKTtcclxuICAgIHRvdGFsRWxlbWVudC50ZXh0Q29udGVudCA9IFwiQXNzaWduZWQgQ2xvbmVzOiBcIiArIGdldFRvdGFsSm9icygpICsgXCIgLyBcIiArIGdldE1heCgnY2xvbmVzJyk7XHJcbn1cclxuXHJcblxyXG5sZXQgc3RhcnRCdXR0b24gPSBudWxsO1xyXG5sZXQgY29ubmVjdGlvbnMgPSBuZXcgTWFwKCk7ICAvLyBNYXAgdG8gc3RvcmUgY29ubmVjdGlvbnNcclxubGV0IG1hbmFnZW1lbnQgPSB7ICdjb25uZWN0aW9ucyc6IGNvbm5lY3Rpb25zLCAnbWlucyc6IHt9LCAnbWF4ZXMnOiB7fSwgJ3RyaWdnZXJzJzoge30gfTtcclxubGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lQ2FudmFzJyk7XHJcblxyXG5mdW5jdGlvbiBzZXRDb25uZWN0aW9ucyhuZXdDb25uZWN0aW9ucykge1xyXG4gICAgY29ubmVjdGlvbnMgPSBuZXdDb25uZWN0aW9ucztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29ubmVjdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gY29ubmVjdGlvbnM7XHJcbn1cclxuXHJcbi8vIGlmIChjYW52YXMpIHtcclxuLy8gQHRzLWlnbm9yZVxyXG5sZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbi8vIEB0cy1pZ25vcmVcclxuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuLy8gfVxyXG5cclxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgIGxldCBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpvYi1idXR0b24nKTtcclxuXHJcbi8vICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuLy8gICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4vLyAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLmJ0bi1kZWNyZW1lbnQnKSB8fCBlLnRhcmdldC5jbG9zZXN0KCcuYnRuLWluY3JlbWVudCcpKSByZXR1cm47XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoIWlzUG9uZGVyZWQoJ21hbmFnZW1lbnQnKSkgcmV0dXJuO1xyXG5cclxuLy8gICAgICAgICAgICAgbGV0IGpvYkJ1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5qb2ItYnV0dG9uJyk7XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoam9iQnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0QnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24gPSBqb2JCdXR0b247XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XHJcbi8vICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0QnV0dG9uLmlkICYmIGpvYkJ1dHRvbi5pZCkgeyAvLyBFbnN1cmUgYm90aCBJRHMgYXJlIGF2YWlsYWJsZVxyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLnNldChzdGFydEJ1dHRvbi5pZCwgam9iQnV0dG9uLmlkKTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gRHJhdyBhbGwgY29ubmVjdGlvbnNcclxuLy8gICAgICAgICAgICAgICAgICAgICBkcmF3QWxsQ29ubmVjdGlvbnMoKTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXRcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbiA9IG51bGw7XHJcbi8vICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ01pc3NpbmcgSUQgZm9yIG9uZSBvZiB0aGUgYnV0dG9uczonLCBzdGFydEJ1dHRvbiwgam9iQnV0dG9uKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NsaWNrZWQgZWxlbWVudCBpcyBub3QgaW5zaWRlIGEgam9iIGJ1dHRvbjonLCBlLnRhcmdldCk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9KTtcclxuXHJcbi8vICAgICB9KTtcclxuXHJcbi8vICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkge1xyXG4vLyAgICAgICAgIGlmIChzdGFydEJ1dHRvbikge1xyXG4vLyAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBEcmF3IGV4aXN0aW5nIGNvbm5lY3Rpb25zXHJcbi8vICAgICAgICAgICAgIGRyYXdBbGxDb25uZWN0aW9ucygpO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gRHJhdyB0aGUgbGluZSBmcm9tIHN0YXJ0QnV0dG9uIHRvIGN1cnJlbnQgbW91c2UgcG9zaXRpb25cclxuLy8gICAgICAgICAgICAgZHJhd0xpbmUoc3RhcnRCdXR0b24sIGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcblxyXG5mdW5jdGlvbiBkcmF3QWxsQ29ubmVjdGlvbnMoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICB0cnkge1xyXG5cclxuXHJcbiAgICAgICAgZm9yIChsZXQgW29sZElkLCBuZXdJZF0gb2YgY29ubmVjdGlvbnMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGxldCBvbGRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvbGRJZCk7XHJcbiAgICAgICAgICAgIGxldCBuZXdCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuZXdJZCk7XHJcbiAgICAgICAgICAgIGxldCByZWN0ID0gbmV3QnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBsZXQgbmV3WCA9IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyO1xyXG4gICAgICAgICAgICBsZXQgbmV3WSA9IDA7XHJcbiAgICAgICAgICAgIGlmIChyZWN0LmJvdHRvbSA+IG9sZEJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20pIG5ld1kgPSBuZXdCdXR0b24ub2Zmc2V0VG9wIC0gMTA7XHJcbiAgICAgICAgICAgIGVsc2UgbmV3WSA9IG5ld0J1dHRvbi5vZmZzZXRUb3AgKyBuZXdCdXR0b24ub2Zmc2V0SGVpZ2h0ICsgMTA7XHJcbiAgICAgICAgICAgIGRyYXdMaW5lKG9sZEJ1dHRvbiwgbmV3WCwgbmV3WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGNvbnNvbGUud2FybignZHJhd0FsbENvbm5lY3Rpb25zJywgZXJyb3IpOyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdBcnJvd2hlYWQoY29udGV4dCwgZnJvbVgsIGZyb21ZLCB0b1gsIHRvWSwgcmFkaXVzKSB7XHJcbiAgICBsZXQgeF9jZW50ZXIgPSB0b1g7XHJcbiAgICBsZXQgeV9jZW50ZXIgPSB0b1k7XHJcblxyXG4gICAgbGV0IGFuZ2xlO1xyXG4gICAgbGV0IHg7XHJcbiAgICBsZXQgeTtcclxuXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cclxuICAgIGFuZ2xlID0gTWF0aC5hdGFuMih0b1kgLSBmcm9tWSwgdG9YIC0gZnJvbVgpO1xyXG4gICAgeCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSArIHhfY2VudGVyO1xyXG4gICAgeSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSArIHlfY2VudGVyO1xyXG5cclxuICAgIGNvbnRleHQubW92ZVRvKHgsIHkpO1xyXG5cclxuICAgIGFuZ2xlICs9ICgxIC8gMykgKiAoMiAqIE1hdGguUEkpO1xyXG4gICAgeCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSArIHhfY2VudGVyO1xyXG4gICAgeSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSArIHlfY2VudGVyO1xyXG5cclxuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xyXG5cclxuICAgIGFuZ2xlICs9ICgxIC8gMykgKiAoMiAqIE1hdGguUEkpO1xyXG4gICAgeCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSArIHhfY2VudGVyO1xyXG4gICAgeSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSArIHlfY2VudGVyO1xyXG5cclxuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xyXG5cclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgY29udGV4dC5maWxsKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdMaW5lKHN0YXJ0RWxlbWVudCwgZW5kWCwgZW5kWSkge1xyXG4gICAgbGV0IHJlY3QgPSBzdGFydEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAvLyBsZXQgb2Zmc2V0ID0gTWF0aC5yYW5kb20oKSAqIDEwMCArIDEwMFxyXG4gICAgbGV0IHN0YXJ0WCA9IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyOyAvLyAtIG9mZnNldDtcclxuICAgIC8vIGVuZFggLT0gb2Zmc2V0O1xyXG4gICAgbGV0IHN0YXJ0WSA9IHNjcm9sbFkgKyByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcclxuXHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHgubW92ZVRvKHN0YXJ0WCwgc3RhcnRZKTtcclxuICAgIGN0eC5saW5lVG8oZW5kWCwgZW5kWSk7XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgLy8gRHJhdyBhcnJvdyBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lXHJcbiAgICBkcmF3QXJyb3doZWFkKGN0eCwgc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFksIDEwKTsgIC8vIGFkanVzdCB0aGUgbGFzdCBwYXJhbWV0ZXIgZm9yIGFycm93IHNpemVcclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJKb2JBc3NpZ25tZW50cygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGNvbm5lY3Rpb25zID0gbmV3IE1hcCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzKCkge1xyXG4gICAgLy8gRm9yIGVhY2ggY29ubmVjdGlvblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gY29ubmVjdGlvbnMuZW50cmllcygpO1xyXG4gICAgICAgIGlmIChlbnRyaWVzID09PSB1bmRlZmluZWQpIHRocm93ICdFbnRyaWVzIGlzIHVuZGVmaW5lZCc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IFtvbGRKb2JJZCwgbmV3Sm9iSWRdIG9mIGVudHJpZXMpIHtcclxuICAgICAgICAgICAgbGV0IG9sZEpvYkJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9sZEpvYklkKTtcclxuICAgICAgICAgICAgbGV0IGRhdGFKb2IgPSBvbGRKb2JCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgb2xkSWQgPSBvbGRKb2JJZC5yZXBsYWNlKCdqb2ItYnV0dG9uLScsICcnKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3SWQgPSBuZXdKb2JJZC5yZXBsYWNlKCdqb2ItYnV0dG9uLScsICcnKTtcclxuICAgICAgICAgICAgbGV0IG1heGVkT3V0ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXNvdXJjZUFycmF5ID0gc2tpbGxzW2RhdGFKb2JdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG4gICAgICAgICAgICBpZiAoIXJlc291cmNlQXJyYXkpIHJldHVybjtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VBcnJheSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiByZXNvdXJjZUFycmF5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocik7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VzW3JdICE9PSB1bmRlZmluZWQgJiYgZ2V0TWF0ZXJpYWwocikgPCByZXNvdXJjZXNbcl0ubWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cociwgZ2V0TWF0ZXJpYWwociksIHJlc291cmNlc1tyXS5tYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heGVkT3V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtYXhlZE91dCAmJiBqb2JDb3VudHNbZGF0YUpvYl0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2hKb2Iob2xkSWQsIG5ld0lkKTtcclxuICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKG9sZElkLCBqb2JDb3VudHNbb2xkSWRdKTtcclxuICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKG5ld0lkLCBqb2JDb3VudHNbbmV3SWRdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYgKHJlc291cmNlc1thZmZlY3RlZFJlc291cmNlXS5jdXJyZW50VmFsdWUgPj0gcmVzb3VyY2VzW2FmZmVjdGVkUmVzb3VyY2VdLm1heFZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBzd2l0Y2hKb2Iob2xkSm9iSWQsIG5ld0pvYklkKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7IGNvbnNvbGUud2FybigncmVhc3NpZ25Kb2JzJywgZXJyb3IpOyB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzd2l0Y2hKb2Iob2xkSm9iSWQsIG5ld0pvYklkKSB7XHJcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHN3aXRjaGVzIHdvcmtlcnMgZnJvbSBvbGRKb2IgdG8gbmV3Sm9iLlxyXG4gICAgLy8gRGVwZW5kaW5nIG9uIHlvdXIgYXBwbGljYXRpb24gc3RydWN0dXJlLCB5b3UgY2FuIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uIGFjY29yZGluZ2x5LlxyXG4gICAgLy8gRm9yIGV4YW1wbGUsIHJlZHVjZSB0aGUgY291bnQgb2Ygd29ya2VycyBpbiBvbGRKb2IgYW5kIGluY3JlYXNlIGluIG5ld0pvYi5cclxuICAgIC8vIGNvbnNvbGUubG9nKGBTd2l0Y2hpbmcgd29ya2VycyBmcm9tICR7b2xkSm9iSWR9IHRvICR7bmV3Sm9iSWR9YCk7XHJcblxyXG4gICAgbGV0IHdvcmtlcnMgPSBqb2JDb3VudHNbb2xkSm9iSWRdO1xyXG4gICAgam9iQ291bnRzW29sZEpvYklkXSA9IDA7XHJcbiAgICBqb2JDb3VudHNbbmV3Sm9iSWRdICs9IHdvcmtlcnM7XHJcbiAgICB1cGRhdGVEaXNwbGF5KG9sZEpvYklkKTtcclxuICAgIHVwZGF0ZURpc3BsYXkobmV3Sm9iSWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldEFsbEpvYnMoKSB7XHJcbiAgICAvLyBqb2JDb3VudHMgPSB7fTtcclxuICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgIGpvYkNvdW50c1tza2lsbF0gPSAwO1xyXG4gICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKHNraWxsLCAwKTtcclxuICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXkoc2tpbGwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNsZWFySm9iQXNzaWdubWVudHMsXHJcbiAgICByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzLFxyXG4gICAgc3dpdGNoSm9iLFxyXG4gICAgZHJhd0FsbENvbm5lY3Rpb25zLFxyXG4gICAgZ2V0V29ya2VycyxcclxuICAgIHVwZGF0ZVRvdGFsLFxyXG4gICAgc2V0Q29ubmVjdGlvbnMsXHJcbiAgICBnZXRDb25uZWN0aW9ucyxcclxuICAgIGRpc3RyaWJ1dGVXb3JrZXJzLFxyXG4gICAgdXBkYXRlRGlzcGxheSxcclxuICAgIGpvYkNvdW50cyxcclxuICAgIHJlc2V0QWxsSm9ic1xyXG59OyIsImNvbnN0IHsgaGFzUGVyayB9ID0gcmVxdWlyZShcIi4uL3BlcmtzXCIpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZShcIi4uL3JlY2FsY01heENsb25lc1wiKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZShcIi4uL3JlY2FsY3VsYXRlQnVpbGRpbmdDb3N0XCIpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoXCIuLi91cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50XCIpO1xyXG5cclxuY29uc3QgYnVpbGRpbmdzID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSE9VU0lOR1xyXG4gICAgICovXHJcbiAgICBcInNoZWx0ZXJcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcInN0aWNrc1wiOiAzMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiY2xvbmVzXCI6IDEgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGb3Igd2hlbiB5b3UgbmVlZCBhIGhvbWUgYXdheSBmcm9tIGhvbWUuXCIsXHJcbiAgICAgICAgZW1vamk6ICflhasnXHJcbiAgICB9LFxyXG4gICAgJ2h1dCc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyAnc3RpY2tzJzogNTAsICd2aW5lcyc6IDMwIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICdjbG9uZXMnOiAxIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIGNvenksIGlkeWxsaWMgY2h1bmsgb2Ygd29vZC4nLFxyXG4gICAgICAgIGVtb2ppOiAn5YaCJ1xyXG4gICAgfSxcclxuICAgIFwiaG91c2VcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcIndvb2RcIjogNTAsIFwicm9ja3NcIjogMjAsICdmaXNoJzogMTAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcImNsb25lc1wiOiAyIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRXZlcnkgY2xvbmUncyBkcmVhbS4gTWludXMgdGhlIHdoaXRlIHBpY2tldCBmZW5jZS5cIixcclxuICAgICAgICBlbW9qaTogJ+S7iydcclxuICAgIH0sXHJcbiAgICAndGVlcGVlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICd3b29kJzogMTAsICdoaWRlcyc6IDI1LCAnZmlzaCc6IDE1IH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnY2xvbmVzJzogMiB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldyYXAgc29tZSBoaWRlcyBhcm91bmQgc29tZSB3b29kIGFuZCBjYWxsIGl0IGEgaG9tZS5cIixcclxuICAgICAgICBlbW9qaTogJ+eptCdcclxuICAgIH0sXHJcbiAgICAnaG9zcGl0YWwnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgY29uY3JldGU6IDEwLCBtZWRpY2luZTogMjAsIGZpc2g6IDIwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnY2xvbmVzJzogMyB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS43LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnS2VlcCB5b3Vyc2VsZiBzYWZlLicsXHJcbiAgICAgICAgZW1vamk6ICcrJ1xyXG4gICAgfSxcclxuICAgICdiYXJyYWNrcyc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyBzcGVhcjogMjAsIHZpb2xlbmNlOiAxLCB3b29kOiAyMDAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdjbG9uZXMnOiAxLCAndmlvbGVuY2UnOiAyMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSBoYWxsIG9mIHJhdWNvdXMgc29sZGllcnMuJyxcclxuICAgICAgICBlbW9qaTogJ/CTiI8nXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU1RPUkFHRVxyXG4gICAgICovXHJcbiAgICBcInNoZWRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcIndvb2RcIjogNDAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcIndvb2RcIjogNTAsIFwic3RpY2tzXCI6IDUwLCBcInJvY2tzXCI6IDIwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlIHVsdGltYXRlIHN0b3JhZ2Ugc29sdXRpb24gZm9yIHRoZSBwYWNrIHJhdCBpbiB5b3UuXCIsXHJcbiAgICAgICAgZW1vamk6ICfkuKonXHJcbiAgICB9LFxyXG4gICAgJ3N0b2NrcGlsZSc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyByb2NrczogMzAsIHdvb2Q6IDQwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyB3b29kOiAxMDAgfSxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJDaHVjayBhIGJ1bmNoIG9mIGxvZ3MgaW4gYSBwaWxlLCB3aGF0IGNvdWxkIGhhcHBlbj9cIixcclxuICAgICAgICBlbW9qaTogJ+WTgSdcclxuICAgIH0sXHJcbiAgICBcImRyeWluZ19yYWNrc1wiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwic3RpY2tzXCI6IDMwLCBcImZpc2hcIjogNSB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiZmlzaFwiOiAyMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkFpciBkcnlpbmc6IE5hdHVyZSdzIHdheSBvZiBwcmVzZXJ2aW5nIGZvb2QuXCIsXHJcbiAgICAgICAgZW1vamk6ICflm5snXHJcbiAgICB9LFxyXG4gICAgXCJ3b3Jrc2hvcFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA0MCwgXCJzdGlja3NcIjogMjAsIFwicm9ja3NcIjogMTAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAncm9ja3MnOiA1MCwgJ29yZSc6IDUwLCAnc2FuZCc6IDEwMCwgJ2NsYXknOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS40LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkRJWSdzIGRyZWFtIGRlc3RpbmF0aW9uLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOOsCdcclxuICAgIH0sXHJcbiAgICAnYmFybic6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7ICd3b29kJzogMzAsICd3aGVhdCc6IDUgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHsgJ3doZWF0JzogMTAwLCAnYmVycmllcyc6IDQwLCAndmluZXMnOiA0MCB9LFxyXG4gICAgICAgICdib29zdCc6IHt9LFxyXG4gICAgICAgICdjb3VudCc6IDAsXHJcbiAgICAgICAgJ3JhdGlvJzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkhheSwgd2hhdCdzIGluIHRoYXQgYnVpbGRpbmc/XCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+GJ1xyXG4gICAgfSxcclxuICAgICdoZXJiYWxpc3RfaHV0Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICdzdGlja3MnOiA1MCwgJ3ZpbmVzJzogNTAsICdoZXJicyc6IDUwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnaGVyYnMnOiAxMDAsICd2aW5lcyc6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdoZXJicyc6IDEuMiwgdmluZXM6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBwbGFjZSBmb3IgYnJld2luZyBhbmQgc3Rld2luZy5cIixcclxuICAgICAgICBlbW9qaTogJ/CTj4MnXHJcbiAgICB9LFxyXG4gICAgXCJiYWtlcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogODAsXHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnd2hlYXQnOiAyMDAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMjUsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkZyZXNobHkgYmFrZWQgYnJlYWQsIGhvdCBhbmQgcmVhZHkuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+WJ1xyXG5cclxuICAgIH0sXHJcbiAgICBcImFuaW1hbF9wZW5cIjoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIHN0aWNrczogNTAsXHJcbiAgICAgICAgICAgIGdhbWU6IDIwLFxyXG4gICAgICAgICAgICBmaXNoOiAyNVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnZ2FtZSc6IDEwMCwgJ2hpZGVzJzogMzAgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIHBsYWNlIHRvIHB1dCB0aG9zZSBsZXNzZXIgdGhhbiB5b3UuXCIsXHJcbiAgICAgICAgZW1vamk6ICfnmr8nXHJcbiAgICB9LFxyXG4gICAgJ3Jlc2Vydm9pcic6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICByb2NrczogMTAwLFxyXG4gICAgICAgICAgICBjbGF5OiA1MCxcclxuICAgICAgICAgICAgd2F0ZXI6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICd3YXRlcic6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgaG9sZSBmaWxsZWQgd2l0aCB3YXRlci4gVXNlZnVsLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOInidcclxuICAgIH0sXHJcbiAgICAnc3RvbmVfZGVwb3QnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgcm9ja3M6IDIwMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAncm9ja3MnOiAyNTAgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBIGJpZyBzdGFjayBvZiByb2Nrcy5cIixcclxuICAgICAgICBlbW9qaTogJ/CTiJMnXHJcbiAgICB9LFxyXG4gICAgJ3dhcmVob3VzZSc6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBjcmF0ZXM6IDEwLFxyXG4gICAgICAgICAgICBjb25jcmV0ZTogMjBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ3dvb2QnOiAxMDAsICdyb2Nrcyc6IDEwMCwgJ2NsYXknOiAxMDAsICdzYW5kJzogMTAwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdQdXQgc3R1ZmYgaW4gYSBib3ggaW5zaWRlIGEgbGFyZ2VyIGJveC4nLFxyXG4gICAgICAgIGVtb2ppOiAn8JOHpidcclxuICAgIH0sXHJcbiAgICAnbWlsaXRhcnlfc2Nob29sJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIGJyaWNrczogMjAsXHJcbiAgICAgICAgICAgIHZpb2xlbmNlOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAndmlvbGVuY2UnOiAxMDAgfSxcclxuICAgICAgICBib29zdDogeyAndmlvbGVuY2UnOiAxLjA1IH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0xlYXJuIHRoZSBhcnQgb2YgaHVydGluZyBvdGhlcnMuJyxcclxuICAgICAgICBlbW9qaTogJ/CTh7snXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBST0RVQ1RJT04gQk9PU1RcclxuICAgICAqL1xyXG4gICAgXCJncm92ZVwiOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgJ3dvb2QnOiAyMCwgJ3ZpbmVzJzogMjAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyAnd29vZCc6IDEuMDUsICdzdGlja3MnOiAxLjEgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgbmljZSBncm92ZSBvZiB0cmVlcyB0byBmaW5kIHdvb2QgZmFzdGVyLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOGrfCThq0nXHJcbiAgICB9LFxyXG4gICAgXCJmaXNoX3RyYXBzXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiZmlzaFwiOiAxLjA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmlzaGluZyBtYWRlIGVhc3kuIE5vIHBhdGllbmNlIHJlcXVpcmVkLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn5LqVJ1xyXG4gICAgfSxcclxuICAgIFwibWluZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMzAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAzMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIm9yZVwiOiAxLjA1LCAncm9ja3MnOiAxLjA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRGlnIGRlZXAgYW5kIGZpbmQgeW91ciBpbm5lciBvcmUuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qNJ1xyXG4gICAgfSxcclxuICAgIFwiY2FtcGZpcmVcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDIwLFxyXG4gICAgICAgICAgICBcInN0aWNrc1wiOiAyMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjogeyAnYWxsJzogMS4wMiB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXaGVyZSBzdG9yaWVzIGFyZSB0b2xkIGFuZCBtYXJzaG1hbGxvd3MgYXJlIHRvYXN0ZWQuXCIsXHJcbiAgICAgICAgZW1vamk6ICfngasnXHJcbiAgICB9LFxyXG4gICAgXCJsdW1iZXJfeWFyZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMDAsXHJcbiAgICAgICAgICAgIFwiaXJvblwiOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXb29kIHlvdSBsaWtlIHNvbWUgbW9yZSB3b29kP1wiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOMjydcclxuICAgIH0sXHJcbiAgICBcInN0b25lX3F1YXJyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiUm9jayBvbiB3aXRoIHlvdXIgYmFkIHNlbGYhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qOJ1xyXG4gICAgfSxcclxuICAgIFwiZmlzaGVyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA0MCxcclxuICAgICAgICAgICAgXCJyb3BlXCI6IDE1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnZmlzaCc6IDUwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmlzaCBhcmUgZnJpZW5kcy4gQW5kIGZvb2QuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4ykJ1xyXG4gICAgfSxcclxuICAgIFwidmluZXlhcmRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMjAsXHJcbiAgICAgICAgICAgIFwidmluZXNcIjogNTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ2aW5lc1wiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGb3IgdGhlIGZpbmVzdCB2aW5lcy4gV2hhdCBlbHNlIHdvdWxkIGl0IGdyb3c/XCIsXHJcbiAgICAgICAgZW1vamk6ICfwn5yMJ1xyXG4gICAgfSxcclxuICAgIFwiZm9yZ2VcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDQwLFxyXG4gICAgICAgICAgICBcIm9yZVwiOiAyMCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDEwMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcIm9yZVwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJNZWx0LCBtb2xkLCBhbmQgbWFrZSBtYXJ2ZWxvdXMgbWV0YWxzLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOKqydcclxuICAgIH0sXHJcbiAgICAnd2F0ZXJfcHVtcCc6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7XHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDMwLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgICAgICd3b29kJzogMTAsXHJcbiAgICAgICAgICAgICd3aGVhdCc6IDJcclxuICAgICAgICB9LFxyXG4gICAgICAgICdlZmZlY3RzJzogeyAnZnJlc2h3YXRlcic6IDMwIH0sXHJcbiAgICAgICAgJ2Jvb3N0Jzoge1xyXG4gICAgICAgICAgICAnZnJlc2h3YXRlcic6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2NvdW50JzogMCxcclxuICAgICAgICAncmF0aW8nOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRnJlc2ggd2F0ZXIgb24gZGVtYW5kIVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOPgidcclxuICAgIH0sXHJcbiAgICAndG93ZXInOiB7XHJcbiAgICAgICAgJ2Jhc2Vjb3N0Jzoge1xyXG4gICAgICAgICAgICAnYnJpY2tzJzogMjAsXHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDEwLFxyXG4gICAgICAgICAgICAnd29vZCc6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHt9LFxyXG4gICAgICAgICdib29zdCc6IHsgJ2hpZGVzJzogMS4wNSwgJ2dhbWUnOiAxLjEgfSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2VlIHRoaW5ncyBmcm9tIGFmYXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qiJ1xyXG4gICAgfSxcclxuICAgIFwidGFubmVyeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiA2MCxcclxuICAgICAgICAgICAgXCJoaWRlc1wiOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHsgJ2hpZGVzJzogNTAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJoaWRlc1wiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiVHJlYXQgaGlkZXMgdG8gbWFrZSBxdWFsaXR5IGxlYXRoZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4OUJ1xyXG4gICAgfSxcclxuICAgIFwibWFya2V0cGxhY2VcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDUwLFxyXG4gICAgICAgICAgICBcImJlcnJpZXNcIjogNDAsXHJcbiAgICAgICAgICAgIFwiZ29sZFwiOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiYmVycmllc1wiOiAxLjIsXHJcbiAgICAgICAgICAgIFwiaGVyYnNcIjogMS4yLFxyXG4gICAgICAgICAgICAnb3JlJzogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjI1LFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJBIGJ1c3RsaW5nIGh1YiBvZiB0cmFkZSBhbmQgYmFydGVyLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn4oK/J1xyXG4gICAgfSxcclxuICAgIFwid2luZG1pbGxcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDYwLFxyXG4gICAgICAgICAgICBcIndoZWF0XCI6IDUwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogMS4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkdyaW5kIGdyYWlucyBlZmZpY2llbnRseSB3aXRoIHdpbmQgcG93ZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4esJ1xyXG4gICAgfSxcclxuICAgICdnYXJkZW4nOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgYmVhbXM6IDIwLFxyXG4gICAgICAgICAgICBoZXJiczogMjAsXHJcbiAgICAgICAgICAgIGJlcnJpZXM6IDUwLFxyXG4gICAgICAgICAgICBmcmVzaHdhdGVyOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ2JlcnJpZXMnOiAxLjEsICdoZXJicyc6IDEuMSwgJ3N0aWNrcyc6IDEuMDUgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIk5pY2UgbmF0dXJlLCBjYXJlZnVsbHkgY3VsdGl2YXRlZC5cIixcclxuICAgICAgICBlbW9qaTogJ/CThrcnXHJcbiAgICB9LFxyXG4gICAgJ3NhbmRfc2Nvb3AnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgYmVhbXM6IDEwLCBpcm9uOiA1IH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3NhbmQnOiAxLjEgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU2Nvb3AgdGhlIHNhbmQgZnJvbSB0aGUgc2hvcmU/IFN1cmUhJyxcclxuICAgICAgICBlbW9qaTogJ/CThJsnXHJcbiAgICB9LFxyXG4gICAgJ3RyYXBzJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7IG5haWxzOiAxMCwgc3RpY2tzOiAyMCwgaGVyYnM6IDIwIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ2dhbWUnOiAxLjEgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldhdGNoIHlvdXIgc3RlcCFcIixcclxuICAgICAgICBlbW9qaTogJ/CThKYnXHJcbiAgICB9LFxyXG4gICAgJ3JvY2tfcm9sZSc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyBzbGFiczogMjAsIGZyZXNod2F0ZXI6IDMwIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgJ3JvY2tzJzogMS4yIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0luIG9yZGVyIHRvIGdhdGhlciB0aGUgcm9jayB5b3UgbXVzdCBiZWNvbWUgdGhlIHJvY2suJyxcclxuICAgICAgICBlbW9qaTogJ/CThocnXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBPTkRFUlxyXG4gICAgICovXHJcbiAgICAndGVsZXNjb3BlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIGdsYXNzOiAxLFxyXG4gICAgICAgICAgICB3b29kOiAxMCxcclxuICAgICAgICAgICAgcG9uZGVyOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czoge30sXHJcbiAgICAgICAgYm9vc3Q6IHsgcG9uZGVyOiAxLjA1IH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJMb29rLCB1cCBpbiB0aGUgc2t5ISBJdCdzIGEgc3RhciFcIixcclxuICAgICAgICBlbW9qaTogJ/CTjKknXHJcbiAgICB9LFxyXG4gICAgXCJvYnNlcnZhdG9yeVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiYnJpY2tzXCI6IDcwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMzAsXHJcbiAgICAgICAgICAgIFwiZ2xhc3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDUwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlN0YXJnYXppbmcgaGFzIG5ldmVyIGJlZW4gc28uLi4gcHJvZHVjdGl2ZT9cIixcclxuICAgICAgICBlbW9qaTogJ+KYhidcclxuICAgIH0sXHJcbiAgICBcImxpYnJhcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogNzAsXHJcbiAgICAgICAgICAgIFwicGFwZXJcIjogMjUsXHJcbiAgICAgICAgICAgIFwiZ2xhc3NcIjogNSxcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMjVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwicG9uZGVyXCI6IDUwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIktub3dsZWRnZSBpcyBwb3dlci4gQW5kIGEgZmlyZSBoYXphcmQgaWYgbm90IHN0b3JlZCBwcm9wZXJseS5cIixcclxuICAgICAgICBlbW9qaTogJ/Cfla4nXHJcbiAgICB9LFxyXG4gICAgXCJkZXNrXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDE1LFxyXG4gICAgICAgICAgICBcInN0aWNrc1wiOiAyMCxcclxuICAgICAgICAgICAgXCJwb25kZXJcIjogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwicG9uZGVyXCI6IDMwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7IFwicG9uZGVyXCI6IDEuMDUgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSB3cml0ZXIncyBibG9jayBpcyBubyBtYXRjaCBmb3IgYXJtb3ItcGllcmNpbmcgcGVuY2lscyFcIixcclxuICAgICAgICBlbW9qaTogJ/CTiqwnXHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRCdWlsZGluZ0NvdW50KGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgcmV0dXJuIGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdLmNvdW50O1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ05hbWUgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCb29zdChidWlsZGluZ05hbWUsIHJlc291cmNlKSB7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG5cclxuICAgIGlmIChidWlsZGluZyAmJiBidWlsZGluZy5ib29zdCkge1xyXG4gICAgICAgIGlmIChidWlsZGluZy5ib29zdFtyZXNvdXJjZV0pIHJldHVybiBidWlsZGluZy5ib29zdFtyZXNvdXJjZV07XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmJvb3N0WydhbGwnXSkgcmV0dXJuIGJ1aWxkaW5nLmJvb3N0WydhbGwnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHJlc2V0QnVpbGRpbmdzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5ncykpIHtcclxuICAgICAgICB2YWxbJ2NvdW50J10gPSAwO1xyXG4gICAgICAgIC8vIFVwZGF0ZSBidXR0b24gdGV4dFxyXG4gICAgICAgIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoa2V5LCAwKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBjb3N0IG9mIHRoZSBidWlsZGluZ1xyXG4gICAgICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGtleSwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuXHJcbiAgICB9XHJcbiAgICAvLyBVcGRhdGUgbWF4IGNsb25lcyBhZnRlciB1cGRhdGluZyB0aGUgY291bnRcclxuICAgIHJlY2FsY01heENsb25lcygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1BvcEJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgc3dpdGNoIChidWlsZGluZ05hbWUpIHtcclxuICAgICAgICBjYXNlICdzaGVsdGVyJzpcclxuICAgICAgICBjYXNlICdodXQnOlxyXG4gICAgICAgIGNhc2UgJ2hvdXNlJzpcclxuICAgICAgICBjYXNlICd0ZWVwZWUnOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYnVpbGRpbmdzLFxyXG4gICAgZ2V0QnVpbGRpbmdDb3VudCxcclxuICAgIGdldEJvb3N0LFxyXG4gICAgcmVzZXRCdWlsZGluZ3MsXHJcbiAgICBpc1BvcEJ1aWxkaW5nXHJcbn07IiwiY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4uL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgaGFzVG9vbCB9ID0gcmVxdWlyZSgnLi4vdG9vbHMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcblxyXG4vKiBCVVRUT05TICovXHJcbmNvbnN0IGJ1dHRvbnMgPSB7XHJcblxyXG4gICAgLyogUFJPRFVDVElPTiBUQUIgKi9cclxuICAgICdnYXRoZXJTdGlja3MnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0YXJ0VmlzaWJsZScsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTgJ0gR2F0aGVyIFN0aWNrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGaXZlLCBTaXgsIFBpY2sgdXAgc3RpY2tzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZSAvLyBUaGlzIGJ1dHRvbiBpcyBhbHdheXMgdmlzaWJsZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJWaW5lcyc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgc3RpY2snLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk42vIEdhdGhlciBWaW5lcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTb21lIHZpbmVzIGFyZSBydWJiZXJ5LCBvdGhlcnMgYXJlIGd1bW15LicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3N0aWNrcycsIHJlc291cmNlcykgPj0gMTAgfHwgcGFzc2VkU3RhZ2UoJ3ZpbmVzJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyUm9ja3MnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0aWNrJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOKlvCTgKkgR2F0aGVyIFJvY2tzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ05vdCBhIHNpbmdsZSB3aW5kb3cgdG8gdGhyb3cgdGhlbSB0aHJvdWdoLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCB8fCBwYXNzZWRTdGFnZSgncm9ja3MnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJGaXNoJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBmaXNoaW5nJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOGnSDwk4afIPCThp4gR28gRmlzaCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdHb3QgYW55IHR1bmE/JyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0ZyZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBoYXNUb29sKCdTcGVhcicpIHx8IGhhc1Rvb2woXCJGaXNoaW5nIFJvZFwiKSB8fCBwYXNzZWRTdGFnZSgnZmlzaGluZycpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlcldvb2QnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd3b29kVG9nZ2xlIHdvb2QnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4yPIENob3AgV29vZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBbiBheGUgaHVydHMgd2F5IGxlc3MgdGhhbiB1c2luZyB5b3VyIGhhbmRzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBoYXNUb29sKCdBeGUnKSB8fCBwYXNzZWRTdGFnZSgnd29vZCcpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlck9yZSc6IHtcclxuICAgICAgICBcImNsYXNzXCI6IFwidG9vbHRpcCBcIixcclxuICAgICAgICBcInRhYlwiOiBcInByb2R1Y3Rpb25cIixcclxuICAgICAgICBcInRleHRcIjogXCLwk4m4IE1pbmUgT3JlXCIsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkRpZ2d5IERpZ2d5IEhvbGVcIixcclxuICAgICAgICBcInRvb2x0aXBDb3N0XCI6IFwiRnJlZVwiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBoYXNUb29sKCdQaWNrYXhlJykgfHwgcGFzc2VkU3RhZ2UoJ29yZScpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgLyogVEFCUyAqL1xyXG4gICAgJ3Byb2R1Y3Rpb25UYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnUHJvZHVjdGlvbicsXHJcbiAgICAgICAgc2hvd1RhYjogJ3Byb2R1Y3Rpb25UYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgndGFiLWJ1dHRvbicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2V4cGVyaW1lbnRUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnRXhwZXJpbWVudCcsXHJcbiAgICAgICAgc2hvd1RhYjogJ2V4cGVyaW1lbnRUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgndGFiLWJ1dHRvbicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ3BvbmRlclRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6ICdQb25kZXInLFxyXG4gICAgICAgIHNob3dUYWI6ICdwb25kZXJUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2pvYnNUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnSm9icycsXHJcbiAgICAgICAgc2hvd1RhYjogJ2pvYnNUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnam9icy10YWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdza2lsbHNUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnU2tpbGxzJyxcclxuICAgICAgICBzaG93VGFiOiAnc2tpbGxzVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3NraWxsc1RhYmxlJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAncGVya3NUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnUGVya3MnLFxyXG4gICAgICAgIHNob3dUYWI6ICdwZXJrc1RhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwZXJrc1RhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2ZhY3RvcnlUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnRmFjdG9yaWVzJyxcclxuICAgICAgICBzaG93VGFiOiAnZmFjdG9yeVRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdmYWN0b3J5VGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnY29tYmF0VGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogXCJDb21iYXRcIixcclxuICAgICAgICBzaG93VGFiOiAnY29tYmF0VGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ2NvbWJhdFRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIC8qIFBPTkRFUiBUQUIgKi9cclxuICAgICdnYXRoZXJQb25kZXInOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwJyxcclxuICAgICAgICB0ZXh0OiAnUG9uZGVyJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1dyYXAgeW91ciBoZWFkIGFyb3VuZCB0aGUgZ3JlYXQgbXlzdGVyaWVzJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1RpbWUnLFxyXG4gICAgICAgIHRhYjogJ3BvbmRlcicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcblxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBidXR0b25zOiBidXR0b25zXHJcbn07IiwiLyogQ1JBRlRJTkcgUkVTT1VSQ0VTICovXHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4uL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlIH0gPSByZXF1aXJlKCcuLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4uL3N0YWdlcycpO1xyXG5cclxuXHJcbmNvbnN0IGNyYWZ0ZWRSZXNvdXJjZXMgPSB7XHJcbiAgICAnc2hhcnByb2Nrcyc6IHtcclxuICAgICAgICB0ZXh0OiAnU2hhcnAgUm9ja3MnLFxyXG4gICAgICAgIGlkOiAnY3JhZnRTaGFycHJvY2tzQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdyb2Nrcyc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ3JhZnQgYSByb2NrIHVzaW5nIG5vdGhpbmcgYnV0IHJvY2tzIScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdSb2NrczogNScsXHJcbiAgICAgICAgY2xhc3M6ICdjcmFmdFJvY2tzJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdyb3BlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRSb3BlQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICd2aW5lcyc6IDMgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnVGhlIGJhc2lzIG9mIGF0dGFjaGluZyB0aGluZ3MgdG8gb3RoZXIgdGhpbmdzLicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdWaW5lczogMycsXHJcbiAgICAgICAgY2xhc3M6ICdjcmFmdFJvY2tzJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdoYW5kbGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEhhbmRsZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc3RpY2tzJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTaGVhciBvZmYgdGhhdCBiYXJrIHRvIGhvbGQgaXQgYmV0dGVyJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1NoYXJwIFJvY2tzOiAxJyxcclxuICAgICAgICBjbGFzczogJ2NyYWZ0Um9ja3MnXHJcbiAgICAgICAgLy8gdG9vbDogJ1NoYXJwIFJvY2snXHJcbiAgICB9LFxyXG4gICAgJ3N0YWZmJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRTdGFmZkJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnaGFuZGxlJzogMiwgJ3JvcGUnOiAxIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1N0aWNrIHNvbWUgc2hlYXJlZCBzdGlja3MgdG9nZXRoZXInLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnSGFuZGxlczogMicsXHJcbiAgICAgICAgY2xhc3M6ICdyb3BlJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdmaXNoaW5ncm9kJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRGaXNoaW5ncm9kQnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnRmlzaGluZyBSb2QnLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3N0YWZmJzogMSwgJ3JvcGUnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwiZmlzaGluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSB3ZWFwb24gZmVhcmVkIGJ5IHVuZGVyd2F0ZXIgbGlmZScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnZmlzaGluZydcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnc3BlYXInOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFNwZWFyQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7XHJcbiAgICAgICAgICAgICdzdGFmZic6IDEsXHJcbiAgICAgICAgICAgICdzaGFycHJvY2tzJzogMSxcclxuICAgICAgICAgICAgJ3JvcGUnOiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0EgbG9uZyBhbmQgcG9pbnR5IHN0aWNrJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1N0YWZmczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdyb3BlJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdCYXJlIEhhbmRzJ1xyXG4gICAgfSxcclxuICAgICdheGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEF4ZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnaGFuZGxlJzogMSwgJ3JvcGUnOiAxLCAnc2hhcnByb2Nrcyc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJzcGVhclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnUHV0IGEgcm9jayBzdHJhaWdodCB0aHJvdWdoIHRoYXQgaGFuZGxlJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1NwZWFyczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdzcGVhcidcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAncGlja2F4ZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0UGlja2F4ZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDoge1xyXG4gICAgICAgICAgICAnaGFuZGxlJzogMSxcclxuICAgICAgICAgICAgJ3NoYXJwcm9ja3MnOiAzLFxyXG4gICAgICAgICAgICAncm9wZSc6IDEsXHJcbiAgICAgICAgICAgICdyb2Nrcyc6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJzcGVhclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU2FkbHkgbm90IG1hZGUgb2YgZGlhbW9uZHMnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnQXhlczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdzcGVhcidcclxuICAgIH0sXHJcblxyXG4gICAgJ2dsYXNzJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRHbGFzc0J1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnc2FuZCc6IDEwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnWW91IGNhbiBzZWUgcmlnaHQgdGhyb3VnaCBpdCEnLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwiZ2xhc3NCbG93aW5nXCIsXHJcbiAgICAgICAgY2xhc3M6ICdnbGFzc0Jsb3dpbmcnXHJcbiAgICB9LFxyXG4gICAgJ3BhcGVyJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRQYXBlckJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnd29vZCc6IDEyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnT3V0c291cmNlIHlvdXIgbWVtb3J5JyxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInBhcGVyXCIsXHJcbiAgICAgICAgY2xhc3M6ICdwYXBlcidcclxuICAgIH0sXHJcbiAgICAnZ29sZCc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0R29sZEJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnb3JlJzogMTAwIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwibWV0YWxXb3JraW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHllbGxvdyBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdpcm9uJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRJcm9uQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdvcmUnOiAyMCB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcIm1ldGFsV29ya2luZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoZXJlJ3Mgc29tZSBzdHVyZHktbG9va2luZyBiaXRzIGluIHRoaXMgb3JlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnbWV0YWxXb3JraW5nJ1xyXG4gICAgfSxcclxuICAgICdzaWx2ZXInOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFNpbHZlckJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnb3JlJzogNTAgfSxcclxuXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwibWV0YWxXb3JraW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlcmUncyBzb21lIHNoaW55IGdyYXkgYml0cyBpbiB0aGlzIG9yZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ21ldGFsV29ya2luZydcclxuICAgIH0sXHJcbiAgICAnYnJpY2tzJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRCcmlja3NCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ2NsYXknOiAxNSB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcImNsYXlcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJMZWF2ZSBzb21lIGNsYXkgYnkgdGhlIGZpcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdjbGF5J1xyXG4gICAgfSxcclxuICAgICdzdGVlbCc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiA1IH0gfSxcclxuICAgICdiZWFtcyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3dvb2QnOiAxMCB9IH0sXHJcbiAgICAnY3JhdGVzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IDE1IH0gfSxcclxuICAgICduYWlscyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2lyb24nOiAxIH0gfSxcclxuICAgICdzbGFicyc6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ3JvY2tzJzogMjAgfSB9LFxyXG4gICAgJ21lZGljaW5lJzogeyB2YWx1ZTogMCwgY29zdDogeyAnaGVyYnMnOiA1MCB9IH0sXHJcbiAgICAnbGVhdGhlcic6IHsgdmFsdWU6IDAsIGNvc3Q6IHsgJ2hpZGVzJzogMTAgfSB9LFxyXG4gICAgJ2NvbmNyZXRlJzogeyB2YWx1ZTogMCwgY29zdDogeyAnc2FuZCc6IDMyIH0gfSxcclxuICAgICd3b29kJzogeyB2YWx1ZTogMCwgY29zdDogeyAnc3RpY2tzJzogOCB9IH0sXHJcbiAgICAnc3RpY2tzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IC4xIH0gfSxcclxuICAgIFxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZChpZCkge1xyXG4gICAgZm9yIChjb25zdCBbYywgdmFsXSBvZiBPYmplY3QuZW50cmllcyhjcmFmdGVkUmVzb3VyY2VzKSkge1xyXG4gICAgICAgIGlmICh2YWwuaWQgPT09IGlkIHx8IHZhbC5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWcoY29uZmlnKSB7XHJcbiAgICBmb3IgKGxldCBrIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhrKTtcclxuICAgICAgICBpZiAoY3JhZnRlZFJlc291cmNlc1trXS5pZCA9PT0gY29uZmlnLmlkKSByZXR1cm4gaztcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldENyYWZ0ZWRSZXNvdXJjZXMoKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoY3JhZnRlZFJlc291cmNlcykpIHtcclxuICAgICAgICB2YWwudmFsdWUgPSAwO1xyXG4gICAgICAgIHZhbC5jcmFmdGVkT25jZSA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNyYWZ0ZWRSZXNvdXJjZXMsXHJcbiAgICBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkLFxyXG4gICAgZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWcsXHJcbiAgICByZXNldENyYWZ0ZWRSZXNvdXJjZXNcclxufTsiLCJcclxuXHJcbi8qKlxyXG4gKiBUaWVyIDEgKDQwMCBwb25kZXIpOlxyXG4gKiBcclxuICogTHVtYmVyamFja1xyXG4gKiAgKzI1JSB3b29kIHByb2R1Y3Rpb25cclxuICogICsyNSUgc3RpY2tzIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIE1pbmVyXHJcbiAqICArMjUlIHN0b25lICYgb3JlIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIEJvdGFuaXN0XHJcbiAqICArMjUlIHZpbmVzICYgaGVyYnMgJiB3aGVhdCBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBMZWFkZXJcclxuICogIDUwJSBjbG9uZSBlZmZlY3RpdmVuZXNzXHJcbiAqIFxyXG4gKiBBcmNoaXRlY3RcclxuICogIC0yNSUgYnVpbGRpbmcgY29zdFxyXG4gKiBcclxuICogXHJcbiAqIFRpZXIgMiAoMTUwMCBwb25kZXIpOlxyXG4gKiBcclxuICogVGhpbmtlclxyXG4gKiAgKzUwJSBwb25kZXIgcHJvZHVjdGlvbiBhbmQgc3RvcmFnZVxyXG4gKiAgLTI1JSBwb25kZXIgY29zdFxyXG4gKiBcclxuICogR2VuZXJhbFxyXG4gKiAgKzUwJSBjb21iYXQgc3RyZW5ndGhcclxuICogICsyNSUgY2xvbmUgZWZmZWN0aXZlbmVzc1xyXG4gKiBcclxuICogTWVyY2hhbnRcclxuICogIC0yNSUgdHJhZGUgcHJpY2VcclxuICogICsyNSUgY2hhbmNlIG9mIHJhcmUgdHJhZGVcclxuICogXHJcbiAqIEdlbmVyYWxpc3RcclxuICogICsxMCUgZ2xvYmFsIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIFNwZWNpYWxpc3RcclxuICogICsxMDAlIHNraWxsIGdhaW5cclxuICogICsxMCUgc2tpbGwgYm9udXMgdG8gcmVzb3VyY2VzXHJcbiAqIFxyXG4gKiBcclxuICogXHJcbiAqIFxyXG4gKi9cclxuY29uc3QgcGVya3MgPSB7XHJcbiAgICAndGllcjEnOiBbJ0x1bWJlcmphY2snLCAnTWluZXInLCAnQm90YW5pc3QnLCAnTGVhZGVyJywgJ0FyY2hpdGVjdCddLFxyXG4gICAgJ3RpZXIyJzogWydUaGlua2VyJywgJ0dlbmVyYWwnLCAnTWVyY2hhbnQnLCAnR2VuZXJhbGlzdCcsICdTcGVjaWFsaXN0J10sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHBlcmtzOiBwZXJrc1xyXG59OyIsImxldCBwb25kZXJzID0ge1xyXG4gICAgJ3BvbmRlcjEnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJQb25kZXIxJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMCB9LFxyXG4gICAgICAgIHRleHQ6IFwiVGhpbmsgSGFyZGVyXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiNSUgYm9vc3QgdG8gcG9uZGVyaW5nXCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcblxyXG4gICAgfSxcclxuICAgICdqb2JzLXRhYic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckpvYnMtdGFiJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAyMCB9LFxyXG4gICAgICAgIHRleHQ6IFwiVW5kZXJzdGFuZCBDbG9uaW5nXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdXaHkgYXJlIHRoZXJlIHR3byBvZiB5b3U/JyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ1Nhbml0eSAoMjAgUG9uZGVyKScsXHJcblxyXG4gICAgfSxcclxuICAgICdza2lsbHNUYWJsZSc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclNraWxsc1RhYmxlJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MCB9LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIllvdSdyZSBzdGFydGluZyB0byBsZWFybiB0aGluZ3MsIHJpZ2h0P1wiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiTm90aWNlIEltcHJvdmVtZW50XCJcclxuICAgIH0sXHJcbiAgICAnZmlzaGluZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckZpc2hpbmcnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDUwLCAnZmlzaCc6IDUwIH0sXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiV2hhdCBpZi4uLiB5b3VyIGNsb25lcyBjb3VsZCBnbyBmaXNoaW5nP1wiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiRmlzaGluZyBKb2JcIlxyXG4gICAgfSxcclxuICAgIC8vICdtaWNyb21hbmFnZW1lbnQnOiB7XHJcbiAgICAvLyAgICAgaWQ6ICdwb25kZXJNaWNyb21hbmFnZW1lbnQnLFxyXG4gICAgLy8gICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgLy8gICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCwgJ2Nsb25lcyc6IDUgfSxcclxuICAgIC8vICAgICB0ZXh0OiBcIk1pY3JvbWFuYWdlbWVudFwiLFxyXG4gICAgLy8gICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgLy8gICAgIHRvb2x0aXBEZXNjOiBcIllvdSBtYW5hZ2VkIHRvIG1ha2UgY2xvbmVzIG1hbmFnZSBlYWNoIG90aGVyLlwiXHJcbiAgICAvLyB9LFxyXG4gICAgJ2Zhc3RlclNraWxscyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckZhc3RlclNraWxscycsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogODAgfSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIlNraWxscyBJXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhpbmsgU21hcnRlci4gNSUgYm9udXMgdG8gc2tpbGwgZXhwXCJcclxuICAgIH0sXHJcbiAgICAndGhpbmtpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJUaGlua2luZycsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTUwIH0sXHJcbiAgICAgICAgdGV4dDogXCJUaGlua2luZyBKb2JcIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJMZXQgeW91ciBjbG9uZXMgc3RhcnQgdGhpbmtpbmcgZm9yIHRoZW1zZWx2ZXMuXCJcclxuXHJcbiAgICB9LFxyXG4gICAgJ2Zhc3RlclJlc291cmNlR2Fpbic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckZhc3RlclJlc291cmNlR2FpbicsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTIwIH0sXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJQcm9kdWN0aXZpdHkgSVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkp1c3Qgd29yayBoYXJkZXIuIDUlIGJvbnVzIHRvIHJlc291cmNlIGdhaW5cIlxyXG4gICAgfSxcclxuICAgICdtZXRhbFdvcmtpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJNZXRhbFdvcmtpbmcnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiTWV0YWwgV29ya2luZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlN0YXJ0IHByb2Nlc3NpbmcgdGhhdCBvcmVcIixcclxuICAgICAgICAvLyBjb3N0OiBbeyBtYXRlcmlhbDogJ3BvbmRlcicsIGFtb3VudDogMTAwIH0sIHsgbWF0ZXJpYWw6ICdvcmUnLCBhbW91bnQ6IDUwIH0sIHsgbWF0ZXJpYWw6ICdyb2NrcycsIGFtb3VudDogNTAgfV1cclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMDAsICdvcmUnOiA1MCwgJ3JvY2tzJzogNTAgfSxcclxuICAgIH0sXHJcbiAgICAnZ2xhc3NCbG93aW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyR2xhc3NCbG93aW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiAnR2xhc3MgQmxvd2luZycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdIdWZmIGFuZCBwdWZmIGFuZCBtYWtlIGEgY29vbCB2YXNlJyxcclxuICAgICAgICBjb3N0OiB7ICdzYW5kJzogMjAsICdwb25kZXInOiA4MCB9XHJcbiAgICB9LFxyXG4gICAgJ29yZ2FuaXphdGlvbic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlck9yZ2FuaXphdGlvbicsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogJ09yZ2FuaXplZCBTdG9yYWdlJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ09yZ2FuaXplIHlvdXIgc3RvcmFnZSBieSBncm91cHMnLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCB9XHJcbiAgICB9LFxyXG4gICAgJ3BhcGVyJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUGFwZXInLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6ICdQYXBlciBQcm9jZXNzaW5nJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NtYXNoIGRvd24gc29tZSB3b29kIGludG8gcGFwZXInLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCwgJ3dvb2QnOiAxMDAgfVxyXG4gICAgfSxcclxuICAgICdhdXRvQ2xvbmUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJBdXRvQ2xvbmUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQXV0byBDbG9uZVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkF1dG9tYXRpY2FsbHkgcHJvZHVjZSBjbG9uZXNcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxNDAsICdjbG9uZXMnOiAyMCB9LFxyXG4gICAgfSxcclxuXHJcbiAgICAnZWZmZWN0aXZlQnVpbGRpbmdzJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyRWZmZWN0aXZlQnVpbGRpbmdzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkJ1aWxkaW5ncyBJXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSW5jcmVhc2UgYnVpbGRpbmcgZWZmZWN0cyBieSAzJVwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE4MCB9LFxyXG4gICAgfSxcclxuICAgICdhZ3JpY3VsdHVyZSc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckFncmljdWx0dXJlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkFncmljdWx0dXJlXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRmluZCBzb21lIHNlZWRzIGZyb20gYWxsIHRob3NlIHBsYW50c1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE4MCB9XHJcbiAgICB9LFxyXG4gICAgJ2NvbWJhdFRhYic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckNvbWJhdFRhYicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJDb21iYXRcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJJcyB0aGVyZSBhbnlvbmUgdG8gc3BhciB3aXRoIGJlc2lkZXMgeW91P1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwMCwgJ3NwZWFyJzogMTAwIH1cclxuICAgIH0sXHJcbiAgICAnaHVudGluZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckh1bnRpbmcnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiSHVudGluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkF0IGxlYXN0IHRoZXJlIGFyZSBhbmltYWxzXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMjAwLCAnZmlzaCc6IDUwIH1cclxuICAgIH0sXHJcbiAgICAncGVya3NUYWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJQZXJrc1RhYicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogJ1BlcmtzJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01heWJlIHlvdSBhcyB0aGUgb3JpZ2luYWwgc2hvdWxkIHNwZWNpYWxpemUnLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDQwMCB9XHJcbiAgICB9LFxyXG4gICAgLy8gJ2F1dG9jcmFmdCc6IHtcclxuICAgIC8vICAgICBpZDogXCJwb25kZXJBdXRvY3JhZnRcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICB0ZXh0OiBcIkF1dG8gQ3JhZnRcIixcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJBdXRvbWF0aWNhbGx5IGNyYWZ0IHJlc291cmNlcyB3aGVuIHRoZXkgcmVhY2ggdGhlIHN0b3JhZ2UgbGltaXRcIixcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiA0MDAsICd3b29kJzogMTAwMCwgJ3JvY2tzJzogNTAwLCAnd2hlYXQnOiAxMDAwIH1cclxuICAgIC8vIH0sXHJcbiAgICAnZmFjdG9yeVRhYic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckZhY3RvcnlUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRmFjdG9yaWVzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQXNjZW5kIHRvIHRoZSBuZXh0IGxldmVsIG9mIGVjb25vbXlcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MDAsICdnb2xkJzogMTAsICd3b29kJzogMTAwMCwgJ3doZWF0JzogMTAwMCwgJ3JvY2tzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ3BvbmRlcjInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJQb25kZXIyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5rIGV2ZW4gaGFyZGVyXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiNSUgYm9vc3QgdG8gcG9uZGVyaW5nXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMzAwIH1cclxuICAgIH0sXHJcbiAgICAncG9uZGVyMyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclBvbmRlcjMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiVGhpbmsgaGFyZGVzdFwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDYwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2JpZ2dlclNoZWx0ZXInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJTaGVsdGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkV4cGFuZCBTaGVsdGVyXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2hlbHRlcnMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAwLCAnc3RpY2tzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2JpZ2dlckh1dCc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckJpZ2dlckh1dCcsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJFeHBhbmQgSHV0XCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSHV0cyBjYW4gaG91c2UgMSBtb3JlIGNsb25lIGVhY2hcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA3NTAsICdzdGlja3MnOiAxNTAwLCAndmluZXMnOiAxMDAwIH1cclxuICAgIH0sXHJcbiAgICAnYmlnZ2VySG91c2UnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJIb3VzZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJUd28tc3RvcnkgaG91c2VzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSG91c2VzIGNhbiBob3VzZSAyIG1vcmUgY2xvbmVzIGVhY2hcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMDAwLCAnd29vZCc6IDIwMDAsICdyb2Nrcyc6IDIwMDAgfVxyXG4gICAgfSxcclxuICAgICdiaWdnZXJUZWVwZWUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJUZWVwZWUnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRG91YmxlIGRpYW1ldGVyIFRlZXBlZXNcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUZWVwZWVzIGNhbiBob3VzZSA0IG1vcmUgY2xvbmVzIGVhY2hcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxMjUwLCAnd29vZCc6IDMwMDAsICdoaWRlcyc6IDE1MDAgfVxyXG4gICAgfSxcclxuICAgICdldmVuQmlnZ2VyU2hlbHRlcic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckV2ZW5CaWdnZXJTaGVsdGVyJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkV4cGFuZCBTaGVsdGVyIEFnYWluXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiU2hlbHRlcnMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTUwMCwgJ3N0aWNrcyc6IDMwMDAsICdmaXNoJzogMTAwMCB9XHJcbiAgICB9LFxyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVzZXRQb25kZXJzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHBvbmRlcnMpKSB7XHJcbiAgICAgICAgdmFsLmlzUG9uZGVyZWQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBwb25kZXJzOiBwb25kZXJzLFxyXG4gICAgcmVzZXRQb25kZXJzXHJcbn07IiwiY29uc3QgcHJlc3RpZ2UgPSB7XHJcbiAgICAnbWF4Q2xvbmVzJzoge1xyXG4gICAgICAgIHRleHQ6ICdDcmFtcGVkJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01heCBDbG9uZXMgKCsxKScsXHJcbiAgICAgICAgY29zdDogMixcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdjbG9uZUJvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdIYW5keW1hbicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdDbG9uZSBQcm9kdWN0aXZpdHkgKCs1JSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyaW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ1BpY2tlcicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdHYXRoZXJpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnbWFzb25yeUJvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdSb2NrZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnTWFzb25yeSBFZmZpY2llbmN5ICgrMTAlKScsXHJcbiAgICAgICAgY29zdDogMSxcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdjYXJwZW50cnlCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnQ2hvcHBlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdDYXJwZW50cnkgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAndGhpbmtpbmdCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnV2l6ZW5lZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdUaGlua2luZyBFZmZpY2llbmN5ICgrMTAlKScsXHJcbiAgICAgICAgY29zdDogMSxcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdmYXJtaW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ1BydW5lZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGYXJtaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2Zpc2hpbmdCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnSG9va2VkJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0Zpc2hpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnaHVudGluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdUcmFja2VyJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0h1bnRpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2hlYXBlckJ1aWxkaW5ncyc6IHtcclxuICAgICAgICB0ZXh0OiAnUmlja2V0eScsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdCdWlsZGluZyBDb3N0ICgtNSUpJyxcclxuICAgICAgICBjb3N0OiAyLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ3N0b3JhZ2VTcGFjZSc6IHtcclxuICAgICAgICB0ZXh0OiAnU3R1ZmZlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTdG9yYWdlIFNwYWNlICgrNSUpJyxcclxuICAgICAgICBjb3N0OiAyLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBoYXNQcmVzdGlnZShwcmVzKSB7XHJcbiAgICByZXR1cm4gZ2V0TGV2ZWxPZlByZXN0aWdlKHByZXMpID4gMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TGV2ZWxPZlByZXN0aWdlKHByZXMpIHtcclxuICAgIHJldHVybiBwcmVzdGlnZVtwcmVzXS5sZXZlbDtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHByZXN0aWdlLFxyXG4gICAgaGFzUHJlc3RpZ2UsXHJcbiAgICBnZXRMZXZlbE9mUHJlc3RpZ2VcclxufTsiLCIvLyBTdGF0ZSBvZiBlYWNoIHJlc291cmNlXHJcblxyXG4vLyBUT0RPOiBBREQgUkVRVUlSRU1FTlRTIEZPUiBFQUNIIFRPIE1BS0UgVEhFTSBWSVNJQkxFXHJcbi8vIG9yIGp1c3QgZGlzcGxheSB0aGVtIHdoZW4geW91IGdldCB5b3VyIGZpcnN0IG9uZT9cclxuY29uc3QgcmVzb3VyY2VzID0ge1xyXG4gICAgXCJjbG9uZXNcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJtYWtlQ2xvbmVcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgbWF4OiAwXHJcbiAgICB9LFxyXG5cclxuICAgIFwic3RpY2tzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyU3RpY2tzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogdHJ1ZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4ax8JOAnCBHYXRoZXJpbmcgU3RpY2tzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThrEgR2F0aGVyIFN0aWNrc1wiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgJ0nLFxyXG4gICAgICAgIG1heDogNTBcclxuICAgIH0sXHJcbiAgICBcInZpbmVzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyVmluZXNcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk42v8JOAqiBHYXRoZXJpbmcgVmluZXNcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JONryBHYXRoZXIgVmluZXNcIixcclxuICAgICAgICBcInRvb2xzXCI6IFt7IFwidG9vbFwiOiBcIkF4ZVwiLCBcInZhbFwiOiAxLjUgfV0sXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqicsXHJcbiAgICAgICAgbWF4OiA1MFxyXG4gICAgfSxcclxuICAgIFwicm9ja3NcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJSb2Nrc1wiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTipbwk4CpIEdhdGhlcmluZyBSb2Nrc1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4qWIEdhdGhlciBSb2Nrc1wiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgIG1heDogMzBcclxuICAgIH0sXHJcbiAgICBcImZpc2hcIjoge1xyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJGaXNoXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOGnfCThp/wk4aeIPCTgYMgR29uZSBGaXNoaW5nXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCThp3wk4af8JOGniBHbyBGaXNoXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIGVtb2ppOiAn8JOBgycsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJTcGVhclwiLCBcInZhbFwiOiAxIH0sIHsgXCJ0b29sXCI6IFwiRmlzaGluZyBSb2RcIiwgXCJ2YWxcIjogMiB9XSxcclxuICAgICAgICBtYXg6IDEwXHJcbiAgICB9LFxyXG4gICAgXCJ3b29kXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyV29vZFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgKggQ2hvcHBpbmcgV29vZFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4yPIENob3AgV29vZFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqCcsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJBeGVcIiwgXCJ2YWxcIjogMS41IH0sIHsgXCJ0b29sXCI6IFwiQ2hhaW5zYXdcIiwgXCJ2YWxcIjogMyB9XSxcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgbWF4OiA0MFxyXG4gICAgfSxcclxuICAgIFwicG9uZGVyXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyUG9uZGVyXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAgSBQb25kZXJpbmdcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAgSBQb25kZXJcIixcclxuICAgICAgICBlbW9qaTogJ/CTgIEnLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJvcmVcIjoge1xyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyT3JlXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOJuPCTgYQgTWluaW5nIE9yZVwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4m4IE1pbmUgT3JlXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4GEJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJzYW5kXCI6IHtcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclNhbmRcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CpIFNjb29waW5nIFNhbmRcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAqSBTY29vcCBTYW5kXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgXCJ3aGVhdFwiOiB7XHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJXaGVhdFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgKkgSGFydmVzdGluZyBXaGVhdFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4CpIEhhcnZlc3QgV2hlYXRcIixcclxuICAgICAgICBlbW9qaTogJ/CTgJ0nLFxyXG4gICAgICAgIG1heDogMjBcclxuICAgIH0sXHJcbiAgICAnZnJlc2h3YXRlcic6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJGcmVzaHdhdGVyJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2hpZGVzJzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckhpZGVzJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAjicsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcblxyXG4gICAgfSxcclxuICAgICdjbGF5Jzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckNsYXknLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgICdkZWZhdWx0VGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnYmVycmllcyc6IHtcclxuXHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyQmVycmllcycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdoZXJicyc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJIZXJicycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdnYW1lJzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckdhbWUnLFxyXG4gICAgICAgICdpc0dldHRpbmcnOiBmYWxzZSxcclxuICAgICAgICAnaXNWaXNpYmxlJzogZmFsc2UsXHJcbiAgICAgICAgJ2FjdGl2ZVRleHQnOiAn8JODmvCTgI4gSHVudGluZycsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ/CTgI4gSHVudCcsXHJcbiAgICAgICAgZW1vamk6ICfwk4COJyxcclxuICAgICAgICAnbWF4JzogNTBcclxuICAgIH0sXHJcbiAgICAnaHVza3MnOiB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgaWQ6ICdnYXRoZXJIdXNrcycsXHJcbiAgICAgICAgaXNHZXR0aW5nOiBmYWxzZSxcclxuICAgICAgICBpc1Zpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZVRleHQ6ICcnLFxyXG4gICAgICAgIGRlZmF1bHRUZXh0OiBcIlwiLFxyXG4gICAgICAgIGVtb2ppOiAnWCcsXHJcbiAgICAgICAgJ21heCc6IDEwMDBcclxuICAgIH0sXHJcbiAgICAndmlvbGVuY2UnOiB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgaWQ6ICdnYXRoZXJWaW9sZW5jZScsXHJcbiAgICAgICAgaXNHZXR0aW5nOiBmYWxzZSxcclxuICAgICAgICBpc1Zpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZVRleHQ6ICcnLFxyXG4gICAgICAgIGRlZmF1bHRUZXh0OiAnJyxcclxuICAgICAgICBlbW9qaTogJycsXHJcbiAgICAgICAgbWF4OiAxMDBcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gaXNSZXNvdXJjZShyZXNvdXJjZSkge1xyXG4gICAgLy8gcmV0dXJuIHJlc291cmNlc1tyZXNvdXJjZV0gIT09IG51bGw7XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gcmVzb3VyY2VzO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldFJlc291cmNlQ29uZmlnQnlJZChpZCkge1xyXG4gICAgZm9yIChsZXQgciBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICBpZiAocmVzb3VyY2VzW3JdLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2VzW3JdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFJlc291cmNlcygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgdmFsLnZhbHVlID0gMDtcclxuICAgIH1cclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4gICAgaXNSZXNvdXJjZSxcclxuICAgIGdldFJlc291cmNlQ29uZmlnQnlJZCxcclxuICAgIHJlc2V0UmVzb3VyY2VzXHJcbn07IiwiY29uc3Qgc2tpbGxzID0ge1xyXG4gICAgZ2F0aGVyaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3N0aWNrcycsICd2aW5lcycsICdzYW5kJywgJ2hlcmJzJywgJ2JlcnJpZXMnXVxyXG4gICAgfSxcclxuICAgIG1hc29ucnk6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsncm9ja3MnLCAnb3JlJywgJ2NsYXknXSxcclxuICAgICAgICBuZWVkVG9vbHM6IFt7ICdQaWNrYXhlJzogWydvcmUnXSB9XVxyXG4gICAgfSxcclxuICAgIGNhcnBlbnRyeToge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWyd3b29kJywgJ2hhbmRsZScsICdzdGFmZicsICdmaXNoaW5ncm9kJ10sXHJcbiAgICAgICAgbmVlZFRvb2xzOiBbeyAnQXhlJzogWyd3b29kJ10gfV1cclxuICAgIH0sXHJcbiAgICB0aGlua2luZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydwb25kZXInXVxyXG4gICAgfSxcclxuICAgIC8vIHNtaXRoaW5nOiB7XHJcbiAgICAvLyAgICAgZXhwOiAwLFxyXG4gICAgLy8gICAgIGxldmVsOiAwLFxyXG4gICAgLy8gICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2F4ZScsICdwaWNrYXhlJywgJ3NwZWFyJywgJ2dsYXNzJywgJ2lyb24nLCAnc2lsdmVyJywgJ2dvbGQnXVxyXG4gICAgLy8gfSxcclxuICAgIGZhcm1pbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnd2hlYXQnLCAnZnJlc2h3YXRlciddXHJcbiAgICB9LFxyXG4gICAgY29tYmF0OiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3Zpb2xlbmNlJ11cclxuICAgIH0sXHJcbiAgICBmaXNoaW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ2Zpc2gnXVxyXG4gICAgfSxcclxuICAgIGh1bnRpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnaGlkZXMnLCAnZ2FtZSddXHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHNraWxsczogc2tpbGxzXHJcbn07IiwiY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzLCByZXNldENyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzLCByZXNldEJ1aWxkaW5ncyB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbmNvbnN0IHsgcG9uZGVycywgcmVzZXRQb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzLCByZXNldFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5cclxuY29uc3QgeyBzYXZlR2FtZSwgbG9hZEdhbWUgfSA9IHJlcXVpcmUoXCIuL3NhdmluZ1wiKTtcclxuY29uc3QgeyBnZW5lcmF0ZVRvb2x0aXBDb3N0LCBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zLCBpbmNyZWFzZU1hdGVyaWFsLCBjcmFmdEFsbFJlc291cmNlcywgY3JhZnRSZXNvdXJjZSwgY2FsY0luY3JlYXNlLCB1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMsIGluY3JlYXNlTWF4IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1eU1heEJ1aWxkaW5ncywgYnV5QnVpbGRpbmcsIGNyZWF0ZUJ1aWxkaW5nQnV0dG9uIH0gPSByZXF1aXJlKCcuL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IGhhc1BlcmssIHNlbGVjdEFiaWxpdHksIHJlc2V0UGVya3MgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBjbGVhclNpZGViYXIgfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBidXlGYWN0b3J5LCBhdHRlbXB0TWFudWZhY3R1cmUsIHVwZ3JhZGVCdWxrIH0gPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkLCBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL3BvbmRlclwiKTtcclxuY29uc3QgeyBoYXNUb29sLCBhZGRUb29sIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgZ2V0QXRlRmlzaCwgc2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcbmNvbnN0IHsgZHJhd0FsbENvbm5lY3Rpb25zLCB1cGRhdGVUb3RhbCwgY2xlYXJKb2JBc3NpZ25tZW50cywgcmVzZXRBbGxKb2JzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UsIHJlc2V0U3RhZ2VzIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZSgnLi9yZWNhbGNNYXhDbG9uZXMnKTtcclxuY29uc3QgeyBpbml0aWFsaXplUmVzb3VyY2VUYWdzLCB1cGRhdGVTaWRlYmFyLCB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHRyaWdnZXJGbG9hdFVwVGV4dCB9ID0gcmVxdWlyZSgnLi90cmlnZ2VyRmxvYXRVcFRleHQnKTtcclxuY29uc3QgeyB1cGRhdGVCb3VuY2VBbmltYXRpb24gfSA9IHJlcXVpcmUoJy4vdXBkYXRlQm91bmNlQW5pbWF0aW9uJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG9vbHRpcCwgaGlkZVRvb2x0aXAgfSA9IHJlcXVpcmUoJy4vdXBkYXRlVG9vbHRpcCcpO1xyXG5jb25zdCB7IGNhbkNyYWZ0IH0gPSByZXF1aXJlKCcuL2NhbkNyYWZ0Jyk7XHJcbmNvbnN0IHsgY2FsY3VsYXRlV2luQ2hhbmNlLCBjb21iYXQsIHJlZnJlc2hWYWx1ZXMsIHN3aXRjaFN0YW5jZSB9ID0gcmVxdWlyZSgnLi9jb21iYXQnKTtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRUb3RhbFRpbWUodGltZSkge1xyXG4gICAgdG90YWxfdGltZSA9IHRpbWU7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBHQVRIRVJJTkcgTUFURVJJQUxTKi9cclxuY29uc3Qgc2lkZWJhclBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG5mdW5jdGlvbiBzdG9wQWxsR2F0aGVyaW5nKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpIHtcclxuICAgICAgICB2YWwuaXNHZXR0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZ2F0aGVyXCIgKyBjYXBpdGFsaXplRmlyc3Qoa2V5KSk7XHJcbiAgICAgICAgaWYgKHJCdXR0b24pIHtcclxuICAgICAgICAgICAgckJ1dHRvbi50ZXh0Q29udGVudCA9IHZhbC5kZWZhdWx0VGV4dDtcclxuICAgICAgICAgICAgckJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdnYXRoZXJpbmcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCBzaWRlYmFyIHRvIG5vdCBib2xkXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhclRleHQgPSBzaWRlYmFyUGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXNvdXJjZS0nICsga2V5KTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBlbW9qaUdhdGhlckRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbW9qaUdhdGhlckRpc3BsYXknKTtcclxuZnVuY3Rpb24gdG9nZ2xlUmVzb3VyY2UocmVzb3VyY2VLZXkpIHtcclxuICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VzW3Jlc291cmNlS2V5XTtcclxuXHJcbiAgICAvLyBlbW9qaURpdi50ZXh0Q29udGVudCA9ICfwk4auJztcclxuICAgIGNvbnN0IHNpZGViYXJQYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc291cmNlc1wiKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gc2lkZWJhclBhcmVudC5xdWVyeVNlbGVjdG9yKCcjcmVzb3VyY2UtJyArIHJlc291cmNlS2V5KTtcclxuICAgIGNvbnN0IHJlc291cmNlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dhdGhlcicgKyByZXNvdXJjZUtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlc291cmNlS2V5LnNsaWNlKDEpKTtcclxuICAgIGVtb2ppR2F0aGVyRGl2LnRleHRDb250ZW50ID0gJ/CTgJ8nOyAvLyBEZWZhdWx0IGVtb2ppIPCTgJ9cclxuXHJcblxyXG4gICAgaWYgKCFyZXNvdXJjZS5pc0dldHRpbmcpIHtcclxuICAgICAgICBzdG9wQWxsR2F0aGVyaW5nKCk7IC8vIFN0b3AgYWxsIGdhdGhlcmluZyBhY3Rpb25zXHJcbiAgICAgICAgcmVzb3VyY2UuaXNHZXR0aW5nID0gdHJ1ZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24udGV4dENvbnRlbnQgPSByZXNvdXJjZS5hY3RpdmVUZXh0O1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGVtb2ppR2F0aGVyRGl2LnRleHRDb250ZW50ID0gcmVzb3VyY2UuZW1vamk7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzb3VyY2UuZW1vamkpO1xyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2dhdGhlcmluZycpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvdXJjZS5pc0dldHRpbmcgPSBmYWxzZTtcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdnYXRoZXJpbmcnKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24udGV4dENvbnRlbnQgPSByZXNvdXJjZS5kZWZhdWx0VGV4dDtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBCVVRUT05TIEdFTkVSQVRFICovXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1dHRvbnMoKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIGJ1dHRvbnNcIik7XHJcbiAgICBjb25zb2xlLnRyYWNlKCk7XHJcbiAgICAvLyBDcmVhdGUgdGhlIGNvbHVtbnNcclxuXHJcblxyXG4gICAgZm9yIChsZXQgYnVpbGRpbmdLZXkgaW4gYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQnVpbGRpbmdCdXR0b24oYnVpbGRpbmdLZXksIGJ1aWxkaW5ncyk7XHJcbiAgICAgICAgYnV0dG9uc1tidWlsZGluZ0tleV0gPSBidXR0b247XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJNYWRlIGJ1dHRvbiBmb3IgXCIgKyBidWlsZGluZ0tleSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY3JlYXRlQ29sdW1ucyA9IChwYXJlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBjb2wxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29uc3QgY29sMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnN0IGNvbDMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29sMS5zdHlsZS53aWR0aCA9ICczMy4zMyUnO1xyXG4gICAgICAgIGNvbDIuc3R5bGUud2lkdGggPSAnMzMuMzMlJztcclxuICAgICAgICBjb2wzLnN0eWxlLndpZHRoID0gJzMzLjMzJSc7XHJcblxyXG4gICAgICAgIGNvbDEuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgIGNvbDIuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgIGNvbDMuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG5cclxuICAgICAgICBjb2wxLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICBjb2wyLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICBjb2wzLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgLy8gcGFyZW50LnN0eWxlLmRpc3BsYXkgPSAnZmxleDsnICAvLyBTZXQgcGFyZW50IHRvIGJlIGEgZmxleCBjb250YWluZXJcclxuXHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMyk7XHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMik7XHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMSk7XHJcblxyXG4gICAgICAgIHJldHVybiBbY29sMSwgY29sMiwgY29sM107XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHRhYnNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpO1xyXG4gICAgY29uc3QgcHJvZHVjdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBleHBlcmltZW50Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4cGVyaW1lbnRUYWInKS5xdWVyeVNlbGVjdG9yKCcuYnV0dG9uLWNvbHVtbnMnKTtcclxuICAgIGNvbnN0IHBvbmRlckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb25kZXJUYWInKTtcclxuICAgIC8vIGNvbnN0IGpvYkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2JzVGFiJyk7XHJcbiAgICAvLyBZb3UgY2FuIGFkZCBtb3JlIGNvbnRhaW5lcnMgZm9yIGRpZmZlcmVudCB0YWJzIGFzIG5lZWRlZFxyXG5cclxuICAgIC8vIGNvbnN0IHByb2R1Y3Rpb25Db2x1bW5zID0gY3JlYXRlQ29sdW1ucyhwcm9kdWN0aW9uQ29udGFpbmVyKTtcclxuICAgIGNvbnN0IGV4cGVyaW1lbnRDb2x1bW5zID0gY3JlYXRlQ29sdW1ucyhleHBlcmltZW50Q29udGFpbmVyKTtcclxuICAgIGNvbnN0IHBvbmRlckNvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKHBvbmRlckNvbnRhaW5lcik7XHJcbiAgICAvLyBjb25zdCBqb2JDb2x1bW5zID0gY3JlYXRlQ29sdW1ucyhqb2JDb250YWluZXIpO1xyXG4gICAgLy8gU2ltaWxhcmx5LCBjcmVhdGUgY29sdW1ucyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuXHJcbiAgICBsZXQgcHJvZHVjdGlvbkNvbHVtbkluZGV4ID0gMTtcclxuICAgIGxldCBleHBlcmltZW50Q29sdW1uSW5kZXggPSAwO1xyXG4gICAgbGV0IHBvbmRlckNvbHVtbkluZGV4ID0gMDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCBqb2JDb2x1bW5JbmRleCA9IDA7XHJcblxyXG4gICAgLy8gQWRkIGNvdW50ZXJzIGZvciBvdGhlciB0YWJzIGFzIG5lZWRlZFxyXG5cclxuICAgIGZvciAobGV0IGtleSBpbiBidXR0b25zKSB7XHJcbiAgICAgICAgY29uc3QgYnRuID0gYnV0dG9uc1trZXldO1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5pZCA9IGtleTtcclxuICAgICAgICBidXR0b25FbGVtZW50LmNsYXNzTmFtZSA9IGJ0bi5jbGFzcztcclxuICAgICAgICBidXR0b25FbGVtZW50LnRleHRDb250ZW50ID0gYnRuLnRleHQuc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcblxyXG4gICAgICAgIC8vIGJ1dHRvbkVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgaWYgKGJ0bi50b29sdGlwRGVzYykgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgYnRuLnRvb2x0aXBEZXNjKTtcclxuICAgICAgICBpZiAoYnRuLnRvb2x0aXBFZmZlY3QpIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZWZmZWN0JywgYnRuLnRvb2x0aXBFZmZlY3QpO1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCd1bmxvY2snLCBidG4udW5sb2NrKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJywgYnRuLmRhdGFfYnVpbGRpbmcpO1xyXG4gICAgICAgIC8vIGlmIHRoaXMgcmVzb3VyY2UgaXNuJ3QgdW5sb2NrZWQsIGhpZGUgaXRcclxuICAgICAgICAvLyBpZiAoIWJ0bi5pc1Zpc2libGUpIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBidXR0b24gY29ycmVzcG9uZHMgdG8gYSBjcmFmdGVkIHJlc291cmNlIHVzaW5nIHRoZSBJRFxyXG4gICAgICAgIGNvbnN0IGNyYWZ0ZWRSZXNvdXJjZSA9IE9iamVjdC52YWx1ZXMoY3JhZnRlZFJlc291cmNlcykuZmluZChyZXNvdXJjZSA9PiByZXNvdXJjZS5pZCA9PT0ga2V5KTtcclxuXHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZSkge1xyXG4gICAgICAgICAgICBidG4udG9vbHRpcENvc3QgPSBnZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZS5jb3N0KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBidG4udG9vbHRpcENvc3QpO1xyXG5cclxuICAgICAgICBpZiAoYnRuLnNob3dUYWIpIHtcclxuICAgICAgICAgICAgYnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNob3dUYWIoYnRuLnNob3dUYWIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTd2l0Y2hpbmcgdG8gdGFiOiBcIiArIGJ0bi5zaG93VGFiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFwcGVuZCB0byB0aGUgYXBwcm9wcmlhdGUgY29sdW1uIGJhc2VkIG9uIHRoZSB0YWIgcHJvcGVydHlcclxuICAgICAgICBpZiAoYnRuLnRhYiA9PT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIC8vc3R5bGU9J2dyaWQtY29sdW1uOiR7Y29sfTsgZ3JpZC1yb3c6JHtyb3d9O1xyXG4gICAgICAgICAgICBidXR0b25FbGVtZW50LnN0eWxlLmdyaWRDb2x1bW4gPSBwcm9kdWN0aW9uQ29sdW1uSW5kZXgudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgLy8gYnV0dG9uRWxlbWVudC5zdHlsZS5ncmlkUm93ID0gJzAnO1xyXG4gICAgICAgICAgICBwcm9kdWN0aW9uQ29sdW1uSW5kZXggPSAocHJvZHVjdGlvbkNvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG4gICAgICAgICAgICBwcm9kdWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBwcm9kdWN0aW9uQ29sdW1uc1twcm9kdWN0aW9uQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBwcm9kdWN0aW9uQ29sdW1uSW5kZXggPSAocHJvZHVjdGlvbkNvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdleHBlcmltZW50Jykge1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uc1tleHBlcmltZW50Q29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uSW5kZXggPSAoZXhwZXJpbWVudENvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnRuLnRhYiA9PT0gJ3RhYnMnKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGFic0NvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgICAgIHBvbmRlckNvbHVtbnNbcG9uZGVyQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBwb25kZXJDb2x1bW5JbmRleCA9IChwb25kZXJDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdqb2InKSB7XHJcbiAgICAgICAgICAgIC8vIGpvYkNvbHVtbnNbam9iQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBqb2JDb2x1bW5JbmRleCA9IChqb2JDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ0bi50YWIpLmFwcGVuZENoaWxkKGJ0bik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCBtb3JlIGNvbmRpdGlvbnMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwIGZvciBidWlsZGluZ3NcclxuICAgICAgICBjb25zdCBidWlsZGluZyA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChidWlsZGluZyA9PiBidWlsZGluZyA9PT0ga2V5KTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnVpbGRpbmcsIGtleSk7XHJcbiAgICAgICAgICAgIC8vIGJ0bi50b29sdGlwQ29zdCA9IGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdChidWlsZGluZ3NbYnVpbGRpbmddLmNvc3QpO1xyXG4gICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXksIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEhpZGUgdGhlIGJ1dHRvbnMgd2Ugc2hvdWxkbid0IHNlZSB5ZXRcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghYnRuLnJlcXVpcmVtZW50KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkVsZW1lbnQsIGJ0bi5yZXF1aXJlbWVudCgpKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIHdpdGggcmVxdWlyZW1lbnQgd2hpbGUgZ2VuZXJhdGluZyBidXR0b25zOiAnLCBidG4sIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCB0b29sc1RvU3RhZ2VzID0ge1xyXG4gICAgJ1NoYXJwUm9ja3MnOiAnY3JhZnRSb2NrcycsXHJcbiAgICAnU3BlYXInOiAnZmlzaGluZycsXHJcbiAgICBcIkZpc2hpbmdSb2RcIjogJ2Zpc2hpbmcnLFxyXG4gICAgJ0F4ZSc6ICd3b29kJyxcclxuICAgIFwiUGlja2F4ZVwiOiAnb3JlJ1xyXG59O1xyXG5cclxuLy8gVXBkYXRlIHZpc2liaWxpdHkgb2YgYXNzZXRzXHJcbmNvbnN0IHZpc2liaWxpdHlSdWxlcyA9IFtcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKFwic3RpY2tzXCIsIHJlc291cmNlcykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKFwic3RpY2tcIilcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnc3RpY2tzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCd2aW5lcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdyb2NrcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoXCJyb2Nrc1wiLCByZXNvdXJjZXMpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7IG1ha2VWaXNpYmxlKFwidGFiLWJ1dHRvblwiKTsgbWFrZVZpc2libGUoJ2NyYWZ0Um9ja3MnKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnc3BlYXInLCBjcmFmdGVkUmVzb3VyY2VzKSA+IDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnc3BlYXInKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbChcImZpc2hcIiwgcmVzb3VyY2VzKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2Zpc2hpbmcnKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBoYXNUb29sKFwiQXhlXCIpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3dvb2QnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgncm9wZScpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgncm9wZScpXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdmaXNoJywgcmVzb3VyY2VzKSA+PSA1ICYmICFnZXRBdGVGaXNoKCksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnZWF0RmlzaCcpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0QXRlRmlzaCgpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4geyBtYWtlVmlzaWJsZSgnY2xvbmUnKTsgbWFrZVZpc2libGUoJ3BvbmRlci10YWInKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ3BvbmRlckZpbmlzaCcpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbmF2aWdhdGVUbygnc3RhZ2UyLmh0bWwnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSB8fCBpc1BvbmRlcmVkKCdiaWdnZXJIdXQnKSB8fCBpc1BvbmRlcmVkKCdiaWdnZXJIb3VzZScpIHx8IGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpIHx8IGlzUG9uZGVyZWQoJ2V2ZW5CaWdnZXJTaGVsdGVyJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiByZWNhbGNNYXhDbG9uZXMoKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdjbG9uZXMnKSA+PSA0MCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdwcmVzdGlnZScpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ2NsYXknKSA+IDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnY2xheScpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGUtYmFzaWNzJykgJiYgaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBpbml0aWFsaXplUmVzb3VyY2VUYWdzKHRydWUpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gcGFzc2VkU3RhZ2UoJ2NvbWJhdFRhYicpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gY2FsY3VsYXRlV2luQ2hhbmNlKClcclxuICAgIH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gdmlzaWJpbGl0eVJ1bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgY29uc3QgcnVsZSA9IHZpc2liaWxpdHlSdWxlc1tpXTtcclxuICAgICAgICBpZiAocnVsZS5jb25kaXRpb24oKSkge1xyXG4gICAgICAgICAgICBydWxlLmFjdGlvbigpO1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHJ1bGUgZnJvbSB0aGUgYXJyYXlcclxuICAgICAgICAgICAgdmlzaWJpbGl0eVJ1bGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgdG9vbCBpbiB0b29sc1RvU3RhZ2VzKSB7XHJcbiAgICAgICAgaWYgKCFoYXNUb29sKHRvb2wpICYmIGdldENyYWZ0ZWRSZXNvdXJjZSh0b29sKSA+IDApIHtcclxuICAgICAgICAgICAgYWRkVG9vbCh0b29sKTtcclxuICAgICAgICAgICAgbWFrZVZpc2libGUodG9vbHNUb1N0YWdlc1t0b29sXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSgpO1xyXG4gICAgICAgIC8vIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG4gICAgICAgIGlmIChjdXJyZW50SG92ZXJCdXR0b24gIT09IG51bGwpIHVwZGF0ZVRvb2x0aXAoY3VycmVudEhvdmVyQnV0dG9uKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIE1VU0lDIE1BTkFHRVJcclxuXHJcbmNvbnN0IGF1ZGlvRmlsZXMgPSBbXHJcbiAgICAnLi9hdWRpby9zb25nMS53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzIud2F2JyxcclxuICAgICcuL2F1ZGlvL3NvbmczLndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nNC53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzUud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc2LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nNy53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzgud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc5LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nMTAud2F2JyxcclxuXHJcbl07XHJcblxyXG5sZXQgY3VycmVudEF1ZGlvID0gbnVsbDtcclxubGV0IHRpbWVvdXRJZCA9IG51bGw7XHJcblxyXG5mdW5jdGlvbiBwbGF5UmFuZG9tVHJhY2soKSB7XHJcbiAgICAvLyBTdG9wIGN1cnJlbnQgYXVkaW8gaWYgcGxheWluZ1xyXG4gICAgaWYgKGN1cnJlbnRBdWRpbykge1xyXG4gICAgICAgIGN1cnJlbnRBdWRpby5wYXVzZSgpO1xyXG4gICAgICAgIGN1cnJlbnRBdWRpby5jdXJyZW50VGltZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2VsZWN0IGEgcmFuZG9tIHRyYWNrXHJcbiAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGF1ZGlvRmlsZXMubGVuZ3RoKTtcclxuICAgIGN1cnJlbnRBdWRpbyA9IG5ldyBBdWRpbyhhdWRpb0ZpbGVzW3JhbmRvbUluZGV4XSk7XHJcbiAgICBjdXJyZW50QXVkaW8udm9sdW1lID0gbXVzaWNWb2x1bWU7XHJcbiAgICAvLyBQbGF5IHRoZSBzZWxlY3RlZCB0cmFja1xyXG4gICAgY3VycmVudEF1ZGlvLnBsYXkoKTtcclxuXHJcbiAgICAvLyBTY2hlZHVsZSB0aGUgbmV4dCB0cmFja1xyXG4gICAgc2NoZWR1bGVOZXh0VHJhY2soKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2NoZWR1bGVOZXh0VHJhY2soKSB7XHJcbiAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgdGltZW91dFxyXG4gICAgaWYgKHRpbWVvdXRJZCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdoZW4gdGhlIGN1cnJlbnQgdHJhY2sgZW5kcywgd2FpdCBmb3IgdXAgdG8gMzAgc2Vjb25kcyBiZWZvcmUgcGxheWluZyB0aGUgbmV4dFxyXG4gICAgY29uc3Qgc2lsZW5jZUR1cmF0aW9uID0gTWF0aC5yYW5kb20oKSAqIDMwMDAwICsgNTAwMDsgLy8gUmFuZG9tIHNpbGVuY2UgZHVyYXRpb24gNSAtIDM1IHNlY29uZHNcclxuICAgIGN1cnJlbnRBdWRpby5vbmVuZGVkID0gKCkgPT4ge1xyXG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQocGxheVJhbmRvbVRyYWNrLCBzaWxlbmNlRHVyYXRpb24pO1xyXG4gICAgfTtcclxufVxyXG5cclxubGV0IG11c2ljVm9sdW1lID0gLjU7XHJcbmxldCBzZnhWb2x1bWUgPSAuNTtcclxuXHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0Q3VycmVudFRhYigpIHtcclxuICAgIGxldCB0YWIgPSAnJztcclxuICAgIGZvciAobGV0IGNvbnRlbnQgb2YgdGFiQ29udGFpbmVycykge1xyXG4gICAgICAgIGlmIChjb250ZW50LmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgdGFiID0gY29udGVudC5pZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFiO1xyXG59XHJcblxyXG4vLyBTd2l0Y2ggdGFic1xyXG5sZXQgdGFiQ29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLWNvbnRlbnQgPiAuY29udGVudFwiKTsgLy8gRGlyZWN0IGNoaWxkcmVuIG9ubHlcclxuZnVuY3Rpb24gc2hvd1RhYih0YWJOYW1lKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInNob3cgdGFiOiBcIiArIHRhYk5hbWUpO1xyXG4gICAgLy8gR2V0IGFsbCBtYWluIGNvbnRhaW5lciBkaXZzIGFuZCBoaWRlIHRoZW1cclxuICAgIGxldCBwcmV2VGFiID0gZ2V0Q3VycmVudFRhYigpO1xyXG5cclxuICAgIGlmICh0YWJOYW1lID09PSBwcmV2VGFiKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHRhYkF1ZGlvID0gbmV3IEF1ZGlvKCcuL2F1ZGlvL3RhYi53YXYnKTtcclxuICAgIHRhYkF1ZGlvLnZvbHVtZSA9IHNmeFZvbHVtZTtcclxuICAgIHRhYkF1ZGlvLnBsYXkoKTtcclxuXHJcbiAgICBsZXQgcHJldlRhYkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmV2VGFiKTtcclxuICAgIHByZXZUYWJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgcHJldlRhYkVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgIC8vIEdldCBhbGwgdGFiIGJ1dHRvbnMgYW5kIHJlbW92ZSB0aGUgYWN0aXZlIGNsYXNzXHJcbiAgICBsZXQgdGFicyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLWJ1dHRvblwiKTtcclxuICAgIGZvciAobGV0IHRhYiBvZiB0YWJzKSB7XHJcbiAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hvdyB0aGUgY2xpY2tlZCB0YWIncyBtYWluIGNvbnRhaW5lciBkaXYgYW5kIG1ha2UgdGhlIHRhYiBidXR0b24gYWN0aXZlXHJcbiAgICBsZXQgYWN0aXZlQ29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYk5hbWUpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG5cclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgYWN0aXZlQ29udGVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpOyB9LCAxMDApO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgYWN0aXZlQ29udGVudC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgfSwgMjAwKTtcclxuXHJcblxyXG4gICAgLy8gR2V0IHRoZSBjbGlja2VkIHRhYiBidXR0b24gYW5kIG1ha2UgaXQgYWN0aXZlXHJcbiAgICBjb25zdCB0YWJTdHJpbmcgPSBgIyR7dGFiTmFtZX1CdXR0b25gO1xyXG4gICAgbGV0IGFjdGl2ZVRhYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFiU3RyaW5nKTtcclxuXHJcbiAgICBpZiAoYWN0aXZlVGFiQnV0dG9uKSBhY3RpdmVUYWJCdXR0b24uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuXHJcbiAgICBpZiAodGFiTmFtZSA9PT0gJ2pvYnNUYWInKVxyXG4gICAgICAgIGRyYXdBbGxDb25uZWN0aW9ucygpO1xyXG5cclxuICAgIGlmICh0YWJOYW1lID09PSAnY29tYmF0VGFiJylcclxuICAgICAgICByZWZyZXNoVmFsdWVzKCk7XHJcblxyXG4gICAgY29uc29sZS5sb2cocHJldlRhYiwgJz4nLCB0YWJOYW1lKTtcclxuXHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbn1cclxuXHJcblxyXG4vKiBIT1RLRVlTICovXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XHJcbiAgICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgICAgIHNob3dUYWIoJ3Byb2R1Y3Rpb25UYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnMic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgndGFiLWJ1dHRvbicpKSBzaG93VGFiKCdleHBlcmltZW50VGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzMnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSkgc2hvd1RhYigncG9uZGVyVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzQnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ2pvYnMtdGFiJykpIHNob3dUYWIoJ2pvYnNUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnNSc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnc2tpbGxzVGFibGUnKSkgc2hvd1RhYignc2tpbGxzVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzYnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3BlcmtzVGFiJykpIHNob3dUYWIoJ3BlcmtzVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzcnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ2ZhY3RvcnlUYWInKSkgc2hvd1RhYignZmFjdG9yeVRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc4JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdjb21iYXRUYWInKSkgc2hvd1RhYignY29tYmF0VGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICBpZiAoZ2V0Q3VycmVudFRhYigpID09PSAnY29tYmF0VGFiJykgc3dpdGNoU3RhbmNlKCdhZ2dyZXNzaXZlJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2InOlxyXG4gICAgICAgICAgICBpZiAoZ2V0Q3VycmVudFRhYigpID09PSAnY29tYmF0VGFiJykgc3dpdGNoU3RhbmNlKCdiYWxhbmNlZCcpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgaWYgKGdldEN1cnJlbnRUYWIoKSA9PT0gJ2NvbWJhdFRhYicpIHN3aXRjaFN0YW5jZSgnY2FyZWZ1bCcpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdmJzpcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoZ2V0Q3VycmVudFRhYigpID09PSAnY29tYmF0VGFiJyAmJiAhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0Q29tYmF0JykuZGlzYWJsZWQpIGNvbWJhdCgpO1xyXG4gICAgICAgICAgICBlbHNlIHRvZ2dsZVJlc291cmNlKCdmaXNoJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3MnOlxyXG4gICAgICAgICAgICB0b2dnbGVSZXNvdXJjZSgnc3RpY2tzJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3InOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3JvY2tzJykpIHRvZ2dsZVJlc291cmNlKCdyb2NrcycpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd2JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCd2aW5lcycpKSB0b2dnbGVSZXNvdXJjZSgndmluZXMnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAndyc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnd29vZCcpKSB0b2dnbGVSZXNvdXJjZSgnd29vZCcpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdvJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdvcmUnKSkgdG9nZ2xlUmVzb3VyY2UoJ29yZScpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdwJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJykpIHRvZ2dsZVJlc291cmNlKCdwb25kZXInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qIERBUksgTU9ERSAqL1xyXG4vLyBjb25zdCBkYXJrTW9kZVRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGFya01vZGVUb2dnbGVcIik7XHJcbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5ib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2RhcmstbW9kZScpO1xyXG4vLyBAdHMtaWdub3JlXHJcbi8vIGRhcmtNb2RlVG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoJ2RhcmsnKTtcclxubGV0IGlzRGFyayA9IHRydWU7XHJcblxyXG5cclxuLyogQ1VUU0NFTkVTICovXHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gZWF0RmlzaCgpIHtcclxuICAgIGlmICghZ2V0QXRlRmlzaCgpICYmIGdldE1hdGVyaWFsKCdmaXNoJywgcmVzb3VyY2VzKSA+PSAxKSB7XHJcbiAgICAgICAgLy8gZWF0IGEgZmlzaCBhbmQgYmxhY2tvdXRcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnZmlzaCcsIC0xKTtcclxuICAgICAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gc3RhcnQgdGhlIHNlcXVlbmNlXHJcbiAgICAgICAgZmFkZVRvQmxhY2soKTtcclxuICAgICAgICAvLyBIaWRlIGZpc2ggYnV0dG9uXHJcbiAgICAgICAgc2V0QXRlRmlzaCh0cnVlKTtcclxuICAgICAgICBjb25zdCBmaXNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlYXRGaXNoXCIpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmaXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNoYW5nZU1lc3NhZ2UoXCJZb3UgYXJlIHdpdGggeW91cnNlbGYgaW4gYSBmb3Jlc3QuXCIsICd3aXRoIHlvdXJzZWxmJyk7XHJcbiAgICAgICAgICAgIGluY3JlYXNlTWF4KCdjbG9uZXMnLCAxKTtcclxuICAgICAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnY2xvbmVzJywgMSk7XHJcbiAgICAgICAgfSwgMTAwMCk7IC8vIGRlbGF5IG9mIDFzXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZmFkZVRvQmxhY2soKSB7XHJcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuICAgIGNvbnN0IG92ZXJsYXlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktdGV4dCcpO1xyXG4gICAgY29uc3Qgb3ZlcmxheUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LWJ1dHRvbicpO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgb3ZlcmxheVRleHQuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDIwMDApO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvdmVybGF5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIG92ZXJsYXlCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgIH0sIDUwMDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlT3ZlcmxheSgpIHtcclxuICAgIGNvbnN0IG92ZXJsYXlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktdGV4dCcpO1xyXG4gICAgb3ZlcmxheVRleHQuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuXHJcbiAgICBjb25zdCBvdmVybGF5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktYnV0dG9uJyk7XHJcbiAgICBvdmVybGF5QnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcblxyXG4gICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5Jyk7XHJcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgY29uc3QgaXNla2FpQnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpc2VrYWlCdXR0b25zJyk7XHJcbiAgICAvLyBpc2VrYWlCdXR0b25zLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZCA9PiBpc2VrYWlCdXR0b25zLnJlbW92ZUNoaWxkKGNoaWxkKSk7XHJcbiAgICBpc2VrYWlCdXR0b25zLmlubmVySFRNTCA9ICcnO1xyXG4gICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5hdmlnYXRlVG8odXJsKSB7XHJcbiAgICAvLyBUcmlnZ2VyIHRoZSBvdmVybGF5IHRvIGZhZGUgaW5cclxuICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhZ2UtdHJhbnNpdGlvbi1vdmVybGF5Jyk7XHJcbiAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2ZhZGUtaW4nKTtcclxuXHJcbiAgICAvLyBXYWl0IGZvciB0aGUgZmFkZSBpbiB0byBjb21wbGV0ZSBiZWZvcmUgY2hhbmdpbmcgdGhlIHBhZ2VcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gICAgfSwgMzAwKTsgLy8gVGhpcyBkdXJhdGlvbiBzaG91bGQgbWF0Y2ggdGhlIENTUyBvcGFjaXR5IHRyYW5zaXRpb25cclxufVxyXG5cclxuLy8gRXhhbXBsZSB1c2FnZVxyXG4vLyBuYXZpZ2F0ZVRvKCduZXh0LXBhZ2UuaHRtbCcpO1xyXG5cclxuXHJcblxyXG4vLyBNZXNzYWdlIFxyXG5jb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJyk7XHJcbmZ1bmN0aW9uIGNoYW5nZU1lc3NhZ2UobmV3TWVzc2FnZSwgY2xvbmVXb3Jkcykge1xyXG4gICAgY29uc3QgbW9kaWZpZWRNZXNzYWdlID0gbmV3TWVzc2FnZS5yZXBsYWNlKGNsb25lV29yZHMsIGA8c3BhbiBjbGFzcz0ndG9vbHRpcCcgaWQ9XCJhbG9uZVwiIHRvb2x0aXBEZXNjPVwiWW91IGZlZWwgcGVja2lzaCBmb3Igc29tZSBzZWFmb29kXCI+JHtjbG9uZVdvcmRzfTwvc3Bhbj5gKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIG1lc3NhZ2VFbGVtZW50LmlubmVySFRNTCA9IG1vZGlmaWVkTWVzc2FnZTtcclxufVxyXG5mdW5jdGlvbiBnZXRNZXNzYWdlKCkge1xyXG4gICAgcmV0dXJuIG1lc3NhZ2VFbGVtZW50O1xyXG59XHJcblxyXG4vKiBHQU1FIExPT1AgKi9cclxuXHJcblxyXG5sZXQgbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSA9IDUwO1xyXG5sZXQgbGFzdF90aW1lID0gbnVsbDtcclxubGV0IHRvdGFsX3RpbWUgPSAwO1xyXG5sZXQgYWNjdW11bGF0ZWRfbGFnID0gMDtcclxuXHJcblxyXG5mdW5jdGlvbiBsb29wKGN1cnJlbnRfdGltZSkge1xyXG4gICAgaWYgKGxhc3RfdGltZSA9PT0gbnVsbCkgbGFzdF90aW1lID0gY3VycmVudF90aW1lO1xyXG5cclxuICAgIGNvbnN0IGRlbHRhX3RpbWUgPSBjdXJyZW50X3RpbWUgLSBsYXN0X3RpbWU7XHJcblxyXG4gICAgdG90YWxfdGltZSArPSBkZWx0YV90aW1lO1xyXG4gICAgYWNjdW11bGF0ZWRfbGFnICs9IGRlbHRhX3RpbWU7XHJcblxyXG4gICAgbGFzdF90aW1lID0gY3VycmVudF90aW1lO1xyXG5cclxuICAgIC8vIENhdGNoIHVwIGFsbCB0aGUgbWlzc2VkIHRpY2tzXHJcbiAgICBsZXQgbm9ybWFsUmF0ZSA9IG1pbGxpc2Vjb25kc19wZXJfZnJhbWU7XHJcbiAgICAvLyBzaW11bGF0ZSB3aXRoIGxlc3MgZmlkZWxpdHkgdG8gbWFrZSB1cCB0aW1lXHJcbiAgICAvLyB3aGlsZSAoYWNjdW11bGF0ZWRfbGFnID49IDEwMCAqIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUpIHtcclxuICAgIC8vICAgICBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lICo9IDEwMDtcclxuICAgIC8vIH1cclxuICAgIGlmIChhY2N1bXVsYXRlZF9sYWcgPj0gMTAgKiBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKSB7XHJcbiAgICAgICAgbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSA9IGFjY3VtdWxhdGVkX2xhZyAvIDEwO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKGFjY3VtdWxhdGVkX2xhZyA+PSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKSB7XHJcblxyXG4gICAgICAgIGFjY3VtdWxhdGVkX2xhZyAtPSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lO1xyXG4gICAgICAgIHVwZGF0ZShtaWxsaXNlY29uZHNfcGVyX2ZyYW1lLCB0b3RhbF90aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lID0gbm9ybWFsUmF0ZTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcclxufVxyXG5cclxuXHJcbmxldCB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSA9IDA7XHJcbmxldCB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPSAwO1xyXG5mdW5jdGlvbiB1cGRhdGUoZGVsdGFfdGltZSwgdG90YWxfdGltZSkge1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ1cGRhdGluZyBcIiArIGtleSk7XHJcblxyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoa2V5LCBjYWxjSW5jcmVhc2Uoa2V5LCBkZWx0YV90aW1lKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzKCk7XHJcbiAgICByZW5kZXIoKTtcclxuXHJcbiAgICAvLyBTYXZlIHRoZSBnYW1lIGV2ZXJ5IDEwIHNlY29uZHNcclxuICAgIHRpbWVfc2luY2VfbGFzdF9zYXZlICs9IGRlbHRhX3RpbWU7XHJcbiAgICB0aW1lX3NpbmNlX21hbnVmYXR1cmUgKz0gZGVsdGFfdGltZTtcclxuICAgIHRvdGFsX3RpbWUgKz0gZGVsdGFfdGltZTtcclxuICAgIGlmICh0aW1lX3NpbmNlX2xhc3Rfc2F2ZSA+PSAxMDAwMCkge1xyXG4gICAgICAgIHNhdmVHYW1lKCk7XHJcbiAgICAgICAgdGltZV9zaW5jZV9sYXN0X3NhdmUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1hbnVmYWN0dXJlIGV2ZXJ5IHNlY29uZFxyXG4gICAgaWYgKHBhc3NlZFN0YWdlKCdmYWN0b3J5VGFiJykgJiYgdGltZV9zaW5jZV9tYW51ZmF0dXJlID49IDEwMDApIHtcclxuICAgICAgICBhdHRlbXB0TWFudWZhY3R1cmUoKTtcclxuICAgICAgICB0aW1lX3NpbmNlX21hbnVmYXR1cmUgPSAwO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLy8gd2luZG93LnNldEludGVydmFsKHJlbmRlciwgMTAwKSAvLyBVcGRhdGUgdmlzdWFscyAxMCB0aW1lcyBwZXIgc2Vjb25kXHJcbi8vIHdpbmRvdy5zZXRJbnRlcnZhbCh0aWNrLCAxMDAwKTsgLy8gRXZlcnkgdGljayBsYXN0cyBmb3IgMSBzZWNvbmRcclxuLy8gd2luZG93LnNldEludGVydmFsKHNhdmVHYW1lLCAxMDAwMCk7IC8vIFNhdmUgdGhlIGdhbWUgZXZlcnkgMTAgc2Vjb25kc1xyXG53aW5kb3cub25iZWZvcmV1bmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBXZSB1c2UgYSBmdW5jdGlvbiByYXRoZXIgdGhhbiBzaG9ydGhhbmQgYmVjYXVzZSBzYXZlZ2FtZSByZXR1cm5zIGEgc3RyaW5nXHJcbiAgICBpZiAoIWN1cnJlbnRseURlbGV0aW5nKSBzYXZlR2FtZSgpO1xyXG59O1xyXG5cclxuXHJcbi8vIGNvbnN0IG15UmVzb3VyY2VzID0ge307XHJcblxyXG4vLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkZFJlc291cmNlQnRuXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlRm9ybVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4vLyB9KTtcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuZnVuY3Rpb24gYWRkUmVzb3VyY2UoKSB7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlTmFtZVwiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGFjdGl2ZVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlQWN0aXZlVGV4dFwiKS52YWx1ZTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGRlZmF1bHRUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZURlZmF1bHRUZXh0XCIpLnZhbHVlO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGJ0blRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRleHRcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5Ub29sdGlwRGVzYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuVG9vbHRpcERlc2NcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5Ub29sdGlwQ29zdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuVG9vbHRpcENvc3RcIikudmFsdWU7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdmFyIG5ld1Jlc291cmNlID0gbXlSZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSA9IHtcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBpZDogXCJnYXRoZXJcIiArIHJlc291cmNlTmFtZSxcclxuICAgICAgICBpc0dldHRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZVRleHQ6IGFjdGl2ZVRleHQsXHJcbiAgICAgICAgZGVmYXVsdFRleHQ6IGRlZmF1bHRUZXh0LFxyXG4gICAgICAgIC8vIC4uLiBBZGQgb3RoZXIgYXR0cmlidXRlcyBhcyBmZXRjaGVkIGZyb20gZm9ybSAuLi5cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBidXR0b24gb2JqZWN0XHJcbiAgICB2YXIgbmV3QnV0dG9uID0gYnV0dG9uc1tcImdhdGhlclwiICsgcmVzb3VyY2VOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVzb3VyY2VOYW1lLnNsaWNlKDEpXSA9IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiBidG5UZXh0LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBidG5Ub29sdGlwRGVzYyxcclxuICAgICAgICB0b29sdGlwQ29zdDogYnRuVG9vbHRpcENvc3QsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUgLy8gQnkgZGVmYXVsdCwgbWFraW5nIHRoaXMgYWx3YXlzIHZpc2libGUuIE1vZGlmeSBhcyBuZWVkZWQuXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKG5ld1Jlc291cmNlKTtcclxuICAgIGNvbnNvbGUubG9nKG5ld0J1dHRvbik7XHJcblxyXG4gICAgLy8gSGlkZSBmb3JtIG9uY2UgcmVzb3VyY2UgaXMgYWRkZWRcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VGb3JtXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAvLyBPcHRpb25hbGx5LCB5b3UgY2FuIHVwZGF0ZSB0aGUgVUkgdG8gc2hvdyB0aGUgYWRkZWQgcmVzb3VyY2VcclxuICAgIC8vIHVwZGF0ZVVJKHJlc291cmNlTmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVVJKHJlc291cmNlTmFtZSkge1xyXG4gICAgLy8gSGVyZSB5b3UgY2FuIGNyZWF0ZSBhIG5ldyBET00gZWxlbWVudCB0byBkaXNwbGF5IHRoZSBhZGRlZCByZXNvdXJjZVxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgcmVzb3VyY2VEaXYuaW5uZXJIVE1MID0gYCR7cmVzb3VyY2VOYW1lfTogJHtyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS52YWx1ZX1gO1xyXG5cclxuICAgIC8vIEFwcGVuZCB0byBzb21lIGNvbnRhaW5lclxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZXNvdXJjZURpdik7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxubGV0IGN1cnJlbnRseURlbGV0aW5nID0gZmFsc2U7XHJcblxyXG4vLyBBZnRlciBhbGwgaGFzIGJlZW4gbG9hZGVkXHJcbi8vIEB0cy1pZ25vcmVcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4ge1xyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zKHBvbmRlcnMpO1xyXG4gICAgLy8gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucygpO1xyXG4gICAgZ2VuZXJhdGVCdXR0b25zKCk7IC8vIENhbGwgdGhpcyBvbmNlIG9uIHBhZ2UgbG9hZCBvciBnYW1lIGluaXRpYWxpemF0aW9uXHJcbiAgICBtYWtlRmFjdG9yeUJ1dHRvbnMoKTtcclxuXHJcbiAgICBpbml0aWFsaXplUmVzb3VyY2VUYWdzKCk7XHJcblxyXG4gICAgbG9hZEdhbWUoKTtcclxuXHJcbiAgICBjbGVhclNpZGViYXIoKTtcclxuICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MoaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJykpOyAvLyBjaGVjayBpZiB3ZSBuZWVkIGdyb3Vwc1xyXG5cclxuICAgIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKTtcclxuXHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcblxyXG4gICAgc2hvd1RhYigncHJvZHVjdGlvblRhYicpO1xyXG4gICAgcmVxdWlyZSgnLi90cmFkZScpLmdlbmVyYXRlVHJhZGVUYWJsZShyZXNvdXJjZXMpO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRSS2V5RnJvbUlEKGlkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbciwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlc1tyXS5pZCwgaWQpO1xyXG4gICAgICAgICAgICBpZiAodmFsLmlkID09PSBpZCkgcmV0dXJuIHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnZXJyb3IgJyArIGlkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0Q1JLZXlGcm9tSUQoaWQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtyLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHIsIHZhbCwgaWQpO1xyXG4gICAgICAgICAgICBpZiAodmFsLmlkID09PSBpZCkgcmV0dXJuIHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnZXJyb3IgJyArIGlkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gU3RhcnQgdGhlIG11c2ljIHBsYXliYWNrXHJcbiAgICAgICAgLy8gV2UgbmVlZCB0byB3YWl0IGZvciBhIGNsaWNrIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vYmxvZy9hdXRvcGxheS9cclxuICAgICAgICBpZiAoY3VycmVudEF1ZGlvID09PSBudWxsKSBwbGF5UmFuZG9tVHJhY2soKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiYnV0dG9uXCIpKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gb25lIG9mIG91ciBidXR0b25zIHdhcyBjbGlja2VkXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NsaWNrZWQnLCBidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXBzIFxyXG4gICAgICAgICAgICAvLyBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndG9vbHRpcCcpKSB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEJVSUxESU5HIEJVVFRPTlNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YV9idWlsZGluZycpICYmIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKSAhPT0gJ3VuZGVmaW5lZCcgJiYgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygncHVyY2hhc2FibGUnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIHZhciBidWlsZGluZyA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYnVpbGRpbmdBdWRpbyA9IG5ldyBBdWRpbygnLi9hdWRpby9idWlsZGluZy53YXYnKTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkaW5nQXVkaW8udm9sdW1lID0gc2Z4Vm9sdW1lO1xyXG4gICAgICAgICAgICAgICAgYnVpbGRpbmdBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdTdHJpbmcgPSBjYXBpdGFsaXplRmlyc3QoYnVpbGRpbmcpLnNwbGl0KCdfJykuam9pbignICcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gYnV5TWF4QnVpbGRpbmdzKGJ1aWxkaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYCske2NvdW50fSAke2J1aWxkaW5nU3RyaW5nfXNgLCAnYXF1YScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBidXlCdWlsZGluZyhidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArMSAke2J1aWxkaW5nU3RyaW5nfWAsICdhcXVhJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFBPTkRFUiBCVVRUT05TXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndW5sb2NrJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVubG9ja0F0dHIgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGljaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9uZGVyc1t1bmxvY2tBdHRyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW5VbmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHBvbmRlcnNbdW5sb2NrQXR0cl0uY29zdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPCBwb25kZXJzW3VubG9ja0F0dHJdLmNvc3RbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkNhbm5vdCB1bmxvY2sgXCIgKyB1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhblVubG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCAtcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0W21hdGVyaWFsXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9uZGVyc1t1bmxvY2tBdHRyXS5pc1BvbmRlcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVZpc2libGUodW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyByZXNvdXJjZUtleSArIFwiVmFsdWVcIikudGV4dENvbnRlbnQgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS52YWx1ZS50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMgYnV0dG9uIGRpc2FwcGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvbmRlckF1ZGlvID0gbmV3IEF1ZGlvKCcuL2F1ZGlvL3BvbmRlci53YXYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9uZGVyQXVkaW8udm9sdW1lID0gc2Z4Vm9sdW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb25kZXJBdWRpby5wbGF5KCk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJVbmxvY2tpbmcgXCIgKyB1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVmcmVzaCB0aGUgcGFnZSB3aGVuIGJ1eWluZyBvcmdhbml6ZWQgc3RvcmFnZSB0byBnZW5lcmF0ZSB0aGUgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmxvY2tBdHRyID09PSAnb3JnYW5pemF0aW9uJykgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBPVEhFUiBCVVRUT05TXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWQuc2xpY2UoMCwgNikgPT09IFwiZ2F0aGVyXCIpIHRvZ2dsZVJlc291cmNlKGdldFJLZXlGcm9tSUQoYnV0dG9uLmlkKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkLnNsaWNlKDAsIDUpID09PSAnY3JhZnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNyYWZ0QXVkaW8gPSBuZXcgQXVkaW8oJy4vYXVkaW8vY3JhZnQud2F2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JhZnRBdWRpby52b2x1bWUgPSBzZnhWb2x1bWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JhZnRBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3IgPSBnZXRDUktleUZyb21JRChidXR0b24uaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGlja2VkIGNyOiAnLCBjcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbkNyYWZ0KGNyKSkgdHJpZ2dlckZsb2F0VXBUZXh0KGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSwgYCske2NyfWAsICdhcXVhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSBjcmFmdEFsbFJlc291cmNlcyhjcik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBjcmFmdFJlc291cmNlKGNyKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnc2F2ZUJ1dHRvbicpIHNhdmVHYW1lKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnZWF0RmlzaCcpIGVhdEZpc2goKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdvdmVybGF5LWJ1dHRvbicpIGhpZGVPdmVybGF5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnZGVsZXRlU2F2ZUJ1dHRvbicgJiYgY29uZmlybShcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgeW91ciBzYXZlIGRhdGE/IFRoaXMgd2lsbCByZXNldCBhbGwgeW91ciBwcm9ncmVzcy5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2F2ZScpOyBjdXJyZW50bHlEZWxldGluZyA9IHRydWU7IGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnY2xlYXJKb2JBc3NpZ25tZW50cycpIGNsZWFySm9iQXNzaWdubWVudHMoKTtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2RhcmtNb2RlVG9nZ2xlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyay1tb2RlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGRhcmtNb2RlVG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoJ2RhcmsnKTtcclxuICAgICAgICAgICAgICAgICAgICBpc0RhcmsgPSAhaXNEYXJrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBkYXJrTW9kZVRvZ2dsZS50ZXh0Q29udGVudCA9IGlzRGFyayA/IFwiTGlnaHQgTW9kZVwiIDogXCJEYXJrIE1vZGVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnMm1haW4nKSBzaG93VGFiKCdtYWluVGFiJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICcyZ3JhcGhzJykgc2hvd1RhYignZ3JhcGhzVGFiJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdwcmVzdGlnZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc2VrYWkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ3N0YXJ0Q29tYmF0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbWJhdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd0aWVyT25lQnV0dG9uJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGxldCBwZXJrID0gYnV0dG9uLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0QWJpbGl0eShwZXJrKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCIjYWxvbmVcIikpIHtcclxuICAgICAgICAgICAgLy8gaW5jcmVhc2VNYXRlcmlhbCgnY2xvbmVzJywgMSk7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gJysxIENsb25lJztcclxuICAgICAgICAgICAgLy8gSGFyZGNvZGVkIGluc3RlYWQgdG8gYXZvaWQgaW5jcmVhc2UgYWZmZWN0ZWQgYnkgcHJvZHVjdGl2aXR5IGJvbnVzZXNcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1snY2xvbmVzJ10udmFsdWUgPCByZXNvdXJjZXNbJ2Nsb25lcyddLm1heCkgeyByZXNvdXJjZXNbJ2Nsb25lcyddLnZhbHVlICs9IDE7IH1cclxuICAgICAgICAgICAgZWxzZSB0ZXh0ID0gJ01heCBDbG9uZXMnO1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gZXZlbnQucGFnZVg7IC8vIFggY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuICAgICAgICAgICAgY29uc3QgeSA9IGV2ZW50LnBhZ2VZOyAvLyBZIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGV4dCA9PT0gJysxIENsb25lJyA/ICdncmVlbicgOiAncmVkJztcclxuICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIHRleHQsIGNvbG9yKTtcclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKCdjbG9uZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlRmFjdG9yeUJ1dHRvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yeUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmFjdG9yeUJ1dHRvbnMnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYnV5RmFjdG9yeUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uaWQgPSAnYnV5RmFjdG9yeUJ1dHRvbic7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi50ZXh0Q29udGVudCA9ICdCdXkgTmV3IEZhY3RvcnknO1xyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZGVzYycsICdUaGUgZmFjdG9yeSBtdXN0IGdyb3chJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgJzUwIHNpbHZlcicpO1xyXG4gICAgICAgIGZhY3RvcnlCdXR0b25zLmFwcGVuZENoaWxkKGJ1eUZhY3RvcnlCdXR0b24pO1xyXG5cclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYnV5aW5nIGZhY3RvcnknKTtcclxuICAgICAgICAgICAgYnV5RmFjdG9yeSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB1cGdyYWRlQnVsa0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Rvb2x0aXAnKTtcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5pZCA9ICd1cGdyYWRlQnVsa0J1dHRvbic7XHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24udGV4dENvbnRlbnQgPSAnVXBncmFkZSBCdWxrJztcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgJ0NyYWZ0IG1vcmUgcmVzb3VyY2VzIHBlciBzZWNvbmQnKTtcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgJzIg4oaSIDQ6IDMwIHNpbHZlcicpO1xyXG4gICAgICAgIGZhY3RvcnlCdXR0b25zLmFwcGVuZENoaWxkKHVwZ3JhZGVCdWxrQnV0dG9uKTtcclxuXHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwZ3JhZGluZyBidWxrJyk7XHJcbiAgICAgICAgICAgIHVwZ3JhZGVCdWxrKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3B0aW9ucyBtZW51XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3B0aW9uc0J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnNNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wdGlvbnNNZW51Jyk7XHJcbiAgICAgICAgb3B0aW9uc01lbnUuc3R5bGUuZGlzcGxheSA9IG9wdGlvbnNNZW51LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ211c2ljVm9sdW1lJykuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG11c2ljVm9sdW1lID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBjdXJyZW50QXVkaW8udm9sdW1lID0gbXVzaWNWb2x1bWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2Z4Vm9sdW1lJykuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHNmeFZvbHVtZSA9IHRoaXMudmFsdWU7XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcblxyXG4gICAgLy8gU2FtcGxlIHVzYWdlOlxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvb2x0aXAnKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAvLyBFeHRyYWN0IHRoZSBkYXRhIGZyb20geW91ciBidWlsZGluZyBvciBhbnkgb3RoZXIgZGF0YSAtIHNvdXJjZVxyXG4gICAgICAgIC8vIGNvbnN0IGNvbnRlbnQgPSBcIllvdXIgdG9vbHRpcCBjb250ZW50IGhlcmVcIjtcclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgICAgICBjdXJyZW50SG92ZXJCdXR0b24gPSBidXR0b247XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgZXZlbnQgbGlzdGVuZXJcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignb25jbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgaGlkZVRvb2x0aXAoKTsgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDsgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGpvYnMgY291bnRlclxyXG4gICAgdXBkYXRlVG90YWwoKTtcclxuICAgIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG5cclxuXHJcblxyXG59KTtcclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbmV4dEZpYm9uYWNjaShuKSB7XHJcbiAgICBsZXQgYSA9IG4gKiAoMSArIE1hdGguc3FydCg1KSkgLyAyLjA7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJldkZpYm9uYWNjaShuKSB7XHJcbiAgICBsZXQgYSA9IG4gLyAoKDEgKyBNYXRoLnNxcnQoNSkpIC8gMi4wKTtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc2VrYWkoKSB7XHJcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKTtcclxuICAgIGNvbnN0IG92ZXJsYXlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktdGV4dCcpO1xyXG4gICAgY29uc3Qgb3ZlcmxheUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LWJ1dHRvbicpO1xyXG4gICAgY29uc3Qgb3ZlcmxheUJhY2tCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1iYWNrLWJ1dHRvbicpOyAvLyBHZXQgdGhlIFwiR28gQmFja1wiIGJ1dHRvblxyXG5cclxuICAgIG92ZXJsYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaHVza3NEdWUgPSBnZXRNYXRlcmlhbCgnY2xvbmVzJyk7XHJcblxyXG4gICAgICAgIC8vIFJlc2V0IGZ1bmN0aW9ucyB0byBiZSBleGVjdXRlZCB3aGVuIFwiQ29udGludWVcIiBpcyBjbGlja2VkXHJcbiAgICAgICAgcmVzZXRSZXNvdXJjZXMoKTtcclxuICAgICAgICByZXNldENyYWZ0ZWRSZXNvdXJjZXMoKTtcclxuICAgICAgICByZXNldFBvbmRlcnMoKTtcclxuICAgICAgICByZXNldFBlcmtzKCk7XHJcbiAgICAgICAgcmVzZXRCdWlsZGluZ3MoKTtcclxuICAgICAgICByZXNldEFsbEpvYnMoKTtcclxuICAgICAgICByZXNldFN0YWdlcygpO1xyXG4gICAgICAgIC8vIFNldCBtYXggb2YgYWxsIHJlc291cmNlcyB0byAxMDBcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZm9yIChsZXQgW3IsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG4gICAgICAgICAgICB2YWwubWF4ID0gMTAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gR2l2ZSBodXNrcyBhZnRlcndhcmRzXHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnaHVza3MnLCBodXNrc0R1ZSk7XHJcblxyXG5cclxuICAgICAgICAvLyBDbG9zZSB0aGUgb3ZlcmxheVxyXG4gICAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgLy8gbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncyhmYWxzZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBvdmVybGF5QmFja0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAvLyBKdXN0IGNsb3NlIHRoZSBvdmVybGF5IHdpdGhvdXQgZXhlY3V0aW5nIHJlc2V0IGZ1bmN0aW9uc1xyXG4gICAgICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENvbnZlcnQgY2xvbmVzIHRvIGh1c2tzXHJcbiAgICBjb25zdCBvbGRIdXNrVmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaHVza3NJc2VrYWlWYWx1ZScpO1xyXG4gICAgbGV0IGh1c2tWYWx1ZTtcclxuICAgIGlmIChvbGRIdXNrVmFsdWUpIGh1c2tWYWx1ZSA9IG9sZEh1c2tWYWx1ZTtcclxuICAgIGVsc2UgaHVza1ZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgaHVza1ZhbHVlLmlkID0gJ2h1c2tzSXNla2FpVmFsdWUnO1xyXG4gICAgaHVza1ZhbHVlLmlubmVySFRNTCA9IGBIdXNrczogICR7Z2V0TWF0ZXJpYWwoJ2h1c2tzJyl9IDxicj4gWW91IHdpbGwgZ2V0ICR7Z2V0TWF0ZXJpYWwoJ2Nsb25lcycpfSBIdXNrcyBwb3N0LWlzZWthaS5gO1xyXG4gICAgaHVza1ZhbHVlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICBvdmVybGF5LnByZXBlbmQoaHVza1ZhbHVlKTtcclxuICAgIC8vIE92ZXJsYXlcclxuICAgIG92ZXJsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ01pZG5pZ2h0Qmx1ZSc7XHJcbiAgICBvdmVybGF5VGV4dC50ZXh0Q29udGVudCA9ICdZb3Ugc3RlcCB0aHJvdWdoIHRvIGFub3RoZXIgd29ybGQuJztcclxuXHJcbiAgICBmYWRlVG9CbGFjaygpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvdmVybGF5QmFja0J1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgfSwgNTAwMCk7XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlUHJlc3RpZ2VCdXR0b25zKCkge1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXNla2FpQnV0dG9ucycpO1xyXG4gICAgICAgIGxldCBpID0gMTtcclxuICAgICAgICBPYmplY3Qua2V5cyhwcmVzdGlnZSkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8Yj4ke3ByZXN0aWdlW2tleV0udGV4dH08L2I+PGJyPkxldmVsOiAke3ByZXN0aWdlW2tleV0ubGV2ZWx9PGJyPkNvc3Q6ICR7cHJlc3RpZ2Vba2V5XS5jb3N0fWA7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgcHJlc3RpZ2Vba2V5XS5jb3N0KTtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnLCBwcmVzdGlnZVtrZXldLnRvb2x0aXBEZXNjKTtcclxuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Rvb2x0aXAnKTsgLy8gQWRkIGEgY2xhc3MgZm9yIHN0eWxpbmcgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5ncmlkQ29sdW1uID0gKGkgJSA0ICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmdyaWRSb3cgPSBNYXRoLmZsb29yKGkgLyA0ICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbDogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIGlmIHlvdSB3YW50IHRvIGhhbmRsZSBjbGlja3NcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBpbXBsZW1lbnQgd2hhdCBoYXBwZW5zIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQnV0dG9uICR7a2V5fSB3YXMgY2xpY2tlZGApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdldE1hdGVyaWFsKCdodXNrcycpIDwgcHJlc3RpZ2Vba2V5XS5jb3N0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmxldmVsKys7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdodXNrcycsIC1wcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5jb3N0ID0gbmV4dEZpYm9uYWNjaShwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGI+JHtwcmVzdGlnZVtrZXldLnRleHR9PC9iPjxicj5MZXZlbDogJHtwcmVzdGlnZVtrZXldLmxldmVsfTxicj5Db3N0OiAke3ByZXN0aWdlW2tleV0uY29zdH1gO1xyXG4gICAgICAgICAgICAgICAgaHVza1ZhbHVlLnRleHRDb250ZW50ID0gJ0h1c2tzOiAnICsgZ2V0TWF0ZXJpYWwoJ2h1c2tzJyk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBSaWdodC1jbGljayB0byBkZWNyZWFzZSBsZXZlbFxyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBpbXBsZW1lbnQgd2hhdCBoYXBwZW5zIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQnV0dG9uICR7a2V5fSB3YXMgcmlnaHQgY2xpY2tlZGApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXN0aWdlW2tleV0ubGV2ZWwgPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5sZXZlbC0tO1xyXG4gICAgICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5jb3N0ID0gcHJldkZpYm9uYWNjaShwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICAgICAgaW5jcmVhc2VNYXRlcmlhbCgnaHVza3MnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgPGI+JHtwcmVzdGlnZVtrZXldLnRleHR9PC9iPjxicj5MZXZlbDogJHtwcmVzdGlnZVtrZXldLmxldmVsfTxicj5Db3N0OiAke3ByZXN0aWdlW2tleV0uY29zdH1gO1xyXG4gICAgICAgICAgICAgICAgaHVza1ZhbHVlLnRleHRDb250ZW50ID0gJ0h1c2tzOiAnICsgZ2V0TWF0ZXJpYWwoJ2h1c2tzJyk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgZGF0YSBmcm9tIHlvdXIgYnVpbGRpbmcgb3IgYW55IG90aGVyIGRhdGEgLSBzb3VyY2VcclxuICAgICAgICAgICAgLy8gY29uc3QgY29udGVudCA9IFwiWW91ciB0b29sdGlwIGNvbnRlbnQgaGVyZVwiO1xyXG5cclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SG92ZXJCdXR0b24gPSBidXR0b247XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgaGlkZVRvb2x0aXAoKTsgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDsgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSBidXR0b25zXHJcbiAgICBzZXRUaW1lb3V0KGNyZWF0ZVByZXN0aWdlQnV0dG9ucywgNTAwMCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgaHVza1ZhbHVlLnN0eWxlLm9wYWNpdHkgPSAnMSc7IH0sIDUwMDApO1xyXG5cclxufVxyXG5cclxudmFyIGN1cnJlbnRIb3ZlckJ1dHRvbiA9IG51bGw7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHJcbiAgICB1cGRhdGVVSSxcclxuICAgIHNldFRvdGFsVGltZSxcclxuICAgIGNoYW5nZU1lc3NhZ2UsXHJcblxyXG4gICAgZ2V0TWVzc2FnZSxcclxuICAgIHRvdGFsX3RpbWUsXHJcbiAgICBjdXJyZW50SG92ZXJCdXR0b25cclxuXHJcbn07XHJcbiIsIlxyXG5jb25zdCB7IHNldFN0YWdlLCBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuY29uc3QgeyB1cGRhdGVCdXR0b25WaXNpYmlsaXR5IH0gPSByZXF1aXJlKCcuL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHknKTtcclxuXHJcbi8qKlxyXG4gKiBNYWtlIGV2ZXJ5dGhpbmcgd2l0aCB0aGUgY2xhc3MgXCJzdGFnZVwiIHZpc2libGVcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0YWdlXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlVmlzaWJsZShzdGFnZSkge1xyXG4gICAgaWYgKCFwYXNzZWRTdGFnZShzdGFnZSkpIHtcclxuICAgICAgICBzZXRTdGFnZShzdGFnZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGFnZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5cIiArIHN0YWdlKTtcclxuICAgIHN0YWdlRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgIH0pO1xyXG4gICAgdXBkYXRlQnV0dG9uVmlzaWJpbGl0eSgpO1xyXG59XHJcbmV4cG9ydHMubWFrZVZpc2libGUgPSBtYWtlVmlzaWJsZTsiLCJjb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1aWxkaW5ncycpO1xyXG5jb25zdCB7IHBlcmtzIH0gPSByZXF1aXJlKCcuL2pzb24vcGVya3MnKTtcclxubGV0IG15UGVya3MgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IHBlcmtOYW1lIFxyXG4gKiBAcmV0dXJucyBib29sZWFuXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNQZXJrKHBlcmtOYW1lKSB7XHJcbiAgICByZXR1cm4gbXlQZXJrcy5pbmNsdWRlcyhwZXJrTmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFsbFBlcmtzKCkge1xyXG4gICAgcmV0dXJuIG15UGVya3M7XHJcbn1cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGVya05hbWUgUGVyayB0byBhZGRcclxuICovXHJcbmZ1bmN0aW9uIGFkZFBlcmsocGVya05hbWUpIHtcclxuICAgIG15UGVya3MucHVzaChwZXJrTmFtZSk7XHJcblxyXG4gICAgLy8gRG8gYWxsIHRoZSBvbmUtdGltZSB1cGRhdGVzXHJcbiAgICBzd2l0Y2ggKHBlcmtOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnQXJjaGl0ZWN0JzpcclxuICAgICAgICAgICAgZm9yIChsZXQgYiBpbiBidWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QnKS5yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChiLCBidWlsZGluZ3MsIGhhc1BlcmspO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtOdW1iZXJ9IHRpZXJOdW0gXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRQZXJrRnJvbVRpZXIodGllck51bSkge1xyXG4gICAgZm9yIChsZXQgcGVyayBpbiBwZXJrc1sndGllcicgKyB0aWVyTnVtXSkge1xyXG4gICAgICAgIGlmIChoYXNQZXJrKHBlcmspKSByZXR1cm4gcGVyaztcclxuICAgIH1cclxuXHJcbiAgICAvLyBObyBwZXJrIGZvciB0aGlzIHRpZXJcclxuICAgIHJldHVybiAnJztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHNlbGVjdEFiaWxpdHkoYWJpbGl0eU5hbWUpIHtcclxuICAgIGlmIChoYXNQZXJrKGFiaWxpdHlOYW1lKSkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjb25maXJtU2VsZWN0aW9uID0gd2luZG93LmNvbmZpcm0oXCJEbyB5b3Ugd2FudCB0byBzZWxlY3QgXCIgKyBhYmlsaXR5TmFtZSArIFwiPyBUaGlzIGRlY2lzaW9uIGNhbm5vdCBiZSBlYXNpbHkgY2hhbmdlZC5cIik7XHJcblxyXG4gICAgaWYgKCFjb25maXJtU2VsZWN0aW9uKSByZXR1cm47XHJcbiAgICBhZGRQZXJrKGFiaWxpdHlOYW1lKTtcclxuXHJcbiAgICAvLyBmb3IgKGxldCBpID0gMTsgaSA8PSAxOyArK2kpXHJcbiAgICByZXF1aXJlKCcuL3NlbGVjdENvcnJlY3RQZXJrQnV0dG9uJykuc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24oYWJpbGl0eU5hbWUpO1xyXG5cclxuICAgIC8vIG15UGVya3MucHVzaChhYmlsaXR5TmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0UGVya3MoKSB7XHJcbiAgICBteVBlcmtzID0gW107XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaGFzUGVyayxcclxuICAgIGFkZFBlcmssXHJcbiAgICBzZWxlY3RBYmlsaXR5LFxyXG4gICAgZ2V0UGVya0Zyb21UaWVyLFxyXG4gICAgZ2V0QWxsUGVya3MsXHJcbiAgICByZXNldFBlcmtzXHJcbn07IiwiLy8gREVQRU5EUyBPTjoganNvbi9idXR0b25zLmpzXHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoJy4vanNvbi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5cclxuZnVuY3Rpb24gaXNQb25kZXJlZChpZCkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGlkIGV4aXN0cyBpbiB0aGUgdW5sb2NrcyBtYXBcclxuICAgIC8vIElmIHRoZSBpZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBtYXAsIHJldHVybiBmYWxzZVxyXG5cclxuICAgIHJldHVybiBwb25kZXJzW2lkXSA/IHBvbmRlcnNbaWRdLmlzUG9uZGVyZWQgOiBmYWxzZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhblVubG9jayh1bmxvY2tJZCkge1xyXG4gICAgLy8gR2V0IHRoZSBrZXkgZnJvbSB0aGlzIGlkXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHVubG9jaz8gJywgdW5sb2NrSWQpO1xyXG4gICAgdmFyIHVubG9ja0tleSA9ICcnO1xyXG4gICAgZm9yIChsZXQgdW5sb2NrIGluIHBvbmRlcnMpIHtcclxuICAgICAgICBpZiAocG9uZGVyc1t1bmxvY2tdLmlkID09PSB1bmxvY2tJZCkge1xyXG4gICAgICAgICAgICB1bmxvY2tLZXkgPSB1bmxvY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh1bmxvY2tLZXkgPT09ICcnKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiaW52YWxpZCB1bmxvY2sgaWQ6IFwiLCB1bmxvY2tJZCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICB2YXIgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHBvbmRlcnNbdW5sb2NrS2V5XS5jb3N0KSB7XHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpIDwgcG9uZGVyc1t1bmxvY2tLZXldLmNvc3RbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ2Fubm90IHVubG9jayBcIiArIHVubG9ja0lkKTtcclxuICAgICAgICAgICAgY2FuQnV5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHdlIHVubG9jayAnLCB1bmxvY2tJZCwgY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMocG9uZGVyT2JqZWN0cykge1xyXG4gICAgLy8gY29uc3QgZ2VuZXJhdGVkQnV0dG9ucyA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgW3BvbmRlcktleSwgcG9uZGVyT2JqXSBvZiBPYmplY3QuZW50cmllcyhwb25kZXJPYmplY3RzKSkge1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25LZXkgPSBgcG9uZGVyJHtjYXBpdGFsaXplRmlyc3QocG9uZGVyS2V5KX1gOyAvLyBlLmcuIHBvbmRlckZpc2hpbmdcclxuXHJcbiAgICAgICAgLy8gbGV0IHRvb2x0aXBDb3N0ID0gT2JqZWN0LmVudHJpZXMocG9uZGVyT2JqLmNvc3QpLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHthbW91bnQudG9GaXhlZCgwKX0gJHttYXRlcmlhbH1gKS5qb2luKCc8YnI+Jyk7XHJcbiAgICAgICAgbGV0IHRvb2x0aXBDb3N0ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KHBvbmRlck9iai5jb3N0KTtcclxuICAgICAgICBidXR0b25zW2J1dHRvbktleV0gPSB7XHJcbiAgICAgICAgICAgIGNsYXNzOiAndG9vbHRpcCB1bmxvY2snLFxyXG4gICAgICAgICAgICB0ZXh0OiBwb25kZXJPYmoudGV4dCB8fCAnUG9uZGVyIGEgTXlzdGVyeT8nLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogcG9uZGVyT2JqLnRvb2x0aXBEZXNjIHx8IFwiV2hvIGtub3dzIHdoYXQgeW91J2xsIGRpc2NvdmVyXCIsXHJcbiAgICAgICAgICAgIHRvb2x0aXBDb3N0OiB0b29sdGlwQ29zdCxcclxuICAgICAgICAgICAgdGFiOiAncG9uZGVyJyxcclxuICAgICAgICAgICAgdW5sb2NrOiBwb25kZXJLZXksXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi9oZWxwZXInKS5nZXRNYXgoJ3BvbmRlcicpID49IHBvbmRlcnNbcG9uZGVyS2V5XS5jb3N0Wydwb25kZXInXSAvIDI7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoaWRlOiAoKSA9PiBpc1BvbmRlcmVkKHBvbmRlcktleSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25LZXksIGJ1dHRvbnNbYnV0dG9uS2V5XSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybiBnZW5lcmF0ZWRCdXR0b25zO1xyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjYW5VbmxvY2ssXHJcbiAgICBpc1BvbmRlcmVkLFxyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zXHJcbn07IiwiXHJcbmNvbnN0IHsgaGFzUHJlc3RpZ2UsIGdldExldmVsT2ZQcmVzdGlnZSB9ID0gcmVxdWlyZShcIi4vanNvbi9wcmVzdGlnZVwiKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKFwiLi9wb25kZXJcIik7XHJcbmNvbnN0IHsgc2V0TWF4IH0gPSByZXF1aXJlKFwiLi9yZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTtcclxuY29uc3QgeyB1cGRhdGVCb3VuY2VBbmltYXRpb24gfSA9IHJlcXVpcmUoXCIuL3VwZGF0ZUJvdW5jZUFuaW1hdGlvblwiKTtcclxuXHJcbmZ1bmN0aW9uIHJlY2FsY01heENsb25lcygpIHtcclxuICAgIGxldCBtYXhDbG9uZXMgPSAwO1xyXG4gICAgaWYgKHBhc3NlZFN0YWdlKCdjbG9uZScpKSBtYXhDbG9uZXMgKz0gMTtcclxuXHJcbiAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKS5idWlsZGluZ3M7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhwYXNzZWRTdGFnZSgnY2xvbmUnKSwgbWF4Q2xvbmVzKTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgYnVpbGRpbmddIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5ncykpIHtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5LCBidWlsZGluZywgYnVpbGRpbmcuZWZmZWN0cyk7XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmVmZmVjdHMgJiYgYnVpbGRpbmcuZWZmZWN0c1snY2xvbmVzJ10pXHJcbiAgICAgICAgICAgIG1heENsb25lcyArPSBidWlsZGluZy5lZmZlY3RzWydjbG9uZXMnXSAqIGJ1aWxkaW5nLmNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFBvbmRlciBib251c2VzXHJcbiAgICBpZiAoaXNQb25kZXJlZCgnYmlnZ2VyU2hlbHRlcicpKSBtYXhDbG9uZXMgKz0gMSAqIGJ1aWxkaW5nc1snc2hlbHRlciddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlckh1dCcpKSBtYXhDbG9uZXMgKz0gMSAqIGJ1aWxkaW5nc1snaHV0J10uY291bnQ7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnYmlnZ2VySG91c2UnKSkgbWF4Q2xvbmVzICs9IDIgKiBidWlsZGluZ3NbJ2hvdXNlJ10uY291bnQ7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnYmlnZ2VyVGVlcGVlJykpIG1heENsb25lcyArPSA0ICogYnVpbGRpbmdzWyd0ZWVwZWUnXS5jb3VudDtcclxuICAgIGlmIChpc1BvbmRlcmVkKCdldmVuQmlnZ2VyU2hlbHRlcicpKSBtYXhDbG9uZXMgKz0gMSAqIGJ1aWxkaW5nc1snc2hlbHRlciddLmNvdW50O1xyXG5cclxuICAgIGlmIChoYXNQcmVzdGlnZSgnbWF4Q2xvbmVzJykpIG1heENsb25lcyArPSAxICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdtYXhDbG9uZXMnKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKG1heENsb25lcyk7XHJcbiAgICAvLyByZXR1cm4gbWF4Q2xvbmVzO1xyXG4gICAgc2V0TWF4KCdjbG9uZXMnLCBtYXhDbG9uZXMpO1xyXG4gICAgdXBkYXRlQm91bmNlQW5pbWF0aW9uKCk7XHJcbn1cclxuXHJcbmV4cG9ydHMucmVjYWxjTWF4Q2xvbmVzID0gcmVjYWxjTWF4Q2xvbmVzOyIsImNvbnN0IHsgaGFzUHJlc3RpZ2UsIGdldExldmVsT2ZQcmVzdGlnZSB9ID0gcmVxdWlyZSgnLi9qc29uL3ByZXN0aWdlJyk7XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nS2V5IFRoZSBidWlsZGluZyB3ZSByZWNhbGN1bGF0ZSB0aGUgY29zdCBvZlxyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmdzIEJ1aWxkaW5ncyBvYmplY3RcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gaGFzUGVyayBIYXNQZXJrIGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChidWlsZGluZ0tleSwgYnVpbGRpbmdzLCBoYXNQZXJrKSB7XHJcbiAgICBsZXQgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdLZXldO1xyXG4gICAgaWYgKGJ1aWxkaW5nICYmIGJ1aWxkaW5nLmNvc3QgJiYgYnVpbGRpbmcucmF0aW8pIHtcclxuICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1aWxkaW5nLmJhc2Vjb3N0W21hdGVyaWFsXSwgYnVpbGRpbmcucmF0aW8sIGJ1aWxkaW5nLmNvdW50KTtcclxuICAgICAgICAgICAgYnVpbGRpbmcuY29zdFttYXRlcmlhbF0gPSBNYXRoLnJvdW5kKGJ1aWxkaW5nLmJhc2Vjb3N0W21hdGVyaWFsXSAqIE1hdGgucG93KGJ1aWxkaW5nLnJhdGlvLCBidWlsZGluZy5jb3VudCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGhhc1BlcmsoJ0FyY2hpdGVjdCcpKSBidWlsZGluZy5jb3N0W21hdGVyaWFsXSAqPSAwLjc1OyAvLyAyNSUgcmVkdWN0aW9uIGZvciBhcmNoaXRlY3RzXHJcbiAgICAgICAgICAgIGlmIChoYXNQcmVzdGlnZSgnY2hlYXBlckJ1aWxkaW5ncycpKSBidWlsZGluZy5jb3N0W21hdGVyaWFsXSAqPSBNYXRoLnBvdygwLjk1LCBnZXRMZXZlbE9mUHJlc3RpZ2UoJ2NoZWFwZXJCdWlsZGluZ3MnKSk7IC8vIDUlIHJlZHVjdGlvblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdG9vbHRpcCBjb3N0XHJcbiAgICBjb25zdCBteUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYnVpbGRpbmdLZXkpO1xyXG4gICAgdmFyIG5ld1RleHQgPSByZXF1aXJlKCcuL3Jlc291cmNlcycpLmdlbmVyYXRlVG9vbHRpcENvc3QoYnVpbGRpbmcuY29zdCk7XHJcbiAgICBpZiAobXlCdXR0b24pIHtcclxuICAgICAgICBteUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgbmV3VGV4dCk7XHJcbiAgICAgICAgY29uc3QgZWZmZWN0U3RyaW5nID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKS5nZW5lcmF0ZUVmZmVjdFN0cmluZyhidWlsZGluZyk7XHJcbiAgICAgICAgbXlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZWZmZWN0JywgZWZmZWN0U3RyaW5nKTtcclxuXHJcbiAgICB9XHJcbiAgICBlbHNlIHsgdGhyb3cgXCJCdXR0b24gbm90IGZvdW5kIGZvciBcIiArIGJ1aWxkaW5nS2V5OyB9XHJcblxyXG59XHJcbmV4cG9ydHMucmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgPSByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdDsiLCJcclxuLy8gREVQRU5EUyBPTjogdG9vbHMuanMsIGpvYnMuanNcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcblxyXG5jb25zdCB7IGdldFdvcmtlcnMsIHVwZGF0ZVRvdGFsIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNUb29sLCB9ID0gcmVxdWlyZSgnLi90b29scycpO1xyXG5jb25zdCB7IGNhbGNDcmFmdEJvbnVzLCBnZXRNYXggfSA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuY29uc3QgeyBjYWxjSW5jcmVhc2UgfSA9IHJlcXVpcmUoXCIuL2NhbGNJbmNyZWFzZVwiKTtcclxuY29uc3QgeyB1cGRhdGVTaWRlYmFyLCBhYmJyZXZpYXRlTnVtYmVyIH0gPSByZXF1aXJlKFwiLi9zaWRlYmFyXCIpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlLCBnZXRBbGxTdGFnZXMgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTsgLy8gVXNlZCBmb3IgZXZhbCBmdW5jdGlvbnNcclxuY29uc3QgeyB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoXCIuL3NpZGViYXJcIik7XHJcbmNvbnN0IHsgdXBkYXRlU2tpbGxzIH0gPSByZXF1aXJlKFwiLi9za2lsbHNcIik7XHJcbi8vIGNvbnNvbGUubG9nKGNhcGl0YWxpemVGaXJzdCk7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBqb2IgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2VBZmZlY3RlZEJ5Sm9iKGpvYiwgcmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IHNraWxsID0gc2tpbGxzW2pvYl07XHJcbiAgICBpZiAoIXNraWxsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgaWYgKHNraWxsLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlJ3MgYSB0b29sIHJlcXVpcmVtZW50IGZvciB0aGlzIHJlc291cmNlXHJcbiAgICAgICAgaWYgKHNraWxsLm5lZWRUb29scyAmJiBBcnJheS5pc0FycmF5KHNraWxsLm5lZWRUb29scykpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgdG9vbE9iaiBvZiBza2lsbC5uZWVkVG9vbHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRvb2wgaW4gdG9vbE9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sT2JqW3Rvb2xdLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaGFzIHRoaXMgdG9vbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm93LCBqdXN0IHJldHVybmluZyB0cnVlIHRvIGluZGljYXRlIHRoZSByZXNvdXJjZSBpcyBhZmZlY3RlZCBhbmQgYSB0b29sIGlzIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgeW91IG1heSB3YW50IHRvIHJlcGxhY2UgdGhpcyB3aXRoIGEgY2hlY2sgdG8gc2VlIGlmIHRoZSBwbGF5ZXIgcG9zc2Vzc2VzIHRoZSByZXF1aXJlZCB0b29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNUb29sKHRvb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBuZWVkZWQgYSB0b29sIGJ1dCBub3QgZm9yIHRoaXNcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIG5vIHRvb2wgcmVxdWlyZW1lbnQgd2FzIGZvdW5kIGZvciB0aGUgcmVzb3VyY2UsIGl0J3Mgc3RpbGwgYWZmZWN0ZWQgYnkgdGhlIGpvYlxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjU2Vjb25kc1JlbWFpbmluZyhyZXNvdXJjZU5hbWUsIG5lZWRlZCkge1xyXG4gICAgaWYgKG5lZWRlZCA8PSByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgcmV0dXJuIDA7XHJcblxyXG4gICAgLy8gSG93IG11Y2ggcGVyIHNlY29uZFxyXG4gICAgY29uc3QgaW5jcmVhc2UgPSBjYWxjSW5jcmVhc2UocmVzb3VyY2VOYW1lLCAxMDAwKTtcclxuICAgIGlmIChpbmNyZWFzZSA9PSAwKSByZXR1cm4gLTE7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncGluZycpO1xyXG4gICAgLy8gRGlmZmVyZW5jZSBvdmVyIHRpbWVcclxuICAgIGNvbnN0IHRpbWVSZW1haW5pbmcgPSBNYXRoLmNlaWwobmVlZGVkIC0gcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpIC8gaW5jcmVhc2U7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbGMgbWlsbGknLCByZXNvdXJjZU5hbWUsIG5lZWRlZCwgdGltZVJlbWFpbmluZyk7XHJcbiAgICAvLyBpZiAodGltZVJlbWFpbmluZyA9PSBJbmZpbml0eSB8fCB0aW1lUmVtYWluaW5nID09IC1JbmZpbml0eSkgcmV0dXJuIC0xO1xyXG4gICAgcmV0dXJuIHRpbWVSZW1haW5pbmc7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgcmVzb3VyY2VzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG5leHBvcnRzLnJlc291cmNlc0NvbnRhaW5lciA9IHJlc291cmNlc0NvbnRhaW5lcjtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRNYXgobWF0ZXJpYWwsIG51bSkge1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS5tYXggPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNyZWFzZU1heChtYXRlcmlhbCwgbnVtKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImluY3JlYXNlIG1heCBcIiwgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLm1heCArPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG5cclxufVxyXG5cclxuLy8gR2VuZXJpYyBpbmNyZWFzZVxyXG5mdW5jdGlvbiBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCBudW0pIHtcclxuICAgIC8vIEVuc3VyZSB3ZSBhY3R1YWxseSBuZWVkIHRvIGRvIGFueXRoaW5nXHJcbiAgICBpZiAobnVtID09IDApIHJldHVybjtcclxuICAgIG1hdGVyaWFsID0gbWF0ZXJpYWwudG9Mb3dlckNhc2UoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbmNyZWFzZSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgLy8gaWYgKE1hdGguYWJzKG51bSkgPiA1KSBjb25zb2xlLmxvZygnY2hhbmdpbmcnLCBtYXRlcmlhbCwgJ2J5JywgbnVtKTtcclxuXHJcbiAgICAvLyBUaGlzIGNoZWNrIGVuc3VyZXMgdGhhdCB0aGUgbWF0ZXJpYWwga2V5IGV4aXN0cyBpbiB0aGUgcmVzb3VyY2VzIG1hcC5cclxuICAgIGlmIChtYXRlcmlhbCBpbiByZXNvdXJjZXMpIHtcclxuXHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsKSA8IGdldE1heChtYXRlcmlhbCkgJiYgbnVtID4gMCkgeyAvLyBBZGRpbmcgcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKCdmYXN0ZXJSZXNvdXJjZUdhaW4nKSkgbnVtICo9IDEuMDU7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgICAgICB1cGRhdGVTa2lsbHMobWF0ZXJpYWwsIG51bSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChudW0gPCAwKSB7IC8vIFN1YnRyYWN0aW5nIHJlc291cmNlc1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuICAgICAgICB9IGVsc2UgeyAvLyBBbHJlYWR5IGF0IG1heFxyXG4gICAgICAgICAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlID0gZ2V0TWF4KG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoaXNQb25kZXJlZCgnYXV0b2NyYWZ0JykgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdXRvQ3JhZnRDaGVja2JveFwiKS5jaGVja2VkICYmIGF1dG9DcmFmdFRhYmxlW21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICAgICAgY3JhZnRBbGxSZXNvdXJjZXMoYXV0b0NyYWZ0VGFibGVbbWF0ZXJpYWxdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKTtcclxuICAgICAgICAvLyByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzKCk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobWF0ZXJpYWwgaW4gY3JhZnRlZFJlc291cmNlcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjcmFmdGluZyBhIG1hdGVyaWFsJywgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICAgICAgY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShtYXRlcmlhbCk7XHJcbiAgICAgICAgdXBkYXRlU2tpbGxzKG1hdGVyaWFsLCBudW0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gQ3JlYXRpbmcgYSBuZXcgbWF0ZXJpYWxcclxuICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkgcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdKSBjcmFmdGVkUmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcblxyXG4gICAgICAgIHVwZGF0ZVNpZGViYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjcmFmdGVkIG1hdGVyaWFscyBoYXZlIG5vIG1heCwgYSBsYSBLaXR0ZW5zIEdhbWVcclxuXHJcblxyXG5cclxuICAgIC8vIHVwZGF0ZVNpZGViYXIoKTtcclxuXHJcblxyXG5cclxuICAgIC8vIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIG1hdGVyaWFsICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWU7XHJcblxyXG59XHJcbi8vIEdsb2JhbGx5IGRpc3BsYXkgZm9yIGRldiBwdXJwb3Nlc1xyXG53aW5kb3cuaW5jcmVhc2VNYXRlcmlhbCA9IGluY3JlYXNlTWF0ZXJpYWw7XHJcblxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzKCkge1xyXG4gICAgLy8gY29uc3QgcmVzb3VyY2VzID0gW1wiY2xvbmVzXCIsIFwic3RpY2tzXCIsIFwidmluZXNcIiwgXCJyb2Nrc1wiLCBcImZpc2hcIiwgXCJ3b29kXCIsIFwicG9uZGVyXCJdO1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbmNyZWFzZSBvZiBcIiArIHJlc291cmNlKTtcclxuICAgICAgICBjb25zdCByYXRlID0gY2FsY0luY3JlYXNlKHJlc291cmNlLCAxMDAwKTtcclxuICAgICAgICB2YXIgcmF0ZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtyZXNvdXJjZX1JbmNyZWFzZVJhdGVgKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHJhdGVFbGVtZW50KSByYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IHJhdGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBcclxuICogQHJldHVybnMgQnV0dG9uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY29uZmlnKSB7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBjb25maWcuY2xhc3MgKyAnIHRvb2x0aXAnO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnaWQnLCBjb25maWcuaWQpO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgncmVxdWlyZW1lbnQnLCBjb25maWcucmVxdWlyZWRTdGFnZSk7XHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBPYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5maW5kKGtleSA9PiBjcmFmdGVkUmVzb3VyY2VzW2tleV0gPT09IGNvbmZpZyk7XHJcbiAgICAvLyBjb25zdCBjbGVhbkNvdW50ID0gcGFyc2VGbG9hdChjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpLnRvRml4ZWQoMCk7XHJcbiAgICAvLyBidXR0b24uaW5uZXJIVE1MID0gYCR7Y29uZmlnLnRleHQgfHwgY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSl9OiA8c3BhbiBpZD1cIiR7cmVzb3VyY2VOYW1lICsgXCJWYWx1ZVwifVwiPiR7Y2xlYW5Db3VudH08L3NwYW4+YDtcclxuICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgJHtjb25maWcudGV4dCB8fCBjYXBpdGFsaXplRmlyc3QocmVzb3VyY2VOYW1lKX1gO1xyXG4gICAgLy8gYnV0dG9uLnRvb2x0aXBEZXNjID0gY29uZmlnLnRvb2x0aXBEZXNjOyBcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGJ1dHRvbi50YWIgPSAnZXhwZXJpbWVudCc7XHJcblxyXG4gICAgcmV0dXJuIGJ1dHRvbjtcclxufVxyXG5cclxuXHJcbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjcmFmdGVkUmVzb3VyY2VCdXR0b25zJyk7XHJcbmZ1bmN0aW9uIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKSB7XHJcblxyXG4gICAgLy8gRm9yIGVhY2ggcmVzb3VyY2UsIGNyZWF0ZSBhIGJ1dHRvbiB1c2luZyB0aGUgY2FwdHVyZWQgY291bnRzXHJcbiAgICBmb3IgKGxldCBuYW1lIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuXHJcbiAgICAgICAgLy8gY29uZmlnLmNvdW50ID0gY3JhZnRlZFJlc291cmNlc1tuYW1lXS52YWx1ZTtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBjcmVhdGVDcmFmdGVkUmVzb3VyY2VCdXR0b24oY3JhZnRlZFJlc291cmNlc1tuYW1lXSk7XHJcbiAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnRvb2x0aXBEZXNjIHx8IFwiXCIpO1xyXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmNvc3QpIHx8IFwiXCIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b29sdGlwIGNvc3QnLCBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgICAgICBjb25zdCByZXFSZXN1bHQgPSBwYXNzZWRTdGFnZShidXR0b24uZ2V0QXR0cmlidXRlKCdyZXF1aXJlbWVudCcpKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXFSZXN1bHQsIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVtZW50JyksIE9iamVjdC52YWx1ZXMoZ2V0QWxsU3RhZ2VzKCkpKTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogRmlndXJlIG91dCB3aGF0IHRoZSBidWcgaXMgaGVyZVxyXG4gICAgICAgIGlmIChyZXFSZXN1bHQpIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcclxuICAgICAgICBlbHNlIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuXHJcblxyXG4gICAgICAgIGJ1dHRvbnNbY3JhZnRlZFJlc291cmNlc1tuYW1lXS5pZF0gPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihuYW1lKSB7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uKGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0pO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCBjcmFmdGVkUmVzb3VyY2VzW25hbWVdLnRvb2x0aXBEZXNjKTtcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgZ2VuZXJhdGVUb29sdGlwQ29zdChjcmFmdGVkUmVzb3VyY2VzW25hbWVdLmNvc3QpKTtcclxuXHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgIGJ1dHRvbnNbY3JhZnRlZFJlc291cmNlc1tuYW1lXS5pZF0gPSBjcmFmdGVkUmVzb3VyY2VzW25hbWVdO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdG8gcmVwbGFjZSA8cD4gZWxlbWVudHMgd2l0aCB0aGUgYnV0dG9uc1xyXG4vLyBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b24oJ3N0aWNrcycpO1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVUb29sdGlwQ29zdChyZXF1aXJlbWVudHMpIHtcclxuICAgIGlmIChyZXF1aXJlbWVudHMgPT09IG51bGwpIHJldHVybiAnJztcclxuICAgIHZhciBzdHIgPSAnJztcclxuICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHJlcXVpcmVtZW50cykge1xyXG5cclxuICAgICAgICBjb25zdCBoYXNFbm91Z2ggPSBnZXRNYXRlcmlhbChtYXRlcmlhbCwgcmVzb3VyY2VzKSA+PSByZXF1aXJlbWVudHNbbWF0ZXJpYWxdOy8qIFlvdXIgbG9naWMgdG8gY2hlY2sgaWYgdGhlcmUncyBlbm91Z2ggb2YgdGhlIG1hdGVyaWFsICovO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICBzdHIgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHthYmJyZXZpYXRlTnVtYmVyKHJlcXVpcmVtZW50c1ttYXRlcmlhbF0pfSAke21hdGVyaWFsfTwvc3Bhbj48YnI+YDtcclxuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IGVtb2ppRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbW9qaURpc3BsYXknKTtcclxuZnVuY3Rpb24gdXBkYXRlRW1vamlEaXNwbGF5KCkge1xyXG4gICAgbGV0IGVtb2ppU3RyID0gXCJcIjtcclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIGpvYkNvdW50cyBtYXAgdG8gZ2V0IGVhY2ggam9iIGFuZCBpdHMgY291bnRcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGxldCByZXNvdXJjZSA9IHJlc291cmNlc1tnZXRBZmZlY3RlZFJlc291cmNlcyhqb2IpWzBdXTtcclxuICAgICAgICBsZXQgY291bnQgPSBnZXRXb3JrZXJzKHJlc291cmNlKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZSwgY291bnQpO1xyXG4gICAgICAgIGlmIChjb3VudCA9PT0gdW5kZWZpbmVkIHx8IGNvdW50ID09IDApIGNvbnRpbnVlO1xyXG4gICAgICAgIGxldCBlbW9qaSA9IHJlc291cmNlc1tyZXNvdXJjZV0uZW1vamkgfHwgJ/CTgJ8nOyAgLy8gZ2V0IHRoZSBlbW9qaSBjb3JyZXNwb25kaW5nIHRvIHRoZSBqb2IgZnJvbSB0aGUgcmVzb3VyY2VzIG1hcFxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGpvYiwgZW1vamkpO1xyXG4gICAgICAgIGlmIChlbW9qaSkge1xyXG4gICAgICAgICAgICBlbW9qaVN0ciArPSBlbW9qaS5yZXBlYXQoY291bnQpOyAgLy8gcmVwZWF0IHRoZSBlbW9qaSBiYXNlZCBvbiB0aGUgY291bnRcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZW1vamlEaXNwbGF5LnRleHRDb250ZW50ID0gZW1vamlTdHI7ICAvLyB1cGRhdGUgdGhlIGVtb2ppRGlzcGxheSBkaXYgd2l0aCB0aGUgZ2VuZXJhdGVkIGVtb2ppIHN0cmluZ1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkanVzdEZvbnRTaXplKCkge1xyXG4gICAgICAgIGxldCBmb250U2l6ZSA9IDQ4OyAgLy8gU3RhcnRpbmcgZm9udCBzaXplXHJcblxyXG4gICAgICAgIGVtb2ppRGlzcGxheS5zdHlsZS5mb250U2l6ZSA9IGAke2ZvbnRTaXplfXB4YDtcclxuXHJcbiAgICAgICAgd2hpbGUgKChlbW9qaURpc3BsYXkub2Zmc2V0V2lkdGggPiA2MDApICYmIGZvbnRTaXplID4gMzApIHtcclxuICAgICAgICAgICAgLy8gMTAgaXMgYSBtaW5pbXVtIGZvbnQtc2l6ZSB0aHJlc2hvbGQgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wXHJcbiAgICAgICAgICAgIGZvbnRTaXplIC09IDE7IC8vIGRlY3JlYXNlIHRoZSBmb250IHNpemVcclxuICAgICAgICAgICAgZW1vamlEaXNwbGF5LnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udFNpemV9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoaXMgZnVuY3Rpb24gd2hlbmV2ZXIgdGhlIGNvbnRlbnQgb2YgI2Vtb2ppRGlzcGxheSBjaGFuZ2VzXHJcbiAgICBhZGp1c3RGb250U2l6ZSgpO1xyXG5cclxufVxyXG5cclxuLy8gQ2FsbCB1cGRhdGVFbW9qaURpc3BsYXkgZXZlcnkgdGltZSBqb2JDb3VudHMgaXMgdXBkYXRlZDpcclxuLy8gRm9yIGV4YW1wbGU6XHJcbi8vIGpvYkNvdW50cy5zZXQoJ2Zpc2hpbmcnLCA0KTtcclxudXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcblxyXG5cclxuY29uc3QgYXV0b0NyYWZ0VGFibGUgPSB7XHJcbiAgICAnc3RpY2tzJzogJ2hhbmRsZScsXHJcbiAgICAnd29vZCc6ICdwYXBlcicsXHJcbiAgICAncm9ja3MnOiAnc2hhcnByb2NrcycsXHJcbiAgICAndmluZXMnOiAncm9wZScsXHJcbiAgICAnc2FuZCc6ICdnbGFzcycsXHJcbiAgICAnb3JlJzogJ2dvbGQnLFxyXG4gICAgJ2NsYXknOiAnYnJpY2tzJ1xyXG59O1xyXG5cclxuZnVuY3Rpb24gY3JhZnRBbGxSZXNvdXJjZXMocmVzb3VyY2VLZXkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29zdCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNvc3Q7XHJcbiAgICAgICAgbGV0IHN1ZmZpY2llbnRSZXNvdXJjZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtYXQgaW4gY29zdCkge1xyXG4gICAgICAgICAgICAvLyBpZiAoZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIDwgY29zdFttYXRdKSB7XHJcbiAgICAgICAgICAgIHN1ZmZpY2llbnRSZXNvdXJjZXMucHVzaChnZXRNYXRlcmlhbChtYXQsIHJlc291cmNlcykgLyBjb3N0W21hdF0pO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtaW4gPSBNYXRoLmZsb29yKE1hdGgubWluKC4uLnN1ZmZpY2llbnRSZXNvdXJjZXMpKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXNvdXJjZUtleSwgbWluKTtcclxuICAgICAgICBjcmFmdFJlc291cmNlUXVhbnRpdHkocmVzb3VyY2VLZXksIG1pbik7XHJcblxyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBjcmFmdGFsbCBmb3I6ICcsIHJlc291cmNlS2V5LCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyYWZ0UmVzb3VyY2VRdWFudGl0eShyZXNvdXJjZUtleSwgcXVhbnRpdHkpIHtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZUtleSkpIHRocm93IFwiSW52YWxpZCBjcmFmdCBmb3IgbWlzc2luZyByZXNvdXJjZTogXCIgKyByZXNvdXJjZUtleTtcclxuXHJcbiAgICBpZiAoIWNhbkNyYWZ0KHJlc291cmNlS2V5KSkgcmV0dXJuOyAvLyBUYWtlcyBjYXJlIG9mIHF1YW50aXR5IDwgMVxyXG4gICAgbGV0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgLy8gbGV0IGNyYWZ0Qm9udXMgPSBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSk7XHJcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHF1YW50aXR5OyArK2kpIHtcclxuICAgIC8vICAgICBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cyk7XHJcbiAgICAvLyB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguZmxvb3IocXVhbnRpdHkpOyArK2kpIHsgLy8gT25seSBjcmFmdCB3aG9sZSBudW1iZXIsIHNvIDEuNCBvbmx5IHJ1bnMgb25jZVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjcmFmdGluZycsIHF1YW50aXR5LCByZXNvdXJjZUtleSwgY29zdCk7XHJcbiAgICAgICAgY3JhZnRPbmUocmVzb3VyY2VLZXksIGNvc3QsIGNhbGNDcmFmdEJvbnVzKHJlc291cmNlS2V5KSk7XHJcbiAgICB9XHJcbiAgICAvLyBmb3IgKGxldCBtYXQgaW4gY29zdCkge1xyXG4gICAgLy8gICAgIGluY3JlYXNlTWF0ZXJpYWwobWF0LCAtY29zdFttYXRdICogcXVhbnRpdHkpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZUtleSwgcXVhbnRpdHkpO1xyXG5cclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UpIGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlID0gdHJ1ZTtcclxuXHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUocmVzb3VyY2VLZXkpO1xyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjcmFmdEJvbnVzKSB7XHJcbiAgICBmb3IgKGNvbnN0IFttYXQsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoY29zdCkpIHtcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdCwgLXZhbCk7XHJcbiAgICB9XHJcbiAgICBpbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlS2V5LCBjcmFmdEJvbnVzKTtcclxuXHJcbn1cclxuLy8gQ3JhZnQgZnVuY3Rpb25cclxuZnVuY3Rpb24gY3JhZnRSZXNvdXJjZShyZXNvdXJjZUtleSkge1xyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlS2V5KSkgdGhyb3cgXCJJbnZhbGlkIGNyYWZ0IGZvciBtaXNzaW5nIHJlc291cmNlOiBcIiArIHJlc291cmNlS2V5O1xyXG5cclxuICAgIGlmICghY2FuQ3JhZnQocmVzb3VyY2VLZXkpKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgbGV0IGNyYWZ0Qm9udXMgPSBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSk7XHJcblxyXG5cclxuICAgIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjcmFmdEJvbnVzKTtcclxuXHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgcmVzb3VyY2VLZXkgKyBcIlZhbHVlXCIpLnRleHRDb250ZW50ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0udmFsdWUudG9GaXhlZCgyKTtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY3JhZnRlZE9uY2UpIGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlID0gdHJ1ZTtcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZShyZXNvdXJjZUtleSk7XHJcbn1cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBpbmNyZWFzZU1hdGVyaWFsLFxyXG4gICAgc2V0TWF4LFxyXG4gICAgaW5jcmVhc2VNYXgsXHJcbiAgICBjcmFmdEFsbFJlc291cmNlcyxcclxuICAgIGNyYWZ0UmVzb3VyY2UsXHJcbiAgICB1cGRhdGVFbW9qaURpc3BsYXksXHJcbiAgICBnZW5lcmF0ZVRvb2x0aXBDb3N0LFxyXG4gICAgY2FsY1NlY29uZHNSZW1haW5pbmcsXHJcbiAgICBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zLFxyXG4gICAgY2FsY0luY3JlYXNlLFxyXG4gICAgdXBkYXRlUmVzb3VyY2VJbmNyZWFzZVJhdGVzLFxyXG4gICAgY3JhZnRSZXNvdXJjZVF1YW50aXR5XHJcblxyXG59OyIsIi8vIERFUEVORFMgT046IHJlc291cmNlcy5qc1xyXG5jb25zdCB7IGNhbGNJbmNyZWFzZSwgdXBkYXRlRW1vamlEaXNwbGF5IH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGFkZFRvb2wsIGdldEFsbFRvb2xzIH0gPSByZXF1aXJlKCcuL3Rvb2xzJyk7XHJcbmNvbnN0IHsgYWxsVmlzaWJsZUJ1dHRvbnMsIHNldFZpc2libGVCdXR0b24gfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmNvbnN0IHsgZ2V0QWxsUGVya3MsIGFkZFBlcmssIGhhc1BlcmssIHNlbGVjdEFiaWxpdHkgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGpvYkNvdW50cywgc2V0Q29ubmVjdGlvbnMsIGdldENvbm5lY3Rpb25zLCBkaXN0cmlidXRlV29ya2VycywgdXBkYXRlRGlzcGxheSB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgdG90YWxfdGltZSB9ID0gcmVxdWlyZSgnLi9tYWluJyk7XHJcbmNvbnN0IHsgc2V0QXRlRmlzaCwgZ2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcblxyXG5cclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbmNvbnN0IHsgcG9uZGVycyB9ID0gcmVxdWlyZShcIi4vanNvbi9wb25kZXJcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKFwiLi9qc29uL3NraWxsc1wiKTtcclxuY29uc3QgeyBnZXRBbGxTdGFnZXMgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nLCBsb2FkRmFjdG9yeSB9ID0gcmVxdWlyZSgnLi9mYWN0b3J5Jyk7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKCcuL3JlY2FsY01heENsb25lcycpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nTGlzdCB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBwb3B1bGF0ZVNraWxsc1RhYmxlIH0gPSByZXF1aXJlKCcuL3NraWxscycpO1xyXG5cclxuLy8gaW1wb3J0IGpvYkNvdW50cztcclxuLyogU0FWSU5HICovXHJcbi8vIHZhciBzYXZlID0ge1xyXG4vLyAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXHJcbi8vICAgICBjcmFmdGVkUmVzb3VyY2VzOiBjcmFmdGVkUmVzb3VyY2VzLFxyXG4vLyAgICAgc2tpbGxzOiBza2lsbHMsXHJcbi8vICAgICBwbGF5ZXJUb29sczogcGxheWVyVG9vbHNcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gc2F2ZUdhbWUoKSB7XHJcbiAgICBsZXQgc2F2ZSA9IHtcclxuICAgICAgICBza2lsbHM6IHt9LCAvLyBUaGlzIHdpbGwgaG9sZCB0aGUgZXhwZXJpZW5jZSBhbmQgbGV2ZWwgZm9yIGVhY2ggc2tpbGxcclxuICAgICAgICBjcmFmdGVkUmVzb3VyY2VzOiB7fSwgLy8gVGhpcyB3aWxsIGhvbGQgdGhlIHZhbHVlIGZvciBlYWNoIGNyYWZ0ZWQgaXRlbVxyXG4gICAgICAgIHJlc291cmNlczoge30sXHJcbiAgICAgICAgdG9vbHM6IFtdLFxyXG4gICAgICAgIHN0YWdlczogW10sXHJcbiAgICAgICAgdW5sb2Nrczoge30sXHJcbiAgICAgICAgam9iczoge30sXHJcbiAgICAgICAgYnVpbGRpbmdzOiB7fSxcclxuICAgICAgICB0aW1lOiB7fSxcclxuICAgICAgICBhbGxWaXNpYmxlQnV0dG9uczogW10sXHJcbiAgICAgICAgbWVzc2FnZTogW10sXHJcbiAgICAgICAgY29ubmVjdGlvbnM6IG5ldyBNYXAoKSxcclxuICAgICAgICBwZXJrczogW10sXHJcbiAgICAgICAgZmFjdG9yaWVzOiB7fSxcclxuICAgICAgICBwcmVzdGlnZToge31cclxuICAgIH07XHJcblxyXG4gICAgLy8gRXh0cmFjdCBleHAgYW5kIGxldmVsIGZyb20gc2tpbGxzIGFuZCBzYXZlIHRvIHNhdmUuc2tpbGxzXHJcbiAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICBzYXZlLnNraWxsc1tza2lsbF0gPSB7XHJcbiAgICAgICAgICAgIGV4cDogc2tpbGxzW3NraWxsXS5leHAsXHJcbiAgICAgICAgICAgIGxldmVsOiBza2lsbHNbc2tpbGxdLmxldmVsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHRyYWN0IHZhbHVlIGZyb20gY3JhZnRlZFJlc291cmNlcyBhbmQgc2F2ZSB0byBzYXZlLmNyYWZ0ZWRJdGVtc1xyXG4gICAgZm9yIChsZXQgaXRlbSBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKCFzYXZlLmNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICAgICAgc2F2ZS5jcmFmdGVkUmVzb3VyY2VzW2l0ZW1dID0geyB2YWx1ZTogMCwgY3JhZnRlZE9uY2U6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0udmFsdWUgPSBnZXRDcmFmdGVkUmVzb3VyY2UoaXRlbSk7XHJcbiAgICAgICAgc2F2ZS5jcmFmdGVkUmVzb3VyY2VzW2l0ZW1dLmNyYWZ0ZWRPbmNlID0gY3JhZnRlZFJlc291cmNlc1tpdGVtXS5jcmFmdGVkT25jZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaXRlbSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgaXRlbSBleGlzdHMgaW4gdGhlIHNhdmUucmVzb3VyY2VzIG9iamVjdC4gSWYgbm90LCBpbml0aWFsaXplIGl0LlxyXG4gICAgICAgIGlmICghc2F2ZS5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICAgICAgc2F2ZS5yZXNvdXJjZXNbaXRlbV0gPSB7IHZhbHVlOiAwLCBtYXg6IDAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNhdmUucmVzb3VyY2VzW2l0ZW1dLnZhbHVlID0gZ2V0TWF0ZXJpYWwoaXRlbSwgcmVzb3VyY2VzKTtcclxuICAgICAgICBzYXZlLnJlc291cmNlc1tpdGVtXS5tYXggPSByZXNvdXJjZXNbaXRlbV0ubWF4O1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmUudG9vbHMgPSBnZXRBbGxUb29scygpO1xyXG4gICAgc2F2ZS5zdGFnZXMgPSBnZXRBbGxTdGFnZXMoKTtcclxuICAgIHNhdmUuam9icyA9IGpvYkNvdW50cztcclxuICAgIHNhdmUucGVya3MgPSBnZXRBbGxQZXJrcygpO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHNhdmUuY29ubmVjdGlvbnMgPSBBcnJheS5mcm9tKGdldENvbm5lY3Rpb25zKCkuZW50cmllcygpKTtcclxuXHJcbiAgICBmb3IgKGxldCB1IGluIHBvbmRlcnMpIHtcclxuICAgICAgICBzYXZlLnVubG9ja3NbdV0gPSBpc1BvbmRlcmVkKHUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGIgaW4gYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgc2F2ZS5idWlsZGluZ3NbYl0gPSBidWlsZGluZ3NbYl0uY291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coYWxsVmlzaWJsZUJ1dHRvbnMudmFsdWVzKCkpO1xyXG4gICAgZm9yIChsZXQgYSBpbiBhbGxWaXNpYmxlQnV0dG9ucykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgICAgIHNhdmUuYWxsVmlzaWJsZUJ1dHRvbnMucHVzaChhKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzYXZlLmFsbFZpc2libGVCdXR0b25zKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHRyYWN0VGV4dEZyb21IVE1MKGh0bWxTdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbFN0cmluZztcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBkaXYudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgY29uc3Qgc3BhblRleHQgPSBkaXYucXVlcnlTZWxlY3Rvcignc3BhbicpLnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICByZXR1cm4gW3RleHRDb250ZW50LCBzcGFuVGV4dF07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZykpIHtcclxuICAgICAgICBzYXZlLmZhY3Rvcmllc1trZXldID0gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGh0bWxTdHJpbmcgPSByZXF1aXJlKCcuL21haW4nKS5nZXRNZXNzYWdlKCkuaW5uZXJIVE1MO1xyXG5cclxuICAgIHNhdmUubWVzc2FnZSA9IGV4dHJhY3RUZXh0RnJvbUhUTUwoaHRtbFN0cmluZyk7IC8vIFttZXNzYWdlLCBzcGFuXVxyXG5cclxuXHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocHJlc3RpZ2UpKSB7XHJcbiAgICAgICAgc2F2ZS5wcmVzdGlnZVtrZXldID0geyBjb3N0OiB2YWwuY29zdCwgbGV2ZWw6IHZhbC5sZXZlbCB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKGNvbWJpbmVkVGV4dCk7IC8vIFwiWW91IGZpbmQgeW91cnNlbGYgYWxvbmUgaW4gYSBmb3Jlc3RcIlxyXG4gICAgLy8gY29uc29sZS5sb2coc3BhblRleHQpOyAvLyBcImFsb25lXCJcclxuXHJcblxyXG4gICAgc2F2ZS50aW1lWyd0b3RhbF90aW1lJ10gPSB0b3RhbF90aW1lO1xyXG4gICAgc2F2ZS50aW1lWyd0aW1lX29mX3NhdmUnXSA9IERhdGUubm93KCk7XHJcbiAgICAvLyBZb3UgY2FuIG5vdyB1c2UgdGhlIHNhdmUgb2JqZWN0IHRvIHN0b3JlIHRoZSBkYXRhIHNvbWV3aGVyZSBvciBkaXNwbGF5IGl0IHRvIHRoZSB1c2VyXHJcblxyXG4gICAgY29uc29sZS5sb2coc2F2ZSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShzYXZlKSk7XHJcblxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzYXZlXCIsIEpTT04uc3RyaW5naWZ5KHNhdmUpKTtcclxuICAgIHJldHVybiBzYXZlO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGxvYWRHYW1lKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJMb2FkaW5nIEdhbWVcIik7XHJcbiAgICB2YXIgc2F2ZWdhbWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2F2ZVwiKSk7XHJcbiAgICBjb25zb2xlLmxvZyhzYXZlZ2FtZSk7XHJcbiAgICBpZiAoc2F2ZWdhbWUgPT09IG51bGwpIHtcclxuICAgICAgICAvLyBORVcgR0FNRVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUucmVzb3VyY2VzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBzYXZlZ2FtZS5yZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgaWYgKGkudmFsdWVPZigpID09PSBcInVuZGVmaW5lZFwiIHx8IGkgPT09IG51bGwpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbaV0udmFsdWUgPSBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0udmFsdWU7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1tpXS5tYXggPSBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0ubWF4O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVwZGF0aW5nIHJlc291cmNlcyBmb3IgXCIgKyBpICsgXCIgdG8gXCIgKyBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0udmFsdWUsIHNhdmVnYW1lLnJlc291cmNlc1tpXS5tYXgpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW2ldLnZhbHVlICE9IDApIHJlcXVpcmUoJy4vc2lkZWJhcicpLnVwZGF0ZURpc3BsYXlWYWx1ZShpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5za2lsbHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBzYXZlZ2FtZS5za2lsbHMpIHtcclxuICAgICAgICAgICAgc2tpbGxzW2ldLmV4cCA9IHNhdmVnYW1lLnNraWxsc1tpXS5leHA7XHJcbiAgICAgICAgICAgIHNraWxsc1tpXS5sZXZlbCA9IHNhdmVnYW1lLnNraWxsc1tpXS5sZXZlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IG9mIE9iamVjdC5rZXlzKHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIGNyYWZ0ZWQnLCBrZXksIHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXNba2V5XSwgY3JhZnRlZFJlc291cmNlc1trZXldKTtcclxuICAgICAgICAgICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzW2tleV0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWUgPSBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzW2tleV0udmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlKSkgY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlID0gMDtcclxuICAgICAgICAgICAgY3JhZnRlZFJlc291cmNlc1trZXldLmNyYWZ0ZWRPbmNlID0gc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlc1trZXldLmNyYWZ0ZWRPbmNlO1xyXG4gICAgICAgICAgICByZXF1aXJlKCcuL3NpZGViYXInKS51cGRhdGVEaXNwbGF5VmFsdWUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS50b29scyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBwbGF5ZXJUb29scyA9IHNhdmVnYW1lLnRvb2xzO1xyXG4gICAgICAgIC8vIFVuaW9uIHRoZSB0b29sIGxpc3RzIHRvZ2V0aGVyXHJcbiAgICAgICAgbGV0IHVuaW9uID0gWy4uLm5ldyBTZXQoWy4uLmdldEFsbFRvb2xzKCksIC4uLnNhdmVnYW1lLnRvb2xzXSldO1xyXG4gICAgICAgIC8vIHBsYXllclRvb2xzID0gdW5pb247XHJcbiAgICAgICAgZm9yIChsZXQgdG9vbCBpbiB1bmlvbikge1xyXG4gICAgICAgICAgICBhZGRUb29sKHRvb2wpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZm9yIChsZXQgdCBpbiBwbGF5ZXJUb29scykge1xyXG4gICAgICAgIC8vICAgICB1cGRhdGVUb29sVUkocGxheWVyVG9vbHNbdF0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnN0YWdlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCBzIGluIHNhdmVnYW1lLnN0YWdlcykge1xyXG4gICAgICAgICAgICBtYWtlVmlzaWJsZShzYXZlZ2FtZS5zdGFnZXNbc10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuam9icyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBqb2JDb3VudHMgPSBzYXZlZ2FtZS5qb2JzO1xyXG4gICAgICAgIGZvciAobGV0IGogaW4gc2F2ZWdhbWUuam9icykge1xyXG4gICAgICAgICAgICBqb2JDb3VudHNbal0gPSBzYXZlZ2FtZS5qb2JzW2pdO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhqKTtcclxuICAgICAgICAgICAgdXBkYXRlRGlzcGxheShqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnVubG9ja3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgdSBpbiBzYXZlZ2FtZS51bmxvY2tzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBwb25kZXJzW3VdLmlzUG9uZGVyZWQgPSBzYXZlZ2FtZS51bmxvY2tzW3VdO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignT2xkIHNhdmUgZGF0YSBpbmNsdWRlcyBvYnNvbGV0ZSBwb25kZXInLCB1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNQb25kZXJlZCgnc2tpbGxzVGFibGUnKSkge1xyXG4gICAgICAgIHBvcHVsYXRlU2tpbGxzVGFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQZXJrcyBiZWZvcmUgYnVpbGRpbmdzIHRvIHVwZGF0ZSBjb3N0c1xyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5wZXJrcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBteVBlcmtzID0gc2F2ZWdhbWUucGVya3M7XHJcbiAgICAgICAgZm9yIChsZXQgW2ksIHBlcmtdIG9mIE9iamVjdC5lbnRyaWVzKHNhdmVnYW1lLnBlcmtzKSkge1xyXG4gICAgICAgICAgICBhZGRQZXJrKHBlcmspO1xyXG4gICAgICAgICAgICByZXF1aXJlKCcuL3NlbGVjdENvcnJlY3RQZXJrQnV0dG9uJykuc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24ocGVyayk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnByZXN0aWdlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhzYXZlZ2FtZS5wcmVzdGlnZSkpIHtcclxuXHJcbiAgICAgICAgICAgIHByZXN0aWdlW2tleV0uY29zdCA9IHZhbFsnY29zdCddO1xyXG4gICAgICAgICAgICBwcmVzdGlnZVtrZXldLmxldmVsID0gdmFsWydsZXZlbCddO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5idWlsZGluZ3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgYiBpbiBzYXZlZ2FtZS5idWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYiwgc2F2ZWdhbWUuYnVpbGRpbmdzW2JdKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkaW5nc1tiXS5jb3VudCA9IHNhdmVnYW1lLmJ1aWxkaW5nc1tiXTtcclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBidXR0b24gdGV4dFxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1aWxkaW5nc1tiXS5jb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50KGIsIGJ1aWxkaW5nc1tiXS5jb3VudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY29zdHMgb2YgYWxsIHRoZSBidWlsZGluZ3NcclxuICAgICAgICAgICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChiLCBidWlsZGluZ3MsIGhhc1BlcmspO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBtYXggYXMgaW5mbHVlbmNlZCBieSB0aGlzIGJ1aWxkaW5nXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBEb24ndCBvdmVyd3JpdGUgZXhpc3RpbmcgYnVpbGRpbmcgYm9vc3RzXHJcbiAgICAgICAgICAgICAgICAvLyBpZiAoYnVpbGRpbmdzW2JdLmVmZmVjdHMpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBmb3IgKGxldCBtYXQgaW4gYnVpbGRpbmdzW2JdLmVmZmVjdHMpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgc2V0TWF4KG1hdCwgYnVpbGRpbmdzW2JdLmNvdW50ICogYnVpbGRpbmdzW2JdLmVmZmVjdHNbbWF0XSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdlcnJvciB3aXRoIGJ1aWxkaW5nJywgYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFmdGVyIHBvbmRlcnMgYW5kIGJ1aWxkaW5ncyB3ZSBjYW4gcmVjYWxjdWxhdGUgbWF4IGNsb25lc1xyXG4gICAgcmVjYWxjTWF4Q2xvbmVzKCk7XHJcbiAgICB1cGRhdGVCdWlsZGluZ0xpc3QoKTtcclxuXHJcblxyXG4gICAgLy8gSWYgd2UgaGF2ZSBhIGNsb25lLCB0aGVuIHdlIGF0ZSBmaXNoXHJcbiAgICBzZXRBdGVGaXNoKHJlc291cmNlcy5jbG9uZXMubWF4ID49IDEpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2F0ZWZpc2gnLCBhdGVGaXNoKTtcclxuICAgIGlmIChnZXRBdGVGaXNoKCkpIHtcclxuICAgICAgICBjb25zdCBmaXNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlYXRGaXNoXCIpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmaXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgICAvLyBDaGFuZ2UgdGhlIG1lc3NhZ2UgdG8gdGhlIGxhdGVzdCBvbmVcclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUubWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBbZnVsbCBtZXNzYWdlLCBzcGFuXVxyXG4gICAgICAgIHJlcXVpcmUoJy4vbWFpbicpLmNoYW5nZU1lc3NhZ2Uoc2F2ZWdhbWUubWVzc2FnZVswXSwgc2F2ZWdhbWUubWVzc2FnZVsxXSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgcmVzb3VyY2VzIGVhcm5lZCB3aGlsZSBhd2F5XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnRpbWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9tYWluJykuc2V0VG90YWxUaW1lKHNhdmVnYW1lLnRpbWVbdG90YWxfdGltZV0pO1xyXG4gICAgICAgIGNvbnN0IHRpbWVfZGlmZmVyZW5jZSA9IERhdGUubm93KCkgLSBzYXZlZ2FtZS50aW1lWyd0aW1lX29mX3NhdmUnXTtcclxuICAgICAgICBmb3IgKGxldCByIGluIHJlc291cmNlcykge1xyXG4gICAgICAgICAgICBjb25zdCBpbmMgPSBjYWxjSW5jcmVhc2UociwgdGltZV9kaWZmZXJlbmNlKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW3JdLnZhbHVlICs9IGluYztcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cociwgdGltZV9kaWZmZXJlbmNlLCBpbmMpO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW3JdLnZhbHVlID4gcmVzb3VyY2VzW3JdLm1heCkgcmVzb3VyY2VzW3JdLnZhbHVlID0gcmVzb3VyY2VzW3JdLm1heDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucyk7XHJcbiAgICAgICAgZm9yIChsZXQgYSBpbiBzYXZlZ2FtZS5hbGxWaXNpYmxlQnV0dG9ucykge1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5jb25uZWN0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBzZXRDb25uZWN0aW9ucyhuZXcgTWFwKHNhdmVnYW1lLmNvbm5lY3Rpb25zKSk7XHJcblxyXG4gICAgICAgIGlmIChnZXRDb25uZWN0aW9ucygpLnNpemUgPT09IDApIHNldENvbm5lY3Rpb25zKG5ldyBNYXAoKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coZ2V0Q29ubmVjdGlvbnMoKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZvciAobGV0IGpvYiBpbiBqb2JDb3VudHMpIHtcclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2IsIGpvYkNvdW50c1tqb2JdKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVFbW9qaURpc3BsYXkoKTtcclxuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5mYWN0b3JpZXMgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhzYXZlZ2FtZS5mYWN0b3JpZXMpKVxyXG4gICAgICAgICAgICBpZiAodmFsID4gMClcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEZhY3Rvcnkoa2V5KTtcclxuXHJcblxyXG5cclxufVxyXG5cclxuXHJcbi8vIHNhdmUgdGhlIHRpbWUgd2hlbiB0aGUgcGxheWVyIGV4aXRzIHRoZSBicm93c2VyIHRhYlxyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiBzYXZlR2FtZSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzYXZlR2FtZSxcclxuICAgIGxvYWRHYW1lXHJcbn07IiwiLyoqXHJcbiAqIFNlbGVjdCB0aGUgcGVyayBidXR0b24gdGhhdCB3ZSd2ZSBjaG9zZW4gYW5kIGRpc2FibGUgdGhlIG90aGVyc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gYWJpbGl0eU5hbWUgTmFtZSBvZiB0aGUgY2hvc2VuIHBlcmtcclxuICovXHJcbmZ1bmN0aW9uIHNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKGFiaWxpdHlOYW1lKSB7XHJcbiAgICAvLyBEaXNhYmxlIGFsbCBidXR0b25zXHJcbiAgICBsZXQgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50aWVyT25lQnV0dG9uJyk7XHJcbiAgICBsZXQgc2VsZWN0ZWRCdXR0b247XHJcbiAgICB0cnkgeyBzZWxlY3RlZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2FiaWxpdHlOYW1lfVBlcmtgKTsgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cclxuICAgIGlmIChzZWxlY3RlZEJ1dHRvbikge1xyXG4gICAgICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEVuYWJsZSBhbmQgaGlnaGxpZ2h0IHRoZSBzZWxlY3RlZCBidXR0b25cclxuICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZEJ1dHRvbiwgYWJpbGl0eU5hbWUpO1xyXG4gICAgICAgIHNlbGVjdGVkQnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICBzZWxlY3RlZEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ05vIGJ1dHRvbiBmb3VuZCB3aXRoIGFiaWxpdHkgbmFtZTogJyArIGFiaWxpdHlOYW1lKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uID0gc2VsZWN0Q29ycmVjdFBlcmtCdXR0b247IiwiY29uc3QgeyBjYWxjSW5jcmVhc2UgfSA9IHJlcXVpcmUoXCIuL2NhbGNJbmNyZWFzZVwiKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9yZXNvdXJjZXNcIik7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUdyb3VwVmlzaWJpbGl0eShncm91cE5hbWUpIHtcclxuICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRvZ2dsZS0ke2dyb3VwTmFtZX1gKTsgLy8gRW5zdXJlIHlvdSBoYXZlIHRoaXMgYnV0dG9uIHdpdGggdGhlIGlkICd0b2dnbGUtZ3JvdXBOYW1lJ1xyXG5cclxuICAgIEFycmF5LmZyb20oZ3JvdXAuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1AnKSBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGdyb3VwIGlzIGN1cnJlbnRseSBoaWRkZW5cclxuICAgIGlmICh0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdhcnJvdy1kb3duJykpIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctZG93bicpO1xyXG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhcnJvdy1yaWdodCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctcmlnaHQnKTtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYXJyb3ctZG93bicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIGEgZ3JvdXAgY29udGFpbmVyXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlR3JvdXBDb250YWluZXIoZ3JvdXBOYW1lKSB7XHJcbiAgICBjb25zdCBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZ3JvdXBDb250YWluZXIuY2xhc3NOYW1lID0gJ3Jlc291cmNlR3JvdXAnO1xyXG4gICAgZ3JvdXBDb250YWluZXIuaWQgPSBgZ3JvdXAtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi50ZXh0Q29udGVudCA9IGdyb3VwTmFtZS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgdG9nZ2xlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0b2dnbGVHcm91cFZpc2liaWxpdHkoZ3JvdXBOYW1lKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc05hbWUgPSAndG9nZ2xlLWJ1dHRvbiBhcnJvdy1kb3duJztcclxuICAgIHRvZ2dsZUJ1dHRvbi5pZCA9IGB0b2dnbGUtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2dnbGVCdXR0b24pO1xyXG4gICAgcmV0dXJuIGdyb3VwQ29udGFpbmVyO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIEl0ZXJhdGVzIG92ZXIgZWFjaCBncm91cCBhbmQgcmVzb3VyY2UgdG8gY3JlYXRlIHRhZ3NcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJlc291cmNlVGFncyh3aXRoR3JvdXBzKSB7XHJcbiAgICAvLyBpZiAoaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJykpIHdpdGhHcm91cHMgPSB0cnVlO1xyXG4gICAgY29uc29sZS5sb2coXCJpbml0aWFsemluZyByZXNvdXJjZSB0YWdzXCIpO1xyXG4gICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgLy8gRGVmaW5lIGdyb3VwcyBmb3IgeW91ciByZXNvdXJjZXNcclxuICAgIGNvbnN0IHJlc291cmNlR3JvdXBzID0ge1xyXG4gICAgICAgIHNwZWNpYWw6IFsnY2xvbmVzJywgJ2h1c2tzJywgJ3BvbmRlcicsICd2aW9sZW5jZSddLFxyXG4gICAgICAgIGJhc2ljczogWydzdGlja3MnLCAnYmVycmllcycsICdmaXNoJywgJ2dhbWUnLCAnd2hlYXQnLCAnZnJlc2h3YXRlciddLFxyXG4gICAgICAgIG1hdGVyaWFsczogWyd3b29kJywgJ3NhbmQnLCAnY2xheScsICd2aW5lcycsICdyb2NrcycsICdoaWRlcycsICdoZXJicyddLFxyXG4gICAgICAgIHRvb2xzOiBbJ3NoYXJwcm9ja3MnLCAncm9wZScsICdoYW5kbGUnLCAnZmlzaGluZ3JvZCcsICdwaWNrYXhlJywgJ2F4ZScsICdzcGVhcicsICdzdGFmZiddLFxyXG4gICAgICAgIGFkdmFuY2VkOiBbJ2dsYXNzJywgJ3BhcGVyJywgJ2NyYXRlcycsICdtZWRpY2luZScsICdsZWF0aGVyJ10sXHJcbiAgICAgICAgbWV0YWw6IFsnb3JlJywgJ2dvbGQnLCAnaXJvbicsICdzaWx2ZXInLCAnc3RlZWwnXSxcclxuICAgICAgICBjb25zdHJ1Y3Rpb246IFsnYnJpY2tzJywgJ2JlYW1zJywgJ25haWxzJywgJ3NsYWJzJywgJ2NvbmNyZXRlJ10sXHJcbiAgICAgICAgLy8gLi4uIEFkZCBvdGhlciBncm91cHMgYXMgbmVjZXNzYXJ5XHJcbiAgICB9O1xyXG4gICAgZm9yIChsZXQgW2dyb3VwTmFtZSwgZ3JvdXBPZlJlc291cmNlc10gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VHcm91cHMpKSB7XHJcblxyXG4gICAgICAgIGdyb3VwT2ZSZXNvdXJjZXMuZm9yRWFjaChyZXNvdXJjZU5hbWUgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlLScgKyByZXNvdXJjZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF3aXRoR3JvdXBzKSBncm91cE5hbWUgPSBudWxsOyAvLyBTZXQgZ3JvdXAgdG8gcmVzb3VyY2VzXHJcblxyXG4gICAgICAgICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHBhcmVudEVsZW1lbnQgPSBjcmVhdGVSZXNvdXJjZVRhZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHBhcmVudEVsZW1lbnQpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIGVsZW1lbnQgaWYgd2Ugc2hvdWxkLCBvdGhlcndpc2UgY3JlYXRlIGEgcmVzb3VyY2UgdGFnXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc291cmNlTmFtZSwgc2hvdWxkSGlkZShyZXNvdXJjZU5hbWUpLCBnZXRNYXRlcmlhbChyZXNvdXJjZU5hbWUpKTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZEhpZGUocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2hvdWxkSGlkZSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG91bGRIaWRlKHJlc291cmNlTmFtZSkge1xyXG5cclxuICAgIHZhciBzaG91bGRIaWRlID0gdHJ1ZTtcclxuICAgIC8vIGZvciAobGV0IGMgaW4gcGFyZW50RWxlbWVudC5jbGFzc0xpc3QpIHtcclxuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZygnaGFzIHBhc3NlZCcsIHJlc291cmNlTmFtZSwgcGFzc2VkU3RhZ2UoYykpO1xyXG4gICAgLy8gICAgIGlmIChyZXF1aXJlKCcuL3N0YWdlcycpLnBhc3NlZFN0YWdlKGMpKSB7IHNob3VsZEhpZGUgPSBmYWxzZTsgY29uc29sZS5sb2coJ2RvbnQgaGlkZScsIHJlc291cmNlTmFtZSwgYyk7IH1cclxuICAgIC8vIH1cclxuXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKSA+IDApIHtcclxuICAgICAgICBzaG91bGRIaWRlID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHJlc291cmNlc1tyZXNvdXJjZU5hbWVdKSByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlc291cmNlc1tyZXNvdXJjZU5hbWVdICYmIHJlc291cmNlc1tyZXNvdXJjZU5hbWVdLmlzVmlzaWJsZSkgeyBzaG91bGRIaWRlID0gZmFsc2U7IH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnc2hvdWxkIGhpZGU/JywgcmVzb3VyY2VOYW1lLCBzaG91bGRIaWRlKTtcclxuICAgIHJldHVybiBzaG91bGRIaWRlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gYWJicmV2aWF0ZU51bWJlcihudW0pIHtcclxuICAgIGlmICh0eXBlb2YgbnVtICE9PSAnbnVtYmVyJykgcmV0dXJuIG51bTtcclxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgdW5pdCkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwKSByZXR1cm4gcm91bmRUb0RlY2ltYWxzKHZhbHVlLCAyKSArIHVuaXQ7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMTAwKSByZXR1cm4gcm91bmRUb0RlY2ltYWxzKHZhbHVlLCAxKSArIHVuaXQ7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMTAwMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMCkgKyB1bml0O1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKSArIHVuaXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcm91bmRUb0RlY2ltYWxzKG51bWJlciwgZGVjaW1hbHMpIHtcclxuICAgICAgICBjb25zdCBmYWN0b3IgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xyXG4gICAgICAgIHJldHVybiAoTWF0aC5yb3VuZChudW1iZXIgKiBmYWN0b3IpIC8gZmFjdG9yKS50b0ZpeGVkKGRlY2ltYWxzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobnVtIDwgMWUzKSByZXR1cm4gcm91bmRUb0RlY2ltYWxzKG51bSwgMSk7IC8vIElmIGxlc3MgdGhhbiAxLDAwMFxyXG4gICAgaWYgKG51bSA8IDFlNikgcmV0dXJuIGZvcm1hdChudW0gLyAxZTMsICdLJyk7IC8vIFRob3VzYW5kc1xyXG4gICAgaWYgKG51bSA8IDFlOSkgcmV0dXJuIGZvcm1hdChudW0gLyAxZTYsICdNJyk7IC8vIE1pbGxpb25zXHJcbiAgICBpZiAobnVtIDwgMWUxMikgcmV0dXJuIGZvcm1hdChudW0gLyAxZTksICdCJyk7IC8vIEJpbGxpb25zXHJcbiAgICAvLyBBZGQgbW9yZSBjYXNlcyBmb3IgbGFyZ2VyIG51bWJlcnMgaWYgbmVlZGVkXHJcblxyXG4gICAgaWYgKG51bSA9PT0gSW5maW5pdHkpIG51bSA9ICfiiJ4nO1xyXG4gICAgcmV0dXJuIG51bS50b1N0cmluZygpO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgcmVzb3VyY2UgY291bnQgYW5kIG1heGVzIG9mIGFsbCByZXNvdXJjZXNcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVTaWRlYmFyKCkge1xyXG4gICAgY29uc3QgYWxsTWF0ZXJpYWxzID0gcmVxdWlyZSgnLi9mYWN0b3J5JykuYWxsTWF0ZXJpYWxzO1xyXG4gICAgQXJyYXkuZnJvbShhbGxNYXRlcmlhbHMpLmZvckVhY2gociA9PiB7IGlmIChyZXNvdXJjZXNbcl0pIHVwZGF0ZURpc3BsYXlWYWx1ZShyKTsgfSk7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZm9yIChjb25zdCBbaW5kZXgsIHJlc291cmNlTmFtZV0gb2YgT2JqZWN0LmVudHJpZXMoYWxsTWF0ZXJpYWxzKSkge1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZS0nICsgcmVzb3VyY2VOYW1lKTtcclxuICAgICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHsgY29uc29sZS53YXJuKCdubyBwYXJlbnQgZWxlbWVudCBmb3VuZCBmb3InLCByZXNvdXJjZU5hbWUpOyByZXR1cm47IH1cclxuXHJcbiAgICAgICAgaWYgKHNob3VsZEhpZGUocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpc3BsYXlFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVzb3VyY2VOYW1lICsgJ1ZhbHVlJyk7XHJcbiAgICAgICAgaWYgKGRpc3BsYXlFbGVtKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGFiYnJldmlhdGVOdW1iZXIocmVzb3VyY2VEYXRhKSk7XHJcbiAgICAgICAgICAgIHZhciBjb2xvciA9ICcjZmZmJztcclxuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgbWF4ID0gZ2V0TWF4KHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSBtYXgpIGNvbG9yID0gJyNmY2MnO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgZWxzZSBpZiAoYW1vdW50IC8gbWF4ID4gLjYpIGNvbG9yID0gJyNlZWInO1xyXG5cclxuICAgICAgICAgICAgZGlzcGxheUVsZW0uaW5uZXJIVE1MID0gYDxzcGFuIHN0eWxlPVwiY29sb3I6JHtjb2xvcn1cIj4ke2FiYnJldmlhdGVOdW1iZXIoYW1vdW50KX0gLyAke2FiYnJldmlhdGVOdW1iZXIobWF4KX0gPC9zcGFuPmA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIENyZWF0ZSBhbGwgb3VyIHJlc291cmNlIHRhZ3MgaW4gdGhlIHNpZGViYXJcclxuY29uc3QgcmVzb3VyY2VzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG5mdW5jdGlvbiBjcmVhdGVSZXNvdXJjZVRhZyhyZXNvdXJjZU5hbWUsIGdyb3VwTmFtZSkge1xyXG4gICAgLy8gaWYgKCFyZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VOYW1lKSkgdGhyb3cgXCJJbnZhbGlkIHJlc291cmNlOiBcIiArIHJlc291cmNlTmFtZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgcmVzb3VyY2UgdGFnIGZvciBcIiwgcmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgbGV0IGdyb3VwQ29udGFpbmVyO1xyXG4gICAgaWYgKGdyb3VwTmFtZSkge1xyXG4gICAgICAgIGdyb3VwQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgICAgIGlmICghZ3JvdXBDb250YWluZXIpIHtcclxuICAgICAgICAgICAgZ3JvdXBDb250YWluZXIgPSBjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyKGdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgIHJlc291cmNlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChncm91cENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhcHBlbmRpbmcnLCBncm91cENvbnRhaW5lciwgcmVzb3VyY2VzQ29udGFpbmVyLCByZXNvdXJjZXNDb250YWluZXIuY2hpbGRFbGVtZW50Q291bnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGdyb3VwQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKGdyb3VwQ29udGFpbmVyKTtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZURpc3BsYXlOYW1lID0gY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSkuc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmNsYXNzTmFtZSA9IGByZXNvdXJjZWA7XHJcbiAgICByZXNvdXJjZUVsZW1lbnQuaWQgPSBgcmVzb3VyY2UtJHtyZXNvdXJjZU5hbWV9YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZU5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VOYW1lU3Bhbi5jbGFzc05hbWUgPSAncmVzb3VyY2VOYW1lJztcclxuICAgIHJlc291cmNlTmFtZVNwYW4udGV4dENvbnRlbnQgPSBgJHtyZXNvdXJjZURpc3BsYXlOYW1lfTpgO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlVmFsdWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4uY2xhc3NOYW1lID0gJ3Jlc291cmNlVmFsdWUnO1xyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4uaWQgPSBgJHtyZXNvdXJjZU5hbWV9VmFsdWVgO1xyXG4gICAgbGV0IG1heCA9IChnZXRNYXgocmVzb3VyY2VOYW1lKSAmJiBnZXRNYXgocmVzb3VyY2VOYW1lKSA8IEluZmluaXR5KSA/IGdldE1heChyZXNvdXJjZU5hbWUpLnRvRml4ZWQoMikgOiAn4oieJztcclxuXHJcbiAgICByZXNvdXJjZVZhbHVlU3Bhbi50ZXh0Q29udGVudCA9IGAke2dldE1hdGVyaWFsKHJlc291cmNlTmFtZSkudG9GaXhlZCgyKX0gLyAke21heH1gO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlUmF0ZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICByZXNvdXJjZVJhdGVTcGFuLmNsYXNzTmFtZSA9ICdyZXNvdXJjZVJhdGUnO1xyXG4gICAgcmVzb3VyY2VSYXRlU3Bhbi5pbm5lckhUTUwgPSBgKCtcclxuICAgICAgICAgICAgPHNwYW4gaWQ9XCIke3Jlc291cmNlTmFtZX1JbmNyZWFzZVJhdGVcIj4wPC9zcGFuPi9zKWA7XHJcblxyXG4gICAgcmVzb3VyY2VFbGVtZW50LmFwcGVuZENoaWxkKHJlc291cmNlTmFtZVNwYW4pO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmFwcGVuZENoaWxkKHJlc291cmNlVmFsdWVTcGFuKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZVJhdGVTcGFuKTtcclxuXHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZChyZXNvdXJjZUVsZW1lbnQpO1xyXG5cclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIG9yZGVyaW5nXHJcblxyXG4gICAgLy8gRnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBvcmRlciBvZiBhIHJlc291cmNlXHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VSZXNvdXJjZU9yZGVyKHJlc291cmNlSWQsIG5ld09yZGVyKSB7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyZXNvdXJjZUlkKTtcclxuICAgICAgICBpZiAocmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgcmVzb3VyY2Uuc3R5bGUub3JkZXIgPSBuZXdPcmRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1jbG9uZXNcIiwgMSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utc3RpY2tzXCIsIDIpOyAvLyBNb3ZlIFwiU3RpY2tzXCIgdG8gb3JkZXIgMlxyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXZpbmVzXCIsIDMpOyAvLyBNb3ZlIFwiVmluZXNcIiB0byBvcmRlciAzXHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utcm9ja3NcIiwgNCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZmlzaFwiLCA1KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1mcmVzaHdhdGVyXCIsIDYpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXdvb2RcIiwgNyk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utb3JlXCIsIDgpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXNhbmRcIiwgOSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtY2xheVwiLCAxMCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2Utd2hlYXRcIiwgMTEpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWhpZGVzXCIsIDEyKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1nYW1lXCIsIDEzKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1oZXJic1wiLCAxNCk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtYmVycmllc1wiLCAxNSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtcG9uZGVyXCIsIDUwKTtcclxuXHJcbiAgICByZXR1cm4gcmVzb3VyY2VFbGVtZW50O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICB1cGRhdGVTaWRlYmFyLFxyXG4gICAgaW5pdGlhbGl6ZVJlc291cmNlVGFncyxcclxuICAgIHVwZGF0ZURpc3BsYXlWYWx1ZSxcclxuICAgIGFiYnJldmlhdGVOdW1iZXJcclxufTtcclxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIGRpc3BsYXkgdmFsdWUgb2Ygb25lIHJlc291cmNlLCBhIHNwZWNpZmljIHVwZGF0ZVNpZGViYXIoKVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWxcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZURpc3BsYXlWYWx1ZShtYXRlcmlhbCkge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IHJlc291cmNlc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGAjJHttYXRlcmlhbH1WYWx1ZWApO1xyXG4gICAgY29uc3QgZWxlbWVudEluY3JlYXNlID0gcmVzb3VyY2VzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCMke21hdGVyaWFsfUluY3JlYXNlUmF0ZWApO1xyXG4gICAgLy8gY29uc3QgY3JhZnRlZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGJ1dHRvbiNjcmFmdCR7Y2FwaXRhbGl6ZUZpcnN0KG1hdGVyaWFsKX1gKTtcclxuICAgIC8vIHRyeSB7IGlmICghZWxlbWVudCkgY3JlYXRlUmVzb3VyY2VUYWcobWF0ZXJpYWwpOyB9XHJcbiAgICAvLyBjYXRjaCAoZXJyb3IpIHsgfVxyXG4gICAgLy8gY29uc29sZS5sb2cobWF0ZXJpYWwsIGVsZW1lbnQsIGNyYWZ0ZWRCdXR0b24pO1xyXG4gICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBsZXQgbWF4ID0gKGdldE1heChtYXRlcmlhbCkgJiYgZ2V0TWF4KG1hdGVyaWFsKSA8IEluZmluaXR5KSA/IGdldE1heChtYXRlcmlhbCkudG9GaXhlZCgxKSA6ICfiiJ4nO1xyXG4gICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gYCR7YWJicmV2aWF0ZU51bWJlcihnZXRNYXRlcmlhbChtYXRlcmlhbCkpfSAvICR7YWJicmV2aWF0ZU51bWJlcihnZXRNYXgobWF0ZXJpYWwpKX1gO1xyXG5cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnRJbmNyZWFzZSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudEluY3JlYXNlLnRleHRDb250ZW50ID0gY2FsY0luY3JlYXNlKG1hdGVyaWFsLCAxMDAwKS50b0ZpeGVkKDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1hdGVyaWFsLCBzaG91bGRIaWRlKG1hdGVyaWFsKSwgZ2V0TWF0ZXJpYWwobWF0ZXJpYWwpKTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZEhpZGUobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVsZW1lbnQsIG1hdGVyaWFsLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkge1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXS5pc0dldHRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIikucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyBtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGlmIChjcmFmdGVkQnV0dG9uKSB7XHJcbiAgICAvLyAgICAgY29uc3QgY291bnRTcGFuID0gY3JhZnRlZEJ1dHRvbi5xdWVyeVNlbGVjdG9yKGAjJHttYXRlcmlhbH1WYWx1ZWApO1xyXG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKCdjcmFmdGVkIGJ1dHRvbiB3YXMgZm91bmQnLCBjb3VudFNwYW4sIG1hdGVyaWFsLCBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwpKTtcclxuICAgIC8vICAgICBpZiAoY291bnRTcGFuKSBjb3VudFNwYW4udGV4dENvbnRlbnQgPSBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwpLnRvRml4ZWQoMCk7XHJcbiAgICAvLyAgICAgZWxzZSBjb25zb2xlLndhcm4oYFJlc291cmNlIGJ1dHRvbiBmb3VuZCBidXQgbm8gY291bnQgc3BhbiBmb3I6ICR7bWF0ZXJpYWx9YCk7XHJcbiAgICAvLyB9XHJcbn1cclxuIiwiY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyB0cmlnZ2VyRmxvYXRVcFRleHQgfSA9IHJlcXVpcmUoJy4vdHJpZ2dlckZsb2F0VXBUZXh0Jyk7XHJcblxyXG5mdW5jdGlvbiBpbnZlcnRTa2lsbHNUb1Jlc291cmNlcyhza2lsbHMpIHtcclxuICAgIGxldCByZXNvdXJjZVRvU2tpbGxNYXAgPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtza2lsbCwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoc2tpbGxzKSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgZGF0YS5hZmZlY3RlZFJlc291cmNlcykge1xyXG4gICAgICAgICAgICBpZiAoIXJlc291cmNlVG9Ta2lsbE1hcFtyZXNvdXJjZV0pIHtcclxuICAgICAgICAgICAgICAgIHJlc291cmNlVG9Ta2lsbE1hcFtyZXNvdXJjZV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdLnB1c2goc2tpbGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzb3VyY2VUb1NraWxsTWFwO1xyXG59XHJcbmNvbnN0IHJlc291cmNlVG9Ta2lsbE1hcCA9IGludmVydFNraWxsc1RvUmVzb3VyY2VzKHNraWxscyk7XHJcbmNvbnNvbGUubG9nKHJlc291cmNlVG9Ta2lsbE1hcCk7XHJcbi8qKlxyXG4gKiBVcGRhdGUgdGhlIHJlbGV2YW50IHNraWxsIG9mIGEgcmVzb3VyY2UgaW5jcmVhc2VkIGJ5IG51bVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2UgV2hpY2ggcmVzb3VyY2Ugd2FzIHVwZGF0ZWRcclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBIb3cgbXVjaCB0aGUgcmVzb3VyY2UgaW5jcmVhc2VkXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVTa2lsbHMocmVzb3VyY2UsIG51bSkge1xyXG4gICAgbnVtID0gTWF0aC5hYnMobnVtKTtcclxuICAgIGlmIChyZXF1aXJlKCcuL3BvbmRlcicpLmlzUG9uZGVyZWQoJ2Zhc3RlclNraWxscycpKSBudW0gKj0gMS4wNTtcclxuXHJcbiAgICBpZiAoIXJlc291cmNlVG9Ta2lsbE1hcFtyZXNvdXJjZV0pIHJldHVybjtcclxuICAgIGNvbnN0IHNraWxsID0gcmVzb3VyY2VUb1NraWxsTWFwW3Jlc291cmNlXVswXS50b1N0cmluZygpO1xyXG4gICAgLy8gbWF4IGxldmVsIDEwMFxyXG4gICAgaWYgKHNraWxsc1tza2lsbF0ubGV2ZWwgPj0gMTAwKSB7XHJcbiAgICAgICAgc2tpbGxzW3NraWxsXS5sZXZlbCA9IDEwMDtcclxuICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCA9IDA7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gXHJcbiAgICBza2lsbHNbc2tpbGxdLmV4cCArPSBudW0gLyBNYXRoLnBvdygxLjQsIHNraWxsc1tza2lsbF0ubGV2ZWwpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJVcGRhdGluZyBza2lsbDpcIiArIHNraWxsICsgXCIgdG8gXCIgKyBza2lsbHNbc2tpbGxdLmV4cClcclxuICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA+PSAxMDApIHtcclxuXHJcbiAgICAgICAgc2tpbGxzW3NraWxsXS5sZXZlbCArPSAxO1xyXG4gICAgICAgIHNraWxsc1tza2lsbF0uZXhwID0gMDtcclxuXHJcbiAgICAgICAgLy8gTGV2ZWx1cCBwb3B1cFxyXG4gICAgICAgIGxldCBsZXZlbHVwID0gYExldmVsIHVwISAke3NraWxsfSDihpIgJHtza2lsbHNbc2tpbGxdLmxldmVsfWA7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmVzdGlnZScpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dChyZWN0LngsIHJlY3QueSwgbGV2ZWx1cCwgJyNGNEQwM0YnKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBza2lsbHMgdGFibGUgdmlzdWFsaXphdGlvblxyXG4gICAgaWYgKHJlcXVpcmUoJy4vc3RhZ2VzJykucGFzc2VkU3RhZ2UoJ3NraWxsc1RhYmxlJykpIHtcclxuICAgICAgICBwb3B1bGF0ZVNraWxsc1RhYmxlKCk7XHJcbiAgICB9XHJcbn1cclxubGV0IGhhc0dlbmVyYXRlZFNraWxsVGFibGUgPSBmYWxzZTtcclxuLyoqXHJcbiAqIERyYXcgdGhlIHNraWxscyB0YWJsZSBhbmQgaW5pdGlhbGl6ZSBpZiBuZWVkZWRcclxuICovXHJcbmZ1bmN0aW9uIHBvcHVsYXRlU2tpbGxzVGFibGUoKSB7XHJcbiAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdza2lsbHNUYWJsZScpO1xyXG5cclxuICAgIC8vIElmIHRoZSB0YWJsZSBpcyBlbXB0eSwgY3JlYXRlIHRoZSByb3dzIGFuZCBwcm9ncmVzcyBiYXJzXHJcbiAgICBpZiAoIWhhc0dlbmVyYXRlZFNraWxsVGFibGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkdlbmVyYXRpbmcgdGFibGUgZm9yIHRoZSBmaXJzdCB0aW1lXCIpO1xyXG4gICAgICAgIGhhc0dlbmVyYXRlZFNraWxsVGFibGUgPSB0cnVlO1xyXG4gICAgICAgIC8vIFxyXG4gICAgICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgICAgICBsZXQgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG4gICAgICAgICAgICB0ci5pZCA9ICd0ci0nICsgc2tpbGw7XHJcbiAgICAgICAgICAgIGxldCB0ZFByb2dyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcblxyXG4gICAgICAgICAgICBsZXQgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdwcm9ncmVzc0JhcicpO1xyXG4gICAgICAgICAgICAvLyBpZiAoaXNEYXJrKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBwcm9ncmVzc0Jhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzIyOEIyMic7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAgICBwcm9ncmVzc0Jhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzUwQzg3OCc7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuaGVpZ2h0ID0gJzIwcHgnO1xyXG4gICAgICAgICAgICBwcm9ncmVzc0Jhci5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2tpbGwnLCBza2lsbCk7IC8vIEFzc2lnbiBhIGRhdGEgYXR0cmlidXRlIGZvciBpZGVudGlmaWNhdGlvblxyXG5cclxuICAgICAgICAgICAgbGV0IHNraWxsVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBza2lsbFRleHQudGV4dENvbnRlbnQgPSAnW2xldmVsICcgKyBza2lsbHNbc2tpbGxdLmxldmVsICsgJ10gICAnICsgc2tpbGw7XHJcbiAgICAgICAgICAgIHNraWxsVGV4dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2xldmVsLScgKyBza2lsbCk7XHJcbiAgICAgICAgICAgIHNraWxsVGV4dC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIHNraWxsVGV4dC5zdHlsZS5sZWZ0ID0gJzEwcHgnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUudG9wID0gJzUwJSc7XHJcbiAgICAgICAgICAgIHNraWxsVGV4dC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtNTAlKSc7XHJcblxyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uZXhwID09IDAgJiYgc2tpbGxzW3NraWxsXS5sZXZlbCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRkUHJvZ3Jlc3MuYXBwZW5kQ2hpbGQocHJvZ3Jlc3NCYXIpO1xyXG4gICAgICAgICAgICB0ZFByb2dyZXNzLmFwcGVuZENoaWxkKHNraWxsVGV4dCk7XHJcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkUHJvZ3Jlc3MpO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIERpc3BsYXkgZXZlcnl0aGluZyB3ZSBjYW5cclxuICAgICAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA+IDAgfHwgc2tpbGxzW3NraWxsXS5sZXZlbCA+IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RyLScgKyBza2lsbCkuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBwcm9ncmVzc0JhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5wcm9ncmVzc0JhcltkYXRhLXNraWxsPVwiJHtza2lsbH1cIl1gKTtcclxuICAgICAgICAgICAgaWYgKHByb2dyZXNzQmFyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gc2tpbGxzW3NraWxsXS5leHAgKyAnJSc7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2tpbGxOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsZXZlbC1cIiArIHNraWxsKTtcclxuICAgICAgICAgICAgICAgIHNraWxsTmFtZS50ZXh0Q29udGVudCA9ICdbbGV2ZWwgJyArIHNraWxsc1tza2lsbF0ubGV2ZWwgKyAnXSAgICcgKyBza2lsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgdXBkYXRlU2tpbGxzLFxyXG4gICAgcG9wdWxhdGVTa2lsbHNUYWJsZVxyXG5cclxufTsiLCJsZXQgc3RhZ2VzID0gW107XHJcbmZ1bmN0aW9uIHNldFN0YWdlKHN0YWdlKSB7XHJcbiAgICBzdGFnZXMucHVzaChzdGFnZSk7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFnZSBTdGFnZSB0byBjaGVja1xyXG4gKiBAcmV0dXJucyBib29sZWFuIGlmIHN0YWdlIGluIHN0YWdlc1xyXG4gKi9cclxuZnVuY3Rpb24gcGFzc2VkU3RhZ2Uoc3RhZ2UpIHtcclxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHN0YWdlcykuaW5jbHVkZXMoc3RhZ2UpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFsbFN0YWdlcygpIHtcclxuICAgIHJldHVybiBzdGFnZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0U3RhZ2VzKCkge1xyXG4gICAgd2hpbGUgKHN0YWdlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgIHN0YWdlcy5wb3AoKTtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHNldFN0YWdlLFxyXG4gICAgcGFzc2VkU3RhZ2UsXHJcbiAgICBnZXRBbGxTdGFnZXMsXHJcbiAgICByZXNldFN0YWdlc1xyXG59OyIsIi8qIFRPT0xTICovXHJcblxyXG5cclxuLy8gTGlzdCB0byBob2xkIHRoZSB0b29sc1xyXG5sZXQgcGxheWVyVG9vbHMgPSBbJ0JhcmUgSGFuZHMnXTtcclxuXHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdG8gY2hlY2sgaWYgYSB0b29sIGlzIHByZXNlbnQgaW4gdGhlIGxpc3QgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b29sIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmZ1bmN0aW9uIGhhc1Rvb2wodG9vbCkge1xyXG4gICAgcmV0dXJuIHBsYXllclRvb2xzLmluY2x1ZGVzKHRvb2wpO1xyXG59XHJcblxyXG4vLyBGdW5jdGlvbiB0byBhZGQgYSB0b29sIGlmIGl0J3Mgbm90IGFscmVhZHkgcHJlc2VudFxyXG5mdW5jdGlvbiBhZGRUb29sKHRvb2wpIHtcclxuICAgIC8vIElnbm9yZSB0b29scyB0aGF0IGFyZSBqdXN0IG51bWJlcnNcclxuICAgIGlmICghaXNOYU4odG9vbCkgJiYgLy8gdXNlIHR5cGUgY29lcmNpb24gdG8gcGFyc2UgdGhlIF9lbnRpcmV0eV8gb2YgdGhlIHN0cmluZyAoYHBhcnNlRmxvYXRgIGFsb25lIGRvZXMgbm90IGRvIHRoaXMpLi4uXHJcbiAgICAgICAgIWlzTmFOKHBhcnNlRmxvYXQodG9vbCkpKSAvLyAuLi5hbmQgZW5zdXJlIHN0cmluZ3Mgb2Ygd2hpdGVzcGFjZSBmYWlsXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFoYXNUb29sKHRvb2wpKSB7XHJcbiAgICAgICAgcGxheWVyVG9vbHMucHVzaCh0b29sKTtcclxuXHJcbiAgICAgICAgdXBkYXRlVG9vbFVJKHRvb2wpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBbGxUb29scygpIHtcclxuICAgIHJldHVybiBwbGF5ZXJUb29scztcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVG9vbFVJKHRvb2wpIHtcclxuICAgIC8vIFVwZGF0ZSB0aGUgVUlcclxuICAgIHZhciB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9vbHMtbGlzdFwiKTtcclxuICAgIHZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRvb2wpKTtcclxuICAgIGlmICh1bCkgdWwuYXBwZW5kQ2hpbGQobGkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZShyZXNvdXJjZSkge1xyXG4gICAgaWYgKCFyZXNvdXJjZSkgcmV0dXJuIDE7XHJcbiAgICBpZiAoIXJlc291cmNlLnRvb2xzKSByZXR1cm4gMTtcclxuXHJcbiAgICAvLyBTb3J0IHRoZSB0b29scyBpbiBkZXNjZW5kaW5nIG9yZGVyIGJhc2VkIG9uIHRoZWlyIHZhbFxyXG4gICAgY29uc3Qgc29ydGVkVG9vbHMgPSByZXNvdXJjZS50b29scy5zb3J0KChhLCBiKSA9PiBiLnZhbCAtIGEudmFsKTtcclxuXHJcbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHNvcnRlZCB0b29sc1xyXG4gICAgZm9yIChsZXQgdG9vbCBvZiBzb3J0ZWRUb29scykge1xyXG4gICAgICAgIGlmIChoYXNUb29sKHRvb2wudG9vbCkpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHBsYXllciBoYXMgdGhlIHRvb2wsIHJldHVybiBpdHMgYXNzb2NpYXRlZCB2YWx1ZVxyXG4gICAgICAgICAgICByZXR1cm4gdG9vbC52YWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBJZiBub25lIG9mIHRoZSB0b29scyBhcmUgZm91bmQsIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZVxyXG4gICAgcmV0dXJuIDE7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaGFzVG9vbCxcclxuICAgIGFkZFRvb2wsXHJcbiAgICBnZXRBbGxUb29scyxcclxuICAgIGdldFRvb2xWYWx1ZUZvclJlc291cmNlXHJcbn07IiwiY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuXHJcbmNvbnN0IHJlc291cmNlTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZUxpc3QnKTtcclxuY29uc3QgZ29sZEFtb3VudEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dvbGRBbW91bnQnKTtcclxuLy8gbGV0IGdvbGRBbW91bnQgPSAxMDAwOyAvLyBTYW1wbGUgc3RhcnRpbmcgYW1vdW50XHJcbi8vIGNvbnN0IHRyYWRlQm9udXMgPSAwLjk7IC8vIDEwJSBkaXNjb3VudFxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVUcmFkZVRhYmxlKHJlc291cmNlcykge1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2UgaW4gcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgICAgICBjb25zdCBwcmljZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkgKyAxMDsgLy8gUmFuZG9tIHByaWNlIGJldHdlZW4gMTAgYW5kIDExMCBmb3IgdGhpcyBleGFtcGxlLlxyXG5cclxuICAgICAgICByb3cuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ0cmFkZXRkXCI+JHtyZXNvdXJjZX08L3RkPlxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ0cmFkZXRkXCI+JHtwcmljZX08L3RkPlxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ0cmFkZXRkXCIgc3R5bGU9XCJkaXNwbGF5OmZsZXg7IGZsZXgtZGlyZWN0aW9uOnJvdztcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidXlCdG5cIiBkYXRhLXJlc291cmNlPVwiJHtyZXNvdXJjZX1cIiBkYXRhLXByaWNlPVwiJHtwcmljZX1cIj5CdXk8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzZWxsQnRuXCIgZGF0YS1yZXNvdXJjZT1cIiR7cmVzb3VyY2V9XCIgZGF0YS1wcmljZT1cIiR7cHJpY2V9XCI+U2VsbDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgIGA7XHJcblxyXG4gICAgICAgIHJlc291cmNlTGlzdC5hcHBlbmRDaGlsZChyb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBidXkgYW5kIHNlbGwgYnV0dG9uc1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ1eUJ0bicpLmZvckVhY2goYnRuID0+IHtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJlc291cmNlJyk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wcmljZScpKTtcclxuICAgICAgICAgICAgYnV5UmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlbGxCdG4nKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1yZXNvdXJjZScpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcGFyc2VGbG9hdChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJpY2UnKSk7XHJcbiAgICAgICAgICAgIHNlbGxSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gU2ltaWxhcmx5LCB5b3UgY2FuIGFkZCBldmVudCBsaXN0ZW5lcnMgZm9yIHNlbGwgYnV0dG9ucyBoZXJlXHJcbn1cclxuXHJcbmV4cG9ydHMuZ2VuZXJhdGVUcmFkZVRhYmxlID0gZ2VuZXJhdGVUcmFkZVRhYmxlO1xyXG5cclxuZXhwb3J0cy5idXlSZXNvdXJjZSA9IGJ1eVJlc291cmNlO1xyXG5leHBvcnRzLnNlbGxSZXNvdXJjZSA9IHNlbGxSZXNvdXJjZTtcclxuXHJcbmZ1bmN0aW9uIGJ1eVJlc291cmNlKHJlc291cmNlLCBwcmljZSkge1xyXG5cclxuICAgIGlmIChnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpID49IHByaWNlKSB7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKCdnb2xkJywgLXByaWNlKTtcclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICBnb2xkQW1vdW50RWwudGV4dENvbnRlbnQgPSBnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpO1xyXG4gICAgICAgIC8vIGFsZXJ0KGBZb3UgYm91Z2h0ICR7cmVzb3VyY2V9IGZvciAke3ByaWNlLnRvRml4ZWQoMil9IGdvbGQhYCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGFsZXJ0KFwiWW91IGRvbid0IGhhdmUgZW5vdWdoIGdvbGQhXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZWxsUmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKSB7XHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwocmVzb3VyY2UsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpID49IDEpIHtcclxuXHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKCdnb2xkJywgcHJpY2UpO1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZSwgLTEpO1xyXG4gICAgICAgIGdvbGRBbW91bnRFbC50ZXh0Q29udGVudCA9IGdldE1hdGVyaWFsKCdnb2xkJywgcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpLnJlc291cmNlcyk7XHJcbiAgICB9XHJcbiAgICAvLyBhbGVydChgWW91IHNvbGQgJHtyZXNvdXJjZX0gZm9yICR7cHJpY2UudG9GaXhlZCgyKX0gZ29sZCFgKTtcclxufSIsImZ1bmN0aW9uIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCB0ZXh0LCBjb2xvcikge1xyXG4gICAgY29uc3QgZmxvYXRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBmbG9hdFRleHQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgZmxvYXRUZXh0LnN0eWxlLmxlZnQgPSBgJHt4fXB4YDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS50b3AgPSBgJHt5IC0gMzB9cHhgO1xyXG4gICAgZmxvYXRUZXh0LnN0eWxlLmNvbG9yID0gY29sb3I7XHJcbiAgICBmbG9hdFRleHQuY2xhc3NMaXN0LmFkZCgnZmxvYXQtdXAtZmFkZS1vdXQnKTtcclxuXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZsb2F0VGV4dCk7XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTSBhZnRlciB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlc1xyXG4gICAgZmxvYXRUZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsICgpID0+IHtcclxuICAgICAgICBmbG9hdFRleHQucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnRyaWdnZXJGbG9hdFVwVGV4dCA9IHRyaWdnZXJGbG9hdFVwVGV4dDtcclxuIiwiY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZShcIi4vZ2V0TWF0ZXJpYWxcIik7XHJcbmNvbnN0IHsgZ2V0TWF4IH0gPSByZXF1aXJlKFwiLi9oZWxwZXJcIik7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVCb3VuY2VBbmltYXRpb24oKSB7XHJcbiAgICBjb25zdCBhbG9uZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxvbmUnKTtcclxuXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2Nsb25lcycpIDwgZ2V0TWF4KCdjbG9uZXMnKSkge1xyXG4gICAgICAgIC8vIEFwcGx5IHRoZSBhbmltYXRpb25cclxuICAgICAgICBhbG9uZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYm91bmNpbmcnKTtcclxuXHJcbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSBwbHVzIGFuIGFkZGl0aW9uYWwgZGVsYXksIHRoZW4gY2hlY2sgdGhlIGNvbmRpdGlvbiBhZ2FpblxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGFuaW1hdGlvbiBjbGFzcyB0byByZXNldFxyXG4gICAgICAgICAgICBhbG9uZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYm91bmNpbmcnKTtcclxuICAgICAgICAgICAgdm9pZCBhbG9uZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAvLyBSZWN1cnNpdmUgY2FsbCB0byByZS1jaGVjayB0aGUgY29uZGl0aW9uIGFuZCBwb3RlbnRpYWxseSByZWFwcGx5IHRoZSBhbmltYXRpb25cclxuICAgICAgICAgICAgdXBkYXRlQm91bmNlQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfSwgMTEwMDApOyAvLyBXYWl0IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiAoMXMpICsgZGVsYXkgKDEwcylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBhbmltYXRpb24gY2xhc3MgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0XHJcbiAgICAgICAgYWxvbmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvdW5jaW5nJyk7XHJcbiAgICB9XHJcblxyXG59XHJcbmV4cG9ydHMudXBkYXRlQm91bmNlQW5pbWF0aW9uID0gdXBkYXRlQm91bmNlQW5pbWF0aW9uOyIsImNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChidWlsZGluZ05hbWUsIGJ1aWxkaW5nQ291bnQpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2J1aWxkaW5nTmFtZX1gKS50ZXh0Q29udGVudCA9IGAke2NhcGl0YWxpemVGaXJzdChidWlsZGluZ05hbWUpLnNwbGl0KCdfJykuam9pbignICcpfSAoJHtidWlsZGluZ0NvdW50fSlgO1xyXG5cclxufVxyXG5leHBvcnRzLnVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgPSB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50OyIsImNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG9vbHRpcCwgaGlkZVRvb2x0aXAgfSA9IHJlcXVpcmUoJy4vdXBkYXRlVG9vbHRpcCcpO1xyXG5jb25zdCB7IGZpdENoYXJUb0NlbGwgfSA9IHJlcXVpcmUoJy4vZml0Q2hhclRvQ2VsbCcpO1xyXG5cclxuY29uc3QgYnVpbGRpbmdMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1aWxkaW5nTGlzdCcpO1xyXG4vLyBmdW5jdGlvbiB1cGRhdGVCdWlsZGluZ0xpc3QoKSB7XHJcbi8vICAgICBidWlsZGluZ0xpc3QuaW5uZXJIVE1MID0gJyc7XHJcbi8vICAgICBsZXQgaSA9IDA7XHJcbi8vICAgICBjb25zdCBncmlkU2l6ZSA9IDY7XHJcbi8vICAgICBjb25zdCBtYXhDZWxsV2lkdGggPSAzNjtcclxuLy8gICAgIGNvbnN0IG1heENlbGxIZWlnaHQgPSA0ODtcclxuLy8gICAgIGNvbnN0IGluaXRpYWxGb250U2l6ZSA9IDM2OyAvLyBzdGFydGluZyBmb250IHNpemVcclxuXHJcbi8vICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmdzKSkge1xyXG4vLyAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsLmNvdW50OyArK2osICsraSkge1xyXG4vLyAgICAgICAgICAgICBsZXQgY29sID0gKGkgJSBncmlkU2l6ZSArIDEpLnRvU3RyaW5nKCk7XHJcbi8vICAgICAgICAgICAgIGxldCByb3cgPSBNYXRoLmZsb29yKGkgLyBncmlkU2l6ZSArIDEpLnRvU3RyaW5nKCk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJlc3QgZm9udCBzaXplIGZvciB0aGlzIGNoYXJhY3RlclxyXG4vLyAgICAgICAgICAgICAvLyBjb25zdCBmb250U2l6ZSA9IGZpdENoYXJUb0NlbGwodmFsLmVtb2ppIHx8ICc/JywgbWF4Q2VsbFdpZHRoLCBtYXhDZWxsSGVpZ2h0LCBpbml0aWFsRm9udFNpemUpO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gQWRkIHRoZSBzcGFuIHdpdGggdGhlIGNhbGN1bGF0ZWQgZm9udCBzaXplXHJcbi8vICAgICAgICAgICAgIC8vIGFkZFRvQnVpbGRpbmdMaXN0KGNvbCwgcm93LCBpbml0aWFsRm9udFNpemUsIGtleSwgdmFsLmVtb2ppKTtcclxuLy8gICAgICAgICAgICAgYnVpbGRpbmdMaXN0LmlubmVySFRNTCArPSBgPHNwYW4gY2xhc3MgPSAndG9vbHRpcCcgc3R5bGU9J2dyaWQtY29sdW1uOiR7Y29sfTsgZ3JpZC1yb3c6JHtyb3d9OyBmb250LXNpemU6JHtpbml0aWFsRm9udFNpemV9cHgnIHRvb2x0aXBEZXNjPScke2tleX0nPiR7dmFsLmVtb2ppIHx8ICc/J308L3NwYW4+YDtcclxuXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgYnVpbGRpbmdMaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4udG9vbHRpcCcpLmZvckVhY2goKHNwYW4pID0+IHtcclxuLy8gICAgICAgICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcbi8vICAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoc3Bhbik7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgc3Bhbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG4vLyAgICAgICAgICAgICBoaWRlVG9vbHRpcCgpO1xyXG4vLyAgICAgICAgIH0pO1xyXG4vLyAgICAgfSk7XHJcbi8vIH1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nTGlzdCgpIHtcclxuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgY29uc3QgZ3JpZFNpemUgPSA2O1xyXG4gICAgY29uc3QgaW5pdGlhbEZvbnRTaXplID0gMzY7IC8vIFN0YXJ0aW5nIGZvbnQgc2l6ZVxyXG5cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWwuY291bnQ7ICsraiwgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2wgPSAoaSAlIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgbGV0IHJvdyA9IE1hdGguZmxvb3IoaSAvIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgIHNwYW4uY2xhc3NOYW1lID0gJ3Rvb2x0aXAnO1xyXG4gICAgICAgICAgICBzcGFuLnN0eWxlLmdyaWRDb2x1bW4gPSBjb2w7XHJcbiAgICAgICAgICAgIHNwYW4uc3R5bGUuZ3JpZFJvdyA9IHJvdztcclxuICAgICAgICAgICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IGAke2luaXRpYWxGb250U2l6ZX1weGA7XHJcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCd0b29sdGlwRGVzYycsIGtleSk7XHJcbiAgICAgICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSB2YWwuZW1vamkgfHwgJz8nO1xyXG5cclxuICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoc3Bhbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFyIHRoZSBleGlzdGluZyBjb250ZW50IGFuZCBhcHBlbmQgdGhlIG5ldyBjb250ZW50XHJcbiAgICBidWlsZGluZ0xpc3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBidWlsZGluZ0xpc3QuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xyXG5cclxuICAgIC8vIEV2ZW50IGRlbGVnYXRpb24gZm9yIHRvb2x0aXBzXHJcbiAgICBidWlsZGluZ0xpc3QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0b29sdGlwJykpIHtcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChldmVudC50YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHRydWUpO1xyXG5cclxuICAgIGJ1aWxkaW5nTGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rvb2x0aXAnKSkge1xyXG4gICAgICAgICAgICBoaWRlVG9vbHRpcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHRydWUpO1xyXG59XHJcblxyXG5leHBvcnRzLnVwZGF0ZUJ1aWxkaW5nTGlzdCA9IHVwZGF0ZUJ1aWxkaW5nTGlzdDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBidWlsZGluZ1xyXG4gKi9cclxuLy8gZnVuY3Rpb24gYWRkVG9CdWlsZGluZ0xpc3Qoa2V5LCBlbW9qaSkge1xyXG4vLyAgICAgYnVpbGRpbmdMaXN0LmlubmVySFRNTCArPSBgPHNwYW4gY2xhc3MgPSAndG9vbHRpcCcgc3R5bGU9J2dyaWQtY29sdW1uOiR7Y29sfTsgZ3JpZC1yb3c6JHtyb3d9OyBmb250LXNpemU6JHtmb250c2l6ZX1weCcgdG9vbHRpcERlc2M9JyR7a2V5fSc+JHtlbW9qaSB8fCAnPyd9PC9zcGFuPmA7XHJcblxyXG4vLyB9XHJcbi8vIGV4cG9ydHMuYWRkVG9CdWlsZGluZ0xpc3QgPSBhZGRUb0J1aWxkaW5nTGlzdDsiLCJjb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoJy4vanNvbi9idXR0b25zJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBnZXRCdWlsZGluZ0NvdW50IH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCwgY2FuVW5sb2NrIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnIH0gPSByZXF1aXJlKFwiLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgaXNCdXR0b25JZFZpc2libGUsIHNldFZpc2libGVCdXR0b24gfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgY2FuQ3JhZnQgfSA9IHJlcXVpcmUoJy4vY2FuQ3JhZnQnKTtcclxuY29uc3QgeyBjYW5CdXlCdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9jYW5CdXlCdWlsZGluZycpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG4vKipcclxuICogQ2hhbmdlcyB0aGUgc3RhdGVzIG9mIGJ1dHRvbnMgYmV0d2VlbiAnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgYW5kICdidXR0b24tZGlzYWJsZWQnXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCkge1xyXG4gICAgY29uc3Qgc2VsZWN0QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFjY29yZGluZ2x5XHJcblxyXG4gICAgc2VsZWN0QnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29uZmlnID0gYnV0dG9uc1tidXR0b24uaWRdOyAvKiBnZXQgdGhlIGJ1dHRvbidzIGNvbmZpZ3VyYXRpb24gdXNpbmcgaXRzIGRhdGEgYXR0cmlidXRlIG9yIElELCBldGMuICovO1xyXG4gICAgICAgIGlmICghYnV0dG9uQ29uZmlnKSB7IC8qY29uc29sZS53YXJuKCdubyBidXR0b24gY29uZmlnIGZvdW5kIGZvcicsIGJ1dHRvbiwgYnV0dG9uLmlkKTsgKi9yZXR1cm47IH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcuZGF0YV9idWlsZGluZywgYnV0dG9uQ29uZmlnLnJlcXVpcmVtZW50KTtcclxuICAgICAgICAvLyBSZXNldCBhbGwgc3RhdGVzIGZpcnN0XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgIGlmIChidXR0b24uaWQgJiYgaXNCdXR0b25JZFZpc2libGUoYnV0dG9uLmlkKSkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcbiAgICAgICAgLy8gSWYgcmVxdWlyZW1lbnQgaXMgbWV0LCBpdCBzaG91bGQgYmUgdmlzaWJsZVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIGxldCBnZXRNYXRlcmlhbCA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKS5nZXRNYXRlcmlhbDtcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5yZXF1aXJlbWVudCAmJiBidXR0b25Db25maWcucmVxdWlyZW1lbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAgICAgICAgIC8vIGFsd2F5cyBwdXJjaGFzYWJsZSBnYXRoZXIgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy50YWIgJiYgIWJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiA9PT0gJ3Byb2R1Y3Rpb24nKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcG9uZGVyIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZCAmJiBidXR0b24uaWQgPT09ICdnYXRoZXJQb25kZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHBvbmRlciB1bmxvY2tzXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiBidXR0b25Db25maWcudGFiID09PSAncG9uZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbi5jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWQgJiYgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndW5sb2NrJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblVubG9jayhidXR0b24uaWQpKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGEgcG9uZGVyIGJ1dHRvbiBpcyB1bmxvY2tlZCwgaGlkZSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNQb25kZXJlZChidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKSkpIHN0YXRlID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbiwgc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyB0YWIgYnV0dG9ucyBhbHdheXMgZWl0aGVyIGhpZGRlbiBvciBlbmFibGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiBidXR0b25Db25maWcudGFiID09PSAndGFicycpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICd2aXNpYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIHdpdGggY2hlY2tpbmcgcmVxdWlyZW1lbnQgb2YgYnV0dG9uOiAnLCBidXR0b25Db25maWcsIGVycik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmlkICYmIGJ1dHRvbkNvbmZpZy5pZC5zbGljZSgwLCA1KSA9PT0gJ2NyYWZ0Jykge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHVubG9ja2VkIHRoZSBidXR0b24sIG5ldmVyIGRpc3BsYXkgaXRcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UpO1xyXG4gICAgICAgICAgICAvLyBpZiAoYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UgJiYgIXBhc3NlZFN0YWdlKGJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgc3RhdGUgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8gbmV2ZXIgaGlkZSB0aGlzIGJ1dHRvbiBvbmNlIGl0cyBiZWVuIHVubG9ja2VkXHJcbiAgICAgICAgICAgIGlmIChidXR0b25Db25maWcuY3JhZnRlZE9uY2UpIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAgICAgdmFyIGNyYWZ0ZWQgPSBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbkNvbmZpZy5pZCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNyYWZ0ZWQpO1xyXG4gICAgICAgICAgICBpZiAoY3JhZnRlZC52YWx1ZSA+IDApIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBjYW4gYWZmb3JkIHRoaXMgY3JhZnQsIGl0IHNob3VsZCBiZSBwdXJjaGFzYWJsZVxyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyhjcmFmdGVkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coa2V5KTtcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChjYW5DcmFmdChrZXkpKVxyXG4gICAgICAgICAgICAgICAgaWYgKCFidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSB8fCBidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSAmJiBwYXNzZWRTdGFnZShidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSkpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgIGVsc2Ugc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGNhbiBhZmZvcmQgdGhpcyBidWlsZGluZywgaXQgc2hvdWxkIGJlIHB1cmNoYXNhYmxlXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBwdXJjaGFzZWQgYSBidWlsZGluZywgaXQgc2hvdWxkIGJlIHZpc2libGVcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHN0YXRlID0gZ2V0QnVpbGRpbmdDb3VudChidXR0b25Db25maWcuZGF0YV9idWlsZGluZykgPyAnYnV0dG9uLWRpc2FibGVkJyA6IHN0YXRlO1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBidWlsZGluZyBjb3N0XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICBzdGF0ZSA9IGNhbkJ1eUJ1aWxkaW5nKGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSA/ICdwdXJjaGFzYWJsZScgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGhpZGRlbiBpcyBtZXQsIGl0IHNob3VsZCBiZSBoaWRkZW5cclxuICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLmhpZGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBidXR0b25Db25maWcuaGlkZSgpID8gJ2hpZGRlbicgOiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIGN1cnJlbnQgc3RhdGVcclxuICAgICAgICBpZiAoc3RhdGUgIT09ICcnKSBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QtcHVyY2hhc2FibGUsIGRpc2FibGUgdGhlIGJ1dHRvblxyXG4gICAgICAgIC8vIGJ1dHRvbi5kaXNhYmxlZCA9IHN0YXRlID09PSAnYnV0dG9uLWRpc2FibGVkJztcclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgZm9yIHRoaXMgYnV0dG9uIGlmIGl0cyBhY3RpdmVcclxuICAgICAgICAvLyBpZiAoYnV0dG9uID09PSBjdXJyZW50SG92ZXJCdXR0b24pIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAvLyBJZiB0aGUgc3RhdGUgaXMgaGlkZGVuLCBzZXQgdGhlIGJ1dHRvbidzIGRpc3BsYXkgdG8gbm9uZVxyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGwgdmlzaWJsZSAnLCBidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7IC8vIFRoaXMgd2lsbCByZXZlcnQgaXQgYmFjayB0byBpdHMgb3JpZ2luYWwgZGlzcGxheSBzdGF0ZSBvciBkZWZhdWx0IChlLmcuLCAnYmxvY2snIG9yICdpbmxpbmUtYmxvY2snKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qb2ItYnV0dG9uJykuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGNvbnN0IGpvYiA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsICdwdXJjaGFzYWJsZScsICdidXR0b24tZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICBjb25zdCByZXFQb25kZXIgPSAocmVxdWlyZSgnLi9qb2JSZXF1aXJlZFBvbmRlcnMnKS5qb2JSZXF1aXJlZFBvbmRlcnMpW2pvYl07XHJcbiAgICAgICAgaWYgKHJlcVBvbmRlciA9PT0gbnVsbCB8fCByZXFQb25kZXIgPT09IHVuZGVmaW5lZCkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKGlzUG9uZGVyZWQocmVxUG9uZGVyKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGVsc2UgaWYgKHJlcVBvbmRlciA9PT0gJ25vdC11bmxvY2thYmxlJykgc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICBlbHNlIHN0YXRlID0gJ2J1dHRvbi1kaXNhYmxlZCc7XHJcblxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhqb2IsIGJ1dHRvbiwgcmVxUG9uZGVyLCBzdGF0ZSk7XHJcbiAgICAgICAgLy8gYnV0dG9uLmNsYXNzTGlzdC5cclxuICAgICAgICBpZiAoc3RhdGUgPT09ICdoaWRkZW4nKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoaWRpbmcnLCBidXR0b24pO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWxsIHZpc2libGUgJywgYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgc2V0VmlzaWJsZUJ1dHRvbihidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChzdGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gVGhpcyB3aWxsIHJldmVydCBpdCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBkaXNwbGF5IHN0YXRlIG9yIGRlZmF1bHQgKGUuZy4sICdibG9jaycgb3IgJ2lubGluZS1ibG9jaycpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVCdXR0b25WaXNpYmlsaXR5ID0gdXBkYXRlQnV0dG9uVmlzaWJpbGl0eTsiLCJjb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIGdldFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGNhbGNTZWNvbmRzUmVtYWluaW5nIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgdG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkeW5hbWljLXRvb2x0aXAnKTtcclxuZnVuY3Rpb24gc2hvd1Rvb2x0aXAodGFyZ2V0LCBkZXNjLCBlZmZlY3QsIGNvc3QpIHtcclxuICAgIGxldCBjb250ZW50ID0gJyc7XHJcblxyXG4gICAgaWYgKGRlc2MpIHtcclxuICAgICAgICBjb250ZW50ICs9IGA8c3BhbiA+JHtkZXNjfTwvc3Bhbj48aHI+YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWZmZWN0KSB7XHJcbiAgICAgICAgY29udGVudCArPSBgPHNwYW4gc3R5bGU9XCJjb2xvcjojNGNmXCI+JHtlZmZlY3R9PC9zcGFuPjxocj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NNYXRlcmlhbHMoaHRtbFN0cmluZywgcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gUmVndWxhciBleHByZXNzaW9uIHRvIGV4dHJhY3QgbWF0ZXJpYWwgYW5kIGFtb3VudFxyXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL2NsYXNzPVwidG9vbHRpcC0oXFx3KykgLis/XCI+KFtcXGQuXStbS01dPylcXHMoXFx3Kyk8L2c7XHJcbiAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgIGxldCBwcm9jZXNzZWRTdHJpbmcgPSAnJztcclxuXHJcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoaHRtbFN0cmluZykpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbWF0Y2hbMV07XHJcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudFRleHQgPSBtYXRjaFsyXTtcclxuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VBbW91bnQoYW1vdW50VGV4dCk7IC8vIENvbnZlcnQgJzEyMUsnIHRvIDEyMTAwMCwgZm9yIGV4YW1wbGVcclxuXHJcbiAgICAgICAgICAgIC8vIFBlcmZvcm0geW91ciBsb2dpYyBoZXJlXHJcbiAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IGFtb3VudDtcclxuICAgICAgICAgICAgdmFyIGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICAgICAgaWYgKGdldE1heChtYXRlcmlhbCkgPCBhbW91bnQpIGNvbG9yQ2xhc3MgPSAnZXhjZWVkcy1tYXgnO1xyXG5cclxuICAgICAgICAgICAgcHJvY2Vzc2VkU3RyaW5nICs9IGA8c3BhbiBjbGFzcz1cInRvb2x0aXAtJHttYXRlcmlhbH0gJHtjb2xvckNsYXNzfVwiPiR7YW1vdW50VGV4dH0gJHttYXRlcmlhbH08L3NwYW4+YDtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWNvbmRzUmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0pIHNlY29uZHNSZW1haW5pbmcgPSBjYWxjU2Vjb25kc1JlbWFpbmluZyhtYXRlcmlhbCwgYW1vdW50KTtcclxuICAgICAgICAgICAgaWYgKHNlY29uZHNSZW1haW5pbmcgPiAwICYmIGNvbG9yQ2xhc3MgIT0gJ2V4Y2VlZHMtbWF4Jykge1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkU3RyaW5nICs9IGA8c3BhbiBjbGFzcz1cInRpbWUtcmVtYWluaW5nXCI+KCR7c2Vjb25kc1JlbWFpbmluZy50b0ZpeGVkKDApfSBzZWNvbmRzKTwvc3Bhbj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb2Nlc3NlZFN0cmluZyArPSBgPGJyPmA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBwYXJzZSBhbW91bnRzIGxpa2UgJzEyMUsnIGludG8gbnVtYmVyc1xyXG4gICAgZnVuY3Rpb24gcGFyc2VBbW91bnQoYW1vdW50VGV4dCkge1xyXG4gICAgICAgIGxldCBhbW91bnQgPSBwYXJzZUZsb2F0KGFtb3VudFRleHQpO1xyXG4gICAgICAgIGlmIChhbW91bnRUZXh0LmluY2x1ZGVzKCdLJykpIHtcclxuICAgICAgICAgICAgYW1vdW50ICo9IDFlMztcclxuICAgICAgICB9IGVsc2UgaWYgKGFtb3VudFRleHQuaW5jbHVkZXMoJ00nKSkge1xyXG4gICAgICAgICAgICBhbW91bnQgKj0gMWU2O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYW1vdW50VGV4dC5pbmNsdWRlcygnQicpKSB7XHJcbiAgICAgICAgICAgIGFtb3VudCAqPSAxZTk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY29zdCBvZiB0b29sdGlwOicsIGNvc3QpO1xyXG4gICAgICAgIGlmIChjb3N0LnRvU3RyaW5nKCkuaW5jbHVkZXMoJ3NwYW4nKSkge1xyXG4gICAgICAgICAgICAvLyBjb250ZW50ICs9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiNGNEQwM0ZcIj4ke2Nvc3R9PC9zcGFuPjxicj5gO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncnVubmluZyBwcm9jbWF0IGZvciAnLCBjb3N0KTtcclxuICAgICAgICAgICAgY29udGVudCArPSBwcm9jZXNzTWF0ZXJpYWxzKGNvc3QsIHJlc291cmNlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW21hdGVyaWFsLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGNvc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBtYXRlcmlhbCA9IHJlcTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0Vub3VnaCA9IGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpID49IGFtb3VudDsgLyogWW91ciBsb2dpYyB0byBjaGVjayBpZiB0aGVyZSdzIGVub3VnaCBvZiB0aGUgbWF0ZXJpYWwgKi8vKiBZb3VyIGxvZ2ljIHRvIGNoZWNrIGlmIHRoZXJlJ3MgZW5vdWdoIG9mIHRoZSBtYXRlcmlhbCAqLztcclxuICAgICAgICAgICAgICAgIHZhciBjb2xvckNsYXNzID0gaGFzRW5vdWdoID8gJ2Vub3VnaCcgOiAnbm90LWVub3VnaCc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWF4KG1hdGVyaWFsKSA8IGFtb3VudCkgY29sb3JDbGFzcyA9ICdleGNlZWRzLW1heCc7XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHthbW91bnQudG9GaXhlZCgwKX0gJHttYXRlcmlhbH08L3NwYW4+YDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kc1JlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkgc2Vjb25kc1JlbWFpbmluZyA9IGNhbGNTZWNvbmRzUmVtYWluaW5nKG1hdGVyaWFsLCBhbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2Vjb25kc1JlbWFpbmluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kc1JlbWFpbmluZyA+IDAgJiYgY29sb3JDbGFzcyAhPSAnZXhjZWVkcy1tYXgnKSB7IHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0aW1lLXJlbWFpbmluZ1wiPigkeyhzZWNvbmRzUmVtYWluaW5nKS50b0ZpeGVkKDApfSBzZWNvbmRzKTwvc3Bhbj5gOyB9XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxicj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gc3RyO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBpZiAoY29zdCAhPT0gdW5kZWZpbmVkICYmIGNvc3QgIT09ICd1bmRlZmluZWQnKSBjb250ZW50ICs9IGNvc3Q7XHJcbiAgICAgICAgLy8gY29uc29sZS5lcnJvcihcIkNvdWxkbid0IG1ha2Ugbm9ybWFsIGNvc3QgZm9yIGJ1dHRvbjogXCIsIHRhcmdldCwgY29zdCwgZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2codGFyZ2V0LCBjb250ZW50KTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuaW5uZXJIVE1MID0gY29udGVudDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUubGVmdCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQgKyA1KSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLnRvcCA9ICh0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gdG9vbHRpcC5vZmZzZXRIZWlnaHQgLyAyKSArICdweCc7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlVG9vbHRpcCgpIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxufVxyXG5leHBvcnRzLmhpZGVUb29sdGlwID0gaGlkZVRvb2x0aXA7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVUb29sdGlwKGJ1dHRvbikge1xyXG4gICAgY29uc3QgZGVzYyA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJykgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZSgndG9vbHRpcERlc2MnKTtcclxuICAgIGNvbnN0IGVmZmVjdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1lZmZlY3QnKTtcclxuICAgIC8vIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcpO1xyXG4gICAgY29uc3QgY29uZmlnID0gZ2V0UmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbi5pZCkgfHwgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZChidXR0b24uaWQpIHx8IGJ1aWxkaW5nc1tidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJyldIHx8IHBvbmRlcnNbYnV0dG9uLmdldEF0dHJpYnV0ZSgndW5sb2NrJyldO1xyXG4gICAgLy8gY29uc29sZS5sb2coY29uZmlnKTtcclxuICAgIGNvbnN0IGNvc3QgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcpIHx8IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JykgfHwgKGNvbmZpZyAmJiBjb25maWcuY29zdCk7XHJcbiAgICBzaG93VG9vbHRpcChidXR0b24sIGRlc2MsIGVmZmVjdCwgY29zdCk7XHJcbn1cclxuZXhwb3J0cy51cGRhdGVUb29sdGlwID0gdXBkYXRlVG9vbHRpcDtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDgpO1xuIl0sIm5hbWVzIjpbImF0ZUZpc2giLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0QXRlRmlzaCIsImJvb2wiLCJnZXRBdGVGaXNoIiwiYnVpbGRpbmdzIiwiaXNQb3BCdWlsZGluZyIsImluY3JlYXNlTWF0ZXJpYWwiLCJpbmNyZWFzZU1heCIsInVwZGF0ZVRvdGFsIiwiaGFzUGVyayIsImdldE1hdGVyaWFsIiwicGFzc2VkU3RhZ2UiLCJyZWNhbGNNYXhDbG9uZXMiLCJ1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50IiwicmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QiLCJjYW5CdXlCdWlsZGluZyIsImlzUG9uZGVyZWQiLCJ1cGRhdGVCdWlsZGluZ0xpc3QiLCJidXlCdWlsZGluZyIsImJ1aWxkaW5nTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJidWlsZGluZyIsImNvdW50IiwicmVzb3VyY2UiLCJjb3N0IiwiYW1vdW50IiwiT2JqZWN0IiwiZW50cmllcyIsImVmZmVjdHMiLCJnZW5lcmF0ZUJ1aWxkaW5nVG9vbHRpcENvc3QiLCJtYXAiLCJtYXRlcmlhbCIsInRvRml4ZWQiLCJqb2luIiwiY3JlYXRlQnVpbGRpbmdCdXR0b24iLCJidWlsZGluZ0tleSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImJhc2Vjb3N0IiwiY29zdHMiLCJyZXF1aXJlbWVudEZ1bmN0aW9uIiwiY29zdENvbmRpdGlvbiIsImV2ZXJ5IiwiTWF0aCIsImZsb29yIiwiY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbiIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b29sdGlwRGVzYyIsImJ1eU1heEJ1aWxkaW5ncyIsImkiLCJnZW5lcmF0ZUVmZmVjdFN0cmluZyIsImVmZmVjdFBhcnRzIiwidmFsdWUiLCJwdXNoIiwiYm9vc3QiLCJwZXJjZW50YWdlQm9vc3QiLCJyb3VuZCIsInJlc291cmNlcyIsImNyYWZ0ZWRSZXNvdXJjZXMiLCJza2lsbHMiLCJnZXRXb3JrZXJzIiwiZ2V0RmFjdG9yeVByb2R1Y3Rpb24iLCJoYXNQcmVzdGlnZSIsImdldExldmVsT2ZQcmVzdGlnZSIsImhhc1Rvb2wiLCJwZXJrQm9vc3RzIiwic2tpbGxCb29zdHMiLCJyZXNvdXJjZVRvb2xNYXAiLCJjYWxjSW5jcmVhc2UiLCJyZXNvdXJjZU5hbWUiLCJkZWx0YV90aW1lIiwidG90YWwiLCJoYXNPd25Qcm9wZXJ0eSIsImlzR2V0dGluZyIsInBlcmsiLCJpbmNsdWRlcyIsImFwcGx5UGVya0Jvb3N0IiwiY2xvbmVNdWx0Iiwic2tpbGwiLCJib29zdHMiLCJhZmZlY3RlZFJlc291cmNlcyIsImZvckVhY2giLCJza2lsbFJhdGlvIiwibXVsdCIsInBvdyIsImxldmVsIiwiYXBwbHlTa2lsbEJvb3N0Iiwia2V5cyIsImJvb3N0RGF0YSIsImluY3JlYXNlIiwidG9vbE5hbWUiLCJsb2cxMCIsImFwcGx5VG9vbEJvb3N0IiwicGFyc2VGbG9hdCIsImNhbkJ1eSIsImNhbkNyYWZ0IiwicmVzb3VyY2VLZXkiLCJyZXF1aXJlbWVudHMiLCJtYXQiLCJlcnIiLCJ3YXJuIiwiY2FwaXRhbGl6ZUZpcnN0Iiwic3RyIiwibG9vdFRhYmxlIiwiaHVza3MiLCJwcm9iYWJpbGl0eSIsInF1YW50aXR5IiwibmFpbHMiLCJzbGFicyIsImJlYW1zIiwiYXhlIiwic3BlYXIiLCJnb2xkIiwiaXJvbiIsInNpbHZlciIsInN0ZWVsIiwiYnJpY2tzIiwiY3Vyckxvb3QiLCJnZXRDdXJyTG9vdCIsImdlbmVyYXRlTG9vdCIsImxvb3QiLCJyYW5kb20iLCJhcmVuYSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVCYWxscyIsInRlYW0iLCJiYWxsIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInN0eWxlIiwibGVmdCIsInRvcCIsImFwcGVuZENoaWxkIiwicGxheWVyVHJvb3BzIiwiZW5lbXlUcm9vcHMiLCJhbmltYXRpb25zIiwic3RhcnRBbmltYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwidGFyZ2V0WCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwib2Zmc2V0V2lkdGgiLCJhbmltYXRlIiwidHJhbnNmb3JtIiwiZHVyYXRpb24iLCJmaWxsIiwiZmluaXNoZWQiLCJ0aGVuIiwicmVtb3ZlIiwidXBkYXRlIiwic2V0VGltZW91dCIsInBsYXllckJhbGxzIiwibGVuZ3RoIiwiZW5lbXlCYWxscyIsImFuaW1UaW1lIiwiaGFzUmV3YXJkZWQiLCJpc0NvbGxpZGluZyIsImJhbGwxIiwiYmFsbDIiLCJyZWN0MSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QyIiwicmlnaHQiLCJib3R0b20iLCJwbGF5ZXIiLCJlbmVteSIsImoiLCJwbGF5ZXJCYWxsIiwiZW5lbXlCYWxsIiwiZGV0ZWN0Q29sbGlzaW9ucyIsImNvbWJhdFJlc3VsdCIsInRleHRDb250ZW50IiwiZmlnaHRCdXR0b24iLCJkaXNhYmxlZCIsInN0YW5jZU11bHQiLCJnZXRTdGFuY2UiLCJsb290TmFtZSIsImlubmVySFRNTCIsInJlZnJlc2hWYWx1ZXMiLCJjaGVja0ZvcldpbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGNSb3VuZGluZyIsInBsYXllck1pZ2h0IiwiY2FsY3VsYXRlUGxheWVyTWlnaHQiLCJwbGF5ZXJSb3VuZGluZyIsImNlaWwiLCJlbmVteVJvdW5kaW5nIiwiaGlnaGVyUm91bmRpbmciLCJtYXgiLCJwbGF5ZXJDb3VudCIsImVuZW15Q291bnQiLCJ0b1N0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJtaWdodCIsInN0YW5jZSIsInN0YW5jZUJ1dHRvbnMiLCJzd2l0Y2hTdGFuY2UiLCJuZXdTdGFuY2UiLCJlbGVtZW50Iiwic2V0U3RhbmNlIiwibG9vdExpc3QiLCJ3aW5kb3ciLCJjb21iYXQiLCJjYWxjdWxhdGVXaW5DaGFuY2UiLCJjaGFuY2UiLCJwbGF5ZXJNaWdodEVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjaGFuY2VFbGVtZW50IiwiY29sb3IiLCJzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcCIsImFsbE1hdGVyaWFscyIsInIiLCJhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmciLCJhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmciLCJjcmVhdGVGYWN0b3J5RGl2IiwiQXJyYXkiLCJmcm9tIiwiZmFjdG9yaWVzQ29udGFpbmVyIiwiZmFjdG9yeURpdiIsImxlZnRUZXh0IiwiYWRkIiwicmlnaHRTZWxlY3QiLCJvcHRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiY3VycmVudFByb2R1Y2VkIiwidGhpcyIsImdldEF0dHJpYnV0ZSIsIm5ld1Byb2R1Y2VkIiwib2xkUHJvZHVjZWQiLCJmYWN0b3J5SW5kZXgiLCJ1cGRhdGVGYWN0b3J5UmVzb3VyY2VUcmFja2luZyIsImRhdGFzZXQiLCJhcnJvdyIsInNlbGVjdEVsZW1lbnQiLCJ0ZXh0IiwiaW5pdGlhbE9wdGlvbiIsInNlbGVjdGVkIiwiYWRkSW5pdGlhbE9wdGlvbiIsIm1hbnVmYWN0dXJlQnVsayIsImJ1bGtVcGdyYWRlQ29zdCIsIm5ld0ZhY3RvcnlTaWx2ZXJDb3N0IiwiYXR0ZW1wdE1hbnVmYWN0dXJlIiwiZmFjdG9yeSIsImdvYWxSZXNvdXJjZSIsImFyciIsIm51bSIsIm1pbiIsIm1hbnVmYWN0dXJlIiwiYnV5RmFjdG9yeSIsImJ1eUZhY3RvcnlCdXR0b24iLCJ1cGdyYWRlQnVsayIsImxvYWRGYWN0b3J5IiwiY3JhZnRpbmciLCJkaXYiLCJmaXRDaGFyVG9DZWxsIiwiY2hhciIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJpbml0aWFsRm9udFNpemUiLCJzcGFuIiwiZm9udFNpemUiLCJwb3NpdGlvbiIsIndoaXRlU3BhY2UiLCJ2aXNpYmlsaXR5IiwiYm9keSIsImN1cnJlbnRGb250U2l6ZSIsIm9mZnNldEhlaWdodCIsInJlbW92ZUNoaWxkIiwiZ2V0Q3JhZnRlZFJlc291cmNlIiwidG9Mb3dlckNhc2UiLCJpc1Jlc291cmNlIiwiYWxsVmlzaWJsZUJ1dHRvbnMiLCJTZXQiLCJnZXRNYXgiLCJJbmZpbml0eSIsImNhbGNDcmFmdEJvbnVzIiwiaXNCdXR0b25JZFZpc2libGUiLCJpZCIsImhhcyIsInNldFZpc2libGVCdXR0b24iLCJjbGVhclNpZGViYXIiLCJ0cmlnZ2VyRmxvYXRVcFRleHQiLCJqb2JBdWRpbyIsIkF1ZGlvIiwiam9iQ291bnRzIiwiam9ic1RhYiIsImdldFRvdGFsSm9icyIsImpvYkRpdiIsImRlY3JlbWVudERpdiIsImpvYk5hbWVTcGFuIiwiaW5jcmVtZW50RGl2IiwiYnRuIiwiZXZlbnQiLCJqb2JUeXBlIiwiY2xvc2VzdCIsInBsYXkiLCJ4IiwicGFnZVgiLCJ5IiwicGFnZVkiLCJzaGlmdEtleSIsImRpZmZlcmVuY2UiLCJjdHJsS2V5IiwiZGlzdHJpYnV0ZVdvcmtlcnMiLCJ1cGRhdGVEaXNwbGF5IiwibnVtV29ya2VycyIsIndvcmtlcnNEaXN0cmlidXRpb24iLCJNYXAiLCJ0b3RhbFdvcmtlcnMiLCJmaWx0ZXIiLCJudW1iZXJPZlJlc291cmNlcyIsInBlclJlc291cmNlIiwic2V0IiwibW92ZUJhbGxGcm9tSm9iVG9SZXNvdXJjZSIsInJlbWFpbmluZ1dvcmtlcnMiLCJnZXQiLCJhZmZlY3RlZFJlc291cmNlIiwiam9iQnV0dG9uIiwiZmluZCIsImRpc3BsYXkiLCJyZXNvdXJjZURpc3BsYXkiLCJqb2JCdXR0b25SZWN0IiwicmVzb3VyY2VSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvcGFjaXR5Iiwic2Nyb2xsWCIsInNjcm9sbFkiLCJlYXNpbmciLCJvbmZpbmlzaCIsInRoaXNKb2JCdXR0b24iLCJqb2JFbGVtZW50IiwiY29ubmVjdGlvbnMiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiZHJhd0xpbmUiLCJzdGFydEVsZW1lbnQiLCJlbmRYIiwiZW5kWSIsInJlY3QiLCJzdGFydFgiLCJzdGFydFkiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJjb250ZXh0IiwiZnJvbVgiLCJmcm9tWSIsInRvWCIsInRvWSIsInJhZGl1cyIsImFuZ2xlIiwieF9jZW50ZXIiLCJ5X2NlbnRlciIsImF0YW4yIiwiY29zIiwic2luIiwiUEkiLCJjbG9zZVBhdGgiLCJkcmF3QXJyb3doZWFkIiwic3dpdGNoSm9iIiwib2xkSm9iSWQiLCJuZXdKb2JJZCIsIndvcmtlcnMiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjbGVhckpvYkFzc2lnbm1lbnRzIiwiY2xlYXJSZWN0IiwicmVhc3NpZ25Kb2JzQmFzZWRPblJlc291cmNlcyIsInVuZGVmaW5lZCIsImRhdGFKb2IiLCJvbGRJZCIsInJlcGxhY2UiLCJuZXdJZCIsIm1heGVkT3V0IiwicmVzb3VyY2VBcnJheSIsImVycm9yIiwiZHJhd0FsbENvbm5lY3Rpb25zIiwib2xkQnV0dG9uIiwibmV3QnV0dG9uIiwibmV3WCIsIm5ld1kiLCJvZmZzZXRUb3AiLCJzZXRDb25uZWN0aW9ucyIsIm5ld0Nvbm5lY3Rpb25zIiwiZ2V0Q29ubmVjdGlvbnMiLCJyZXNldEFsbEpvYnMiLCJlbW9qaSIsInJhdGlvIiwiY29uY3JldGUiLCJtZWRpY2luZSIsImZpc2giLCJ2aW9sZW5jZSIsIndvb2QiLCJyb2NrcyIsInZpbmVzIiwic3RpY2tzIiwiZ2FtZSIsImNsYXkiLCJ3YXRlciIsImNyYXRlcyIsImhlcmJzIiwiYmVycmllcyIsImZyZXNod2F0ZXIiLCJnbGFzcyIsInBvbmRlciIsImdldEJ1aWxkaW5nQ291bnQiLCJnZXRCb29zdCIsInJlc2V0QnVpbGRpbmdzIiwia2V5IiwidmFsIiwiYnV0dG9ucyIsImNsYXNzIiwidGFiIiwidG9vbHRpcENvc3QiLCJyZXF1aXJlbWVudCIsImhpZGUiLCJzaG93VGFiIiwiY3JhZnRlZE9uY2UiLCJyZXF1aXJlZFN0YWdlIiwiZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCIsImMiLCJnZXRDcmFmdGVkUmVzb3VyY2VLZXlCeUNvbmZpZyIsImNvbmZpZyIsImsiLCJyZXNldENyYWZ0ZWRSZXNvdXJjZXMiLCJwZXJrcyIsInBvbmRlcnMiLCJyZXNldFBvbmRlcnMiLCJwcmVzdGlnZSIsInByZXMiLCJpc1Zpc2libGUiLCJhY3RpdmVUZXh0IiwiZGVmYXVsdFRleHQiLCJnZXRSZXNvdXJjZUNvbmZpZ0J5SWQiLCJyZXNldFJlc291cmNlcyIsImdhdGhlcmluZyIsImV4cCIsIm1hc29ucnkiLCJuZWVkVG9vbHMiLCJjYXJwZW50cnkiLCJ0aGlua2luZyIsImZhcm1pbmciLCJmaXNoaW5nIiwiaHVudGluZyIsInNhdmVHYW1lIiwibG9hZEdhbWUiLCJnZW5lcmF0ZVRvb2x0aXBDb3N0IiwiYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucyIsImNyYWZ0QWxsUmVzb3VyY2VzIiwiY3JhZnRSZXNvdXJjZSIsInVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyIsInNlbGVjdEFiaWxpdHkiLCJyZXNldFBlcmtzIiwibWFrZVZpc2libGUiLCJ1cGRhdGVCdXR0b25WaXNpYmlsaXR5IiwiZ2VuZXJhdGVQb25kZXJCdXR0b25zIiwiYWRkVG9vbCIsInJlc2V0U3RhZ2VzIiwiaW5pdGlhbGl6ZVJlc291cmNlVGFncyIsInVwZGF0ZVNpZGViYXIiLCJ1cGRhdGVEaXNwbGF5VmFsdWUiLCJ1cGRhdGVCb3VuY2VBbmltYXRpb24iLCJ1cGRhdGVUb29sdGlwIiwiaGlkZVRvb2x0aXAiLCJzaWRlYmFyUGFyZW50IiwiZW1vamlHYXRoZXJEaXYiLCJ0b2dnbGVSZXNvdXJjZSIsInNpZGViYXJUZXh0IiwicmVzb3VyY2VCdXR0b24iLCJmb250V2VpZ2h0IiwickJ1dHRvbiIsInN0b3BBbGxHYXRoZXJpbmciLCJ0b29sc1RvU3RhZ2VzIiwidmlzaWJpbGl0eVJ1bGVzIiwiY29uZGl0aW9uIiwiYWN0aW9uIiwibG9jYXRpb24iLCJocmVmIiwiYXVkaW9GaWxlcyIsImN1cnJlbnRBdWRpbyIsInRpbWVvdXRJZCIsInBsYXlSYW5kb21UcmFjayIsInBhdXNlIiwiY3VycmVudFRpbWUiLCJyYW5kb21JbmRleCIsInZvbHVtZSIsIm11c2ljVm9sdW1lIiwiY2xlYXJUaW1lb3V0Iiwic2lsZW5jZUR1cmF0aW9uIiwib25lbmRlZCIsInNjaGVkdWxlTmV4dFRyYWNrIiwic2Z4Vm9sdW1lIiwiZ2V0Q3VycmVudFRhYiIsImNvbnRlbnQiLCJ0YWJDb250YWluZXJzIiwidGFiTmFtZSIsInByZXZUYWIiLCJ0YWJBdWRpbyIsInByZXZUYWJFbGVtZW50IiwidGFicyIsImFjdGl2ZUNvbnRlbnQiLCJ0YWJTdHJpbmciLCJhY3RpdmVUYWJCdXR0b24iLCJ0b2dnbGUiLCJpc0RhcmsiLCJmYWRlVG9CbGFjayIsIm92ZXJsYXkiLCJvdmVybGF5VGV4dCIsIm92ZXJsYXlCdXR0b24iLCJtZXNzYWdlRWxlbWVudCIsImNoYW5nZU1lc3NhZ2UiLCJuZXdNZXNzYWdlIiwiY2xvbmVXb3JkcyIsIm1vZGlmaWVkTWVzc2FnZSIsIm1pbGxpc2Vjb25kc19wZXJfZnJhbWUiLCJsYXN0X3RpbWUiLCJ0b3RhbF90aW1lIiwiYWNjdW11bGF0ZWRfbGFnIiwibG9vcCIsImN1cnJlbnRfdGltZSIsIm5vcm1hbFJhdGUiLCJ0aW1lX3NpbmNlX2xhc3Rfc2F2ZSIsInRpbWVfc2luY2VfbWFudWZhdHVyZSIsInJ1bGUiLCJzcGxpY2UiLCJ0b29sIiwiY3VycmVudEhvdmVyQnV0dG9uIiwicmVuZGVyIiwib25iZWZvcmV1bmxvYWQiLCJjdXJyZW50bHlEZWxldGluZyIsInRyYWNlIiwiYnV0dG9uIiwiY3JlYXRlQ29sdW1ucyIsInBhcmVudCIsImNvbDEiLCJjb2wyIiwiY29sMyIsInByZXBlbmQiLCJ0YWJzQ29udGFpbmVyIiwicHJvZHVjdGlvbkNvbnRhaW5lciIsImV4cGVyaW1lbnRDb250YWluZXIiLCJwb25kZXJDb250YWluZXIiLCJleHBlcmltZW50Q29sdW1ucyIsInBvbmRlckNvbHVtbnMiLCJwcm9kdWN0aW9uQ29sdW1uSW5kZXgiLCJleHBlcmltZW50Q29sdW1uSW5kZXgiLCJwb25kZXJDb2x1bW5JbmRleCIsImJ1dHRvbkVsZW1lbnQiLCJzcGxpdCIsInRvb2x0aXBFZmZlY3QiLCJ1bmxvY2siLCJkYXRhX2J1aWxkaW5nIiwiY3JhZnRlZFJlc291cmNlIiwidmFsdWVzIiwiZ3JpZENvbHVtbiIsImdlbmVyYXRlQnV0dG9ucyIsImZhY3RvcnlCdXR0b25zIiwidXBncmFkZUJ1bGtCdXR0b24iLCJtYWtlRmFjdG9yeUJ1dHRvbnMiLCJ0YXJnZXQiLCJtYXRjaGVzIiwiYnVpbGRpbmdBdWRpbyIsImJ1aWxkaW5nU3RyaW5nIiwidW5sb2NrQXR0ciIsImNhblVubG9jayIsInBvbmRlckF1ZGlvIiwicmVsb2FkIiwiZ2V0UktleUZyb21JRCIsImNyYWZ0QXVkaW8iLCJjciIsImdldENSS2V5RnJvbUlEIiwiY29uZmlybSIsImxvY2FsU3RvcmFnZSIsInJlbW92ZUl0ZW0iLCJkYXJrTW9kZVRvZ2dsZSIsIm92ZXJsYXlCYWNrQnV0dG9uIiwiaHVza3NEdWUiLCJvbGRIdXNrVmFsdWUiLCJodXNrVmFsdWUiLCJidXR0b25Db250YWluZXIiLCJncmlkUm93IiwibiIsImEiLCJzcXJ0IiwibmV4dEZpYm9uYWNjaSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInByZXZGaWJvbmFjY2kiLCJpc2VrYWkiLCJvcHRpb25zTWVudSIsInVwZGF0ZVVJIiwicmVzb3VyY2VEaXYiLCJzZXRUb3RhbFRpbWUiLCJ0aW1lIiwiZ2V0TWVzc2FnZSIsInNldFN0YWdlIiwic3RhZ2UiLCJteVBlcmtzIiwicGVya05hbWUiLCJhZGRQZXJrIiwiYiIsImFiaWxpdHlOYW1lIiwiZ2V0UGVya0Zyb21UaWVyIiwidGllck51bSIsImdldEFsbFBlcmtzIiwidW5sb2NrSWQiLCJ1bmxvY2tLZXkiLCJwb25kZXJPYmplY3RzIiwicG9uZGVyS2V5IiwicG9uZGVyT2JqIiwiYnV0dG9uS2V5Iiwic2V0TWF4IiwibWF4Q2xvbmVzIiwibXlCdXR0b24iLCJuZXdUZXh0IiwiZWZmZWN0U3RyaW5nIiwiYWJicmV2aWF0ZU51bWJlciIsImdldEFsbFN0YWdlcyIsInVwZGF0ZVNraWxscyIsInJlc291cmNlc0NvbnRhaW5lciIsImNoZWNrZWQiLCJhdXRvQ3JhZnRUYWJsZSIsImNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbiIsImNvbnRhaW5lciIsImVtb2ppRGlzcGxheSIsInVwZGF0ZUVtb2ppRGlzcGxheSIsImVtb2ppU3RyIiwicmVwZWF0IiwiYWRqdXN0Rm9udFNpemUiLCJzdWZmaWNpZW50UmVzb3VyY2VzIiwiY3JhZnRSZXNvdXJjZVF1YW50aXR5IiwiY3JhZnRPbmUiLCJjcmFmdEJvbnVzIiwiY2FsY1NlY29uZHNSZW1haW5pbmciLCJuZWVkZWQiLCJuYW1lIiwicmF0ZSIsInJhdGVFbGVtZW50IiwiZ2V0QWxsVG9vbHMiLCJwb3B1bGF0ZVNraWxsc1RhYmxlIiwic2F2ZSIsInRvb2xzIiwic3RhZ2VzIiwidW5sb2NrcyIsImpvYnMiLCJtZXNzYWdlIiwiZmFjdG9yaWVzIiwiaXRlbSIsInUiLCJodG1sU3RyaW5nIiwiZXh0cmFjdFRleHRGcm9tSFRNTCIsIkRhdGUiLCJub3ciLCJzZXRJdGVtIiwic2F2ZWdhbWUiLCJnZXRJdGVtIiwidmFsdWVPZiIsIk51bWJlciIsImlzTmFOIiwidW5pb24iLCJzIiwiY2xvbmVzIiwidGltZV9kaWZmZXJlbmNlIiwiaW5jIiwic2l6ZSIsImpvYiIsInNlbGVjdENvcnJlY3RQZXJrQnV0dG9uIiwic2VsZWN0ZWRCdXR0b24iLCJyZW1vdmVBdHRyaWJ1dGUiLCJzaG91bGRIaWRlIiwiZm9ybWF0IiwidW5pdCIsInJvdW5kVG9EZWNpbWFscyIsIm51bWJlciIsImRlY2ltYWxzIiwiZmFjdG9yIiwiY3JlYXRlUmVzb3VyY2VUYWciLCJncm91cE5hbWUiLCJncm91cENvbnRhaW5lciIsInRvZ2dsZUJ1dHRvbiIsIm9uY2xpY2siLCJncm91cCIsImNoaWxkcmVuIiwidGFnTmFtZSIsInRvZ2dsZUdyb3VwVmlzaWJpbGl0eSIsImNyZWF0ZVJlc291cmNlR3JvdXBDb250YWluZXIiLCJyZXNvdXJjZURpc3BsYXlOYW1lIiwicmVzb3VyY2VFbGVtZW50IiwicmVzb3VyY2VOYW1lU3BhbiIsInJlc291cmNlVmFsdWVTcGFuIiwicmVzb3VyY2VSYXRlU3BhbiIsImNoYW5nZVJlc291cmNlT3JkZXIiLCJyZXNvdXJjZUlkIiwibmV3T3JkZXIiLCJvcmRlciIsImVsZW1lbnRJbmNyZWFzZSIsInBhcmVudEVsZW1lbnQiLCJpbmRleCIsImRpc3BsYXlFbGVtIiwid2l0aEdyb3VwcyIsInJlc291cmNlR3JvdXBzIiwic3BlY2lhbCIsImJhc2ljcyIsIm1hdGVyaWFscyIsImFkdmFuY2VkIiwibWV0YWwiLCJjb25zdHJ1Y3Rpb24iLCJncm91cE9mUmVzb3VyY2VzIiwicmVzb3VyY2VUb1NraWxsTWFwIiwiZGF0YSIsImludmVydFNraWxsc1RvUmVzb3VyY2VzIiwiaGFzR2VuZXJhdGVkU2tpbGxUYWJsZSIsInRhYmxlIiwicHJvZ3Jlc3NCYXIiLCJ0ciIsInRkUHJvZ3Jlc3MiLCJza2lsbFRleHQiLCJhYnMiLCJsZXZlbHVwIiwicG9wIiwicGxheWVyVG9vbHMiLCJ1bCIsImxpIiwiY3JlYXRlVGV4dE5vZGUiLCJ1cGRhdGVUb29sVUkiLCJnZXRUb29sVmFsdWVGb3JSZXNvdXJjZSIsInNvcnRlZFRvb2xzIiwic29ydCIsInJlc291cmNlTGlzdCIsImdvbGRBbW91bnRFbCIsImJ1eVJlc291cmNlIiwicHJpY2UiLCJzZWxsUmVzb3VyY2UiLCJnZW5lcmF0ZVRyYWRlVGFibGUiLCJyb3ciLCJmbG9hdFRleHQiLCJhbG9uZUVsZW1lbnQiLCJidWlsZGluZ0NvdW50IiwiYnVpbGRpbmdMaXN0IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY29sIiwiYnV0dG9uQ29uZmlnIiwic3RhdGUiLCJjcmFmdGVkIiwicmVxUG9uZGVyIiwidG9vbHRpcCIsImRlc2MiLCJlZmZlY3QiLCJwYXJzZUFtb3VudCIsImFtb3VudFRleHQiLCJyZWdleCIsIm1hdGNoIiwicHJvY2Vzc2VkU3RyaW5nIiwiZXhlYyIsImNvbG9yQ2xhc3MiLCJzZWNvbmRzUmVtYWluaW5nIiwicHJvY2Vzc01hdGVyaWFscyIsInNob3dUb29sdGlwIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=