(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},98:e=>{let t=.5,o=.5;e.exports={setMusicVolume:function(e){t=e},getMusicVolume:function(){return t},setSfxVolume:function(e){o=e},getSfxVolume:function(){return o}}},151:(e,t,o)=>{const{buildings:n,isPopBuilding:s}=o(882),{increaseMaterial:i,increaseMax:r}=o(594),{updateTotal:a}=o(150),{hasPerk:c}=o(134),{getMaterial:l}=o(924),{passedStage:d}=o(751),{recalcMaxClones:u}=o(995),{updateBuildingButtonCount:f}=o(607),{recalculateBuildingCost:p}=o(22),{canBuyBuilding:g}=o(23),{isPondered:b}=o(369),{updateBuildingList:m}=o(831),{capitalizeFirst:h}=o(681);function y(e){console.log("Buying building "+e);const t=n[e];if(g(e)){t.count++;for(const e in t.cost)i(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))console.log("bought building effects",e,o),r(e,o),"clones"===e&&(u(),a());f(e,t.count,JSON.parse(JSON.stringify(t.emoji))),p(e,n,c),m()}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){try{const o=t[e];o.cost=o.basecost;const n=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),s=function(e,t){return function(){const t=Object.entries(e).every((([e,t])=>l(e)>=Math.floor(t/2)));return d("clones")&&t}}(o.cost);return console.log("create building button:",o,JSON.parse(JSON.stringify(o.emoji))),{class:"tooltip "+e,tab:"production",text:`${JSON.parse(JSON.stringify(o.emoji))} ${h(e)}`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:n,requirement:()=>s(),data_building:e}}catch(o){console.error("Could not create building button for",e,t)}},buyMaxBuildings:function(e){let t=0;for(n[e];g(e);)y(e),++t;return t},buyBuilding:y,generateEffectString:function(e){let t=[];for(let[o,n]of Object.entries(e.effects))t.push(`+${n} max ${o}`);for(let[o,n]of Object.entries(e.boost)){let e=Math.round(100*(n-1));b("effectiveBuildings")&&(e*=1.01),t.push(`+${e}% ${o} production`)}return t.join(", ")},updateBuildingList:m}},121:(e,t,o)=>{const{resources:n}=o(587),{craftedResources:s}=o(371),{skills:i}=o(324),{getWorkers:r}=o(150),{hasPerk:a}=o(134),{isPondered:c}=o(369),{getFactoryProduction:l}=o(51),{hasPrestige:d,getLevelOfPrestige:u}=o(425),{getMaterial:f}=o(924),{hasTool:p}=o(609),g={Lumberjack:["wood","sticks"],Miner:["rocks","ore"],Botanist:["vines","herbs","wheat"]},b={gathering:["gatheringBoost"],masonry:["masonryBoost"],carpentry:["carpentryBoost"],thinking:["thinkingBoost"],farming:["farmingBoost"],fishing:["fishingBoost"],hunting:["huntingBoost"]},m={wood:"axe",ore:"pickaxe",fish:"fishingrod",game:"spear",ponder:"paper",sticks:"staff"};t.calcIncrease=function(e,t){var p=0;const h=o(882).buildings;if(!n.hasOwnProperty(e)){if(!s.hasOwnProperty(e))return p;if((p=l(e))>0)return p}"clones"===e&&c("autoClone")&&(p=1),n[e]&&n[e].isGetting&&(p+=1),p=function(e,t){for(const[o,n]of Object.entries(g))n.includes(t)&&a(o)&&(e*=1.75);return e}(p+=(a("Leader")?.375:.25)*r(e)||0,e),p=function(e,t){for(const[o,n]of Object.entries(b))if(i[o].affectedResources.includes(t)){n.forEach((t=>{d(t)&&(e*=1.1*u(t))}));let t=1.06,s=1+(Math.pow(t,i[o].level)-1)/100;e*=s}return e}(p,e);for(const t of Object.keys(h)){const n=o(882).getBoost(t,e);if(n){var y=Math.pow(n,h[t].count);c("effectiveBuildings")&&(y*=1.03),p*=y}}return"ponder"===e&&(c("ponder1")&&(p*=1.05),c("ponder2")&&(p*=1.05),c("ponder3")&&(p*=1.05)),c("fasterResourceGain")&&(p*=1.05),d("cloneBoost")&&(p*=1.05*u("cloneBoost")),p=function(e,t){const o=m[t];return o&&f(o)>10&&(e*=1+Math.log10(f(o)/10)),e}(p,e),f("husks")>10&&(p*=1+Math.log(f("husks")/10)),parseFloat((p*t/1e3).toFixed(3))}},23:(e,t,o)=>{const{resources:n}=o(587),{getMaterial:s}=o(924),{passedStage:i}=o(751);t.canBuyBuilding=function(e){let t=!0;const r=o(882).buildings[e];for(const e in r.cost)if(r.cost[e]>s(e,n)){t=!1;break}return r.effects&&r.effects.clones&&!i("clone")&&(t=!1),t}},64:(e,t,o)=>{const{resources:n}=o(587),{craftedResources:s}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=s[e].cost;try{for(let e in o)if(i(e,n)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},856:(e,t,o)=>{const{getMaterial:n}=o(924),{increaseMaterial:s}=o(594),i={husks:{probability:.05,quantity:1},nails:{probability:.1,quantity:50},slabs:{probability:.2,quantity:50},beams:{probability:.1,quantity:60},axe:{probability:.15,quantity:5},spear:{probability:1,quantity:5},gold:{probability:.1,quantity:10},iron:{probability:.15,quantity:50},silver:{probability:.05,quantity:20},steel:{probability:.1,quantity:30},bricks:{probability:.15,quantity:80}};let r={};function a(){return r}function c(){let e={};for(const t in i)if(Math.random()<i[t].probability){const o=Math.floor(i[t].quantity*(.4*Math.random()+.8));o>0&&(e[t]=o)}return r=e,console.log(r),e}const l=document.getElementById("arena");function d(e,t){for(let o=0;o<t;o++){const t=document.createElement("div");t.className=`ball ${e}`,t.style.left=("player"===e?10:90)+"%",t.style.top=10+30*o+"px",l.appendChild(t),"player"===e?u.push(t):f.push(t)}}let u=[],f=[],p=[];const g=3e3;function b(){document.querySelectorAll(".ball").forEach((e=>{const t=e.classList.contains("player")?l.offsetWidth:-l.offsetWidth;p.push(e.animate([{transform:`translateX(${t}px)`}],{duration:g,fill:"none"}).finished.then((()=>{e.remove()})))})),v(),setTimeout((()=>{const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0!==e&&0!==t){for(const e of document.querySelectorAll(".ball"))e.remove();d("player",e),d("enemy",t),b()}}),g-100)}let m=!1;function h(){if(m)return;const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0===e&&t>0?w="enemy":0===t&&e>0&&(w="player"),null!==w){const e=document.getElementById("combatResult");if(e.textContent="player"===w?"You won!":"enemy"===w?"The Enemy won!":"It's a draw!",setTimeout((()=>{x.disabled=!1}),g/2),"player"===w){m=!0;let t=1;"aggressive"===q()&&(t=.75),"careful"===q()&&(t=1.25);for(const[o,n]of Object.entries(r))s(o,n*t),e.innerHTML+=`<br>+${n*t} ${o}`;c()}return console.log("battle result was",w),function(e){if(null===e)return T;e?T+=50:T-=50,T<200&&(T=200)}(null===w||"player"===w),L(),!0}return!1}function y(e,t){const o=e.getBoundingClientRect(),n=t.getBoundingClientRect();return!(o.right<n.left||o.left>n.right||o.bottom<n.top||o.top>n.bottom)}function v(){!function(e,t){for(let s=0;s<e.length;s++)for(let e=0;e<t.length;e++)y(u[s],f[e])&&(o=u[s],n=f[e],Math.random()<1/(1+Math.pow(10,(S()-B())/C))?n.remove():o.remove());var o,n}(u,f),h()||m||requestAnimationFrame(v)}function k(){const e=B(),t=S(),o=Math.ceil(e/12),n=Math.ceil(t/12),s=Math.max(o,n),i=Math.floor(e/s),r=Math.floor(t/s);return document.getElementById("approximateBall").textContent=s.toString(),[i,r]}const x=document.querySelector("button#startCombat");let w=null;const C=200;function B(){let e=n("violence")+n("spear")+n("medicine");return"aggressive"===q()?e*=1.2:"careful"===q()&&(e*=.8),e}let T=400;function S(){return T}const M=document.getElementById("playerMight"),E=document.getElementById("enemyMight");function A(){const e=B(),t=S(),o=1/(1+Math.pow(10,(t-e)/C));M.textContent=e.toFixed(0),M.setAttribute("tooltipdesc",`${n("violence").toFixed(0)} violence + ${n("spear").toFixed(0)} spears + ${n("medicine").toFixed(0)} medicine`),E.textContent=t.toFixed(0);const s=document.getElementById("chanceToWin");return s.textContent=(100*o).toFixed(1)+"%",s.style.color=`hsl(${(120*o).toString(10)},100%,50%)`,o}let j="balanced";function q(){return j}const $=document.querySelectorAll("button.stance");function D(e){console.log("switch stance to ",e),$.forEach((e=>{e.disabled=!1})),document.querySelector(`#${e}Stance`).disabled=!0,function(e){j=e}(e),L()}function L(){Object.keys(a()).length<1&&c();const e=document.getElementById("lootList");e.innerHTML="";for(const[t,o]of Object.entries(a()))e.innerHTML+=`<span>${t} (${o})</span> <br>`;E.textContent=S().toString(),k(),A()}window.switchStance=D,e.exports={combat:function(){w=null;for(const e of document.querySelectorAll(".ball"))e.remove();let[e,t]=k();d("player",e),d("enemy",t),document.getElementById("combatResult").textContent="",x.disabled=!0,m=!1,b()},calculateWinChance:A,refreshValues:L,pauseAnimation:function(){p.forEach((e=>{e.pause()}))},battleResult:w,simulateBattle:function(){w=function(){const e=B(),t=S(),o=1/(1+Math.pow(10,(t-e)/C));return Math.random()<o?"player":"enemy"}(),h()},switchStance:D,getCurrEnemyMight:S,setEnemyMight:function(e){T=e}}},51:(e,t,o)=>{const{getMaterial:n}=o(924),{craftedResources:s}=o(371),{resources:i}=o(587);var r={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},a=[];Object.keys(i).forEach((e=>a.push(e))),Object.keys(s).forEach((e=>a.push(e))),console.log("All materials: ",a);let c={},l={};function d(e,t){e&&"none"!==e&&(c[e]--,Array.from(s[e].cost).forEach((e=>{l[e.resource]-=e.amount}))),c[t]?c[t]++:c[t]=1,s[t]&&Array.from(s[t].cost).forEach((e=>{l[e.resource]+=e.amount}))}function u(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const n=document.createElement("span");n.classList.add("factoryCost");const i=document.createElement("select");Object.keys(r).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,i.appendChild(t)})),i.setAttribute("data-produced","none"),i.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=i.value;d(e,t),this.setAttribute("data-produced",t),t&&"none"!==t&&(document.querySelector(`#resource-${t}`).style.color="thistle",n.innerHTML="",n.innerHTML+=`${o(594).generateTooltipCost(s[i.value].cost)}`)}));const a=document.createElement("span");return a.innerHTML="&#8594;",t.appendChild(n),t.appendChild(a),t.appendChild(i),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.selected=!0,e.appendChild(o)}(i),e.appendChild(t),t}let f=2,p=30;var g=50;e.exports={createFactoryDiv:u,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,i=r[t];i&&t&&function(e,t){let i=[];e.forEach((e=>i.push(n(e)/s[t].cost[e])));let r=Math.min(f,...i);r*=1,o(594).craftResourceQuantity(t,r)}(i,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");n("silver")<g?console.log("Not enough silver!"):(o(594).increaseMaterial("silver",-g),u(),g*=1.2,e.setAttribute("tooltipCost",`${g.toFixed(2)} silver`))},upgradeBulk:function(){n("silver")<p||(f+=2,p+=10,document.getElementById("upgradeBulkButton").setAttribute("tooltipCost",`${f} → ${f+2}: ${p.toFixed(0)} silver`))},allMaterials:a,getFactoryProduction:function(e){return c[e]*f},loadFactory:function(e){console.log("loading a factory for ",e);let t=u();e&&(t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(594).generateTooltipCost(s[e].cost)}`);const n=document.getElementById("buyFactoryButton");g*=1.2,n.setAttribute("tooltipCost",`${g.toFixed(0)} silver`),d("none",e)},activeFactoriesProducing:c}},531:(e,t)=>{t.fitCharToCell=function(e,t,o,n){const s=document.createElement("span");s.textContent=e,s.style.fontSize=`${n}px`,s.style.position="absolute",s.style.whiteSpace="nowrap",s.style.visibility="hidden",document.body.appendChild(s);let i=n;for(;s.offsetWidth<t&&s.offsetHeight<o&&(i++,s.style.fontSize=`${i}px`,!(i>=1e3)););return document.body.removeChild(s),i}},900:(e,t,o)=>{const{capitalizeFirst:n}=o(681),{craftedResources:s}=o(371),{resources:i}=o(587),r=Object.keys(i).filter((e=>"husks"!==e)),a=Object.keys(s);function c(e,t){return Math.random()*(t-e)+e}function l(){const e=[{start:78107,end:78142},{start:78307,end:78367}],t=e[Math.floor(Math.random()*e.length)],o=Math.floor(c(t.start,t.end+1));return String.fromCodePoint(o)}const d=["bustling","majestic","ancient","elegant","hidden","glorious","enchanted","whispering","mystical","luminous","radiant","spectacular","dazzling","serenade","celestial","vibrant","imposing","venerable","immaculate","enigmatic","harmonious","ethereal","resplendent","tranquil","serene","awe-inspiring","peaceful","picturesque","captivating"],u=["Sanctuary","Citadel","Haven","Monastery","Outpost","Observatory","Stronghold","Palace","Temple","Manor","Keep","Chateau","Acropolis","Cathedral","Villa","Fortress","Bastion","Lighthouse","Castle","Coliseum","Pyramid","Mansion","Estate","Museum","Tower","Hall","Library","Gallery","Bazaar"],f=["sanctuary","citadel","haven","monastery","outpost","observatory","stronghold","palace","temple","manor"],p=["provides","enhances","imbues","radiates","embodies","inspires","evokes","exudes","bestows","creates"],g=["with","through","amidst","beneath","above","alongside"],b=["and","while","as","although","yet"];t.generateRandomBuilding=function(){const e=function(){const e=d[Math.floor(Math.random()*d.length)],t=u[Math.floor(Math.random()*u.length)];return`${n(e)} ${t}`}(),t=function(){const e=d[Math.floor(Math.random()*d.length)],t=d[Math.floor(Math.random()*d.length)],o=f[Math.floor(Math.random()*f.length)],s=p[Math.floor(Math.random()*p.length)],i=g[Math.floor(Math.random()*g.length)],r=b[Math.floor(Math.random()*b.length)];let a="";switch(Math.floor(6*Math.random())){case 0:a=`${e} ${o} that ${s} an aura of splendor.`;break;case 1:a=`${n(i)} its ${e} appearance, the ${o} ${s} an aura of ${t}.`;break;case 2:a=`${n(e)} ${o} ${s} gracefully, exuding an enchanting atmosphere.`;break;case 3:a=`The ${o} is ${e} and ${s} with a sense of wonder.`;break;case 4:a=`Amidst the ${e} surroundings, the ${o} ${s} tranquility and beauty.`;break;case 5:a=`An ${e} ${o} that ${s} an aura of charm ${r} mystique.`;break;default:a=`${n(e)} ${o} that ${s} an aura of splendor.`}return a}(),o=c(1,3),s={};for(let e=0;e<o;e++)s[r[Math.floor(Math.random()*r.length)]]=Math.floor(100*Math.random()*(5-o));const i=c(0,1);for(let e=0;e<i;e++)s[a[Math.floor(Math.random()*a.length)]]=Math.floor(50*Math.random());const m={},h=c(0,3);for(let e=0;e<h;e++){const e=r[Math.floor(Math.random()*r.length)],t=Math.floor(c(30,200));m[e]=t}const y={},v=c(0===h?1:0,3);for(let e=0;e<v;e++){const e=r[Math.floor(Math.random()*r.length)],t=c(1.01,1.2);y[e]=t}return{name:e,description:t,basecost:s,cost:s,effects:m,boost:y,count:0,ratio:c(1.3,1.6),emoji:l()}}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},924:(e,t,o)=>{const{getCraftedResource:n}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:n(e,null)}},78:(e,t,o)=>{const{hasPrestige:n,getLevelOfPrestige:s}=o(425),{resources:i,isResource:r}=o(587),{skills:a}=o(324);let c=new Set(["gatherSticks"]);t.allVisibleButtons=c,e.exports={getMax:function(e){if(r(e)){let t=i[e].max,o=t;return n("storageSpace")&&"clones"!==e?o=t*(1.05*s("storageSpace")):"clones"===e&&n("maxClones")&&(o=t+s("maxClones")),o}return 1/0},calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return c.has(e)},setVisibleButton:function(e){c.add(e)},clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combatTab",hunting:"hunting"}},150:(e,t,o)=>{const{skills:n}=o(324),{resources:s}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),{triggerFloatUpText:c}=o(727),l=new Audio("./audio/job.wav"),d={};for(let e in n)d[e]=0;const u=document.getElementById("jobsTab");function f(){var e=0;for(let t in d)e+=d[t];return e}Object.keys(n).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const n=document.createElement("span");n.classList.add("job-name"),n.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(n);const s=document.createElement("div");s.classList.add("btn-increment"),s.textContent="+",t.appendChild(s),u.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(l.play(),i("clones",s)>f()){const o=e.pageX,n=e.pageY;if(e.shiftKey){let e=i("clones",s)-f();d[t]+=e,c(o,n,`+${e} workers`,"green")}else if(e.ctrlKey){let e=Math.min(10,i("clones",s)-f());d[t]+=e,c(o,n,`+${e} workers`,"green")}else d[t]++,c(o,n,"+1 worker","green");g(t,d[t]),m(t),h()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job"),o=e.pageX,n=e.pageY;if(l.play(),e.shiftKey){let e=d[t];d[t]=0,e>0&&c(o,n,`-${e} workers`,"red")}else if(e.ctrlKey){let e=Math.min(10,d[t]);d[t]-=e,c(o,n,`-${e} workers`,"red")}else d[t]>0&&(d[t]--,c(o,n,"-1 worker","red"));g(t,d[t]),m(t),h()}))}));let p=new Map;function g(e,t){if(!n[e])return null;let o=n[e].affectedResources;o=o.filter((e=>e in s));let i=o.length,r=Math.floor(t/i);for(let t of o)p.set(t,r),r>0&&b(e,t);let a=t-r*i;for(let t of o)a>0&&(p.set(t,p.get(t)+1),a--,b(e,t))}function b(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const n=document.getElementById(`resource-${t}`);if(!n||"none"===n.style.display)return;const s=o.getBoundingClientRect(),i=n.getBoundingClientRect(),r=document.createElement("div");r.style.position="absolute",r.style.width="10px",r.style.height="10px",r.style.borderRadius="50%",r.style.backgroundColor="white",r.style.opacity=".8",r.style.left=`${s.left+window.scrollX}px`,r.style.top=`${s.top+window.scrollY}px`,document.body.appendChild(r),r.animate([{transform:`translate(${i.left-s.left}px, ${i.top-s.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{r.style.display="none"}}function m(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const n=t.querySelector(".job-name");n&&(n.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${d[e]}`),o(594).updateEmojiDisplay()}function h(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+f()+" / "+a("clones")}let y=new Map,v=document.getElementById("lineCanvas"),k=v.getContext("2d");function x(e,t,o){let n=e.getBoundingClientRect(),s=n.left+n.width/2,i=scrollY+n.top+n.height/2;k.beginPath(),k.moveTo(s,i),k.lineTo(t,o),k.stroke(),function(e,t,o,n,s,i){let r,a,c,l=n,d=s;e.beginPath(),r=Math.atan2(s-o,n-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+d,e.lineTo(a,c),e.closePath(),e.fill()}(k,s,i,t,o,10)}function w(e,t){let o=d[e];d[e]=0,d[t]+=o,m(e),m(t)}v.width=window.innerWidth,v.height=window.innerHeight,e.exports={clearJobAssignments:function(){k.clearRect(0,0,v.width,v.height),y=new Map},reassignJobsBasedOnResources:function(){try{const e=y.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,l=n[e].affectedResources;if(!l)return;for(const e of l)if(void 0!==s[e]&&i(e)<s[e].max){c=!1;break}c&&d[e]>0&&(w(r,a),g(r,d[r]),g(a,d[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:w,drawAllConnections:function(){k.clearRect(0,0,v.width,v.height);try{for(let[e,t]of y.entries()){let o=document.getElementById(e),n=document.getElementById(t),s=n.getBoundingClientRect(),i=s.left+s.width/2,r=0;r=s.bottom>o.getBoundingClientRect().bottom?n.offsetTop-10:n.offsetTop+n.offsetHeight+10,x(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return p.get(e)},updateTotal:h,setConnections:function(e){y=e},getConnections:function(){return y},distributeWorkers:g,updateDisplay:m,jobCounts:d,resetAllJobs:function(){for(let e in n)d[e]=0,g(e,0),h(),m(e)}}},882:(e,t,o)=>{const{hasPerk:n}=o(134),{recalcMaxClones:s}=o(995),{recalculateBuildingCost:i}=o(22),{updateBuildingButtonCount:r}=o(607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},hospital:{basecost:{concrete:10,medicine:20,fish:20},effects:{clones:3},boost:{},count:0,ratio:1.7,tooltipDesc:"Keep yourself safe.",emoji:"+"},barracks:{basecost:{spear:20,violence:1,wood:200},effects:{clones:1,violence:20},boost:{},count:0,ratio:1.5,tooltipDesc:"A hall of raucous soldiers.",emoji:"𓈏"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.2,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30,wood:40},effects:{wood:100},ratio:1.2,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.2,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.4,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,bread:10,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},reservoir:{basecost:{rocks:100,clay:50,water:10},effects:{water:100},boost:{},count:0,ratio:1.3,tooltipDesc:"A hole filled with water. Useful.",emoji:"𓈞"},stone_depot:{basecost:{rocks:200},effects:{rocks:250},boost:{},count:0,ratio:1.2,tooltipDesc:"A big stack of rocks.",emoji:"𓈓"},warehouse:{basecost:{crates:10,concrete:20},effects:{wood:100,rocks:100,clay:100,sand:100},boost:{},count:0,ratio:1.3,tooltipDesc:"Put stuff in a box inside a larger box.",emoji:"𓇦"},military_school:{basecost:{bricks:20,violence:10},effects:{violence:100},boost:{violence:1.05},count:0,ratio:1.4,tooltipDesc:"Learn the art of hurting others.",emoji:"𓇻"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.02},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{fish:50},boost:{},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,gold:1},effects:{},boost:{herbs:1.2,ore:1.1},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"𓇬"},garden:{basecost:{beams:20,herbs:20,freshwater:10},effects:{},boost:{herbs:1.1,sticks:1.05},count:0,ratio:1.3,tooltipDesc:"Nice nature, carefully cultivated.",emoji:"𓆷"},sand_scoop:{basecost:{beams:10,iron:5},effects:{},boost:{sand:1.1},count:0,ratio:1.2,tooltipDesc:"Scoop the sand from the shore? Sure!",emoji:"𓄛"},traps:{basecost:{nails:10,sticks:20,herbs:20},effects:{},boost:{game:1.1},count:0,ratio:1.2,tooltipDesc:"Watch your step!",emoji:"𓄦"},rock_role:{basecost:{slabs:20,freshwater:30},effects:{},boost:{rocks:1.2},count:0,ratio:1.3,tooltipDesc:"In order to gather the rock you must become the rock.",emoji:"𓆇"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,r(e,0),i(e,a,n);s()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"teepee":return!0;default:return!1}}}},54:(e,t,o)=>{const{passedStage:n}=o(751),{getMaterial:s}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>s("sticks",r)>=10||n("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>s("vines",r)>=10||n("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||n("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||n("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||n("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>n("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>n("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>n("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>n("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>n("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>n("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>n("factoryTab"),hide:()=>!1},combatTabButton:{class:"tab-button",text:"Combat",showTab:"combatTab",tab:"tabs",requirement:()=>n("combatTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>n("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:n}=o(924),{getCraftedResource:s}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},bread:{id:"craftBreadButton",value:0,cost:{wheat:13},craftedOnce:!1,requiredStage:"agriculture",tooltipDesc:"I'm gonna grind your wheat to make my bread!",tooltipcost:"",class:"agriculture"},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}},wood:{value:0,cost:{sticks:8}},sticks:{value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id===e||o.id===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null},resetCraftedResources:function(){for(const[e,t]of Object.entries(a))t.value=0,t.craftedOnce=!1}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{let t={ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 3%",cost:{ponder:180}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combatTab:{id:"ponderCombatTab",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},ponder2:{id:"ponderPonder2",requirement:()=>!0,isPondered:!1,text:"Think even harder",tooltipDesc:"5% boost to pondering",cost:{ponder:300}},ponder3:{id:"ponderPonder3",requirement:()=>!0,isPondered:!1,text:"Think hardest",tooltipDesc:"5% boost to pondering",cost:{ponder:600}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double diameter Teepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}}};e.exports={ponders:t,resetPonders:function(){for(const[e,o]of Object.entries(t))o.isPondered=!1}}},425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},cheaperBuildings:{text:"Rickety",tooltipDesc:"Building Cost (-5%)",cost:2,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",max:1e3},violence:{value:0,id:"gatherViolence",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"",max:100}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:["violence"]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:n,resetCraftedResources:s}=o(371),{buildings:i,resetBuildings:r}=o(882),{ponders:a,resetPonders:c}=o(397),{buttons:l}=o(54),{resources:d,resetResources:u}=o(587),{saveGame:f,loadGame:p}=o(502),{generateTooltipCost:g,appendCraftedResourceButtons:b,increaseMaterial:m,craftAllResources:h,craftResource:y,calcIncrease:v,updateResourceIncreaseRates:k,increaseMax:x}=o(594),{buyMaxBuildings:w,buyBuilding:C,createBuildingButton:B}=o(151),{hasPerk:T,selectAbility:S,resetPerks:M}=o(134),{clearSidebar:E}=o(78),{makeVisible:A}=o(123),{updateButtonVisibility:j}=o(667),{getCraftedResource:q}=o(590),{getMaterial:$}=o(924),{buyFactory:D,attemptManufacture:L,upgradeBulk:P}=o(51),{isPondered:R,generatePonderButtons:O}=o(369),{hasTool:I,addTool:F}=o(609),{getAteFish:V,setAteFish:H}=o(621),{updateTotal:G,clearJobAssignments:W,resetAllJobs:N}=o(150),{capitalizeFirst:_}=o(681),{passedStage:z,resetStages:J}=o(751),{recalcMaxClones:Y}=o(995),{initializeResourceTags:U,updateSidebar:K,updateDisplayValue:X}=o(453),{prestige:Q}=o(425),{recalculateBuildingCost:Z}=o(22),{triggerFloatUpText:ee}=o(727),{updateBounceAnimation:te}=o(994),{updateTooltip:oe,hideTooltip:ne}=o(208),{canCraft:se}=o(64),{calculateWinChance:ie,combat:re,switchStance:ae}=o(856),{showTab:ce,getCurrentTab:le}=o(93),{getSfxVolume:de,getMusicVolume:ue,setMusicVolume:fe,setSfxVolume:pe}=o(98),{generateRandomBuilding:ge}=o(900),be=document.querySelector("#resources");const me=document.querySelector("#emojiGatherDisplay");function he(e){const t=new Audio("./audio/gather.wav");t.volume=de(),t.play();const o=d[e],n=document.querySelector("#resources").querySelector("#resource-"+e),s=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));me.textContent="𓀟",o.isGetting?(o.isGetting=!1,s.classList.remove("gathering"),s.textContent=o.defaultText,n&&(n.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(d)){t.isGetting=!1;const o=document.querySelector("#gather"+_(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const n=be.querySelector("#resource-"+e);n&&(n.style.fontWeight="normal")}}(),o.isGetting=!0,s.textContent=o.activeText,n&&(n.style.fontWeight="bold"),me.textContent=o.emoji,console.log(o.emoji),s.classList.add("gathering"))}const ye={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},ve=[{condition:()=>$("sticks",d)>=1,action:()=>A("stick")},{condition:()=>$("sticks",d)>=10,action:()=>A("vines")},{condition:()=>$("vines",d)>=10,action:()=>A("rocks")},{condition:()=>$("rocks",d)>=1,action:()=>{A("tab-button"),A("craftRocks")}},{condition:()=>q("spear",n)>0,action:()=>A("spear")},{condition:()=>$("fish",d)>=1,action:()=>A("fishing")},{condition:()=>I("Axe"),action:()=>A("wood")},{condition:()=>q("rope")>=1,action:()=>A("rope")},{condition:()=>$("fish",d)>=5&&!V(),action:()=>A("eatFish")},{condition:()=>V(),action:()=>{A("clone"),A("ponder-tab")}},{condition:()=>R("ponderFinish"),action:()=>("stage2.html",document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>R("biggerShelter"),action:()=>Y()},{condition:()=>R("biggerHut"),action:()=>Y()},{condition:()=>R("biggerHouse"),action:()=>Y()},{condition:()=>R("biggerTeepee"),action:()=>Y()},{condition:()=>R("evenBiggerShelter"),action:()=>Y()},{condition:()=>$("clones")>=40,action:()=>A("prestige")},{condition:()=>$("clay")>0,action:()=>A("clay")},{condition:()=>!document.getElementById("toggle-basics")&&R("organization"),action:()=>U(!0)},{condition:()=>z("combatTab"),action:()=>ie()}],ke=["./audio/song1.wav","./audio/song2.wav","./audio/song3.wav","./audio/song4.wav","./audio/song5.wav","./audio/song6.wav","./audio/song7.wav","./audio/song8.wav","./audio/song9.wav","./audio/song10.wav"];let xe=null,we=null;function Ce(){xe&&(xe.pause(),xe.currentTime=0);const e=Math.floor(Math.random()*ke.length);xe=new Audio(ke[e]),xe.volume=ue(),xe.play(),function(){we&&clearTimeout(we);const e=3e4*Math.random()+5e3;xe.onended=()=>{we=setTimeout(Ce,e)}}()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":ce("productionTab");break;case"2":z("tab-button")&&ce("experimentTab");break;case"3":z("ponder-tab")&&ce("ponderTab");break;case"4":z("jobs-tab")&&ce("jobsTab");break;case"5":z("skillsTable")&&ce("skillsTab");break;case"6":z("perksTab")&&ce("perksTab");break;case"7":z("factoryTab")&&ce("factoryTab");break;case"8":z("combatTab")&&ce("combatTab");break;case"a":"combatTab"===le()&&ae("aggressive");break;case"b":"combatTab"===le()&&ae("balanced");break;case"c":"combatTab"===le()&&ae("careful");break;case"f":"combatTab"!==le()||document.getElementById("startCombat").disabled?he("fish"):re();break;case"s":he("sticks");break;case"r":z("rocks")&&he("rocks");break;case"v":z("vines")&&he("vines");break;case"w":z("wood")&&he("wood");break;case"o":z("ore")&&he("ore");break;case"p":z("ponder-tab")&&he("ponder")}}));const Be=document.body;Be.classList.toggle("dark-mode");let Te=!0;function Se(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block",o.style.opacity="1"}),5e3)}const Me=document.getElementById("message");function Ee(e,t){const o=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="You feel peckish for some seafood">${t}</span>`);Me.innerHTML=o}let Ae=50,je=null,qe=0,$e=0;function De(e){null===je&&(je=e);const t=e-je;qe+=t,$e+=t,je=e;let o=Ae;for($e>=10*Ae&&(Ae=$e/10);$e>=Ae;)$e-=Ae,Re(Ae);Ae=o,requestAnimationFrame(De)}let Le=0,Pe=0;function Re(e,t){for(const[t,o]of Object.entries(d))m(t,v(t,e));k(),function(){for(let e=ve.length-1;e>=0;e--){const t=ve[e];t.condition()&&(t.action(),ve.splice(e,1))}for(let e in ye)!I(e)&&q(e)>0&&(F(e),A(ye[e]));try{j(),null!==Fe&&oe(Fe)}catch(e){console.warn(e)}}(),Le+=e,Pe+=e,Le>=1e4&&(f(),Le=0),z("factoryTab")&&Pe>=1e3&&(L(),Pe=0)}window.onbeforeunload=function(){Oe||f()};let Oe=!1;function Ie(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button"),n=document.getElementById("overlay-back-button");o.addEventListener("click",(()=>{const t=$("clones");u(),s(),c(),M(),r(),N(),J();for(let[e,t]of Object.entries(d))t.max=100;m("husks",t),e.style.display="none";for(let e=0;e<5;e++){const e=ge();i[e.name.split(" ").join("_")]=e}U(!1)})),n.addEventListener("click",(()=>{e.style.display="none"}));const a=document.getElementById("husksIsekaiValue");let l;l=a||document.createElement("p"),l.id="husksIsekaiValue",l.innerHTML=`Husks:  ${$("husks")} <br> You will get ${$("clones")} Husks post-isekai.<br>You will receive 5 randomly generated new buildings, unique to this new world.`,l.style.opacity="0",e.prepend(l),e.style.backgroundColor="MidnightBlue",t.textContent="You step through to another world.",Se(),setTimeout((()=>{n.style.opacity="1"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(Q).forEach((o=>{const n=document.createElement("button");n.innerHTML=`<b>${Q[o].text}</b><br>Level: ${Q[o].level}<br>Cost: ${Q[o].cost}`,n.setAttribute("tooltipCost",Q[o].cost),n.setAttribute("tooltipDesc",Q[o].tooltipDesc),n.classList.add("tooltip"),n.style.gridColumn=(t%4+1).toString(),n.style.gridRow=Math.floor(t/4+1).toString(),++t,n.addEventListener("click",(()=>{console.log(`Button ${o} was clicked`),$("husks")<Q[o].cost||(Q[o].level++,m("husks",-Q[o].cost),Q[o].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(Q[o].cost),n.setAttribute("tooltipCost",Q[o].cost),n.innerHTML=`<b>${Q[o].text}</b><br>Level: ${Q[o].level}<br>Cost: ${Q[o].cost}`,l.textContent="Husks: "+$("husks"),oe(n))})),n.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${o} was right clicked`),Q[o].level<=0||(Q[o].level--,Q[o].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(Q[o].cost),n.setAttribute("tooltipCost",Q[o].cost),m("husks",Q[o].cost),n.innerHTML=`<b>${Q[o].text}</b><br>Level: ${Q[o].level}<br>Cost: ${Q[o].cost}`,l.textContent="Husks: "+$("husks"),oe(n))})),e.appendChild(n),n.addEventListener("mouseenter",(function(e){oe(n),Fe=n})),n.addEventListener("mouseleave",(function(){ne(),Fe=null}))}))}),5e3),setTimeout((()=>{l.style.opacity="1"}),5e3)}document.addEventListener("DOMContentLoaded",(e=>{O(a),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),D()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("tooltipCost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),P()}))}(),U(),p(),function(){console.log("Generating buttons"),console.trace();for(let e in i){const t=B(e,i);l[e]=t}const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),n=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",n.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",n.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),n.classList.add("visible"),e.prepend(n),e.prepend(o),e.prepend(t),[t,o,n]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),s=document.getElementById("experimentTab").querySelector(".button-columns"),r=document.getElementById("ponderTab"),a=e(s),c=e(r);let d=1,u=0,f=0;for(let e in l){const s=l[e],r=document.createElement("button");r.id=e,r.className=s.class,r.textContent=s.text.split("_").join(" "),s.tooltipDesc&&r.setAttribute("data-tooltip-desc",s.tooltipDesc),s.tooltipEffect&&r.setAttribute("data-tooltip-effect",s.tooltipEffect),r.setAttribute("unlock",s.unlock),r.setAttribute("data_building",s.data_building);const p=Object.values(n).find((t=>t.id===e));p&&(s.tooltipCost=g(p.cost)),r.setAttribute("data-tooltip-cost",s.tooltipCost),s.showTab&&r.addEventListener("click",(()=>{ce(s.showTab),console.log("Switching to tab: "+s.showTab)})),"production"===s.tab?(r.style.gridColumn=d.toString(),d=(d+1)%3,o.appendChild(r)):"experiment"===s.tab?(a[u].appendChild(r),u=(u+1)%3):"tabs"===s.tab?t.appendChild(r):"ponder"===s.tab?(c[f].appendChild(r),f=(f+1)%3):"job"===s.tab||document.getElementById(s.tab).appendChild(s),Object.keys(i).find((t=>t===e))&&Z(e,i,T);try{s.requirement()||(r.style.display="none")}catch(e){}}}(),E(),U(R("organization")),b(),K(),ce("productionTab"),o(864).generateTradeTable(d);for(let e=0;e<30;++e)console.log(ge());document.addEventListener("click",(e=>{if(null===xe&&Ce(),e.target.matches("button")){const s=e.target;if(s.getAttribute("data_building")&&"undefined"!==s.getAttribute("data_building")&&s.classList.contains("purchasable")){var t=s.getAttribute("data_building");const o=e.pageX,n=e.pageY;let i=new Audio("./audio/building.wav");i.volume=de(),i.play();const r=_(t).split("_").join(" ");if(e.shiftKey){let e=w(t);ee(o,n,`+${e} ${r}s`,"aqua")}else C(t),ee(o,n,`+1 ${r}`,"aqua")}else if(s.classList.contains("unlock")){const e=s.getAttribute("unlock");if(console.log(e),a[e]){var o=!0;for(let t in a[e].cost)if($(t,d)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)m(t,-a[e].cost[t]);a[e].isPondered=!0,A(e),s.display="none";let t=new Audio("./audio/ponder.wav");t.volume=de(),t.play(),"organization"===e&&location.reload()}}}else if("undefined"!==s.id)if("gather"===s.id.slice(0,6))he(function(e){for(const[t,o]of Object.entries(d))if(o.id===e)return t;return"error "+e}(s.id));else if("craft"===s.id.slice(0,5)){let t=new Audio("./audio/craft.wav");t.volume=de(),t.play();let o=function(e){for(const[t,o]of Object.entries(n))if(console.log(t,o,e),o.id===e)return t;return"error "+e}(s.id);console.log("clicked cr: ",o),se(o)&&ee(e.pageX,e.pageY,`+${o}`,"aqua"),e.shiftKey?h(o):y(o)}else"saveButton"===s.id?f():"eatFish"===s.id?!V()&&$("fish",d)>=1&&(m("fish",-1),Se(),H(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{Ee("You are with yourself in a forest.","with yourself"),x("clones",1),m("clones",1)}),1e3)):"overlay-button"===s.id?(document.getElementById("overlay-text").style.opacity="0",document.getElementById("overlay-button").style.opacity="0",document.getElementById("overlay").style.display="none",document.getElementById("isekaiButtons").innerHTML="",location.reload()):"deleteSaveButton"===s.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?Ve():"clearJobAssignments"===s.id?W():"darkModeToggle"===s.id?(Be.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),Te=!Te,darkModeToggle.textContent=Te?"Light Mode":"Dark Mode"):"prestige"===s.id?Ie():"startCombat"===s.id&&re();if(s.classList.contains("tierOneButton")){let e=s.textContent;S(e)}}if(e.target.matches("#alone")){let t="+1 Clone";d.clones.value<d.clones.max?d.clones.value+=1:t="Max Clones";const o=new Audio("+1 Clone"===t?"./audio/clone.wav":"./audio/failclone.wav");o.volume=de(),o.play();const n=e.pageX,s=e.pageY;ee(n,s,t,"+1 Clone"===t?"green":"red"),G(),X("clones")}})),document.getElementById("optionsButton").addEventListener("click",(function(){const e=document.getElementById("optionsMenu");e.style.display="none"===e.style.display?"block":"none"})),document.getElementById("musicVolume").addEventListener("input",(function(){fe(this.value),xe.volume=ue()})),document.getElementById("sfxVolume").addEventListener("input",(function(){pe(this.value)})),requestAnimationFrame(De),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){oe(e),Fe=e})),e.addEventListener("onclick",(function(){oe(e)})),e.addEventListener("mouseleave",(function(){ne(),Fe=null}))})),G(),te()}));var Fe=null;function Ve(){localStorage.removeItem("save"),Oe=!0,location.reload()}e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${d[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){qe=e},changeMessage:Ee,getMessage:function(){return Me},total_time:qe,currentHoverButton:Fe,deleteGame:Ve,isekai:Ie},window.deleteGame=Ve,window.isekai=Ie},123:(e,t,o)=>{const{setStage:n,passedStage:s}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){s(e)||n(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),i()}},134:(e,t,o)=>{const{buildings:n}=o(882),{perks:s}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e){const e=o(882).buildings;for(let t of Object.keys(e))o(22).recalculateBuildingCost(t,e,r)}}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in s["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i},resetPerks:function(){i=[]}}},369:(e,t,o)=>{const{capitalizeFirst:n}=o(681),{ponders:s}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!s[e]&&s[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in s)s[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in s[t].cost)if(i(e,r)<s[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${n(t)}`;let r=o(594).generateTooltipCost(i.cost);a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:r,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=s[t].cost.ponder/2,hide:()=>c(t)}}}}},995:(e,t,o)=>{const{hasPrestige:n,getLevelOfPrestige:s}=o(425),{isPondered:i}=o(369),{setMax:r}=o(594),{passedStage:a}=o(751),{updateBounceAnimation:c}=o(994);t.recalcMaxClones=function(){let e=0;a("clone")&&(e+=1);const t=o(882).buildings;for(const[o,n]of Object.entries(t))n.effects&&n.effects.clones&&(e+=n.effects.clones*n.count);i("biggerShelter")&&(e+=1*t.shelter.count),i("biggerHut")&&(e+=1*t.hut.count),i("biggerHouse")&&(e+=2*t.house.count),i("biggerTeepee")&&(e+=4*t.teepee.count),i("evenBiggerShelter")&&(e+=1*t.shelter.count),n("maxClones")&&(e+=1*s("maxClones")),r("clones",e),c()}},22:(e,t,o)=>{const{hasPrestige:n,getLevelOfPrestige:s}=o(425);t.recalculateBuildingCost=function(e,t,i){let r=t[e];if(r&&r.cost&&r.ratio)for(let e in r.cost)r.cost[e]=Math.round(r.basecost[e]*Math.pow(r.ratio,r.count)),i("Architect")&&(r.cost[e]*=.75),n("cheaperBuildings")&&(r.cost[e]*=Math.pow(.95,s("cheaperBuildings")));const a=document.querySelector("#"+e);var c=o(594).generateTooltipCost(r.cost);if(!a)throw"Button not found for "+e;{a.setAttribute("data-tooltip-cost",c);const e=o(151).generateEffectString(r);a.setAttribute("data-tooltip-effect",e)}}},594:(e,t,o)=>{const{resources:n}=o(587),{craftedResources:s}=o(371),{ponders:i}=o(397),{buttons:r}=o(54),{skills:a}=o(324),{getWorkers:c,updateTotal:l}=o(150),{hasTool:d}=o(609),{calcCraftBonus:u,getMax:f}=o(78),{canCraft:p}=o(64),{capitalizeFirst:g}=o(681),{getMaterial:b}=o(924),{isPondered:m}=o(369),{getCraftedResource:h}=o(590),{calcIncrease:y}=o(121),{updateSidebar:v,abbreviateNumber:k}=o(453),{passedStage:x,getAllStages:w}=o(751),{updateDisplayValue:C}=o(453),{updateSkills:B}=o(491),T=document.getElementById("resources");function S(e,t){n[e].max+=t,v(),l()}function M(e,t){0!=t&&((e=e.toLowerCase())in n?(b(e)<f(e)&&t>0?(m("fasterResourceGain")&&(t*=1.05),n[e].value+=t,B(e,t),"violence"===e&&o(856).refreshValues()):t<0?n[e].value+=t:(n[e].value=f(e),m("autocraft")&&document.querySelector("#autoCraftCheckbox").checked&&D[e]&&L(D[e])),C(e)):e in s?(console.log("crafting a material",e,t),s[e].value+=t,C(e),B(e,t)):(n[e]&&(n[e].value+=t),s[e]&&(s[e].value+=t),v()))}function E(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(s).find((t=>s[t]===e));return t.innerHTML=`${e.text||g(o)}`,t.tab="experiment",t}t.resourcesContainer=T,window.increaseMaterial=M,window.increaseMax=S;const A=document.querySelector("#craftedResourceButtons");function j(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${b(o,n)>=e[o]?"enough":"not-enough"}">${k(e[o])} ${o}</span><br>`;return t}const q=document.getElementById("emojiDisplay");function $(){let e="";for(let t in n){let o=c(t);if(void 0===o||0==o)continue;let s=n[t].emoji||"𓀟";s&&(e+=s.repeat(o))}q.textContent=e,function(){let e=48;for(q.style.fontSize=`${e}px`;q.offsetWidth>600&&e>30;)e-=1,q.style.fontSize=`${e}px`}()}$();const D={sticks:"handle",wood:"paper",rocks:"sharprocks",vines:"rope",sand:"glass",ore:"gold",clay:"bricks"};function L(e){try{const t=s[e].cost;let o=[];for(let e in t)o.push(b(e,n)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),P(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}}function P(e,t){if(!s.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!p(e))return;let o=s[e].cost;for(let n=0;n<Math.floor(t);++n)console.log("crafting",t,e,o),R(e,o,u(e));s[e].craftedOnce||(s[e].craftedOnce=!0),C(e)}function R(e,t,o){for(const[e,o]of Object.entries(t))M(e,-o);M(e,o)}e.exports={increaseMaterial:M,setMax:function(e,t){n[e].max=t,v(),l()},increaseMax:S,craftAllResources:L,craftResource:function(e){if(!s.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;p(e)&&(R(e,s[e].cost,u(e)),s[e].craftedOnce||(s[e].craftedOnce=!0),C(e))},updateEmojiDisplay:$,generateTooltipCost:j,calcSecondsRemaining:function(e,t){if(t<=n[e])return 0;const o=y(e,1e3);return 0==o?-1:Math.ceil(t-n[e].value)/o},appendCraftedResourceButtons:function(){for(let e in s){const t=E(s[e]);t.setAttribute("data-tooltip-desc",s[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",j(s[e].cost)||""),A.appendChild(t),x(t.getAttribute("requirement"))?t.classList.remove("hidden"):t.classList.add("hidden"),r[s[e].id]=s[e]}},calcIncrease:y,updateResourceIncreaseRates:function(){for(let t in n){const o=y(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:P}},502:(e,t,o)=>{const{calcIncrease:n,updateEmojiDisplay:s}=o(594),{addTool:i,getAllTools:r}=o(609),{allVisibleButtons:a,setVisibleButton:c,getMax:l}=o(78),{makeVisible:d}=o(123),{getCraftedResource:u}=o(590),{getMaterial:f}=o(924),{getAllPerks:p,addPerk:g,hasPerk:b,selectAbility:m}=o(134),{isPondered:h}=o(369),{jobCounts:y,setConnections:v,getConnections:k,distributeWorkers:x,updateDisplay:w}=o(150),{total_time:C}=o(808),{setAteFish:B,getAteFish:T}=o(621),{craftedResources:S}=o(371),{buildings:M}=o(882),{ponders:E}=o(397),{resources:A}=o(587),{skills:j}=o(324),{getAllStages:q}=o(751),{activeFactoriesProducing:$,loadFactory:D}=o(51),{recalcMaxClones:L}=o(995),{updateSidebar:P}=o(453),{prestige:R}=o(425),{recalculateBuildingCost:O}=o(22),{updateBuildingButtonCount:I}=o(607),{updateBuildingList:F}=o(151),{populateSkillsTable:V}=o(491);e.exports={saveGame:function(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{},newBuildings:{}};for(let t in j)e.skills[t]={exp:j[t].exp,level:j[t].level};for(let t in S)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=u(t),e.craftedResources[t].craftedOnce=S[t].craftedOnce;for(let t in A)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=f(t,A),e.resources[t].max=A[t].max;e.tools=r(),e.stages=q(),e.jobs=y,e.perks=p(),e.connections=Array.from(k().entries());for(let t in E)e.unlocks[t]=h(t);for(let t in M)e.buildings[t]=M[t].count,M[t].hasOwnProperty("name")&&(e.newBuildings[t]=M[t]);for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries($))e.factories[t]=o;const t=o(808).getMessage().innerHTML;e.message=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t);for(const[t,o]of Object.entries(R))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=C,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e},loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&(A[t].value=e.resources[t].value,A[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=A[t].value&&o(453).updateDisplayValue(t));if(void 0!==e.skills)for(let t in e.skills)j[t].exp=e.skills[t].exp,j[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))S[t]&&(S[t].value=e.craftedResources[t].value,Number.isNaN(S[t].value)&&(S[t].value=0),S[t].craftedOnce=e.craftedResources[t].craftedOnce,o(453).updateDisplayValue(t));if(void 0!==e.tools){let t=[...new Set([...r(),...e.tools])];for(let e in t)i(e)}if(void 0!==e.stages)for(let t in e.stages)d(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)y[t]=e.jobs[t],w(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{E[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(h("skillsTable")&&V(),void 0!==e.perks)for(let[t,n]of Object.entries(e.perks))g(n),o(495).selectCorrectPerkButton(n);if(void 0!==e.prestige)for(const[t,o]of Object.entries(e.prestige))R[t].cost=o.cost,R[t].level=o.level;if(void 0!==e.newBuildings)for(let t in e.newBuildings)M[t]=e.newBuildings[t];if(void 0!==e.buildings){for(let t in e.buildings)try{M[t].count=e.buildings[t],M[t].count>0&&(I(t,M[t].count,M[t].emoji),O(t,M,b))}catch(e){console.warn("error with building",t,e)}P()}if(L(),F(),B(A.clones.max>=1),T()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(808).changeMessage(e.message[0],e.message[1]),void 0!==e.time){o(808).setTotalTime(e.time[C]);const t=Date.now()-e.time.time_of_save;for(let e in A){const o=n(e,t);A[e].value+=o,A[e].value>A[e].max&&(A[e].value=A[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)c(t)}void 0!==e.connections&&(v(new Map(e.connections)),0===k().size&&v(new Map),console.log(k()));for(let e in y)x(e,y[e]);if(s(),void 0!==e.factories)for(const[t,o]of Object.entries(e.factories))if(o>0)for(let e=0;e<o;++e)D(t)}}}},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},93:(e,t,o)=>{const{drawAllConnections:n}=o(150),{updateSidebar:s}=o(453),{refreshValues:i,getInCombat:r,combat:a,pauseAnimation:c,battleResult:l,simulateBattle:d}=o(856),{getSfxVolume:u}=o(98);function f(){let e="";for(let t of p)t.classList.contains("active")&&(e=t.id);return e}t.getCurrentTab=f;let p=document.querySelectorAll(".tab-content > .content");t.showTab=function(e){console.log("show tab: "+e);let t=f();if(e===t)return;let o=new Audio("./audio/tab.wav");o.volume=u(),o.play();let r=document.getElementById(t);r.classList.remove("active"),r.style.opacity="0";let a=document.querySelectorAll(".tab-button");for(let e of a)e.classList.remove("active");let c=document.getElementById(e);setTimeout((()=>{c.classList.add("active")}),100),setTimeout((()=>{c.style.opacity="1"}),200);const p=`#${e}Button`;let g=document.querySelector(p);g&&g.classList.add("active"),"jobsTab"===e&&n(),"combatTab"===e&&(i(),null===l&&d()),console.log(t,">",e),s()}},453:(e,t,o)=>{const{calcIncrease:n}=o(121),{capitalizeFirst:s}=o(681),{getMaterial:i}=o(924),{getMax:r}=o(78),{resources:a}=o(587),{isPondered:c}=o(369);function l(e){var t=!0;return i(e)>0&&(t=!1,a[e]&&(a[e].isVisible=!0)),a[e]&&a[e].isVisible&&(t=!1),t}function d(e){if("number"!=typeof e)return e;function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const u=document.getElementById("resources");function f(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),u.appendChild(o))):o=document.getElementById("resources");const n=s(e).split("_").join(" "),a=document.createElement("p");a.className="resource",a.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${n}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let d=r(e)&&r(e)<1/0?r(e).toFixed(2):"∞";l.textContent=`${i(e).toFixed(2)} / ${d}`;const f=document.createElement("span");function p(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}return f.className="resourceRate",f.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,a.appendChild(c),a.appendChild(l),a.appendChild(f),o.appendChild(a),p("resource-clones",1),p("resource-sticks",2),p("resource-vines",3),p("resource-rocks",4),p("resource-fish",5),p("resource-freshwater",6),p("resource-wood",7),p("resource-ore",8),p("resource-sand",9),p("resource-clay",10),p("resource-wheat",11),p("resource-hides",12),p("resource-game",13),p("resource-herbs",14),p("resource-berries",15),p("resource-ponder",50),a}function p(e){const t=u.querySelector(`#${e}Value`),o=u.querySelector(`#${e}IncreaseRate`);if(t){try{t.textContent=`${d(i(e))} / ${d(r(e))}`,o&&(o.textContent=n(e,1e3).toFixed(1)),l(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(a[e]&&a[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}}e.exports={updateSidebar:function(){const e=o(51).allMaterials;Array.from(e).forEach((e=>{a[e]&&p(e)}));for(const[o,n]of Object.entries(e)){if(a[n])continue;const e=document.getElementById("resource-"+n);if(!e)return void console.warn("no parent element found for",n);l(n)?e.style.display="none":e.style.display="";const o=document.getElementById(n+"Value");if(o){var t="#fff";const e=i(n),s=r(n);e===s?t="#fcc":e/s>.6&&(t="#eeb"),o.innerHTML=`<span style="color:${t}">${d(e)} / ${d(s)} </span>`}}},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder","violence"],food:["berries","fish","game","wheat","bread","freshwater"],materials:["sticks","vines","rocks","wood","sand","clay","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,n]of Object.entries(t))n.forEach((t=>{let n=document.getElementById("resource-"+t);e||(o=null),n||(n=f(t,o)),l(t)?n.style.display="none":n.style.display=""}))},updateDisplayValue:p,abbreviateNumber:d}},491:(e,t,o)=>{const{skills:n}=o(324),{triggerFloatUpText:s}=o(727),i=function(e){let t={};for(const[o,n]of Object.entries(e))for(const e of n.affectedResources)t[e]||(t[e]=[]),t[e].push(o);return t}(n);console.log(i);let r=!1;function a(){const e=document.getElementById("skillsTable");if(r)for(let e in n){(n[e].exp>0||n[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=n[e].exp+"%",document.querySelector("#level-"+e).textContent="[level "+n[e].level+"]   "+e)}else{console.log("Generating table for the first time"),r=!0;for(let t in n){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent="[level "+n[t].level+"]   "+t,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==n[t].exp&&0==n[t].level&&(o.style.display="none"),s.appendChild(i),s.appendChild(r),o.appendChild(s),e.appendChild(o)}}}e.exports={updateSkills:function(e,t){if(t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05),!i[e])return;const r=i[e][0].toString();if(n[r].level>=100)return n[r].level=100,void(n[r].exp=0);if(n[r].exp+=t/Math.pow(1.4,n[r].level),n[r].exp>=100){n[r].level+=1,n[r].exp=0;let e=`Level up! ${r} → ${n[r].level}`;const t=document.getElementById("prestige").getBoundingClientRect();s(t.x,t.y,e,"#F4D03F")}o(751).passedStage("skillsTable")&&a()},populateSkillsTable:a}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},864:(e,t,o)=>{const{getMaterial:n}=o(924),s=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){n("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),i.textContent=n("gold",o(587).resources))}function a(e,t){n(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),i.textContent=n("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,s.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,n){const s=document.createElement("div");s.textContent=o,s.style.left=`${e}px`,s.style.top=t-30+"px",s.style.color=n,s.classList.add("float-up-fade-out"),document.body.appendChild(s),s.addEventListener("animationend",(()=>{s.remove()}))}},994:(e,t,o)=>{const{getMaterial:n}=o(924),{getMax:s}=o(78);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");n("clones")<s("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},607:(e,t,o)=>{const{capitalizeFirst:n}=o(681);t.updateBuildingButtonCount=function(e,t,o){document.getElementById(`${e}`).textContent=`${o} ${n(e).split("_").join(" ")} (${t})`}},831:(e,t,o)=>{const{buildings:n}=o(882),{updateTooltip:s,hideTooltip:i}=o(208),{fitCharToCell:r}=o(531),a=document.getElementById("buildingList");t.updateBuildingList=function(){const e=document.createDocumentFragment();let t=0;for(const[o,s]of Object.entries(n))for(let n=0;n<s.count;++n,++t){let n=(t%6+1).toString(),i=Math.floor(t/6+1).toString();const r=document.createElement("span");r.className="tooltip",r.style.gridColumn=n,r.style.gridRow=i,r.style.fontSize="36px",r.setAttribute("tooltipDesc",o),r.textContent=s.emoji||"?",e.appendChild(r)}a.innerHTML="",a.appendChild(e),a.addEventListener("mouseenter",(e=>{e.target.classList.contains("tooltip")&&s(e.target)}),!0),a.addEventListener("mouseleave",(e=>{e.target.classList.contains("tooltip")&&i()}),!0)}},667:(e,t,o)=>{const{buttons:n}=o(54),{getCraftedResourceConfigById:s}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,setVisibleButton:d}=o(78),{canCraft:u}=o(64),{canBuyBuilding:f}=o(23),{passedStage:p}=o(751);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=n[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var g=s(t.id);g.value>0&&(o="button-disabled");const e=c(g);u(e)&&(o=!t.requiredStage||t.requiredStage&&p(t.requiredStage)?"purchasable":"hidden")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(d(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var n;const s=o(842).O[t];"hidden"==(n=null==s||r(s)?"purchasable":"not-unlockable"===s?"hidden":"button-disabled")?e.style.display="none":(d(e.id),e.classList.add(n),e.style.display="")}))}},208:(e,t,o)=>{const{getCraftedResourceConfigById:n}=o(371),{buildings:s}=o(882),{ponders:i}=o(397),{resources:r,getResourceConfigById:a}=o(587),{calcSecondsRemaining:c}=o(594),{getMax:l}=o(78),{getMaterial:d}=o(924),u=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){u.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||n(e.id)||s[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],p=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||f&&f.cost;!function(e,t,o,n){let s="";function i(e){let t=parseFloat(e);return e.includes("K")?t*=1e3:e.includes("M")?t*=1e6:e.includes("B")&&(t*=1e9),t}t&&(s+=`<span >${t}</span><hr>`),o&&(s+=`<span style="color:#4cf">${o}</span><hr>`);try{if(n.toString().includes("span"))s+=function(e,t){const o=/class="tooltip-(\w+) .+?">([\d.]+[KM]?)\s(\w+)</g;let n,s="";for(;null!==(n=o.exec(e));){const e=n[1],o=n[2],a=i(o);var r=d(e,t)>=a?"enough":"not-enough";l(e)<a&&(r="exceeds-max"),s+=`<span class="tooltip-${e} ${r}">${o} ${e}</span>`;let u=0;t[e]&&(u=c(e,a)),u>0&&"exceeds-max"!=r&&(s+=`<span class="time-remaining">(${u.toFixed(0)} seconds)</span>`),s+="<br>"}return s}(n,r);else{var a="";for(const[e,t]of Object.entries(n)){var f=d(e,r)>=t?"enough":"not-enough";l(e)<t&&(f="exceeds-max"),a+=`<span class="tooltip-${e} ${f}">${t.toFixed(0)} ${e}</span>`;let o=0;r[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=f&&(a+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),a+="<br>"}s+=a}}catch(e){void 0!==n&&"undefined"!==n&&(s+=n)}u.innerHTML=s,u.style.left=e.getBoundingClientRect().right+5+"px",u.style.top=e.getBoundingClientRect().top-u.offsetHeight/2+"px",u.style.display="block"}(e,t,o,p)}}},t={};!function o(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJ4WSxJQUFqQnlZLEVBQ0gsT0FBT0EsRUFBYW4wQixRQUdyQixJQUFJRCxFQUFTaTBCLEVBQXlCRSxHQUFZLENBR2pEbDBCLFFBQVMsQ0FBQyxHQU9YLE9BSEFvMEIsRUFBb0JGLEdBQVVuMEIsRUFBUUEsRUFBT0MsUUFBU2kwQixHQUcvQ2wwQixFQUFPQyxPQUNmLENDbkIwQmkwQixDQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvYXRlRmlzaC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9hdWRpby5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9idWlsZGluZ3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvY2FsY0luY3JlYXNlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NhbkJ1eUJ1aWxkaW5nLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NhbkNyYWZ0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2NhcGl0YWxpemVGaXJzdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9jb21iYXQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9maXRDaGFyVG9DZWxsLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2dlbmVyYXRlUmFuZG9tQnVpbGRpbmcuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvZ2V0Q3JhZnRlZFJlc291cmNlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2dldE1hdGVyaWFsLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2hlbHBlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qb2JSZXF1aXJlZFBvbmRlcnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvam9icy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2J1aWxkaW5ncy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL2J1dHRvbnMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9jcmFmdGVkUmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL2pzb24vcGVya3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wb25kZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvanNvbi9wcmVzdGlnZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3Jlc291cmNlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9qc29uL3NraWxscy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9tYWluLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL21ha2VWaXNpYmxlLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BlcmtzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3BvbmRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9yZWNhbGNNYXhDbG9uZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvcmVzb3VyY2VzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NhdmluZy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy9zaG93VGFiLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvc2tpbGxzLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3N0YWdlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90b29scy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90cmFkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlLy4vc2NyaXB0cy90cmlnZ2VyRmxvYXRVcFRleHQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlQm91bmNlQW5pbWF0aW9uLmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlQnVpbGRpbmdMaXN0LmpzIiwid2VicGFjazovL2Nsb25lLWlkbGUvLi9zY3JpcHRzL3VwZGF0ZUJ1dHRvblZpc2liaWxpdHkuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtaWRsZS8uL3NjcmlwdHMvdXBkYXRlVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1pZGxlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Nsb25lLWlkbGUvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhdGVGaXNoID0gZmFsc2U7XHJcblxyXG5mdW5jdGlvbiBzZXRBdGVGaXNoKGJvb2wpIHtcclxuICAgIGF0ZUZpc2ggPSBib29sO1xyXG4gICAgcmV0dXJuIGF0ZUZpc2g7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QXRlRmlzaCgpIHtcclxuICAgIHJldHVybiBhdGVGaXNoO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGF0ZUZpc2gsXHJcbiAgICBzZXRBdGVGaXNoLFxyXG4gICAgZ2V0QXRlRmlzaFxyXG59OyIsImxldCBtdXNpY1ZvbHVtZSA9IDAuNTtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRNdXNpY1ZvbHVtZSh2b2wpIHtcclxuICAgIG11c2ljVm9sdW1lID0gdm9sO1xyXG59XHJcbmZ1bmN0aW9uIGdldE11c2ljVm9sdW1lKCkge1xyXG4gICAgcmV0dXJuIG11c2ljVm9sdW1lO1xyXG59XHJcblxyXG5sZXQgc2Z4Vm9sdW1lID0gMC41O1xyXG5cclxuZnVuY3Rpb24gc2V0U2Z4Vm9sdW1lKHZvbCkge1xyXG4gICAgc2Z4Vm9sdW1lID0gdm9sO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNmeFZvbHVtZSgpIHtcclxuICAgIHJldHVybiBzZnhWb2x1bWU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2V0TXVzaWNWb2x1bWUsXHJcbiAgICBnZXRNdXNpY1ZvbHVtZSxcclxuICAgIHNldFNmeFZvbHVtZSxcclxuICAgIGdldFNmeFZvbHVtZVxyXG59OyIsImNvbnN0IHsgYnVpbGRpbmdzLCBpc1BvcEJ1aWxkaW5nIH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgaW5jcmVhc2VNYXRlcmlhbCwgaW5jcmVhc2VNYXgsIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHVwZGF0ZVRvdGFsIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNQZXJrIH0gPSByZXF1aXJlKCcuL3BlcmtzJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuY29uc3QgeyBwYXNzZWRTdGFnZSB9ID0gcmVxdWlyZSgnLi9zdGFnZXMnKTtcclxuY29uc3QgeyByZWNhbGNNYXhDbG9uZXMgfSA9IHJlcXVpcmUoJy4vcmVjYWxjTWF4Q2xvbmVzJyk7XHJcblxyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCcpO1xyXG5jb25zdCB7IHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0IH0gPSByZXF1aXJlKCcuL3JlY2FsY3VsYXRlQnVpbGRpbmdDb3N0Jyk7XHJcbmNvbnN0IHsgY2FuQnV5QnVpbGRpbmcgfSA9IHJlcXVpcmUoJy4vY2FuQnV5QnVpbGRpbmcnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nTGlzdCB9ID0gcmVxdWlyZSgnLi91cGRhdGVCdWlsZGluZ0xpc3QnKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcblxyXG4vKiBCVUlMRElOR1MgKi9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmcgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVFZmZlY3RTdHJpbmcoYnVpbGRpbmcpIHtcclxuICAgIGxldCBlZmZlY3RQYXJ0cyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IFtyZXNvdXJjZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmVmZmVjdHMpKSB7XHJcbiAgICAgICAgLy8gZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVmZmVjdCkpIHtcclxuICAgICAgICBlZmZlY3RQYXJ0cy5wdXNoKGArJHt2YWx1ZX0gbWF4ICR7cmVzb3VyY2V9YCk7XHJcbiAgICAgICAgLy8gQWRkIG1vcmUgY29uZGl0aW9ucyBoZXJlIGlmIHlvdSBpbnRyb2R1Y2UgbmV3IHR5cGVzIG9mIGVmZmVjdHNcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgW3Jlc291cmNlLCBib29zdF0gb2YgT2JqZWN0LmVudHJpZXMoYnVpbGRpbmcuYm9vc3QpKSB7XHJcbiAgICAgICAgbGV0IHBlcmNlbnRhZ2VCb29zdCA9IE1hdGgucm91bmQoKGJvb3N0IC0gMSkgKiAxMDApO1xyXG4gICAgICAgIGlmIChpc1BvbmRlcmVkKCdlZmZlY3RpdmVCdWlsZGluZ3MnKSkgcGVyY2VudGFnZUJvb3N0ICo9IDEuMDE7XHJcbiAgICAgICAgZWZmZWN0UGFydHMucHVzaChgKyR7cGVyY2VudGFnZUJvb3N0fSUgJHtyZXNvdXJjZX0gcHJvZHVjdGlvbmApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWZmZWN0UGFydHMuam9pbignLCAnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0KGNvc3QpIHtcclxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhjb3N0KS5tYXAoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4gYCR7YW1vdW50LnRvRml4ZWQoMil9ICR7bWF0ZXJpYWx9YCkuam9pbignXFxuJyk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVCdWlsZGluZ0J1dHRvbihidWlsZGluZ0tleSwgYnVpbGRpbmdzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nS2V5XTtcclxuXHJcbiAgICAgICAgLy8gYnVpbGRpbmcuY29zdCA9IGJ1aWxkaW5nLmJhc2Vjb3N0O1xyXG4gICAgICAgIGJ1aWxkaW5nLmNvc3QgPSBidWlsZGluZy5iYXNlY29zdDtcclxuXHJcbiAgICAgICAgY29uc3QgY29zdHMgPSBPYmplY3QuZW50cmllcyhidWlsZGluZy5jb3N0KVxyXG4gICAgICAgICAgICAubWFwKChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IGAke21hdGVyaWFsfTogJHthbW91bnR9YClcclxuICAgICAgICAgICAgLmpvaW4oJywgJyk7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IGhhbGZDb3N0UmVxdWlyZW1lbnQgPSBPYmplY3QuZW50cmllcyhidWlsZGluZy5jb3N0KVxyXG4gICAgICAgIC8vICAgICAubWFwKChbbWF0ZXJpYWwsIGFtb3VudF0pID0+IGBnZXRNYXRlcmlhbCgnJHttYXRlcmlhbH0scmVzb3VyY2VzJykgPj0gJHtNYXRoLmZsb29yKGFtb3VudCAvIDIpfWApXHJcbiAgICAgICAgLy8gICAgIC5qb2luKCcgJiYgJyk7XHJcblxyXG4gICAgICAgIC8vIGxldCByZXF1aXJlbWVudFN0cmluZyA9IGByZXR1cm4gJHtoYWxmQ29zdFJlcXVpcmVtZW50fWA7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBidWlsZGluZyBoYXMgYW4gZWZmZWN0IG9uIGNsb25lcyBtYXhcclxuICAgICAgICAvLyBpZiAoYnVpbGRpbmcuZWZmZWN0cyAmJiBidWlsZGluZy5lZmZlY3RzWydjbG9uZXMnXSkge1xyXG4gICAgICAgIC8vICAgICByZXF1aXJlbWVudFN0cmluZyArPSBgICYmIHBhc3NlZFN0YWdlKCdjbG9uZXMnKWA7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIGNvbnN0IHJlcXVpcmVtZW50RnVuY3Rpb24gPSBjcmVhdGVSZXF1aXJlbWVudEZ1bmN0aW9uKGJ1aWxkaW5nLmNvc3QsIGJ1aWxkaW5nS2V5KTtcclxuICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlIGJ1aWxkaW5nIGJ1dHRvbjonLCBidWlsZGluZywgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidWlsZGluZy5lbW9qaSkpKTtcclxuICAgICAgICBjb25zdCBidXR0b24gPSB7XHJcbiAgICAgICAgICAgICdjbGFzcyc6ICd0b29sdGlwICcgKyBidWlsZGluZ0tleSxcclxuICAgICAgICAgICAgJ3RhYic6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICAgICAgJ3RleHQnOiBgJHtKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGJ1aWxkaW5nLmVtb2ppKSl9ICR7Y2FwaXRhbGl6ZUZpcnN0KGJ1aWxkaW5nS2V5KX1gLFxyXG4gICAgICAgICAgICAndG9vbHRpcERlc2MnOiBidWlsZGluZ3NbYnVpbGRpbmdLZXldLnRvb2x0aXBEZXNjIHx8IFwiQSBteXN0ZXJpb3VzIGJ1aWxkaW5nIHdpdGggdW50b2xkIGJlbmVmaXRzLlwiLFxyXG4gICAgICAgICAgICAndG9vbHRpcENvc3QnOiBjb3N0cyxcclxuICAgICAgICAgICAgJ3JlcXVpcmVtZW50JzogKCkgPT4gcmVxdWlyZW1lbnRGdW5jdGlvbigpLFxyXG4gICAgICAgICAgICAnZGF0YV9idWlsZGluZyc6IGJ1aWxkaW5nS2V5LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBidXR0b247XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCBjcmVhdGUgYnVpbGRpbmcgYnV0dG9uIGZvcicsIGJ1aWxkaW5nS2V5LCBidWlsZGluZ3MpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZW1lbnRGdW5jdGlvbihjb3N0cywgYnVpbGRpbmdLZXkpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29zdENvbmRpdGlvbiA9IE9iamVjdC5lbnRyaWVzKGNvc3RzKVxyXG4gICAgICAgICAgICAuZXZlcnkoKFttYXRlcmlhbCwgYW1vdW50XSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzRW5vdWdoUmVzb3VyY2UgPSBnZXRNYXRlcmlhbChtYXRlcmlhbCkgPj0gTWF0aC5mbG9vcihhbW91bnQgLyAyKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBDaGVja2luZyAke21hdGVyaWFsfTogTmVlZCAke01hdGguZmxvb3IoYW1vdW50IC8gMil9LCBIYXZlICR7Z2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcyl9LCBSZXN1bHQ6ICR7aGFzRW5vdWdoUmVzb3VyY2V9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzRW5vdWdoUmVzb3VyY2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBQYXNzZWRTdGFnZSBmb3IgJHtidWlsZGluZ0tleX06ICR7cGFzc2VkU3RhZ2UoJ2Nsb25lcycpfWApO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBDb3N0IGNvbmRpdGlvbiBmb3IgJHtidWlsZGluZ0tleX06ICR7Y29zdENvbmRpdGlvbn1gKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhc3NlZFN0YWdlKCdjbG9uZXMnKSAmJiBjb3N0Q29uZGl0aW9uO1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIGNvbnNvbGUubG9nKGJ1dHRvbnMpO1xyXG5cclxuZnVuY3Rpb24gZ2V0QnVpbGRpbmdDb3N0KGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgcmV0dXJuIGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdLmNvc3Q7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBidXlCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiQnV5aW5nIGJ1aWxkaW5nIFwiICsgYnVpbGRpbmdOYW1lKTtcclxuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGRpbmdzW2J1aWxkaW5nTmFtZV07XHJcblxyXG5cclxuXHJcbiAgICBpZiAoIWNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkpIHJldHVybjtcclxuICAgIC8vIEFjdHVhbGx5IGJ1aWxkIHRoZSBidWlsZGluZ1xyXG4gICAgYnVpbGRpbmcuY291bnQrKztcclxuXHJcbiAgICAvLyBTdWJ0cmFjdCB0aGUgY29zdFxyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJSZWR1Y2luZyBcIiwgcmVzb3VyY2UsIFwiYnlcIiwgYnVpbGRpbmcuY29zdFtyZXNvdXJjZV0pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGluY3JlYXNlTWF0ZXJpYWwpO1xyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC1idWlsZGluZy5jb3N0W3Jlc291cmNlXSk7XHJcbiAgICB9XHJcbiAgICAvLyBBZGQgdGhlIGVmZmVjdHNcclxuICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nLmVmZmVjdHMpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2JvdWdodCBidWlsZGluZyBlZmZlY3RzJywgcmVzb3VyY2UsIGFtb3VudCk7XHJcbiAgICAgICAgaW5jcmVhc2VNYXgocmVzb3VyY2UsIGFtb3VudCk7XHJcbiAgICAgICAgLy8gVXBkYXRlIG1heCBjbG9uZXMgYWZ0ZXIgdXBkYXRpbmcgdGhlIGNvdW50XHJcbiAgICAgICAgaWYgKHJlc291cmNlID09PSAnY2xvbmVzJykge1xyXG4gICAgICAgICAgICByZWNhbGNNYXhDbG9uZXMoKTtcclxuICAgICAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFVwZGF0ZSBidXR0b24gdGV4dFxyXG4gICAgdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudChidWlsZGluZ05hbWUsIGJ1aWxkaW5nLmNvdW50LCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGJ1aWxkaW5nLmVtb2ppKSkpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgY29zdCBvZiB0aGUgYnVpbGRpbmdcclxuICAgIHJlY2FsY3VsYXRlQnVpbGRpbmdDb3N0KGJ1aWxkaW5nTmFtZSwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuXHJcblxyXG4gICAgLy8gYWRkVG9CdWlsZGluZ0xpc3QoYnVpbGRpbmdOYW1lLCBidWlsZGluZy5lbW9qaSk7XHJcbiAgICB1cGRhdGVCdWlsZGluZ0xpc3QoKTtcclxufVxyXG5mdW5jdGlvbiBidXlNYXhCdWlsZGluZ3MoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBsZXQgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXTtcclxuICAgIC8vIFRPRE8gdXBkYXRlIHdpdGggY29vbCBmb3JtdWxhXHJcbiAgICAvLyBNYXRoLmZsb29yKE1hdGgubG9nKChjdXJyZW5jeSAqIChidWlsZGluZy5yYXRpbyAtIDEpKSAvIChidWlsZGluZy5iYXNlY29zdCAqIE1hdGgucG93KGJ1aWxkaW5nLnJhdGlvLCBidWlsZGluZy5jb3VudCkpKSAvIE1hdGgubG9nKGJ1aWxkaW5nLnJhdGlvKSk7XHJcbiAgICB3aGlsZSAoY2FuQnV5QnVpbGRpbmcoYnVpbGRpbmdOYW1lKSkge1xyXG4gICAgICAgIGJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSk7XHJcbiAgICAgICAgKytpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGk7XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIGRvdWJsZVN0b3JhZ2VFZmZlY3RzSWZQYXNzZWQoKSB7XHJcbi8vICAgICBpZiAocGFzc2VkU3RhZ2UoXCJkb3VibGVTdG9yYWdlMVwiKSkge1xyXG4vLyAgICAgICAgIGZvciAobGV0IGJ1aWxkaW5nS2V5IGluIGJ1aWxkaW5ncykge1xyXG4vLyAgICAgICAgICAgICBsZXQgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdLZXldO1xyXG5cclxuLy8gICAgICAgICAgICAgaWYgKGJ1aWxkaW5nLmVmZmVjdHMpIHtcclxuLy8gICAgICAgICAgICAgICAgIGZvciAobGV0IG1hdGVyaWFsIGluIGJ1aWxkaW5nLmVmZmVjdHMpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBidWlsZGluZy5lZmZlY3RzW21hdGVyaWFsXS5tYXggKj0gMjtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0LFxyXG4gICAgY3JlYXRlQnVpbGRpbmdCdXR0b24sXHJcbiAgICBidXlNYXhCdWlsZGluZ3MsXHJcbiAgICBidXlCdWlsZGluZyxcclxuICAgIGdlbmVyYXRlRWZmZWN0U3RyaW5nLFxyXG4gICAgdXBkYXRlQnVpbGRpbmdMaXN0XHJcbn07IiwiY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcblxyXG5jb25zdCB7IHNraWxscyB9ID0gcmVxdWlyZSgnLi9qc29uL3NraWxscycpO1xyXG5jb25zdCB7IGdldFdvcmtlcnMgfSA9IHJlcXVpcmUoJy4vam9icycpO1xyXG5jb25zdCB7IGhhc1BlcmsgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldEZhY3RvcnlQcm9kdWN0aW9uIH0gPSByZXF1aXJlKFwiLi9mYWN0b3J5XCIpO1xyXG5jb25zdCB7IGhhc1ByZXN0aWdlLCBnZXRMZXZlbE9mUHJlc3RpZ2UgfSA9IHJlcXVpcmUoXCIuL2pzb24vcHJlc3RpZ2VcIik7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGhhc1Rvb2wgfSA9IHJlcXVpcmUoXCIuL3Rvb2xzXCIpO1xyXG5cclxuLy8gQ2xvbmVzIHdvcmsgYXQgMS80IHRoZSBzcGVlZCBieSBkZWZhdWx0XHJcbnZhciBjbG9uZU11bHQgPSAwLjI1O1xyXG5cclxuLy8gUGVya3NcclxuXHJcbmNvbnN0IHBlcmtCb29zdHMgPSB7XHJcbiAgICAnTHVtYmVyamFjayc6IFsnd29vZCcsICdzdGlja3MnXSxcclxuICAgICdNaW5lcic6IFsncm9ja3MnLCAnb3JlJ10sXHJcbiAgICAnQm90YW5pc3QnOiBbJ3ZpbmVzJywgJ2hlcmJzJywgJ3doZWF0J10sXHJcbiAgICAvLyBBZGQgb3RoZXIgcGVya3MgYXMgbmVlZGVkXHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gYXBwbHlQZXJrQm9vc3QodG90YWwsIHJlc291cmNlTmFtZSkge1xyXG4gICAgZm9yIChjb25zdCBbcGVyaywgcmVzb3VyY2VzXSBvZiBPYmplY3QuZW50cmllcyhwZXJrQm9vc3RzKSkge1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2VOYW1lKSAmJiBoYXNQZXJrKHBlcmspKSB7XHJcbiAgICAgICAgICAgIHRvdGFsICo9IDEuNzU7IC8vIDc1JSBib251cyB0byBzcGVjaWZpY1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0b3RhbDtcclxufVxyXG5cclxuLy8gU2tpbGxzXHJcblxyXG5jb25zdCBza2lsbEJvb3N0cyA9IHtcclxuICAgICdnYXRoZXJpbmcnOiBbJ2dhdGhlcmluZ0Jvb3N0J10sXHJcbiAgICAnbWFzb25yeSc6IFsnbWFzb25yeUJvb3N0J10sXHJcbiAgICAnY2FycGVudHJ5JzogWydjYXJwZW50cnlCb29zdCddLFxyXG4gICAgJ3RoaW5raW5nJzogWyd0aGlua2luZ0Jvb3N0J10sXHJcbiAgICAnZmFybWluZyc6IFsnZmFybWluZ0Jvb3N0J10sXHJcbiAgICAnZmlzaGluZyc6IFsnZmlzaGluZ0Jvb3N0J10sXHJcbiAgICAnaHVudGluZyc6IFsnaHVudGluZ0Jvb3N0J10sXHJcbn07XHJcblxyXG5mdW5jdGlvbiBhcHBseVNraWxsQm9vc3QodG90YWwsIHJlc291cmNlTmFtZSkge1xyXG4gICAgZm9yIChjb25zdCBbc2tpbGwsIGJvb3N0c10gb2YgT2JqZWN0LmVudHJpZXMoc2tpbGxCb29zdHMpKSB7XHJcbiAgICAgICAgaWYgKHNraWxsc1tza2lsbF0uYWZmZWN0ZWRSZXNvdXJjZXMuaW5jbHVkZXMocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICBib29zdHMuZm9yRWFjaChib29zdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzUHJlc3RpZ2UoYm9vc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWwgKj0gMS4xICogZ2V0TGV2ZWxPZlByZXN0aWdlKGJvb3N0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCBza2lsbFJhdGlvID0gMS4wNjtcclxuICAgICAgICAgICAgbGV0IG11bHQgPSAxICsgKE1hdGgucG93KHNraWxsUmF0aW8sIHNraWxsc1tza2lsbF0ubGV2ZWwpIC0gMSkgLyAxMDA7XHJcbiAgICAgICAgICAgIHRvdGFsICo9IG11bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG4vLyBUb29sc1xyXG5cclxuY29uc3QgcmVzb3VyY2VUb29sTWFwID0ge1xyXG4gICAgJ3dvb2QnOiAnYXhlJyxcclxuICAgICdvcmUnOiAncGlja2F4ZScsXHJcbiAgICAnZmlzaCc6ICdmaXNoaW5ncm9kJyxcclxuICAgICdnYW1lJzogJ3NwZWFyJyxcclxuICAgICdwb25kZXInOiAncGFwZXInLFxyXG4gICAgJ3N0aWNrcyc6ICdzdGFmZicsXHJcbiAgICAvLyBBZGQgbW9yZSBtYXBwaW5ncyBhcyBuZWVkZWRcclxufTtcclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9vbEJvb3N0KHRvdGFsLCByZXNvdXJjZU5hbWUpIHtcclxuICAgIGNvbnN0IHRvb2xOYW1lID0gcmVzb3VyY2VUb29sTWFwW3Jlc291cmNlTmFtZV07XHJcbiAgICBpZiAodG9vbE5hbWUgJiYgZ2V0TWF0ZXJpYWwodG9vbE5hbWUpID4gMTApIHtcclxuICAgICAgICB0b3RhbCAqPSAxICsgTWF0aC5sb2cxMChnZXRNYXRlcmlhbCh0b29sTmFtZSkgLyAxMCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgdGhlIGFtb3VudCBhIHJlc291cmNlIHNob3VsZCBpbmNyZWFzZSBieSBpbiBhIGdpdmVuIHRpbWUgcGVyaW9kXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZU5hbWUgVGhlIHJlc291cmNlIHRvIGNhbGN1bGF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsdGFfdGltZSBIb3cgbXVjaCB0aW1lIGhhcyBlbGFwc2VkXHJcbiAqIEByZXR1cm5zIFRoZSBhbW91bnQgdGhhdCByZXNvdXJjZSBzaG91bGQgaW5jcmVhc2UgYnlcclxuICovXHJcbmZ1bmN0aW9uIGNhbGNJbmNyZWFzZShyZXNvdXJjZU5hbWUsIGRlbHRhX3RpbWUpIHtcclxuICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKS5idWlsZGluZ3M7XHJcbiAgICAvLyBjbG9uZXMgaW5jcmVhc2UgYnkgMSBwZXIgc2Vjb25kIGFzIGxvbmcgYXMgdGhlcmUncyBzcGFjZVxyXG4gICAgLy8gaWYgKHJlc291cmNlID09PSAnY2xvbmVzJyAmJiBwYXNzZWRTdGFnZSgnY2xvbmUnKSkge1xyXG4gICAgLy8gICAgIHRvdGFsID0gMTtcclxuICAgIC8vICAgICByZXR1cm4gdG90YWw7XHJcbiAgICAvLyB9XHJcbiAgICBpZiAoIXJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZU5hbWUpKSB7XHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VOYW1lKSkge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBvdXIgZmFjdG9yaWVzXHJcbiAgICAgICAgICAgIHRvdGFsID0gZ2V0RmFjdG9yeVByb2R1Y3Rpb24ocmVzb3VyY2VOYW1lKTtcclxuICAgICAgICAgICAgaWYgKHRvdGFsID4gMCkgcmV0dXJuIHRvdGFsOyAvLyBEb24ndCBhcHBseSBza2lsbHMgdG8gZmFjdG9yaWVzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgcmV0dXJuIHRvdGFsOyAvLyBpZiBub3QgYSByZXNvdXJjZSBvciBhIGNyYWZ0ZWQgcmVzb3VyY2UsIHJldHVybiAwXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlc291cmNlTmFtZSA9PT0gJ2Nsb25lcycgJiYgaXNQb25kZXJlZCgnYXV0b0Nsb25lJykpIHRvdGFsID0gMTtcclxuXHJcbiAgICAvLyBHYXRoZXJpbmcgcGVyc29uYWxseVxyXG4gICAgaWYgKHJlc291cmNlc1tyZXNvdXJjZU5hbWVdICYmIHJlc291cmNlc1tyZXNvdXJjZU5hbWVdLmlzR2V0dGluZykge1xyXG4gICAgICAgIHRvdGFsICs9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgam9ic1xyXG4gICAgbGV0IGxlYWRlck11bHQgPSBoYXNQZXJrKCdMZWFkZXInKSA/IGNsb25lTXVsdCAqIDEuNSA6IGNsb25lTXVsdDtcclxuICAgIHRvdGFsICs9IGxlYWRlck11bHQgKiBnZXRXb3JrZXJzKHJlc291cmNlTmFtZSkgfHwgMDtcclxuXHJcblxyXG4gICAgLy8gQXBwbHkgcGVya3MgcHJvZHVjdGlvbiBib29zdFxyXG4gICAgdG90YWwgPSBhcHBseVBlcmtCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKTtcclxuICAgIC8vIEFwcGx5IHNraWxscyB0byBhbGwgY2xvbmVzXHJcbiAgICB0b3RhbCA9IGFwcGx5U2tpbGxCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKTtcclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhnZXRCb29zdCgnY2FtcGZpJykpXHJcbiAgICAvLyBBbGwgYnVpbGRpbmdzIGFmdGVyIGxldmVsXHJcbiAgICBmb3IgKGNvbnN0IGJ1aWxkaW5nIG9mIE9iamVjdC5rZXlzKGJ1aWxkaW5ncykpIHtcclxuICAgICAgICBjb25zdCBib29zdERhdGEgPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKS5nZXRCb29zdChidWlsZGluZywgcmVzb3VyY2VOYW1lKTtcclxuICAgICAgICBpZiAoYm9vc3REYXRhKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW5jcmVhc2UgPSBNYXRoLnBvdyhib29zdERhdGEsIGJ1aWxkaW5nc1tidWlsZGluZ10uY291bnQpO1xyXG4gICAgICAgICAgICBpZiAoaXNQb25kZXJlZCgnZWZmZWN0aXZlQnVpbGRpbmdzJykpIGluY3JlYXNlICo9IDEuMDM7XHJcbiAgICAgICAgICAgIHRvdGFsICo9IGluY3JlYXNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgaWYgKGlzUG9uZGVyZWQoJ3BvbmRlcjEnKSkgdG90YWwgKj0gMS4wNTtcclxuICAgICAgICBpZiAoaXNQb25kZXJlZCgncG9uZGVyMicpKSB0b3RhbCAqPSAxLjA1O1xyXG4gICAgICAgIGlmIChpc1BvbmRlcmVkKCdwb25kZXIzJykpIHRvdGFsICo9IDEuMDU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2Zhc3RlclJlc291cmNlR2FpbicpKSB0b3RhbCAqPSAxLjA1O1xyXG4gICAgaWYgKGhhc1ByZXN0aWdlKCdjbG9uZUJvb3N0JykpIHRvdGFsICo9IDEuMDUgKiBnZXRMZXZlbE9mUHJlc3RpZ2UoJ2Nsb25lQm9vc3QnKTtcclxuXHJcbiAgICAvLyBDaGVjayB0b29sc1xyXG4gICAgdG90YWwgPSBhcHBseVRvb2xCb29zdCh0b3RhbCwgcmVzb3VyY2VOYW1lKTtcclxuXHJcbiAgICAvLyBOZWVkIGF0IGxlYXN0IDEwIGh1c2tzIHRvIGJvb3N0IG1hdGhlbWF0aWNhbGx5IChsbigxKSA9IDApXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2h1c2tzJykgPiAxMCkgdG90YWwgKj0gMSArIE1hdGgubG9nKGdldE1hdGVyaWFsKCdodXNrcycpIC8gMTApO1xyXG4gICAgLy8gQ29udmVydCBmcm9tIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdCgodG90YWwgKiBkZWx0YV90aW1lIC8gMTAwMCkudG9GaXhlZCgzKSk7XHJcbn1cclxuZXhwb3J0cy5jYWxjSW5jcmVhc2UgPSBjYWxjSW5jcmVhc2U7IiwiY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZGluZ05hbWVcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGNhbkJ1eUJ1aWxkaW5nKGJ1aWxkaW5nTmFtZSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICBsZXQgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGNvbnN0IGJ1aWxkaW5ncyA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKS5idWlsZGluZ3M7XHJcbiAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkaW5nc1tidWlsZGluZ05hbWVdO1xyXG5cclxuICAgIGZvciAoY29uc3QgcmVzb3VyY2UgaW4gYnVpbGRpbmcuY29zdCkge1xyXG4gICAgICAgIGlmIChidWlsZGluZy5jb3N0W3Jlc291cmNlXSA+IGdldE1hdGVyaWFsKHJlc291cmNlLCByZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIGNhbkJ1eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FuJ3QgYnV5IGNsb25pbmcgYnVpbGRpbmdzIGJlZm9yZSBjbG9uZXMgdW5sb2NrZWRcclxuICAgIGlmIChidWlsZGluZy5lZmZlY3RzICYmIGJ1aWxkaW5nLmVmZmVjdHNbJ2Nsb25lcyddICYmICFwYXNzZWRTdGFnZSgnY2xvbmUnKSkgY2FuQnV5ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbiB3ZSBidXkgJyxidWlsZGluZ05hbWUsY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuZXhwb3J0cy5jYW5CdXlCdWlsZGluZyA9IGNhbkJ1eUJ1aWxkaW5nOyIsImNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9jcmFmdGVkUmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5mdW5jdGlvbiBjYW5DcmFmdChyZXNvdXJjZUtleSkge1xyXG4gICAgbGV0IGNhbkNyYWZ0ID0gdHJ1ZTtcclxuICAgIGxldCByZXF1aXJlbWVudHMgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGFsbCByZXF1aXJlbWVudHMgYXJlIG1ldFxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZUtleSwgcmVxdWlyZW1lbnRzKTtcclxuICAgICAgICBmb3IgKGxldCBtYXQgaW4gcmVxdWlyZW1lbnRzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIDwgcmVxdWlyZW1lbnRzW21hdF0pIHtcclxuICAgICAgICAgICAgICAgIGNhbkNyYWZ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgaW4gY2FsY3VsYXRpbmcgcmVxdWlyZW1lbnRzOiAnLCByZXNvdXJjZUtleSwgcmVxdWlyZW1lbnRzLCBlcnIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjYW5DcmFmdDtcclxufVxyXG5leHBvcnRzLmNhbkNyYWZ0ID0gY2FuQ3JhZnQ7IiwiLyoqXHJcbiAqIENhcGl0YWxpemVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmdcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBzdHJpbmdFeGFtcGxlXHJcbiAqIEByZXR1cm5zIFN0cmluZ0V4YW1wbGVcclxuICovXHJcbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdChzdHIpIHtcclxuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XHJcbn1cclxuZXhwb3J0cy5jYXBpdGFsaXplRmlyc3QgPSBjYXBpdGFsaXplRmlyc3Q7IiwiY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZShcIi4vZ2V0TWF0ZXJpYWxcIik7XHJcbmNvbnN0IHsgaW5jcmVhc2VNYXRlcmlhbCB9ID0gcmVxdWlyZShcIi4vcmVzb3VyY2VzXCIpO1xyXG5cclxuXHJcbmNvbnN0IGxvb3RUYWJsZSA9IHtcclxuICAgIGh1c2tzOiB7IHByb2JhYmlsaXR5OiAwLjA1LCBxdWFudGl0eTogMSB9LFxyXG5cclxuICAgIG5haWxzOiB7IHByb2JhYmlsaXR5OiAwLjEwLCBxdWFudGl0eTogNTAgfSxcclxuICAgIHNsYWJzOiB7IHByb2JhYmlsaXR5OiAwLjIwLCBxdWFudGl0eTogNTAgfSxcclxuICAgIGJlYW1zOiB7IHByb2JhYmlsaXR5OiAwLjEwLCBxdWFudGl0eTogNjAgfSxcclxuXHJcbiAgICBheGU6IHsgcHJvYmFiaWxpdHk6IDAuMTUsIHF1YW50aXR5OiA1IH0sXHJcbiAgICBzcGVhcjogeyBwcm9iYWJpbGl0eTogMSwgcXVhbnRpdHk6IDUgfSxcclxuXHJcbiAgICBnb2xkOiB7IHByb2JhYmlsaXR5OiAuMSwgcXVhbnRpdHk6IDEwIH0sXHJcbiAgICBpcm9uOiB7IHByb2JhYmlsaXR5OiAwLjE1LCBxdWFudGl0eTogNTAgfSxcclxuICAgIHNpbHZlcjogeyBwcm9iYWJpbGl0eTogMC4wNSwgcXVhbnRpdHk6IDIwIH0sXHJcbiAgICBzdGVlbDogeyBwcm9iYWJpbGl0eTogMC4xMCwgcXVhbnRpdHk6IDMwIH0sXHJcblxyXG4gICAgYnJpY2tzOiB7IHByb2JhYmlsaXR5OiAwLjE1LCBxdWFudGl0eTogODAgfSxcclxuXHJcbn07XHJcblxyXG5sZXQgY3Vyckxvb3QgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIGdldEN1cnJMb290KCkge1xyXG4gICAgcmV0dXJuIGN1cnJMb290O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUxvb3QoKSB7XHJcbiAgICBsZXQgbG9vdCA9IHt9O1xyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBpbiBsb290VGFibGUpIHtcclxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IGxvb3RUYWJsZVtyZXNvdXJjZV0ucHJvYmFiaWxpdHkpIHtcclxuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSBNYXRoLmZsb29yKGxvb3RUYWJsZVtyZXNvdXJjZV0ucXVhbnRpdHkgKiAoTWF0aC5yYW5kb20oKSAqIC40ICsgLjgpKTsgLy8gR2V0IGxvb3QgODAlIC0gMTIwJVxyXG4gICAgICAgICAgICBpZiAocXVhbnRpdHkgPiAwKSBsb290W3Jlc291cmNlXSA9IHF1YW50aXR5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGN1cnJMb290ID0gbG9vdDtcclxuICAgIGNvbnNvbGUubG9nKGN1cnJMb290KTtcclxuICAgIHJldHVybiBsb290O1xyXG59XHJcblxyXG5cclxuXHJcbi8vIHNjcmlwdC5qc1xyXG5jb25zdCBhcmVuYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcmVuYScpO1xyXG5mdW5jdGlvbiBjcmVhdGVCYWxscyh0ZWFtLCBjb3VudCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYmFsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGJhbGwuY2xhc3NOYW1lID0gYGJhbGwgJHt0ZWFtfWA7XHJcbiAgICAgICAgYmFsbC5zdHlsZS5sZWZ0ID0gYCR7dGVhbSA9PT0gJ3BsYXllcicgPyAxMCA6IDkwfSVgOyAvLyBTdGFydGluZyBwb3NpdGlvbnNcclxuICAgICAgICBiYWxsLnN0eWxlLnRvcCA9IGAkezEwICsgaSAqIDMwfXB4YDtcclxuICAgICAgICBhcmVuYS5hcHBlbmRDaGlsZChiYWxsKTtcclxuICAgICAgICBpZiAodGVhbSA9PT0gJ3BsYXllcicpIHBsYXllclRyb29wcy5wdXNoKGJhbGwpO1xyXG4gICAgICAgIGVsc2UgZW5lbXlUcm9vcHMucHVzaChiYWxsKTtcclxuICAgIH1cclxufVxyXG5sZXQgcGxheWVyVHJvb3BzID0gW107XHJcbmxldCBlbmVteVRyb29wcyA9IFtdO1xyXG5sZXQgYW5pbWF0aW9ucyA9IFtdO1xyXG5jb25zdCBhbmltVGltZSA9IDMwMDA7XHJcbmZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKCkge1xyXG5cclxuICAgIGNvbnN0IGJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKTtcclxuICAgIGJhbGxzLmZvckVhY2goYmFsbCA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNwbGF5ZXJUZWFtID0gYmFsbC5jbGFzc0xpc3QuY29udGFpbnMoJ3BsYXllcicpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldFggPSBpc3BsYXllclRlYW0gPyBhcmVuYS5vZmZzZXRXaWR0aCA6IC1hcmVuYS5vZmZzZXRXaWR0aDsgLy8gVGFyZ2V0IHBvc2l0aW9uc1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJhbGwsIHRhcmdldFgpO1xyXG4gICAgICAgIGFuaW1hdGlvbnMucHVzaChiYWxsLmFuaW1hdGUoW1xyXG4gICAgICAgICAgICB7IHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoJHt0YXJnZXRYfXB4KWAgfVxyXG4gICAgICAgIF0sIHtcclxuICAgICAgICAgICAgZHVyYXRpb246IGFuaW1UaW1lLFxyXG4gICAgICAgICAgICBmaWxsOiAnbm9uZSdcclxuICAgICAgICB9KS5maW5pc2hlZC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgYmFsbC5yZW1vdmUoKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9KTtcclxuICAgIHVwZGF0ZSgpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBsYXllckJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsYXllcicpLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBlbmVteUJhbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVuZW15JykubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAocGxheWVyQmFsbHMgPT09IDAgfHwgZW5lbXlCYWxscyA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGJhbGwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKSkge1xyXG4gICAgICAgICAgICBiYWxsLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOZWVkIHRvIGJhdHRsZSBhZ2FpblxyXG4gICAgICAgIGNyZWF0ZUJhbGxzKCdwbGF5ZXInLCBwbGF5ZXJCYWxscyk7XHJcbiAgICAgICAgY3JlYXRlQmFsbHMoJ2VuZW15JywgZW5lbXlCYWxscyk7XHJcbiAgICAgICAgc3RhcnRBbmltYXRpb24oKTtcclxuXHJcbiAgICB9LCBhbmltVGltZSAtIDEwMCk7IC8vIE5lZWQgdG8gZXhlY3V0ZSBiZWZvcmUgdGhlIGJhbGxzIGFyZSBkZWxldGVkXHJcbn1cclxuXHJcbmxldCBoYXNSZXdhcmRlZCA9IGZhbHNlO1xyXG5mdW5jdGlvbiBjaGVja0ZvcldpbigpIHtcclxuICAgIGlmIChoYXNSZXdhcmRlZCkgcmV0dXJuO1xyXG4gICAgY29uc3QgcGxheWVyQmFsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxheWVyJykubGVuZ3RoO1xyXG4gICAgY29uc3QgZW5lbXlCYWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5lbmVteScpLmxlbmd0aDtcclxuXHJcbiAgICBpZiAocGxheWVyQmFsbHMgPT09IDAgJiYgZW5lbXlCYWxscyA+IDApIGJhdHRsZVJlc3VsdCA9ICdlbmVteSc7XHJcbiAgICBlbHNlIGlmIChlbmVteUJhbGxzID09PSAwICYmIHBsYXllckJhbGxzID4gMCkgYmF0dGxlUmVzdWx0ID0gJ3BsYXllcic7XHJcblxyXG4gICAgaWYgKGJhdHRsZVJlc3VsdCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGNvbWJhdFJlc3VsdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21iYXRSZXN1bHQnKTtcclxuICAgICAgICBpZiAoYmF0dGxlUmVzdWx0ID09PSBcInBsYXllclwiKSB7XHJcbiAgICAgICAgICAgIGNvbWJhdFJlc3VsdC50ZXh0Q29udGVudCA9IFwiWW91IHdvbiFcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKGJhdHRsZVJlc3VsdCA9PT0gXCJlbmVteVwiKSB7XHJcbiAgICAgICAgICAgIGNvbWJhdFJlc3VsdC50ZXh0Q29udGVudCA9IFwiVGhlIEVuZW15IHdvbiFcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb21iYXRSZXN1bHQudGV4dENvbnRlbnQgPSBcIkl0J3MgYSBkcmF3IVwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZmlnaHRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9LCBhbmltVGltZSAvIDIpO1xyXG5cclxuICAgICAgICAvLyBSZXdhcmQgdGhlIHBsYXllciB0aGVpciBsb290IGlmIHRoZXkgd29uXHJcbiAgICAgICAgaWYgKGJhdHRsZVJlc3VsdCA9PT0gXCJwbGF5ZXJcIikge1xyXG4gICAgICAgICAgICBoYXNSZXdhcmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBzdGFuY2VNdWx0ID0gMTtcclxuICAgICAgICAgICAgaWYgKGdldFN0YW5jZSgpID09PSAnYWdncmVzc2l2ZScpIHN0YW5jZU11bHQgPSAuNzU7XHJcbiAgICAgICAgICAgIGlmIChnZXRTdGFuY2UoKSA9PT0gJ2NhcmVmdWwnKSBzdGFuY2VNdWx0ID0gMS4yNTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2xvb3ROYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY3Vyckxvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKGxvb3ROYW1lLCB2YWx1ZSAqIHN0YW5jZU11bHQpO1xyXG4gICAgICAgICAgICAgICAgY29tYmF0UmVzdWx0LmlubmVySFRNTCArPSBgPGJyPiske3ZhbHVlICogc3RhbmNlTXVsdH0gJHtsb290TmFtZX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdlbmVyYXRlTG9vdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxjdWxhdGVFbmVteU1pZ2h0KCk7XHJcbiAgICAgICAgcmVmcmVzaFZhbHVlcygpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuXHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZGV0ZWN0Q29sbGlzaW9ucyhwbGF5ZXIsIGVuZW15KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYXllci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZW5lbXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKGlzQ29sbGlkaW5nKHBsYXllclRyb29wc1tpXSwgZW5lbXlUcm9vcHNbal0pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNvbGxpc2lvblxyXG4gICAgICAgICAgICAgICAgaGFuZGxlQ29sbGlzaW9uKHBsYXllclRyb29wc1tpXSwgZW5lbXlUcm9vcHNbal0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0NvbGxpZGluZyhiYWxsMSwgYmFsbDIpIHtcclxuICAgIGNvbnN0IHJlY3QxID0gYmFsbDEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBjb25zdCByZWN0MiA9IGJhbGwyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIHJldHVybiAhKFxyXG4gICAgICAgIHJlY3QxLnJpZ2h0IDwgcmVjdDIubGVmdCB8fFxyXG4gICAgICAgIHJlY3QxLmxlZnQgPiByZWN0Mi5yaWdodCB8fFxyXG4gICAgICAgIHJlY3QxLmJvdHRvbSA8IHJlY3QyLnRvcCB8fFxyXG4gICAgICAgIHJlY3QxLnRvcCA+IHJlY3QyLmJvdHRvbVxyXG4gICAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ29sbGlzaW9uKHBsYXllckJhbGwsIGVuZW15QmFsbCkge1xyXG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPCAxIC8gKDEgKyBNYXRoLnBvdygxMCwgKGdldEN1cnJFbmVteU1pZ2h0KCkgLSBjYWxjdWxhdGVQbGF5ZXJNaWdodCgpKSAvIGNoYW5jZVNwcmVhZCkpKSBlbmVteUJhbGwucmVtb3ZlKCk7XHJcbiAgICBlbHNlIHBsYXllckJhbGwucmVtb3ZlKCk7XHJcblxyXG59XHJcblxyXG4vLyBDYWxsIHRoaXMgZnVuY3Rpb24gY29udGludW91c2x5LCBlLmcuLCB1c2luZyByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuZnVuY3Rpb24gdXBkYXRlKCkge1xyXG4gICAgZGV0ZWN0Q29sbGlzaW9ucyhwbGF5ZXJUcm9vcHMsIGVuZW15VHJvb3BzKTtcclxuICAgIGlmICghY2hlY2tGb3JXaW4oKSAmJiAhaGFzUmV3YXJkZWQpIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjUm91bmRpbmcoKSB7XHJcbiAgICBjb25zdCBwbGF5ZXJNaWdodCA9IGNhbGN1bGF0ZVBsYXllck1pZ2h0KCk7XHJcbiAgICBjb25zdCBlbmVteU1pZ2h0ID0gZ2V0Q3VyckVuZW15TWlnaHQoKTtcclxuXHJcbiAgICBjb25zdCBiYWxsQ291bnQgPSAxMjtcclxuICAgIGNvbnN0IHBsYXllclJvdW5kaW5nID0gTWF0aC5jZWlsKHBsYXllck1pZ2h0IC8gYmFsbENvdW50KTtcclxuICAgIGNvbnN0IGVuZW15Um91bmRpbmcgPSBNYXRoLmNlaWwoZW5lbXlNaWdodCAvIGJhbGxDb3VudCk7XHJcblxyXG4gICAgY29uc3QgaGlnaGVyUm91bmRpbmcgPSBNYXRoLm1heChwbGF5ZXJSb3VuZGluZywgZW5lbXlSb3VuZGluZyk7XHJcbiAgICBjb25zdCBwbGF5ZXJDb3VudCA9IE1hdGguZmxvb3IocGxheWVyTWlnaHQgLyBoaWdoZXJSb3VuZGluZyk7XHJcbiAgICBjb25zdCBlbmVteUNvdW50ID0gTWF0aC5mbG9vcihlbmVteU1pZ2h0IC8gaGlnaGVyUm91bmRpbmcpO1xyXG5cclxuICAgIGNvbnN0IGFwcHJveEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwcm94aW1hdGVCYWxsJyk7XHJcbiAgICBhcHByb3hFbGVtZW50LnRleHRDb250ZW50ID0gaGlnaGVyUm91bmRpbmcudG9TdHJpbmcoKTtcclxuXHJcbiAgICByZXR1cm4gW3BsYXllckNvdW50LCBlbmVteUNvdW50XTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGF1c2VBbmltYXRpb24oKSB7XHJcbiAgICAvLyBjb25zdCBiYWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5iYWxsJyk7XHJcbiAgICBhbmltYXRpb25zLmZvckVhY2goYmFsbCA9PiB7XHJcbiAgICAgICAgYmFsbC5wYXVzZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IGZpZ2h0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uI3N0YXJ0Q29tYmF0Jyk7XHJcblxyXG5sZXQgYmF0dGxlUmVzdWx0ID0gbnVsbDsgLy8gVmFyaWFibGUgdG8gc3RvcmUgYmF0dGxlIHJlc3VsdFxyXG5cclxuY29uc3QgY2hhbmNlU3ByZWFkID0gMjAwOyAvLyBMYXJnZXIgbWVhbnMgc21hbGxlciBhcm1pZXMgaGF2ZSBhIGhpZ2hlciBjaGFuY2UgdG8gYmVhdCBsYXJnZXIgYXJtaWVzXHJcbmZ1bmN0aW9uIHNpbXVsYXRlQmF0dGxlKCkge1xyXG4gICAgLy8gUGVyZm9ybSB0aGUgYmF0dGxlIHNpbXVsYXRpb24gbG9naWMgaGVyZVxyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlQmF0dGxlUmVzdWx0KCkge1xyXG4gICAgICAgIGNvbnN0IHBsYXllck1pZ2h0ID0gY2FsY3VsYXRlUGxheWVyTWlnaHQoKTtcclxuICAgICAgICBjb25zdCBlbmVteU1pZ2h0ID0gZ2V0Q3VyckVuZW15TWlnaHQoKTtcclxuICAgICAgICBjb25zdCBwbGF5ZXJDaGFuY2UgPSAxIC8gKDEgKyBNYXRoLnBvdygxMCwgKGVuZW15TWlnaHQgLSBwbGF5ZXJNaWdodCkgLyBjaGFuY2VTcHJlYWQpKTtcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgMSB0byBzaW11bGF0ZSB0aGUgYmF0dGxlIG91dGNvbWVcclxuICAgICAgICBjb25zdCByYW5kb21PdXRjb21lID0gTWF0aC5yYW5kb20oKTtcclxuXHJcbiAgICAgICAgaWYgKHJhbmRvbU91dGNvbWUgPCBwbGF5ZXJDaGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdwbGF5ZXInOyAvLyBQbGF5ZXIgd2luc1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnZW5lbXknOyAvLyBFbmVteSB3aW5zXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB0aGUgcmVzdWx0IGFuZCBzdG9yZSBpdCBpbiB0aGUgYmF0dGxlUmVzdWx0IHZhcmlhYmxlXHJcbiAgICBiYXR0bGVSZXN1bHQgPSBjYWxjdWxhdGVCYXR0bGVSZXN1bHQoKTtcclxuICAgIGNoZWNrRm9yV2luKCk7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIE1haW4gY29tYmF0IGZ1bmN0aW9uLCBzdGFydCBldmVyeXRoaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21iYXQoKSB7XHJcbiAgICBiYXR0bGVSZXN1bHQgPSBudWxsO1xyXG4gICAgLy8gUmVtb3ZlIGFsbCBiYWxsc1xyXG4gICAgZm9yIChjb25zdCBiYWxsIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5iYWxsJykpIHtcclxuICAgICAgICBiYWxsLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgLy8gUm91bmQgZG93biB0aGUgYmFsbHMgdG8gMTJcclxuICAgIGxldCBbcGxheWVyQ291bnQsIGVuZW15Q291bnRdID0gY2FsY1JvdW5kaW5nKCk7XHJcblxyXG4gICAgY3JlYXRlQmFsbHMoJ3BsYXllcicsIHBsYXllckNvdW50KTtcclxuICAgIGNyZWF0ZUJhbGxzKCdlbmVteScsIGVuZW15Q291bnQpO1xyXG5cclxuXHJcbiAgICBjb25zdCBjb21iYXRSZXN1bHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tYmF0UmVzdWx0Jyk7XHJcbiAgICBjb21iYXRSZXN1bHQudGV4dENvbnRlbnQgPSAnJztcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBmaWdodEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICBoYXNSZXdhcmRlZCA9IGZhbHNlO1xyXG5cclxuICAgIHN0YXJ0QW5pbWF0aW9uKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVBsYXllck1pZ2h0KCkge1xyXG4gICAgbGV0IG1pZ2h0ID0gZ2V0TWF0ZXJpYWwoJ3Zpb2xlbmNlJykgKyBnZXRNYXRlcmlhbCgnc3BlYXInKSArIGdldE1hdGVyaWFsKCdtZWRpY2luZScpO1xyXG4gICAgaWYgKGdldFN0YW5jZSgpID09PSAnYWdncmVzc2l2ZScpIG1pZ2h0ICo9IDEuMjtcclxuICAgIGVsc2UgaWYgKGdldFN0YW5jZSgpID09PSAnY2FyZWZ1bCcpIG1pZ2h0ICo9IDAuODtcclxuICAgIHJldHVybiBtaWdodDtcclxufVxyXG5cclxuXHJcbmxldCBlbmVteU1pZ2h0ID0gNDAwOyAvLyBJbml0aWFsaXplIGVuZW15IG1pZ2h0IGFzIGEgZ2xvYmFsIHZhcmlhYmxlXHJcblxyXG5mdW5jdGlvbiBnZXROZXh0QmF0dGxlTWlnaHQocGxheWVyV29uUHJldmlvdXNCYXR0bGUpIHtcclxuXHJcbiAgICBpZiAocGxheWVyV29uUHJldmlvdXNCYXR0bGUgPT09IG51bGwpIHJldHVybiBlbmVteU1pZ2h0O1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBsYXllciB3b24gdGhlIHByZXZpb3VzIGJhdHRsZVxyXG4gICAgaWYgKHBsYXllcldvblByZXZpb3VzQmF0dGxlKSB7XHJcbiAgICAgICAgLy8gSW5jcmVhc2UgdGhlIGRpZmZpY3VsdHkgZm9yIHRoZSBuZXh0IGJhdHRsZVxyXG4gICAgICAgIGVuZW15TWlnaHQgKz0gNTA7IC8vIFlvdSBjYW4gYWRqdXN0IHRoZSBpbmNyZW1lbnQgYXMgbmVlZGVkXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIERlY3JlYXNlIHRoZSBkaWZmaWN1bHR5IGZvciB0aGUgbmV4dCBiYXR0bGVcclxuICAgICAgICBlbmVteU1pZ2h0IC09IDUwOyAvLyBZb3UgY2FuIGFkanVzdCB0aGUgZGVjcmVtZW50IGFzIG5lZWRlZFxyXG4gICAgfVxyXG5cclxuICAgIC8vIEVuc3VyZSB0aGUgYmFzZU1pZ2h0IGRvZXNuJ3QgZ28gYmVsb3cgYSBtaW5pbXVtIHZhbHVlXHJcbiAgICBpZiAoZW5lbXlNaWdodCA8IDIwMCkge1xyXG4gICAgICAgIGVuZW15TWlnaHQgPSAyMDA7IC8vIFNldCBhIG1pbmltdW0gbWlnaHQgdmFsdWVcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGp1c3QgdGhlIGRpZmZpY3VsdHkgYmFzZWQgb24gdGhlIHBsYXllcidzIGxldmVsXHJcbiAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiBtYWtlIGJhdHRsZXMgcHJvZ3Jlc3NpdmVseSBoYXJkZXIgYXMgdGhlIHBsYXllcidzIGxldmVsIGluY3JlYXNlc1xyXG4gICAgLy8gYmFzZU1pZ2h0ICs9IHBsYXllckxldmVsICogMTA7IC8vIEFkanVzdCB0aGlzIGZvcm11bGEgYXMgbmVlZGVkXHJcblxyXG4gICAgcmV0dXJuIGVuZW15TWlnaHQ7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzZXRFbmVteU1pZ2h0KG1pZ2h0KSB7XHJcbiAgICBlbmVteU1pZ2h0ID0gbWlnaHQ7IC8vIFVwZGF0ZSB0aGUgZ2xvYmFsIGVuZW15TWlnaHQgdmFyaWFibGVcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q3VyckVuZW15TWlnaHQoKSB7XHJcbiAgICByZXR1cm4gZW5lbXlNaWdodDsgLy8gUmV0dXJuIHRoZSBnbG9iYWwgZW5lbXlNaWdodCB2YXJpYWJsZVxyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVFbmVteU1pZ2h0KCkge1xyXG4gICAgY29uc29sZS5sb2coJ2JhdHRsZSByZXN1bHQgd2FzJywgYmF0dGxlUmVzdWx0KTtcclxuICAgIGNvbnN0IG1pZ2h0ID0gZ2V0TmV4dEJhdHRsZU1pZ2h0KGJhdHRsZVJlc3VsdCA9PT0gbnVsbCB8fCBiYXR0bGVSZXN1bHQgPT09ICdwbGF5ZXInKTtcclxuICAgIHJldHVybiBtaWdodDtcclxufVxyXG5cclxuY29uc3QgcGxheWVyTWlnaHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllck1pZ2h0Jyk7XHJcbmNvbnN0IGVuZW15TWlnaHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VuZW15TWlnaHQnKTtcclxuZnVuY3Rpb24gY2FsY3VsYXRlV2luQ2hhbmNlKCkge1xyXG5cclxuICAgIGNvbnN0IHBsYXllck1pZ2h0ID0gY2FsY3VsYXRlUGxheWVyTWlnaHQoKTtcclxuICAgIGNvbnN0IGVuZW15TWlnaHQgPSBnZXRDdXJyRW5lbXlNaWdodCgpO1xyXG5cclxuICAgIC8vIGNvbnN0IFtwbGF5ZXJDb3VudCwgZW5lbXlDb3VudF0gPSBjYWxjUm91bmRpbmcoKTtcclxuXHJcbiAgICAvLyBUaGlzIG51bWJlciBpcyBhIGRpcnR5IGxpZSwgYnV0IHRoZSB0cnV0aCBpcyB0b28gaGFyZFxyXG4gICAgY29uc3QgY2hhbmNlID0gMSAvICgxICsgTWF0aC5wb3coMTAsIChlbmVteU1pZ2h0IC0gcGxheWVyTWlnaHQpIC8gY2hhbmNlU3ByZWFkKSk7XHJcblxyXG5cclxuICAgIHBsYXllck1pZ2h0RWxlbWVudC50ZXh0Q29udGVudCA9IHBsYXllck1pZ2h0LnRvRml4ZWQoMCk7XHJcbiAgICBwbGF5ZXJNaWdodEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0b29sdGlwZGVzYycsIGAke2dldE1hdGVyaWFsKCd2aW9sZW5jZScpLnRvRml4ZWQoMCl9IHZpb2xlbmNlICsgJHtnZXRNYXRlcmlhbCgnc3BlYXInKS50b0ZpeGVkKDApfSBzcGVhcnMgKyAke2dldE1hdGVyaWFsKCdtZWRpY2luZScpLnRvRml4ZWQoMCl9IG1lZGljaW5lYCk7XHJcblxyXG4gICAgZW5lbXlNaWdodEVsZW1lbnQudGV4dENvbnRlbnQgPSBlbmVteU1pZ2h0LnRvRml4ZWQoMCk7XHJcblxyXG4gICAgY29uc3QgY2hhbmNlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFuY2VUb1dpbicpO1xyXG4gICAgY2hhbmNlRWxlbWVudC50ZXh0Q29udGVudCA9IChjaGFuY2UgKiAxMDApLnRvRml4ZWQoMSkgKyAnJSc7XHJcblxyXG4gICAgY2hhbmNlRWxlbWVudC5zdHlsZS5jb2xvciA9IChgaHNsKCR7KGNoYW5jZSAqIDEyMCkudG9TdHJpbmcoMTApfSwxMDAlLDUwJSlgKTtcclxuXHJcbiAgICByZXR1cm4gY2hhbmNlO1xyXG59XHJcblxyXG5sZXQgc3RhbmNlID0gJ2JhbGFuY2VkJztcclxuXHJcbmZ1bmN0aW9uIGdldFN0YW5jZSgpIHtcclxuICAgIHJldHVybiBzdGFuY2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFN0YW5jZShuZXdTdGFuY2UpIHtcclxuICAgIHN0YW5jZSA9IG5ld1N0YW5jZTtcclxufVxyXG5cclxuY29uc3Qgc3RhbmNlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbi5zdGFuY2UnKTtcclxuZnVuY3Rpb24gc3dpdGNoU3RhbmNlKG5ld1N0YW5jZSkge1xyXG4gICAgY29uc29sZS5sb2coJ3N3aXRjaCBzdGFuY2UgdG8gJywgbmV3U3RhbmNlKTtcclxuICAgIHN0YW5jZUJ1dHRvbnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfSk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtuZXdTdGFuY2V9U3RhbmNlYCkuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgc2V0U3RhbmNlKG5ld1N0YW5jZSk7XHJcbiAgICByZWZyZXNoVmFsdWVzKCk7XHJcbn1cclxuLy8gQHRzLWlnbm9yZVxyXG53aW5kb3cuc3dpdGNoU3RhbmNlID0gc3dpdGNoU3RhbmNlO1xyXG5cclxuXHJcbmZ1bmN0aW9uIHJlZnJlc2hWYWx1ZXMoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhnZXRDdXJyTG9vdCgpKTtcclxuICAgIGlmIChPYmplY3Qua2V5cyhnZXRDdXJyTG9vdCgpKS5sZW5ndGggPCAxKSBnZW5lcmF0ZUxvb3QoKTtcclxuXHJcbiAgICBjb25zdCBsb290TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb290TGlzdCcpO1xyXG4gICAgbG9vdExpc3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBmb3IgKGNvbnN0IFtyZXNvdXJjZSwgcXVhbnRpdHldIG9mIE9iamVjdC5lbnRyaWVzKGdldEN1cnJMb290KCkpKSB7XHJcbiAgICAgICAgbG9vdExpc3QuaW5uZXJIVE1MICs9IGA8c3Bhbj4ke3Jlc291cmNlfSAoJHtxdWFudGl0eX0pPC9zcGFuPiA8YnI+YDtcclxuICAgIH1cclxuXHJcbiAgICBlbmVteU1pZ2h0RWxlbWVudC50ZXh0Q29udGVudCA9IGdldEN1cnJFbmVteU1pZ2h0KCkudG9TdHJpbmcoKTtcclxuICAgIGNhbGNSb3VuZGluZygpO1xyXG4gICAgY2FsY3VsYXRlV2luQ2hhbmNlKCk7XHJcbn1cclxuXHJcblxyXG4vLyBFeGFtcGxlIHVzYWdlXHJcbi8vIHNldHVwR2FtZSg1LCA1KTsgLy8gNSBiYWxscyBmb3IgZWFjaCB0ZWFtXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY29tYmF0LFxyXG4gICAgY2FsY3VsYXRlV2luQ2hhbmNlLFxyXG4gICAgcmVmcmVzaFZhbHVlcyxcclxuICAgIHBhdXNlQW5pbWF0aW9uLFxyXG4gICAgYmF0dGxlUmVzdWx0LFxyXG4gICAgc2ltdWxhdGVCYXR0bGUsXHJcbiAgICBzd2l0Y2hTdGFuY2UsXHJcbiAgICBnZXRDdXJyRW5lbXlNaWdodCxcclxuICAgIHNldEVuZW15TWlnaHQsXHJcbn07IiwiY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbi8vIEFzc3VtaW5nIHRoZXNlIGFyZSBkZWZpbmVkIGdsb2JhbGx5XHJcbi8vIHZhciBtYW51ZmFjdHVyZWRNYXAgPSB7XHJcbi8vICAgICBjbGF5OiBbJ2JyaWNrcyddLFxyXG4vLyAgICAgaGVyYnM6IFsnbWVkaWNpbmUnXSxcclxuLy8gICAgIGhpZGVzOiBbJ2xlYXRoZXInXSxcclxuLy8gICAgIGlyb246IFsnc3RlZWwnLCAnbmFpbHMnXSxcclxuLy8gICAgIG9yZTogWydpcm9uJywgJ3NpbHZlcicsICdnb2xkJ10sXHJcbi8vICAgICBzYW5kOiBbJ2dsYXNzJywgJ2NvbmNyZXRlJ10sXHJcbi8vICAgICByb2NrczogWydzbGFicyddLFxyXG4vLyAgICAgdmluZXM6IFsncm9wZSddLFxyXG4vLyAgICAgd29vZDogWydwYXBlcicsICdiZWFtcycsICdjcmF0ZXMnXSxcclxuLy8gfTtcclxuXHJcbnZhciBzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcCA9IHtcclxuICAgICdiZWFtcyc6IFsnd29vZCddLFxyXG4gICAgJ2JyaWNrcyc6IFsnY2xheSddLFxyXG4gICAgJ2NvbmNyZXRlJzogWydzYW5kJ10sXHJcbiAgICAnY3JhdGVzJzogWyd3b29kJ10sXHJcbiAgICAnZ2xhc3MnOiBbJ3NhbmQnXSxcclxuICAgICdnb2xkJzogWydvcmUnXSxcclxuICAgICdoYW5kbGUnOiBbJ3N0aWNrcyddLFxyXG4gICAgJ2lyb24nOiBbJ29yZSddLFxyXG4gICAgJ2xlYXRoZXInOiBbJ2hpZGVzJ10sXHJcbiAgICAnbWVkaWNpbmUnOiBbJ2hlcmJzJ10sXHJcbiAgICAnbmFpbHMnOiBbJ2lyb24nXSxcclxuICAgICdwYXBlcic6IFsnd29vZCddLFxyXG4gICAgJ3NoYXJwcm9ja3MnOiBbJ3JvY2tzJ10sXHJcbiAgICAnc2lsdmVyJzogWydvcmUnXSxcclxuICAgICdzbGFicyc6IFsncm9ja3MnXSxcclxuICAgICdzcGVhcic6IFsnc3RhZmYnLCAnc2hhcnByb2NrcycsICdyb3BlJ10sXHJcbiAgICAnc3RhZmYnOiBbJ2hhbmRsZScsICdyb3BlJ10sXHJcbiAgICAnc3RlZWwnOiBbJ2lyb24nXSxcclxuICAgICdzdGlja3MnOiBbJ3dvb2QnXSxcclxuICAgICdyb3BlJzogWyd2aW5lcyddLFxyXG4gICAgJ3dvb2QnOiBbJ3N0aWNrcyddLFxyXG59O1xyXG5cclxuXHJcbnZhciBhbGxNYXRlcmlhbHMgPSBbXTtcclxuT2JqZWN0LmtleXMocmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG5PYmplY3Qua2V5cyhjcmFmdGVkUmVzb3VyY2VzKS5mb3JFYWNoKHIgPT4gYWxsTWF0ZXJpYWxzLnB1c2gocikpO1xyXG5jb25zb2xlLmxvZyhcIkFsbCBtYXRlcmlhbHM6IFwiLCBhbGxNYXRlcmlhbHMpO1xyXG5cclxubGV0IGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZyA9IHt9O1xyXG5sZXQgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nID0ge307XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUHJvZHVjaW5nKHJlc291cmNlKSB7XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nO1xyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzQ29uc3VtaW5nKHJlc291cmNlKSB7XHJcbiAgICByZXR1cm4gcmVzb3VyY2UgaW4gYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nO1xyXG59XHJcblxyXG4vLyBmdW5jdGlvbiBnZXRGYWN0b3J5Q29uc3VtcHRpb24ocmVzb3VyY2UpIHtcclxuLy8gICAgIHJldHVybiBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbcmVzb3VyY2VdICogO1xyXG4vLyB9XHJcblxyXG5mdW5jdGlvbiBnZXRGYWN0b3J5UHJvZHVjdGlvbihyZXNvdXJjZSkge1xyXG4gICAgcmV0dXJuIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tyZXNvdXJjZV0gKiBtYW51ZmFjdHVyZUJ1bGs7XHJcbn1cclxuXHJcblxyXG4vLyBGdW5jdGlvbiB0byB1cGRhdGUgcmVzb3VyY2UgcHJvZHVjdGlvbiBhbmQgY29uc3VtcHRpb25cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiB1cGRhdGVGYWN0b3J5UmVzb3VyY2VUcmFja2luZyhvbGRQcm9kdWNlZCwgbmV3UHJvZHVjZWQpIHtcclxuICAgIC8vIGlmIChuZXdQcm9kdWNlZCA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgLy8gSWYgdGhpcyBmYWN0b3J5IHdhcyBwcmV2aW91c2x5IHByb2R1Y2luZyBzb21ldGhpbmcsIHJlZHVjZSB0aGUgY291bnRcclxuICAgIGlmIChvbGRQcm9kdWNlZCAmJiBvbGRQcm9kdWNlZCAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW29sZFByb2R1Y2VkXS0tO1xyXG4gICAgICAgIEFycmF5LmZyb20oY3JhZnRlZFJlc291cmNlc1tvbGRQcm9kdWNlZF0uY29zdCkuZm9yRWFjaCgoY29zdCkgPT4ge1xyXG4gICAgICAgICAgICBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0gLT0gY29zdC5hbW91bnQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBwcm9kdWN0aW9uIGNvdW50IGZvciB0aGUgbmV3IHJlc291cmNlXHJcbiAgICBpZiAoYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW25ld1Byb2R1Y2VkXSkgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nW25ld1Byb2R1Y2VkXSsrO1xyXG4gICAgZWxzZSBhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmdbbmV3UHJvZHVjZWRdID0gMTtcclxuICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzW25ld1Byb2R1Y2VkXSkge1xyXG4gICAgICAgIEFycmF5LmZyb20oY3JhZnRlZFJlc291cmNlc1tuZXdQcm9kdWNlZF0uY29zdCkuZm9yRWFjaCgoY29zdCkgPT4ge1xyXG4gICAgICAgICAgICBhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0gKz0gY29zdC5hbW91bnQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENhbGwgdGhpcyB3aGVuZXZlciBhIGZhY3RvcnkncyBzZXR0aW5ncyBjaGFuZ2VcclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBvbkZhY3RvcnlNb2RpZmllZChmYWN0b3J5SW5kZXgsIG5ld1Byb2R1Y2VkKSB7XHJcbiAgICBjb25zdCByaWdodFNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNmYWN0b3J5LSR7ZmFjdG9yeUluZGV4fSAucmlnaHRTZWxlY3RgKTtcclxuICAgIHVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nKHJpZ2h0U2VsZWN0LmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcpLCBuZXdQcm9kdWNlZCk7XHJcbiAgICByaWdodFNlbGVjdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZHVjZWQnLCBuZXdQcm9kdWNlZCk7XHJcbn1cclxuLy8gT2JqZWN0LmtleXMoY3JhZnRlZFJlc291cmNlcykuZm9yRWFjaCgocmVzb3VyY2UpID0+IHtcclxuLy8gICAgIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1tyZXNvdXJjZV0gPSAwO1xyXG4vLyAgICAgQXJyYXkuZnJvbShjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlXS5jb3N0KS5mb3JFYWNoKChjb3N0KSA9PiB7XHJcbi8vICAgICAgICAgaWYgKCFhY3RpdmVGYWN0b3JpZXNDb25zdW1pbmdbY29zdC5yZXNvdXJjZV0pIHtcclxuLy8gICAgICAgICAgICAgYWN0aXZlRmFjdG9yaWVzQ29uc3VtaW5nW2Nvc3QucmVzb3VyY2VdID0gMDtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUZhY3RvcnlEaXYoKSB7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSByZXNvdXJjZSB0cmFja2luZyBvYmplY3RzXHJcblxyXG5cclxuICAgIGNvbnN0IGZhY3Rvcmllc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWN0b3JpZXMnKTtcclxuICAgIGNvbnN0IGZhY3RvcnlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGZhY3RvcnlEaXYuY2xhc3NOYW1lID0gJ2ZhY3RvcnknO1xyXG5cclxuICAgIGNvbnN0IGxlZnRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgbGVmdFRleHQuY2xhc3NMaXN0LmFkZCgnZmFjdG9yeUNvc3QnKTtcclxuICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcblxyXG4gICAgLy8gUG9wdWxhdGUgdGhlIHJpZ2h0IGRyb3Bkb3duXHJcbiAgICBPYmplY3Qua2V5cyhzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcCkuZm9yRWFjaChyZXNvdXJjZSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IHJlc291cmNlO1xyXG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHJlc291cmNlO1xyXG4gICAgICAgIHJpZ2h0U2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIHJpZ2h0U2VsZWN0LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsICdub25lJyk7XHJcblxyXG5cclxuICAgIHJpZ2h0U2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgcHJvZHVjZWQgcmVzb3VyY2UgZm9yIHRoaXMgZmFjdG9yeVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQcm9kdWNlZCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y2VkJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChjdXJyZW50UHJvZHVjZWQgIT09ICdub25lJykgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Jlc291cmNlLSR7Y3VycmVudFByb2R1Y2VkfWApLnN0eWxlLmNvbG9yID0gJyc7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1Byb2R1Y2VkID0gcmlnaHRTZWxlY3QudmFsdWU7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSByZXNvdXJjZSB0cmFja2luZ1xyXG4gICAgICAgIHVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nKGN1cnJlbnRQcm9kdWNlZCwgbmV3UHJvZHVjZWQpO1xyXG5cclxuICAgICAgICAvLyBOb3cgdXBkYXRlIHRoZSBkYXRhc2V0IGZvciB0aGUgbmV4dCBjaGFuZ2UgZXZlbnRcclxuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWNlZCcsIG5ld1Byb2R1Y2VkKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChuZXdQcm9kdWNlZCAmJiBuZXdQcm9kdWNlZCAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Jlc291cmNlLSR7bmV3UHJvZHVjZWR9YCkuc3R5bGUuY29sb3IgPSAndGhpc3RsZSc7XHJcbiAgICAgICAgICAgIGxlZnRUZXh0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBsZWZ0VGV4dC5pbm5lckhUTUwgKz0gYCR7cmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbcmlnaHRTZWxlY3QudmFsdWVdLmNvc3QpfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgaW5pdGlhbCBvcHRpb24gZm9yIGxlZnQgc2VsZWN0XHJcbiAgICBmdW5jdGlvbiBhZGRJbml0aWFsT3B0aW9uKHNlbGVjdEVsZW1lbnQsIHRleHQpIHtcclxuICAgICAgICBjb25zdCBpbml0aWFsT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgaW5pdGlhbE9wdGlvbi52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGluaXRpYWxPcHRpb24udGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgICAgIC8vIGluaXRpYWxPcHRpb24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIGluaXRpYWxPcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kQ2hpbGQoaW5pdGlhbE9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBhcnJvdy5pbm5lckhUTUwgPSAnJiM4NTk0Oyc7IC8vIFJpZ2h0IGFycm93IEhUTUwgZW50aXR5XHJcblxyXG4gICAgZmFjdG9yeURpdi5hcHBlbmRDaGlsZChsZWZ0VGV4dCk7XHJcbiAgICBmYWN0b3J5RGl2LmFwcGVuZENoaWxkKGFycm93KTtcclxuICAgIGZhY3RvcnlEaXYuYXBwZW5kQ2hpbGQocmlnaHRTZWxlY3QpO1xyXG5cclxuICAgIGFkZEluaXRpYWxPcHRpb24ocmlnaHRTZWxlY3QsICdTZWxlY3QgYSBSZXNvdXJjZScpO1xyXG5cclxuICAgIGZhY3Rvcmllc0NvbnRhaW5lci5hcHBlbmRDaGlsZChmYWN0b3J5RGl2KTtcclxuXHJcbiAgICByZXR1cm4gZmFjdG9yeURpdjtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRGYWN0b3J5KGNyYWZ0aW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgYSBmYWN0b3J5IGZvciBcIiwgY3JhZnRpbmcpO1xyXG4gICAgbGV0IGRpdiA9IGNyZWF0ZUZhY3RvcnlEaXYoKTtcclxuICAgIGlmIChjcmFmdGluZykge1xyXG4gICAgICAgIGRpdi5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKS52YWx1ZSA9IGNyYWZ0aW5nO1xyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Jlc291cmNlLSR7Y3JhZnRpbmd9YCkuc3R5bGUuY29sb3IgPSAndGhpc3RsZSc7XHJcbiAgICAgICAgZGl2LnF1ZXJ5U2VsZWN0b3IoJy5mYWN0b3J5Q29zdCcpLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGRpdi5xdWVyeVNlbGVjdG9yKCcuZmFjdG9yeUNvc3QnKS5pbm5lckhUTUwgKz0gYCR7cmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZXNbY3JhZnRpbmddLmNvc3QpfWA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYnV5RmFjdG9yeUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXlGYWN0b3J5QnV0dG9uJyk7XHJcblxyXG4gICAgbmV3RmFjdG9yeVNpbHZlckNvc3QgKj0gMS4yO1xyXG4gICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgYCR7bmV3RmFjdG9yeVNpbHZlckNvc3QudG9GaXhlZCgwKX0gc2lsdmVyYCk7XHJcbiAgICB1cGRhdGVGYWN0b3J5UmVzb3VyY2VUcmFja2luZygnbm9uZScsIGNyYWZ0aW5nKTtcclxufVxyXG5cclxuXHJcbmxldCBtYW51ZmFjdHVyZUJ1bGsgPSAyO1xyXG5sZXQgYnVsa1VwZ3JhZGVDb3N0ID0gMzA7XHJcbmxldCBtYW51ZmFjdHVyZUJvbnVzID0gMTtcclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSByZXNvdXJjZXMgQWxsIHJlc291cmNlcyByZXF1aXJlZCBmb3IgdGhlIGNyYWZ0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBnb2FsUmVzb3VyY2UgV2hhdCB3ZSdsbCBiZSBjcmFmdGluZ1xyXG4gKi9cclxuZnVuY3Rpb24gbWFudWZhY3R1cmUocmVzb3VyY2VzLCBnb2FsUmVzb3VyY2UpIHtcclxuICAgIC8vIENhbGN1bGF0ZSBob3cgbWFueSB3ZSBjYW4gYWZmb3JkXHJcbiAgICBsZXQgYXJyID0gW107XHJcbiAgICByZXNvdXJjZXMuZm9yRWFjaChyZXNvdXJjZSA9PiBhcnIucHVzaChnZXRNYXRlcmlhbChyZXNvdXJjZSkgLyBjcmFmdGVkUmVzb3VyY2VzW2dvYWxSZXNvdXJjZV0uY29zdFtyZXNvdXJjZV0pKTtcclxuICAgIGxldCBudW0gPSBNYXRoLm1pbihtYW51ZmFjdHVyZUJ1bGssIC4uLmFycik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhudW0sIG1hbnVmYWN0dXJlQnVsaywgLi4uYXJyKTtcclxuICAgIG51bSAqPSBtYW51ZmFjdHVyZUJvbnVzO1xyXG4gICAgLy8gVGhlIGZhY3RvcmllcyBnZXQgdG8gYmUgaGFsZiBwcmljZSBvZiBub3JtYWwgY3JhZnRpbmcgYmMgZWZmaWNpZW5jeVxyXG4gICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5jcmFmdFJlc291cmNlUXVhbnRpdHkoZ29hbFJlc291cmNlLCBudW0pO1xyXG4gICAgLy8gaW5jcmVhc2VNYXRlcmlhbChnb2FsUmVzb3VyY2UsIG51bSk7XHJcbiAgICAvLyBpbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCAtY3JhZnRlZFJlc291cmNlc1tnb2FsUmVzb3VyY2VdLmNvc3QpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGdyYWRlQnVsaygpIHtcclxuICAgIGlmIChnZXRNYXRlcmlhbCgnc2lsdmVyJykgPCBidWxrVXBncmFkZUNvc3QpIHJldHVybjtcclxuICAgIG1hbnVmYWN0dXJlQnVsayArPSAyO1xyXG4gICAgYnVsa1VwZ3JhZGVDb3N0ICs9IDEwO1xyXG5cclxuICAgIGNvbnN0IHVwQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VwZ3JhZGVCdWxrQnV0dG9uJyk7XHJcbiAgICB1cEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JywgYCR7bWFudWZhY3R1cmVCdWxrfSDihpIgJHttYW51ZmFjdHVyZUJ1bGsgKyAyfTogJHtidWxrVXBncmFkZUNvc3QudG9GaXhlZCgwKX0gc2lsdmVyYCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF0dGVtcHRNYW51ZmFjdHVyZSgpIHtcclxuICAgIGNvbnN0IGZhY3RvcmllcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYWN0b3J5Jyk7XHJcbiAgICBmYWN0b3JpZXMuZm9yRWFjaChmYWN0b3J5ID0+IHtcclxuXHJcbiAgICAgICAgLy8gY29uc3QgbGVmdFNlbGVjdCA9IGZhY3RvcnkucXVlcnlTZWxlY3Rvcignc3BhbjpmaXJzdC1jaGlsZCcpO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0U2VsZWN0ID0gZmFjdG9yeS5xdWVyeVNlbGVjdG9yKCdzZWxlY3Q6bGFzdC1jaGlsZCcpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCBnb2FsUmVzb3VyY2UgPSByaWdodFNlbGVjdC52YWx1ZTtcclxuICAgICAgICBjb25zdCByZXNvdXJjZXMgPSBzd2l0Y2hlZE1hbnVmYWN0dXJlZE1hcFtnb2FsUmVzb3VyY2VdO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgZmFjdG9yeVwiLCBnb2FsUmVzb3VyY2UpO1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXMgJiYgZ29hbFJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIG1hbnVmYWN0dXJlKHJlc291cmNlcywgZ29hbFJlc291cmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIENhbGwgdGhpcyBmdW5jdGlvbiB3aGVuZXZlciB5b3Ugd2FudCB0byBzdGFydCB0aGUgbWFudWZhY3R1cmluZyBwcm9jZXNzXHJcbi8vIGZvciBleGFtcGxlLCBhZnRlciBjcmVhdGluZyB0aGUgZmFjdG9yeSBkaXZzIGluaXRpYWxseSBvciBhZnRlciBhZGRpbmcgYSBuZXcgb25lXHJcbi8vIHN0YXJ0TWFudWZhY3R1cmluZ1Byb2Nlc3MoKTtcclxuLy8gZnVuY3Rpb24gZGV0ZXJtaW5lTmV3RmFjdG9yeUNvc3QoKSB7XHJcbi8vICAgICB2YXIgY29zdCA9IDUwO1xyXG4vLyAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZykpIHtcclxuLy8gICAgICAgICBpZiAodmFsID4gMClcclxuLy8gICAgICAgICAgICAgY29zdCAqPSBNYXRoLnBvdygxLjIsIHZhbCk7XHJcbi8vICAgICB9XHJcbi8vICAgICByZXR1cm4gY29zdDtcclxuLy8gfVxyXG4vLyB2YXIgbmV3RmFjdG9yeVNpbHZlckNvc3QgPSBkZXRlcm1pbmVOZXdGYWN0b3J5Q29zdCgpO1xyXG52YXIgbmV3RmFjdG9yeVNpbHZlckNvc3QgPSA1MDtcclxuZnVuY3Rpb24gYnV5RmFjdG9yeSgpIHtcclxuICAgIGNvbnN0IGJ1eUZhY3RvcnlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5RmFjdG9yeUJ1dHRvbicpO1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdzaWx2ZXInKSA8IG5ld0ZhY3RvcnlTaWx2ZXJDb3N0KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ05vdCBlbm91Z2ggc2lsdmVyIScpOyByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFzIGVub3VnaCBzaWx2ZXIgdG8gYWZmb3JkIGZhY3RvcnlcclxuICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnc2lsdmVyJywgLW5ld0ZhY3RvcnlTaWx2ZXJDb3N0KTtcclxuICAgIGNyZWF0ZUZhY3RvcnlEaXYoKTtcclxuXHJcbiAgICBuZXdGYWN0b3J5U2lsdmVyQ29zdCAqPSAxLjI7XHJcbiAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBgJHtuZXdGYWN0b3J5U2lsdmVyQ29zdC50b0ZpeGVkKDIpfSBzaWx2ZXJgKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjcmVhdGVGYWN0b3J5RGl2LFxyXG4gICAgYXR0ZW1wdE1hbnVmYWN0dXJlLFxyXG4gICAgYnV5RmFjdG9yeSxcclxuICAgIHVwZ3JhZGVCdWxrLFxyXG4gICAgYWxsTWF0ZXJpYWxzLFxyXG4gICAgZ2V0RmFjdG9yeVByb2R1Y3Rpb24sXHJcbiAgICBsb2FkRmFjdG9yeSxcclxuICAgIGFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZ1xyXG59O1xyXG4iLCJmdW5jdGlvbiBmaXRDaGFyVG9DZWxsKGNoYXIsIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgaW5pdGlhbEZvbnRTaXplKSB7XHJcbiAgICAvLyBDcmVhdGUgYSB0ZW1wb3Jhcnkgc3BhbiBlbGVtZW50IHRvIG1lYXN1cmUgdGhlIGNoYXJhY3RlclxyXG4gICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHNwYW4udGV4dENvbnRlbnQgPSBjaGFyO1xyXG4gICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IGAke2luaXRpYWxGb250U2l6ZX1weGA7XHJcbiAgICBzcGFuLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsgLy8gc28gaXQgZG9lc24ndCBhZmZlY3QgdGhlIGxheW91dFxyXG4gICAgc3Bhbi5zdHlsZS53aGl0ZVNwYWNlID0gJ25vd3JhcCc7IC8vIHRvIHByZXZlbnQgbGluZSBicmVha3NcclxuICAgIHNwYW4uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOyAvLyB0byBrZWVwIGl0IGhpZGRlblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzcGFuKTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgc3BhbiBmaXRzIHdpdGhpbiB0aGUgZGltZW5zaW9ucywgYW5kIGFkanVzdCBmb250IHNpemUgaWYgbm90XHJcbiAgICBsZXQgY3VycmVudEZvbnRTaXplID0gaW5pdGlhbEZvbnRTaXplO1xyXG4gICAgd2hpbGUgKHNwYW4ub2Zmc2V0V2lkdGggPCBjZWxsV2lkdGggJiYgc3Bhbi5vZmZzZXRIZWlnaHQgPCBjZWxsSGVpZ2h0KSB7XHJcbiAgICAgICAgY3VycmVudEZvbnRTaXplKys7XHJcbiAgICAgICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IGAke2N1cnJlbnRGb250U2l6ZX1weGA7XHJcblxyXG4gICAgICAgIC8vIE9wdGlvbmFsOiBzdG9wIGlmIHRoZSBmb250IHNpemUgZ2V0cyB0b28gc21hbGxcclxuICAgICAgICBpZiAoY3VycmVudEZvbnRTaXplID49IDEwMDApIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFuIHVwOiByZW1vdmUgdGhlIHRlbXBvcmFyeSBzcGFuIGVsZW1lbnRcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3Bhbik7XHJcblxyXG4gICAgcmV0dXJuIGN1cnJlbnRGb250U2l6ZTtcclxufVxyXG5leHBvcnRzLmZpdENoYXJUb0NlbGwgPSBmaXRDaGFyVG9DZWxsO1xyXG4iLCJjb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZShcIi4vY2FwaXRhbGl6ZUZpcnN0XCIpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vY3JhZnRlZFJlc291cmNlc1wiKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcmVzb3VyY2VzXCIpO1xyXG5cclxuLy8gRGVmaW5lIGEgbGlzdCBvZiBwb3NzaWJsZSBidWlsZGluZyBuYW1lcywgY29zdHMsIGFuZCBkZXNjcmlwdGlvbnNcclxuY29uc3QgcG9zc2libGVSZXNvdXJjZXMgPSBPYmplY3Qua2V5cyhyZXNvdXJjZXMpLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnaHVza3MnKTtcclxuY29uc3QgcG9zc2libGVDcmFmdGVkUmVzb3VyY2VzID0gT2JqZWN0LmtleXMoY3JhZnRlZFJlc291cmNlcyk7XHJcblxyXG5mdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIobWluLCBtYXgpIHtcclxuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSYW5kb21FbW9qaSgpIHtcclxuICAvLyBEZWZpbmUgdGhlIFVuaWNvZGUgcmFuZ2VzIGZvciByYW5kb20gZW1vamlzXHJcbiAgY29uc3QgcmFuZ2VzID0gW1xyXG4gICAgeyBzdGFydDogMHgxMzExQiwgZW5kOiAweDEzMTNFIH0sXHJcbiAgICB7IHN0YXJ0OiAweDEzMUUzLCBlbmQ6IDB4MTMyMUYgfSxcclxuICBdO1xyXG5cclxuICAvLyBDaG9vc2UgYSByYW5kb20gcmFuZ2VcclxuICBjb25zdCByYW5kb21SYW5nZSA9IHJhbmdlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5nZXMubGVuZ3RoKV07XHJcblxyXG4gIC8vIEdlbmVyYXRlIGEgcmFuZG9tIFVuaWNvZGUgY2hhcmFjdGVyIHdpdGhpbiB0aGUgc2VsZWN0ZWQgcmFuZ2VcclxuICBjb25zdCByYW5kb21Vbmljb2RlID0gTWF0aC5mbG9vcihnZXRSYW5kb21OdW1iZXIocmFuZG9tUmFuZ2Uuc3RhcnQsIHJhbmRvbVJhbmdlLmVuZCArIDEpKTtcclxuXHJcbiAgLy8gQ29udmVydCB0aGUgVW5pY29kZSBjb2RlIHBvaW50IHRvIGEgSmF2YVNjcmlwdCBzdHJpbmdcclxuICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQocmFuZG9tVW5pY29kZSk7XHJcbn1cclxuXHJcbmNvbnN0IGFkamVjdGl2ZXMgPSBbXHJcbiAgJ2J1c3RsaW5nJyxcclxuICAnbWFqZXN0aWMnLFxyXG4gICdhbmNpZW50JyxcclxuICAnZWxlZ2FudCcsXHJcbiAgJ2hpZGRlbicsXHJcbiAgJ2dsb3Jpb3VzJyxcclxuICAnZW5jaGFudGVkJyxcclxuICAnd2hpc3BlcmluZycsXHJcbiAgJ215c3RpY2FsJyxcclxuICAnbHVtaW5vdXMnLFxyXG4gICdyYWRpYW50JyxcclxuICAnc3BlY3RhY3VsYXInLFxyXG4gICdkYXp6bGluZycsXHJcbiAgJ3NlcmVuYWRlJyxcclxuICAnY2VsZXN0aWFsJyxcclxuICAndmlicmFudCcsXHJcbiAgJ2ltcG9zaW5nJyxcclxuICAndmVuZXJhYmxlJyxcclxuICAnaW1tYWN1bGF0ZScsXHJcbiAgJ2VuaWdtYXRpYycsXHJcbiAgJ2hhcm1vbmlvdXMnLFxyXG4gICdldGhlcmVhbCcsXHJcbiAgJ3Jlc3BsZW5kZW50JyxcclxuICAndHJhbnF1aWwnLFxyXG4gICdzZXJlbmUnLFxyXG4gICdhd2UtaW5zcGlyaW5nJyxcclxuICAncGVhY2VmdWwnLFxyXG4gICdwaWN0dXJlc3F1ZScsXHJcbiAgJ2NhcHRpdmF0aW5nJyxcclxuXTtcclxuXHJcbmNvbnN0IGJ1aWxkaW5nTmFtZXMgPSBbXHJcbiAgJ1NhbmN0dWFyeScsXHJcbiAgJ0NpdGFkZWwnLFxyXG4gICdIYXZlbicsXHJcbiAgJ01vbmFzdGVyeScsXHJcbiAgJ091dHBvc3QnLFxyXG4gICdPYnNlcnZhdG9yeScsXHJcbiAgJ1N0cm9uZ2hvbGQnLFxyXG4gICdQYWxhY2UnLFxyXG4gICdUZW1wbGUnLFxyXG4gICdNYW5vcicsXHJcbiAgJ0tlZXAnLFxyXG4gICdDaGF0ZWF1JyxcclxuICAnQWNyb3BvbGlzJyxcclxuICAnQ2F0aGVkcmFsJyxcclxuICAnVmlsbGEnLFxyXG4gICdGb3J0cmVzcycsXHJcbiAgJ0Jhc3Rpb24nLFxyXG4gICdMaWdodGhvdXNlJyxcclxuICAnQ2FzdGxlJyxcclxuICAnQ29saXNldW0nLFxyXG4gICdQeXJhbWlkJyxcclxuICAnTWFuc2lvbicsXHJcbiAgJ0VzdGF0ZScsXHJcbiAgJ011c2V1bScsXHJcbiAgJ1Rvd2VyJyxcclxuICAnSGFsbCcsXHJcbiAgJ0xpYnJhcnknLFxyXG4gICdHYWxsZXJ5JyxcclxuICAnQmF6YWFyJyxcclxuXTtcclxuXHJcbi8vIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGEgcmFuZG9tIGJ1aWxkaW5nIG5hbWUgYnkgY29tYmluaW5nIGFuIGFkamVjdGl2ZSBhbmQgYSBidWlsZGluZyBuYW1lXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQnVpbGRpbmdOYW1lKCkge1xyXG4gIGNvbnN0IHJhbmRvbUFkamVjdGl2ZSA9IGFkamVjdGl2ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWRqZWN0aXZlcy5sZW5ndGgpXTtcclxuICBjb25zdCByYW5kb21CdWlsZGluZ05hbWUgPSBidWlsZGluZ05hbWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJ1aWxkaW5nTmFtZXMubGVuZ3RoKV07XHJcbiAgcmV0dXJuIGAke2NhcGl0YWxpemVGaXJzdChyYW5kb21BZGplY3RpdmUpfSAke3JhbmRvbUJ1aWxkaW5nTmFtZX1gO1xyXG59XHJcblxyXG5cclxuY29uc3Qgbm91bnMgPSBbXHJcbiAgJ3NhbmN0dWFyeScsXHJcbiAgJ2NpdGFkZWwnLFxyXG4gICdoYXZlbicsXHJcbiAgJ21vbmFzdGVyeScsXHJcbiAgJ291dHBvc3QnLFxyXG4gICdvYnNlcnZhdG9yeScsXHJcbiAgJ3N0cm9uZ2hvbGQnLFxyXG4gICdwYWxhY2UnLFxyXG4gICd0ZW1wbGUnLFxyXG4gICdtYW5vcicsXHJcbl07XHJcblxyXG5jb25zdCB2ZXJicyA9IFtcclxuICAncHJvdmlkZXMnLFxyXG4gICdlbmhhbmNlcycsXHJcbiAgJ2ltYnVlcycsXHJcbiAgJ3JhZGlhdGVzJyxcclxuICAnZW1ib2RpZXMnLFxyXG4gICdpbnNwaXJlcycsXHJcbiAgJ2V2b2tlcycsXHJcbiAgJ2V4dWRlcycsXHJcbiAgJ2Jlc3Rvd3MnLFxyXG4gICdjcmVhdGVzJyxcclxuXTtcclxuXHJcbmNvbnN0IHByZXBvc2l0aW9ucyA9IFtcclxuICAnd2l0aCcsXHJcbiAgJ3Rocm91Z2gnLFxyXG4gICdhbWlkc3QnLFxyXG4gICdiZW5lYXRoJyxcclxuICAnYWJvdmUnLFxyXG4gICdhbG9uZ3NpZGUnLFxyXG5dO1xyXG5cclxuY29uc3QgY29uanVuY3Rpb25zID0gW1xyXG4gICdhbmQnLFxyXG4gICd3aGlsZScsXHJcbiAgJ2FzJyxcclxuICAnYWx0aG91Z2gnLFxyXG4gICd5ZXQnLFxyXG5dO1xyXG5cclxuLy8gRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYSByYW5kb20gYnVpbGRpbmcgZGVzY3JpcHRpb25cclxuZnVuY3Rpb24gZ2VuZXJhdGVCdWlsZGluZ0Rlc2NyaXB0aW9uKCkge1xyXG4gIGNvbnN0IHJhbmRvbUFkamVjdGl2ZSA9IGFkamVjdGl2ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWRqZWN0aXZlcy5sZW5ndGgpXTtcclxuICBjb25zdCByYW5kb21BZGplY3RpdmUyID0gYWRqZWN0aXZlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhZGplY3RpdmVzLmxlbmd0aCldO1xyXG5cclxuICBjb25zdCByYW5kb21Ob3VuID0gbm91bnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbm91bnMubGVuZ3RoKV07XHJcbiAgY29uc3QgcmFuZG9tVmVyYiA9IHZlcmJzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHZlcmJzLmxlbmd0aCldO1xyXG4gIGNvbnN0IHJhbmRvbVByZXBvc2l0aW9uID0gcHJlcG9zaXRpb25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHByZXBvc2l0aW9ucy5sZW5ndGgpXTtcclxuICBjb25zdCByYW5kb21Db25qdW5jdGlvbiA9IGNvbmp1bmN0aW9uc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb25qdW5jdGlvbnMubGVuZ3RoKV07XHJcblxyXG4gIGNvbnN0IHNlbnRlbmNlU3RydWN0dXJlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNik7IC8vIEhvdyBtYW55IHNlbnRlbmNlIHN0cnVjdHVyZXMgd2UgaGF2ZVxyXG5cclxuICBsZXQgZGVzY3JpcHRpb24gPSAnJztcclxuXHJcbiAgc3dpdGNoIChzZW50ZW5jZVN0cnVjdHVyZSkge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICBkZXNjcmlwdGlvbiA9IGAke3JhbmRvbUFkamVjdGl2ZX0gJHtyYW5kb21Ob3VufSB0aGF0ICR7cmFuZG9tVmVyYn0gYW4gYXVyYSBvZiBzcGxlbmRvci5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMTpcclxuICAgICAgZGVzY3JpcHRpb24gPSBgJHtjYXBpdGFsaXplRmlyc3QocmFuZG9tUHJlcG9zaXRpb24pfSBpdHMgJHtyYW5kb21BZGplY3RpdmV9IGFwcGVhcmFuY2UsIHRoZSAke3JhbmRvbU5vdW59ICR7cmFuZG9tVmVyYn0gYW4gYXVyYSBvZiAke3JhbmRvbUFkamVjdGl2ZTJ9LmA7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICBkZXNjcmlwdGlvbiA9IGAke2NhcGl0YWxpemVGaXJzdChyYW5kb21BZGplY3RpdmUpfSAke3JhbmRvbU5vdW59ICR7cmFuZG9tVmVyYn0gZ3JhY2VmdWxseSwgZXh1ZGluZyBhbiBlbmNoYW50aW5nIGF0bW9zcGhlcmUuYDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gYFRoZSAke3JhbmRvbU5vdW59IGlzICR7cmFuZG9tQWRqZWN0aXZlfSBhbmQgJHtyYW5kb21WZXJifSB3aXRoIGEgc2Vuc2Ugb2Ygd29uZGVyLmA7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICBkZXNjcmlwdGlvbiA9IGBBbWlkc3QgdGhlICR7cmFuZG9tQWRqZWN0aXZlfSBzdXJyb3VuZGluZ3MsIHRoZSAke3JhbmRvbU5vdW59ICR7cmFuZG9tVmVyYn0gdHJhbnF1aWxpdHkgYW5kIGJlYXV0eS5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTpcclxuICAgICAgZGVzY3JpcHRpb24gPSBgQW4gJHtyYW5kb21BZGplY3RpdmV9ICR7cmFuZG9tTm91bn0gdGhhdCAke3JhbmRvbVZlcmJ9IGFuIGF1cmEgb2YgY2hhcm0gJHtyYW5kb21Db25qdW5jdGlvbn0gbXlzdGlxdWUuYDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBkZXNjcmlwdGlvbiA9IGAke2NhcGl0YWxpemVGaXJzdChyYW5kb21BZGplY3RpdmUpfSAke3JhbmRvbU5vdW59IHRoYXQgJHtyYW5kb21WZXJifSBhbiBhdXJhIG9mIHNwbGVuZG9yLmA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGVzY3JpcHRpb247XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tQnVpbGRpbmcoKSB7XHJcbiAgLy8gUmFuZG9tbHkgc2VsZWN0IGEgbmFtZSwgZGVzY3JpcHRpb24sIGFuZCBjb3N0IGZvciB0aGUgYnVpbGRpbmdcclxuICBjb25zdCByYW5kb21OYW1lID0gZ2VuZXJhdGVCdWlsZGluZ05hbWUoKTtcclxuICBjb25zdCByYW5kb21EZXNjcmlwdGlvbiA9IGdlbmVyYXRlQnVpbGRpbmdEZXNjcmlwdGlvbigpO1xyXG5cclxuICAvLyBSYW5kb21seSBjaG9vc2UgMS0zIHJhbmRvbSByZXNvdXJjZXMgZm9yIHRoZSBjb3N0XHJcbiAgY29uc3QgbnVtUmVzb3VyY2VzID0gZ2V0UmFuZG9tTnVtYmVyKDEsIDMpO1xyXG4gIGNvbnN0IHJhbmRvbUNvc3RzID0ge307XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1SZXNvdXJjZXM7IGkrKykge1xyXG4gICAgLy8gV2UgZG9uJ3QgY2FyZSBhYm91dCByZXBlYXRzLCBpdCdzIHRoZSBzYW1lIGFzIHJvbGxpbmcgb25lIGZld2VyIGNvc3RcclxuICAgIGNvbnN0IHJhbmRvbVJlc291cmNlID0gcG9zc2libGVSZXNvdXJjZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGVSZXNvdXJjZXMubGVuZ3RoKV07XHJcbiAgICByYW5kb21Db3N0c1tyYW5kb21SZXNvdXJjZV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAgKiAoNSAtIG51bVJlc291cmNlcykpOyAvLyBGZXdlciByZXNvdXJjZXMgbWVhbnMgbW9yZSBleHBlbnNpdmVcclxuICB9XHJcblxyXG4gIC8vIDAtMSBjcmFmdGVkIHJlc291cmNlc1xyXG4gIGNvbnN0IG51bUNyYWZ0ZWRSZXNvdXJjZXMgPSBnZXRSYW5kb21OdW1iZXIoMCwgMSk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DcmFmdGVkUmVzb3VyY2VzOyBpKyspIHtcclxuICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgcmVwZWF0cywgaXQncyB0aGUgc2FtZSBhcyByb2xsaW5nIG9uZSBmZXdlciBjb3N0XHJcbiAgICBjb25zdCByYW5kb21SZXNvdXJjZSA9IHBvc3NpYmxlQ3JhZnRlZFJlc291cmNlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZUNyYWZ0ZWRSZXNvdXJjZXMubGVuZ3RoKV07XHJcbiAgICByYW5kb21Db3N0c1tyYW5kb21SZXNvdXJjZV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gR2VuZXJhdGUgcmFuZG9tIGVmZmVjdHNcclxuICBjb25zdCByYW5kb21FZmZlY3RzID0ge307XHJcbiAgY29uc3QgbnVtRWZmZWN0cyA9IGdldFJhbmRvbU51bWJlcigwLCAzKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUVmZmVjdHM7IGkrKykge1xyXG4gICAgY29uc3QgcmFuZG9tUmVzb3VyY2UgPSBwb3NzaWJsZVJlc291cmNlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZVJlc291cmNlcy5sZW5ndGgpXTtcclxuICAgIGNvbnN0IHJhbmRvbUVmZmVjdFZhbHVlID0gTWF0aC5mbG9vcihnZXRSYW5kb21OdW1iZXIoMzAsIDIwMCkpOyAvLyBBZGp1c3QgdGhlIHJhbmdlIGFzIG5lZWRlZFxyXG4gICAgcmFuZG9tRWZmZWN0c1tyYW5kb21SZXNvdXJjZV0gPSByYW5kb21FZmZlY3RWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8vIEdlbmVyYXRlIHJhbmRvbSBib29zdHNcclxuICBjb25zdCByYW5kb21Cb29zdHMgPSB7fTtcclxuICBjb25zdCBudW1Cb29zdHMgPSBnZXRSYW5kb21OdW1iZXIobnVtRWZmZWN0cyA9PT0gMCA/IDEgOiAwLCAzKTsgLy8gRW5zdXJlIHRoZSBidWlsZGluZyBkb2VzICpzb21ldGhpbmcqXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Cb29zdHM7IGkrKykge1xyXG4gICAgY29uc3QgcmFuZG9tUmVzb3VyY2UgPSBwb3NzaWJsZVJlc291cmNlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZVJlc291cmNlcy5sZW5ndGgpXTtcclxuICAgIGNvbnN0IHJhbmRvbUJvb3N0VmFsdWUgPSBnZXRSYW5kb21OdW1iZXIoMS4wMSwgMS4yKTsgLy8gQWRqdXN0IHRoZSByYW5nZSBhcyBuZWVkZWRcclxuICAgIHJhbmRvbUJvb3N0c1tyYW5kb21SZXNvdXJjZV0gPSByYW5kb21Cb29zdFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIGEgcmFuZG9tIGJ1aWxkaW5nIG9iamVjdFxyXG4gIGNvbnN0IHJhbmRvbUJ1aWxkaW5nID0ge1xyXG4gICAgbmFtZTogcmFuZG9tTmFtZSxcclxuICAgIGRlc2NyaXB0aW9uOiByYW5kb21EZXNjcmlwdGlvbixcclxuICAgIGJhc2Vjb3N0OiByYW5kb21Db3N0cyxcclxuICAgIGNvc3Q6IHJhbmRvbUNvc3RzLFxyXG4gICAgZWZmZWN0czogcmFuZG9tRWZmZWN0cyxcclxuICAgIGJvb3N0OiByYW5kb21Cb29zdHMsXHJcbiAgICBjb3VudDogMCxcclxuICAgIHJhdGlvOiBnZXRSYW5kb21OdW1iZXIoMS4zLCAxLjYpLCAvLyBZb3UgY2FuIGFkanVzdCB0aGlzIGFzIG5lZWRlZFxyXG4gICAgZW1vamk6IGdldFJhbmRvbUVtb2ppKCksIC8vIFlvdSBjYW4gdXNlIGFueSBlbW9qaSBvciBpY29uXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHJhbmRvbUJ1aWxkaW5nO1xyXG59XHJcbmV4cG9ydHMuZ2VuZXJhdGVSYW5kb21CdWlsZGluZyA9IGdlbmVyYXRlUmFuZG9tQnVpbGRpbmc7IiwiLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRlcmlhbFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Q3JhZnRlZFJlc291cmNlKG1hdGVyaWFsLCBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcblxyXG4gICAgbWF0ZXJpYWwgPSBtYXRlcmlhbC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgLy8gTG9hZCBjcmFmdGVkUmVzb3VyY2VzIGlmIG5vdCBwcm92aWRlZFxyXG4gICAgaWYgKCFjcmFmdGVkUmVzb3VyY2VzKSBjcmFmdGVkUmVzb3VyY2VzID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKS5jcmFmdGVkUmVzb3VyY2VzO1xyXG5cclxuICAgIGlmIChjcmFmdGVkUmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkgcmV0dXJuIGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlIHx8IDA7XHJcbiAgICBlbHNlIHJldHVybiAwO1xyXG5cclxufVxyXG5leHBvcnRzLmdldENyYWZ0ZWRSZXNvdXJjZSA9IGdldENyYWZ0ZWRSZXNvdXJjZTtcclxuIiwiY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbi8vIGNvbnN0IHsgY3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuXHJcbi8vIEdldCBmdW5jdGlvbiBmb3IgbWF0ZXJpYWxzXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBtYXRlcmlhbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWxcclxuICogQHJldHVybnMgVmFsdWUgb2YgbWF0ZXJpYWxcclxuKi9cclxuZnVuY3Rpb24gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykge1xyXG4gICAgaWYgKCFyZXNvdXJjZXMpIHJlc291cmNlcyA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXM7XHJcbiAgICBpZiAocmVzb3VyY2VzLmhhc093blByb3BlcnR5KG1hdGVyaWFsKSkge1xyXG4gICAgICAgIHJldHVybiByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBtYXRlcmlhbDpcIiwgbWF0ZXJpYWwpOyAgLy8gRm9yIGRlYnVnZ2luZ1xyXG4gICAgICAgIHJldHVybiBnZXRDcmFmdGVkUmVzb3VyY2UobWF0ZXJpYWwsIG51bGwpO1xyXG5cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdldE1hdGVyaWFsID0gZ2V0TWF0ZXJpYWw7IiwiY29uc3QgeyBoYXNQcmVzdGlnZSwgZ2V0TGV2ZWxPZlByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIGlzUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuXHJcblxyXG5cclxuXHJcbmxldCBhbGxWaXNpYmxlQnV0dG9ucyA9IG5ldyBTZXQoWydnYXRoZXJTdGlja3MnXSk7XHJcbmV4cG9ydHMuYWxsVmlzaWJsZUJ1dHRvbnMgPSBhbGxWaXNpYmxlQnV0dG9ucztcclxuXHJcblxyXG4vLyBDYWxjdWxhdGUgdGhlIGZpbmFsIG51bWJlciBvZiBjcmFmdGVkIGdvb2RzIGZyb20gYm9udXNlc1xyXG5mdW5jdGlvbiBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSkge1xyXG4gICAgbGV0IHRvdGFsID0gMTtcclxuICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlS2V5KSkge1xyXG4gICAgICAgICAgICBsZXQgc2tpbGxSYXRpbyA9IDEuMDY7XHJcbiAgICAgICAgICAgIHZhciBtdWx0ID0gMSArIChNYXRoLnBvdyhza2lsbFJhdGlvLCBza2lsbHNbc2tpbGxdLmxldmVsKSAtIDEpIC8gMTAwO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIk11bHRpcGx5aW5nIGdhaW4gYnkgXCIgKyBtdWx0KTtcclxuICAgICAgICAgICAgdG90YWwgKj0gbXVsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcblxyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBnZXRBZmZlY3RlZFJlc291cmNlcyhza2lsbCkge1xyXG4gICAgaWYgKHNraWxsc1tza2lsbF0pIHtcclxuICAgICAgICByZXR1cm4gc2tpbGxzW3NraWxsXS5hZmZlY3RlZFJlc291cmNlcztcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsOyAgLy8gb3IgYW4gZW1wdHkgYXJyYXkgW10sIGJhc2VkIG9uIHlvdXIgcHJlZmVyZW5jZVxyXG59XHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsIFxyXG4gKiBAcmV0dXJucyBNYXggb2YgbWF0ZXJpYWwgb3IgSW5maW5pdHlcclxuICovXHJcbmZ1bmN0aW9uIGdldE1heChtYXRlcmlhbCkge1xyXG4gICAgaWYgKGlzUmVzb3VyY2UobWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgbGV0IGJhc2VNYXggPSByZXNvdXJjZXNbbWF0ZXJpYWxdLm1heDsgLy8gU3RhdGljIGJhc2UgbWF4IHZhbHVlXHJcbiAgICAgICAgbGV0IG1heCA9IGJhc2VNYXg7XHJcblxyXG4gICAgICAgIGlmIChoYXNQcmVzdGlnZSgnc3RvcmFnZVNwYWNlJykgJiYgbWF0ZXJpYWwgIT09ICdjbG9uZXMnKSB7XHJcbiAgICAgICAgICAgIG1heCA9IGJhc2VNYXggKiAoMS4wNSAqIGdldExldmVsT2ZQcmVzdGlnZSgnc3RvcmFnZVNwYWNlJykpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobWF0ZXJpYWwgPT09ICdjbG9uZXMnICYmIGhhc1ByZXN0aWdlKCdtYXhDbG9uZXMnKSkge1xyXG4gICAgICAgICAgICBtYXggPSBiYXNlTWF4ICsgZ2V0TGV2ZWxPZlByZXN0aWdlKCdtYXhDbG9uZXMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtYXg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNsZWFyU2lkZWJhcigpIHtcclxuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc291cmNlc1wiKTtcclxuICAgIHNpZGViYXIuaW5uZXJIVE1MID0gJyc7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpc0J1dHRvbklkVmlzaWJsZShpZCkge1xyXG4gICAgcmV0dXJuIGFsbFZpc2libGVCdXR0b25zLmhhcyhpZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZpc2libGVCdXR0b24oaWQpIHtcclxuICAgIGFsbFZpc2libGVCdXR0b25zLmFkZChpZCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZ2V0TWF4LFxyXG4gICAgY2FsY0NyYWZ0Qm9udXMsXHJcbiAgICBpc0J1dHRvbklkVmlzaWJsZSxcclxuICAgIHNldFZpc2libGVCdXR0b24sXHJcbiAgICBjbGVhclNpZGViYXIsXHJcbn07XHJcblxyXG4iLCIvKipcclxuICogQSBtYXAgb2YgYWxsIGpvYnMgdGhhdCByZXF1aXJlIGEgcG9uZGVyIHRvIGJlIHVubG9ja2VkXHJcbiAqXHJcbiAqIEpvYjogUmVxdWlyZWRQb25kZXJcclxuICovXHJcbmNvbnN0IGpvYlJlcXVpcmVkUG9uZGVycyA9IHtcclxuICAgICd0aGlua2luZyc6ICd0aGlua2luZycsXHJcbiAgICAnZmlzaGluZyc6ICdmaXNoaW5nJyxcclxuICAgICdzbWl0aGluZyc6ICdub3QtdW5sb2NrYWJsZScsXHJcbiAgICAnZmFybWluZyc6ICdhZ3JpY3VsdHVyZScsXHJcbiAgICAnY29tYmF0JzogJ2NvbWJhdFRhYicsXHJcbiAgICAnaHVudGluZyc6ICdodW50aW5nJ1xyXG59O1xyXG5leHBvcnRzLmpvYlJlcXVpcmVkUG9uZGVycyA9IGpvYlJlcXVpcmVkUG9uZGVycztcclxuIiwiLy8gQHRzLW5vY2hlY2tcclxuLy8gREVQRU5EUyBPTjogc2tpbGxzLmpzLCBwb25kZXIuanNcclxuY29uc3QgeyBza2lsbHMgfSA9IHJlcXVpcmUoJy4vanNvbi9za2lsbHMnKTtcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuXHJcblxyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcbmNvbnN0IHsgaXNQb25kZXJlZCB9ID0gcmVxdWlyZShcIi4vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyB0cmlnZ2VyRmxvYXRVcFRleHQgfSA9IHJlcXVpcmUoJy4vdHJpZ2dlckZsb2F0VXBUZXh0Jyk7XHJcblxyXG4vKiBKT0JTIEZVTkNUSU9OQUxJVFkgKi9cclxuXHJcbmNvbnN0IGpvYkF1ZGlvID0gbmV3IEF1ZGlvKCcuL2F1ZGlvL2pvYi53YXYnKTtcclxuXHJcbmNvbnN0IGpvYkNvdW50cyA9IHt9O1xyXG5mb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgIGpvYkNvdW50c1tza2lsbF0gPSAwO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IGpvYnNUYWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9ic1RhYicpO1xyXG5cclxuT2JqZWN0LmtleXMoc2tpbGxzKS5mb3JFYWNoKHNraWxsID0+IHtcclxuICAgIGNvbnN0IGpvYkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgam9iRGl2LmNsYXNzTGlzdC5hZGQoJ2pvYi1idXR0b24nKTtcclxuICAgIGpvYkRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJywgc2tpbGwpO1xyXG4gICAgam9iRGl2LmlkID0gJ2pvYi1idXR0b24tJyArIHNraWxsO1xyXG5cclxuICAgIGNvbnN0IGRlY3JlbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGVjcmVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2J0bi1kZWNyZW1lbnQnKTtcclxuICAgIGRlY3JlbWVudERpdi50ZXh0Q29udGVudCA9ICctJztcclxuICAgIGpvYkRpdi5hcHBlbmRDaGlsZChkZWNyZW1lbnREaXYpO1xyXG5cclxuICAgIGNvbnN0IGpvYk5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgam9iTmFtZVNwYW4uY2xhc3NMaXN0LmFkZCgnam9iLW5hbWUnKTtcclxuICAgIGpvYk5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7c2tpbGwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBza2lsbC5zbGljZSgxKX06IDBgO1xyXG4gICAgam9iRGl2LmFwcGVuZENoaWxkKGpvYk5hbWVTcGFuKTtcclxuXHJcbiAgICBjb25zdCBpbmNyZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGluY3JlbWVudERpdi5jbGFzc0xpc3QuYWRkKCdidG4taW5jcmVtZW50Jyk7XHJcbiAgICBpbmNyZW1lbnREaXYudGV4dENvbnRlbnQgPSAnKyc7XHJcbiAgICBqb2JEaXYuYXBwZW5kQ2hpbGQoaW5jcmVtZW50RGl2KTtcclxuXHJcbiAgICBqb2JzVGFiLmFwcGVuZENoaWxkKGpvYkRpdik7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1pbmNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBqb2JUeXBlID0gdGhpcy5jbG9zZXN0KCcuam9iLWJ1dHRvbicpLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBqb2JBdWRpby5wbGF5KCk7XHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnLCByZXNvdXJjZXMpID4gZ2V0VG90YWxKb2JzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYOyAvLyBYIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTsgLy8gWSBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGlmZmVyZW5jZSA9IGdldE1hdGVyaWFsKCdjbG9uZXMnLCByZXNvdXJjZXMpIC0gZ2V0VG90YWxKb2JzKCk7XHJcbiAgICAgICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0gKz0gZGlmZmVyZW5jZTtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCBgKyR7ZGlmZmVyZW5jZX0gd29ya2Vyc2AsICdncmVlbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFkZCAxMCBvciBtYXggY2xvbmVzXHJcbiAgICAgICAgICAgICAgICBsZXQgZGlmZmVyZW5jZSA9IE1hdGgubWluKDEwLCBnZXRNYXRlcmlhbCgnY2xvbmVzJywgcmVzb3VyY2VzKSAtIGdldFRvdGFsSm9icygpKTtcclxuICAgICAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSArPSBkaWZmZXJlbmNlO1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArJHtkaWZmZXJlbmNlfSB3b3JrZXJzYCwgJ2dyZWVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBqb2JDb3VudHNbam9iVHlwZV0rKztcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJGbG9hdFVwVGV4dCh4LCB5LCAnKzEgd29ya2VyJywgJ2dyZWVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKGpvYlR5cGUsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoam9iVHlwZSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRvdGFsKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHdvcmtlcnNEaXN0cmlidXRpb24pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1kZWNyZW1lbnQnKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgam9iVHlwZSA9IHRoaXMuY2xvc2VzdCgnLmpvYi1idXR0b24nKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtam9iJyk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYOyAvLyBYIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LnBhZ2VZOyAvLyBZIGNvb3JkaW5hdGUgb2YgdGhlIGNsaWNrXHJcbiAgICAgICAgam9iQXVkaW8ucGxheSgpO1xyXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICBsZXQgbnVtV29ya2VycyA9IGpvYkNvdW50c1tqb2JUeXBlXTtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pvYlR5cGVdID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChudW1Xb3JrZXJzID4gMCkgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGAtJHtudW1Xb3JrZXJzfSB3b3JrZXJzYCwgJ3JlZCcpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuY3RybEtleSkge1xyXG4gICAgICAgICAgICAvLyBTdWJ0cmFjdCAxMCBvciBtYXggY2xvbmVzXHJcbiAgICAgICAgICAgIGxldCBkaWZmZXJlbmNlID0gTWF0aC5taW4oMTAsIGpvYkNvdW50c1tqb2JUeXBlXSk7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXSAtPSBkaWZmZXJlbmNlO1xyXG4gICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYC0ke2RpZmZlcmVuY2V9IHdvcmtlcnNgLCAncmVkJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChqb2JDb3VudHNbam9iVHlwZV0gPiAwKSB7XHJcbiAgICAgICAgICAgIGpvYkNvdW50c1tqb2JUeXBlXS0tO1xyXG5cclxuICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksICctMSB3b3JrZXInLCAncmVkJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBkaXN0cmlidXRlV29ya2Vycyhqb2JUeXBlLCBqb2JDb3VudHNbam9iVHlwZV0pO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXkoam9iVHlwZSk7XHJcbiAgICAgICAgdXBkYXRlVG90YWwoKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXRUb3RhbEpvYnMoKSB7XHJcbiAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgZm9yIChsZXQgaiBpbiBqb2JDb3VudHMpIHtcclxuICAgICAgICB0b3RhbCArPSBqb2JDb3VudHNbal07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbn1cclxuXHJcbi8vIEdsb2JhbCBmb3Igd2hpY2ggcmVzb3VyY2UgZWFjaCBjbG9uZSBnYXRoZXJzXHJcbmxldCB3b3JrZXJzRGlzdHJpYnV0aW9uID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBkaXN0cmlidXRlV29ya2Vycyhza2lsbCwgdG90YWxXb3JrZXJzKSB7XHJcbiAgICBpZiAoIXNraWxsc1tza2lsbF0pIHJldHVybiBudWxsOyAgLy8gUmV0dXJuIG51bGwgaWYgdGhlIHNraWxsIGRvZXNuJ3QgZXhpc3RcclxuXHJcbiAgICBsZXQgYWZmZWN0ZWRSZXNvdXJjZXMgPSBza2lsbHNbc2tpbGxdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG5cclxuICAgIC8vIEZpbHRlciBhZmZlY3RlZFJlc291cmNlcyB0byBvbmx5IGNvbnRhaW4ga2V5cyB0aGF0IGFyZSBwcmVzZW50IGluIHRoZSByZXNvdXJjZXMgbWFwXHJcbiAgICBhZmZlY3RlZFJlc291cmNlcyA9IGFmZmVjdGVkUmVzb3VyY2VzLmZpbHRlcihyZXNvdXJjZSA9PiByZXNvdXJjZSBpbiByZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIGxldCBhO1xyXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhZmZlY3RlZFJlc291cmNlcy5sZW5ndGg7IGEgPSBhZmZlY3RlZFJlc291cmNlc1tpXSkge1xyXG5cclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhhKTtcclxuICAgIC8vICAgICBpZiAoIXJlc291cmNlc1thXSkge1xyXG5cclxuICAgIC8vICAgICAgICAgY29uc3QgaW5kZXggPSBhZmZlY3RlZFJlc291cmNlcy5pbmRleE9mKGEpO1xyXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhhLCBpbmRleCk7XHJcbiAgICAvLyAgICAgICAgIGxldCB4ID0gYWZmZWN0ZWRSZXNvdXJjZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICArK2k7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gY29uc29sZS5sb2coYWZmZWN0ZWRSZXNvdXJjZXMpO1xyXG4gICAgbGV0IG51bWJlck9mUmVzb3VyY2VzID0gYWZmZWN0ZWRSZXNvdXJjZXMubGVuZ3RoO1xyXG5cclxuICAgIC8vIEluaXRpYWwgZXZlbiBkaXN0cmlidXRpb25cclxuICAgIGxldCBwZXJSZXNvdXJjZSA9IE1hdGguZmxvb3IodG90YWxXb3JrZXJzIC8gbnVtYmVyT2ZSZXNvdXJjZXMpO1xyXG5cclxuICAgIC8vIEV2ZW5seSBkaXN0cmlidXRlIHdvcmtlcnMgYW1vbmcgdGhlIGFmZmVjdGVkIHJlc291cmNlc1xyXG4gICAgZm9yIChsZXQgcmVzb3VyY2Ugb2YgYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICB3b3JrZXJzRGlzdHJpYnV0aW9uLnNldChyZXNvdXJjZSwgcGVyUmVzb3VyY2UpO1xyXG4gICAgICAgIGlmIChwZXJSZXNvdXJjZSA+IDApIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoc2tpbGwsIHJlc291cmNlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGlzdHJpYnV0ZSBhbnkgcmVtYWluaW5nIHdvcmtlcnMgZHVlIHRvIHJvdW5kaW5nXHJcbiAgICBsZXQgcmVtYWluaW5nV29ya2VycyA9IHRvdGFsV29ya2VycyAtIChwZXJSZXNvdXJjZSAqIG51bWJlck9mUmVzb3VyY2VzKTtcclxuICAgIGZvciAobGV0IHJlc291cmNlIG9mIGFmZmVjdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgaWYgKHJlbWFpbmluZ1dvcmtlcnMgPiAwKSB7XHJcbiAgICAgICAgICAgIHdvcmtlcnNEaXN0cmlidXRpb24uc2V0KHJlc291cmNlLCB3b3JrZXJzRGlzdHJpYnV0aW9uLmdldChyZXNvdXJjZSkgKyAxKTtcclxuICAgICAgICAgICAgcmVtYWluaW5nV29ya2Vycy0tO1xyXG4gICAgICAgICAgICBtb3ZlQmFsbEZyb21Kb2JUb1Jlc291cmNlKHNraWxsLCByZXNvdXJjZSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cod29ya2Vyc0Rpc3RyaWJ1dGlvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2Uoam9iVHlwZSwgYWZmZWN0ZWRSZXNvdXJjZSkge1xyXG4gICAgLy8gRmluZCB0aGUgam9iIGJ1dHRvblxyXG4gICAgY29uc3Qgam9iQnV0dG9uID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpKVxyXG4gICAgICAgIC5maW5kKGJ0biA9PiBidG4uZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpID09PSBqb2JUeXBlKTtcclxuXHJcbiAgICBpZiAoIWpvYkJ1dHRvbiB8fCBqb2JCdXR0b24uc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47IC8vIEpvYiBidXR0b24gbm90IGZvdW5kXHJcblxyXG5cclxuICAgIGNvbnN0IHJlc291cmNlRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByZXNvdXJjZS0ke2FmZmVjdGVkUmVzb3VyY2V9YCk7XHJcbiAgICBpZiAoIXJlc291cmNlRGlzcGxheSB8fCByZXNvdXJjZURpc3BsYXkuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47IC8vIFJlc291cmNlIGRpc3BsYXkgbm90IGZvdW5kXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHBvc2l0aW9uc1xyXG4gICAgY29uc3Qgam9iQnV0dG9uUmVjdCA9IGpvYkJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IHJlc291cmNlUmVjdCA9IHJlc291cmNlRGlzcGxheS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBiYWxsIGVsZW1lbnRcclxuICAgIGNvbnN0IGJhbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGJhbGwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgYmFsbC5zdHlsZS53aWR0aCA9ICcxMHB4JztcclxuICAgIGJhbGwuc3R5bGUuaGVpZ2h0ID0gJzEwcHgnO1xyXG4gICAgYmFsbC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnNTAlJztcclxuICAgIGJhbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcclxuICAgIGJhbGwuc3R5bGUub3BhY2l0eSA9ICcuOCc7XHJcbiAgICBiYWxsLnN0eWxlLmxlZnQgPSBgJHtqb2JCdXR0b25SZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWH1weGA7XHJcbiAgICBiYWxsLnN0eWxlLnRvcCA9IGAke2pvYkJ1dHRvblJlY3QudG9wICsgd2luZG93LnNjcm9sbFl9cHhgO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChiYWxsKTtcclxuXHJcbiAgICAvLyBBbmltYXRlIHRoZSBiYWxsXHJcbiAgICBjb25zdCBhbmltYXRpb24gPSBiYWxsLmFuaW1hdGUoW1xyXG4gICAgICAgIHsgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7cmVzb3VyY2VSZWN0LmxlZnQgLSBqb2JCdXR0b25SZWN0LmxlZnR9cHgsICR7cmVzb3VyY2VSZWN0LnRvcCAtIGpvYkJ1dHRvblJlY3QudG9wfXB4KWAgfVxyXG4gICAgXSwge1xyXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLCAvLyBBbmltYXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgLy8gZmlsbDogJ2ZvcndhcmRzJyAvLyBLZWVwIHRoZSBiYWxsIGF0IHRoZSBlbmQgcG9zaXRpb24gYWZ0ZXIgYW5pbWF0aW9uXHJcbiAgICAgICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKC4yMywtMC4zNCwwLDEuMDYpJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRXZlbnQgbGlzdGVuZXIgdG8gaGlkZSB0aGUgYmFsbCBhZnRlciBhbmltYXRpb25cclxuICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcclxuICAgICAgICBiYWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldFdvcmtlcnMocmVzb3VyY2VOYW1lKSB7XHJcbiAgICByZXR1cm4gd29ya2Vyc0Rpc3RyaWJ1dGlvbi5nZXQocmVzb3VyY2VOYW1lKTtcclxufVxyXG5cclxuLy8gY29uc3QgYWxsSm9iQnV0dG9uYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuam9iLWJ1dHRvbicpO1xyXG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5KGpvYlR5cGUpIHtcclxuICAgIGNvbnN0IHRoaXNKb2JCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuam9iLWJ1dHRvbltkYXRhLWpvYj1cIiR7am9iVHlwZX1cIl1gKTtcclxuICAgIGlmICghdGhpc0pvYkJ1dHRvbikgY29uc29sZS53YXJuKFwiQ291bGRuJ3QgZmluZCBqb2IgYnV0dG9uIGZvciBqb2I6IFwiLCBqb2JUeXBlKTtcclxuICAgIGNvbnN0IGpvYkVsZW1lbnQgPSB0aGlzSm9iQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoYC5qb2ItbmFtZWApO1xyXG4gICAgaWYgKGpvYkVsZW1lbnQpIGpvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHtqb2JUeXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgam9iVHlwZS5zbGljZSgxKX06ICR7am9iQ291bnRzW2pvYlR5cGVdfWA7XHJcblxyXG4gICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS51cGRhdGVFbW9qaURpc3BsYXkoKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgdG90YWwgYXNzaWduZWQgY2xvbmVzIGNvdW50ZXJcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvdGFsKCkge1xyXG4gICAgY29uc3QgdG90YWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2pvYnMtdG90YWwnKTtcclxuICAgIHRvdGFsRWxlbWVudC50ZXh0Q29udGVudCA9IFwiQXNzaWduZWQgQ2xvbmVzOiBcIiArIGdldFRvdGFsSm9icygpICsgXCIgLyBcIiArIGdldE1heCgnY2xvbmVzJyk7XHJcbn1cclxuXHJcblxyXG5sZXQgc3RhcnRCdXR0b24gPSBudWxsO1xyXG5sZXQgY29ubmVjdGlvbnMgPSBuZXcgTWFwKCk7ICAvLyBNYXAgdG8gc3RvcmUgY29ubmVjdGlvbnNcclxubGV0IG1hbmFnZW1lbnQgPSB7ICdjb25uZWN0aW9ucyc6IGNvbm5lY3Rpb25zLCAnbWlucyc6IHt9LCAnbWF4ZXMnOiB7fSwgJ3RyaWdnZXJzJzoge30gfTtcclxubGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lQ2FudmFzJyk7XHJcblxyXG5mdW5jdGlvbiBzZXRDb25uZWN0aW9ucyhuZXdDb25uZWN0aW9ucykge1xyXG4gICAgY29ubmVjdGlvbnMgPSBuZXdDb25uZWN0aW9ucztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29ubmVjdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gY29ubmVjdGlvbnM7XHJcbn1cclxuXHJcbi8vIGlmIChjYW52YXMpIHtcclxuLy8gQHRzLWlnbm9yZVxyXG5sZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbi8vIEB0cy1pZ25vcmVcclxuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuLy8gfVxyXG5cclxuLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuLy8gICAgIGxldCBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpvYi1idXR0b24nKTtcclxuXHJcbi8vICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuLy8gICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4vLyAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLmJ0bi1kZWNyZW1lbnQnKSB8fCBlLnRhcmdldC5jbG9zZXN0KCcuYnRuLWluY3JlbWVudCcpKSByZXR1cm47XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoIWlzUG9uZGVyZWQoJ21hbmFnZW1lbnQnKSkgcmV0dXJuO1xyXG5cclxuLy8gICAgICAgICAgICAgbGV0IGpvYkJ1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5qb2ItYnV0dG9uJyk7XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoam9iQnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0QnV0dG9uKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24gPSBqb2JCdXR0b247XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XHJcbi8vICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0QnV0dG9uLmlkICYmIGpvYkJ1dHRvbi5pZCkgeyAvLyBFbnN1cmUgYm90aCBJRHMgYXJlIGF2YWlsYWJsZVxyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLnNldChzdGFydEJ1dHRvbi5pZCwgam9iQnV0dG9uLmlkKTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gRHJhdyBhbGwgY29ubmVjdGlvbnNcclxuLy8gICAgICAgICAgICAgICAgICAgICBkcmF3QWxsQ29ubmVjdGlvbnMoKTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXRcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdGFydEJ1dHRvbiA9IG51bGw7XHJcbi8vICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ01pc3NpbmcgSUQgZm9yIG9uZSBvZiB0aGUgYnV0dG9uczonLCBzdGFydEJ1dHRvbiwgam9iQnV0dG9uKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NsaWNrZWQgZWxlbWVudCBpcyBub3QgaW5zaWRlIGEgam9iIGJ1dHRvbjonLCBlLnRhcmdldCk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9KTtcclxuXHJcbi8vICAgICB9KTtcclxuXHJcbi8vICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkge1xyXG4vLyAgICAgICAgIGlmIChzdGFydEJ1dHRvbikge1xyXG4vLyAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBEcmF3IGV4aXN0aW5nIGNvbm5lY3Rpb25zXHJcbi8vICAgICAgICAgICAgIGRyYXdBbGxDb25uZWN0aW9ucygpO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gRHJhdyB0aGUgbGluZSBmcm9tIHN0YXJ0QnV0dG9uIHRvIGN1cnJlbnQgbW91c2UgcG9zaXRpb25cclxuLy8gICAgICAgICAgICAgZHJhd0xpbmUoc3RhcnRCdXR0b24sIGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcblxyXG5mdW5jdGlvbiBkcmF3QWxsQ29ubmVjdGlvbnMoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICB0cnkge1xyXG5cclxuXHJcbiAgICAgICAgZm9yIChsZXQgW29sZElkLCBuZXdJZF0gb2YgY29ubmVjdGlvbnMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGxldCBvbGRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvbGRJZCk7XHJcbiAgICAgICAgICAgIGxldCBuZXdCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuZXdJZCk7XHJcbiAgICAgICAgICAgIGxldCByZWN0ID0gbmV3QnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBsZXQgbmV3WCA9IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyO1xyXG4gICAgICAgICAgICBsZXQgbmV3WSA9IDA7XHJcbiAgICAgICAgICAgIGlmIChyZWN0LmJvdHRvbSA+IG9sZEJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20pIG5ld1kgPSBuZXdCdXR0b24ub2Zmc2V0VG9wIC0gMTA7XHJcbiAgICAgICAgICAgIGVsc2UgbmV3WSA9IG5ld0J1dHRvbi5vZmZzZXRUb3AgKyBuZXdCdXR0b24ub2Zmc2V0SGVpZ2h0ICsgMTA7XHJcbiAgICAgICAgICAgIGRyYXdMaW5lKG9sZEJ1dHRvbiwgbmV3WCwgbmV3WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGNvbnNvbGUud2FybignZHJhd0FsbENvbm5lY3Rpb25zJywgZXJyb3IpOyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdBcnJvd2hlYWQoY29udGV4dCwgZnJvbVgsIGZyb21ZLCB0b1gsIHRvWSwgcmFkaXVzKSB7XHJcbiAgICBsZXQgeF9jZW50ZXIgPSB0b1g7XHJcbiAgICBsZXQgeV9jZW50ZXIgPSB0b1k7XHJcblxyXG4gICAgbGV0IGFuZ2xlO1xyXG4gICAgbGV0IHg7XHJcbiAgICBsZXQgeTtcclxuXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cclxuICAgIGFuZ2xlID0gTWF0aC5hdGFuMih0b1kgLSBmcm9tWSwgdG9YIC0gZnJvbVgpO1xyXG4gICAgeCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSArIHhfY2VudGVyO1xyXG4gICAgeSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSArIHlfY2VudGVyO1xyXG5cclxuICAgIGNvbnRleHQubW92ZVRvKHgsIHkpO1xyXG5cclxuICAgIGFuZ2xlICs9ICgxIC8gMykgKiAoMiAqIE1hdGguUEkpO1xyXG4gICAgeCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSArIHhfY2VudGVyO1xyXG4gICAgeSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSArIHlfY2VudGVyO1xyXG5cclxuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xyXG5cclxuICAgIGFuZ2xlICs9ICgxIC8gMykgKiAoMiAqIE1hdGguUEkpO1xyXG4gICAgeCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSArIHhfY2VudGVyO1xyXG4gICAgeSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSArIHlfY2VudGVyO1xyXG5cclxuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xyXG5cclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgY29udGV4dC5maWxsKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdMaW5lKHN0YXJ0RWxlbWVudCwgZW5kWCwgZW5kWSkge1xyXG4gICAgbGV0IHJlY3QgPSBzdGFydEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAvLyBsZXQgb2Zmc2V0ID0gTWF0aC5yYW5kb20oKSAqIDEwMCArIDEwMFxyXG4gICAgbGV0IHN0YXJ0WCA9IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyOyAvLyAtIG9mZnNldDtcclxuICAgIC8vIGVuZFggLT0gb2Zmc2V0O1xyXG4gICAgbGV0IHN0YXJ0WSA9IHNjcm9sbFkgKyByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcclxuXHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHgubW92ZVRvKHN0YXJ0WCwgc3RhcnRZKTtcclxuICAgIGN0eC5saW5lVG8oZW5kWCwgZW5kWSk7XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgLy8gRHJhdyBhcnJvdyBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lXHJcbiAgICBkcmF3QXJyb3doZWFkKGN0eCwgc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFksIDEwKTsgIC8vIGFkanVzdCB0aGUgbGFzdCBwYXJhbWV0ZXIgZm9yIGFycm93IHNpemVcclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJKb2JBc3NpZ25tZW50cygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGNvbm5lY3Rpb25zID0gbmV3IE1hcCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzKCkge1xyXG4gICAgLy8gRm9yIGVhY2ggY29ubmVjdGlvblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gY29ubmVjdGlvbnMuZW50cmllcygpO1xyXG4gICAgICAgIGlmIChlbnRyaWVzID09PSB1bmRlZmluZWQpIHRocm93ICdFbnRyaWVzIGlzIHVuZGVmaW5lZCc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IFtvbGRKb2JJZCwgbmV3Sm9iSWRdIG9mIGVudHJpZXMpIHtcclxuICAgICAgICAgICAgbGV0IG9sZEpvYkJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9sZEpvYklkKTtcclxuICAgICAgICAgICAgbGV0IGRhdGFKb2IgPSBvbGRKb2JCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWpvYicpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgb2xkSWQgPSBvbGRKb2JJZC5yZXBsYWNlKCdqb2ItYnV0dG9uLScsICcnKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3SWQgPSBuZXdKb2JJZC5yZXBsYWNlKCdqb2ItYnV0dG9uLScsICcnKTtcclxuICAgICAgICAgICAgbGV0IG1heGVkT3V0ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXNvdXJjZUFycmF5ID0gc2tpbGxzW2RhdGFKb2JdLmFmZmVjdGVkUmVzb3VyY2VzO1xyXG4gICAgICAgICAgICBpZiAoIXJlc291cmNlQXJyYXkpIHJldHVybjtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VBcnJheSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiByZXNvdXJjZUFycmF5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocik7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VzW3JdICE9PSB1bmRlZmluZWQgJiYgZ2V0TWF0ZXJpYWwocikgPCByZXNvdXJjZXNbcl0ubWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cociwgZ2V0TWF0ZXJpYWwociksIHJlc291cmNlc1tyXS5tYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heGVkT3V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtYXhlZE91dCAmJiBqb2JDb3VudHNbZGF0YUpvYl0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2hKb2Iob2xkSWQsIG5ld0lkKTtcclxuICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKG9sZElkLCBqb2JDb3VudHNbb2xkSWRdKTtcclxuICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKG5ld0lkLCBqb2JDb3VudHNbbmV3SWRdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYgKHJlc291cmNlc1thZmZlY3RlZFJlc291cmNlXS5jdXJyZW50VmFsdWUgPj0gcmVzb3VyY2VzW2FmZmVjdGVkUmVzb3VyY2VdLm1heFZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBzd2l0Y2hKb2Iob2xkSm9iSWQsIG5ld0pvYklkKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7IGNvbnNvbGUud2FybigncmVhc3NpZ25Kb2JzJywgZXJyb3IpOyB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzd2l0Y2hKb2Iob2xkSm9iSWQsIG5ld0pvYklkKSB7XHJcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHN3aXRjaGVzIHdvcmtlcnMgZnJvbSBvbGRKb2IgdG8gbmV3Sm9iLlxyXG4gICAgLy8gRGVwZW5kaW5nIG9uIHlvdXIgYXBwbGljYXRpb24gc3RydWN0dXJlLCB5b3UgY2FuIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uIGFjY29yZGluZ2x5LlxyXG4gICAgLy8gRm9yIGV4YW1wbGUsIHJlZHVjZSB0aGUgY291bnQgb2Ygd29ya2VycyBpbiBvbGRKb2IgYW5kIGluY3JlYXNlIGluIG5ld0pvYi5cclxuICAgIC8vIGNvbnNvbGUubG9nKGBTd2l0Y2hpbmcgd29ya2VycyBmcm9tICR7b2xkSm9iSWR9IHRvICR7bmV3Sm9iSWR9YCk7XHJcblxyXG4gICAgbGV0IHdvcmtlcnMgPSBqb2JDb3VudHNbb2xkSm9iSWRdO1xyXG4gICAgam9iQ291bnRzW29sZEpvYklkXSA9IDA7XHJcbiAgICBqb2JDb3VudHNbbmV3Sm9iSWRdICs9IHdvcmtlcnM7XHJcbiAgICB1cGRhdGVEaXNwbGF5KG9sZEpvYklkKTtcclxuICAgIHVwZGF0ZURpc3BsYXkobmV3Sm9iSWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldEFsbEpvYnMoKSB7XHJcbiAgICAvLyBqb2JDb3VudHMgPSB7fTtcclxuICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgIGpvYkNvdW50c1tza2lsbF0gPSAwO1xyXG4gICAgICAgIGRpc3RyaWJ1dGVXb3JrZXJzKHNraWxsLCAwKTtcclxuICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgIHVwZGF0ZURpc3BsYXkoc2tpbGwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNsZWFySm9iQXNzaWdubWVudHMsXHJcbiAgICByZWFzc2lnbkpvYnNCYXNlZE9uUmVzb3VyY2VzLFxyXG4gICAgc3dpdGNoSm9iLFxyXG4gICAgZHJhd0FsbENvbm5lY3Rpb25zLFxyXG4gICAgZ2V0V29ya2VycyxcclxuICAgIHVwZGF0ZVRvdGFsLFxyXG4gICAgc2V0Q29ubmVjdGlvbnMsXHJcbiAgICBnZXRDb25uZWN0aW9ucyxcclxuICAgIGRpc3RyaWJ1dGVXb3JrZXJzLFxyXG4gICAgdXBkYXRlRGlzcGxheSxcclxuICAgIGpvYkNvdW50cyxcclxuICAgIHJlc2V0QWxsSm9ic1xyXG59OyIsImNvbnN0IHsgaGFzUGVyayB9ID0gcmVxdWlyZShcIi4uL3BlcmtzXCIpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZShcIi4uL3JlY2FsY01heENsb25lc1wiKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZShcIi4uL3JlY2FsY3VsYXRlQnVpbGRpbmdDb3N0XCIpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoXCIuLi91cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50XCIpO1xyXG5cclxuY29uc3QgYnVpbGRpbmdzID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSE9VU0lOR1xyXG4gICAgICovXHJcbiAgICBcInNoZWx0ZXJcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcInN0aWNrc1wiOiAzMCB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiY2xvbmVzXCI6IDEgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGb3Igd2hlbiB5b3UgbmVlZCBhIGhvbWUgYXdheSBmcm9tIGhvbWUuXCIsXHJcbiAgICAgICAgZW1vamk6ICflhasnXHJcbiAgICB9LFxyXG4gICAgJ2h1dCc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyAnc3RpY2tzJzogNTAsICd2aW5lcyc6IDMwIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICdjbG9uZXMnOiAxIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjQsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIGNvenksIGlkeWxsaWMgY2h1bmsgb2Ygd29vZC4nLFxyXG4gICAgICAgIGVtb2ppOiAn5YaCJ1xyXG4gICAgfSxcclxuICAgIFwiaG91c2VcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcIndvb2RcIjogNTAsIFwicm9ja3NcIjogMjAsICdmaXNoJzogMTAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcImNsb25lc1wiOiAyIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiRXZlcnkgY2xvbmUncyBkcmVhbS4gTWludXMgdGhlIHdoaXRlIHBpY2tldCBmZW5jZS5cIixcclxuICAgICAgICBlbW9qaTogJ+S7iydcclxuICAgIH0sXHJcbiAgICAndGVlcGVlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICd3b29kJzogMTAsICdoaWRlcyc6IDI1LCAnZmlzaCc6IDE1IH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnY2xvbmVzJzogMiB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldyYXAgc29tZSBoaWRlcyBhcm91bmQgc29tZSB3b29kIGFuZCBjYWxsIGl0IGEgaG9tZS5cIixcclxuICAgICAgICBlbW9qaTogJ+eptCdcclxuICAgIH0sXHJcbiAgICAnaG9zcGl0YWwnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgY29uY3JldGU6IDEwLCBtZWRpY2luZTogMjAsIGZpc2g6IDIwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnY2xvbmVzJzogMyB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS43LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnS2VlcCB5b3Vyc2VsZiBzYWZlLicsXHJcbiAgICAgICAgZW1vamk6ICcrJ1xyXG4gICAgfSxcclxuICAgICdiYXJyYWNrcyc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyBzcGVhcjogMjAsIHZpb2xlbmNlOiAxLCB3b29kOiAyMDAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdjbG9uZXMnOiAxLCAndmlvbGVuY2UnOiAyMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQSBoYWxsIG9mIHJhdWNvdXMgc29sZGllcnMuJyxcclxuICAgICAgICBlbW9qaTogJ/CTiI8nXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU1RPUkFHRVxyXG4gICAgICovXHJcbiAgICBcInNoZWRcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjogeyBcIndvb2RcIjogNDAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcIndvb2RcIjogNTAsIFwic3RpY2tzXCI6IDUwLCBcInJvY2tzXCI6IDIwIH0sXHJcbiAgICAgICAgXCJib29zdFwiOiB7fSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGhlIHVsdGltYXRlIHN0b3JhZ2Ugc29sdXRpb24gZm9yIHRoZSBwYWNrIHJhdCBpbiB5b3UuXCIsXHJcbiAgICAgICAgZW1vamk6ICfkuKonXHJcbiAgICB9LFxyXG4gICAgJ3N0b2NrcGlsZSc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyByb2NrczogMzAsIHdvb2Q6IDQwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyB3b29kOiAxMDAgfSxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJDaHVjayBhIGJ1bmNoIG9mIGxvZ3MgaW4gYSBwaWxlLCB3aGF0IGNvdWxkIGhhcHBlbj9cIixcclxuICAgICAgICBlbW9qaTogJ+WTgSdcclxuICAgIH0sXHJcbiAgICBcImRyeWluZ19yYWNrc1wiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwic3RpY2tzXCI6IDMwLCBcImZpc2hcIjogNSB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7IFwiZmlzaFwiOiAyMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkFpciBkcnlpbmc6IE5hdHVyZSdzIHdheSBvZiBwcmVzZXJ2aW5nIGZvb2QuXCIsXHJcbiAgICAgICAgZW1vamk6ICflm5snXHJcbiAgICB9LFxyXG4gICAgXCJ3b3Jrc2hvcFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7IFwid29vZFwiOiA0MCwgXCJzdGlja3NcIjogMjAsIFwicm9ja3NcIjogMTAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAncm9ja3MnOiA1MCwgJ29yZSc6IDUwLCAnc2FuZCc6IDEwMCwgJ2NsYXknOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS40LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkRJWSdzIGRyZWFtIGRlc3RpbmF0aW9uLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOOsCdcclxuICAgIH0sXHJcbiAgICAnYmFybic6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7ICd3b29kJzogMzAsICd3aGVhdCc6IDUgfSxcclxuICAgICAgICAnZWZmZWN0cyc6IHsgJ3doZWF0JzogMTAwLCAndmluZXMnOiA0MCB9LFxyXG4gICAgICAgICdib29zdCc6IHt9LFxyXG4gICAgICAgICdjb3VudCc6IDAsXHJcbiAgICAgICAgJ3JhdGlvJzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkhheSwgd2hhdCdzIGluIHRoYXQgYnVpbGRpbmc/XCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+GJ1xyXG4gICAgfSxcclxuICAgICdoZXJiYWxpc3RfaHV0Jzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7ICdzdGlja3MnOiA1MCwgJ3ZpbmVzJzogNTAsICdoZXJicyc6IDUwIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnaGVyYnMnOiAxMDAsICd2aW5lcyc6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdoZXJicyc6IDEuMiwgdmluZXM6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBwbGFjZSBmb3IgYnJld2luZyBhbmQgc3Rld2luZy5cIixcclxuICAgICAgICBlbW9qaTogJ/CTj4MnXHJcbiAgICB9LFxyXG4gICAgXCJiYWtlcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogODAsXHJcbiAgICAgICAgICAgIFwiYnJlYWRcIjogMTAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7ICd3aGVhdCc6IDIwMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge30sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yNSxcclxuICAgICAgICBcInRvb2x0aXBEZXNjXCI6IFwiRnJlc2hseSBiYWtlZCBicmVhZCwgaG90IGFuZCByZWFkeS5cIixcclxuICAgICAgICBlbW9qaTogJ/CTj5YnXHJcblxyXG4gICAgfSxcclxuICAgIFwiYW5pbWFsX3BlblwiOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgc3RpY2tzOiA1MCxcclxuICAgICAgICAgICAgZ2FtZTogMjAsXHJcbiAgICAgICAgICAgIGZpc2g6IDI1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdnYW1lJzogMTAwLCAnaGlkZXMnOiAzMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgcGxhY2UgdG8gcHV0IHRob3NlIGxlc3NlciB0aGFuIHlvdS5cIixcclxuICAgICAgICBlbW9qaTogJ+eavydcclxuICAgIH0sXHJcbiAgICAncmVzZXJ2b2lyJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIHJvY2tzOiAxMDAsXHJcbiAgICAgICAgICAgIGNsYXk6IDUwLFxyXG4gICAgICAgICAgICB3YXRlcjogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHsgJ3dhdGVyJzogMTAwIH0sXHJcbiAgICAgICAgYm9vc3Q6IHt9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBob2xlIGZpbGxlZCB3aXRoIHdhdGVyLiBVc2VmdWwuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4ieJ1xyXG4gICAgfSxcclxuICAgICdzdG9uZV9kZXBvdCc6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICByb2NrczogMjAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICdyb2Nrcyc6IDI1MCB9LFxyXG4gICAgICAgIGJvb3N0OiB7fSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgYmlnIHN0YWNrIG9mIHJvY2tzLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOIkydcclxuICAgIH0sXHJcbiAgICAnd2FyZWhvdXNlJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7XHJcbiAgICAgICAgICAgIGNyYXRlczogMTAsXHJcbiAgICAgICAgICAgIGNvbmNyZXRlOiAyMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWZmZWN0czogeyAnd29vZCc6IDEwMCwgJ3JvY2tzJzogMTAwLCAnY2xheSc6IDEwMCwgJ3NhbmQnOiAxMDAgfSxcclxuICAgICAgICBib29zdDoge30sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1B1dCBzdHVmZiBpbiBhIGJveCBpbnNpZGUgYSBsYXJnZXIgYm94LicsXHJcbiAgICAgICAgZW1vamk6ICfwk4emJ1xyXG4gICAgfSxcclxuICAgICdtaWxpdGFyeV9zY2hvb2wnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgYnJpY2tzOiAyMCxcclxuICAgICAgICAgICAgdmlvbGVuY2U6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7ICd2aW9sZW5jZSc6IDEwMCB9LFxyXG4gICAgICAgIGJvb3N0OiB7ICd2aW9sZW5jZSc6IDEuMDUgfSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICByYXRpbzogMS40LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnTGVhcm4gdGhlIGFydCBvZiBodXJ0aW5nIG90aGVycy4nLFxyXG4gICAgICAgIGVtb2ppOiAn8JOHuydcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUFJPRFVDVElPTiBCT09TVFxyXG4gICAgICovXHJcbiAgICBcImdyb3ZlXCI6IHtcclxuICAgICAgICBiYXNlY29zdDogeyAnd29vZCc6IDIwLCAndmluZXMnOiAyMCB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICd3b29kJzogMS4wNSwgJ3N0aWNrcyc6IDEuMSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiQSBuaWNlIGdyb3ZlIG9mIHRyZWVzIHRvIGZpbmQgd29vZCBmYXN0ZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4at8JOGrSdcclxuICAgIH0sXHJcbiAgICBcImZpc2hfdHJhcHNcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcInJvcGVcIjogNDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJmaXNoXCI6IDEuMDVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGaXNoaW5nIG1hZGUgZWFzeS4gTm8gcGF0aWVuY2UgcmVxdWlyZWQuXCIsXHJcbiAgICAgICAgZW1vamk6ICfkupUnXHJcbiAgICB9LFxyXG4gICAgXCJtaW5lXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiAzMCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDMwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwib3JlXCI6IDEuMDUsICdyb2Nrcyc6IDEuMDVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJEaWcgZGVlcCBhbmQgZmluZCB5b3VyIGlubmVyIG9yZS5cIixcclxuICAgICAgICBlbW9qaTogJ/CTio0nXHJcbiAgICB9LFxyXG4gICAgXCJjYW1wZmlyZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogMjAsXHJcbiAgICAgICAgICAgIFwic3RpY2tzXCI6IDIwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7ICdhbGwnOiAxLjAyIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS41LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldoZXJlIHN0b3JpZXMgYXJlIHRvbGQgYW5kIG1hcnNobWFsbG93cyBhcmUgdG9hc3RlZC5cIixcclxuICAgICAgICBlbW9qaTogJ+eBqydcclxuICAgIH0sXHJcbiAgICBcImx1bWJlcl95YXJkXCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDIwMCxcclxuICAgICAgICAgICAgXCJpcm9uXCI6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldvb2QgeW91IGxpa2Ugc29tZSBtb3JlIHdvb2Q/XCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4yPJ1xyXG4gICAgfSxcclxuICAgIFwic3RvbmVfcXVhcnJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiA1MCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDIwLFxyXG4gICAgICAgICAgICBcInJvcGVcIjogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7fSxcclxuICAgICAgICBcImJvb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJyb2Nrc1wiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJSb2NrIG9uIHdpdGggeW91ciBiYWQgc2VsZiFcIixcclxuICAgICAgICBlbW9qaTogJ/CTio4nXHJcbiAgICB9LFxyXG4gICAgXCJmaXNoZXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDQwLFxyXG4gICAgICAgICAgICBcInJvcGVcIjogMTVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZWZmZWN0c1wiOiB7ICdmaXNoJzogNTAgfSxcclxuICAgICAgICBcImJvb3N0XCI6IHt9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGaXNoIGFyZSBmcmllbmRzLiBBbmQgZm9vZC5cIixcclxuICAgICAgICBlbW9qaTogJ/CTjKQnXHJcbiAgICB9LFxyXG4gICAgXCJ2aW5leWFyZFwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAyMCxcclxuICAgICAgICAgICAgXCJ2aW5lc1wiOiA1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInZpbmVzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZvciB0aGUgZmluZXN0IHZpbmVzLiBXaGF0IGVsc2Ugd291bGQgaXQgZ3Jvdz9cIixcclxuICAgICAgICBlbW9qaTogJ/CfnIwnXHJcbiAgICB9LFxyXG4gICAgXCJmb3JnZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNDAsXHJcbiAgICAgICAgICAgIFwib3JlXCI6IDIwLFxyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwib3JlXCI6IDEuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIk1lbHQsIG1vbGQsIGFuZCBtYWtlIG1hcnZlbG91cyBtZXRhbHMuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qrJ1xyXG4gICAgfSxcclxuICAgICd3YXRlcl9wdW1wJzoge1xyXG4gICAgICAgICdiYXNlY29zdCc6IHtcclxuICAgICAgICAgICAgJ3JvY2tzJzogMzAsXHJcbiAgICAgICAgICAgICdyb3BlJzogMSxcclxuICAgICAgICAgICAgJ3dvb2QnOiAxMCxcclxuICAgICAgICAgICAgJ3doZWF0JzogMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2VmZmVjdHMnOiB7ICdmcmVzaHdhdGVyJzogMzAgfSxcclxuICAgICAgICAnYm9vc3QnOiB7XHJcbiAgICAgICAgICAgICdmcmVzaHdhdGVyJzogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY291bnQnOiAwLFxyXG4gICAgICAgICdyYXRpbyc6IDEuNCxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJGcmVzaCB3YXRlciBvbiBkZW1hbmQhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4+CJ1xyXG4gICAgfSxcclxuICAgICd0b3dlcic6IHtcclxuICAgICAgICAnYmFzZWNvc3QnOiB7XHJcbiAgICAgICAgICAgICdicmlja3MnOiAyMCxcclxuICAgICAgICAgICAgJ3JvY2tzJzogMTAsXHJcbiAgICAgICAgICAgICd3b29kJzogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgICdlZmZlY3RzJzoge30sXHJcbiAgICAgICAgJ2Jvb3N0JzogeyAnaGlkZXMnOiAxLjA1LCAnZ2FtZSc6IDEuMSB9LFxyXG4gICAgICAgICdjb3VudCc6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTZWUgdGhpbmdzIGZyb20gYWZhci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTiqInXHJcbiAgICB9LFxyXG4gICAgXCJ0YW5uZXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDYwLFxyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyAnaGlkZXMnOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcImhpZGVzXCI6IDEuMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4zLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJUcmVhdCBoaWRlcyB0byBtYWtlIHF1YWxpdHkgbGVhdGhlci5cIixcclxuICAgICAgICBlbW9qaTogJ/CTg5QnXHJcbiAgICB9LFxyXG4gICAgXCJtYXJrZXRwbGFjZVwiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxMDAsXHJcbiAgICAgICAgICAgIFwicm9ja3NcIjogNTAsXHJcbiAgICAgICAgICAgIFwiZ29sZFwiOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwiaGVyYnNcIjogMS4yLFxyXG4gICAgICAgICAgICAnb3JlJzogMS4xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjI1LFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJBIGJ1c3RsaW5nIGh1YiBvZiB0cmFkZSBhbmQgYmFydGVyLlwiLFxyXG4gICAgICAgIGVtb2ppOiAn4oK/J1xyXG4gICAgfSxcclxuICAgIFwid2luZG1pbGxcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcIndvb2RcIjogMTAwLFxyXG4gICAgICAgICAgICBcInJvY2tzXCI6IDYwLFxyXG4gICAgICAgICAgICBcIndoZWF0XCI6IDUwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjoge30sXHJcbiAgICAgICAgXCJib29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid2hlYXRcIjogMS4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImNvdW50XCI6IDAsXHJcbiAgICAgICAgXCJyYXRpb1wiOiAxLjMsXHJcbiAgICAgICAgXCJ0b29sdGlwRGVzY1wiOiBcIkdyaW5kIGdyYWlucyBlZmZpY2llbnRseSB3aXRoIHdpbmQgcG93ZXIuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4esJ1xyXG4gICAgfSxcclxuICAgICdnYXJkZW4nOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHtcclxuICAgICAgICAgICAgYmVhbXM6IDIwLFxyXG4gICAgICAgICAgICBoZXJiczogMjAsXHJcbiAgICAgICAgICAgIGZyZXNod2F0ZXI6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlZmZlY3RzOiB7fSxcclxuICAgICAgICBib29zdDogeyAnaGVyYnMnOiAxLjEsICdzdGlja3MnOiAxLjA1IH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJOaWNlIG5hdHVyZSwgY2FyZWZ1bGx5IGN1bHRpdmF0ZWQuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4a3J1xyXG4gICAgfSxcclxuICAgICdzYW5kX3Njb29wJzoge1xyXG4gICAgICAgIGJhc2Vjb3N0OiB7IGJlYW1zOiAxMCwgaXJvbjogNSB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdzYW5kJzogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1Njb29wIHRoZSBzYW5kIGZyb20gdGhlIHNob3JlPyBTdXJlIScsXHJcbiAgICAgICAgZW1vamk6ICfwk4SbJ1xyXG4gICAgfSxcclxuICAgICd0cmFwcyc6IHtcclxuICAgICAgICBiYXNlY29zdDogeyBuYWlsczogMTAsIHN0aWNrczogMjAsIGhlcmJzOiAyMCB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdnYW1lJzogMS4xIH0sXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgcmF0aW86IDEuMixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJXYXRjaCB5b3VyIHN0ZXAhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4SmJ1xyXG4gICAgfSxcclxuICAgICdyb2NrX3JvbGUnOiB7XHJcbiAgICAgICAgYmFzZWNvc3Q6IHsgc2xhYnM6IDIwLCBmcmVzaHdhdGVyOiAzMCB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7ICdyb2Nrcyc6IDEuMiB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjMsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdJbiBvcmRlciB0byBnYXRoZXIgdGhlIHJvY2sgeW91IG11c3QgYmVjb21lIHRoZSByb2NrLicsXHJcbiAgICAgICAgZW1vamk6ICfwk4aHJ1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQT05ERVJcclxuICAgICAqL1xyXG4gICAgJ3RlbGVzY29wZSc6IHtcclxuICAgICAgICBiYXNlY29zdDoge1xyXG4gICAgICAgICAgICBnbGFzczogMSxcclxuICAgICAgICAgICAgd29vZDogMTAsXHJcbiAgICAgICAgICAgIHBvbmRlcjogMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVmZmVjdHM6IHt9LFxyXG4gICAgICAgIGJvb3N0OiB7IHBvbmRlcjogMS4wNSB9LFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIHJhdGlvOiAxLjIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTG9vaywgdXAgaW4gdGhlIHNreSEgSXQncyBhIHN0YXIhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4ypJ1xyXG4gICAgfSxcclxuICAgIFwib2JzZXJ2YXRvcnlcIjoge1xyXG4gICAgICAgIFwiYmFzZWNvc3RcIjoge1xyXG4gICAgICAgICAgICBcImJyaWNrc1wiOiA3MCxcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDMwLFxyXG4gICAgICAgICAgICBcImdsYXNzXCI6IDUwLFxyXG4gICAgICAgICAgICBcInBvbmRlclwiOiA1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlZmZlY3RzXCI6IHt9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxLjJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTdGFyZ2F6aW5nIGhhcyBuZXZlciBiZWVuIHNvLi4uIHByb2R1Y3RpdmU/XCIsXHJcbiAgICAgICAgZW1vamk6ICfimIYnXHJcbiAgICB9LFxyXG4gICAgXCJsaWJyYXJ5XCI6IHtcclxuICAgICAgICBcImJhc2Vjb3N0XCI6IHtcclxuICAgICAgICAgICAgXCJ3b29kXCI6IDcwLFxyXG4gICAgICAgICAgICBcInBhcGVyXCI6IDI1LFxyXG4gICAgICAgICAgICBcImdsYXNzXCI6IDUsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDI1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcInBvbmRlclwiOiA1MCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjoge1xyXG4gICAgICAgICAgICBcInBvbmRlclwiOiAxLjFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiY291bnRcIjogMCxcclxuICAgICAgICBcInJhdGlvXCI6IDEuMyxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJLbm93bGVkZ2UgaXMgcG93ZXIuIEFuZCBhIGZpcmUgaGF6YXJkIGlmIG5vdCBzdG9yZWQgcHJvcGVybHkuXCIsXHJcbiAgICAgICAgZW1vamk6ICfwn5WuJ1xyXG4gICAgfSxcclxuICAgIFwiZGVza1wiOiB7XHJcbiAgICAgICAgXCJiYXNlY29zdFwiOiB7XHJcbiAgICAgICAgICAgIFwid29vZFwiOiAxNSxcclxuICAgICAgICAgICAgXCJzdGlja3NcIjogMjAsXHJcbiAgICAgICAgICAgIFwicG9uZGVyXCI6IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImVmZmVjdHNcIjogeyBcInBvbmRlclwiOiAzMCB9LFxyXG4gICAgICAgIFwiYm9vc3RcIjogeyBcInBvbmRlclwiOiAxLjA1IH0sXHJcbiAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgIFwicmF0aW9cIjogMS4yLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkEgd3JpdGVyJ3MgYmxvY2sgaXMgbm8gbWF0Y2ggZm9yIGFybW9yLXBpZXJjaW5nIHBlbmNpbHMhXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4qsJ1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0QnVpbGRpbmdDb3VudChidWlsZGluZ05hbWUpIHtcclxuICAgIHJldHVybiBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXS5jb3VudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRpbmdOYW1lIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2UgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Qm9vc3QoYnVpbGRpbmdOYW1lLCByZXNvdXJjZSkge1xyXG4gICAgY29uc3QgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdOYW1lXTtcclxuXHJcbiAgICBpZiAoYnVpbGRpbmcgJiYgYnVpbGRpbmcuYm9vc3QpIHtcclxuICAgICAgICBpZiAoYnVpbGRpbmcuYm9vc3RbcmVzb3VyY2VdKSByZXR1cm4gYnVpbGRpbmcuYm9vc3RbcmVzb3VyY2VdO1xyXG4gICAgICAgIGlmIChidWlsZGluZy5ib29zdFsnYWxsJ10pIHJldHVybiBidWlsZGluZy5ib29zdFsnYWxsJ107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiByZXNldEJ1aWxkaW5ncygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcbiAgICAgICAgdmFsWydjb3VudCddID0gMDtcclxuICAgICAgICAvLyBVcGRhdGUgYnV0dG9uIHRleHRcclxuICAgICAgICB1cGRhdGVCdWlsZGluZ0J1dHRvbkNvdW50KGtleSwgMCk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgY29zdCBvZiB0aGUgYnVpbGRpbmdcclxuICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXksIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcblxyXG4gICAgfVxyXG4gICAgLy8gVXBkYXRlIG1heCBjbG9uZXMgYWZ0ZXIgdXBkYXRpbmcgdGhlIGNvdW50XHJcbiAgICByZWNhbGNNYXhDbG9uZXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNQb3BCdWlsZGluZyhidWlsZGluZ05hbWUpIHtcclxuICAgIHN3aXRjaCAoYnVpbGRpbmdOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnc2hlbHRlcic6XHJcbiAgICAgICAgY2FzZSAnaHV0JzpcclxuICAgICAgICBjYXNlICdob3VzZSc6XHJcbiAgICAgICAgY2FzZSAndGVlcGVlJzpcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGJ1aWxkaW5ncyxcclxuICAgIGdldEJ1aWxkaW5nQ291bnQsXHJcbiAgICBnZXRCb29zdCxcclxuICAgIHJlc2V0QnVpbGRpbmdzLFxyXG4gICAgaXNQb3BCdWlsZGluZ1xyXG59OyIsImNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4uL3N0YWdlcycpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGhhc1Rvb2wgfSA9IHJlcXVpcmUoJy4uL3Rvb2xzJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5cclxuLyogQlVUVE9OUyAqL1xyXG5jb25zdCBidXR0b25zID0ge1xyXG5cclxuICAgIC8qIFBST0RVQ1RJT04gVEFCICovXHJcbiAgICAnZ2F0aGVyU3RpY2tzJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBzdGFydFZpc2libGUnLFxyXG4gICAgICAgIHRhYjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHRleHQ6ICfwk4CdIEdhdGhlciBTdGlja3MnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnRml2ZSwgU2l4LCBQaWNrIHVwIHN0aWNrcy4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2UgLy8gVGhpcyBidXR0b24gaXMgYWx3YXlzIHZpc2libGVcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyVmluZXMnOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwIHN0aWNrJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JONryBHYXRoZXIgVmluZXMnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU29tZSB2aW5lcyBhcmUgcnViYmVyeSwgb3RoZXJzIGFyZSBndW1teS4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldE1hdGVyaWFsKCdzdGlja3MnLCByZXNvdXJjZXMpID49IDEwIHx8IHBhc3NlZFN0YWdlKCd2aW5lcycpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlclJvY2tzJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCBzdGljaycsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CTipbwk4CpIEdhdGhlciBSb2NrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdOb3QgYSBzaW5nbGUgd2luZG93IHRvIHRocm93IHRoZW0gdGhyb3VnaC4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnRnJlZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IGdldE1hdGVyaWFsKCd2aW5lcycsIHJlc291cmNlcykgPj0gMTAgfHwgcGFzc2VkU3RhZ2UoJ3JvY2tzJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnZ2F0aGVyRmlzaCc6IHtcclxuICAgICAgICBjbGFzczogJ3Rvb2x0aXAgZmlzaGluZycsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogJ/CThp0g8JOGnyDwk4aeIEdvIEZpc2gnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnR290IGFueSB0dW5hPycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdGcmVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnU3BlYXInKSB8fCBoYXNUb29sKFwiRmlzaGluZyBSb2RcIikgfHwgcGFzc2VkU3RhZ2UoJ2Zpc2hpbmcnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJXb29kJzoge1xyXG4gICAgICAgIGNsYXNzOiAnd29vZFRvZ2dsZSB3b29kJyxcclxuICAgICAgICB0YWI6ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICB0ZXh0OiAn8JOMjyBDaG9wIFdvb2QnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQW4gYXhlIGh1cnRzIHdheSBsZXNzIHRoYW4gdXNpbmcgeW91ciBoYW5kcy4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnQXhlJykgfHwgcGFzc2VkU3RhZ2UoJ3dvb2QnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdnYXRoZXJPcmUnOiB7XHJcbiAgICAgICAgXCJjbGFzc1wiOiBcInRvb2x0aXAgXCIsXHJcbiAgICAgICAgXCJ0YWJcIjogXCJwcm9kdWN0aW9uXCIsXHJcbiAgICAgICAgXCJ0ZXh0XCI6IFwi8JOJuCBNaW5lIE9yZVwiLFxyXG4gICAgICAgIFwidG9vbHRpcERlc2NcIjogXCJEaWdneSBEaWdneSBIb2xlXCIsXHJcbiAgICAgICAgXCJ0b29sdGlwQ29zdFwiOiBcIkZyZWVcIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gaGFzVG9vbCgnUGlja2F4ZScpIHx8IHBhc3NlZFN0YWdlKCdvcmUnKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qIFRBQlMgKi9cclxuICAgICdwcm9kdWN0aW9uVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIHNob3dUYWI6ICdwcm9kdWN0aW9uVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3RhYi1idXR0b24nKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdleHBlcmltZW50VGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ0V4cGVyaW1lbnQnLFxyXG4gICAgICAgIHNob3dUYWI6ICdleHBlcmltZW50VGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3RhYi1idXR0b24nKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdwb25kZXJUYWJCdXR0b24nOiB7XHJcbiAgICAgICAgY2xhc3M6ICd0YWItYnV0dG9uJyxcclxuICAgICAgICB0ZXh0OiAnUG9uZGVyJyxcclxuICAgICAgICBzaG93VGFiOiAncG9uZGVyVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ3BvbmRlci10YWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdqb2JzVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ0pvYnMnLFxyXG4gICAgICAgIHNob3dUYWI6ICdqb2JzVGFiJyxcclxuICAgICAgICB0YWI6ICd0YWJzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gcGFzc2VkU3RhZ2UoJ2pvYnMtdGFiJyksXHJcbiAgICAgICAgaGlkZTogKCkgPT4gZmFsc2VcclxuICAgIH0sXHJcbiAgICAnc2tpbGxzVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1NraWxscycsXHJcbiAgICAgICAgc2hvd1RhYjogJ3NraWxsc1RhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ3BlcmtzVGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ1BlcmtzJyxcclxuICAgICAgICBzaG93VGFiOiAncGVya3NUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgncGVya3NUYWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuICAgICdmYWN0b3J5VGFiQnV0dG9uJzoge1xyXG4gICAgICAgIGNsYXNzOiAndGFiLWJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ0ZhY3RvcmllcycsXHJcbiAgICAgICAgc2hvd1RhYjogJ2ZhY3RvcnlUYWInLFxyXG4gICAgICAgIHRhYjogJ3RhYnMnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgnZmFjdG9yeVRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgJ2NvbWJhdFRhYkJ1dHRvbic6IHtcclxuICAgICAgICBjbGFzczogJ3RhYi1idXR0b24nLFxyXG4gICAgICAgIHRleHQ6IFwiQ29tYmF0XCIsXHJcbiAgICAgICAgc2hvd1RhYjogJ2NvbWJhdFRhYicsXHJcbiAgICAgICAgdGFiOiAndGFicycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHBhc3NlZFN0YWdlKCdjb21iYXRUYWInKSxcclxuICAgICAgICBoaWRlOiAoKSA9PiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbiAgICAvKiBQT05ERVIgVEFCICovXHJcbiAgICAnZ2F0aGVyUG9uZGVyJzoge1xyXG4gICAgICAgIGNsYXNzOiAndG9vbHRpcCcsXHJcbiAgICAgICAgdGV4dDogJ1BvbmRlcicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdXcmFwIHlvdXIgaGVhZCBhcm91bmQgdGhlIGdyZWF0IG15c3RlcmllcycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdUaW1lJyxcclxuICAgICAgICB0YWI6ICdwb25kZXInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiBwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpLFxyXG4gICAgICAgIGhpZGU6ICgpID0+IGZhbHNlXHJcbiAgICB9LFxyXG5cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYnV0dG9uczogYnV0dG9uc1xyXG59OyIsIi8qIENSQUZUSU5HIFJFU09VUkNFUyAqL1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL3Jlc291cmNlcycpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuLi9zdGFnZXMnKTtcclxuXHJcblxyXG5jb25zdCBjcmFmdGVkUmVzb3VyY2VzID0ge1xyXG4gICAgJ3NoYXJwcm9ja3MnOiB7XHJcbiAgICAgICAgdGV4dDogJ1NoYXJwIFJvY2tzJyxcclxuICAgICAgICBpZDogJ2NyYWZ0U2hhcnByb2Nrc0J1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAncm9ja3MnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0NyYWZ0IGEgcm9jayB1c2luZyBub3RoaW5nIGJ1dCByb2NrcyEnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnUm9ja3M6IDUnLFxyXG4gICAgICAgIGNsYXNzOiAnY3JhZnRSb2NrcydcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAncm9wZSc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0Um9wZUJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAndmluZXMnOiAzIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwicm9ja3NcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1RoZSBiYXNpcyBvZiBhdHRhY2hpbmcgdGhpbmdzIHRvIG90aGVyIHRoaW5ncy4nLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnVmluZXM6IDMnLFxyXG4gICAgICAgIGNsYXNzOiAnY3JhZnRSb2NrcydcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnaGFuZGxlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRIYW5kbGVCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3N0aWNrcyc6IDIgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJyb2Nrc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU2hlYXIgb2ZmIHRoYXQgYmFyayB0byBob2xkIGl0IGJldHRlcicsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTaGFycCBSb2NrczogMScsXHJcbiAgICAgICAgY2xhc3M6ICdjcmFmdFJvY2tzJ1xyXG4gICAgICAgIC8vIHRvb2w6ICdTaGFycCBSb2NrJ1xyXG4gICAgfSxcclxuICAgICdzdGFmZic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0U3RhZmZCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ2hhbmRsZSc6IDIsICdyb3BlJzogMSB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTdGljayBzb21lIHNoZWFyZWQgc3RpY2tzIHRvZ2V0aGVyJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0hhbmRsZXM6IDInLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnZmlzaGluZ3JvZCc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0RmlzaGluZ3JvZEJ1dHRvbicsXHJcbiAgICAgICAgdGV4dDogJ0Zpc2hpbmcgUm9kJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdzdGFmZic6IDEsICdyb3BlJzogMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcImZpc2hpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ0Egd2VhcG9uIGZlYXJlZCBieSB1bmRlcndhdGVyIGxpZmUnLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ2Zpc2hpbmcnXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ3NwZWFyJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRTcGVhckJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDoge1xyXG4gICAgICAgICAgICAnc3RhZmYnOiAxLFxyXG4gICAgICAgICAgICAnc2hhcnByb2Nrcyc6IDEsXHJcbiAgICAgICAgICAgICdyb3BlJzogMSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcInJvY2tzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdBIGxvbmcgYW5kIHBvaW50eSBzdGljaycsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTdGFmZnM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAncm9wZSdcclxuICAgICAgICAvLyB0b29sOiAnQmFyZSBIYW5kcydcclxuICAgIH0sXHJcbiAgICAnYXhlJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRBeGVCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ2hhbmRsZSc6IDEsICdyb3BlJzogMSwgJ3NoYXJwcm9ja3MnOiAyIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwic3BlYXJcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1B1dCBhIHJvY2sgc3RyYWlnaHQgdGhyb3VnaCB0aGF0IGhhbmRsZScsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTcGVhcnM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAnc3BlYXInXHJcbiAgICAgICAgLy8gdG9vbDogJ0JhcmUgSGFuZHMnXHJcbiAgICB9LFxyXG4gICAgJ3BpY2theGUnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdFBpY2theGVCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHtcclxuICAgICAgICAgICAgJ2hhbmRsZSc6IDEsXHJcbiAgICAgICAgICAgICdzaGFycHJvY2tzJzogMyxcclxuICAgICAgICAgICAgJ3JvcGUnOiAxLFxyXG4gICAgICAgICAgICAncm9ja3MnOiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JhZnRlZE9uY2U6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVkU3RhZ2U6IFwic3BlYXJcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1NhZGx5IG5vdCBtYWRlIG9mIGRpYW1vbmRzJyxcclxuICAgICAgICB0b29sdGlwQ29zdDogJ0F4ZXM6IDEnLFxyXG4gICAgICAgIGNsYXNzOiAnc3BlYXInXHJcbiAgICB9LFxyXG5cclxuICAgICdnbGFzcyc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0R2xhc3NCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3NhbmQnOiAxMCB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ1lvdSBjYW4gc2VlIHJpZ2h0IHRocm91Z2ggaXQhJyxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcImdsYXNzQmxvd2luZ1wiLFxyXG4gICAgICAgIGNsYXNzOiAnZ2xhc3NCbG93aW5nJ1xyXG4gICAgfSxcclxuICAgICdwYXBlcic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0UGFwZXJCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3dvb2QnOiAxMiB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ091dHNvdXJjZSB5b3VyIG1lbW9yeScsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJwYXBlclwiLFxyXG4gICAgICAgIGNsYXNzOiAncGFwZXInXHJcbiAgICB9LFxyXG4gICAgJ2dvbGQnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEdvbGRCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ29yZSc6IDEwMCB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcIm1ldGFsV29ya2luZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoZXJlJ3Mgc29tZSB5ZWxsb3cgYml0cyBpbiB0aGlzIG9yZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ21ldGFsV29ya2luZydcclxuICAgIH0sXHJcbiAgICAnaXJvbic6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0SXJvbkJ1dHRvbicsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgY29zdDogeyAnb3JlJzogMjAgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJtZXRhbFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJUaGVyZSdzIHNvbWUgc3R1cmR5LWxvb2tpbmcgYml0cyBpbiB0aGlzIG9yZVwiLFxyXG4gICAgICAgIHRvb2x0aXBDb3N0OiAnJyxcclxuICAgICAgICBjbGFzczogJ21ldGFsV29ya2luZydcclxuICAgIH0sXHJcbiAgICAnc2lsdmVyJzoge1xyXG4gICAgICAgIGlkOiAnY3JhZnRTaWx2ZXJCdXR0b24nLFxyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIGNvc3Q6IHsgJ29yZSc6IDUwIH0sXHJcblxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiBcIm1ldGFsV29ya2luZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoZXJlJ3Mgc29tZSBzaGlueSBncmF5IGJpdHMgaW4gdGhpcyBvcmVcIixcclxuICAgICAgICB0b29sdGlwQ29zdDogJycsXHJcbiAgICAgICAgY2xhc3M6ICdtZXRhbFdvcmtpbmcnXHJcbiAgICB9LFxyXG4gICAgJ2JyaWNrcyc6IHtcclxuICAgICAgICBpZDogJ2NyYWZ0QnJpY2tzQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7ICdjbGF5JzogMTUgfSxcclxuICAgICAgICBjcmFmdGVkT25jZTogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWRTdGFnZTogXCJjbGF5XCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTGVhdmUgc29tZSBjbGF5IGJ5IHRoZSBmaXJlXCIsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnY2xheSdcclxuICAgIH0sXHJcbiAgICAnYnJlYWQnOiB7XHJcbiAgICAgICAgaWQ6ICdjcmFmdEJyZWFkQnV0dG9uJyxcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBjb3N0OiB7IHdoZWF0OiAxMyB9LFxyXG4gICAgICAgIGNyYWZ0ZWRPbmNlOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZFN0YWdlOiAnYWdyaWN1bHR1cmUnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkknbSBnb25uYSBncmluZCB5b3VyIHdoZWF0IHRvIG1ha2UgbXkgYnJlYWQhXCIsXHJcbiAgICAgICAgdG9vbHRpcGNvc3Q6ICcnLFxyXG4gICAgICAgIGNsYXNzOiAnYWdyaWN1bHR1cmUnXHJcbiAgICB9LFxyXG4gICAgJ3N0ZWVsJzogeyB2YWx1ZTogMCwgY29zdDogeyAnaXJvbic6IDUgfSB9LFxyXG4gICAgJ2JlYW1zJzogeyB2YWx1ZTogMCwgY29zdDogeyAnd29vZCc6IDEwIH0gfSxcclxuICAgICdjcmF0ZXMnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICd3b29kJzogMTUgfSB9LFxyXG4gICAgJ25haWxzJzogeyB2YWx1ZTogMCwgY29zdDogeyAnaXJvbic6IDEgfSB9LFxyXG4gICAgJ3NsYWJzJzogeyB2YWx1ZTogMCwgY29zdDogeyAncm9ja3MnOiAyMCB9IH0sXHJcbiAgICAnbWVkaWNpbmUnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICdoZXJicyc6IDUwIH0gfSxcclxuICAgICdsZWF0aGVyJzogeyB2YWx1ZTogMCwgY29zdDogeyAnaGlkZXMnOiAxMCB9IH0sXHJcbiAgICAnY29uY3JldGUnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICdzYW5kJzogMzIgfSB9LFxyXG4gICAgJ3dvb2QnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICdzdGlja3MnOiA4IH0gfSxcclxuICAgICdzdGlja3MnOiB7IHZhbHVlOiAwLCBjb3N0OiB7ICd3b29kJzogLjEgfSB9LFxyXG5cclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoaWQpIHtcclxuICAgIGZvciAoY29uc3QgW2MsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoY3JhZnRlZFJlc291cmNlcykpIHtcclxuICAgICAgICBpZiAodmFsLmlkID09PSBpZCB8fCB2YWwuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnKGNvbmZpZykge1xyXG4gICAgZm9yIChsZXQgayBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coayk7XHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZXNba10uaWQgPT09IGNvbmZpZy5pZCkgcmV0dXJuIGs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRDcmFmdGVkUmVzb3VyY2VzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNyYWZ0ZWRSZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgdmFsLnZhbHVlID0gMDtcclxuICAgICAgICB2YWwuY3JhZnRlZE9uY2UgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjcmFmdGVkUmVzb3VyY2VzLFxyXG4gICAgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCxcclxuICAgIGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnLFxyXG4gICAgcmVzZXRDcmFmdGVkUmVzb3VyY2VzXHJcbn07IiwiXHJcblxyXG4vKipcclxuICogVGllciAxICg0MDAgcG9uZGVyKTpcclxuICogXHJcbiAqIEx1bWJlcmphY2tcclxuICogICsyNSUgd29vZCBwcm9kdWN0aW9uXHJcbiAqICArMjUlIHN0aWNrcyBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBNaW5lclxyXG4gKiAgKzI1JSBzdG9uZSAmIG9yZSBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBCb3RhbmlzdFxyXG4gKiAgKzI1JSB2aW5lcyAmIGhlcmJzICYgd2hlYXQgcHJvZHVjdGlvblxyXG4gKiBcclxuICogTGVhZGVyXHJcbiAqICA1MCUgY2xvbmUgZWZmZWN0aXZlbmVzc1xyXG4gKiBcclxuICogQXJjaGl0ZWN0XHJcbiAqICAtMjUlIGJ1aWxkaW5nIGNvc3RcclxuICogXHJcbiAqIFxyXG4gKiBUaWVyIDIgKDE1MDAgcG9uZGVyKTpcclxuICogXHJcbiAqIFRoaW5rZXJcclxuICogICs1MCUgcG9uZGVyIHByb2R1Y3Rpb24gYW5kIHN0b3JhZ2VcclxuICogIC0yNSUgcG9uZGVyIGNvc3RcclxuICogXHJcbiAqIEdlbmVyYWxcclxuICogICs1MCUgY29tYmF0IHN0cmVuZ3RoXHJcbiAqICArMjUlIGNsb25lIGVmZmVjdGl2ZW5lc3NcclxuICogXHJcbiAqIE1lcmNoYW50XHJcbiAqICAtMjUlIHRyYWRlIHByaWNlXHJcbiAqICArMjUlIGNoYW5jZSBvZiByYXJlIHRyYWRlXHJcbiAqIFxyXG4gKiBHZW5lcmFsaXN0XHJcbiAqICArMTAlIGdsb2JhbCBwcm9kdWN0aW9uXHJcbiAqIFxyXG4gKiBTcGVjaWFsaXN0XHJcbiAqICArMTAwJSBza2lsbCBnYWluXHJcbiAqICArMTAlIHNraWxsIGJvbnVzIHRvIHJlc291cmNlc1xyXG4gKiBcclxuICogXHJcbiAqIFxyXG4gKiBcclxuICovXHJcbmNvbnN0IHBlcmtzID0ge1xyXG4gICAgJ3RpZXIxJzogWydMdW1iZXJqYWNrJywgJ01pbmVyJywgJ0JvdGFuaXN0JywgJ0xlYWRlcicsICdBcmNoaXRlY3QnXSxcclxuICAgICd0aWVyMic6IFsnVGhpbmtlcicsICdHZW5lcmFsJywgJ01lcmNoYW50JywgJ0dlbmVyYWxpc3QnLCAnU3BlY2lhbGlzdCddLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBwZXJrczogcGVya3NcclxufTsiLCJsZXQgcG9uZGVycyA9IHtcclxuICAgICdwb25kZXIxJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUG9uZGVyMScsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAgfSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5rIEhhcmRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG5cclxuICAgIH0sXHJcbiAgICAnam9icy10YWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJKb2JzLXRhYicsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMjAgfSxcclxuICAgICAgICB0ZXh0OiBcIlVuZGVyc3RhbmQgQ2xvbmluZ1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnV2h5IGFyZSB0aGVyZSB0d28gb2YgeW91PycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6ICdTYW5pdHkgKDIwIFBvbmRlciknLFxyXG5cclxuICAgIH0sXHJcbiAgICAnc2tpbGxzVGFibGUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJTa2lsbHNUYWJsZScsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAgfSxcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJZb3UncmUgc3RhcnRpbmcgdG8gbGVhcm4gdGhpbmdzLCByaWdodD9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIk5vdGljZSBJbXByb3ZlbWVudFwiXHJcbiAgICB9LFxyXG4gICAgJ2Zpc2hpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGaXNoaW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA1MCwgJ2Zpc2gnOiA1MCB9LFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIldoYXQgaWYuLi4geW91ciBjbG9uZXMgY291bGQgZ28gZmlzaGluZz9cIixcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIkZpc2hpbmcgSm9iXCJcclxuICAgIH0sXHJcbiAgICAvLyAnbWljcm9tYW5hZ2VtZW50Jzoge1xyXG4gICAgLy8gICAgIGlkOiAncG9uZGVyTWljcm9tYW5hZ2VtZW50JyxcclxuICAgIC8vICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgIC8vICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAsICdjbG9uZXMnOiA1IH0sXHJcbiAgICAvLyAgICAgdGV4dDogXCJNaWNyb21hbmFnZW1lbnRcIixcclxuICAgIC8vICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgIC8vICAgICB0b29sdGlwRGVzYzogXCJZb3UgbWFuYWdlZCB0byBtYWtlIGNsb25lcyBtYW5hZ2UgZWFjaCBvdGhlci5cIlxyXG4gICAgLy8gfSxcclxuICAgICdmYXN0ZXJTa2lsbHMnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYXN0ZXJTa2lsbHMnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDgwIH0sXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogXCJTa2lsbHMgSVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlRoaW5rIFNtYXJ0ZXIuIDUlIGJvbnVzIHRvIHNraWxsIGV4cFwiXHJcbiAgICB9LFxyXG4gICAgJ3RoaW5raW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyVGhpbmtpbmcnLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE1MCB9LFxyXG4gICAgICAgIHRleHQ6IFwiVGhpbmtpbmcgSm9iXCIsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiTGV0IHlvdXIgY2xvbmVzIHN0YXJ0IHRoaW5raW5nIGZvciB0aGVtc2VsdmVzLlwiXHJcblxyXG4gICAgfSxcclxuICAgICdmYXN0ZXJSZXNvdXJjZUdhaW4nOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYXN0ZXJSZXNvdXJjZUdhaW4nLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDEyMCB9LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6IFwiUHJvZHVjdGl2aXR5IElcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJKdXN0IHdvcmsgaGFyZGVyLiA1JSBib251cyB0byByZXNvdXJjZSBnYWluXCJcclxuICAgIH0sXHJcbiAgICAnbWV0YWxXb3JraW5nJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyTWV0YWxXb3JraW5nJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiBcIk1ldGFsIFdvcmtpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJTdGFydCBwcm9jZXNzaW5nIHRoYXQgb3JlXCIsXHJcbiAgICAgICAgLy8gY29zdDogW3sgbWF0ZXJpYWw6ICdwb25kZXInLCBhbW91bnQ6IDEwMCB9LCB7IG1hdGVyaWFsOiAnb3JlJywgYW1vdW50OiA1MCB9LCB7IG1hdGVyaWFsOiAncm9ja3MnLCBhbW91bnQ6IDUwIH1dXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAwLCAnb3JlJzogNTAsICdyb2Nrcyc6IDUwIH0sXHJcbiAgICB9LFxyXG4gICAgJ2dsYXNzQmxvd2luZyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckdsYXNzQmxvd2luZycsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgdGV4dDogJ0dsYXNzIEJsb3dpbmcnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnSHVmZiBhbmQgcHVmZiBhbmQgbWFrZSBhIGNvb2wgdmFzZScsXHJcbiAgICAgICAgY29zdDogeyAnc2FuZCc6IDIwLCAncG9uZGVyJzogODAgfVxyXG4gICAgfSxcclxuICAgICdvcmdhbml6YXRpb24nOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJPcmdhbml6YXRpb24nLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIHRleHQ6ICdPcmdhbml6ZWQgU3RvcmFnZScsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdPcmdhbml6ZSB5b3VyIHN0b3JhZ2UgYnkgZ3JvdXBzJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAgfVxyXG4gICAgfSxcclxuICAgICdwYXBlcic6IHtcclxuICAgICAgICBpZDogJ3BvbmRlclBhcGVyJyxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICB0ZXh0OiAnUGFwZXIgUHJvY2Vzc2luZycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdTbWFzaCBkb3duIHNvbWUgd29vZCBpbnRvIHBhcGVyJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAyMDAsICd3b29kJzogMTAwIH1cclxuICAgIH0sXHJcbiAgICAnYXV0b0Nsb25lJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQXV0b0Nsb25lJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkF1dG8gQ2xvbmVcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBdXRvbWF0aWNhbGx5IHByb2R1Y2UgY2xvbmVzXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTQwLCAnY2xvbmVzJzogMjAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgJ2VmZmVjdGl2ZUJ1aWxkaW5ncyc6IHtcclxuICAgICAgICBpZDogJ3BvbmRlckVmZmVjdGl2ZUJ1aWxkaW5ncycsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJCdWlsZGluZ3MgSVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkluY3JlYXNlIGJ1aWxkaW5nIGVmZmVjdHMgYnkgMyVcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxODAgfSxcclxuICAgIH0sXHJcbiAgICAnYWdyaWN1bHR1cmUnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJBZ3JpY3VsdHVyZScsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJBZ3JpY3VsdHVyZVwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkZpbmQgc29tZSBzZWVkcyBmcm9tIGFsbCB0aG9zZSBwbGFudHNcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAxODAgfVxyXG4gICAgfSxcclxuICAgICdjb21iYXRUYWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJDb21iYXRUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiQ29tYmF0XCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiSXMgdGhlcmUgYW55b25lIHRvIHNwYXIgd2l0aCBiZXNpZGVzIHlvdT9cIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiAzMDAsICdzcGVhcic6IDEwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2h1bnRpbmcnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJIdW50aW5nJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkh1bnRpbmdcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCJBdCBsZWFzdCB0aGVyZSBhcmUgYW5pbWFsc1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDIwMCwgJ2Zpc2gnOiA1MCB9XHJcbiAgICB9LFxyXG4gICAgJ3BlcmtzVGFiJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUGVya3NUYWInLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6ICdQZXJrcycsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdNYXliZSB5b3UgYXMgdGhlIG9yaWdpbmFsIHNob3VsZCBzcGVjaWFsaXplJyxcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA0MDAgfVxyXG4gICAgfSxcclxuICAgIC8vICdhdXRvY3JhZnQnOiB7XHJcbiAgICAvLyAgICAgaWQ6IFwicG9uZGVyQXV0b2NyYWZ0XCIsXHJcbiAgICAvLyAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAvLyAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAvLyAgICAgdGV4dDogXCJBdXRvIENyYWZ0XCIsXHJcbiAgICAvLyAgICAgdG9vbHRpcERlc2M6IFwiQXV0b21hdGljYWxseSBjcmFmdCByZXNvdXJjZXMgd2hlbiB0aGV5IHJlYWNoIHRoZSBzdG9yYWdlIGxpbWl0XCIsXHJcbiAgICAvLyAgICAgY29zdDogeyAncG9uZGVyJzogNDAwLCAnd29vZCc6IDEwMDAsICdyb2Nrcyc6IDUwMCwgJ3doZWF0JzogMTAwMCB9XHJcbiAgICAvLyB9LFxyXG4gICAgJ2ZhY3RvcnlUYWInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJGYWN0b3J5VGFiJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkZhY3Rvcmllc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkFzY2VuZCB0byB0aGUgbmV4dCBsZXZlbCBvZiBlY29ub215XCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNTAwLCAnZ29sZCc6IDEwLCAnd29vZCc6IDEwMDAsICd3aGVhdCc6IDEwMDAsICdyb2Nrcyc6IDEwMDAgfVxyXG4gICAgfSxcclxuICAgICdwb25kZXIyJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyUG9uZGVyMicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJUaGluayBldmVuIGhhcmRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIjUlIGJvb3N0IHRvIHBvbmRlcmluZ1wiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDMwMCB9XHJcbiAgICB9LFxyXG4gICAgJ3BvbmRlcjMnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJQb25kZXIzJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIlRoaW5rIGhhcmRlc3RcIixcclxuICAgICAgICB0b29sdGlwRGVzYzogXCI1JSBib29zdCB0byBwb25kZXJpbmdcIixcclxuICAgICAgICBjb3N0OiB7ICdwb25kZXInOiA2MDAgfVxyXG4gICAgfSxcclxuICAgICdiaWdnZXJTaGVsdGVyJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VyU2hlbHRlcicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJFeHBhbmQgU2hlbHRlclwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlNoZWx0ZXJzIGNhbiBob3VzZSAxIG1vcmUgY2xvbmUgZWFjaFwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDUwMCwgJ3N0aWNrcyc6IDEwMDAgfVxyXG4gICAgfSxcclxuICAgICdiaWdnZXJIdXQnOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJCaWdnZXJIdXQnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiRXhwYW5kIEh1dFwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkh1dHMgY2FuIGhvdXNlIDEgbW9yZSBjbG9uZSBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogNzUwLCAnc3RpY2tzJzogMTUwMCwgJ3ZpbmVzJzogMTAwMCB9XHJcbiAgICB9LFxyXG4gICAgJ2JpZ2dlckhvdXNlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VySG91c2UnLFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGlzUG9uZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRleHQ6IFwiVHdvLXN0b3J5IGhvdXNlc1wiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIkhvdXNlcyBjYW4gaG91c2UgMiBtb3JlIGNsb25lcyBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTAwMCwgJ3dvb2QnOiAyMDAwLCAncm9ja3MnOiAyMDAwIH1cclxuICAgIH0sXHJcbiAgICAnYmlnZ2VyVGVlcGVlJzoge1xyXG4gICAgICAgIGlkOiAncG9uZGVyQmlnZ2VyVGVlcGVlJyxcclxuICAgICAgICByZXF1aXJlbWVudDogKCkgPT4gdHJ1ZSxcclxuICAgICAgICBpc1BvbmRlcmVkOiBmYWxzZSxcclxuICAgICAgICB0ZXh0OiBcIkRvdWJsZSBkaWFtZXRlciBUZWVwZWVzXCIsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6IFwiVGVlcGVlcyBjYW4gaG91c2UgNCBtb3JlIGNsb25lcyBlYWNoXCIsXHJcbiAgICAgICAgY29zdDogeyAncG9uZGVyJzogMTI1MCwgJ3dvb2QnOiAzMDAwLCAnaGlkZXMnOiAxNTAwIH1cclxuICAgIH0sXHJcbiAgICAnZXZlbkJpZ2dlclNoZWx0ZXInOiB7XHJcbiAgICAgICAgaWQ6ICdwb25kZXJFdmVuQmlnZ2VyU2hlbHRlcicsXHJcbiAgICAgICAgcmVxdWlyZW1lbnQ6ICgpID0+IHRydWUsXHJcbiAgICAgICAgaXNQb25kZXJlZDogZmFsc2UsXHJcbiAgICAgICAgdGV4dDogXCJFeHBhbmQgU2hlbHRlciBBZ2FpblwiLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiBcIlNoZWx0ZXJzIGNhbiBob3VzZSAxIG1vcmUgY2xvbmUgZWFjaFwiLFxyXG4gICAgICAgIGNvc3Q6IHsgJ3BvbmRlcic6IDE1MDAsICdzdGlja3MnOiAzMDAwLCAnZmlzaCc6IDEwMDAgfVxyXG4gICAgfSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIHJlc2V0UG9uZGVycygpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhwb25kZXJzKSkge1xyXG4gICAgICAgIHZhbC5pc1BvbmRlcmVkID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcG9uZGVyczogcG9uZGVycyxcclxuICAgIHJlc2V0UG9uZGVyc1xyXG59OyIsImNvbnN0IHByZXN0aWdlID0ge1xyXG4gICAgJ21heENsb25lcyc6IHtcclxuICAgICAgICB0ZXh0OiAnQ3JhbXBlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdNYXggQ2xvbmVzICgrMSknLFxyXG4gICAgICAgIGNvc3Q6IDIsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2xvbmVCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnSGFuZHltYW4nLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ2xvbmUgUHJvZHVjdGl2aXR5ICgrNSUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2dhdGhlcmluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdQaWNrZXInLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnR2F0aGVyaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ21hc29ucnlCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnUm9ja2VyJyxcclxuICAgICAgICB0b29sdGlwRGVzYzogJ01hc29ucnkgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnY2FycGVudHJ5Qm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ0Nob3BwZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQ2FycGVudHJ5IEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ3RoaW5raW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ1dpemVuZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnVGhpbmtpbmcgRWZmaWNpZW5jeSAoKzEwJSknLFxyXG4gICAgICAgIGNvc3Q6IDEsXHJcbiAgICAgICAgbGV2ZWw6IDBcclxuICAgIH0sXHJcbiAgICAnZmFybWluZ0Jvb3N0Jzoge1xyXG4gICAgICAgIHRleHQ6ICdQcnVuZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnRmFybWluZyBFZmZpY2llbmN5ICgrMTAlKScsXHJcbiAgICAgICAgY29zdDogMSxcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdmaXNoaW5nQm9vc3QnOiB7XHJcbiAgICAgICAgdGV4dDogJ0hvb2tlZCcsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdGaXNoaW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2h1bnRpbmdCb29zdCc6IHtcclxuICAgICAgICB0ZXh0OiAnVHJhY2tlcicsXHJcbiAgICAgICAgdG9vbHRpcERlc2M6ICdIdW50aW5nIEVmZmljaWVuY3kgKCsxMCUpJyxcclxuICAgICAgICBjb3N0OiAxLFxyXG4gICAgICAgIGxldmVsOiAwXHJcbiAgICB9LFxyXG4gICAgJ2NoZWFwZXJCdWlsZGluZ3MnOiB7XHJcbiAgICAgICAgdGV4dDogJ1JpY2tldHknLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnQnVpbGRpbmcgQ29zdCAoLTUlKScsXHJcbiAgICAgICAgY29zdDogMixcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfSxcclxuICAgICdzdG9yYWdlU3BhY2UnOiB7XHJcbiAgICAgICAgdGV4dDogJ1N0dWZmZWQnLFxyXG4gICAgICAgIHRvb2x0aXBEZXNjOiAnU3RvcmFnZSBTcGFjZSAoKzUlKScsXHJcbiAgICAgICAgY29zdDogMixcclxuICAgICAgICBsZXZlbDogMFxyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gaGFzUHJlc3RpZ2UocHJlcykge1xyXG4gICAgcmV0dXJuIGdldExldmVsT2ZQcmVzdGlnZShwcmVzKSA+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExldmVsT2ZQcmVzdGlnZShwcmVzKSB7XHJcbiAgICByZXR1cm4gcHJlc3RpZ2VbcHJlc10ubGV2ZWw7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBwcmVzdGlnZSxcclxuICAgIGhhc1ByZXN0aWdlLFxyXG4gICAgZ2V0TGV2ZWxPZlByZXN0aWdlXHJcbn07IiwiLy8gU3RhdGUgb2YgZWFjaCByZXNvdXJjZVxyXG5cclxuLy8gVE9ETzogQUREIFJFUVVJUkVNRU5UUyBGT1IgRUFDSCBUTyBNQUtFIFRIRU0gVklTSUJMRVxyXG4vLyBvciBqdXN0IGRpc3BsYXkgdGhlbSB3aGVuIHlvdSBnZXQgeW91ciBmaXJzdCBvbmU/XHJcbmNvbnN0IHJlc291cmNlcyA9IHtcclxuICAgIFwiY2xvbmVzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwibWFrZUNsb25lXCIsXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIG1heDogMFxyXG4gICAgfSxcclxuXHJcbiAgICBcInN0aWNrc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclN0aWNrc1wiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IHRydWUsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOGsfCTgJwgR2F0aGVyaW5nIFN0aWNrc1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4axIEdhdGhlciBTdGlja3NcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgZW1vamk6ICfwk4CdJyxcclxuICAgICAgICBtYXg6IDUwXHJcbiAgICB9LFxyXG4gICAgXCJ2aW5lc1wiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclZpbmVzXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JONr/CTgKogR2F0aGVyaW5nIFZpbmVzXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTja8gR2F0aGVyIFZpbmVzXCIsXHJcbiAgICAgICAgXCJ0b29sc1wiOiBbeyBcInRvb2xcIjogXCJBeGVcIiwgXCJ2YWxcIjogMS41IH1dLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgKonLFxyXG4gICAgICAgIG1heDogNTBcclxuICAgIH0sXHJcbiAgICBcInJvY2tzXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyUm9ja3NcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4qW8JOAqSBHYXRoZXJpbmcgUm9ja3NcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOKliBHYXRoZXIgUm9ja3NcIixcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgZW1vamk6ICfwk4CpJyxcclxuICAgICAgICBtYXg6IDMwXHJcbiAgICB9LFxyXG4gICAgXCJmaXNoXCI6IHtcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyRmlzaFwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCThp3wk4af8JOGniDwk4GDIEdvbmUgRmlzaGluZ1wiLFxyXG4gICAgICAgIFwiZGVmYXVsdFRleHRcIjogXCLwk4ad8JOGn/CThp4gR28gRmlzaFwiLFxyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBlbW9qaTogJ/CTgYMnLFxyXG4gICAgICAgIFwidG9vbHNcIjogW3sgXCJ0b29sXCI6IFwiU3BlYXJcIiwgXCJ2YWxcIjogMSB9LCB7IFwidG9vbFwiOiBcIkZpc2hpbmcgUm9kXCIsIFwidmFsXCI6IDIgfV0sXHJcbiAgICAgICAgbWF4OiAxMFxyXG4gICAgfSxcclxuICAgIFwid29vZFwiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlcldvb2RcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CoIENob3BwaW5nIFdvb2RcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOMjyBDaG9wIFdvb2RcIixcclxuICAgICAgICBlbW9qaTogJ/CTgKgnLFxyXG4gICAgICAgIFwidG9vbHNcIjogW3sgXCJ0b29sXCI6IFwiQXhlXCIsIFwidmFsXCI6IDEuNSB9LCB7IFwidG9vbFwiOiBcIkNoYWluc2F3XCIsIFwidmFsXCI6IDMgfV0sXHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIG1heDogNDBcclxuICAgIH0sXHJcbiAgICBcInBvbmRlclwiOiB7XHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlclBvbmRlclwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTgIEgUG9uZGVyaW5nXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgIEgUG9uZGVyXCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CBJyxcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwib3JlXCI6IHtcclxuICAgICAgICBcInZhbHVlXCI6IDAsXHJcbiAgICAgICAgXCJpZFwiOiBcImdhdGhlck9yZVwiLFxyXG4gICAgICAgIFwiaXNHZXR0aW5nXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiaXNWaXNpYmxlXCI6IGZhbHNlLFxyXG4gICAgICAgIFwiYWN0aXZlVGV4dFwiOiBcIvCTibjwk4GEIE1pbmluZyBPcmVcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOJuCBNaW5lIE9yZVwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOBhCcsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwic2FuZFwiOiB7XHJcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxyXG4gICAgICAgIFwiaWRcIjogXCJnYXRoZXJTYW5kXCIsXHJcbiAgICAgICAgXCJpc0dldHRpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgXCJpc1Zpc2libGVcIjogZmFsc2UsXHJcbiAgICAgICAgXCJhY3RpdmVUZXh0XCI6IFwi8JOAqSBTY29vcGluZyBTYW5kXCIsXHJcbiAgICAgICAgXCJkZWZhdWx0VGV4dFwiOiBcIvCTgKkgU2Nvb3AgU2FuZFwiLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgbWF4OiAyMFxyXG4gICAgfSxcclxuICAgIFwid2hlYXRcIjoge1xyXG4gICAgICAgIFwidmFsdWVcIjogMCxcclxuICAgICAgICBcImlkXCI6IFwiZ2F0aGVyV2hlYXRcIixcclxuICAgICAgICBcImlzR2V0dGluZ1wiOiBmYWxzZSxcclxuICAgICAgICBcImlzVmlzaWJsZVwiOiBmYWxzZSxcclxuICAgICAgICBcImFjdGl2ZVRleHRcIjogXCLwk4CpIEhhcnZlc3RpbmcgV2hlYXRcIixcclxuICAgICAgICBcImRlZmF1bHRUZXh0XCI6IFwi8JOAqSBIYXJ2ZXN0IFdoZWF0XCIsXHJcbiAgICAgICAgZW1vamk6ICfwk4CdJyxcclxuICAgICAgICBtYXg6IDIwXHJcbiAgICB9LFxyXG4gICAgJ2ZyZXNod2F0ZXInOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyRnJlc2h3YXRlcicsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgKknLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdoaWRlcyc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJIaWRlcycsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICd3YXRlcicsXHJcbiAgICAgICAgJ2RlZmF1bHRUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICBlbW9qaTogJ/CTgI4nLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG5cclxuICAgIH0sXHJcbiAgICAnY2xheSc6IHtcclxuICAgICAgICAndmFsdWUnOiAwLFxyXG4gICAgICAgICdpZCc6ICdnYXRoZXJDbGF5JyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2hlcmJzJzoge1xyXG4gICAgICAgICd2YWx1ZSc6IDAsXHJcbiAgICAgICAgJ2lkJzogJ2dhdGhlckhlcmJzJyxcclxuICAgICAgICAnaXNHZXR0aW5nJzogZmFsc2UsXHJcbiAgICAgICAgJ2lzVmlzaWJsZSc6IGZhbHNlLFxyXG4gICAgICAgICdhY3RpdmVUZXh0JzogJ3dhdGVyJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAnd2F0ZXInLFxyXG4gICAgICAgIGVtb2ppOiAn8JOAqScsXHJcbiAgICAgICAgJ21heCc6IDUwXHJcbiAgICB9LFxyXG4gICAgJ2dhbWUnOiB7XHJcbiAgICAgICAgJ3ZhbHVlJzogMCxcclxuICAgICAgICAnaWQnOiAnZ2F0aGVyR2FtZScsXHJcbiAgICAgICAgJ2lzR2V0dGluZyc6IGZhbHNlLFxyXG4gICAgICAgICdpc1Zpc2libGUnOiBmYWxzZSxcclxuICAgICAgICAnYWN0aXZlVGV4dCc6ICfwk4Oa8JOAjiBIdW50aW5nJyxcclxuICAgICAgICAnZGVmYXVsdFRleHQnOiAn8JOAjiBIdW50JyxcclxuICAgICAgICBlbW9qaTogJ/CTgI4nLFxyXG4gICAgICAgICdtYXgnOiA1MFxyXG4gICAgfSxcclxuICAgICdodXNrcyc6IHtcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBpZDogJ2dhdGhlckh1c2tzJyxcclxuICAgICAgICBpc0dldHRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGlzVmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgYWN0aXZlVGV4dDogJycsXHJcbiAgICAgICAgZGVmYXVsdFRleHQ6IFwiXCIsXHJcbiAgICAgICAgZW1vamk6ICdYJyxcclxuICAgICAgICAnbWF4JzogMTAwMFxyXG4gICAgfSxcclxuICAgICd2aW9sZW5jZSc6IHtcclxuICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICBpZDogJ2dhdGhlclZpb2xlbmNlJyxcclxuICAgICAgICBpc0dldHRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGlzVmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgYWN0aXZlVGV4dDogJycsXHJcbiAgICAgICAgZGVmYXVsdFRleHQ6ICcnLFxyXG4gICAgICAgIGVtb2ppOiAnJyxcclxuICAgICAgICBtYXg6IDEwMFxyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBpc1Jlc291cmNlKHJlc291cmNlKSB7XHJcbiAgICAvLyByZXR1cm4gcmVzb3VyY2VzW3Jlc291cmNlXSAhPT0gbnVsbDtcclxuICAgIHJldHVybiByZXNvdXJjZSBpbiByZXNvdXJjZXM7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0UmVzb3VyY2VDb25maWdCeUlkKGlkKSB7XHJcbiAgICBmb3IgKGxldCByIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbcl0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZXNbcl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0UmVzb3VyY2VzKCkge1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlcykpIHtcclxuICAgICAgICB2YWwudmFsdWUgPSAwO1xyXG4gICAgfVxyXG59XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXHJcbiAgICBpc1Jlc291cmNlLFxyXG4gICAgZ2V0UmVzb3VyY2VDb25maWdCeUlkLFxyXG4gICAgcmVzZXRSZXNvdXJjZXNcclxufTsiLCJjb25zdCBza2lsbHMgPSB7XHJcbiAgICBnYXRoZXJpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnc3RpY2tzJywgJ3ZpbmVzJywgJ3NhbmQnLCAnaGVyYnMnLCAnYmVycmllcyddXHJcbiAgICB9LFxyXG4gICAgbWFzb25yeToge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydyb2NrcycsICdvcmUnLCAnY2xheSddLFxyXG4gICAgICAgIG5lZWRUb29sczogW3sgJ1BpY2theGUnOiBbJ29yZSddIH1dXHJcbiAgICB9LFxyXG4gICAgY2FycGVudHJ5OiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3dvb2QnLCAnaGFuZGxlJywgJ3N0YWZmJywgJ2Zpc2hpbmdyb2QnXSxcclxuICAgICAgICBuZWVkVG9vbHM6IFt7ICdBeGUnOiBbJ3dvb2QnXSB9XVxyXG4gICAgfSxcclxuICAgIHRoaW5raW5nOiB7XHJcbiAgICAgICAgZXhwOiAwLFxyXG4gICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgIGFmZmVjdGVkUmVzb3VyY2VzOiBbJ3BvbmRlciddXHJcbiAgICB9LFxyXG4gICAgLy8gc21pdGhpbmc6IHtcclxuICAgIC8vICAgICBleHA6IDAsXHJcbiAgICAvLyAgICAgbGV2ZWw6IDAsXHJcbiAgICAvLyAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnYXhlJywgJ3BpY2theGUnLCAnc3BlYXInLCAnZ2xhc3MnLCAnaXJvbicsICdzaWx2ZXInLCAnZ29sZCddXHJcbiAgICAvLyB9LFxyXG4gICAgZmFybWluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWyd3aGVhdCcsICdmcmVzaHdhdGVyJ11cclxuICAgIH0sXHJcbiAgICBjb21iYXQ6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsndmlvbGVuY2UnXVxyXG4gICAgfSxcclxuICAgIGZpc2hpbmc6IHtcclxuICAgICAgICBleHA6IDAsXHJcbiAgICAgICAgbGV2ZWw6IDAsXHJcbiAgICAgICAgYWZmZWN0ZWRSZXNvdXJjZXM6IFsnZmlzaCddXHJcbiAgICB9LFxyXG4gICAgaHVudGluZzoge1xyXG4gICAgICAgIGV4cDogMCxcclxuICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICBhZmZlY3RlZFJlc291cmNlczogWydoaWRlcycsICdnYW1lJ11cclxuICAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2tpbGxzOiBza2lsbHNcclxufTsiLCJjb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMsIHJlc2V0Q3JhZnRlZFJlc291cmNlcyB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MsIHJlc2V0QnVpbGRpbmdzIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKTtcclxuY29uc3QgeyBwb25kZXJzLCByZXNldFBvbmRlcnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGJ1dHRvbnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnV0dG9uc1wiKTtcclxuY29uc3QgeyByZXNvdXJjZXMsIHJlc2V0UmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcblxyXG5jb25zdCB7IHNhdmVHYW1lLCBsb2FkR2FtZSB9ID0gcmVxdWlyZShcIi4vc2F2aW5nXCIpO1xyXG5jb25zdCB7IGdlbmVyYXRlVG9vbHRpcENvc3QsIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMsIGluY3JlYXNlTWF0ZXJpYWwsIGNyYWZ0QWxsUmVzb3VyY2VzLCBjcmFmdFJlc291cmNlLCBjYWxjSW5jcmVhc2UsIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcywgaW5jcmVhc2VNYXggfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgYnV5TWF4QnVpbGRpbmdzLCBidXlCdWlsZGluZywgY3JlYXRlQnVpbGRpbmdCdXR0b24gfSA9IHJlcXVpcmUoJy4vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgaGFzUGVyaywgc2VsZWN0QWJpbGl0eSwgcmVzZXRQZXJrcyB9ID0gcmVxdWlyZSgnLi9wZXJrcycpO1xyXG5jb25zdCB7IGNsZWFyU2lkZWJhciB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBtYWtlVmlzaWJsZSB9ID0gcmVxdWlyZSgnLi9tYWtlVmlzaWJsZScpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnV0dG9uVmlzaWJpbGl0eScpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5jb25zdCB7IGJ1eUZhY3RvcnksIGF0dGVtcHRNYW51ZmFjdHVyZSwgdXBncmFkZUJ1bGsgfSA9IHJlcXVpcmUoJy4vZmFjdG9yeScpO1xyXG5jb25zdCB7IGlzUG9uZGVyZWQsIGdlbmVyYXRlUG9uZGVyQnV0dG9ucyB9ID0gcmVxdWlyZShcIi4vcG9uZGVyXCIpO1xyXG5jb25zdCB7IGhhc1Rvb2wsIGFkZFRvb2wgfSA9IHJlcXVpcmUoJy4vdG9vbHMnKTtcclxuY29uc3QgeyBnZXRBdGVGaXNoLCBzZXRBdGVGaXNoIH0gPSByZXF1aXJlKCcuL2F0ZUZpc2gnKTtcclxuY29uc3QgeyB1cGRhdGVUb3RhbCwgY2xlYXJKb2JBc3NpZ25tZW50cywgcmVzZXRBbGxKb2JzIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UsIHJlc2V0U3RhZ2VzIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHJlY2FsY01heENsb25lcyB9ID0gcmVxdWlyZSgnLi9yZWNhbGNNYXhDbG9uZXMnKTtcclxuY29uc3QgeyBpbml0aWFsaXplUmVzb3VyY2VUYWdzLCB1cGRhdGVTaWRlYmFyLCB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHRyaWdnZXJGbG9hdFVwVGV4dCB9ID0gcmVxdWlyZSgnLi90cmlnZ2VyRmxvYXRVcFRleHQnKTtcclxuY29uc3QgeyB1cGRhdGVCb3VuY2VBbmltYXRpb24gfSA9IHJlcXVpcmUoJy4vdXBkYXRlQm91bmNlQW5pbWF0aW9uJyk7XHJcbmNvbnN0IHsgdXBkYXRlVG9vbHRpcCwgaGlkZVRvb2x0aXAgfSA9IHJlcXVpcmUoJy4vdXBkYXRlVG9vbHRpcCcpO1xyXG5jb25zdCB7IGNhbkNyYWZ0IH0gPSByZXF1aXJlKCcuL2NhbkNyYWZ0Jyk7XHJcbmNvbnN0IHsgY2FsY3VsYXRlV2luQ2hhbmNlLCBjb21iYXQsIHN3aXRjaFN0YW5jZSB9ID0gcmVxdWlyZSgnLi9jb21iYXQnKTtcclxuY29uc3QgeyBzaG93VGFiLCBnZXRDdXJyZW50VGFiIH0gPSByZXF1aXJlKCcuL3Nob3dUYWInKTtcclxuY29uc3QgeyBnZXRTZnhWb2x1bWUsIGdldE11c2ljVm9sdW1lLCBzZXRNdXNpY1ZvbHVtZSwgc2V0U2Z4Vm9sdW1lIH0gPSByZXF1aXJlKCcuL2F1ZGlvJyk7XHJcbmNvbnN0IHsgZ2VuZXJhdGVSYW5kb21CdWlsZGluZyB9ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nJyk7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHNldFRvdGFsVGltZSh0aW1lKSB7XHJcbiAgICB0b3RhbF90aW1lID0gdGltZTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qIEdBVEhFUklORyBNQVRFUklBTFMqL1xyXG5jb25zdCBzaWRlYmFyUGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXNvdXJjZXNcIik7XHJcbmZ1bmN0aW9uIHN0b3BBbGxHYXRoZXJpbmcoKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG4gICAgICAgIHZhbC5pc0dldHRpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCByQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNnYXRoZXJcIiArIGNhcGl0YWxpemVGaXJzdChrZXkpKTtcclxuICAgICAgICBpZiAockJ1dHRvbikge1xyXG4gICAgICAgICAgICByQnV0dG9uLnRleHRDb250ZW50ID0gdmFsLmRlZmF1bHRUZXh0O1xyXG4gICAgICAgICAgICByQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2dhdGhlcmluZycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2V0IHNpZGViYXIgdG8gbm90IGJvbGRcclxuICAgICAgICBjb25zdCBzaWRlYmFyVGV4dCA9IHNpZGViYXJQYXJlbnQucXVlcnlTZWxlY3RvcignI3Jlc291cmNlLScgKyBrZXkpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGVtb2ppR2F0aGVyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Vtb2ppR2F0aGVyRGlzcGxheScpO1xyXG5mdW5jdGlvbiB0b2dnbGVSZXNvdXJjZShyZXNvdXJjZUtleSkge1xyXG5cclxuICAgIGNvbnN0IGdhdGhlckF1ZGlvID0gbmV3IEF1ZGlvKCcuL2F1ZGlvL2dhdGhlci53YXYnKTtcclxuICAgIGdhdGhlckF1ZGlvLnZvbHVtZSA9IGdldFNmeFZvbHVtZSgpO1xyXG4gICAgZ2F0aGVyQXVkaW8ucGxheSgpO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VzW3Jlc291cmNlS2V5XTtcclxuXHJcblxyXG4gICAgY29uc3Qgc2lkZWJhclBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpO1xyXG5cclxuICAgIGNvbnN0IHNpZGViYXJUZXh0ID0gc2lkZWJhclBhcmVudC5xdWVyeVNlbGVjdG9yKCcjcmVzb3VyY2UtJyArIHJlc291cmNlS2V5KTtcclxuICAgIGNvbnN0IHJlc291cmNlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dhdGhlcicgKyByZXNvdXJjZUtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlc291cmNlS2V5LnNsaWNlKDEpKTtcclxuICAgIGVtb2ppR2F0aGVyRGl2LnRleHRDb250ZW50ID0gJ/CTgJ8nOyAvLyBEZWZhdWx0IGVtb2ppIPCTgJ9cclxuXHJcblxyXG4gICAgaWYgKCFyZXNvdXJjZS5pc0dldHRpbmcpIHtcclxuICAgICAgICBzdG9wQWxsR2F0aGVyaW5nKCk7IC8vIFN0b3AgYWxsIGdhdGhlcmluZyBhY3Rpb25zXHJcbiAgICAgICAgcmVzb3VyY2UuaXNHZXR0aW5nID0gdHJ1ZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24udGV4dENvbnRlbnQgPSByZXNvdXJjZS5hY3RpdmVUZXh0O1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAoc2lkZWJhclRleHQpIHNpZGViYXJUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGVtb2ppR2F0aGVyRGl2LnRleHRDb250ZW50ID0gcmVzb3VyY2UuZW1vamk7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzb3VyY2UuZW1vamkpO1xyXG4gICAgICAgIHJlc291cmNlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2dhdGhlcmluZycpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvdXJjZS5pc0dldHRpbmcgPSBmYWxzZTtcclxuICAgICAgICByZXNvdXJjZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdnYXRoZXJpbmcnKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmVzb3VyY2VCdXR0b24udGV4dENvbnRlbnQgPSByZXNvdXJjZS5kZWZhdWx0VGV4dDtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBCVVRUT05TIEdFTkVSQVRFICovXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1dHRvbnMoKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIGJ1dHRvbnNcIik7XHJcbiAgICBjb25zb2xlLnRyYWNlKCk7XHJcbiAgICAvLyBDcmVhdGUgdGhlIGNvbHVtbnNcclxuXHJcblxyXG4gICAgZm9yIChsZXQgYnVpbGRpbmdLZXkgaW4gYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQnVpbGRpbmdCdXR0b24oYnVpbGRpbmdLZXksIGJ1aWxkaW5ncyk7XHJcbiAgICAgICAgYnV0dG9uc1tidWlsZGluZ0tleV0gPSBidXR0b247XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJNYWRlIGJ1dHRvbiBmb3IgXCIgKyBidWlsZGluZ0tleSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY3JlYXRlQ29sdW1ucyA9IChwYXJlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBjb2wxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29uc3QgY29sMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnN0IGNvbDMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29sMS5zdHlsZS53aWR0aCA9ICczMy4zMyUnO1xyXG4gICAgICAgIGNvbDIuc3R5bGUud2lkdGggPSAnMzMuMzMlJztcclxuICAgICAgICBjb2wzLnN0eWxlLndpZHRoID0gJzMzLjMzJSc7XHJcblxyXG4gICAgICAgIGNvbDEuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgIGNvbDIuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgIGNvbDMuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG5cclxuICAgICAgICBjb2wxLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICBjb2wyLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgICBjb2wzLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgLy8gcGFyZW50LnN0eWxlLmRpc3BsYXkgPSAnZmxleDsnICAvLyBTZXQgcGFyZW50IHRvIGJlIGEgZmxleCBjb250YWluZXJcclxuXHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMyk7XHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMik7XHJcbiAgICAgICAgcGFyZW50LnByZXBlbmQoY29sMSk7XHJcblxyXG4gICAgICAgIHJldHVybiBbY29sMSwgY29sMiwgY29sM107XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHRhYnNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFicycpO1xyXG4gICAgY29uc3QgcHJvZHVjdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBleHBlcmltZW50Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4cGVyaW1lbnRUYWInKS5xdWVyeVNlbGVjdG9yKCcuYnV0dG9uLWNvbHVtbnMnKTtcclxuICAgIGNvbnN0IHBvbmRlckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb25kZXJUYWInKTtcclxuICAgIC8vIGNvbnN0IGpvYkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2JzVGFiJyk7XHJcbiAgICAvLyBZb3UgY2FuIGFkZCBtb3JlIGNvbnRhaW5lcnMgZm9yIGRpZmZlcmVudCB0YWJzIGFzIG5lZWRlZFxyXG5cclxuICAgIC8vIGNvbnN0IHByb2R1Y3Rpb25Db2x1bW5zID0gY3JlYXRlQ29sdW1ucyhwcm9kdWN0aW9uQ29udGFpbmVyKTtcclxuICAgIGNvbnN0IGV4cGVyaW1lbnRDb2x1bW5zID0gY3JlYXRlQ29sdW1ucyhleHBlcmltZW50Q29udGFpbmVyKTtcclxuICAgIGNvbnN0IHBvbmRlckNvbHVtbnMgPSBjcmVhdGVDb2x1bW5zKHBvbmRlckNvbnRhaW5lcik7XHJcbiAgICAvLyBjb25zdCBqb2JDb2x1bW5zID0gY3JlYXRlQ29sdW1ucyhqb2JDb250YWluZXIpO1xyXG4gICAgLy8gU2ltaWxhcmx5LCBjcmVhdGUgY29sdW1ucyBmb3Igb3RoZXIgdGFicyBhcyBuZWVkZWRcclxuXHJcbiAgICBsZXQgcHJvZHVjdGlvbkNvbHVtbkluZGV4ID0gMTtcclxuICAgIGxldCBleHBlcmltZW50Q29sdW1uSW5kZXggPSAwO1xyXG4gICAgbGV0IHBvbmRlckNvbHVtbkluZGV4ID0gMDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCBqb2JDb2x1bW5JbmRleCA9IDA7XHJcblxyXG4gICAgLy8gQWRkIGNvdW50ZXJzIGZvciBvdGhlciB0YWJzIGFzIG5lZWRlZFxyXG5cclxuICAgIGZvciAobGV0IGtleSBpbiBidXR0b25zKSB7XHJcbiAgICAgICAgY29uc3QgYnRuID0gYnV0dG9uc1trZXldO1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHJcbiAgICAgICAgYnV0dG9uRWxlbWVudC5pZCA9IGtleTtcclxuICAgICAgICBidXR0b25FbGVtZW50LmNsYXNzTmFtZSA9IGJ0bi5jbGFzcztcclxuICAgICAgICBidXR0b25FbGVtZW50LnRleHRDb250ZW50ID0gYnRuLnRleHQuc3BsaXQoJ18nKS5qb2luKCcgJyk7XHJcblxyXG4gICAgICAgIC8vIGJ1dHRvbkVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgaWYgKGJ0bi50b29sdGlwRGVzYykgYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgYnRuLnRvb2x0aXBEZXNjKTtcclxuICAgICAgICBpZiAoYnRuLnRvb2x0aXBFZmZlY3QpIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZWZmZWN0JywgYnRuLnRvb2x0aXBFZmZlY3QpO1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCd1bmxvY2snLCBidG4udW5sb2NrKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJywgYnRuLmRhdGFfYnVpbGRpbmcpO1xyXG4gICAgICAgIC8vIGlmIHRoaXMgcmVzb3VyY2UgaXNuJ3QgdW5sb2NrZWQsIGhpZGUgaXRcclxuICAgICAgICAvLyBpZiAoIWJ0bi5pc1Zpc2libGUpIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBidXR0b24gY29ycmVzcG9uZHMgdG8gYSBjcmFmdGVkIHJlc291cmNlIHVzaW5nIHRoZSBJRFxyXG4gICAgICAgIGNvbnN0IGNyYWZ0ZWRSZXNvdXJjZSA9IE9iamVjdC52YWx1ZXMoY3JhZnRlZFJlc291cmNlcykuZmluZChyZXNvdXJjZSA9PiByZXNvdXJjZS5pZCA9PT0ga2V5KTtcclxuXHJcbiAgICAgICAgaWYgKGNyYWZ0ZWRSZXNvdXJjZSkge1xyXG4gICAgICAgICAgICBidG4udG9vbHRpcENvc3QgPSBnZW5lcmF0ZVRvb2x0aXBDb3N0KGNyYWZ0ZWRSZXNvdXJjZS5jb3N0KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBidXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnLCBidG4udG9vbHRpcENvc3QpO1xyXG5cclxuICAgICAgICBpZiAoYnRuLnNob3dUYWIpIHtcclxuICAgICAgICAgICAgYnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNob3dUYWIoYnRuLnNob3dUYWIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTd2l0Y2hpbmcgdG8gdGFiOiBcIiArIGJ0bi5zaG93VGFiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFwcGVuZCB0byB0aGUgYXBwcm9wcmlhdGUgY29sdW1uIGJhc2VkIG9uIHRoZSB0YWIgcHJvcGVydHlcclxuICAgICAgICBpZiAoYnRuLnRhYiA9PT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIC8vc3R5bGU9J2dyaWQtY29sdW1uOiR7Y29sfTsgZ3JpZC1yb3c6JHtyb3d9O1xyXG4gICAgICAgICAgICBidXR0b25FbGVtZW50LnN0eWxlLmdyaWRDb2x1bW4gPSBwcm9kdWN0aW9uQ29sdW1uSW5kZXgudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgLy8gYnV0dG9uRWxlbWVudC5zdHlsZS5ncmlkUm93ID0gJzAnO1xyXG4gICAgICAgICAgICBwcm9kdWN0aW9uQ29sdW1uSW5kZXggPSAocHJvZHVjdGlvbkNvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG4gICAgICAgICAgICBwcm9kdWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBwcm9kdWN0aW9uQ29sdW1uc1twcm9kdWN0aW9uQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBwcm9kdWN0aW9uQ29sdW1uSW5kZXggPSAocHJvZHVjdGlvbkNvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdleHBlcmltZW50Jykge1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uc1tleHBlcmltZW50Q29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBleHBlcmltZW50Q29sdW1uSW5kZXggPSAoZXhwZXJpbWVudENvbHVtbkluZGV4ICsgMSkgJSAzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnRuLnRhYiA9PT0gJ3RhYnMnKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGFic0NvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgICAgIHBvbmRlckNvbHVtbnNbcG9uZGVyQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICBwb25kZXJDb2x1bW5JbmRleCA9IChwb25kZXJDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9IGVsc2UgaWYgKGJ0bi50YWIgPT09ICdqb2InKSB7XHJcbiAgICAgICAgICAgIC8vIGpvYkNvbHVtbnNbam9iQ29sdW1uSW5kZXhdLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBqb2JDb2x1bW5JbmRleCA9IChqb2JDb2x1bW5JbmRleCArIDEpICUgMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ0bi50YWIpLmFwcGVuZENoaWxkKGJ0bik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCBtb3JlIGNvbmRpdGlvbnMgZm9yIG90aGVyIHRhYnMgYXMgbmVlZGVkXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwIGZvciBidWlsZGluZ3NcclxuICAgICAgICBjb25zdCBidWlsZGluZyA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChidWlsZGluZyA9PiBidWlsZGluZyA9PT0ga2V5KTtcclxuICAgICAgICBpZiAoYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnVpbGRpbmcsIGtleSk7XHJcbiAgICAgICAgICAgIC8vIGJ0bi50b29sdGlwQ29zdCA9IGdlbmVyYXRlQnVpbGRpbmdUb29sdGlwQ29zdChidWlsZGluZ3NbYnVpbGRpbmddLmNvc3QpO1xyXG4gICAgICAgICAgICByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChrZXksIGJ1aWxkaW5ncywgaGFzUGVyayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEhpZGUgdGhlIGJ1dHRvbnMgd2Ugc2hvdWxkbid0IHNlZSB5ZXRcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidG4pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghYnRuLnJlcXVpcmVtZW50KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkVsZW1lbnQsIGJ0bi5yZXF1aXJlbWVudCgpKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIHdpdGggcmVxdWlyZW1lbnQgd2hpbGUgZ2VuZXJhdGluZyBidXR0b25zOiAnLCBidG4sIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCB0b29sc1RvU3RhZ2VzID0ge1xyXG4gICAgJ1NoYXJwUm9ja3MnOiAnY3JhZnRSb2NrcycsXHJcbiAgICAnU3BlYXInOiAnZmlzaGluZycsXHJcbiAgICBcIkZpc2hpbmdSb2RcIjogJ2Zpc2hpbmcnLFxyXG4gICAgJ0F4ZSc6ICd3b29kJyxcclxuICAgIFwiUGlja2F4ZVwiOiAnb3JlJ1xyXG59O1xyXG5cclxuLy8gVXBkYXRlIHZpc2liaWxpdHkgb2YgYXNzZXRzXHJcbmNvbnN0IHZpc2liaWxpdHlSdWxlcyA9IFtcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKFwic3RpY2tzXCIsIHJlc291cmNlcykgPj0gMSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKFwic3RpY2tcIilcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnc3RpY2tzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCd2aW5lcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoJ3ZpbmVzJywgcmVzb3VyY2VzKSA+PSAxMCxcclxuICAgICAgICBhY3Rpb246ICgpID0+IG1ha2VWaXNpYmxlKCdyb2NrcycpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0TWF0ZXJpYWwoXCJyb2Nrc1wiLCByZXNvdXJjZXMpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7IG1ha2VWaXNpYmxlKFwidGFiLWJ1dHRvblwiKTsgbWFrZVZpc2libGUoJ2NyYWZ0Um9ja3MnKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgnc3BlYXInLCBjcmFmdGVkUmVzb3VyY2VzKSA+IDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnc3BlYXInKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbChcImZpc2hcIiwgcmVzb3VyY2VzKSA+PSAxLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2Zpc2hpbmcnKVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBoYXNUb29sKFwiQXhlXCIpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ3dvb2QnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldENyYWZ0ZWRSZXNvdXJjZSgncm9wZScpID49IDEsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgncm9wZScpXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdmaXNoJywgcmVzb3VyY2VzKSA+PSA1ICYmICFnZXRBdGVGaXNoKCksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgnZWF0RmlzaCcpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gZ2V0QXRlRmlzaCgpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4geyBtYWtlVmlzaWJsZSgnY2xvbmUnKTsgbWFrZVZpc2libGUoJ3BvbmRlci10YWInKTsgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ3BvbmRlckZpbmlzaCcpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbmF2aWdhdGVUbygnc3RhZ2UyLmh0bWwnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlclNoZWx0ZXInKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IHJlY2FsY01heENsb25lcygpXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNvbmRpdGlvbjogKCkgPT4gaXNQb25kZXJlZCgnYmlnZ2VySHV0JyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiByZWNhbGNNYXhDbG9uZXMoKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlckhvdXNlJyksXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiByZWNhbGNNYXhDbG9uZXMoKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGlzUG9uZGVyZWQoJ2JpZ2dlclRlZXBlZScpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gcmVjYWxjTWF4Q2xvbmVzKClcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBpc1BvbmRlcmVkKCdldmVuQmlnZ2VyU2hlbHRlcicpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gcmVjYWxjTWF4Q2xvbmVzKClcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBnZXRNYXRlcmlhbCgnY2xvbmVzJykgPj0gNDAsXHJcbiAgICAgICAgYWN0aW9uOiAoKSA9PiBtYWtlVmlzaWJsZSgncHJlc3RpZ2UnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IGdldE1hdGVyaWFsKCdjbGF5JykgPiAwLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gbWFrZVZpc2libGUoJ2NsYXknKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+ICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9nZ2xlLWJhc2ljcycpICYmIGlzUG9uZGVyZWQoJ29yZ2FuaXphdGlvbicpLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4gaW5pdGlhbGl6ZVJlc291cmNlVGFncyh0cnVlKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjb25kaXRpb246ICgpID0+IHBhc3NlZFN0YWdlKCdjb21iYXRUYWInKSxcclxuICAgICAgICBhY3Rpb246ICgpID0+IGNhbGN1bGF0ZVdpbkNoYW5jZSgpXHJcbiAgICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IHZpc2liaWxpdHlSdWxlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIGNvbnN0IHJ1bGUgPSB2aXNpYmlsaXR5UnVsZXNbaV07XHJcbiAgICAgICAgaWYgKHJ1bGUuY29uZGl0aW9uKCkpIHtcclxuICAgICAgICAgICAgcnVsZS5hY3Rpb24oKTtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBydWxlIGZyb20gdGhlIGFycmF5XHJcbiAgICAgICAgICAgIHZpc2liaWxpdHlSdWxlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IHRvb2wgaW4gdG9vbHNUb1N0YWdlcykge1xyXG4gICAgICAgIGlmICghaGFzVG9vbCh0b29sKSAmJiBnZXRDcmFmdGVkUmVzb3VyY2UodG9vbCkgPiAwKSB7XHJcbiAgICAgICAgICAgIGFkZFRvb2wodG9vbCk7XHJcbiAgICAgICAgICAgIG1ha2VWaXNpYmxlKHRvb2xzVG9TdGFnZXNbdG9vbF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKTtcclxuICAgICAgICAvLyB1cGRhdGVCb3VuY2VBbmltYXRpb24oKTtcclxuICAgICAgICBpZiAoY3VycmVudEhvdmVyQnV0dG9uICE9PSBudWxsKSB1cGRhdGVUb29sdGlwKGN1cnJlbnRIb3ZlckJ1dHRvbik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG4vLyBNVVNJQyBNQU5BR0VSXHJcblxyXG5jb25zdCBhdWRpb0ZpbGVzID0gW1xyXG4gICAgJy4vYXVkaW8vc29uZzEud2F2JyxcclxuICAgICcuL2F1ZGlvL3NvbmcyLndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nMy53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzQud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc1LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nNi53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzcud2F2JyxcclxuICAgICcuL2F1ZGlvL3Nvbmc4LndhdicsXHJcbiAgICAnLi9hdWRpby9zb25nOS53YXYnLFxyXG4gICAgJy4vYXVkaW8vc29uZzEwLndhdicsXHJcblxyXG5dO1xyXG5cclxubGV0IGN1cnJlbnRBdWRpbyA9IG51bGw7XHJcbmxldCB0aW1lb3V0SWQgPSBudWxsO1xyXG5cclxuZnVuY3Rpb24gcGxheVJhbmRvbVRyYWNrKCkge1xyXG4gICAgLy8gU3RvcCBjdXJyZW50IGF1ZGlvIGlmIHBsYXlpbmdcclxuICAgIGlmIChjdXJyZW50QXVkaW8pIHtcclxuICAgICAgICBjdXJyZW50QXVkaW8ucGF1c2UoKTtcclxuICAgICAgICBjdXJyZW50QXVkaW8uY3VycmVudFRpbWUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNlbGVjdCBhIHJhbmRvbSB0cmFja1xyXG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhdWRpb0ZpbGVzLmxlbmd0aCk7XHJcbiAgICBjdXJyZW50QXVkaW8gPSBuZXcgQXVkaW8oYXVkaW9GaWxlc1tyYW5kb21JbmRleF0pO1xyXG4gICAgY3VycmVudEF1ZGlvLnZvbHVtZSA9IGdldE11c2ljVm9sdW1lKCk7XHJcbiAgICAvLyBQbGF5IHRoZSBzZWxlY3RlZCB0cmFja1xyXG4gICAgY3VycmVudEF1ZGlvLnBsYXkoKTtcclxuXHJcbiAgICAvLyBTY2hlZHVsZSB0aGUgbmV4dCB0cmFja1xyXG4gICAgc2NoZWR1bGVOZXh0VHJhY2soKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2NoZWR1bGVOZXh0VHJhY2soKSB7XHJcbiAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgdGltZW91dFxyXG4gICAgaWYgKHRpbWVvdXRJZCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdoZW4gdGhlIGN1cnJlbnQgdHJhY2sgZW5kcywgd2FpdCBmb3IgdXAgdG8gMzAgc2Vjb25kcyBiZWZvcmUgcGxheWluZyB0aGUgbmV4dFxyXG4gICAgY29uc3Qgc2lsZW5jZUR1cmF0aW9uID0gTWF0aC5yYW5kb20oKSAqIDMwMDAwICsgNTAwMDsgLy8gUmFuZG9tIHNpbGVuY2UgZHVyYXRpb24gNSAtIDM1IHNlY29uZHNcclxuICAgIGN1cnJlbnRBdWRpby5vbmVuZGVkID0gKCkgPT4ge1xyXG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQocGxheVJhbmRvbVRyYWNrLCBzaWxlbmNlRHVyYXRpb24pO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyogSE9US0VZUyAqL1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xyXG4gICAgICAgIGNhc2UgJzEnOlxyXG4gICAgICAgICAgICBzaG93VGFiKCdwcm9kdWN0aW9uVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3RhYi1idXR0b24nKSkgc2hvd1RhYignZXhwZXJpbWVudFRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICczJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdwb25kZXItdGFiJykpIHNob3dUYWIoJ3BvbmRlclRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc0JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdqb2JzLXRhYicpKSBzaG93VGFiKCdqb2JzVGFiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJzUnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3NraWxsc1RhYmxlJykpIHNob3dUYWIoJ3NraWxsc1RhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc2JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdwZXJrc1RhYicpKSBzaG93VGFiKCdwZXJrc1RhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICc3JzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdmYWN0b3J5VGFiJykpIHNob3dUYWIoJ2ZhY3RvcnlUYWInKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnOCc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnY29tYmF0VGFiJykpIHNob3dUYWIoJ2NvbWJhdFRhYicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdhJzpcclxuICAgICAgICAgICAgaWYgKGdldEN1cnJlbnRUYWIoKSA9PT0gJ2NvbWJhdFRhYicpIHN3aXRjaFN0YW5jZSgnYWdncmVzc2l2ZScpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdiJzpcclxuICAgICAgICAgICAgaWYgKGdldEN1cnJlbnRUYWIoKSA9PT0gJ2NvbWJhdFRhYicpIHN3aXRjaFN0YW5jZSgnYmFsYW5jZWQnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYyc6XHJcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50VGFiKCkgPT09ICdjb21iYXRUYWInKSBzd2l0Y2hTdGFuY2UoJ2NhcmVmdWwnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZic6XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaWYgKGdldEN1cnJlbnRUYWIoKSA9PT0gJ2NvbWJhdFRhYicgJiYgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFydENvbWJhdCcpLmRpc2FibGVkKSBjb21iYXQoKTtcclxuICAgICAgICAgICAgZWxzZSB0b2dnbGVSZXNvdXJjZSgnZmlzaCcpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzJzpcclxuICAgICAgICAgICAgdG9nZ2xlUmVzb3VyY2UoJ3N0aWNrcycpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyJzpcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFN0YWdlKCdyb2NrcycpKSB0b2dnbGVSZXNvdXJjZSgncm9ja3MnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAndic6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgndmluZXMnKSkgdG9nZ2xlUmVzb3VyY2UoJ3ZpbmVzJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3cnOlxyXG4gICAgICAgICAgICBpZiAocGFzc2VkU3RhZ2UoJ3dvb2QnKSkgdG9nZ2xlUmVzb3VyY2UoJ3dvb2QnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnbyc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgnb3JlJykpIHRvZ2dsZVJlc291cmNlKCdvcmUnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncCc6XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRTdGFnZSgncG9uZGVyLXRhYicpKSB0b2dnbGVSZXNvdXJjZSgncG9uZGVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiBEQVJLIE1PREUgKi9cclxuLy8gY29uc3QgZGFya01vZGVUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhcmtNb2RlVG9nZ2xlXCIpO1xyXG5jb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcclxuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrLW1vZGUnKTtcclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBkYXJrTW9kZVRvZ2dsZS5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJyk7XHJcbmxldCBpc0RhcmsgPSB0cnVlO1xyXG5cclxuXHJcbi8qIENVVFNDRU5FUyAqL1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGVhdEZpc2goKSB7XHJcbiAgICBpZiAoIWdldEF0ZUZpc2goKSAmJiBnZXRNYXRlcmlhbCgnZmlzaCcsIHJlc291cmNlcykgPj0gMSkge1xyXG4gICAgICAgIC8vIGVhdCBhIGZpc2ggYW5kIGJsYWNrb3V0XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoJ2Zpc2gnLCAtMSk7XHJcbiAgICAgICAgLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIHRvIHN0YXJ0IHRoZSBzZXF1ZW5jZVxyXG4gICAgICAgIGZhZGVUb0JsYWNrKCk7XHJcbiAgICAgICAgLy8gSGlkZSBmaXNoIGJ1dHRvblxyXG4gICAgICAgIHNldEF0ZUZpc2godHJ1ZSk7XHJcbiAgICAgICAgY29uc3QgZmlzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWF0RmlzaFwiKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjaGFuZ2VNZXNzYWdlKFwiWW91IGFyZSB3aXRoIHlvdXJzZWxmIGluIGEgZm9yZXN0LlwiLCAnd2l0aCB5b3Vyc2VsZicpO1xyXG4gICAgICAgICAgICBpbmNyZWFzZU1heCgnY2xvbmVzJywgMSk7XHJcbiAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgIH0sIDEwMDApOyAvLyBkZWxheSBvZiAxc1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZhZGVUb0JsYWNrKCkge1xyXG4gICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5Jyk7XHJcbiAgICBjb25zdCBvdmVybGF5VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LXRleHQnKTtcclxuICAgIGNvbnN0IG92ZXJsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS1idXR0b24nKTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG92ZXJsYXlUZXh0LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICB9LCAyMDAwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgb3ZlcmxheUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICBvdmVybGF5QnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICB9LCA1MDAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZU92ZXJsYXkoKSB7XHJcbiAgICBjb25zdCBvdmVybGF5VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LXRleHQnKTtcclxuICAgIG92ZXJsYXlUZXh0LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcblxyXG4gICAgY29uc3Qgb3ZlcmxheUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LWJ1dHRvbicpO1xyXG4gICAgb3ZlcmxheUJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG5cclxuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpO1xyXG4gICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgIGNvbnN0IGlzZWthaUJ1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXNla2FpQnV0dG9ucycpO1xyXG4gICAgLy8gaXNla2FpQnV0dG9ucy5jaGlsZE5vZGVzLmZvckVhY2goY2hpbGQgPT4gaXNla2FpQnV0dG9ucy5yZW1vdmVDaGlsZChjaGlsZCkpO1xyXG4gICAgaXNla2FpQnV0dG9ucy5pbm5lckhUTUwgPSAnJztcclxuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuYXZpZ2F0ZVRvKHVybCkge1xyXG4gICAgLy8gVHJpZ2dlciB0aGUgb3ZlcmxheSB0byBmYWRlIGluXHJcbiAgICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWdlLXRyYW5zaXRpb24tb3ZlcmxheScpO1xyXG4gICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdmYWRlLWluJyk7XHJcblxyXG4gICAgLy8gV2FpdCBmb3IgdGhlIGZhZGUgaW4gdG8gY29tcGxldGUgYmVmb3JlIGNoYW5naW5nIHRoZSBwYWdlXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcclxuICAgIH0sIDMwMCk7IC8vIFRoaXMgZHVyYXRpb24gc2hvdWxkIG1hdGNoIHRoZSBDU1Mgb3BhY2l0eSB0cmFuc2l0aW9uXHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuLy8gbmF2aWdhdGVUbygnbmV4dC1wYWdlLmh0bWwnKTtcclxuXHJcblxyXG5cclxuLy8gTWVzc2FnZSBcclxuY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZScpO1xyXG5mdW5jdGlvbiBjaGFuZ2VNZXNzYWdlKG5ld01lc3NhZ2UsIGNsb25lV29yZHMpIHtcclxuICAgIGNvbnN0IG1vZGlmaWVkTWVzc2FnZSA9IG5ld01lc3NhZ2UucmVwbGFjZShjbG9uZVdvcmRzLCBgPHNwYW4gY2xhc3M9J3Rvb2x0aXAnIGlkPVwiYWxvbmVcIiB0b29sdGlwRGVzYz1cIllvdSBmZWVsIHBlY2tpc2ggZm9yIHNvbWUgc2VhZm9vZFwiPiR7Y2xvbmVXb3Jkc308L3NwYW4+YCk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSBtb2RpZmllZE1lc3NhZ2U7XHJcbn1cclxuZnVuY3Rpb24gZ2V0TWVzc2FnZSgpIHtcclxuICAgIHJldHVybiBtZXNzYWdlRWxlbWVudDtcclxufVxyXG5cclxuLyogR0FNRSBMT09QICovXHJcblxyXG5cclxubGV0IG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgPSA1MDtcclxubGV0IGxhc3RfdGltZSA9IG51bGw7XHJcbmxldCB0b3RhbF90aW1lID0gMDtcclxubGV0IGFjY3VtdWxhdGVkX2xhZyA9IDA7XHJcblxyXG5cclxuZnVuY3Rpb24gbG9vcChjdXJyZW50X3RpbWUpIHtcclxuICAgIGlmIChsYXN0X3RpbWUgPT09IG51bGwpIGxhc3RfdGltZSA9IGN1cnJlbnRfdGltZTtcclxuXHJcbiAgICBjb25zdCBkZWx0YV90aW1lID0gY3VycmVudF90aW1lIC0gbGFzdF90aW1lO1xyXG5cclxuICAgIHRvdGFsX3RpbWUgKz0gZGVsdGFfdGltZTtcclxuICAgIGFjY3VtdWxhdGVkX2xhZyArPSBkZWx0YV90aW1lO1xyXG5cclxuICAgIGxhc3RfdGltZSA9IGN1cnJlbnRfdGltZTtcclxuXHJcbiAgICAvLyBDYXRjaCB1cCBhbGwgdGhlIG1pc3NlZCB0aWNrc1xyXG4gICAgbGV0IG5vcm1hbFJhdGUgPSBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lO1xyXG4gICAgLy8gc2ltdWxhdGUgd2l0aCBsZXNzIGZpZGVsaXR5IHRvIG1ha2UgdXAgdGltZVxyXG4gICAgLy8gd2hpbGUgKGFjY3VtdWxhdGVkX2xhZyA+PSAxMDAgKiBtaWxsaXNlY29uZHNfcGVyX2ZyYW1lKSB7XHJcbiAgICAvLyAgICAgbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSAqPSAxMDA7XHJcbiAgICAvLyB9XHJcbiAgICBpZiAoYWNjdW11bGF0ZWRfbGFnID49IDEwICogbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSkge1xyXG4gICAgICAgIG1pbGxpc2Vjb25kc19wZXJfZnJhbWUgPSBhY2N1bXVsYXRlZF9sYWcgLyAxMDtcclxuICAgIH1cclxuICAgIHdoaWxlIChhY2N1bXVsYXRlZF9sYWcgPj0gbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSkge1xyXG5cclxuICAgICAgICBhY2N1bXVsYXRlZF9sYWcgLT0gbWlsbGlzZWNvbmRzX3Blcl9mcmFtZTtcclxuICAgICAgICB1cGRhdGUobWlsbGlzZWNvbmRzX3Blcl9mcmFtZSwgdG90YWxfdGltZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbWlsbGlzZWNvbmRzX3Blcl9mcmFtZSA9IG5vcm1hbFJhdGU7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcbn1cclxuXHJcblxyXG5sZXQgdGltZV9zaW5jZV9sYXN0X3NhdmUgPSAwO1xyXG5sZXQgdGltZV9zaW5jZV9tYW51ZmF0dXJlID0gMDtcclxuZnVuY3Rpb24gdXBkYXRlKGRlbHRhX3RpbWUsIHRvdGFsX3RpbWUpIHtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwidXBkYXRpbmcgXCIgKyBrZXkpO1xyXG5cclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKGtleSwgY2FsY0luY3JlYXNlKGtleSwgZGVsdGFfdGltZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcygpO1xyXG4gICAgcmVuZGVyKCk7XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgZ2FtZSBldmVyeSAxMCBzZWNvbmRzXHJcbiAgICB0aW1lX3NpbmNlX2xhc3Rfc2F2ZSArPSBkZWx0YV90aW1lO1xyXG4gICAgdGltZV9zaW5jZV9tYW51ZmF0dXJlICs9IGRlbHRhX3RpbWU7XHJcbiAgICB0b3RhbF90aW1lICs9IGRlbHRhX3RpbWU7XHJcbiAgICBpZiAodGltZV9zaW5jZV9sYXN0X3NhdmUgPj0gMTAwMDApIHtcclxuICAgICAgICBzYXZlR2FtZSgpO1xyXG4gICAgICAgIHRpbWVfc2luY2VfbGFzdF9zYXZlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYW51ZmFjdHVyZSBldmVyeSBzZWNvbmRcclxuICAgIGlmIChwYXNzZWRTdGFnZSgnZmFjdG9yeVRhYicpICYmIHRpbWVfc2luY2VfbWFudWZhdHVyZSA+PSAxMDAwKSB7XHJcbiAgICAgICAgYXR0ZW1wdE1hbnVmYWN0dXJlKCk7XHJcbiAgICAgICAgdGltZV9zaW5jZV9tYW51ZmF0dXJlID0gMDtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8vIHdpbmRvdy5zZXRJbnRlcnZhbChyZW5kZXIsIDEwMCkgLy8gVXBkYXRlIHZpc3VhbHMgMTAgdGltZXMgcGVyIHNlY29uZFxyXG4vLyB3aW5kb3cuc2V0SW50ZXJ2YWwodGljaywgMTAwMCk7IC8vIEV2ZXJ5IHRpY2sgbGFzdHMgZm9yIDEgc2Vjb25kXHJcbi8vIHdpbmRvdy5zZXRJbnRlcnZhbChzYXZlR2FtZSwgMTAwMDApOyAvLyBTYXZlIHRoZSBnYW1lIGV2ZXJ5IDEwIHNlY29uZHNcclxud2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gV2UgdXNlIGEgZnVuY3Rpb24gcmF0aGVyIHRoYW4gc2hvcnRoYW5kIGJlY2F1c2Ugc2F2ZWdhbWUgcmV0dXJucyBhIHN0cmluZ1xyXG4gICAgaWYgKCFjdXJyZW50bHlEZWxldGluZykgc2F2ZUdhbWUoKTtcclxufTtcclxuXHJcblxyXG4vLyBjb25zdCBteVJlc291cmNlcyA9IHt9O1xyXG5cclxuLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGRSZXNvdXJjZUJ0blwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZUZvcm1cIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuLy8gfSk7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGFkZFJlc291cmNlKCkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZU5hbWVcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBhY3RpdmVUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvdXJjZUFjdGl2ZVRleHRcIikudmFsdWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBkZWZhdWx0VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzb3VyY2VEZWZhdWx0VGV4dFwiKS52YWx1ZTtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBjb25zdCBidG5UZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5UZXh0XCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYnRuVG9vbHRpcERlc2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRvb2x0aXBEZXNjXCIpLnZhbHVlO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgYnRuVG9vbHRpcENvc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0blRvb2x0aXBDb3N0XCIpLnZhbHVlO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHZhciBuZXdSZXNvdXJjZSA9IG15UmVzb3VyY2VzW3Jlc291cmNlTmFtZV0gPSB7XHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgaWQ6IFwiZ2F0aGVyXCIgKyByZXNvdXJjZU5hbWUsXHJcbiAgICAgICAgaXNHZXR0aW5nOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVUZXh0OiBhY3RpdmVUZXh0LFxyXG4gICAgICAgIGRlZmF1bHRUZXh0OiBkZWZhdWx0VGV4dCxcclxuICAgICAgICAvLyAuLi4gQWRkIG90aGVyIGF0dHJpYnV0ZXMgYXMgZmV0Y2hlZCBmcm9tIGZvcm0gLi4uXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgYnV0dG9uIG9iamVjdFxyXG4gICAgdmFyIG5ld0J1dHRvbiA9IGJ1dHRvbnNbXCJnYXRoZXJcIiArIHJlc291cmNlTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlc291cmNlTmFtZS5zbGljZSgxKV0gPSB7XHJcbiAgICAgICAgY2xhc3M6ICd0b29sdGlwICcsXHJcbiAgICAgICAgdGFiOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgdGV4dDogYnRuVGV4dCxcclxuICAgICAgICB0b29sdGlwRGVzYzogYnRuVG9vbHRpcERlc2MsXHJcbiAgICAgICAgdG9vbHRpcENvc3Q6IGJ0blRvb2x0aXBDb3N0LFxyXG4gICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB0cnVlIC8vIEJ5IGRlZmF1bHQsIG1ha2luZyB0aGlzIGFsd2F5cyB2aXNpYmxlLiBNb2RpZnkgYXMgbmVlZGVkLlxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhuZXdSZXNvdXJjZSk7XHJcbiAgICBjb25zb2xlLmxvZyhuZXdCdXR0b24pO1xyXG5cclxuICAgIC8vIEhpZGUgZm9ybSBvbmNlIHJlc291cmNlIGlzIGFkZGVkXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc291cmNlRm9ybVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgLy8gT3B0aW9uYWxseSwgeW91IGNhbiB1cGRhdGUgdGhlIFVJIHRvIHNob3cgdGhlIGFkZGVkIHJlc291cmNlXHJcbiAgICAvLyB1cGRhdGVVSShyZXNvdXJjZU5hbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVVSShyZXNvdXJjZU5hbWUpIHtcclxuICAgIC8vIEhlcmUgeW91IGNhbiBjcmVhdGUgYSBuZXcgRE9NIGVsZW1lbnQgdG8gZGlzcGxheSB0aGUgYWRkZWQgcmVzb3VyY2VcclxuICAgIGNvbnN0IHJlc291cmNlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHJlc291cmNlRGl2LmlubmVySFRNTCA9IGAke3Jlc291cmNlTmFtZX06ICR7cmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWV9YDtcclxuXHJcbiAgICAvLyBBcHBlbmQgdG8gc29tZSBjb250YWluZXJcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVzb3VyY2VEaXYpO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmxldCBjdXJyZW50bHlEZWxldGluZyA9IGZhbHNlO1xyXG5cclxuLy8gQWZ0ZXIgYWxsIGhhcyBiZWVuIGxvYWRlZFxyXG4vLyBAdHMtaWdub3JlXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoZXZlbnQpID0+IHtcclxuICAgIGdlbmVyYXRlUG9uZGVyQnV0dG9ucyhwb25kZXJzKTtcclxuICAgIC8vIGFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMoKTtcclxuICAgIG1ha2VGYWN0b3J5QnV0dG9ucygpO1xyXG5cclxuICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MoKTtcclxuXHJcbiAgICBsb2FkR2FtZSgpO1xyXG4gICAgZ2VuZXJhdGVCdXR0b25zKCk7IC8vIENhbGwgdGhpcyBvbmNlIG9uIHBhZ2UgbG9hZCBvciBnYW1lIGluaXRpYWxpemF0aW9uXHJcblxyXG4gICAgY2xlYXJTaWRlYmFyKCk7XHJcbiAgICBpbml0aWFsaXplUmVzb3VyY2VUYWdzKGlzUG9uZGVyZWQoJ29yZ2FuaXphdGlvbicpKTsgLy8gY2hlY2sgaWYgd2UgbmVlZCBncm91cHNcclxuXHJcbiAgICBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zKCk7XHJcblxyXG4gICAgdXBkYXRlU2lkZWJhcigpO1xyXG5cclxuICAgIHNob3dUYWIoJ3Byb2R1Y3Rpb25UYWInKTtcclxuICAgIHJlcXVpcmUoJy4vdHJhZGUnKS5nZW5lcmF0ZVRyYWRlVGFibGUocmVzb3VyY2VzKTtcclxuXHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMDsgKytpKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGdlbmVyYXRlUmFuZG9tQnVpbGRpbmcoKSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UktleUZyb21JRChpZCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgW3IsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VzKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZXNbcl0uaWQsIGlkKTtcclxuICAgICAgICAgICAgaWYgKHZhbC5pZCA9PT0gaWQpIHJldHVybiByO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJ2Vycm9yICcgKyBpZDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldENSS2V5RnJvbUlEKGlkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbciwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhjcmFmdGVkUmVzb3VyY2VzKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyLCB2YWwsIGlkKTtcclxuICAgICAgICAgICAgaWYgKHZhbC5pZCA9PT0gaWQpIHJldHVybiByO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJ2Vycm9yICcgKyBpZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vIFN0YXJ0IHRoZSBtdXNpYyBwbGF5YmFja1xyXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gd2FpdCBmb3IgYSBjbGljayBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2Jsb2cvYXV0b3BsYXkvXHJcbiAgICAgICAgaWYgKGN1cnJlbnRBdWRpbyA9PT0gbnVsbCkgcGxheVJhbmRvbVRyYWNrKCk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQubWF0Y2hlcyhcImJ1dHRvblwiKSkge1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIG9uZSBvZiBvdXIgYnV0dG9ucyB3YXMgY2xpY2tlZFxyXG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGlja2VkJywgYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwcyBcclxuICAgICAgICAgICAgLy8gaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3Rvb2x0aXAnKSkgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgICAgICAvLyB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBCVUlMRElORyBCVVRUT05TXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKSAmJiBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJykgIT09ICd1bmRlZmluZWQnICYmIGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3B1cmNoYXNhYmxlJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhX2J1aWxkaW5nJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gZXZlbnQucGFnZVg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gZXZlbnQucGFnZVk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGJ1aWxkaW5nQXVkaW8gPSBuZXcgQXVkaW8oJy4vYXVkaW8vYnVpbGRpbmcud2F2Jyk7XHJcbiAgICAgICAgICAgICAgICBidWlsZGluZ0F1ZGlvLnZvbHVtZSA9IGdldFNmeFZvbHVtZSgpO1xyXG4gICAgICAgICAgICAgICAgYnVpbGRpbmdBdWRpby5wbGF5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdTdHJpbmcgPSBjYXBpdGFsaXplRmlyc3QoYnVpbGRpbmcpLnNwbGl0KCdfJykuam9pbignICcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gYnV5TWF4QnVpbGRpbmdzKGJ1aWxkaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgYCske2NvdW50fSAke2J1aWxkaW5nU3RyaW5nfXNgLCAnYXF1YScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBidXlCdWlsZGluZyhidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckZsb2F0VXBUZXh0KHgsIHksIGArMSAke2J1aWxkaW5nU3RyaW5nfWAsICdhcXVhJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFBPTkRFUiBCVVRUT05TXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndW5sb2NrJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVubG9ja0F0dHIgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGljaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9uZGVyc1t1bmxvY2tBdHRyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW5VbmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHBvbmRlcnNbdW5sb2NrQXR0cl0uY29zdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPCBwb25kZXJzW3VubG9ja0F0dHJdLmNvc3RbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkNhbm5vdCB1bmxvY2sgXCIgKyB1bmxvY2tBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhblVubG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5VbmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCAtcG9uZGVyc1t1bmxvY2tBdHRyXS5jb3N0W21hdGVyaWFsXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9uZGVyc1t1bmxvY2tBdHRyXS5pc1BvbmRlcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVZpc2libGUodW5sb2NrQXR0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyByZXNvdXJjZUtleSArIFwiVmFsdWVcIikudGV4dENvbnRlbnQgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS52YWx1ZS50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMgYnV0dG9uIGRpc2FwcGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvbmRlckF1ZGlvID0gbmV3IEF1ZGlvKCcuL2F1ZGlvL3BvbmRlci53YXYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9uZGVyQXVkaW8udm9sdW1lID0gZ2V0U2Z4Vm9sdW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbmRlckF1ZGlvLnBsYXkoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVubG9ja2luZyBcIiArIHVubG9ja0F0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIHRoZSBwYWdlIHdoZW4gYnV5aW5nIG9yZ2FuaXplZCBzdG9yYWdlIHRvIGdlbmVyYXRlIHRoZSBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVubG9ja0F0dHIgPT09ICdvcmdhbml6YXRpb24nKSBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE9USEVSIEJVVFRPTlNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZC5zbGljZSgwLCA2KSA9PT0gXCJnYXRoZXJcIikgdG9nZ2xlUmVzb3VyY2UoZ2V0UktleUZyb21JRChidXR0b24uaWQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQuc2xpY2UoMCwgNSkgPT09ICdjcmFmdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3JhZnRBdWRpbyA9IG5ldyBBdWRpbygnLi9hdWRpby9jcmFmdC53YXYnKTtcclxuICAgICAgICAgICAgICAgICAgICBjcmFmdEF1ZGlvLnZvbHVtZSA9IGdldFNmeFZvbHVtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNyYWZ0QXVkaW8ucGxheSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNyID0gZ2V0Q1JLZXlGcm9tSUQoYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCBjcjogJywgY3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5DcmFmdChjcikpIHRyaWdnZXJGbG9hdFVwVGV4dChldmVudC5wYWdlWCwgZXZlbnQucGFnZVksIGArJHtjcn1gLCAnYXF1YScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkgY3JhZnRBbGxSZXNvdXJjZXMoY3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY3JhZnRSZXNvdXJjZShjcik7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ3NhdmVCdXR0b24nKSBzYXZlR2FtZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2VhdEZpc2gnKSBlYXRGaXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnb3ZlcmxheS1idXR0b24nKSBoaWRlT3ZlcmxheSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2RlbGV0ZVNhdmVCdXR0b24nICYmIGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHlvdXIgc2F2ZSBkYXRhPyBUaGlzIHdpbGwgcmVzZXQgYWxsIHlvdXIgcHJvZ3Jlc3MuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlR2FtZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAnY2xlYXJKb2JBc3NpZ25tZW50cycpIGNsZWFySm9iQXNzaWdubWVudHMoKTtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbi5pZCA9PT0gJ2RhcmtNb2RlVG9nZ2xlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyay1tb2RlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGRhcmtNb2RlVG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoJ2RhcmsnKTtcclxuICAgICAgICAgICAgICAgICAgICBpc0RhcmsgPSAhaXNEYXJrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBkYXJrTW9kZVRvZ2dsZS50ZXh0Q29udGVudCA9IGlzRGFyayA/IFwiTGlnaHQgTW9kZVwiIDogXCJEYXJrIE1vZGVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uLmlkID09PSAncHJlc3RpZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNla2FpKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24uaWQgPT09ICdzdGFydENvbWJhdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21iYXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygndGllck9uZUJ1dHRvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBsZXQgcGVyayA9IGJ1dHRvbi50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgIHNlbGVjdEFiaWxpdHkocGVyayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiI2Fsb25lXCIpKSB7XHJcbiAgICAgICAgICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwoJ2Nsb25lcycsIDEpO1xyXG4gICAgICAgICAgICBsZXQgdGV4dCA9ICcrMSBDbG9uZSc7XHJcblxyXG4gICAgICAgICAgICAvLyBIYXJkY29kZWQgaW5zdGVhZCB0byBhdm9pZCBpbmNyZWFzZSBhZmZlY3RlZCBieSBwcm9kdWN0aXZpdHkgYm9udXNlc1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzWydjbG9uZXMnXS52YWx1ZSA8IHJlc291cmNlc1snY2xvbmVzJ10ubWF4KSB7IHJlc291cmNlc1snY2xvbmVzJ10udmFsdWUgKz0gMTsgfVxyXG4gICAgICAgICAgICBlbHNlIHRleHQgPSAnTWF4IENsb25lcyc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjbG9uZUF1ZGlvID0gbmV3IEF1ZGlvKHRleHQgPT09ICcrMSBDbG9uZScgPyAnLi9hdWRpby9jbG9uZS53YXYnIDogJy4vYXVkaW8vZmFpbGNsb25lLndhdicpO1xyXG4gICAgICAgICAgICBjbG9uZUF1ZGlvLnZvbHVtZSA9IGdldFNmeFZvbHVtZSgpO1xyXG4gICAgICAgICAgICBjbG9uZUF1ZGlvLnBsYXkoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDsgLy8gWCBjb29yZGluYXRlIG9mIHRoZSBjbGlja1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gZXZlbnQucGFnZVk7IC8vIFkgY29vcmRpbmF0ZSBvZiB0aGUgY2xpY2tcclxuICAgICAgICAgICAgY29uc3QgY29sb3IgPSB0ZXh0ID09PSAnKzEgQ2xvbmUnID8gJ2dyZWVuJyA6ICdyZWQnO1xyXG4gICAgICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgdGV4dCwgY29sb3IpO1xyXG4gICAgICAgICAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUoJ2Nsb25lcycpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VGYWN0b3J5QnV0dG9ucygpIHtcclxuICAgICAgICBjb25zdCBmYWN0b3J5QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmYWN0b3J5QnV0dG9ucycpO1xyXG5cclxuICAgICAgICBjb25zdCBidXlGYWN0b3J5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd0b29sdGlwJyk7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5pZCA9ICdidXlGYWN0b3J5QnV0dG9uJztcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLnRleHRDb250ZW50ID0gJ0J1eSBOZXcgRmFjdG9yeSc7XHJcbiAgICAgICAgYnV5RmFjdG9yeUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgJ1RoZSBmYWN0b3J5IG11c3QgZ3JvdyEnKTtcclxuICAgICAgICBidXlGYWN0b3J5QnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCAnNTAgc2lsdmVyJyk7XHJcbiAgICAgICAgZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQoYnV5RmFjdG9yeUJ1dHRvbik7XHJcblxyXG4gICAgICAgIGJ1eUZhY3RvcnlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdidXlpbmcgZmFjdG9yeScpO1xyXG4gICAgICAgICAgICBidXlGYWN0b3J5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZ3JhZGVCdWxrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgdXBncmFkZUJ1bGtCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLmlkID0gJ3VwZ3JhZGVCdWxrQnV0dG9uJztcclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi50ZXh0Q29udGVudCA9ICdVcGdyYWRlIEJ1bGsnO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnLCAnQ3JhZnQgbW9yZSByZXNvdXJjZXMgcGVyIHNlY29uZCcpO1xyXG4gICAgICAgIHVwZ3JhZGVCdWxrQnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCAnMiDihpIgNDogMzAgc2lsdmVyJyk7XHJcbiAgICAgICAgZmFjdG9yeUJ1dHRvbnMuYXBwZW5kQ2hpbGQodXBncmFkZUJ1bGtCdXR0b24pO1xyXG5cclxuICAgICAgICB1cGdyYWRlQnVsa0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygndXBncmFkaW5nIGJ1bGsnKTtcclxuICAgICAgICAgICAgdXBncmFkZUJ1bGsoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBPcHRpb25zIG1lbnVcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcHRpb25zQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uc01lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3B0aW9uc01lbnUnKTtcclxuICAgICAgICBvcHRpb25zTWVudS5zdHlsZS5kaXNwbGF5ID0gb3B0aW9uc01lbnUuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXVzaWNWb2x1bWUnKS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgc2V0TXVzaWNWb2x1bWUodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgY3VycmVudEF1ZGlvLnZvbHVtZSA9IGdldE11c2ljVm9sdW1lKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2Z4Vm9sdW1lJykuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHNldFNmeFZvbHVtZSh0aGlzLnZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuXHJcblxyXG5cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcclxuXHJcbiAgICAvLyBTYW1wbGUgdXNhZ2U6XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9vbHRpcCcpLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgICAgIC8vIEV4dHJhY3QgdGhlIGRhdGEgZnJvbSB5b3VyIGJ1aWxkaW5nIG9yIGFueSBvdGhlciBkYXRhIC0gc291cmNlXHJcbiAgICAgICAgLy8gY29uc3QgY29udGVudCA9IFwiWW91ciB0b29sdGlwIGNvbnRlbnQgaGVyZVwiO1xyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIGN1cnJlbnRIb3ZlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8vIFRPRE86IG1vdmUgdGhpcyBldmVudCBsaXN0ZW5lclxyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdvbmNsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGJ1dHRvbik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkgeyBoaWRlVG9vbHRpcCgpOyBjdXJyZW50SG92ZXJCdXR0b24gPSBudWxsOyB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgam9icyBjb3VudGVyXHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG4gICAgdXBkYXRlQm91bmNlQW5pbWF0aW9uKCk7XHJcblxyXG5cclxuXHJcbn0pO1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBuZXh0Rmlib25hY2NpKG4pIHtcclxuICAgIGxldCBhID0gbiAqICgxICsgTWF0aC5zcXJ0KDUpKSAvIDIuMDtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmV2Rmlib25hY2NpKG4pIHtcclxuICAgIGxldCBhID0gbiAvICgoMSArIE1hdGguc3FydCg1KSkgLyAyLjApO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzZWthaSgpIHtcclxuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpO1xyXG4gICAgY29uc3Qgb3ZlcmxheVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheS10ZXh0Jyk7XHJcbiAgICBjb25zdCBvdmVybGF5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXktYnV0dG9uJyk7XHJcbiAgICBjb25zdCBvdmVybGF5QmFja0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5LWJhY2stYnV0dG9uJyk7IC8vIEdldCB0aGUgXCJHbyBCYWNrXCIgYnV0dG9uXHJcblxyXG4gICAgb3ZlcmxheUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBodXNrc0R1ZSA9IGdldE1hdGVyaWFsKCdjbG9uZXMnKTtcclxuXHJcbiAgICAgICAgLy8gUmVzZXQgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkIHdoZW4gXCJDb250aW51ZVwiIGlzIGNsaWNrZWRcclxuICAgICAgICByZXNldFJlc291cmNlcygpO1xyXG4gICAgICAgIHJlc2V0Q3JhZnRlZFJlc291cmNlcygpO1xyXG4gICAgICAgIHJlc2V0UG9uZGVycygpO1xyXG4gICAgICAgIHJlc2V0UGVya3MoKTtcclxuICAgICAgICByZXNldEJ1aWxkaW5ncygpO1xyXG4gICAgICAgIHJlc2V0QWxsSm9icygpO1xyXG4gICAgICAgIHJlc2V0U3RhZ2VzKCk7XHJcbiAgICAgICAgLy8gU2V0IG1heCBvZiBhbGwgcmVzb3VyY2VzIHRvIDEwMFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmb3IgKGxldCBbciwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhyZXNvdXJjZXMpKSB7XHJcbiAgICAgICAgICAgIHZhbC5tYXggPSAxMDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBHaXZlIGh1c2tzIGFmdGVyd2FyZHNcclxuICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdodXNrcycsIGh1c2tzRHVlKTtcclxuXHJcblxyXG4gICAgICAgIC8vIENsb3NlIHRoZSBvdmVybGF5XHJcbiAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAvLyBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICBjb25zdCBuZXdCdWlsZGluZ3NDb3VudCA9IDU7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdCdWlsZGluZ3NDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbUJ1aWxkaW5nID0gZ2VuZXJhdGVSYW5kb21CdWlsZGluZygpO1xyXG4gICAgICAgICAgICBidWlsZGluZ3NbcmFuZG9tQnVpbGRpbmcubmFtZS5zcGxpdCgnICcpLmpvaW4oJ18nKV0gPSByYW5kb21CdWlsZGluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MoZmFsc2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgb3ZlcmxheUJhY2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgLy8gSnVzdCBjbG9zZSB0aGUgb3ZlcmxheSB3aXRob3V0IGV4ZWN1dGluZyByZXNldCBmdW5jdGlvbnNcclxuICAgICAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDb252ZXJ0IGNsb25lcyB0byBodXNrc1xyXG4gICAgY29uc3Qgb2xkSHVza1ZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2h1c2tzSXNla2FpVmFsdWUnKTtcclxuICAgIGxldCBodXNrVmFsdWU7XHJcbiAgICBpZiAob2xkSHVza1ZhbHVlKSBodXNrVmFsdWUgPSBvbGRIdXNrVmFsdWU7XHJcbiAgICBlbHNlIGh1c2tWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIGh1c2tWYWx1ZS5pZCA9ICdodXNrc0lzZWthaVZhbHVlJztcclxuICAgIGh1c2tWYWx1ZS5pbm5lckhUTUwgPSBgSHVza3M6ICAke2dldE1hdGVyaWFsKCdodXNrcycpfSA8YnI+IFlvdSB3aWxsIGdldCAke2dldE1hdGVyaWFsKCdjbG9uZXMnKX0gSHVza3MgcG9zdC1pc2VrYWkuPGJyPllvdSB3aWxsIHJlY2VpdmUgNSByYW5kb21seSBnZW5lcmF0ZWQgbmV3IGJ1aWxkaW5ncywgdW5pcXVlIHRvIHRoaXMgbmV3IHdvcmxkLmA7XHJcbiAgICBodXNrVmFsdWUuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgIG92ZXJsYXkucHJlcGVuZChodXNrVmFsdWUpO1xyXG4gICAgLy8gT3ZlcmxheVxyXG4gICAgb3ZlcmxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnTWlkbmlnaHRCbHVlJztcclxuICAgIG92ZXJsYXlUZXh0LnRleHRDb250ZW50ID0gJ1lvdSBzdGVwIHRocm91Z2ggdG8gYW5vdGhlciB3b3JsZC4nO1xyXG5cclxuICAgIGZhZGVUb0JsYWNrKCk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIG92ZXJsYXlCYWNrQnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICB9LCA1MDAwKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVQcmVzdGlnZUJ1dHRvbnMoKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpc2VrYWlCdXR0b25zJyk7XHJcbiAgICAgICAgbGV0IGkgPSAxO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHByZXN0aWdlKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gYDxiPiR7cHJlc3RpZ2Vba2V5XS50ZXh0fTwvYj48YnI+TGV2ZWw6ICR7cHJlc3RpZ2Vba2V5XS5sZXZlbH08YnI+Q29zdDogJHtwcmVzdGlnZVtrZXldLmNvc3R9YDtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndG9vbHRpcENvc3QnLCBwcmVzdGlnZVtrZXldLmNvc3QpO1xyXG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwRGVzYycsIHByZXN0aWdlW2tleV0udG9vbHRpcERlc2MpO1xyXG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpOyAvLyBBZGQgYSBjbGFzcyBmb3Igc3R5bGluZyBpZiBuZWVkZWRcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmdyaWRDb2x1bW4gPSAoaSAlIDQgKyAxKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZ3JpZFJvdyA9IE1hdGguZmxvb3IoaSAvIDQgKyAxKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIC8vIE9wdGlvbmFsOiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgaWYgeW91IHdhbnQgdG8gaGFuZGxlIGNsaWNrc1xyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBZb3UgY2FuIGltcGxlbWVudCB3aGF0IGhhcHBlbnMgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWRcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBCdXR0b24gJHtrZXl9IHdhcyBjbGlja2VkYCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2h1c2tzJykgPCBwcmVzdGlnZVtrZXldLmNvc3QpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHByZXN0aWdlW2tleV0ubGV2ZWwrKztcclxuICAgICAgICAgICAgICAgIGluY3JlYXNlTWF0ZXJpYWwoJ2h1c2tzJywgLXByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmNvc3QgPSBuZXh0Rmlib25hY2NpKHByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIHByZXN0aWdlW2tleV0uY29zdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8Yj4ke3ByZXN0aWdlW2tleV0udGV4dH08L2I+PGJyPkxldmVsOiAke3ByZXN0aWdlW2tleV0ubGV2ZWx9PGJyPkNvc3Q6ICR7cHJlc3RpZ2Vba2V5XS5jb3N0fWA7XHJcbiAgICAgICAgICAgICAgICBodXNrVmFsdWUudGV4dENvbnRlbnQgPSAnSHVza3M6ICcgKyBnZXRNYXRlcmlhbCgnaHVza3MnKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIFJpZ2h0LWNsaWNrIHRvIGRlY3JlYXNlIGxldmVsXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAvLyBZb3UgY2FuIGltcGxlbWVudCB3aGF0IGhhcHBlbnMgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWRcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBCdXR0b24gJHtrZXl9IHdhcyByaWdodCBjbGlja2VkYCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJlc3RpZ2Vba2V5XS5sZXZlbCA8PSAwKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmxldmVsLS07XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZVtrZXldLmNvc3QgPSBwcmV2Rmlib25hY2NpKHByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0b29sdGlwQ29zdCcsIHByZXN0aWdlW2tleV0uY29zdCk7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZU1hdGVyaWFsKCdodXNrcycsIHByZXN0aWdlW2tleV0uY29zdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8Yj4ke3ByZXN0aWdlW2tleV0udGV4dH08L2I+PGJyPkxldmVsOiAke3ByZXN0aWdlW2tleV0ubGV2ZWx9PGJyPkNvc3Q6ICR7cHJlc3RpZ2Vba2V5XS5jb3N0fWA7XHJcbiAgICAgICAgICAgICAgICBodXNrVmFsdWUudGV4dENvbnRlbnQgPSAnSHVza3M6ICcgKyBnZXRNYXRlcmlhbCgnaHVza3MnKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSBkYXRhIGZyb20geW91ciBidWlsZGluZyBvciBhbnkgb3RoZXIgZGF0YSAtIHNvdXJjZVxyXG4gICAgICAgICAgICAvLyBjb25zdCBjb250ZW50ID0gXCJZb3VyIHRvb2x0aXAgY29udGVudCBoZXJlXCI7XHJcblxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRIb3ZlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkgeyBoaWRlVG9vbHRpcCgpOyBjdXJyZW50SG92ZXJCdXR0b24gPSBudWxsOyB9KTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdG8gY3JlYXRlIGJ1dHRvbnNcclxuICAgIHNldFRpbWVvdXQoY3JlYXRlUHJlc3RpZ2VCdXR0b25zLCA1MDAwKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4geyBodXNrVmFsdWUuc3R5bGUub3BhY2l0eSA9ICcxJzsgfSwgNTAwMCk7XHJcblxyXG59XHJcblxyXG52YXIgY3VycmVudEhvdmVyQnV0dG9uID0gbnVsbDtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAgIHVwZGF0ZVVJLFxyXG4gICAgc2V0VG90YWxUaW1lLFxyXG4gICAgY2hhbmdlTWVzc2FnZSxcclxuXHJcbiAgICBnZXRNZXNzYWdlLFxyXG4gICAgdG90YWxfdGltZSxcclxuICAgIGN1cnJlbnRIb3ZlckJ1dHRvbixcclxuICAgIGRlbGV0ZUdhbWUsXHJcbiAgICBpc2VrYWlcclxuXHJcbn07XHJcbmZ1bmN0aW9uIGRlbGV0ZUdhbWUoKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2F2ZScpOyBjdXJyZW50bHlEZWxldGluZyA9IHRydWU7IGxvY2F0aW9uLnJlbG9hZCgpO1xyXG59XHJcblxyXG53aW5kb3cuZGVsZXRlR2FtZSA9IGRlbGV0ZUdhbWU7XHJcbndpbmRvdy5pc2VrYWkgPSBpc2VrYWk7IiwiXHJcbmNvbnN0IHsgc2V0U3RhZ2UsIHBhc3NlZFN0YWdlIH0gPSByZXF1aXJlKCcuL3N0YWdlcycpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnV0dG9uVmlzaWJpbGl0eScpO1xyXG5cclxuLyoqXHJcbiAqIE1ha2UgZXZlcnl0aGluZyB3aXRoIHRoZSBjbGFzcyBcInN0YWdlXCIgdmlzaWJsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2VcclxuICovXHJcbmZ1bmN0aW9uIG1ha2VWaXNpYmxlKHN0YWdlKSB7XHJcbiAgICBpZiAoIXBhc3NlZFN0YWdlKHN0YWdlKSkge1xyXG4gICAgICAgIHNldFN0YWdlKHN0YWdlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHN0YWdlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiICsgc3RhZ2UpO1xyXG4gICAgc3RhZ2VFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgfSk7XHJcbiAgICB1cGRhdGVCdXR0b25WaXNpYmlsaXR5KCk7XHJcbn1cclxuZXhwb3J0cy5tYWtlVmlzaWJsZSA9IG1ha2VWaXNpYmxlOyIsImNvbnN0IHsgYnVpbGRpbmdzIH0gPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJyk7XHJcbmNvbnN0IHsgcGVya3MgfSA9IHJlcXVpcmUoJy4vanNvbi9wZXJrcycpO1xyXG5sZXQgbXlQZXJrcyA9IFtdO1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGVya05hbWUgXHJcbiAqIEByZXR1cm5zIGJvb2xlYW5cclxuICovXHJcbmZ1bmN0aW9uIGhhc1BlcmsocGVya05hbWUpIHtcclxuICAgIHJldHVybiBteVBlcmtzLmluY2x1ZGVzKHBlcmtOYW1lKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsUGVya3MoKSB7XHJcbiAgICByZXR1cm4gbXlQZXJrcztcclxufVxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwZXJrTmFtZSBQZXJrIHRvIGFkZFxyXG4gKi9cclxuZnVuY3Rpb24gYWRkUGVyayhwZXJrTmFtZSkge1xyXG4gICAgbXlQZXJrcy5wdXNoKHBlcmtOYW1lKTtcclxuXHJcbiAgICAvLyBEbyBhbGwgdGhlIG9uZS10aW1lIHVwZGF0ZXNcclxuICAgIHN3aXRjaCAocGVya05hbWUpIHtcclxuICAgICAgICBjYXNlICdBcmNoaXRlY3QnOlxyXG4gICAgICAgICAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKCcuL2pzb24vYnVpbGRpbmdzJykuYnVpbGRpbmdzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBiIG9mIE9iamVjdC5rZXlzKGJ1aWxkaW5ncykpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QnKS5yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChiLCBidWlsZGluZ3MsIGhhc1BlcmspO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtOdW1iZXJ9IHRpZXJOdW0gXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRQZXJrRnJvbVRpZXIodGllck51bSkge1xyXG4gICAgZm9yIChsZXQgcGVyayBpbiBwZXJrc1sndGllcicgKyB0aWVyTnVtXSkge1xyXG4gICAgICAgIGlmIChoYXNQZXJrKHBlcmspKSByZXR1cm4gcGVyaztcclxuICAgIH1cclxuXHJcbiAgICAvLyBObyBwZXJrIGZvciB0aGlzIHRpZXJcclxuICAgIHJldHVybiAnJztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHNlbGVjdEFiaWxpdHkoYWJpbGl0eU5hbWUpIHtcclxuICAgIGlmIChoYXNQZXJrKGFiaWxpdHlOYW1lKSkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjb25maXJtU2VsZWN0aW9uID0gd2luZG93LmNvbmZpcm0oXCJEbyB5b3Ugd2FudCB0byBzZWxlY3QgXCIgKyBhYmlsaXR5TmFtZSArIFwiPyBUaGlzIGRlY2lzaW9uIGNhbm5vdCBiZSBlYXNpbHkgY2hhbmdlZC5cIik7XHJcblxyXG4gICAgaWYgKCFjb25maXJtU2VsZWN0aW9uKSByZXR1cm47XHJcbiAgICBhZGRQZXJrKGFiaWxpdHlOYW1lKTtcclxuXHJcbiAgICAvLyBmb3IgKGxldCBpID0gMTsgaSA8PSAxOyArK2kpXHJcbiAgICByZXF1aXJlKCcuL3NlbGVjdENvcnJlY3RQZXJrQnV0dG9uJykuc2VsZWN0Q29ycmVjdFBlcmtCdXR0b24oYWJpbGl0eU5hbWUpO1xyXG5cclxuICAgIC8vIG15UGVya3MucHVzaChhYmlsaXR5TmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0UGVya3MoKSB7XHJcbiAgICBteVBlcmtzID0gW107XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaGFzUGVyayxcclxuICAgIGFkZFBlcmssXHJcbiAgICBzZWxlY3RBYmlsaXR5LFxyXG4gICAgZ2V0UGVya0Zyb21UaWVyLFxyXG4gICAgZ2V0QWxsUGVya3MsXHJcbiAgICByZXNldFBlcmtzXHJcbn07IiwiLy8gREVQRU5EUyBPTjoganNvbi9idXR0b25zLmpzXHJcbmNvbnN0IHsgY2FwaXRhbGl6ZUZpcnN0IH0gPSByZXF1aXJlKCcuL2NhcGl0YWxpemVGaXJzdCcpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoJy4vanNvbi9wb25kZXInKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKCcuL2pzb24vYnV0dG9ucycpO1xyXG5cclxuZnVuY3Rpb24gaXNQb25kZXJlZChpZCkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGlkIGV4aXN0cyBpbiB0aGUgdW5sb2NrcyBtYXBcclxuICAgIC8vIElmIHRoZSBpZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBtYXAsIHJldHVybiBmYWxzZVxyXG5cclxuICAgIHJldHVybiBwb25kZXJzW2lkXSA/IHBvbmRlcnNbaWRdLmlzUG9uZGVyZWQgOiBmYWxzZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhblVubG9jayh1bmxvY2tJZCkge1xyXG4gICAgLy8gR2V0IHRoZSBrZXkgZnJvbSB0aGlzIGlkXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHVubG9jaz8gJywgdW5sb2NrSWQpO1xyXG4gICAgdmFyIHVubG9ja0tleSA9ICcnO1xyXG4gICAgZm9yIChsZXQgdW5sb2NrIGluIHBvbmRlcnMpIHtcclxuICAgICAgICBpZiAocG9uZGVyc1t1bmxvY2tdLmlkID09PSB1bmxvY2tJZCkge1xyXG4gICAgICAgICAgICB1bmxvY2tLZXkgPSB1bmxvY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh1bmxvY2tLZXkgPT09ICcnKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiaW52YWxpZCB1bmxvY2sgaWQ6IFwiLCB1bmxvY2tJZCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggcmVzb3VyY2VzXHJcbiAgICB2YXIgY2FuQnV5ID0gdHJ1ZTtcclxuICAgIGZvciAobGV0IG1hdGVyaWFsIGluIHBvbmRlcnNbdW5sb2NrS2V5XS5jb3N0KSB7XHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsLCByZXNvdXJjZXMpIDwgcG9uZGVyc1t1bmxvY2tLZXldLmNvc3RbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ2Fubm90IHVubG9jayBcIiArIHVubG9ja0lkKTtcclxuICAgICAgICAgICAgY2FuQnV5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuIHdlIHVubG9jayAnLCB1bmxvY2tJZCwgY2FuQnV5KTtcclxuICAgIHJldHVybiBjYW5CdXk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVBvbmRlckJ1dHRvbnMocG9uZGVyT2JqZWN0cykge1xyXG4gICAgLy8gY29uc3QgZ2VuZXJhdGVkQnV0dG9ucyA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgW3BvbmRlcktleSwgcG9uZGVyT2JqXSBvZiBPYmplY3QuZW50cmllcyhwb25kZXJPYmplY3RzKSkge1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25LZXkgPSBgcG9uZGVyJHtjYXBpdGFsaXplRmlyc3QocG9uZGVyS2V5KX1gOyAvLyBlLmcuIHBvbmRlckZpc2hpbmdcclxuXHJcbiAgICAgICAgLy8gbGV0IHRvb2x0aXBDb3N0ID0gT2JqZWN0LmVudHJpZXMocG9uZGVyT2JqLmNvc3QpLm1hcCgoW21hdGVyaWFsLCBhbW91bnRdKSA9PiBgJHthbW91bnQudG9GaXhlZCgwKX0gJHttYXRlcmlhbH1gKS5qb2luKCc8YnI+Jyk7XHJcbiAgICAgICAgbGV0IHRvb2x0aXBDb3N0ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5nZW5lcmF0ZVRvb2x0aXBDb3N0KHBvbmRlck9iai5jb3N0KTtcclxuICAgICAgICBidXR0b25zW2J1dHRvbktleV0gPSB7XHJcbiAgICAgICAgICAgIGNsYXNzOiAndG9vbHRpcCB1bmxvY2snLFxyXG4gICAgICAgICAgICB0ZXh0OiBwb25kZXJPYmoudGV4dCB8fCAnUG9uZGVyIGEgTXlzdGVyeT8nLFxyXG4gICAgICAgICAgICB0b29sdGlwRGVzYzogcG9uZGVyT2JqLnRvb2x0aXBEZXNjIHx8IFwiV2hvIGtub3dzIHdoYXQgeW91J2xsIGRpc2NvdmVyXCIsXHJcbiAgICAgICAgICAgIHRvb2x0aXBDb3N0OiB0b29sdGlwQ29zdCxcclxuICAgICAgICAgICAgdGFiOiAncG9uZGVyJyxcclxuICAgICAgICAgICAgdW5sb2NrOiBwb25kZXJLZXksXHJcbiAgICAgICAgICAgIHJlcXVpcmVtZW50OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi9oZWxwZXInKS5nZXRNYXgoJ3BvbmRlcicpID49IHBvbmRlcnNbcG9uZGVyS2V5XS5jb3N0Wydwb25kZXInXSAvIDI7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoaWRlOiAoKSA9PiBpc1BvbmRlcmVkKHBvbmRlcktleSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25LZXksIGJ1dHRvbnNbYnV0dG9uS2V5XSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybiBnZW5lcmF0ZWRCdXR0b25zO1xyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjYW5VbmxvY2ssXHJcbiAgICBpc1BvbmRlcmVkLFxyXG4gICAgZ2VuZXJhdGVQb25kZXJCdXR0b25zXHJcbn07IiwiXHJcbmNvbnN0IHsgaGFzUHJlc3RpZ2UsIGdldExldmVsT2ZQcmVzdGlnZSB9ID0gcmVxdWlyZShcIi4vanNvbi9wcmVzdGlnZVwiKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKFwiLi9wb25kZXJcIik7XHJcbmNvbnN0IHsgc2V0TWF4IH0gPSByZXF1aXJlKFwiLi9yZXNvdXJjZXNcIik7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTtcclxuY29uc3QgeyB1cGRhdGVCb3VuY2VBbmltYXRpb24gfSA9IHJlcXVpcmUoXCIuL3VwZGF0ZUJvdW5jZUFuaW1hdGlvblwiKTtcclxuXHJcbmZ1bmN0aW9uIHJlY2FsY01heENsb25lcygpIHtcclxuICAgIGxldCBtYXhDbG9uZXMgPSAwO1xyXG4gICAgaWYgKHBhc3NlZFN0YWdlKCdjbG9uZScpKSBtYXhDbG9uZXMgKz0gMTtcclxuXHJcbiAgICBjb25zdCBidWlsZGluZ3MgPSByZXF1aXJlKFwiLi9qc29uL2J1aWxkaW5nc1wiKS5idWlsZGluZ3M7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhwYXNzZWRTdGFnZSgnY2xvbmUnKSwgbWF4Q2xvbmVzKTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgYnVpbGRpbmddIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5ncykpIHtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5LCBidWlsZGluZywgYnVpbGRpbmcuZWZmZWN0cyk7XHJcbiAgICAgICAgaWYgKGJ1aWxkaW5nLmVmZmVjdHMgJiYgYnVpbGRpbmcuZWZmZWN0c1snY2xvbmVzJ10pXHJcbiAgICAgICAgICAgIG1heENsb25lcyArPSBidWlsZGluZy5lZmZlY3RzWydjbG9uZXMnXSAqIGJ1aWxkaW5nLmNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFBvbmRlciBib251c2VzXHJcbiAgICBpZiAoaXNQb25kZXJlZCgnYmlnZ2VyU2hlbHRlcicpKSBtYXhDbG9uZXMgKz0gMSAqIGJ1aWxkaW5nc1snc2hlbHRlciddLmNvdW50O1xyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ2JpZ2dlckh1dCcpKSBtYXhDbG9uZXMgKz0gMSAqIGJ1aWxkaW5nc1snaHV0J10uY291bnQ7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnYmlnZ2VySG91c2UnKSkgbWF4Q2xvbmVzICs9IDIgKiBidWlsZGluZ3NbJ2hvdXNlJ10uY291bnQ7XHJcbiAgICBpZiAoaXNQb25kZXJlZCgnYmlnZ2VyVGVlcGVlJykpIG1heENsb25lcyArPSA0ICogYnVpbGRpbmdzWyd0ZWVwZWUnXS5jb3VudDtcclxuICAgIGlmIChpc1BvbmRlcmVkKCdldmVuQmlnZ2VyU2hlbHRlcicpKSBtYXhDbG9uZXMgKz0gMSAqIGJ1aWxkaW5nc1snc2hlbHRlciddLmNvdW50O1xyXG5cclxuICAgIGlmIChoYXNQcmVzdGlnZSgnbWF4Q2xvbmVzJykpIG1heENsb25lcyArPSAxICogZ2V0TGV2ZWxPZlByZXN0aWdlKCdtYXhDbG9uZXMnKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKG1heENsb25lcyk7XHJcbiAgICAvLyByZXR1cm4gbWF4Q2xvbmVzO1xyXG4gICAgc2V0TWF4KCdjbG9uZXMnLCBtYXhDbG9uZXMpO1xyXG4gICAgdXBkYXRlQm91bmNlQW5pbWF0aW9uKCk7XHJcbn1cclxuXHJcbmV4cG9ydHMucmVjYWxjTWF4Q2xvbmVzID0gcmVjYWxjTWF4Q2xvbmVzOyIsImNvbnN0IHsgaGFzUHJlc3RpZ2UsIGdldExldmVsT2ZQcmVzdGlnZSB9ID0gcmVxdWlyZSgnLi9qc29uL3ByZXN0aWdlJyk7XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkaW5nS2V5IFRoZSBidWlsZGluZyB3ZSByZWNhbGN1bGF0ZSB0aGUgY29zdCBvZlxyXG4gKiBAcGFyYW0ge09iamVjdH0gYnVpbGRpbmdzIEJ1aWxkaW5ncyBvYmplY3RcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gaGFzUGVyayBIYXNQZXJrIGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdChidWlsZGluZ0tleSwgYnVpbGRpbmdzLCBoYXNQZXJrKSB7XHJcbiAgICBsZXQgYnVpbGRpbmcgPSBidWlsZGluZ3NbYnVpbGRpbmdLZXldO1xyXG4gICAgaWYgKGJ1aWxkaW5nICYmIGJ1aWxkaW5nLmNvc3QgJiYgYnVpbGRpbmcucmF0aW8pIHtcclxuICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiBidWlsZGluZy5jb3N0KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1aWxkaW5nLmJhc2Vjb3N0W21hdGVyaWFsXSwgYnVpbGRpbmcucmF0aW8sIGJ1aWxkaW5nLmNvdW50KTtcclxuICAgICAgICAgICAgYnVpbGRpbmcuY29zdFttYXRlcmlhbF0gPSBNYXRoLnJvdW5kKGJ1aWxkaW5nLmJhc2Vjb3N0W21hdGVyaWFsXSAqIE1hdGgucG93KGJ1aWxkaW5nLnJhdGlvLCBidWlsZGluZy5jb3VudCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGhhc1BlcmsoJ0FyY2hpdGVjdCcpKSBidWlsZGluZy5jb3N0W21hdGVyaWFsXSAqPSAwLjc1OyAvLyAyNSUgcmVkdWN0aW9uIGZvciBhcmNoaXRlY3RzXHJcbiAgICAgICAgICAgIGlmIChoYXNQcmVzdGlnZSgnY2hlYXBlckJ1aWxkaW5ncycpKSBidWlsZGluZy5jb3N0W21hdGVyaWFsXSAqPSBNYXRoLnBvdygwLjk1LCBnZXRMZXZlbE9mUHJlc3RpZ2UoJ2NoZWFwZXJCdWlsZGluZ3MnKSk7IC8vIDUlIHJlZHVjdGlvblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdG9vbHRpcCBjb3N0XHJcbiAgICBjb25zdCBteUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYnVpbGRpbmdLZXkpO1xyXG4gICAgdmFyIG5ld1RleHQgPSByZXF1aXJlKCcuL3Jlc291cmNlcycpLmdlbmVyYXRlVG9vbHRpcENvc3QoYnVpbGRpbmcuY29zdCk7XHJcbiAgICBpZiAobXlCdXR0b24pIHtcclxuICAgICAgICBteUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0JywgbmV3VGV4dCk7XHJcbiAgICAgICAgY29uc3QgZWZmZWN0U3RyaW5nID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKS5nZW5lcmF0ZUVmZmVjdFN0cmluZyhidWlsZGluZyk7XHJcbiAgICAgICAgbXlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtZWZmZWN0JywgZWZmZWN0U3RyaW5nKTtcclxuXHJcbiAgICB9XHJcbiAgICBlbHNlIHsgdGhyb3cgXCJCdXR0b24gbm90IGZvdW5kIGZvciBcIiArIGJ1aWxkaW5nS2V5OyB9XHJcblxyXG59XHJcbmV4cG9ydHMucmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QgPSByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdDsiLCJcclxuLy8gREVQRU5EUyBPTjogdG9vbHMuanMsIGpvYnMuanNcclxuY29uc3QgeyByZXNvdXJjZXMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcmVzb3VyY2VzXCIpO1xyXG5jb25zdCB7IGNyYWZ0ZWRSZXNvdXJjZXMgfSA9IHJlcXVpcmUoJy4vanNvbi9jcmFmdGVkUmVzb3VyY2VzJyk7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBwb25kZXJzIH0gPSByZXF1aXJlKFwiLi9qc29uL3BvbmRlclwiKTtcclxuY29uc3QgeyBidXR0b25zIH0gPSByZXF1aXJlKFwiLi9qc29uL2J1dHRvbnNcIik7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcblxyXG5jb25zdCB7IGdldFdvcmtlcnMsIHVwZGF0ZVRvdGFsIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyBoYXNUb29sLCB9ID0gcmVxdWlyZSgnLi90b29scycpO1xyXG5jb25zdCB7IGNhbGNDcmFmdEJvbnVzLCBnZXRNYXggfSA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuY29uc3QgeyBnZXRNYXRlcmlhbCB9ID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpO1xyXG5cclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGdldENyYWZ0ZWRSZXNvdXJjZSB9ID0gcmVxdWlyZSgnLi9nZXRDcmFmdGVkUmVzb3VyY2UnKTtcclxuY29uc3QgeyBjYWxjSW5jcmVhc2UgfSA9IHJlcXVpcmUoXCIuL2NhbGNJbmNyZWFzZVwiKTtcclxuY29uc3QgeyB1cGRhdGVTaWRlYmFyLCBhYmJyZXZpYXRlTnVtYmVyIH0gPSByZXF1aXJlKFwiLi9zaWRlYmFyXCIpO1xyXG5jb25zdCB7IHBhc3NlZFN0YWdlLCBnZXRBbGxTdGFnZXMgfSA9IHJlcXVpcmUoXCIuL3N0YWdlc1wiKTsgLy8gVXNlZCBmb3IgZXZhbCBmdW5jdGlvbnNcclxuY29uc3QgeyB1cGRhdGVEaXNwbGF5VmFsdWUgfSA9IHJlcXVpcmUoXCIuL3NpZGViYXJcIik7XHJcbmNvbnN0IHsgdXBkYXRlU2tpbGxzIH0gPSByZXF1aXJlKFwiLi9za2lsbHNcIik7XHJcbi8vIGNvbnNvbGUubG9nKGNhcGl0YWxpemVGaXJzdCk7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBqb2IgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZSBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG4vLyBAdHMtaWdub3JlXHJcbmZ1bmN0aW9uIGlzUmVzb3VyY2VBZmZlY3RlZEJ5Sm9iKGpvYiwgcmVzb3VyY2UpIHtcclxuICAgIGNvbnN0IHNraWxsID0gc2tpbGxzW2pvYl07XHJcbiAgICBpZiAoIXNraWxsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgaWYgKHNraWxsLmFmZmVjdGVkUmVzb3VyY2VzLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlJ3MgYSB0b29sIHJlcXVpcmVtZW50IGZvciB0aGlzIHJlc291cmNlXHJcbiAgICAgICAgaWYgKHNraWxsLm5lZWRUb29scyAmJiBBcnJheS5pc0FycmF5KHNraWxsLm5lZWRUb29scykpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgdG9vbE9iaiBvZiBza2lsbC5uZWVkVG9vbHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRvb2wgaW4gdG9vbE9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sT2JqW3Rvb2xdLmluY2x1ZGVzKHJlc291cmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaGFzIHRoaXMgdG9vbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm93LCBqdXN0IHJldHVybmluZyB0cnVlIHRvIGluZGljYXRlIHRoZSByZXNvdXJjZSBpcyBhZmZlY3RlZCBhbmQgYSB0b29sIGlzIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgeW91IG1heSB3YW50IHRvIHJlcGxhY2UgdGhpcyB3aXRoIGEgY2hlY2sgdG8gc2VlIGlmIHRoZSBwbGF5ZXIgcG9zc2Vzc2VzIHRoZSByZXF1aXJlZCB0b29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNUb29sKHRvb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBuZWVkZWQgYSB0b29sIGJ1dCBub3QgZm9yIHRoaXNcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIG5vIHRvb2wgcmVxdWlyZW1lbnQgd2FzIGZvdW5kIGZvciB0aGUgcmVzb3VyY2UsIGl0J3Mgc3RpbGwgYWZmZWN0ZWQgYnkgdGhlIGpvYlxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjU2Vjb25kc1JlbWFpbmluZyhyZXNvdXJjZU5hbWUsIG5lZWRlZCkge1xyXG4gICAgaWYgKG5lZWRlZCA8PSByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgcmV0dXJuIDA7XHJcblxyXG4gICAgLy8gSG93IG11Y2ggcGVyIHNlY29uZFxyXG4gICAgY29uc3QgaW5jcmVhc2UgPSBjYWxjSW5jcmVhc2UocmVzb3VyY2VOYW1lLCAxMDAwKTtcclxuICAgIGlmIChpbmNyZWFzZSA9PSAwKSByZXR1cm4gLTE7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncGluZycpO1xyXG4gICAgLy8gRGlmZmVyZW5jZSBvdmVyIHRpbWVcclxuICAgIGNvbnN0IHRpbWVSZW1haW5pbmcgPSBNYXRoLmNlaWwobmVlZGVkIC0gcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0udmFsdWUpIC8gaW5jcmVhc2U7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbGMgbWlsbGknLCByZXNvdXJjZU5hbWUsIG5lZWRlZCwgdGltZVJlbWFpbmluZyk7XHJcbiAgICAvLyBpZiAodGltZVJlbWFpbmluZyA9PSBJbmZpbml0eSB8fCB0aW1lUmVtYWluaW5nID09IC1JbmZpbml0eSkgcmV0dXJuIC0xO1xyXG4gICAgcmV0dXJuIHRpbWVSZW1haW5pbmc7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgcmVzb3VyY2VzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc291cmNlcycpO1xyXG5leHBvcnRzLnJlc291cmNlc0NvbnRhaW5lciA9IHJlc291cmNlc0NvbnRhaW5lcjtcclxuXHJcblxyXG5mdW5jdGlvbiBzZXRNYXgobWF0ZXJpYWwsIG51bSkge1xyXG4gICAgcmVzb3VyY2VzW21hdGVyaWFsXS5tYXggPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNyZWFzZU1heChtYXRlcmlhbCwgbnVtKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImluY3JlYXNlIG1heCBcIiwgbWF0ZXJpYWwsIG51bSk7XHJcbiAgICByZXNvdXJjZXNbbWF0ZXJpYWxdLm1heCArPSBudW07XHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbiAgICB1cGRhdGVUb3RhbCgpO1xyXG5cclxufVxyXG5cclxuLy8gR2VuZXJpYyBpbmNyZWFzZVxyXG5mdW5jdGlvbiBpbmNyZWFzZU1hdGVyaWFsKG1hdGVyaWFsLCBudW0pIHtcclxuICAgIC8vIEVuc3VyZSB3ZSBhY3R1YWxseSBuZWVkIHRvIGRvIGFueXRoaW5nXHJcbiAgICBpZiAobnVtID09IDApIHJldHVybjtcclxuICAgIG1hdGVyaWFsID0gbWF0ZXJpYWwudG9Mb3dlckNhc2UoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbmNyZWFzZSBtYXRlcmlhbCcsIG1hdGVyaWFsLCBudW0pO1xyXG4gICAgLy8gaWYgKE1hdGguYWJzKG51bSkgPiA1KSBjb25zb2xlLmxvZygnY2hhbmdpbmcnLCBtYXRlcmlhbCwgJ2J5JywgbnVtKTtcclxuXHJcbiAgICAvLyBUaGlzIGNoZWNrIGVuc3VyZXMgdGhhdCB0aGUgbWF0ZXJpYWwga2V5IGV4aXN0cyBpbiB0aGUgcmVzb3VyY2VzIG1hcC5cclxuICAgIGlmIChtYXRlcmlhbCBpbiByZXNvdXJjZXMpIHtcclxuXHJcbiAgICAgICAgaWYgKGdldE1hdGVyaWFsKG1hdGVyaWFsKSA8IGdldE1heChtYXRlcmlhbCkgJiYgbnVtID4gMCkgeyAvLyBBZGRpbmcgcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKCdmYXN0ZXJSZXNvdXJjZUdhaW4nKSkgbnVtICo9IDEuMDU7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgICAgICB1cGRhdGVTa2lsbHMobWF0ZXJpYWwsIG51bSk7XHJcbiAgICAgICAgICAgIGlmIChtYXRlcmlhbCA9PT0gJ3Zpb2xlbmNlJykgcmVxdWlyZShcIi4vY29tYmF0XCIpLnJlZnJlc2hWYWx1ZXMoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG51bSA8IDApIHsgLy8gU3VidHJhY3RpbmcgcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgKz0gbnVtO1xyXG4gICAgICAgIH0gZWxzZSB7IC8vIEFscmVhZHkgYXQgbWF4XHJcbiAgICAgICAgICAgIHJlc291cmNlc1ttYXRlcmlhbF0udmFsdWUgPSBnZXRNYXgobWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKCdhdXRvY3JhZnQnKSAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F1dG9DcmFmdENoZWNrYm94XCIpLmNoZWNrZWQgJiYgYXV0b0NyYWZ0VGFibGVbbWF0ZXJpYWxdKSB7XHJcbiAgICAgICAgICAgICAgICBjcmFmdEFsbFJlc291cmNlcyhhdXRvQ3JhZnRUYWJsZVttYXRlcmlhbF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpO1xyXG4gICAgICAgIC8vIHJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMoKTtcclxuXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChtYXRlcmlhbCBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2NyYWZ0aW5nIGEgbWF0ZXJpYWwnLCBtYXRlcmlhbCwgbnVtKTtcclxuICAgICAgICBjcmFmdGVkUmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAgICAgdXBkYXRlRGlzcGxheVZhbHVlKG1hdGVyaWFsKTtcclxuICAgICAgICB1cGRhdGVTa2lsbHMobWF0ZXJpYWwsIG51bSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBDcmVhdGluZyBhIG5ldyBtYXRlcmlhbFxyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbbWF0ZXJpYWxdKSByZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuICAgICAgICBpZiAoY3JhZnRlZFJlc291cmNlc1ttYXRlcmlhbF0pIGNyYWZ0ZWRSZXNvdXJjZXNbbWF0ZXJpYWxdLnZhbHVlICs9IG51bTtcclxuXHJcbiAgICAgICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNyYWZ0ZWQgbWF0ZXJpYWxzIGhhdmUgbm8gbWF4LCBhIGxhIEtpdHRlbnMgR2FtZVxyXG5cclxuXHJcblxyXG4gICAgLy8gdXBkYXRlU2lkZWJhcigpO1xyXG5cclxuXHJcblxyXG4gICAgLy8gcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZSArPSBudW07XHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiICsgbWF0ZXJpYWwgKyBcIlZhbHVlXCIpLnRleHRDb250ZW50ID0gcmVzb3VyY2VzW21hdGVyaWFsXS52YWx1ZTtcclxuXHJcbn1cclxuLy8gR2xvYmFsbHkgZGlzcGxheSBmb3IgZGV2IHB1cnBvc2VzXHJcbi8vIEB0cy1pZ25vcmVcclxud2luZG93LmluY3JlYXNlTWF0ZXJpYWwgPSBpbmNyZWFzZU1hdGVyaWFsO1xyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5pbmNyZWFzZU1heCA9IGluY3JlYXNlTWF4O1xyXG5cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcygpIHtcclxuICAgIC8vIGNvbnN0IHJlc291cmNlcyA9IFtcImNsb25lc1wiLCBcInN0aWNrc1wiLCBcInZpbmVzXCIsIFwicm9ja3NcIiwgXCJmaXNoXCIsIFwid29vZFwiLCBcInBvbmRlclwiXTtcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW5jcmVhc2Ugb2YgXCIgKyByZXNvdXJjZSk7XHJcbiAgICAgICAgY29uc3QgcmF0ZSA9IGNhbGNJbmNyZWFzZShyZXNvdXJjZSwgMTAwMCk7XHJcbiAgICAgICAgdmFyIHJhdGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7cmVzb3VyY2V9SW5jcmVhc2VSYXRlYCk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChyYXRlRWxlbWVudCkgcmF0ZUVsZW1lbnQudGV4dENvbnRlbnQgPSByYXRlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgXHJcbiAqIEByZXR1cm5zIEJ1dHRvblxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uKGNvbmZpZykge1xyXG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBidXR0b24uY2xhc3NOYW1lID0gY29uZmlnLmNsYXNzICsgJyB0b29sdGlwJztcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgY29uZmlnLmlkKTtcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVtZW50JywgY29uZmlnLnJlcXVpcmVkU3RhZ2UpO1xyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lID0gT2JqZWN0LmtleXMoY3JhZnRlZFJlc291cmNlcykuZmluZChrZXkgPT4gY3JhZnRlZFJlc291cmNlc1trZXldID09PSBjb25maWcpO1xyXG4gICAgLy8gY29uc3QgY2xlYW5Db3VudCA9IHBhcnNlRmxvYXQoY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZU5hbWVdLnZhbHVlKS50b0ZpeGVkKDApO1xyXG4gICAgLy8gYnV0dG9uLmlubmVySFRNTCA9IGAke2NvbmZpZy50ZXh0IHx8IGNhcGl0YWxpemVGaXJzdChyZXNvdXJjZU5hbWUpfTogPHNwYW4gaWQ9XCIke3Jlc291cmNlTmFtZSArIFwiVmFsdWVcIn1cIj4ke2NsZWFuQ291bnR9PC9zcGFuPmA7XHJcbiAgICBidXR0b24uaW5uZXJIVE1MID0gYCR7Y29uZmlnLnRleHQgfHwgY2FwaXRhbGl6ZUZpcnN0KHJlc291cmNlTmFtZSl9YDtcclxuICAgIC8vIGJ1dHRvbi50b29sdGlwRGVzYyA9IGNvbmZpZy50b29sdGlwRGVzYzsgXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBidXR0b24udGFiID0gJ2V4cGVyaW1lbnQnO1xyXG5cclxuICAgIHJldHVybiBidXR0b247XHJcbn1cclxuXHJcblxyXG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3JhZnRlZFJlc291cmNlQnV0dG9ucycpO1xyXG5mdW5jdGlvbiBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b25zKCkge1xyXG5cclxuICAgIC8vIEZvciBlYWNoIHJlc291cmNlLCBjcmVhdGUgYSBidXR0b24gdXNpbmcgdGhlIGNhcHR1cmVkIGNvdW50c1xyXG4gICAgZm9yIChsZXQgbmFtZSBpbiBjcmFmdGVkUmVzb3VyY2VzKSB7XHJcblxyXG4gICAgICAgIC8vIGNvbmZpZy5jb3VudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0udmFsdWU7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uKGNyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0pO1xyXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgY3JhZnRlZFJlc291cmNlc1tuYW1lXS50b29sdGlwRGVzYyB8fCBcIlwiKTtcclxuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlc1tuYW1lXS5jb3N0KSB8fCBcIlwiKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygndG9vbHRpcCBjb3N0JywgYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnKSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICAgICAgY29uc3QgcmVxUmVzdWx0ID0gcGFzc2VkU3RhZ2UoYnV0dG9uLmdldEF0dHJpYnV0ZSgncmVxdWlyZW1lbnQnKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVxUmVzdWx0LCBidXR0b24uZ2V0QXR0cmlidXRlKCdyZXF1aXJlbWVudCcpLCBPYmplY3QudmFsdWVzKGdldEFsbFN0YWdlcygpKSk7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2hhdCB0aGUgYnVnIGlzIGhlcmVcclxuICAgICAgICBpZiAocmVxUmVzdWx0KSBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgZWxzZSBidXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcblxyXG5cclxuICAgICAgICBidXR0b25zW2NyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uaWRdID0gY3JhZnRlZFJlc291cmNlc1tuYW1lXTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5mdW5jdGlvbiBhcHBlbmRDcmFmdGVkUmVzb3VyY2VCdXR0b24obmFtZSkge1xyXG5cclxuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUNyYWZ0ZWRSZXNvdXJjZUJ1dHRvbihjcmFmdGVkUmVzb3VyY2VzW25hbWVdKTtcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZXNjJywgY3JhZnRlZFJlc291cmNlc1tuYW1lXS50b29sdGlwRGVzYyk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAtY29zdCcsIGdlbmVyYXRlVG9vbHRpcENvc3QoY3JhZnRlZFJlc291cmNlc1tuYW1lXS5jb3N0KSk7XHJcblxyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICBidXR0b25zW2NyYWZ0ZWRSZXNvdXJjZXNbbmFtZV0uaWRdID0gY3JhZnRlZFJlc291cmNlc1tuYW1lXTtcclxuXHJcbn1cclxuXHJcbi8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIHJlcGxhY2UgPHA+IGVsZW1lbnRzIHdpdGggdGhlIGJ1dHRvbnNcclxuLy8gYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9uKCdzdGlja3MnKTtcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVG9vbHRpcENvc3QocmVxdWlyZW1lbnRzKSB7XHJcbiAgICBpZiAocmVxdWlyZW1lbnRzID09PSBudWxsKSByZXR1cm4gJyc7XHJcbiAgICB2YXIgc3RyID0gJyc7XHJcbiAgICBmb3IgKGxldCBtYXRlcmlhbCBpbiByZXF1aXJlbWVudHMpIHtcclxuXHJcbiAgICAgICAgY29uc3QgaGFzRW5vdWdoID0gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPj0gcmVxdWlyZW1lbnRzW21hdGVyaWFsXTsvKiBZb3VyIGxvZ2ljIHRvIGNoZWNrIGlmIHRoZXJlJ3MgZW5vdWdoIG9mIHRoZSBtYXRlcmlhbCAqLztcclxuICAgICAgICBjb25zdCBjb2xvckNsYXNzID0gaGFzRW5vdWdoID8gJ2Vub3VnaCcgOiAnbm90LWVub3VnaCc7XHJcbiAgICAgICAgc3RyICs9IGA8c3BhbiBjbGFzcz1cInRvb2x0aXAtJHttYXRlcmlhbH0gJHtjb2xvckNsYXNzfVwiPiR7YWJicmV2aWF0ZU51bWJlcihyZXF1aXJlbWVudHNbbWF0ZXJpYWxdKX0gJHttYXRlcmlhbH08L3NwYW4+PGJyPmA7XHJcblxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG5cclxuXHJcblxyXG5jb25zdCBlbW9qaURpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1vamlEaXNwbGF5Jyk7XHJcbmZ1bmN0aW9uIHVwZGF0ZUVtb2ppRGlzcGxheSgpIHtcclxuICAgIGxldCBlbW9qaVN0ciA9IFwiXCI7XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBqb2JDb3VudHMgbWFwIHRvIGdldCBlYWNoIGpvYiBhbmQgaXRzIGNvdW50XHJcbiAgICBmb3IgKGxldCByZXNvdXJjZSBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBsZXQgcmVzb3VyY2UgPSByZXNvdXJjZXNbZ2V0QWZmZWN0ZWRSZXNvdXJjZXMoam9iKVswXV07XHJcbiAgICAgICAgbGV0IGNvdW50ID0gZ2V0V29ya2VycyhyZXNvdXJjZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2UsIGNvdW50KTtcclxuICAgICAgICBpZiAoY291bnQgPT09IHVuZGVmaW5lZCB8fCBjb3VudCA9PSAwKSBjb250aW51ZTtcclxuICAgICAgICBsZXQgZW1vamkgPSByZXNvdXJjZXNbcmVzb3VyY2VdLmVtb2ppIHx8ICfwk4CfJzsgIC8vIGdldCB0aGUgZW1vamkgY29ycmVzcG9uZGluZyB0byB0aGUgam9iIGZyb20gdGhlIHJlc291cmNlcyBtYXBcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhqb2IsIGVtb2ppKTtcclxuICAgICAgICBpZiAoZW1vamkpIHtcclxuICAgICAgICAgICAgZW1vamlTdHIgKz0gZW1vamkucmVwZWF0KGNvdW50KTsgIC8vIHJlcGVhdCB0aGUgZW1vamkgYmFzZWQgb24gdGhlIGNvdW50XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGVtb2ppRGlzcGxheS50ZXh0Q29udGVudCA9IGVtb2ppU3RyOyAgLy8gdXBkYXRlIHRoZSBlbW9qaURpc3BsYXkgZGl2IHdpdGggdGhlIGdlbmVyYXRlZCBlbW9qaSBzdHJpbmdcclxuXHJcbiAgICBmdW5jdGlvbiBhZGp1c3RGb250U2l6ZSgpIHtcclxuICAgICAgICBsZXQgZm9udFNpemUgPSA0ODsgIC8vIFN0YXJ0aW5nIGZvbnQgc2l6ZVxyXG5cclxuICAgICAgICBlbW9qaURpc3BsYXkuc3R5bGUuZm9udFNpemUgPSBgJHtmb250U2l6ZX1weGA7XHJcblxyXG4gICAgICAgIHdoaWxlICgoZW1vamlEaXNwbGF5Lm9mZnNldFdpZHRoID4gNjAwKSAmJiBmb250U2l6ZSA+IDMwKSB7XHJcbiAgICAgICAgICAgIC8vIDEwIGlzIGEgbWluaW11bSBmb250LXNpemUgdGhyZXNob2xkIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcFxyXG4gICAgICAgICAgICBmb250U2l6ZSAtPSAxOyAvLyBkZWNyZWFzZSB0aGUgZm9udCBzaXplXHJcbiAgICAgICAgICAgIGVtb2ppRGlzcGxheS5zdHlsZS5mb250U2l6ZSA9IGAke2ZvbnRTaXplfXB4YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIHdoZW5ldmVyIHRoZSBjb250ZW50IG9mICNlbW9qaURpc3BsYXkgY2hhbmdlc1xyXG4gICAgYWRqdXN0Rm9udFNpemUoKTtcclxuXHJcbn1cclxuXHJcbi8vIENhbGwgdXBkYXRlRW1vamlEaXNwbGF5IGV2ZXJ5IHRpbWUgam9iQ291bnRzIGlzIHVwZGF0ZWQ6XHJcbi8vIEZvciBleGFtcGxlOlxyXG4vLyBqb2JDb3VudHMuc2V0KCdmaXNoaW5nJywgNCk7XHJcbnVwZGF0ZUVtb2ppRGlzcGxheSgpO1xyXG5cclxuXHJcbmNvbnN0IGF1dG9DcmFmdFRhYmxlID0ge1xyXG4gICAgJ3N0aWNrcyc6ICdoYW5kbGUnLFxyXG4gICAgJ3dvb2QnOiAncGFwZXInLFxyXG4gICAgJ3JvY2tzJzogJ3NoYXJwcm9ja3MnLFxyXG4gICAgJ3ZpbmVzJzogJ3JvcGUnLFxyXG4gICAgJ3NhbmQnOiAnZ2xhc3MnLFxyXG4gICAgJ29yZSc6ICdnb2xkJyxcclxuICAgICdjbGF5JzogJ2JyaWNrcydcclxufTtcclxuXHJcbmZ1bmN0aW9uIGNyYWZ0QWxsUmVzb3VyY2VzKHJlc291cmNlS2V5KSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvc3QgPSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jb3N0O1xyXG4gICAgICAgIGxldCBzdWZmaWNpZW50UmVzb3VyY2VzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgbWF0IGluIGNvc3QpIHtcclxuICAgICAgICAgICAgLy8gaWYgKGdldE1hdGVyaWFsKG1hdCwgcmVzb3VyY2VzKSA8IGNvc3RbbWF0XSkge1xyXG4gICAgICAgICAgICBzdWZmaWNpZW50UmVzb3VyY2VzLnB1c2goZ2V0TWF0ZXJpYWwobWF0LCByZXNvdXJjZXMpIC8gY29zdFttYXRdKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWluID0gTWF0aC5mbG9vcihNYXRoLm1pbiguLi5zdWZmaWNpZW50UmVzb3VyY2VzKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzb3VyY2VLZXksIG1pbik7XHJcbiAgICAgICAgY3JhZnRSZXNvdXJjZVF1YW50aXR5KHJlc291cmNlS2V5LCBtaW4pO1xyXG5cclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gY3JhZnRhbGwgZm9yOiAnLCByZXNvdXJjZUtleSwgZXJyb3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmFmdFJlc291cmNlUXVhbnRpdHkocmVzb3VyY2VLZXksIHF1YW50aXR5KSB7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VLZXkpKSB0aHJvdyBcIkludmFsaWQgY3JhZnQgZm9yIG1pc3NpbmcgcmVzb3VyY2U6IFwiICsgcmVzb3VyY2VLZXk7XHJcblxyXG4gICAgaWYgKCFjYW5DcmFmdChyZXNvdXJjZUtleSkpIHJldHVybjsgLy8gVGFrZXMgY2FyZSBvZiBxdWFudGl0eSA8IDFcclxuICAgIGxldCBjb3N0ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY29zdDtcclxuICAgIC8vIGxldCBjcmFmdEJvbnVzID0gY2FsY0NyYWZ0Qm9udXMocmVzb3VyY2VLZXkpO1xyXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBxdWFudGl0eTsgKytpKSB7XHJcbiAgICAvLyAgICAgY3JhZnRPbmUocmVzb3VyY2VLZXksIGNvc3QsIGNyYWZ0Qm9udXMpO1xyXG4gICAgLy8gfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLmZsb29yKHF1YW50aXR5KTsgKytpKSB7IC8vIE9ubHkgY3JhZnQgd2hvbGUgbnVtYmVyLCBzbyAxLjQgb25seSBydW5zIG9uY2VcclxuICAgICAgICBjb25zb2xlLmxvZygnY3JhZnRpbmcnLCBxdWFudGl0eSwgcmVzb3VyY2VLZXksIGNvc3QpO1xyXG4gICAgICAgIGNyYWZ0T25lKHJlc291cmNlS2V5LCBjb3N0LCBjYWxjQ3JhZnRCb251cyhyZXNvdXJjZUtleSkpO1xyXG4gICAgfVxyXG4gICAgLy8gZm9yIChsZXQgbWF0IGluIGNvc3QpIHtcclxuICAgIC8vICAgICBpbmNyZWFzZU1hdGVyaWFsKG1hdCwgLWNvc3RbbWF0XSAqIHF1YW50aXR5KTtcclxuICAgIC8vIH1cclxuICAgIC8vIGluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2VLZXksIHF1YW50aXR5KTtcclxuXHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlKSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSA9IHRydWU7XHJcblxyXG4gICAgdXBkYXRlRGlzcGxheVZhbHVlKHJlc291cmNlS2V5KTtcclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cykge1xyXG4gICAgZm9yIChjb25zdCBbbWF0LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGNvc3QpKSB7XHJcbiAgICAgICAgaW5jcmVhc2VNYXRlcmlhbChtYXQsIC12YWwpO1xyXG4gICAgfVxyXG4gICAgaW5jcmVhc2VNYXRlcmlhbChyZXNvdXJjZUtleSwgY3JhZnRCb251cyk7XHJcblxyXG59XHJcbi8vIENyYWZ0IGZ1bmN0aW9uXHJcbmZ1bmN0aW9uIGNyYWZ0UmVzb3VyY2UocmVzb3VyY2VLZXkpIHtcclxuICAgIGlmICghY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZUtleSkpIHRocm93IFwiSW52YWxpZCBjcmFmdCBmb3IgbWlzc2luZyByZXNvdXJjZTogXCIgKyByZXNvdXJjZUtleTtcclxuXHJcbiAgICBpZiAoIWNhbkNyYWZ0KHJlc291cmNlS2V5KSkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjb3N0ID0gY3JhZnRlZFJlc291cmNlc1tyZXNvdXJjZUtleV0uY29zdDtcclxuICAgIGxldCBjcmFmdEJvbnVzID0gY2FsY0NyYWZ0Qm9udXMocmVzb3VyY2VLZXkpO1xyXG5cclxuXHJcbiAgICBjcmFmdE9uZShyZXNvdXJjZUtleSwgY29zdCwgY3JhZnRCb251cyk7XHJcblxyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHJlc291cmNlS2V5ICsgXCJWYWx1ZVwiKS50ZXh0Q29udGVudCA9IGNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICBpZiAoIWNyYWZ0ZWRSZXNvdXJjZXNbcmVzb3VyY2VLZXldLmNyYWZ0ZWRPbmNlKSBjcmFmdGVkUmVzb3VyY2VzW3Jlc291cmNlS2V5XS5jcmFmdGVkT25jZSA9IHRydWU7XHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUocmVzb3VyY2VLZXkpO1xyXG59XHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgaW5jcmVhc2VNYXRlcmlhbCxcclxuICAgIHNldE1heCxcclxuICAgIGluY3JlYXNlTWF4LFxyXG4gICAgY3JhZnRBbGxSZXNvdXJjZXMsXHJcbiAgICBjcmFmdFJlc291cmNlLFxyXG4gICAgdXBkYXRlRW1vamlEaXNwbGF5LFxyXG4gICAgZ2VuZXJhdGVUb29sdGlwQ29zdCxcclxuICAgIGNhbGNTZWNvbmRzUmVtYWluaW5nLFxyXG4gICAgYXBwZW5kQ3JhZnRlZFJlc291cmNlQnV0dG9ucyxcclxuICAgIGNhbGNJbmNyZWFzZSxcclxuICAgIHVwZGF0ZVJlc291cmNlSW5jcmVhc2VSYXRlcyxcclxuICAgIGNyYWZ0UmVzb3VyY2VRdWFudGl0eVxyXG5cclxufTsiLCIvLyBERVBFTkRTIE9OOiByZXNvdXJjZXMuanNcclxuY29uc3QgeyBjYWxjSW5jcmVhc2UsIHVwZGF0ZUVtb2ppRGlzcGxheSB9ID0gcmVxdWlyZSgnLi9yZXNvdXJjZXMnKTtcclxuY29uc3QgeyBhZGRUb29sLCBnZXRBbGxUb29scyB9ID0gcmVxdWlyZSgnLi90b29scycpO1xyXG5jb25zdCB7IGFsbFZpc2libGVCdXR0b25zLCBzZXRWaXNpYmxlQnV0dG9uLCBnZXRNYXggfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XHJcbmNvbnN0IHsgbWFrZVZpc2libGUgfSA9IHJlcXVpcmUoJy4vbWFrZVZpc2libGUnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2UgfSA9IHJlcXVpcmUoJy4vZ2V0Q3JhZnRlZFJlc291cmNlJyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcbmNvbnN0IHsgZ2V0QWxsUGVya3MsIGFkZFBlcmssIGhhc1BlcmssIHNlbGVjdEFiaWxpdHkgfSA9IHJlcXVpcmUoJy4vcGVya3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5jb25zdCB7IGpvYkNvdW50cywgc2V0Q29ubmVjdGlvbnMsIGdldENvbm5lY3Rpb25zLCBkaXN0cmlidXRlV29ya2VycywgdXBkYXRlRGlzcGxheSB9ID0gcmVxdWlyZSgnLi9qb2JzJyk7XHJcbmNvbnN0IHsgdG90YWxfdGltZSB9ID0gcmVxdWlyZSgnLi9tYWluJyk7XHJcbmNvbnN0IHsgc2V0QXRlRmlzaCwgZ2V0QXRlRmlzaCB9ID0gcmVxdWlyZSgnLi9hdGVGaXNoJyk7XHJcblxyXG5cclxuY29uc3QgeyBjcmFmdGVkUmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IGJ1aWxkaW5ncyB9ID0gcmVxdWlyZShcIi4vanNvbi9idWlsZGluZ3NcIik7XHJcbmNvbnN0IHsgcG9uZGVycyB9ID0gcmVxdWlyZShcIi4vanNvbi9wb25kZXJcIik7XHJcbmNvbnN0IHsgcmVzb3VyY2VzIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKFwiLi9qc29uL3NraWxsc1wiKTtcclxuY29uc3QgeyBnZXRBbGxTdGFnZXMgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbmNvbnN0IHsgYWN0aXZlRmFjdG9yaWVzUHJvZHVjaW5nLCBsb2FkRmFjdG9yeSB9ID0gcmVxdWlyZSgnLi9mYWN0b3J5Jyk7XHJcbmNvbnN0IHsgcmVjYWxjTWF4Q2xvbmVzIH0gPSByZXF1aXJlKCcuL3JlY2FsY01heENsb25lcycpO1xyXG5jb25zdCB7IHVwZGF0ZVNpZGViYXIgfSA9IHJlcXVpcmUoJy4vc2lkZWJhcicpO1xyXG5jb25zdCB7IHByZXN0aWdlIH0gPSByZXF1aXJlKCcuL2pzb24vcHJlc3RpZ2UnKTtcclxuY29uc3QgeyByZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCB9ID0gcmVxdWlyZSgnLi9yZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQgfSA9IHJlcXVpcmUoJy4vdXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCcpO1xyXG5jb25zdCB7IHVwZGF0ZUJ1aWxkaW5nTGlzdCB9ID0gcmVxdWlyZSgnLi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBwb3B1bGF0ZVNraWxsc1RhYmxlIH0gPSByZXF1aXJlKCcuL3NraWxscycpO1xyXG5cclxuLy8gaW1wb3J0IGpvYkNvdW50cztcclxuLyogU0FWSU5HICovXHJcbi8vIHZhciBzYXZlID0ge1xyXG4vLyAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXHJcbi8vICAgICBjcmFmdGVkUmVzb3VyY2VzOiBjcmFmdGVkUmVzb3VyY2VzLFxyXG4vLyAgICAgc2tpbGxzOiBza2lsbHMsXHJcbi8vICAgICBwbGF5ZXJUb29sczogcGxheWVyVG9vbHNcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gc2F2ZUdhbWUoKSB7XHJcbiAgICBsZXQgc2F2ZSA9IHtcclxuICAgICAgICBza2lsbHM6IHt9LCAvLyBUaGlzIHdpbGwgaG9sZCB0aGUgZXhwZXJpZW5jZSBhbmQgbGV2ZWwgZm9yIGVhY2ggc2tpbGxcclxuICAgICAgICBjcmFmdGVkUmVzb3VyY2VzOiB7fSwgLy8gVGhpcyB3aWxsIGhvbGQgdGhlIHZhbHVlIGZvciBlYWNoIGNyYWZ0ZWQgaXRlbVxyXG4gICAgICAgIHJlc291cmNlczoge30sXHJcbiAgICAgICAgdG9vbHM6IFtdLFxyXG4gICAgICAgIHN0YWdlczogW10sXHJcbiAgICAgICAgdW5sb2Nrczoge30sXHJcbiAgICAgICAgam9iczoge30sXHJcbiAgICAgICAgYnVpbGRpbmdzOiB7fSxcclxuICAgICAgICB0aW1lOiB7fSxcclxuICAgICAgICBhbGxWaXNpYmxlQnV0dG9uczogW10sXHJcbiAgICAgICAgbWVzc2FnZTogW10sXHJcbiAgICAgICAgY29ubmVjdGlvbnM6IG5ldyBNYXAoKSxcclxuICAgICAgICBwZXJrczogW10sXHJcbiAgICAgICAgZmFjdG9yaWVzOiB7fSxcclxuICAgICAgICBwcmVzdGlnZToge30sXHJcbiAgICAgICAgbmV3QnVpbGRpbmdzOiB7fVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IGV4cCBhbmQgbGV2ZWwgZnJvbSBza2lsbHMgYW5kIHNhdmUgdG8gc2F2ZS5za2lsbHNcclxuICAgIGZvciAobGV0IHNraWxsIGluIHNraWxscykge1xyXG4gICAgICAgIHNhdmUuc2tpbGxzW3NraWxsXSA9IHtcclxuICAgICAgICAgICAgZXhwOiBza2lsbHNbc2tpbGxdLmV4cCxcclxuICAgICAgICAgICAgbGV2ZWw6IHNraWxsc1tza2lsbF0ubGV2ZWxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV4dHJhY3QgdmFsdWUgZnJvbSBjcmFmdGVkUmVzb3VyY2VzIGFuZCBzYXZlIHRvIHNhdmUuY3JhZnRlZEl0ZW1zXHJcbiAgICBmb3IgKGxldCBpdGVtIGluIGNyYWZ0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICBpZiAoIXNhdmUuY3JhZnRlZFJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShpdGVtKSkge1xyXG4gICAgICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0gPSB7IHZhbHVlOiAwLCBjcmFmdGVkT25jZTogZmFsc2UgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNhdmUuY3JhZnRlZFJlc291cmNlc1tpdGVtXS52YWx1ZSA9IGdldENyYWZ0ZWRSZXNvdXJjZShpdGVtKTtcclxuICAgICAgICBzYXZlLmNyYWZ0ZWRSZXNvdXJjZXNbaXRlbV0uY3JhZnRlZE9uY2UgPSBjcmFmdGVkUmVzb3VyY2VzW2l0ZW1dLmNyYWZ0ZWRPbmNlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpdGVtIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBpdGVtIGV4aXN0cyBpbiB0aGUgc2F2ZS5yZXNvdXJjZXMgb2JqZWN0LiBJZiBub3QsIGluaXRpYWxpemUgaXQuXHJcbiAgICAgICAgaWYgKCFzYXZlLnJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShpdGVtKSkge1xyXG4gICAgICAgICAgICBzYXZlLnJlc291cmNlc1tpdGVtXSA9IHsgdmFsdWU6IDAsIG1heDogMCB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2F2ZS5yZXNvdXJjZXNbaXRlbV0udmFsdWUgPSBnZXRNYXRlcmlhbChpdGVtLCByZXNvdXJjZXMpO1xyXG4gICAgICAgIHNhdmUucmVzb3VyY2VzW2l0ZW1dLm1heCA9IHJlc291cmNlc1tpdGVtXS5tYXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZS50b29scyA9IGdldEFsbFRvb2xzKCk7XHJcbiAgICBzYXZlLnN0YWdlcyA9IGdldEFsbFN0YWdlcygpO1xyXG4gICAgc2F2ZS5qb2JzID0gam9iQ291bnRzO1xyXG4gICAgc2F2ZS5wZXJrcyA9IGdldEFsbFBlcmtzKCk7XHJcblxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgc2F2ZS5jb25uZWN0aW9ucyA9IEFycmF5LmZyb20oZ2V0Q29ubmVjdGlvbnMoKS5lbnRyaWVzKCkpO1xyXG5cclxuICAgIGZvciAobGV0IHUgaW4gcG9uZGVycykge1xyXG4gICAgICAgIHNhdmUudW5sb2Nrc1t1XSA9IGlzUG9uZGVyZWQodSk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgYiBpbiBidWlsZGluZ3MpIHtcclxuICAgICAgICBzYXZlLmJ1aWxkaW5nc1tiXSA9IGJ1aWxkaW5nc1tiXS5jb3VudDtcclxuICAgICAgICBpZiAoYnVpbGRpbmdzW2JdLmhhc093blByb3BlcnR5KCduYW1lJykpIHtcclxuICAgICAgICAgICAgLy8gc2F2ZSBuZXcgYnVpbGRpbmcgZGF0YSBcclxuICAgICAgICAgICAgc2F2ZS5uZXdCdWlsZGluZ3NbYl0gPSBidWlsZGluZ3NbYl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKGFsbFZpc2libGVCdXR0b25zLnZhbHVlcygpKTtcclxuICAgIGZvciAobGV0IGEgaW4gYWxsVmlzaWJsZUJ1dHRvbnMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhhKTtcclxuICAgICAgICBzYXZlLmFsbFZpc2libGVCdXR0b25zLnB1c2goYSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2F2ZS5hbGxWaXNpYmxlQnV0dG9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFRleHRGcm9tSFRNTChodG1sU3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWxTdHJpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gZGl2LnRleHRDb250ZW50O1xyXG4gICAgICAgIGNvbnN0IHNwYW5UZXh0ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKS50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt0ZXh0Q29udGVudCwgc3BhblRleHRdO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhhY3RpdmVGYWN0b3JpZXNQcm9kdWNpbmcpKSB7XHJcbiAgICAgICAgc2F2ZS5mYWN0b3JpZXNba2V5XSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBodG1sU3RyaW5nID0gcmVxdWlyZSgnLi9tYWluJykuZ2V0TWVzc2FnZSgpLmlubmVySFRNTDtcclxuXHJcbiAgICBzYXZlLm1lc3NhZ2UgPSBleHRyYWN0VGV4dEZyb21IVE1MKGh0bWxTdHJpbmcpOyAvLyBbbWVzc2FnZSwgc3Bhbl1cclxuXHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHByZXN0aWdlKSkge1xyXG4gICAgICAgIHNhdmUucHJlc3RpZ2Vba2V5XSA9IHsgY29zdDogdmFsLmNvc3QsIGxldmVsOiB2YWwubGV2ZWwgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhjb21iaW5lZFRleHQpOyAvLyBcIllvdSBmaW5kIHlvdXJzZWxmIGFsb25lIGluIGEgZm9yZXN0XCJcclxuICAgIC8vIGNvbnNvbGUubG9nKHNwYW5UZXh0KTsgLy8gXCJhbG9uZVwiXHJcblxyXG5cclxuICAgIHNhdmUudGltZVsndG90YWxfdGltZSddID0gdG90YWxfdGltZTtcclxuICAgIHNhdmUudGltZVsndGltZV9vZl9zYXZlJ10gPSBEYXRlLm5vdygpO1xyXG4gICAgLy8gWW91IGNhbiBub3cgdXNlIHRoZSBzYXZlIG9iamVjdCB0byBzdG9yZSB0aGUgZGF0YSBzb21ld2hlcmUgb3IgZGlzcGxheSBpdCB0byB0aGUgdXNlclxyXG5cclxuICAgIGNvbnNvbGUubG9nKHNhdmUpO1xyXG4gICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoc2F2ZSkpO1xyXG5cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic2F2ZVwiLCBKU09OLnN0cmluZ2lmeShzYXZlKSk7XHJcbiAgICByZXR1cm4gc2F2ZTtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBsb2FkR2FtZSgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBHYW1lXCIpO1xyXG4gICAgdmFyIHNhdmVnYW1lID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNhdmVcIikpO1xyXG4gICAgY29uc29sZS5sb2coc2F2ZWdhbWUpO1xyXG4gICAgaWYgKHNhdmVnYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgLy8gTkVXIEdBTUVcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLnJlc291cmNlcyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gc2F2ZWdhbWUucmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChpLnZhbHVlT2YoKSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpID09PSBudWxsKSBjb250aW51ZTtcclxuICAgICAgICAgICAgcmVzb3VyY2VzW2ldLnZhbHVlID0gc2F2ZWdhbWUucmVzb3VyY2VzW2ldLnZhbHVlO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbaV0ubWF4ID0gc2F2ZWdhbWUucmVzb3VyY2VzW2ldLm1heDtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVcGRhdGluZyByZXNvdXJjZXMgZm9yIFwiICsgaSArIFwiIHRvIFwiICsgc2F2ZWdhbWUucmVzb3VyY2VzW2ldLnZhbHVlLCBzYXZlZ2FtZS5yZXNvdXJjZXNbaV0ubWF4KTtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1tpXS52YWx1ZSAhPSAwKSByZXF1aXJlKCcuL3NpZGViYXInKS51cGRhdGVEaXNwbGF5VmFsdWUoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuc2tpbGxzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gc2F2ZWdhbWUuc2tpbGxzKSB7XHJcbiAgICAgICAgICAgIHNraWxsc1tpXS5leHAgPSBzYXZlZ2FtZS5za2lsbHNbaV0uZXhwO1xyXG4gICAgICAgICAgICBza2lsbHNbaV0ubGV2ZWwgPSBzYXZlZ2FtZS5za2lsbHNbaV0ubGV2ZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlcyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBvZiBPYmplY3Qua2V5cyhzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9hZGluZyBjcmFmdGVkJywga2V5LCBzYXZlZ2FtZS5jcmFmdGVkUmVzb3VyY2VzW2tleV0sIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XSk7XHJcbiAgICAgICAgICAgIGlmICghY3JhZnRlZFJlc291cmNlc1trZXldKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlID0gc2F2ZWdhbWUuY3JhZnRlZFJlc291cmNlc1trZXldLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZSkpIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS52YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIGNyYWZ0ZWRSZXNvdXJjZXNba2V5XS5jcmFmdGVkT25jZSA9IHNhdmVnYW1lLmNyYWZ0ZWRSZXNvdXJjZXNba2V5XS5jcmFmdGVkT25jZTtcclxuICAgICAgICAgICAgcmVxdWlyZSgnLi9zaWRlYmFyJykudXBkYXRlRGlzcGxheVZhbHVlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUudG9vbHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gcGxheWVyVG9vbHMgPSBzYXZlZ2FtZS50b29scztcclxuICAgICAgICAvLyBVbmlvbiB0aGUgdG9vbCBsaXN0cyB0b2dldGhlclxyXG4gICAgICAgIGxldCB1bmlvbiA9IFsuLi5uZXcgU2V0KFsuLi5nZXRBbGxUb29scygpLCAuLi5zYXZlZ2FtZS50b29sc10pXTtcclxuICAgICAgICAvLyBwbGF5ZXJUb29scyA9IHVuaW9uO1xyXG4gICAgICAgIGZvciAobGV0IHRvb2wgaW4gdW5pb24pIHtcclxuICAgICAgICAgICAgYWRkVG9vbCh0b29sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZvciAobGV0IHQgaW4gcGxheWVyVG9vbHMpIHtcclxuICAgICAgICAvLyAgICAgdXBkYXRlVG9vbFVJKHBsYXllclRvb2xzW3RdKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5zdGFnZXMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgcyBpbiBzYXZlZ2FtZS5zdGFnZXMpIHtcclxuICAgICAgICAgICAgbWFrZVZpc2libGUoc2F2ZWdhbWUuc3RhZ2VzW3NdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmpvYnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gam9iQ291bnRzID0gc2F2ZWdhbWUuam9icztcclxuICAgICAgICBmb3IgKGxldCBqIGluIHNhdmVnYW1lLmpvYnMpIHtcclxuICAgICAgICAgICAgam9iQ291bnRzW2pdID0gc2F2ZWdhbWUuam9ic1tqXTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaik7XHJcbiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS51bmxvY2tzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGZvciAobGV0IHUgaW4gc2F2ZWdhbWUudW5sb2Nrcykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcG9uZGVyc1t1XS5pc1BvbmRlcmVkID0gc2F2ZWdhbWUudW5sb2Nrc1t1XTtcclxuXHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ09sZCBzYXZlIGRhdGEgaW5jbHVkZXMgb2Jzb2xldGUgcG9uZGVyJywgdSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzUG9uZGVyZWQoJ3NraWxsc1RhYmxlJykpIHtcclxuICAgICAgICBwb3B1bGF0ZVNraWxsc1RhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUGVya3MgYmVmb3JlIGJ1aWxkaW5ncyB0byB1cGRhdGUgY29zdHNcclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUucGVya3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gbXlQZXJrcyA9IHNhdmVnYW1lLnBlcmtzO1xyXG4gICAgICAgIGZvciAobGV0IFtpLCBwZXJrXSBvZiBPYmplY3QuZW50cmllcyhzYXZlZ2FtZS5wZXJrcykpIHtcclxuICAgICAgICAgICAgYWRkUGVyayhwZXJrKTtcclxuICAgICAgICAgICAgcmVxdWlyZSgnLi9zZWxlY3RDb3JyZWN0UGVya0J1dHRvbicpLnNlbGVjdENvcnJlY3RQZXJrQnV0dG9uKHBlcmspO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5wcmVzdGlnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoc2F2ZWdhbWUucHJlc3RpZ2UpKSB7XHJcblxyXG4gICAgICAgICAgICBwcmVzdGlnZVtrZXldLmNvc3QgPSB2YWxbJ2Nvc3QnXTtcclxuICAgICAgICAgICAgcHJlc3RpZ2Vba2V5XS5sZXZlbCA9IHZhbFsnbGV2ZWwnXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS5uZXdCdWlsZGluZ3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgYiBpbiBzYXZlZ2FtZS5uZXdCdWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgYnVpbGRpbmdzW2JdID0gc2F2ZWdhbWUubmV3QnVpbGRpbmdzW2JdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLmJ1aWxkaW5ncyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBmb3IgKGxldCBiIGluIHNhdmVnYW1lLmJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhiLCBzYXZlZ2FtZS5idWlsZGluZ3NbYl0pO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRpbmdzW2JdLmNvdW50ID0gc2F2ZWdhbWUuYnVpbGRpbmdzW2JdO1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGJ1dHRvbiB0ZXh0XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVpbGRpbmdzW2JdLmNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYiwgYnVpbGRpbmdzW2JdLmNvdW50LCBidWlsZGluZ3NbYl0uZW1vamkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGNvc3RzIG9mIGFsbCB0aGUgYnVpbGRpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjYWxjdWxhdGVCdWlsZGluZ0Nvc3QoYiwgYnVpbGRpbmdzLCBoYXNQZXJrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2Vycm9yIHdpdGggYnVpbGRpbmcnLCBiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlU2lkZWJhcigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBBZnRlciBwb25kZXJzIGFuZCBidWlsZGluZ3Mgd2UgY2FuIHJlY2FsY3VsYXRlIG1heCBjbG9uZXNcclxuICAgIHJlY2FsY01heENsb25lcygpO1xyXG4gICAgdXBkYXRlQnVpbGRpbmdMaXN0KCk7XHJcblxyXG5cclxuICAgIC8vIElmIHdlIGhhdmUgYSBjbG9uZSwgdGhlbiB3ZSBhdGUgZmlzaFxyXG4gICAgc2V0QXRlRmlzaChyZXNvdXJjZXMuY2xvbmVzLm1heCA+PSAxKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdhdGVmaXNoJywgYXRlRmlzaCk7XHJcbiAgICBpZiAoZ2V0QXRlRmlzaCgpKSB7XHJcbiAgICAgICAgY29uc3QgZmlzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWF0RmlzaFwiKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hhbmdlIHRoZSBtZXNzYWdlIHRvIHRoZSBsYXRlc3Qgb25lXHJcbiAgICBpZiAodHlwZW9mIHNhdmVnYW1lLm1lc3NhZ2UgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gW2Z1bGwgbWVzc2FnZSwgc3Bhbl1cclxuICAgICAgICByZXF1aXJlKCcuL21haW4nKS5jaGFuZ2VNZXNzYWdlKHNhdmVnYW1lLm1lc3NhZ2VbMF0sIHNhdmVnYW1lLm1lc3NhZ2VbMV0pO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHJlc291cmNlcyBlYXJuZWQgd2hpbGUgYXdheVxyXG4gICAgaWYgKHR5cGVvZiBzYXZlZ2FtZS50aW1lICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJlcXVpcmUoJy4vbWFpbicpLnNldFRvdGFsVGltZShzYXZlZ2FtZS50aW1lW3RvdGFsX3RpbWVdKTtcclxuICAgICAgICBjb25zdCB0aW1lX2RpZmZlcmVuY2UgPSBEYXRlLm5vdygpIC0gc2F2ZWdhbWUudGltZVsndGltZV9vZl9zYXZlJ107XHJcbiAgICAgICAgZm9yIChsZXQgciBpbiByZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5jID0gY2FsY0luY3JlYXNlKHIsIHRpbWVfZGlmZmVyZW5jZSk7XHJcbiAgICAgICAgICAgIHJlc291cmNlc1tyXS52YWx1ZSArPSBpbmM7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHIsIHRpbWVfZGlmZmVyZW5jZSwgaW5jKTtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1tyXS52YWx1ZSA+IHJlc291cmNlc1tyXS5tYXgpIHJlc291cmNlc1tyXS52YWx1ZSA9IHJlc291cmNlc1tyXS5tYXg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuYWxsVmlzaWJsZUJ1dHRvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coc2F2ZWdhbWUuYWxsVmlzaWJsZUJ1dHRvbnMpO1xyXG4gICAgICAgIGZvciAobGV0IGEgaW4gc2F2ZWdhbWUuYWxsVmlzaWJsZUJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgc2V0VmlzaWJsZUJ1dHRvbihhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuY29ubmVjdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvbnMobmV3IE1hcChzYXZlZ2FtZS5jb25uZWN0aW9ucykpO1xyXG5cclxuICAgICAgICBpZiAoZ2V0Q29ubmVjdGlvbnMoKS5zaXplID09PSAwKSBzZXRDb25uZWN0aW9ucyhuZXcgTWFwKCkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGdldENvbm5lY3Rpb25zKCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmb3IgKGxldCBqb2IgaW4gam9iQ291bnRzKSB7XHJcbiAgICAgICAgZGlzdHJpYnV0ZVdvcmtlcnMoam9iLCBqb2JDb3VudHNbam9iXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRW1vamlEaXNwbGF5KCk7XHJcblxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2F2ZWdhbWUuZmFjdG9yaWVzICE9PSAndW5kZWZpbmVkJylcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoc2F2ZWdhbWUuZmFjdG9yaWVzKSlcclxuICAgICAgICAgICAgaWYgKHZhbCA+IDApXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbDsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRGYWN0b3J5KGtleSk7XHJcblxyXG5cclxuXHJcbn1cclxuXHJcblxyXG4vLyBzYXZlIHRoZSB0aW1lIHdoZW4gdGhlIHBsYXllciBleGl0cyB0aGUgYnJvd3NlciB0YWJcclxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgKCkgPT4gc2F2ZUdhbWUoKSk7XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2F2ZUdhbWUsXHJcbiAgICBsb2FkR2FtZVxyXG59OyIsIi8qKlxyXG4gKiBTZWxlY3QgdGhlIHBlcmsgYnV0dG9uIHRoYXQgd2UndmUgY2hvc2VuIGFuZCBkaXNhYmxlIHRoZSBvdGhlcnNcclxuICogQHBhcmFtIHtzdHJpbmd9IGFiaWxpdHlOYW1lIE5hbWUgb2YgdGhlIGNob3NlbiBwZXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBzZWxlY3RDb3JyZWN0UGVya0J1dHRvbihhYmlsaXR5TmFtZSkge1xyXG4gICAgLy8gRGlzYWJsZSBhbGwgYnV0dG9uc1xyXG4gICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGllck9uZUJ1dHRvbicpO1xyXG4gICAgbGV0IHNlbGVjdGVkQnV0dG9uO1xyXG4gICAgdHJ5IHsgc2VsZWN0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHthYmlsaXR5TmFtZX1QZXJrYCk7IH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICBpZiAoc2VsZWN0ZWRCdXR0b24pIHtcclxuICAgICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBFbmFibGUgYW5kIGhpZ2hsaWdodCB0aGUgc2VsZWN0ZWQgYnV0dG9uXHJcbiAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWRCdXR0b24sIGFiaWxpdHlOYW1lKTtcclxuICAgICAgICBzZWxlY3RlZEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgc2VsZWN0ZWRCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBidXR0b24gZm91bmQgd2l0aCBhYmlsaXR5IG5hbWU6ICcgKyBhYmlsaXR5TmFtZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zZWxlY3RDb3JyZWN0UGVya0J1dHRvbiA9IHNlbGVjdENvcnJlY3RQZXJrQnV0dG9uOyIsImNvbnN0IHsgZHJhd0FsbENvbm5lY3Rpb25zIH0gPSByZXF1aXJlKCcuL2pvYnMnKTtcclxuY29uc3QgeyB1cGRhdGVTaWRlYmFyIH0gPSByZXF1aXJlKCcuL3NpZGViYXInKTtcclxuY29uc3QgeyByZWZyZXNoVmFsdWVzLCBnZXRJbkNvbWJhdCwgY29tYmF0LCBwYXVzZUFuaW1hdGlvbiwgYmF0dGxlUmVzdWx0LCBzaW11bGF0ZUJhdHRsZSB9ID0gcmVxdWlyZSgnLi9jb21iYXQnKTtcclxuY29uc3QgeyBnZXRTZnhWb2x1bWUgfSA9IHJlcXVpcmUoJy4vYXVkaW8nKTtcclxuXHJcbmZ1bmN0aW9uIGdldEN1cnJlbnRUYWIoKSB7XHJcbiAgICBsZXQgdGFiID0gJyc7XHJcbiAgICBmb3IgKGxldCBjb250ZW50IG9mIHRhYkNvbnRhaW5lcnMpIHtcclxuICAgICAgICBpZiAoY29udGVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIHRhYiA9IGNvbnRlbnQuaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhYjtcclxufVxyXG5leHBvcnRzLmdldEN1cnJlbnRUYWIgPSBnZXRDdXJyZW50VGFiO1xyXG4vLyBTd2l0Y2ggdGFic1xyXG5sZXQgdGFiQ29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLWNvbnRlbnQgPiAuY29udGVudFwiKTsgLy8gRGlyZWN0IGNoaWxkcmVuIG9ubHlcclxuXHJcbmZ1bmN0aW9uIHNob3dUYWIodGFiTmFtZSkge1xyXG4gICAgY29uc29sZS5sb2coXCJzaG93IHRhYjogXCIgKyB0YWJOYW1lKTtcclxuICAgIC8vIEdldCBhbGwgbWFpbiBjb250YWluZXIgZGl2cyBhbmQgaGlkZSB0aGVtXHJcbiAgICBsZXQgcHJldlRhYiA9IGdldEN1cnJlbnRUYWIoKTtcclxuXHJcbiAgICBpZiAodGFiTmFtZSA9PT0gcHJldlRhYikgcmV0dXJuO1xyXG5cclxuICAgIGxldCB0YWJBdWRpbyA9IG5ldyBBdWRpbygnLi9hdWRpby90YWIud2F2Jyk7XHJcbiAgICB0YWJBdWRpby52b2x1bWUgPSBnZXRTZnhWb2x1bWUoKTtcclxuICAgIHRhYkF1ZGlvLnBsYXkoKTtcclxuXHJcblxyXG4gICAgbGV0IHByZXZUYWJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJldlRhYik7XHJcbiAgICBwcmV2VGFiRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgIHByZXZUYWJFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAvLyBHZXQgYWxsIHRhYiBidXR0b25zIGFuZCByZW1vdmUgdGhlIGFjdGl2ZSBjbGFzc1xyXG4gICAgbGV0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi1idXR0b25cIik7XHJcbiAgICBmb3IgKGxldCB0YWIgb2YgdGFicykge1xyXG4gICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNob3cgdGhlIGNsaWNrZWQgdGFiJ3MgbWFpbiBjb250YWluZXIgZGl2IGFuZCBtYWtlIHRoZSB0YWIgYnV0dG9uIGFjdGl2ZVxyXG4gICAgbGV0IGFjdGl2ZUNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJOYW1lKTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHNldFRpbWVvdXQoKCkgPT4geyBhY3RpdmVDb250ZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7IH0sIDEwMCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBhY3RpdmVDb250ZW50LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICB9LCAyMDApO1xyXG5cclxuXHJcbiAgICAvLyBHZXQgdGhlIGNsaWNrZWQgdGFiIGJ1dHRvbiBhbmQgbWFrZSBpdCBhY3RpdmVcclxuICAgIGNvbnN0IHRhYlN0cmluZyA9IGAjJHt0YWJOYW1lfUJ1dHRvbmA7XHJcbiAgICBsZXQgYWN0aXZlVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YWJTdHJpbmcpO1xyXG5cclxuICAgIGlmIChhY3RpdmVUYWJCdXR0b24pIGFjdGl2ZVRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgIGlmICh0YWJOYW1lID09PSAnam9ic1RhYicpXHJcbiAgICAgICAgZHJhd0FsbENvbm5lY3Rpb25zKCk7XHJcblxyXG4gICAgaWYgKHRhYk5hbWUgPT09ICdjb21iYXRUYWInKSB7XHJcbiAgICAgICAgcmVmcmVzaFZhbHVlcygpO1xyXG4gICAgICAgIC8vIGlmIChnZXRJbkNvbWJhdCgpKSB7XHJcbiAgICAgICAgLy8gICAgIC8vIElmIHJldHVybmluZyB0byB0aGUgY29tYmF0VGFiIGFuZCBjb21iYXQgd2FzIGluIHByb2dyZXNzLCByZXN1bWUgY29tYmF0XHJcbiAgICAgICAgLy8gICAgIGNvbWJhdCgpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBXaGVuIHJldHVybmluZyB0byB0aGUgY29tYmF0VGFiLCByZXNvbHZlIHRoZSBiYXR0bGUgaWYgaXQgaGFzbid0IGJlZW4gcmVzb2x2ZWQgeWV0XHJcbiAgICAgICAgaWYgKGJhdHRsZVJlc3VsdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzaW11bGF0ZUJhdHRsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgY29uc29sZS5sb2cocHJldlRhYiwgJz4nLCB0YWJOYW1lKTtcclxuXHJcbiAgICB1cGRhdGVTaWRlYmFyKCk7XHJcbn1cclxuZXhwb3J0cy5zaG93VGFiID0gc2hvd1RhYjtcclxuIiwiY29uc3QgeyBjYWxjSW5jcmVhc2UgfSA9IHJlcXVpcmUoXCIuL2NhbGNJbmNyZWFzZVwiKTtcclxuY29uc3QgeyBjYXBpdGFsaXplRmlyc3QgfSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZUZpcnN0Jyk7XHJcbmNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcyB9ID0gcmVxdWlyZShcIi4vanNvbi9yZXNvdXJjZXNcIik7XHJcbi8vIEB0cy1pZ25vcmVcclxuY29uc3QgeyBpc1BvbmRlcmVkIH0gPSByZXF1aXJlKCcuL3BvbmRlcicpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUdyb3VwVmlzaWJpbGl0eShncm91cE5hbWUpIHtcclxuICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGdyb3VwLSR7Z3JvdXBOYW1lfWApO1xyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRvZ2dsZS0ke2dyb3VwTmFtZX1gKTsgLy8gRW5zdXJlIHlvdSBoYXZlIHRoaXMgYnV0dG9uIHdpdGggdGhlIGlkICd0b2dnbGUtZ3JvdXBOYW1lJ1xyXG5cclxuICAgIEFycmF5LmZyb20oZ3JvdXAuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1AnKSBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGdyb3VwIGlzIGN1cnJlbnRseSBoaWRkZW5cclxuICAgIGlmICh0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdhcnJvdy1kb3duJykpIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctZG93bicpO1xyXG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhcnJvdy1yaWdodCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctcmlnaHQnKTtcclxuICAgICAgICB0b2dnbGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnYXJyb3ctZG93bicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIGEgZ3JvdXAgY29udGFpbmVyXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlR3JvdXBDb250YWluZXIoZ3JvdXBOYW1lKSB7XHJcbiAgICBjb25zdCBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZ3JvdXBDb250YWluZXIuY2xhc3NOYW1lID0gJ3Jlc291cmNlR3JvdXAnO1xyXG4gICAgZ3JvdXBDb250YWluZXIuaWQgPSBgZ3JvdXAtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi50ZXh0Q29udGVudCA9IGdyb3VwTmFtZS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgdG9nZ2xlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0b2dnbGVHcm91cFZpc2liaWxpdHkoZ3JvdXBOYW1lKTtcclxuICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc05hbWUgPSAndG9nZ2xlLWJ1dHRvbiBhcnJvdy1kb3duJztcclxuICAgIHRvZ2dsZUJ1dHRvbi5pZCA9IGB0b2dnbGUtJHtncm91cE5hbWV9YDtcclxuXHJcbiAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2dnbGVCdXR0b24pO1xyXG4gICAgcmV0dXJuIGdyb3VwQ29udGFpbmVyO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIEl0ZXJhdGVzIG92ZXIgZWFjaCBncm91cCBhbmQgcmVzb3VyY2UgdG8gY3JlYXRlIHRhZ3NcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJlc291cmNlVGFncyh3aXRoR3JvdXBzKSB7XHJcbiAgICAvLyBpZiAoaXNQb25kZXJlZCgnb3JnYW5pemF0aW9uJykpIHdpdGhHcm91cHMgPSB0cnVlO1xyXG4gICAgY29uc29sZS5sb2coXCJpbml0aWFsemluZyByZXNvdXJjZSB0YWdzXCIpO1xyXG4gICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgLy8gRGVmaW5lIGdyb3VwcyBmb3IgeW91ciByZXNvdXJjZXNcclxuICAgIGNvbnN0IHJlc291cmNlR3JvdXBzID0ge1xyXG4gICAgICAgIHNwZWNpYWw6IFsnY2xvbmVzJywgJ2h1c2tzJywgJ3BvbmRlcicsICd2aW9sZW5jZSddLFxyXG4gICAgICAgIGZvb2Q6IFsnYmVycmllcycsICdmaXNoJywgJ2dhbWUnLCAnd2hlYXQnLCAnYnJlYWQnLCAnZnJlc2h3YXRlciddLFxyXG4gICAgICAgIG1hdGVyaWFsczogWydzdGlja3MnLCAndmluZXMnLCAncm9ja3MnLCAnd29vZCcsICdzYW5kJywgJ2NsYXknLCAnaGlkZXMnLCAnaGVyYnMnXSxcclxuICAgICAgICB0b29sczogWydzaGFycHJvY2tzJywgJ3JvcGUnLCAnaGFuZGxlJywgJ2Zpc2hpbmdyb2QnLCAncGlja2F4ZScsICdheGUnLCAnc3BlYXInLCAnc3RhZmYnXSxcclxuICAgICAgICBhZHZhbmNlZDogWydnbGFzcycsICdwYXBlcicsICdjcmF0ZXMnLCAnbWVkaWNpbmUnLCAnbGVhdGhlciddLFxyXG4gICAgICAgIG1ldGFsOiBbJ29yZScsICdnb2xkJywgJ2lyb24nLCAnc2lsdmVyJywgJ3N0ZWVsJ10sXHJcbiAgICAgICAgY29uc3RydWN0aW9uOiBbJ2JyaWNrcycsICdiZWFtcycsICduYWlscycsICdzbGFicycsICdjb25jcmV0ZSddLFxyXG4gICAgICAgIC8vIC4uLiBBZGQgb3RoZXIgZ3JvdXBzIGFzIG5lY2Vzc2FyeVxyXG4gICAgfTtcclxuICAgIGZvciAobGV0IFtncm91cE5hbWUsIGdyb3VwT2ZSZXNvdXJjZXNdIG9mIE9iamVjdC5lbnRyaWVzKHJlc291cmNlR3JvdXBzKSkge1xyXG5cclxuICAgICAgICBncm91cE9mUmVzb3VyY2VzLmZvckVhY2gocmVzb3VyY2VOYW1lID0+IHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZS0nICsgcmVzb3VyY2VOYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghd2l0aEdyb3VwcykgZ3JvdXBOYW1lID0gbnVsbDsgLy8gU2V0IGdyb3VwIHRvIHJlc291cmNlc1xyXG5cclxuICAgICAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSBwYXJlbnRFbGVtZW50ID0gY3JlYXRlUmVzb3VyY2VUYWcocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwYXJlbnRFbGVtZW50KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBlbGVtZW50IGlmIHdlIHNob3VsZCwgb3RoZXJ3aXNlIGNyZWF0ZSBhIHJlc291cmNlIHRhZ1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXNvdXJjZU5hbWUsIHNob3VsZEhpZGUocmVzb3VyY2VOYW1lKSwgZ2V0TWF0ZXJpYWwocmVzb3VyY2VOYW1lKSk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRIaWRlKHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNob3VsZEhpZGUpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2hvdWxkSGlkZShyZXNvdXJjZU5hbWUpIHtcclxuXHJcbiAgICB2YXIgc2hvdWxkSGlkZSA9IHRydWU7XHJcbiAgICAvLyBmb3IgKGxldCBjIGluIHBhcmVudEVsZW1lbnQuY2xhc3NMaXN0KSB7XHJcbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coJ2hhcyBwYXNzZWQnLCByZXNvdXJjZU5hbWUsIHBhc3NlZFN0YWdlKGMpKTtcclxuICAgIC8vICAgICBpZiAocmVxdWlyZSgnLi9zdGFnZXMnKS5wYXNzZWRTdGFnZShjKSkgeyBzaG91bGRIaWRlID0gZmFsc2U7IGNvbnNvbGUubG9nKCdkb250IGhpZGUnLCByZXNvdXJjZU5hbWUsIGMpOyB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgaWYgKGdldE1hdGVyaWFsKHJlc291cmNlTmFtZSkgPiAwKSB7XHJcbiAgICAgICAgc2hvdWxkSGlkZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSkgcmVzb3VyY2VzW3Jlc291cmNlTmFtZV0uaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSAmJiByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXS5pc1Zpc2libGUpIHsgc2hvdWxkSGlkZSA9IGZhbHNlOyB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ3Nob3VsZCBoaWRlPycsIHJlc291cmNlTmFtZSwgc2hvdWxkSGlkZSk7XHJcbiAgICByZXR1cm4gc2hvdWxkSGlkZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFiYnJldmlhdGVOdW1iZXIobnVtKSB7XHJcbiAgICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicpIHJldHVybiBudW07XHJcbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIHVuaXQpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAxMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMikgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMCkgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgMSkgKyB1bml0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDEwMDApIHJldHVybiByb3VuZFRvRGVjaW1hbHModmFsdWUsIDApICsgdW5pdDtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSkgKyB1bml0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJvdW5kVG9EZWNpbWFscyhudW1iZXIsIGRlY2ltYWxzKSB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcclxuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQobnVtYmVyICogZmFjdG9yKSAvIGZhY3RvcikudG9GaXhlZChkZWNpbWFscyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG51bSA8IDFlMykgcmV0dXJuIHJvdW5kVG9EZWNpbWFscyhudW0sIDEpOyAvLyBJZiBsZXNzIHRoYW4gMSwwMDBcclxuICAgIGlmIChudW0gPCAxZTYpIHJldHVybiBmb3JtYXQobnVtIC8gMWUzLCAnSycpOyAvLyBUaG91c2FuZHNcclxuICAgIGlmIChudW0gPCAxZTkpIHJldHVybiBmb3JtYXQobnVtIC8gMWU2LCAnTScpOyAvLyBNaWxsaW9uc1xyXG4gICAgaWYgKG51bSA8IDFlMTIpIHJldHVybiBmb3JtYXQobnVtIC8gMWU5LCAnQicpOyAvLyBCaWxsaW9uc1xyXG4gICAgLy8gQWRkIG1vcmUgY2FzZXMgZm9yIGxhcmdlciBudW1iZXJzIGlmIG5lZWRlZFxyXG5cclxuICAgIGlmIChudW0gPT09IEluZmluaXR5KSBudW0gPSAn4oieJztcclxuICAgIHJldHVybiBudW0udG9TdHJpbmcoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIHJlc291cmNlIGNvdW50IGFuZCBtYXhlcyBvZiBhbGwgcmVzb3VyY2VzXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlU2lkZWJhcigpIHtcclxuICAgIGNvbnN0IGFsbE1hdGVyaWFscyA9IHJlcXVpcmUoJy4vZmFjdG9yeScpLmFsbE1hdGVyaWFscztcclxuICAgIEFycmF5LmZyb20oYWxsTWF0ZXJpYWxzKS5mb3JFYWNoKHIgPT4geyBpZiAocmVzb3VyY2VzW3JdKSB1cGRhdGVEaXNwbGF5VmFsdWUocik7IH0pO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGZvciAoY29uc3QgW2luZGV4LCByZXNvdXJjZU5hbWVdIG9mIE9iamVjdC5lbnRyaWVzKGFsbE1hdGVyaWFscykpIHtcclxuICAgICAgICBpZiAocmVzb3VyY2VzW3Jlc291cmNlTmFtZV0pIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2UtJyArIHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7IGNvbnNvbGUud2Fybignbm8gcGFyZW50IGVsZW1lbnQgZm91bmQgZm9yJywgcmVzb3VyY2VOYW1lKTsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIGlmIChzaG91bGRIaWRlKHJlc291cmNlTmFtZSkpIHtcclxuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkaXNwbGF5RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHJlc291cmNlTmFtZSArICdWYWx1ZScpO1xyXG4gICAgICAgIGlmIChkaXNwbGF5RWxlbSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhhYmJyZXZpYXRlTnVtYmVyKHJlc291cmNlRGF0YSkpO1xyXG4gICAgICAgICAgICB2YXIgY29sb3IgPSAnI2ZmZic7XHJcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IGdldE1hdGVyaWFsKHJlc291cmNlTmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IGdldE1heChyZXNvdXJjZU5hbWUpO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gbWF4KSBjb2xvciA9ICcjZmNjJztcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFtb3VudCAvIG1heCA+IC42KSBjb2xvciA9ICcjZWViJztcclxuXHJcbiAgICAgICAgICAgIGRpc3BsYXlFbGVtLmlubmVySFRNTCA9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiR7Y29sb3J9XCI+JHthYmJyZXZpYXRlTnVtYmVyKGFtb3VudCl9IC8gJHthYmJyZXZpYXRlTnVtYmVyKG1heCl9IDwvc3Bhbj5gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG4vLyBDcmVhdGUgYWxsIG91ciByZXNvdXJjZSB0YWdzIGluIHRoZSBzaWRlYmFyXHJcbmNvbnN0IHJlc291cmNlc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZXMnKTtcclxuZnVuY3Rpb24gY3JlYXRlUmVzb3VyY2VUYWcocmVzb3VyY2VOYW1lLCBncm91cE5hbWUpIHtcclxuICAgIC8vIGlmICghcmVzb3VyY2VzLmhhc093blByb3BlcnR5KHJlc291cmNlTmFtZSkpIHRocm93IFwiSW52YWxpZCByZXNvdXJjZTogXCIgKyByZXNvdXJjZU5hbWU7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHJlc291cmNlIHRhZyBmb3IgXCIsIHJlc291cmNlTmFtZSwgZ3JvdXBOYW1lKTtcclxuICAgIGxldCBncm91cENvbnRhaW5lcjtcclxuICAgIGlmIChncm91cE5hbWUpIHtcclxuICAgICAgICBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBncm91cC0ke2dyb3VwTmFtZX1gKTtcclxuICAgICAgICBpZiAoIWdyb3VwQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGdyb3VwQ29udGFpbmVyID0gY3JlYXRlUmVzb3VyY2VHcm91cENvbnRhaW5lcihncm91cE5hbWUpO1xyXG4gICAgICAgICAgICByZXNvdXJjZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXBDb250YWluZXIpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYXBwZW5kaW5nJywgZ3JvdXBDb250YWluZXIsIHJlc291cmNlc0NvbnRhaW5lciwgcmVzb3VyY2VzQ29udGFpbmVyLmNoaWxkRWxlbWVudENvdW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvdXJjZXMnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhncm91cENvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VEaXNwbGF5TmFtZSA9IGNhcGl0YWxpemVGaXJzdChyZXNvdXJjZU5hbWUpLnNwbGl0KCdfJykuam9pbignICcpO1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5jbGFzc05hbWUgPSBgcmVzb3VyY2VgO1xyXG4gICAgcmVzb3VyY2VFbGVtZW50LmlkID0gYHJlc291cmNlLSR7cmVzb3VyY2VOYW1lfWA7XHJcblxyXG4gICAgY29uc3QgcmVzb3VyY2VOYW1lU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlTmFtZVNwYW4uY2xhc3NOYW1lID0gJ3Jlc291cmNlTmFtZSc7XHJcbiAgICByZXNvdXJjZU5hbWVTcGFuLnRleHRDb250ZW50ID0gYCR7cmVzb3VyY2VEaXNwbGF5TmFtZX06YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVZhbHVlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmNsYXNzTmFtZSA9ICdyZXNvdXJjZVZhbHVlJztcclxuICAgIHJlc291cmNlVmFsdWVTcGFuLmlkID0gYCR7cmVzb3VyY2VOYW1lfVZhbHVlYDtcclxuICAgIGxldCBtYXggPSAoZ2V0TWF4KHJlc291cmNlTmFtZSkgJiYgZ2V0TWF4KHJlc291cmNlTmFtZSkgPCBJbmZpbml0eSkgPyBnZXRNYXgocmVzb3VyY2VOYW1lKS50b0ZpeGVkKDIpIDogJ+KInic7XHJcblxyXG4gICAgcmVzb3VyY2VWYWx1ZVNwYW4udGV4dENvbnRlbnQgPSBgJHtnZXRNYXRlcmlhbChyZXNvdXJjZU5hbWUpLnRvRml4ZWQoMil9IC8gJHttYXh9YDtcclxuXHJcbiAgICBjb25zdCByZXNvdXJjZVJhdGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgcmVzb3VyY2VSYXRlU3Bhbi5jbGFzc05hbWUgPSAncmVzb3VyY2VSYXRlJztcclxuICAgIHJlc291cmNlUmF0ZVNwYW4uaW5uZXJIVE1MID0gYCgrXHJcbiAgICAgICAgICAgIDxzcGFuIGlkPVwiJHtyZXNvdXJjZU5hbWV9SW5jcmVhc2VSYXRlXCI+MDwvc3Bhbj4vcylgO1xyXG5cclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZU5hbWVTcGFuKTtcclxuICAgIHJlc291cmNlRWxlbWVudC5hcHBlbmRDaGlsZChyZXNvdXJjZVZhbHVlU3Bhbik7XHJcbiAgICByZXNvdXJjZUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzb3VyY2VSYXRlU3Bhbik7XHJcblxyXG4gICAgZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQocmVzb3VyY2VFbGVtZW50KTtcclxuXHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBvcmRlcmluZ1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgb3JkZXIgb2YgYSByZXNvdXJjZVxyXG4gICAgZnVuY3Rpb24gY2hhbmdlUmVzb3VyY2VPcmRlcihyZXNvdXJjZUlkLCBuZXdPcmRlcikge1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVzb3VyY2VJZCk7XHJcbiAgICAgICAgaWYgKHJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlLnN0eWxlLm9yZGVyID0gbmV3T3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtY2xvbmVzXCIsIDEpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXN0aWNrc1wiLCAyKTsgLy8gTW92ZSBcIlN0aWNrc1wiIHRvIG9yZGVyIDJcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS12aW5lc1wiLCAzKTsgLy8gTW92ZSBcIlZpbmVzXCIgdG8gb3JkZXIgM1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXJvY2tzXCIsIDQpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWZpc2hcIiwgNSk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZnJlc2h3YXRlclwiLCA2KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS13b29kXCIsIDcpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLW9yZVwiLCA4KTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1zYW5kXCIsIDkpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWNsYXlcIiwgMTApO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXdoZWF0XCIsIDExKTtcclxuICAgIGNoYW5nZVJlc291cmNlT3JkZXIoXCJyZXNvdXJjZS1oaWRlc1wiLCAxMik7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtZ2FtZVwiLCAxMyk7XHJcbiAgICBjaGFuZ2VSZXNvdXJjZU9yZGVyKFwicmVzb3VyY2UtaGVyYnNcIiwgMTQpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLWJlcnJpZXNcIiwgMTUpO1xyXG4gICAgY2hhbmdlUmVzb3VyY2VPcmRlcihcInJlc291cmNlLXBvbmRlclwiLCA1MCk7XHJcblxyXG4gICAgcmV0dXJuIHJlc291cmNlRWxlbWVudDtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgdXBkYXRlU2lkZWJhcixcclxuICAgIGluaXRpYWxpemVSZXNvdXJjZVRhZ3MsXHJcbiAgICB1cGRhdGVEaXNwbGF5VmFsdWUsXHJcbiAgICBhYmJyZXZpYXRlTnVtYmVyXHJcbn07XHJcbi8qKlxyXG4gKiBVcGRhdGVzIHRoZSBkaXNwbGF5IHZhbHVlIG9mIG9uZSByZXNvdXJjZSwgYSBzcGVjaWZpYyB1cGRhdGVTaWRlYmFyKClcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5VmFsdWUobWF0ZXJpYWwpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSByZXNvdXJjZXNDb250YWluZXIucXVlcnlTZWxlY3RvcihgIyR7bWF0ZXJpYWx9VmFsdWVgKTtcclxuICAgIGNvbnN0IGVsZW1lbnRJbmNyZWFzZSA9IHJlc291cmNlc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGAjJHttYXRlcmlhbH1JbmNyZWFzZVJhdGVgKTtcclxuICAgIC8vIGNvbnN0IGNyYWZ0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBidXR0b24jY3JhZnQke2NhcGl0YWxpemVGaXJzdChtYXRlcmlhbCl9YCk7XHJcbiAgICAvLyB0cnkgeyBpZiAoIWVsZW1lbnQpIGNyZWF0ZVJlc291cmNlVGFnKG1hdGVyaWFsKTsgfVxyXG4gICAgLy8gY2F0Y2ggKGVycm9yKSB7IH1cclxuICAgIC8vIGNvbnNvbGUubG9nKG1hdGVyaWFsLCBlbGVtZW50LCBjcmFmdGVkQnV0dG9uKTtcclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gbGV0IG1heCA9IChnZXRNYXgobWF0ZXJpYWwpICYmIGdldE1heChtYXRlcmlhbCkgPCBJbmZpbml0eSkgPyBnZXRNYXgobWF0ZXJpYWwpLnRvRml4ZWQoMSkgOiAn4oieJztcclxuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGAke2FiYnJldmlhdGVOdW1iZXIoZ2V0TWF0ZXJpYWwobWF0ZXJpYWwpKX0gLyAke2FiYnJldmlhdGVOdW1iZXIoZ2V0TWF4KG1hdGVyaWFsKSl9YDtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50SW5jcmVhc2UpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRJbmNyZWFzZS50ZXh0Q29udGVudCA9IGNhbGNJbmNyZWFzZShtYXRlcmlhbCwgMTAwMCkudG9GaXhlZCgxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRlcmlhbCwgc2hvdWxkSGlkZShtYXRlcmlhbCksIGdldE1hdGVyaWFsKG1hdGVyaWFsKSk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRIaWRlKG1hdGVyaWFsKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlbGVtZW50LCBtYXRlcmlhbCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0pIHtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlc1ttYXRlcmlhbF0uaXNHZXR0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRlYmFyVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVzb3VyY2VzXCIpLnF1ZXJ5U2VsZWN0b3IoJyNyZXNvdXJjZS0nICsgbWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgaWYgKHNpZGViYXJUZXh0KSBzaWRlYmFyVGV4dC5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBpZiAoY3JhZnRlZEJ1dHRvbikge1xyXG4gICAgLy8gICAgIGNvbnN0IGNvdW50U3BhbiA9IGNyYWZ0ZWRCdXR0b24ucXVlcnlTZWxlY3RvcihgIyR7bWF0ZXJpYWx9VmFsdWVgKTtcclxuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZygnY3JhZnRlZCBidXR0b24gd2FzIGZvdW5kJywgY291bnRTcGFuLCBtYXRlcmlhbCwgZ2V0Q3JhZnRlZFJlc291cmNlKG1hdGVyaWFsKSk7XHJcbiAgICAvLyAgICAgaWYgKGNvdW50U3BhbikgY291bnRTcGFuLnRleHRDb250ZW50ID0gZ2V0Q3JhZnRlZFJlc291cmNlKG1hdGVyaWFsKS50b0ZpeGVkKDApO1xyXG4gICAgLy8gICAgIGVsc2UgY29uc29sZS53YXJuKGBSZXNvdXJjZSBidXR0b24gZm91bmQgYnV0IG5vIGNvdW50IHNwYW4gZm9yOiAke21hdGVyaWFsfWApO1xyXG4gICAgLy8gfVxyXG59XHJcbiIsImNvbnN0IHsgc2tpbGxzIH0gPSByZXF1aXJlKCcuL2pzb24vc2tpbGxzJyk7XHJcbmNvbnN0IHsgdHJpZ2dlckZsb2F0VXBUZXh0IH0gPSByZXF1aXJlKCcuL3RyaWdnZXJGbG9hdFVwVGV4dCcpO1xyXG5cclxuZnVuY3Rpb24gaW52ZXJ0U2tpbGxzVG9SZXNvdXJjZXMoc2tpbGxzKSB7XHJcbiAgICBsZXQgcmVzb3VyY2VUb1NraWxsTWFwID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBbc2tpbGwsIGRhdGFdIG9mIE9iamVjdC5lbnRyaWVzKHNraWxscykpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHJlc291cmNlIG9mIGRhdGEuYWZmZWN0ZWRSZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgaWYgKCFyZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzb3VyY2VUb1NraWxsTWFwW3Jlc291cmNlXS5wdXNoKHNraWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc291cmNlVG9Ta2lsbE1hcDtcclxufVxyXG5jb25zdCByZXNvdXJjZVRvU2tpbGxNYXAgPSBpbnZlcnRTa2lsbHNUb1Jlc291cmNlcyhza2lsbHMpO1xyXG5jb25zb2xlLmxvZyhyZXNvdXJjZVRvU2tpbGxNYXApO1xyXG4vKipcclxuICogVXBkYXRlIHRoZSByZWxldmFudCBza2lsbCBvZiBhIHJlc291cmNlIGluY3JlYXNlZCBieSBudW1cclxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlIFdoaWNoIHJlc291cmNlIHdhcyB1cGRhdGVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gSG93IG11Y2ggdGhlIHJlc291cmNlIGluY3JlYXNlZFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlU2tpbGxzKHJlc291cmNlLCBudW0pIHtcclxuICAgIG51bSA9IE1hdGguYWJzKG51bSk7XHJcbiAgICBpZiAocmVxdWlyZSgnLi9wb25kZXInKS5pc1BvbmRlcmVkKCdmYXN0ZXJTa2lsbHMnKSkgbnVtICo9IDEuMDU7XHJcblxyXG4gICAgaWYgKCFyZXNvdXJjZVRvU2tpbGxNYXBbcmVzb3VyY2VdKSByZXR1cm47XHJcbiAgICBjb25zdCBza2lsbCA9IHJlc291cmNlVG9Ta2lsbE1hcFtyZXNvdXJjZV1bMF0udG9TdHJpbmcoKTtcclxuICAgIC8vIG1heCBsZXZlbCAxMDBcclxuICAgIGlmIChza2lsbHNbc2tpbGxdLmxldmVsID49IDEwMCkge1xyXG4gICAgICAgIHNraWxsc1tza2lsbF0ubGV2ZWwgPSAxMDA7XHJcbiAgICAgICAgc2tpbGxzW3NraWxsXS5leHAgPSAwO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIFxyXG4gICAgc2tpbGxzW3NraWxsXS5leHAgKz0gbnVtIC8gTWF0aC5wb3coMS40LCBza2lsbHNbc2tpbGxdLmxldmVsKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgc2tpbGw6XCIgKyBza2lsbCArIFwiIHRvIFwiICsgc2tpbGxzW3NraWxsXS5leHApXHJcbiAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPj0gMTAwKSB7XHJcblxyXG4gICAgICAgIHNraWxsc1tza2lsbF0ubGV2ZWwgKz0gMTtcclxuICAgICAgICBza2lsbHNbc2tpbGxdLmV4cCA9IDA7XHJcblxyXG4gICAgICAgIC8vIExldmVsdXAgcG9wdXBcclxuICAgICAgICBsZXQgbGV2ZWx1cCA9IGBMZXZlbCB1cCEgJHtza2lsbH0g4oaSICR7c2tpbGxzW3NraWxsXS5sZXZlbH1gO1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJlc3RpZ2UnKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB0cmlnZ2VyRmxvYXRVcFRleHQocmVjdC54LCByZWN0LnksIGxldmVsdXAsICcjRjREMDNGJyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgc2tpbGxzIHRhYmxlIHZpc3VhbGl6YXRpb25cclxuICAgIGlmIChyZXF1aXJlKCcuL3N0YWdlcycpLnBhc3NlZFN0YWdlKCdza2lsbHNUYWJsZScpKSB7XHJcbiAgICAgICAgcG9wdWxhdGVTa2lsbHNUYWJsZSgpO1xyXG4gICAgfVxyXG59XHJcbmxldCBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gZmFsc2U7XHJcbi8qKlxyXG4gKiBEcmF3IHRoZSBza2lsbHMgdGFibGUgYW5kIGluaXRpYWxpemUgaWYgbmVlZGVkXHJcbiAqL1xyXG5mdW5jdGlvbiBwb3B1bGF0ZVNraWxsc1RhYmxlKCkge1xyXG4gICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tpbGxzVGFibGUnKTtcclxuXHJcbiAgICAvLyBJZiB0aGUgdGFibGUgaXMgZW1wdHksIGNyZWF0ZSB0aGUgcm93cyBhbmQgcHJvZ3Jlc3MgYmFyc1xyXG4gICAgaWYgKCFoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIHRhYmxlIGZvciB0aGUgZmlyc3QgdGltZVwiKTtcclxuICAgICAgICBoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAvLyBcclxuICAgICAgICBmb3IgKGxldCBza2lsbCBpbiBza2lsbHMpIHtcclxuICAgICAgICAgICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgICAgICAgICAgdHIuaWQgPSAndHItJyArIHNraWxsO1xyXG4gICAgICAgICAgICBsZXQgdGRQcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgIHRkUHJvZ3Jlc3Muc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncHJvZ3Jlc3NCYXInKTtcclxuICAgICAgICAgICAgLy8gaWYgKGlzRGFyaykge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMyMjhCMjInO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyM1MEM4NzgnO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLmhlaWdodCA9ICcyMHB4JztcclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdkYXRhLXNraWxsJywgc2tpbGwpOyAvLyBBc3NpZ24gYSBkYXRhIGF0dHJpYnV0ZSBmb3IgaWRlbnRpZmljYXRpb25cclxuXHJcbiAgICAgICAgICAgIGxldCBza2lsbFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnRleHRDb250ZW50ID0gJ1tsZXZlbCAnICsgc2tpbGxzW3NraWxsXS5sZXZlbCArICddICAgJyArIHNraWxsO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc2V0QXR0cmlidXRlKCdpZCcsICdsZXZlbC0nICsgc2tpbGwpO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUubGVmdCA9ICcxMHB4JztcclxuICAgICAgICAgICAgc2tpbGxUZXh0LnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICAgICAgICBza2lsbFRleHQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTUwJSknO1xyXG5cclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIGlmIChza2lsbHNbc2tpbGxdLmV4cCA9PSAwICYmIHNraWxsc1tza2lsbF0ubGV2ZWwgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdHIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZFByb2dyZXNzLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyKTtcclxuICAgICAgICAgICAgdGRQcm9ncmVzcy5hcHBlbmRDaGlsZChza2lsbFRleHQpO1xyXG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFByb2dyZXNzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBEaXNwbGF5IGV2ZXJ5dGhpbmcgd2UgY2FuXHJcbiAgICAgICAgZm9yIChsZXQgc2tpbGwgaW4gc2tpbGxzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2tpbGxzW3NraWxsXS5leHAgPiAwIHx8IHNraWxsc1tza2lsbF0ubGV2ZWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ci0nICsgc2tpbGwpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucHJvZ3Jlc3NCYXJbZGF0YS1za2lsbD1cIiR7c2tpbGx9XCJdYCk7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0Jhcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHNraWxsc1tza2lsbF0uZXhwICsgJyUnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNraWxsTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGV2ZWwtXCIgKyBza2lsbCk7XHJcbiAgICAgICAgICAgICAgICBza2lsbE5hbWUudGV4dENvbnRlbnQgPSAnW2xldmVsICcgKyBza2lsbHNbc2tpbGxdLmxldmVsICsgJ10gICAnICsgc2tpbGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHVwZGF0ZVNraWxscyxcclxuICAgIHBvcHVsYXRlU2tpbGxzVGFibGVcclxuXHJcbn07IiwibGV0IHN0YWdlcyA9IFtdO1xyXG5mdW5jdGlvbiBzZXRTdGFnZShzdGFnZSkge1xyXG4gICAgc3RhZ2VzLnB1c2goc3RhZ2UpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhZ2UgU3RhZ2UgdG8gY2hlY2tcclxuICogQHJldHVybnMgYm9vbGVhbiBpZiBzdGFnZSBpbiBzdGFnZXNcclxuICovXHJcbmZ1bmN0aW9uIHBhc3NlZFN0YWdlKHN0YWdlKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdGFnZXMpLmluY2x1ZGVzKHN0YWdlKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBbGxTdGFnZXMoKSB7XHJcbiAgICByZXR1cm4gc3RhZ2VzO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFN0YWdlcygpIHtcclxuICAgIHdoaWxlIChzdGFnZXMubGVuZ3RoID4gMClcclxuICAgICAgICBzdGFnZXMucG9wKCk7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBzZXRTdGFnZSxcclxuICAgIHBhc3NlZFN0YWdlLFxyXG4gICAgZ2V0QWxsU3RhZ2VzLFxyXG4gICAgcmVzZXRTdGFnZXNcclxufTsiLCIvKiBUT09MUyAqL1xyXG5cclxuXHJcbi8vIExpc3QgdG8gaG9sZCB0aGUgdG9vbHNcclxubGV0IHBsYXllclRvb2xzID0gWydCYXJlIEhhbmRzJ107XHJcblxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdG9vbCBpcyBwcmVzZW50IGluIHRoZSBsaXN0IFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9vbCBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNUb29sKHRvb2wpIHtcclxuICAgIHJldHVybiBwbGF5ZXJUb29scy5pbmNsdWRlcyh0b29sKTtcclxufVxyXG5cclxuLy8gRnVuY3Rpb24gdG8gYWRkIGEgdG9vbCBpZiBpdCdzIG5vdCBhbHJlYWR5IHByZXNlbnRcclxuZnVuY3Rpb24gYWRkVG9vbCh0b29sKSB7XHJcbiAgICAvLyBJZ25vcmUgdG9vbHMgdGhhdCBhcmUganVzdCBudW1iZXJzXHJcbiAgICBpZiAoIWlzTmFOKHRvb2wpICYmIC8vIHVzZSB0eXBlIGNvZXJjaW9uIHRvIHBhcnNlIHRoZSBfZW50aXJldHlfIG9mIHRoZSBzdHJpbmcgKGBwYXJzZUZsb2F0YCBhbG9uZSBkb2VzIG5vdCBkbyB0aGlzKS4uLlxyXG4gICAgICAgICFpc05hTihwYXJzZUZsb2F0KHRvb2wpKSkgLy8gLi4uYW5kIGVuc3VyZSBzdHJpbmdzIG9mIHdoaXRlc3BhY2UgZmFpbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaGFzVG9vbCh0b29sKSkge1xyXG4gICAgICAgIHBsYXllclRvb2xzLnB1c2godG9vbCk7XHJcblxyXG4gICAgICAgIHVwZGF0ZVRvb2xVSSh0b29sKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsVG9vbHMoKSB7XHJcbiAgICByZXR1cm4gcGxheWVyVG9vbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvb2xVSSh0b29sKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIFVJXHJcbiAgICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvb2xzLWxpc3RcIik7XHJcbiAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b29sKSk7XHJcbiAgICBpZiAodWwpIHVsLmFwcGVuZENoaWxkKGxpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9vbFZhbHVlRm9yUmVzb3VyY2UocmVzb3VyY2UpIHtcclxuICAgIGlmICghcmVzb3VyY2UpIHJldHVybiAxO1xyXG4gICAgaWYgKCFyZXNvdXJjZS50b29scykgcmV0dXJuIDE7XHJcblxyXG4gICAgLy8gU29ydCB0aGUgdG9vbHMgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiB0aGVpciB2YWxcclxuICAgIGNvbnN0IHNvcnRlZFRvb2xzID0gcmVzb3VyY2UudG9vbHMuc29ydCgoYSwgYikgPT4gYi52YWwgLSBhLnZhbCk7XHJcblxyXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzb3J0ZWQgdG9vbHNcclxuICAgIGZvciAobGV0IHRvb2wgb2Ygc29ydGVkVG9vbHMpIHtcclxuICAgICAgICBpZiAoaGFzVG9vbCh0b29sLnRvb2wpKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBwbGF5ZXIgaGFzIHRoZSB0b29sLCByZXR1cm4gaXRzIGFzc29jaWF0ZWQgdmFsdWVcclxuICAgICAgICAgICAgcmV0dXJuIHRvb2wudmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSWYgbm9uZSBvZiB0aGUgdG9vbHMgYXJlIGZvdW5kLCByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWVcclxuICAgIHJldHVybiAxO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGhhc1Rvb2wsXHJcbiAgICBhZGRUb29sLFxyXG4gICAgZ2V0QWxsVG9vbHMsXHJcbiAgICBnZXRUb29sVmFsdWVGb3JSZXNvdXJjZVxyXG59OyIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoJy4vZ2V0TWF0ZXJpYWwnKTtcclxuXHJcblxyXG5jb25zdCByZXNvdXJjZUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzb3VyY2VMaXN0Jyk7XHJcbmNvbnN0IGdvbGRBbW91bnRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnb2xkQW1vdW50Jyk7XHJcbi8vIGxldCBnb2xkQW1vdW50ID0gMTAwMDsgLy8gU2FtcGxlIHN0YXJ0aW5nIGFtb3VudFxyXG4vLyBjb25zdCB0cmFkZUJvbnVzID0gMC45OyAvLyAxMCUgZGlzY291bnRcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVHJhZGVUYWJsZShyZXNvdXJjZXMpIHtcclxuICAgIGZvciAobGV0IHJlc291cmNlIGluIHJlc291cmNlcykge1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgMTA7IC8vIFJhbmRvbSBwcmljZSBiZXR3ZWVuIDEwIGFuZCAxMTAgZm9yIHRoaXMgZXhhbXBsZS5cclxuXHJcbiAgICAgICAgcm93LmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cmVzb3VyY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiPiR7cHJpY2V9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidHJhZGV0ZFwiIHN0eWxlPVwiZGlzcGxheTpmbGV4OyBmbGV4LWRpcmVjdGlvbjpyb3c7XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV5QnRuXCIgZGF0YS1yZXNvdXJjZT1cIiR7cmVzb3VyY2V9XCIgZGF0YS1wcmljZT1cIiR7cHJpY2V9XCI+QnV5PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2VsbEJ0blwiIGRhdGEtcmVzb3VyY2U9XCIke3Jlc291cmNlfVwiIGRhdGEtcHJpY2U9XCIke3ByaWNlfVwiPlNlbGw8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICByZXNvdXJjZUxpc3QuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgYnV5IGFuZCBzZWxsIGJ1dHRvbnNcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXlCdG4nKS5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1yZXNvdXJjZScpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcGFyc2VGbG9hdChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJpY2UnKSk7XHJcbiAgICAgICAgICAgIGJ1eVJlc291cmNlKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxsQnRuJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzb3VyY2UnKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXByaWNlJykpO1xyXG4gICAgICAgICAgICBzZWxsUmVzb3VyY2UocmVzb3VyY2UsIHByaWNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNpbWlsYXJseSwgeW91IGNhbiBhZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBzZWxsIGJ1dHRvbnMgaGVyZVxyXG59XHJcblxyXG5leHBvcnRzLmdlbmVyYXRlVHJhZGVUYWJsZSA9IGdlbmVyYXRlVHJhZGVUYWJsZTtcclxuXHJcbmV4cG9ydHMuYnV5UmVzb3VyY2UgPSBidXlSZXNvdXJjZTtcclxuZXhwb3J0cy5zZWxsUmVzb3VyY2UgPSBzZWxsUmVzb3VyY2U7XHJcblxyXG5mdW5jdGlvbiBidXlSZXNvdXJjZShyZXNvdXJjZSwgcHJpY2UpIHtcclxuXHJcbiAgICBpZiAoZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSBwcmljZSkge1xyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIC1wcmljZSk7XHJcbiAgICAgICAgcmVxdWlyZSgnLi9yZXNvdXJjZXMnKS5pbmNyZWFzZU1hdGVyaWFsKHJlc291cmNlLCBwcmljZSk7XHJcbiAgICAgICAgZ29sZEFtb3VudEVsLnRleHRDb250ZW50ID0gZ2V0TWF0ZXJpYWwoJ2dvbGQnLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKTtcclxuICAgICAgICAvLyBhbGVydChgWW91IGJvdWdodCAke3Jlc291cmNlfSBmb3IgJHtwcmljZS50b0ZpeGVkKDIpfSBnb2xkIWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBhbGVydChcIllvdSBkb24ndCBoYXZlIGVub3VnaCBnb2xkIVwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2VsbFJlc291cmNlKHJlc291cmNlLCBwcmljZSkge1xyXG4gICAgaWYgKGdldE1hdGVyaWFsKHJlc291cmNlLCByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJykucmVzb3VyY2VzKSA+PSAxKSB7XHJcblxyXG4gICAgICAgIHJlcXVpcmUoJy4vcmVzb3VyY2VzJykuaW5jcmVhc2VNYXRlcmlhbCgnZ29sZCcsIHByaWNlKTtcclxuICAgICAgICByZXF1aXJlKCcuL3Jlc291cmNlcycpLmluY3JlYXNlTWF0ZXJpYWwocmVzb3VyY2UsIC0xKTtcclxuICAgICAgICBnb2xkQW1vdW50RWwudGV4dENvbnRlbnQgPSBnZXRNYXRlcmlhbCgnZ29sZCcsIHJlcXVpcmUoJy4vanNvbi9yZXNvdXJjZXMnKS5yZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gYWxlcnQoYFlvdSBzb2xkICR7cmVzb3VyY2V9IGZvciAke3ByaWNlLnRvRml4ZWQoMil9IGdvbGQhYCk7XHJcbn0iLCJmdW5jdGlvbiB0cmlnZ2VyRmxvYXRVcFRleHQoeCwgeSwgdGV4dCwgY29sb3IpIHtcclxuICAgIGNvbnN0IGZsb2F0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZmxvYXRUZXh0LnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS5sZWZ0ID0gYCR7eH1weGA7XHJcbiAgICBmbG9hdFRleHQuc3R5bGUudG9wID0gYCR7eSAtIDMwfXB4YDtcclxuICAgIGZsb2F0VGV4dC5zdHlsZS5jb2xvciA9IGNvbG9yO1xyXG4gICAgZmxvYXRUZXh0LmNsYXNzTGlzdC5hZGQoJ2Zsb2F0LXVwLWZhZGUtb3V0Jyk7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmbG9hdFRleHQpO1xyXG5cclxuICAgIC8vIFJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBET00gYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcclxuICAgIGZsb2F0VGV4dC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgZmxvYXRUZXh0LnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy50cmlnZ2VyRmxvYXRVcFRleHQgPSB0cmlnZ2VyRmxvYXRVcFRleHQ7XHJcbiIsImNvbnN0IHsgZ2V0TWF0ZXJpYWwgfSA9IHJlcXVpcmUoXCIuL2dldE1hdGVyaWFsXCIpO1xyXG5jb25zdCB7IGdldE1heCB9ID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlQm91bmNlQW5pbWF0aW9uKCkge1xyXG4gICAgY29uc3QgYWxvbmVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fsb25lJyk7XHJcblxyXG4gICAgaWYgKGdldE1hdGVyaWFsKCdjbG9uZXMnKSA8IGdldE1heCgnY2xvbmVzJykpIHtcclxuICAgICAgICAvLyBBcHBseSB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgYWxvbmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2JvdW5jaW5nJyk7XHJcblxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgcGx1cyBhbiBhZGRpdGlvbmFsIGRlbGF5LCB0aGVuIGNoZWNrIHRoZSBjb25kaXRpb24gYWdhaW5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBhbmltYXRpb24gY2xhc3MgdG8gcmVzZXRcclxuICAgICAgICAgICAgYWxvbmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JvdW5jaW5nJyk7XHJcbiAgICAgICAgICAgIHZvaWQgYWxvbmVFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgLy8gUmVjdXJzaXZlIGNhbGwgdG8gcmUtY2hlY2sgdGhlIGNvbmRpdGlvbiBhbmQgcG90ZW50aWFsbHkgcmVhcHBseSB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIHVwZGF0ZUJvdW5jZUFuaW1hdGlvbigpO1xyXG4gICAgICAgIH0sIDExMDAwKTsgLy8gV2FpdCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24gKDFzKSArIGRlbGF5ICgxMHMpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgYW5pbWF0aW9uIGNsYXNzIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldFxyXG4gICAgICAgIGFsb25lRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdib3VuY2luZycpO1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnRzLnVwZGF0ZUJvdW5jZUFuaW1hdGlvbiA9IHVwZGF0ZUJvdW5jZUFuaW1hdGlvbjsiLCJjb25zdCB7IGNhcGl0YWxpemVGaXJzdCB9ID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplRmlyc3QnKTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQoYnVpbGRpbmdOYW1lLCBidWlsZGluZ0NvdW50LCBlbW9qaSkge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7YnVpbGRpbmdOYW1lfWApLnRleHRDb250ZW50ID0gYCR7ZW1vaml9ICR7Y2FwaXRhbGl6ZUZpcnN0KGJ1aWxkaW5nTmFtZSkuc3BsaXQoJ18nKS5qb2luKCcgJyl9ICgke2J1aWxkaW5nQ291bnR9KWA7XHJcblxyXG59XHJcbmV4cG9ydHMudXBkYXRlQnVpbGRpbmdCdXR0b25Db3VudCA9IHVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQ7IiwiY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyB1cGRhdGVUb29sdGlwLCBoaWRlVG9vbHRpcCB9ID0gcmVxdWlyZSgnLi91cGRhdGVUb29sdGlwJyk7XHJcbmNvbnN0IHsgZml0Q2hhclRvQ2VsbCB9ID0gcmVxdWlyZSgnLi9maXRDaGFyVG9DZWxsJyk7XHJcblxyXG5jb25zdCBidWlsZGluZ0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVpbGRpbmdMaXN0Jyk7XHJcbi8vIGZ1bmN0aW9uIHVwZGF0ZUJ1aWxkaW5nTGlzdCgpIHtcclxuLy8gICAgIGJ1aWxkaW5nTGlzdC5pbm5lckhUTUwgPSAnJztcclxuLy8gICAgIGxldCBpID0gMDtcclxuLy8gICAgIGNvbnN0IGdyaWRTaXplID0gNjtcclxuLy8gICAgIGNvbnN0IG1heENlbGxXaWR0aCA9IDM2O1xyXG4vLyAgICAgY29uc3QgbWF4Q2VsbEhlaWdodCA9IDQ4O1xyXG4vLyAgICAgY29uc3QgaW5pdGlhbEZvbnRTaXplID0gMzY7IC8vIHN0YXJ0aW5nIGZvbnQgc2l6ZVxyXG5cclxuLy8gICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhidWlsZGluZ3MpKSB7XHJcbi8vICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWwuY291bnQ7ICsraiwgKytpKSB7XHJcbi8vICAgICAgICAgICAgIGxldCBjb2wgPSAoaSAlIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuLy8gICAgICAgICAgICAgbGV0IHJvdyA9IE1hdGguZmxvb3IoaSAvIGdyaWRTaXplICsgMSkudG9TdHJpbmcoKTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYmVzdCBmb250IHNpemUgZm9yIHRoaXMgY2hhcmFjdGVyXHJcbi8vICAgICAgICAgICAgIC8vIGNvbnN0IGZvbnRTaXplID0gZml0Q2hhclRvQ2VsbCh2YWwuZW1vamkgfHwgJz8nLCBtYXhDZWxsV2lkdGgsIG1heENlbGxIZWlnaHQsIGluaXRpYWxGb250U2l6ZSk7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBBZGQgdGhlIHNwYW4gd2l0aCB0aGUgY2FsY3VsYXRlZCBmb250IHNpemVcclxuLy8gICAgICAgICAgICAgLy8gYWRkVG9CdWlsZGluZ0xpc3QoY29sLCByb3csIGluaXRpYWxGb250U2l6ZSwga2V5LCB2YWwuZW1vamkpO1xyXG4vLyAgICAgICAgICAgICBidWlsZGluZ0xpc3QuaW5uZXJIVE1MICs9IGA8c3BhbiBjbGFzcyA9ICd0b29sdGlwJyBzdHlsZT0nZ3JpZC1jb2x1bW46JHtjb2x9OyBncmlkLXJvdzoke3Jvd307IGZvbnQtc2l6ZToke2luaXRpYWxGb250U2l6ZX1weCcgdG9vbHRpcERlc2M9JyR7a2V5fSc+JHt2YWwuZW1vamkgfHwgJz8nfTwvc3Bhbj5gO1xyXG5cclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vICAgICBidWlsZGluZ0xpc3QucXVlcnlTZWxlY3RvckFsbCgnc3Bhbi50b29sdGlwJykuZm9yRWFjaCgoc3BhbikgPT4ge1xyXG4vLyAgICAgICAgIHNwYW4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcclxuLy8gICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChzcGFuKTtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgICAgICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcbi8vICAgICAgICAgICAgIGhpZGVUb29sdGlwKCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9KTtcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlQnVpbGRpbmdMaXN0KCkge1xyXG4gICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBjb25zdCBncmlkU2l6ZSA9IDY7XHJcbiAgICBjb25zdCBpbml0aWFsRm9udFNpemUgPSAzNjsgLy8gU3RhcnRpbmcgZm9udCBzaXplXHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5ncykpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbC5jb3VudDsgKytqLCArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGNvbCA9IChpICUgZ3JpZFNpemUgKyAxKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBsZXQgcm93ID0gTWF0aC5mbG9vcihpIC8gZ3JpZFNpemUgKyAxKS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgc3Bhbi5jbGFzc05hbWUgPSAndG9vbHRpcCc7XHJcbiAgICAgICAgICAgIHNwYW4uc3R5bGUuZ3JpZENvbHVtbiA9IGNvbDtcclxuICAgICAgICAgICAgc3Bhbi5zdHlsZS5ncmlkUm93ID0gcm93O1xyXG4gICAgICAgICAgICBzcGFuLnN0eWxlLmZvbnRTaXplID0gYCR7aW5pdGlhbEZvbnRTaXplfXB4YDtcclxuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBEZXNjJywga2V5KTtcclxuICAgICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHZhbC5lbW9qaSB8fCAnPyc7XHJcblxyXG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChzcGFuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xlYXIgdGhlIGV4aXN0aW5nIGNvbnRlbnQgYW5kIGFwcGVuZCB0aGUgbmV3IGNvbnRlbnRcclxuICAgIGJ1aWxkaW5nTGlzdC5pbm5lckhUTUwgPSAnJztcclxuICAgIGJ1aWxkaW5nTGlzdC5hcHBlbmRDaGlsZChmcmFnbWVudCk7XHJcblxyXG4gICAgLy8gRXZlbnQgZGVsZWdhdGlvbiBmb3IgdG9vbHRpcHNcclxuICAgIGJ1aWxkaW5nTGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rvb2x0aXAnKSkge1xyXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgYnVpbGRpbmdMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndG9vbHRpcCcpKSB7XHJcbiAgICAgICAgICAgIGhpZGVUb29sdGlwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdHJ1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydHMudXBkYXRlQnVpbGRpbmdMaXN0ID0gdXBkYXRlQnVpbGRpbmdMaXN0O1xyXG5cclxuXHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGJ1aWxkaW5nXHJcbiAqL1xyXG4vLyBmdW5jdGlvbiBhZGRUb0J1aWxkaW5nTGlzdChrZXksIGVtb2ppKSB7XHJcbi8vICAgICBidWlsZGluZ0xpc3QuaW5uZXJIVE1MICs9IGA8c3BhbiBjbGFzcyA9ICd0b29sdGlwJyBzdHlsZT0nZ3JpZC1jb2x1bW46JHtjb2x9OyBncmlkLXJvdzoke3Jvd307IGZvbnQtc2l6ZToke2ZvbnRzaXplfXB4JyB0b29sdGlwRGVzYz0nJHtrZXl9Jz4ke2Vtb2ppIHx8ICc/J308L3NwYW4+YDtcclxuXHJcbi8vIH1cclxuLy8gZXhwb3J0cy5hZGRUb0J1aWxkaW5nTGlzdCA9IGFkZFRvQnVpbGRpbmdMaXN0OyIsImNvbnN0IHsgYnV0dG9ucyB9ID0gcmVxdWlyZSgnLi9qc29uL2J1dHRvbnMnKTtcclxuY29uc3QgeyBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkIH0gPSByZXF1aXJlKCcuL2pzb24vY3JhZnRlZFJlc291cmNlcycpO1xyXG5jb25zdCB7IGdldEJ1aWxkaW5nQ291bnQgfSA9IHJlcXVpcmUoJy4vanNvbi9idWlsZGluZ3MnKTtcclxuY29uc3QgeyBpc1BvbmRlcmVkLCBjYW5VbmxvY2sgfSA9IHJlcXVpcmUoJy4vcG9uZGVyJyk7XHJcbmNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWcgfSA9IHJlcXVpcmUoXCIuL2pzb24vY3JhZnRlZFJlc291cmNlc1wiKTtcclxuY29uc3QgeyBpc0J1dHRvbklkVmlzaWJsZSwgc2V0VmlzaWJsZUJ1dHRvbiB9ID0gcmVxdWlyZSgnLi9oZWxwZXInKTtcclxuY29uc3QgeyBjYW5DcmFmdCB9ID0gcmVxdWlyZSgnLi9jYW5DcmFmdCcpO1xyXG5jb25zdCB7IGNhbkJ1eUJ1aWxkaW5nIH0gPSByZXF1aXJlKCcuL2NhbkJ1eUJ1aWxkaW5nJyk7XHJcbmNvbnN0IHsgcGFzc2VkU3RhZ2UgfSA9IHJlcXVpcmUoJy4vc3RhZ2VzJyk7XHJcbi8qKlxyXG4gKiBDaGFuZ2VzIHRoZSBzdGF0ZXMgb2YgYnV0dG9ucyBiZXR3ZWVuICdoaWRkZW4nLCAncHVyY2hhc2FibGUnLCBhbmQgJ2J1dHRvbi1kaXNhYmxlZCdcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUJ1dHRvblZpc2liaWxpdHkoKSB7XHJcbiAgICBjb25zdCBzZWxlY3RCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJyk7IC8vIEFkanVzdCB0aGUgc2VsZWN0b3IgYWNjb3JkaW5nbHlcclxuXHJcbiAgICBzZWxlY3RCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICBjb25zdCBidXR0b25Db25maWcgPSBidXR0b25zW2J1dHRvbi5pZF07IC8qIGdldCB0aGUgYnV0dG9uJ3MgY29uZmlndXJhdGlvbiB1c2luZyBpdHMgZGF0YSBhdHRyaWJ1dGUgb3IgSUQsIGV0Yy4gKi87XHJcbiAgICAgICAgaWYgKCFidXR0b25Db25maWcpIHsgLypjb25zb2xlLndhcm4oJ25vIGJ1dHRvbiBjb25maWcgZm91bmQgZm9yJywgYnV0dG9uLCBidXR0b24uaWQpOyAqL3JldHVybjsgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nLCBidXR0b25Db25maWcucmVxdWlyZW1lbnQpO1xyXG4gICAgICAgIC8vIFJlc2V0IGFsbCBzdGF0ZXMgZmlyc3RcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgJ2J1dHRvbi1kaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICB2YXIgc3RhdGUgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgaWYgKGJ1dHRvbi5pZCAmJiBpc0J1dHRvbklkVmlzaWJsZShidXR0b24uaWQpKSBzdGF0ZSA9ICdidXR0b24tZGlzYWJsZWQnO1xyXG5cclxuICAgICAgICAvLyBJZiByZXF1aXJlbWVudCBpcyBtZXQsIGl0IHNob3VsZCBiZSB2aXNpYmxlXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gbGV0IGdldE1hdGVyaWFsID0gcmVxdWlyZSgnLi9nZXRNYXRlcmlhbCcpLmdldE1hdGVyaWFsO1xyXG4gICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnJlcXVpcmVtZW50ICYmIGJ1dHRvbkNvbmZpZy5yZXF1aXJlbWVudCgpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICdidXR0b24tZGlzYWJsZWQnO1xyXG4gICAgICAgICAgICAgICAgLy8gYWx3YXlzIHB1cmNoYXNhYmxlIGdhdGhlciBidXR0b25zXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uQ29uZmlnLnRhYiAmJiAhYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiID09PSAncHJvZHVjdGlvbicpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwb25kZXIgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmlkICYmIGJ1dHRvbi5pZCA9PT0gJ2dhdGhlclBvbmRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcG9uZGVyIHVubG9ja3NcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiICYmIGJ1dHRvbkNvbmZpZy50YWIgPT09ICdwb25kZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uLmNsYXNzTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZCAmJiBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd1bmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuVW5sb2NrKGJ1dHRvbi5pZCkpIHN0YXRlID0gJ3B1cmNoYXNhYmxlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBwb25kZXIgYnV0dG9uIGlzIHVubG9ja2VkLCBoaWRlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BvbmRlcmVkKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3VubG9jaycpKSkgc3RhdGUgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uLCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRhYiBidXR0b25zIGFsd2F5cyBlaXRoZXIgaGlkZGVuIG9yIGVuYWJsZWRcclxuICAgICAgICAgICAgICAgIGlmIChidXR0b25Db25maWcudGFiICYmIGJ1dHRvbkNvbmZpZy50YWIgPT09ICd0YWJzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gJ3Zpc2libGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignRXJyb3Igd2l0aCBjaGVja2luZyByZXF1aXJlbWVudCBvZiBidXR0b246ICcsIGJ1dHRvbkNvbmZpZywgZXJyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChidXR0b25Db25maWcuaWQgJiYgYnV0dG9uQ29uZmlnLmlkLnNsaWNlKDAsIDUpID09PSAnY3JhZnQnKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmVuJ3QgdW5sb2NrZWQgdGhlIGJ1dHRvbiwgbmV2ZXIgZGlzcGxheSBpdFxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSk7XHJcbiAgICAgICAgICAgIC8vIGlmIChidXR0b25Db25maWcucmVxdWlyZWRTdGFnZSAmJiAhcGFzc2VkU3RhZ2UoYnV0dG9uQ29uZmlnLnJlcXVpcmVkU3RhZ2UpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBzdGF0ZSA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBuZXZlciBoaWRlIHRoaXMgYnV0dG9uIG9uY2UgaXRzIGJlZW4gdW5sb2NrZWRcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbkNvbmZpZy5jcmFmdGVkT25jZSkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgY3JhZnRlZCA9IGdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQoYnV0dG9uQ29uZmlnLmlkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3JhZnRlZCk7XHJcbiAgICAgICAgICAgIGlmIChjcmFmdGVkLnZhbHVlID4gMCkgc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHdlIGNhbiBhZmZvcmQgdGhpcyBjcmFmdCwgaXQgc2hvdWxkIGJlIHB1cmNoYXNhYmxlXHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldENyYWZ0ZWRSZXNvdXJjZUtleUJ5Q29uZmlnKGNyYWZ0ZWQpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXkpO1xyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgaWYgKGNhbkNyYWZ0KGtleSkpXHJcbiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlIHx8IGJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlICYmIHBhc3NlZFN0YWdlKGJ1dHRvbkNvbmZpZy5yZXF1aXJlZFN0YWdlKSkgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBzdGF0ZSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgd2UgY2FuIGFmZm9yZCB0aGlzIGJ1aWxkaW5nLCBpdCBzaG91bGQgYmUgcHVyY2hhc2FibGVcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhidXR0b25Db25maWcpO1xyXG4gICAgICAgIGlmIChidXR0b25Db25maWcuZGF0YV9idWlsZGluZykge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHB1cmNoYXNlZCBhIGJ1aWxkaW5nLCBpdCBzaG91bGQgYmUgdmlzaWJsZVxyXG4gICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgc3RhdGUgPSBnZXRCdWlsZGluZ0NvdW50KGJ1dHRvbkNvbmZpZy5kYXRhX2J1aWxkaW5nKSA/ICdidXR0b24tZGlzYWJsZWQnIDogc3RhdGU7XHJcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGJ1aWxkaW5nIGNvc3RcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYnV0dG9uQ29uZmlnKTtcclxuICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgIHN0YXRlID0gY2FuQnV5QnVpbGRpbmcoYnV0dG9uQ29uZmlnLmRhdGFfYnVpbGRpbmcpID8gJ3B1cmNoYXNhYmxlJyA6IHN0YXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgaGlkZGVuIGlzIG1ldCwgaXQgc2hvdWxkIGJlIGhpZGRlblxyXG4gICAgICAgIGlmIChidXR0b25Db25maWcuaGlkZSkge1xyXG4gICAgICAgICAgICBzdGF0ZSA9IGJ1dHRvbkNvbmZpZy5oaWRlKCkgPyAnaGlkZGVuJyA6IHN0YXRlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgY3VycmVudCBzdGF0ZVxyXG4gICAgICAgIGlmIChzdGF0ZSAhPT0gJycpIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKHN0YXRlKTtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdC1wdXJjaGFzYWJsZSwgZGlzYWJsZSB0aGUgYnV0dG9uXHJcbiAgICAgICAgLy8gYnV0dG9uLmRpc2FibGVkID0gc3RhdGUgPT09ICdidXR0b24tZGlzYWJsZWQnO1xyXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdG9vbHRpcCBmb3IgdGhpcyBidXR0b24gaWYgaXRzIGFjdGl2ZVxyXG4gICAgICAgIC8vIGlmIChidXR0b24gPT09IGN1cnJlbnRIb3ZlckJ1dHRvbikgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBoaWRkZW4sIHNldCB0aGUgYnV0dG9uJ3MgZGlzcGxheSB0byBub25lXHJcbiAgICAgICAgaWYgKHN0YXRlID09PSAnaGlkZGVuJykge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnaGlkaW5nJywgYnV0dG9uKTtcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FsbCB2aXNpYmxlICcsIGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIHNldFZpc2libGVCdXR0b24oYnV0dG9uLmlkKTtcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gVGhpcyB3aWxsIHJldmVydCBpdCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBkaXNwbGF5IHN0YXRlIG9yIGRlZmF1bHQgKGUuZy4sICdibG9jaycgb3IgJ2lubGluZS1ibG9jaycpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpvYi1idXR0b24nKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgY29uc3Qgam9iID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1qb2InKTtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJywgJ3B1cmNoYXNhYmxlJywgJ2J1dHRvbi1kaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICB2YXIgc3RhdGUgPSAncHVyY2hhc2FibGUnO1xyXG4gICAgICAgIGNvbnN0IHJlcVBvbmRlciA9IChyZXF1aXJlKCcuL2pvYlJlcXVpcmVkUG9uZGVycycpLmpvYlJlcXVpcmVkUG9uZGVycylbam9iXTtcclxuICAgICAgICBpZiAocmVxUG9uZGVyID09PSBudWxsIHx8IHJlcVBvbmRlciA9PT0gdW5kZWZpbmVkKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgZWxzZSBpZiAoaXNQb25kZXJlZChyZXFQb25kZXIpKSBzdGF0ZSA9ICdwdXJjaGFzYWJsZSc7XHJcbiAgICAgICAgZWxzZSBpZiAocmVxUG9uZGVyID09PSAnbm90LXVubG9ja2FibGUnKSBzdGF0ZSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIGVsc2Ugc3RhdGUgPSAnYnV0dG9uLWRpc2FibGVkJztcclxuXHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGpvYiwgYnV0dG9uLCByZXFQb25kZXIsIHN0YXRlKTtcclxuICAgICAgICAvLyBidXR0b24uY2xhc3NMaXN0LlxyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGwgdmlzaWJsZSAnLCBidXR0b24uaWQpO1xyXG4gICAgICAgICAgICBzZXRWaXNpYmxlQnV0dG9uKGJ1dHRvbi5pZCk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKHN0YXRlKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9ICcnOyAvLyBUaGlzIHdpbGwgcmV2ZXJ0IGl0IGJhY2sgdG8gaXRzIG9yaWdpbmFsIGRpc3BsYXkgc3RhdGUgb3IgZGVmYXVsdCAoZS5nLiwgJ2Jsb2NrJyBvciAnaW5saW5lLWJsb2NrJylcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnVwZGF0ZUJ1dHRvblZpc2liaWxpdHkgPSB1cGRhdGVCdXR0b25WaXNpYmlsaXR5OyIsImNvbnN0IHsgZ2V0Q3JhZnRlZFJlc291cmNlQ29uZmlnQnlJZCB9ID0gcmVxdWlyZSgnLi9qc29uL2NyYWZ0ZWRSZXNvdXJjZXMnKTtcclxuY29uc3QgeyBidWlsZGluZ3MgfSA9IHJlcXVpcmUoXCIuL2pzb24vYnVpbGRpbmdzXCIpO1xyXG5jb25zdCB7IHBvbmRlcnMgfSA9IHJlcXVpcmUoXCIuL2pzb24vcG9uZGVyXCIpO1xyXG5jb25zdCB7IHJlc291cmNlcywgZ2V0UmVzb3VyY2VDb25maWdCeUlkIH0gPSByZXF1aXJlKCcuL2pzb24vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgY2FsY1NlY29uZHNSZW1haW5pbmcgfSA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzJyk7XHJcbmNvbnN0IHsgZ2V0TWF4IH0gPSByZXF1aXJlKCcuL2hlbHBlcicpO1xyXG5jb25zdCB7IGdldE1hdGVyaWFsIH0gPSByZXF1aXJlKCcuL2dldE1hdGVyaWFsJyk7XHJcblxyXG5jb25zdCB0b29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R5bmFtaWMtdG9vbHRpcCcpO1xyXG5mdW5jdGlvbiBzaG93VG9vbHRpcCh0YXJnZXQsIGRlc2MsIGVmZmVjdCwgY29zdCkge1xyXG4gICAgbGV0IGNvbnRlbnQgPSAnJztcclxuXHJcbiAgICBpZiAoZGVzYykge1xyXG4gICAgICAgIGNvbnRlbnQgKz0gYDxzcGFuID4ke2Rlc2N9PC9zcGFuPjxocj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlZmZlY3QpIHtcclxuICAgICAgICBjb250ZW50ICs9IGA8c3BhbiBzdHlsZT1cImNvbG9yOiM0Y2ZcIj4ke2VmZmVjdH08L3NwYW4+PGhyPmA7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvY2Vzc01hdGVyaWFscyhodG1sU3RyaW5nLCByZXNvdXJjZXMpIHtcclxuICAgICAgICAvLyBSZWd1bGFyIGV4cHJlc3Npb24gdG8gZXh0cmFjdCBtYXRlcmlhbCBhbmQgYW1vdW50XHJcbiAgICAgICAgY29uc3QgcmVnZXggPSAvY2xhc3M9XCJ0b29sdGlwLShcXHcrKSAuKz9cIj4oW1xcZC5dK1tLTV0/KVxccyhcXHcrKTwvZztcclxuICAgICAgICBsZXQgbWF0Y2g7XHJcbiAgICAgICAgbGV0IHByb2Nlc3NlZFN0cmluZyA9ICcnO1xyXG5cclxuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhodG1sU3RyaW5nKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBtYXRjaFsxXTtcclxuICAgICAgICAgICAgY29uc3QgYW1vdW50VGV4dCA9IG1hdGNoWzJdO1xyXG4gICAgICAgICAgICBjb25zdCBhbW91bnQgPSBwYXJzZUFtb3VudChhbW91bnRUZXh0KTsgLy8gQ29udmVydCAnMTIxSycgdG8gMTIxMDAwLCBmb3IgZXhhbXBsZVxyXG5cclxuICAgICAgICAgICAgLy8gUGVyZm9ybSB5b3VyIGxvZ2ljIGhlcmVcclxuICAgICAgICAgICAgY29uc3QgaGFzRW5vdWdoID0gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPj0gYW1vdW50O1xyXG4gICAgICAgICAgICB2YXIgY29sb3JDbGFzcyA9IGhhc0Vub3VnaCA/ICdlbm91Z2gnIDogJ25vdC1lbm91Z2gnO1xyXG4gICAgICAgICAgICBpZiAoZ2V0TWF4KG1hdGVyaWFsKSA8IGFtb3VudCkgY29sb3JDbGFzcyA9ICdleGNlZWRzLW1heCc7XHJcblxyXG4gICAgICAgICAgICBwcm9jZXNzZWRTdHJpbmcgKz0gYDxzcGFuIGNsYXNzPVwidG9vbHRpcC0ke21hdGVyaWFsfSAke2NvbG9yQ2xhc3N9XCI+JHthbW91bnRUZXh0fSAke21hdGVyaWFsfTwvc3Bhbj5gO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlY29uZHNSZW1haW5pbmcgPSAwO1xyXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzW21hdGVyaWFsXSkgc2Vjb25kc1JlbWFpbmluZyA9IGNhbGNTZWNvbmRzUmVtYWluaW5nKG1hdGVyaWFsLCBhbW91bnQpO1xyXG4gICAgICAgICAgICBpZiAoc2Vjb25kc1JlbWFpbmluZyA+IDAgJiYgY29sb3JDbGFzcyAhPSAnZXhjZWVkcy1tYXgnKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRTdHJpbmcgKz0gYDxzcGFuIGNsYXNzPVwidGltZS1yZW1haW5pbmdcIj4oJHtzZWNvbmRzUmVtYWluaW5nLnRvRml4ZWQoMCl9IHNlY29uZHMpPC9zcGFuPmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvY2Vzc2VkU3RyaW5nICs9IGA8YnI+YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwcm9jZXNzZWRTdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHBhcnNlIGFtb3VudHMgbGlrZSAnMTIxSycgaW50byBudW1iZXJzXHJcbiAgICBmdW5jdGlvbiBwYXJzZUFtb3VudChhbW91bnRUZXh0KSB7XHJcbiAgICAgICAgbGV0IGFtb3VudCA9IHBhcnNlRmxvYXQoYW1vdW50VGV4dCk7XHJcbiAgICAgICAgaWYgKGFtb3VudFRleHQuaW5jbHVkZXMoJ0snKSkge1xyXG4gICAgICAgICAgICBhbW91bnQgKj0gMWUzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYW1vdW50VGV4dC5pbmNsdWRlcygnTScpKSB7XHJcbiAgICAgICAgICAgIGFtb3VudCAqPSAxZTY7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhbW91bnRUZXh0LmluY2x1ZGVzKCdCJykpIHtcclxuICAgICAgICAgICAgYW1vdW50ICo9IDFlOTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFtb3VudDtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjb3N0IG9mIHRvb2x0aXA6JywgY29zdCk7XHJcbiAgICAgICAgaWYgKGNvc3QudG9TdHJpbmcoKS5pbmNsdWRlcygnc3BhbicpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnRlbnQgKz0gYDxzcGFuIHN0eWxlPVwiY29sb3I6I0Y0RDAzRlwiPiR7Y29zdH08L3NwYW4+PGJyPmA7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdydW5uaW5nIHByb2NtYXQgZm9yICcsIGNvc3QpO1xyXG4gICAgICAgICAgICBjb250ZW50ICs9IHByb2Nlc3NNYXRlcmlhbHMoY29zdCwgcmVzb3VyY2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSAnJztcclxuICAgICAgICAgICAgZm9yIChjb25zdCBbbWF0ZXJpYWwsIGFtb3VudF0gb2YgT2JqZWN0LmVudHJpZXMoY29zdCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IG1hdGVyaWFsID0gcmVxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzRW5vdWdoID0gZ2V0TWF0ZXJpYWwobWF0ZXJpYWwsIHJlc291cmNlcykgPj0gYW1vdW50OyAvKiBZb3VyIGxvZ2ljIHRvIGNoZWNrIGlmIHRoZXJlJ3MgZW5vdWdoIG9mIHRoZSBtYXRlcmlhbCAqLy8qIFlvdXIgbG9naWMgdG8gY2hlY2sgaWYgdGhlcmUncyBlbm91Z2ggb2YgdGhlIG1hdGVyaWFsICovO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yQ2xhc3MgPSBoYXNFbm91Z2ggPyAnZW5vdWdoJyA6ICdub3QtZW5vdWdoJztcclxuICAgICAgICAgICAgICAgIGlmIChnZXRNYXgobWF0ZXJpYWwpIDwgYW1vdW50KSBjb2xvckNsYXNzID0gJ2V4Y2VlZHMtbWF4JztcclxuICAgICAgICAgICAgICAgIHN0ciArPSBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLSR7bWF0ZXJpYWx9ICR7Y29sb3JDbGFzc31cIj4ke2Ftb3VudC50b0ZpeGVkKDApfSAke21hdGVyaWFsfTwvc3Bhbj5gO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzZWNvbmRzUmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbbWF0ZXJpYWxdKSBzZWNvbmRzUmVtYWluaW5nID0gY2FsY1NlY29uZHNSZW1haW5pbmcobWF0ZXJpYWwsIGFtb3VudCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZWNvbmRzUmVtYWluaW5nKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWNvbmRzUmVtYWluaW5nID4gMCAmJiBjb2xvckNsYXNzICE9ICdleGNlZWRzLW1heCcpIHsgc3RyICs9IGA8c3BhbiBjbGFzcz1cInRpbWUtcmVtYWluaW5nXCI+KCR7KHNlY29uZHNSZW1haW5pbmcpLnRvRml4ZWQoMCl9IHNlY29uZHMpPC9zcGFuPmA7IH1cclxuICAgICAgICAgICAgICAgIHN0ciArPSBgPGJyPmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGVudCArPSBzdHI7XHJcblxyXG5cclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGlmIChjb3N0ICE9PSB1bmRlZmluZWQgJiYgY29zdCAhPT0gJ3VuZGVmaW5lZCcpIGNvbnRlbnQgKz0gY29zdDtcclxuICAgICAgICAvLyBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgbWFrZSBub3JtYWwgY29zdCBmb3IgYnV0dG9uOiBcIiwgdGFyZ2V0LCBjb3N0LCBlcnJvcik7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyh0YXJnZXQsIGNvbnRlbnQpO1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdG9vbHRpcC5pbm5lckhUTUwgPSBjb250ZW50O1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdG9vbHRpcC5zdHlsZS5sZWZ0ID0gKHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCArIDUpICsgJ3B4JztcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUudG9wID0gKHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB0b29sdGlwLm9mZnNldEhlaWdodCAvIDIpICsgJ3B4JztcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVUb29sdGlwKCkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgdG9vbHRpcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG59XHJcbmV4cG9ydHMuaGlkZVRvb2x0aXAgPSBoaWRlVG9vbHRpcDtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRvb2x0aXAoYnV0dG9uKSB7XHJcbiAgICBjb25zdCBkZXNjID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWRlc2MnKSB8fCBidXR0b24uZ2V0QXR0cmlidXRlKCd0b29sdGlwRGVzYycpO1xyXG4gICAgY29uc3QgZWZmZWN0ID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWVmZmVjdCcpO1xyXG4gICAgLy8gY29uc3QgY29zdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1jb3N0Jyk7XHJcbiAgICBjb25zdCBjb25maWcgPSBnZXRSZXNvdXJjZUNvbmZpZ0J5SWQoYnV0dG9uLmlkKSB8fCBnZXRDcmFmdGVkUmVzb3VyY2VDb25maWdCeUlkKGJ1dHRvbi5pZCkgfHwgYnVpbGRpbmdzW2J1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGFfYnVpbGRpbmcnKV0gfHwgcG9uZGVyc1tidXR0b24uZ2V0QXR0cmlidXRlKCd1bmxvY2snKV07XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjb25maWcpO1xyXG4gICAgY29uc3QgY29zdCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3Rvb2x0aXBDb3N0JykgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwLWNvc3QnKSB8fCAoY29uZmlnICYmIGNvbmZpZy5jb3N0KTtcclxuICAgIHNob3dUb29sdGlwKGJ1dHRvbiwgZGVzYywgZWZmZWN0LCBjb3N0KTtcclxufVxyXG5leHBvcnRzLnVwZGF0ZVRvb2x0aXAgPSB1cGRhdGVUb29sdGlwO1xyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwOCk7XG4iXSwibmFtZXMiOlsiYXRlRmlzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXRBdGVGaXNoIiwiYm9vbCIsImdldEF0ZUZpc2giLCJtdXNpY1ZvbHVtZSIsInNmeFZvbHVtZSIsInNldE11c2ljVm9sdW1lIiwidm9sIiwiZ2V0TXVzaWNWb2x1bWUiLCJzZXRTZnhWb2x1bWUiLCJnZXRTZnhWb2x1bWUiLCJidWlsZGluZ3MiLCJpc1BvcEJ1aWxkaW5nIiwiaW5jcmVhc2VNYXRlcmlhbCIsImluY3JlYXNlTWF4IiwidXBkYXRlVG90YWwiLCJoYXNQZXJrIiwiZ2V0TWF0ZXJpYWwiLCJwYXNzZWRTdGFnZSIsInJlY2FsY01heENsb25lcyIsInVwZGF0ZUJ1aWxkaW5nQnV0dG9uQ291bnQiLCJyZWNhbGN1bGF0ZUJ1aWxkaW5nQ29zdCIsImNhbkJ1eUJ1aWxkaW5nIiwiaXNQb25kZXJlZCIsInVwZGF0ZUJ1aWxkaW5nTGlzdCIsImNhcGl0YWxpemVGaXJzdCIsImJ1eUJ1aWxkaW5nIiwiYnVpbGRpbmdOYW1lIiwiY29uc29sZSIsImxvZyIsImJ1aWxkaW5nIiwiY291bnQiLCJyZXNvdXJjZSIsImNvc3QiLCJhbW91bnQiLCJPYmplY3QiLCJlbnRyaWVzIiwiZWZmZWN0cyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImVtb2ppIiwiZ2VuZXJhdGVCdWlsZGluZ1Rvb2x0aXBDb3N0IiwibWFwIiwibWF0ZXJpYWwiLCJ0b0ZpeGVkIiwiam9pbiIsImNyZWF0ZUJ1aWxkaW5nQnV0dG9uIiwiYnVpbGRpbmdLZXkiLCJiYXNlY29zdCIsImNvc3RzIiwicmVxdWlyZW1lbnRGdW5jdGlvbiIsImNvc3RDb25kaXRpb24iLCJldmVyeSIsIk1hdGgiLCJmbG9vciIsImNyZWF0ZVJlcXVpcmVtZW50RnVuY3Rpb24iLCJ0b29sdGlwRGVzYyIsImVycm9yIiwiYnV5TWF4QnVpbGRpbmdzIiwiaSIsImdlbmVyYXRlRWZmZWN0U3RyaW5nIiwiZWZmZWN0UGFydHMiLCJ2YWx1ZSIsInB1c2giLCJib29zdCIsInBlcmNlbnRhZ2VCb29zdCIsInJvdW5kIiwicmVzb3VyY2VzIiwiY3JhZnRlZFJlc291cmNlcyIsInNraWxscyIsImdldFdvcmtlcnMiLCJnZXRGYWN0b3J5UHJvZHVjdGlvbiIsImhhc1ByZXN0aWdlIiwiZ2V0TGV2ZWxPZlByZXN0aWdlIiwiaGFzVG9vbCIsInBlcmtCb29zdHMiLCJza2lsbEJvb3N0cyIsInJlc291cmNlVG9vbE1hcCIsImNhbGNJbmNyZWFzZSIsInJlc291cmNlTmFtZSIsImRlbHRhX3RpbWUiLCJ0b3RhbCIsImhhc093blByb3BlcnR5IiwiaXNHZXR0aW5nIiwicGVyayIsImluY2x1ZGVzIiwiYXBwbHlQZXJrQm9vc3QiLCJjbG9uZU11bHQiLCJza2lsbCIsImJvb3N0cyIsImFmZmVjdGVkUmVzb3VyY2VzIiwiZm9yRWFjaCIsInNraWxsUmF0aW8iLCJtdWx0IiwicG93IiwibGV2ZWwiLCJhcHBseVNraWxsQm9vc3QiLCJrZXlzIiwiYm9vc3REYXRhIiwiaW5jcmVhc2UiLCJ0b29sTmFtZSIsImxvZzEwIiwiYXBwbHlUb29sQm9vc3QiLCJwYXJzZUZsb2F0IiwiY2FuQnV5IiwiY2FuQ3JhZnQiLCJyZXNvdXJjZUtleSIsInJlcXVpcmVtZW50cyIsIm1hdCIsImVyciIsIndhcm4iLCJzdHIiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibG9vdFRhYmxlIiwiaHVza3MiLCJwcm9iYWJpbGl0eSIsInF1YW50aXR5IiwibmFpbHMiLCJzbGFicyIsImJlYW1zIiwiYXhlIiwic3BlYXIiLCJnb2xkIiwiaXJvbiIsInNpbHZlciIsInN0ZWVsIiwiYnJpY2tzIiwiY3Vyckxvb3QiLCJnZXRDdXJyTG9vdCIsImdlbmVyYXRlTG9vdCIsImxvb3QiLCJyYW5kb20iLCJhcmVuYSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVCYWxscyIsInRlYW0iLCJiYWxsIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInN0eWxlIiwibGVmdCIsInRvcCIsImFwcGVuZENoaWxkIiwicGxheWVyVHJvb3BzIiwiZW5lbXlUcm9vcHMiLCJhbmltYXRpb25zIiwiYW5pbVRpbWUiLCJzdGFydEFuaW1hdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YXJnZXRYIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJvZmZzZXRXaWR0aCIsImFuaW1hdGUiLCJ0cmFuc2Zvcm0iLCJkdXJhdGlvbiIsImZpbGwiLCJmaW5pc2hlZCIsInRoZW4iLCJyZW1vdmUiLCJ1cGRhdGUiLCJzZXRUaW1lb3V0IiwicGxheWVyQmFsbHMiLCJsZW5ndGgiLCJlbmVteUJhbGxzIiwiaGFzUmV3YXJkZWQiLCJjaGVja0ZvcldpbiIsImJhdHRsZVJlc3VsdCIsImNvbWJhdFJlc3VsdCIsInRleHRDb250ZW50IiwiZmlnaHRCdXR0b24iLCJkaXNhYmxlZCIsInN0YW5jZU11bHQiLCJnZXRTdGFuY2UiLCJsb290TmFtZSIsImlubmVySFRNTCIsInBsYXllcldvblByZXZpb3VzQmF0dGxlIiwiZW5lbXlNaWdodCIsImdldE5leHRCYXR0bGVNaWdodCIsInJlZnJlc2hWYWx1ZXMiLCJpc0NvbGxpZGluZyIsImJhbGwxIiwiYmFsbDIiLCJyZWN0MSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QyIiwicmlnaHQiLCJib3R0b20iLCJwbGF5ZXIiLCJlbmVteSIsImoiLCJwbGF5ZXJCYWxsIiwiZW5lbXlCYWxsIiwiZ2V0Q3VyckVuZW15TWlnaHQiLCJjYWxjdWxhdGVQbGF5ZXJNaWdodCIsImNoYW5jZVNwcmVhZCIsImRldGVjdENvbGxpc2lvbnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxjUm91bmRpbmciLCJwbGF5ZXJNaWdodCIsInBsYXllclJvdW5kaW5nIiwiY2VpbCIsImVuZW15Um91bmRpbmciLCJoaWdoZXJSb3VuZGluZyIsIm1heCIsInBsYXllckNvdW50IiwiZW5lbXlDb3VudCIsInRvU3RyaW5nIiwicXVlcnlTZWxlY3RvciIsIm1pZ2h0IiwicGxheWVyTWlnaHRFbGVtZW50IiwiZW5lbXlNaWdodEVsZW1lbnQiLCJjYWxjdWxhdGVXaW5DaGFuY2UiLCJjaGFuY2UiLCJzZXRBdHRyaWJ1dGUiLCJjaGFuY2VFbGVtZW50IiwiY29sb3IiLCJzdGFuY2UiLCJzdGFuY2VCdXR0b25zIiwic3dpdGNoU3RhbmNlIiwibmV3U3RhbmNlIiwiZWxlbWVudCIsInNldFN0YW5jZSIsImxvb3RMaXN0Iiwid2luZG93IiwiY29tYmF0IiwicGF1c2VBbmltYXRpb24iLCJwYXVzZSIsInNpbXVsYXRlQmF0dGxlIiwicGxheWVyQ2hhbmNlIiwiY2FsY3VsYXRlQmF0dGxlUmVzdWx0Iiwic2V0RW5lbXlNaWdodCIsInN3aXRjaGVkTWFudWZhY3R1cmVkTWFwIiwiYWxsTWF0ZXJpYWxzIiwiciIsImFjdGl2ZUZhY3Rvcmllc1Byb2R1Y2luZyIsImFjdGl2ZUZhY3Rvcmllc0NvbnN1bWluZyIsInVwZGF0ZUZhY3RvcnlSZXNvdXJjZVRyYWNraW5nIiwib2xkUHJvZHVjZWQiLCJuZXdQcm9kdWNlZCIsIkFycmF5IiwiZnJvbSIsImNyZWF0ZUZhY3RvcnlEaXYiLCJmYWN0b3JpZXNDb250YWluZXIiLCJmYWN0b3J5RGl2IiwibGVmdFRleHQiLCJhZGQiLCJyaWdodFNlbGVjdCIsIm9wdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjdXJyZW50UHJvZHVjZWQiLCJ0aGlzIiwiZ2V0QXR0cmlidXRlIiwiYXJyb3ciLCJzZWxlY3RFbGVtZW50IiwidGV4dCIsImluaXRpYWxPcHRpb24iLCJzZWxlY3RlZCIsImFkZEluaXRpYWxPcHRpb24iLCJtYW51ZmFjdHVyZUJ1bGsiLCJidWxrVXBncmFkZUNvc3QiLCJuZXdGYWN0b3J5U2lsdmVyQ29zdCIsImF0dGVtcHRNYW51ZmFjdHVyZSIsImZhY3RvcnkiLCJnb2FsUmVzb3VyY2UiLCJhcnIiLCJudW0iLCJtaW4iLCJtYW51ZmFjdHVyZSIsImJ1eUZhY3RvcnkiLCJidXlGYWN0b3J5QnV0dG9uIiwidXBncmFkZUJ1bGsiLCJsb2FkRmFjdG9yeSIsImNyYWZ0aW5nIiwiZGl2IiwiZml0Q2hhclRvQ2VsbCIsImNoYXIiLCJjZWxsV2lkdGgiLCJjZWxsSGVpZ2h0IiwiaW5pdGlhbEZvbnRTaXplIiwic3BhbiIsImZvbnRTaXplIiwicG9zaXRpb24iLCJ3aGl0ZVNwYWNlIiwidmlzaWJpbGl0eSIsImJvZHkiLCJjdXJyZW50Rm9udFNpemUiLCJvZmZzZXRIZWlnaHQiLCJyZW1vdmVDaGlsZCIsInBvc3NpYmxlUmVzb3VyY2VzIiwiZmlsdGVyIiwia2V5IiwicG9zc2libGVDcmFmdGVkUmVzb3VyY2VzIiwiZ2V0UmFuZG9tTnVtYmVyIiwiZ2V0UmFuZG9tRW1vamkiLCJyYW5nZXMiLCJzdGFydCIsImVuZCIsInJhbmRvbVJhbmdlIiwicmFuZG9tVW5pY29kZSIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJhZGplY3RpdmVzIiwiYnVpbGRpbmdOYW1lcyIsIm5vdW5zIiwidmVyYnMiLCJwcmVwb3NpdGlvbnMiLCJjb25qdW5jdGlvbnMiLCJnZW5lcmF0ZVJhbmRvbUJ1aWxkaW5nIiwicmFuZG9tTmFtZSIsInJhbmRvbUFkamVjdGl2ZSIsInJhbmRvbUJ1aWxkaW5nTmFtZSIsImdlbmVyYXRlQnVpbGRpbmdOYW1lIiwicmFuZG9tRGVzY3JpcHRpb24iLCJyYW5kb21BZGplY3RpdmUyIiwicmFuZG9tTm91biIsInJhbmRvbVZlcmIiLCJyYW5kb21QcmVwb3NpdGlvbiIsInJhbmRvbUNvbmp1bmN0aW9uIiwiZGVzY3JpcHRpb24iLCJnZW5lcmF0ZUJ1aWxkaW5nRGVzY3JpcHRpb24iLCJudW1SZXNvdXJjZXMiLCJyYW5kb21Db3N0cyIsIm51bUNyYWZ0ZWRSZXNvdXJjZXMiLCJyYW5kb21FZmZlY3RzIiwibnVtRWZmZWN0cyIsInJhbmRvbVJlc291cmNlIiwicmFuZG9tRWZmZWN0VmFsdWUiLCJyYW5kb21Cb29zdHMiLCJudW1Cb29zdHMiLCJyYW5kb21Cb29zdFZhbHVlIiwibmFtZSIsInJhdGlvIiwiZ2V0Q3JhZnRlZFJlc291cmNlIiwidG9Mb3dlckNhc2UiLCJpc1Jlc291cmNlIiwiYWxsVmlzaWJsZUJ1dHRvbnMiLCJTZXQiLCJnZXRNYXgiLCJiYXNlTWF4IiwiSW5maW5pdHkiLCJjYWxjQ3JhZnRCb251cyIsImlzQnV0dG9uSWRWaXNpYmxlIiwiaWQiLCJoYXMiLCJzZXRWaXNpYmxlQnV0dG9uIiwiY2xlYXJTaWRlYmFyIiwidHJpZ2dlckZsb2F0VXBUZXh0Iiwiam9iQXVkaW8iLCJBdWRpbyIsImpvYkNvdW50cyIsImpvYnNUYWIiLCJnZXRUb3RhbEpvYnMiLCJqb2JEaXYiLCJkZWNyZW1lbnREaXYiLCJqb2JOYW1lU3BhbiIsImluY3JlbWVudERpdiIsImJ0biIsImV2ZW50Iiwiam9iVHlwZSIsImNsb3Nlc3QiLCJwbGF5IiwieCIsInBhZ2VYIiwieSIsInBhZ2VZIiwic2hpZnRLZXkiLCJkaWZmZXJlbmNlIiwiY3RybEtleSIsImRpc3RyaWJ1dGVXb3JrZXJzIiwidXBkYXRlRGlzcGxheSIsIm51bVdvcmtlcnMiLCJ3b3JrZXJzRGlzdHJpYnV0aW9uIiwiTWFwIiwidG90YWxXb3JrZXJzIiwibnVtYmVyT2ZSZXNvdXJjZXMiLCJwZXJSZXNvdXJjZSIsInNldCIsIm1vdmVCYWxsRnJvbUpvYlRvUmVzb3VyY2UiLCJyZW1haW5pbmdXb3JrZXJzIiwiZ2V0IiwiYWZmZWN0ZWRSZXNvdXJjZSIsImpvYkJ1dHRvbiIsImZpbmQiLCJkaXNwbGF5IiwicmVzb3VyY2VEaXNwbGF5Iiwiam9iQnV0dG9uUmVjdCIsInJlc291cmNlUmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwib3BhY2l0eSIsInNjcm9sbFgiLCJzY3JvbGxZIiwiZWFzaW5nIiwib25maW5pc2giLCJ0aGlzSm9iQnV0dG9uIiwiam9iRWxlbWVudCIsImNvbm5lY3Rpb25zIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImRyYXdMaW5lIiwic3RhcnRFbGVtZW50IiwiZW5kWCIsImVuZFkiLCJyZWN0Iiwic3RhcnRYIiwic3RhcnRZIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiY29udGV4dCIsImZyb21YIiwiZnJvbVkiLCJ0b1giLCJ0b1kiLCJyYWRpdXMiLCJhbmdsZSIsInhfY2VudGVyIiwieV9jZW50ZXIiLCJhdGFuMiIsImNvcyIsInNpbiIsIlBJIiwiY2xvc2VQYXRoIiwiZHJhd0Fycm93aGVhZCIsInN3aXRjaEpvYiIsIm9sZEpvYklkIiwibmV3Sm9iSWQiLCJ3b3JrZXJzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2xlYXJKb2JBc3NpZ25tZW50cyIsImNsZWFyUmVjdCIsInJlYXNzaWduSm9ic0Jhc2VkT25SZXNvdXJjZXMiLCJ1bmRlZmluZWQiLCJkYXRhSm9iIiwib2xkSWQiLCJyZXBsYWNlIiwibmV3SWQiLCJtYXhlZE91dCIsInJlc291cmNlQXJyYXkiLCJkcmF3QWxsQ29ubmVjdGlvbnMiLCJvbGRCdXR0b24iLCJuZXdCdXR0b24iLCJuZXdYIiwibmV3WSIsIm9mZnNldFRvcCIsInNldENvbm5lY3Rpb25zIiwibmV3Q29ubmVjdGlvbnMiLCJnZXRDb25uZWN0aW9ucyIsInJlc2V0QWxsSm9icyIsImNvbmNyZXRlIiwibWVkaWNpbmUiLCJmaXNoIiwidmlvbGVuY2UiLCJ3b29kIiwicm9ja3MiLCJ2aW5lcyIsInN0aWNrcyIsImdhbWUiLCJjbGF5Iiwid2F0ZXIiLCJjcmF0ZXMiLCJoZXJicyIsImZyZXNod2F0ZXIiLCJnbGFzcyIsInBvbmRlciIsImdldEJ1aWxkaW5nQ291bnQiLCJnZXRCb29zdCIsInJlc2V0QnVpbGRpbmdzIiwidmFsIiwiYnV0dG9ucyIsImNsYXNzIiwidGFiIiwidG9vbHRpcENvc3QiLCJyZXF1aXJlbWVudCIsImhpZGUiLCJzaG93VGFiIiwiY3JhZnRlZE9uY2UiLCJyZXF1aXJlZFN0YWdlIiwid2hlYXQiLCJ0b29sdGlwY29zdCIsImdldENyYWZ0ZWRSZXNvdXJjZUNvbmZpZ0J5SWQiLCJjIiwiZ2V0Q3JhZnRlZFJlc291cmNlS2V5QnlDb25maWciLCJjb25maWciLCJrIiwicmVzZXRDcmFmdGVkUmVzb3VyY2VzIiwicGVya3MiLCJwb25kZXJzIiwicmVzZXRQb25kZXJzIiwicHJlc3RpZ2UiLCJwcmVzIiwiaXNWaXNpYmxlIiwiYWN0aXZlVGV4dCIsImRlZmF1bHRUZXh0IiwiZ2V0UmVzb3VyY2VDb25maWdCeUlkIiwicmVzZXRSZXNvdXJjZXMiLCJnYXRoZXJpbmciLCJleHAiLCJtYXNvbnJ5IiwibmVlZFRvb2xzIiwiY2FycGVudHJ5IiwidGhpbmtpbmciLCJmYXJtaW5nIiwiZmlzaGluZyIsImh1bnRpbmciLCJzYXZlR2FtZSIsImxvYWRHYW1lIiwiZ2VuZXJhdGVUb29sdGlwQ29zdCIsImFwcGVuZENyYWZ0ZWRSZXNvdXJjZUJ1dHRvbnMiLCJjcmFmdEFsbFJlc291cmNlcyIsImNyYWZ0UmVzb3VyY2UiLCJ1cGRhdGVSZXNvdXJjZUluY3JlYXNlUmF0ZXMiLCJzZWxlY3RBYmlsaXR5IiwicmVzZXRQZXJrcyIsIm1ha2VWaXNpYmxlIiwidXBkYXRlQnV0dG9uVmlzaWJpbGl0eSIsImdlbmVyYXRlUG9uZGVyQnV0dG9ucyIsImFkZFRvb2wiLCJyZXNldFN0YWdlcyIsImluaXRpYWxpemVSZXNvdXJjZVRhZ3MiLCJ1cGRhdGVTaWRlYmFyIiwidXBkYXRlRGlzcGxheVZhbHVlIiwidXBkYXRlQm91bmNlQW5pbWF0aW9uIiwidXBkYXRlVG9vbHRpcCIsImhpZGVUb29sdGlwIiwiZ2V0Q3VycmVudFRhYiIsInNpZGViYXJQYXJlbnQiLCJlbW9qaUdhdGhlckRpdiIsInRvZ2dsZVJlc291cmNlIiwiZ2F0aGVyQXVkaW8iLCJ2b2x1bWUiLCJzaWRlYmFyVGV4dCIsInJlc291cmNlQnV0dG9uIiwiZm9udFdlaWdodCIsInJCdXR0b24iLCJzdG9wQWxsR2F0aGVyaW5nIiwidG9vbHNUb1N0YWdlcyIsInZpc2liaWxpdHlSdWxlcyIsImNvbmRpdGlvbiIsImFjdGlvbiIsImxvY2F0aW9uIiwiaHJlZiIsImF1ZGlvRmlsZXMiLCJjdXJyZW50QXVkaW8iLCJ0aW1lb3V0SWQiLCJwbGF5UmFuZG9tVHJhY2siLCJjdXJyZW50VGltZSIsInJhbmRvbUluZGV4IiwiY2xlYXJUaW1lb3V0Iiwic2lsZW5jZUR1cmF0aW9uIiwib25lbmRlZCIsInNjaGVkdWxlTmV4dFRyYWNrIiwidG9nZ2xlIiwiaXNEYXJrIiwiZmFkZVRvQmxhY2siLCJvdmVybGF5Iiwib3ZlcmxheVRleHQiLCJvdmVybGF5QnV0dG9uIiwibWVzc2FnZUVsZW1lbnQiLCJjaGFuZ2VNZXNzYWdlIiwibmV3TWVzc2FnZSIsImNsb25lV29yZHMiLCJtb2RpZmllZE1lc3NhZ2UiLCJtaWxsaXNlY29uZHNfcGVyX2ZyYW1lIiwibGFzdF90aW1lIiwidG90YWxfdGltZSIsImFjY3VtdWxhdGVkX2xhZyIsImxvb3AiLCJjdXJyZW50X3RpbWUiLCJub3JtYWxSYXRlIiwidGltZV9zaW5jZV9sYXN0X3NhdmUiLCJ0aW1lX3NpbmNlX21hbnVmYXR1cmUiLCJydWxlIiwic3BsaWNlIiwidG9vbCIsImN1cnJlbnRIb3ZlckJ1dHRvbiIsInJlbmRlciIsIm9uYmVmb3JldW5sb2FkIiwiY3VycmVudGx5RGVsZXRpbmciLCJpc2VrYWkiLCJvdmVybGF5QmFja0J1dHRvbiIsImh1c2tzRHVlIiwicmFuZG9tQnVpbGRpbmciLCJzcGxpdCIsIm9sZEh1c2tWYWx1ZSIsImh1c2tWYWx1ZSIsInByZXBlbmQiLCJidXR0b25Db250YWluZXIiLCJidXR0b24iLCJncmlkQ29sdW1uIiwiZ3JpZFJvdyIsIm4iLCJhIiwic3FydCIsIm5leHRGaWJvbmFjY2kiLCJlIiwicHJldmVudERlZmF1bHQiLCJwcmV2Rmlib25hY2NpIiwiZmFjdG9yeUJ1dHRvbnMiLCJ1cGdyYWRlQnVsa0J1dHRvbiIsIm1ha2VGYWN0b3J5QnV0dG9ucyIsInRyYWNlIiwiY3JlYXRlQ29sdW1ucyIsInBhcmVudCIsImNvbDEiLCJjb2wyIiwiY29sMyIsInRhYnNDb250YWluZXIiLCJwcm9kdWN0aW9uQ29udGFpbmVyIiwiZXhwZXJpbWVudENvbnRhaW5lciIsInBvbmRlckNvbnRhaW5lciIsImV4cGVyaW1lbnRDb2x1bW5zIiwicG9uZGVyQ29sdW1ucyIsInByb2R1Y3Rpb25Db2x1bW5JbmRleCIsImV4cGVyaW1lbnRDb2x1bW5JbmRleCIsInBvbmRlckNvbHVtbkluZGV4IiwiYnV0dG9uRWxlbWVudCIsInRvb2x0aXBFZmZlY3QiLCJ1bmxvY2siLCJkYXRhX2J1aWxkaW5nIiwiY3JhZnRlZFJlc291cmNlIiwidmFsdWVzIiwiZ2VuZXJhdGVCdXR0b25zIiwidGFyZ2V0IiwibWF0Y2hlcyIsImJ1aWxkaW5nQXVkaW8iLCJidWlsZGluZ1N0cmluZyIsInVubG9ja0F0dHIiLCJjYW5VbmxvY2siLCJwb25kZXJBdWRpbyIsInJlbG9hZCIsImdldFJLZXlGcm9tSUQiLCJjcmFmdEF1ZGlvIiwiY3IiLCJnZXRDUktleUZyb21JRCIsImNvbmZpcm0iLCJkZWxldGVHYW1lIiwiZGFya01vZGVUb2dnbGUiLCJjbG9uZUF1ZGlvIiwib3B0aW9uc01lbnUiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwidXBkYXRlVUkiLCJyZXNvdXJjZURpdiIsInNldFRvdGFsVGltZSIsInRpbWUiLCJnZXRNZXNzYWdlIiwic2V0U3RhZ2UiLCJzdGFnZSIsIm15UGVya3MiLCJwZXJrTmFtZSIsImFkZFBlcmsiLCJiIiwiYWJpbGl0eU5hbWUiLCJnZXRQZXJrRnJvbVRpZXIiLCJ0aWVyTnVtIiwiZ2V0QWxsUGVya3MiLCJ1bmxvY2tJZCIsInVubG9ja0tleSIsInBvbmRlck9iamVjdHMiLCJwb25kZXJLZXkiLCJwb25kZXJPYmoiLCJidXR0b25LZXkiLCJzZXRNYXgiLCJtYXhDbG9uZXMiLCJteUJ1dHRvbiIsIm5ld1RleHQiLCJlZmZlY3RTdHJpbmciLCJhYmJyZXZpYXRlTnVtYmVyIiwiZ2V0QWxsU3RhZ2VzIiwidXBkYXRlU2tpbGxzIiwicmVzb3VyY2VzQ29udGFpbmVyIiwiY2hlY2tlZCIsImF1dG9DcmFmdFRhYmxlIiwiY3JlYXRlQ3JhZnRlZFJlc291cmNlQnV0dG9uIiwiY29udGFpbmVyIiwiZW1vamlEaXNwbGF5IiwidXBkYXRlRW1vamlEaXNwbGF5IiwiZW1vamlTdHIiLCJyZXBlYXQiLCJhZGp1c3RGb250U2l6ZSIsInN1ZmZpY2llbnRSZXNvdXJjZXMiLCJjcmFmdFJlc291cmNlUXVhbnRpdHkiLCJjcmFmdE9uZSIsImNyYWZ0Qm9udXMiLCJjYWxjU2Vjb25kc1JlbWFpbmluZyIsIm5lZWRlZCIsInJhdGUiLCJyYXRlRWxlbWVudCIsImdldEFsbFRvb2xzIiwicG9wdWxhdGVTa2lsbHNUYWJsZSIsInNhdmUiLCJ0b29scyIsInN0YWdlcyIsInVubG9ja3MiLCJqb2JzIiwibWVzc2FnZSIsImZhY3RvcmllcyIsIm5ld0J1aWxkaW5ncyIsIml0ZW0iLCJ1IiwiaHRtbFN0cmluZyIsImV4dHJhY3RUZXh0RnJvbUhUTUwiLCJEYXRlIiwibm93Iiwic2V0SXRlbSIsInNhdmVnYW1lIiwiZ2V0SXRlbSIsInZhbHVlT2YiLCJOdW1iZXIiLCJpc05hTiIsInVuaW9uIiwicyIsImNsb25lcyIsInRpbWVfZGlmZmVyZW5jZSIsImluYyIsInNpemUiLCJqb2IiLCJzZWxlY3RDb3JyZWN0UGVya0J1dHRvbiIsInNlbGVjdGVkQnV0dG9uIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0SW5Db21iYXQiLCJjb250ZW50IiwidGFiQ29udGFpbmVycyIsInRhYk5hbWUiLCJwcmV2VGFiIiwidGFiQXVkaW8iLCJwcmV2VGFiRWxlbWVudCIsInRhYnMiLCJhY3RpdmVDb250ZW50IiwidGFiU3RyaW5nIiwiYWN0aXZlVGFiQnV0dG9uIiwic2hvdWxkSGlkZSIsImZvcm1hdCIsInVuaXQiLCJyb3VuZFRvRGVjaW1hbHMiLCJudW1iZXIiLCJkZWNpbWFscyIsImZhY3RvciIsImNyZWF0ZVJlc291cmNlVGFnIiwiZ3JvdXBOYW1lIiwiZ3JvdXBDb250YWluZXIiLCJ0b2dnbGVCdXR0b24iLCJvbmNsaWNrIiwiZ3JvdXAiLCJjaGlsZHJlbiIsInRhZ05hbWUiLCJ0b2dnbGVHcm91cFZpc2liaWxpdHkiLCJjcmVhdGVSZXNvdXJjZUdyb3VwQ29udGFpbmVyIiwicmVzb3VyY2VEaXNwbGF5TmFtZSIsInJlc291cmNlRWxlbWVudCIsInJlc291cmNlTmFtZVNwYW4iLCJyZXNvdXJjZVZhbHVlU3BhbiIsInJlc291cmNlUmF0ZVNwYW4iLCJjaGFuZ2VSZXNvdXJjZU9yZGVyIiwicmVzb3VyY2VJZCIsIm5ld09yZGVyIiwib3JkZXIiLCJlbGVtZW50SW5jcmVhc2UiLCJwYXJlbnRFbGVtZW50IiwiaW5kZXgiLCJkaXNwbGF5RWxlbSIsIndpdGhHcm91cHMiLCJyZXNvdXJjZUdyb3VwcyIsInNwZWNpYWwiLCJmb29kIiwibWF0ZXJpYWxzIiwiYWR2YW5jZWQiLCJtZXRhbCIsImNvbnN0cnVjdGlvbiIsImdyb3VwT2ZSZXNvdXJjZXMiLCJyZXNvdXJjZVRvU2tpbGxNYXAiLCJkYXRhIiwiaW52ZXJ0U2tpbGxzVG9SZXNvdXJjZXMiLCJoYXNHZW5lcmF0ZWRTa2lsbFRhYmxlIiwidGFibGUiLCJwcm9ncmVzc0JhciIsInRyIiwidGRQcm9ncmVzcyIsInNraWxsVGV4dCIsImFicyIsImxldmVsdXAiLCJwb3AiLCJwbGF5ZXJUb29scyIsInVsIiwibGkiLCJjcmVhdGVUZXh0Tm9kZSIsInVwZGF0ZVRvb2xVSSIsImdldFRvb2xWYWx1ZUZvclJlc291cmNlIiwic29ydGVkVG9vbHMiLCJzb3J0IiwicmVzb3VyY2VMaXN0IiwiZ29sZEFtb3VudEVsIiwiYnV5UmVzb3VyY2UiLCJwcmljZSIsInNlbGxSZXNvdXJjZSIsImdlbmVyYXRlVHJhZGVUYWJsZSIsInJvdyIsImZsb2F0VGV4dCIsImFsb25lRWxlbWVudCIsImJ1aWxkaW5nQ291bnQiLCJidWlsZGluZ0xpc3QiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjb2wiLCJidXR0b25Db25maWciLCJzdGF0ZSIsImNyYWZ0ZWQiLCJyZXFQb25kZXIiLCJ0b29sdGlwIiwiZGVzYyIsImVmZmVjdCIsInBhcnNlQW1vdW50IiwiYW1vdW50VGV4dCIsInJlZ2V4IiwibWF0Y2giLCJwcm9jZXNzZWRTdHJpbmciLCJleGVjIiwiY29sb3JDbGFzcyIsInNlY29uZHNSZW1haW5pbmciLCJwcm9jZXNzTWF0ZXJpYWxzIiwic2hvd1Rvb2x0aXAiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==