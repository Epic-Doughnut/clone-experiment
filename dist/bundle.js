(()=>{var e={621:e=>{var t=!1;e.exports={ateFish:t,setAteFish:function(e){return t=e},getAteFish:function(){return t}}},98:e=>{let t=.5,o=.5;e.exports={setMusicVolume:function(e){t=e},getMusicVolume:function(){return t},setSfxVolume:function(e){o=e},getSfxVolume:function(){return o}}},151:(e,t,o)=>{const{buildings:n,isPopBuilding:s}=o(882),{increaseMaterial:i,increaseMax:r}=o(594),{updateTotal:a}=o(150),{hasPerk:c}=o(134),{getMaterial:l}=o(924),{passedStage:u}=o(751),{recalcMaxClones:d}=o(995),{updateBuildingButtonCount:f}=o(607),{recalculateBuildingCost:p}=o(22),{canBuyBuilding:g}=o(23),{isPondered:m}=o(369),{updateBuildingList:b}=o(831),{capitalizeFirst:h}=o(681);function y(e){console.log("Buying building "+e);const t=n[e];if(g(e)){t.count++;for(const e in t.cost)i(e,-t.cost[e]);for(const[e,o]of Object.entries(t.effects))r(e,o),"clones"===e&&(d(),a());f(e,t.count,JSON.parse(JSON.stringify(t.emoji))),p(e,n,c),b()}}e.exports={generateBuildingTooltipCost:function(e){return Object.entries(e).map((([e,t])=>`${t.toFixed(2)} ${e}`)).join("\n")},createBuildingButton:function(e,t){try{const o=t[e];o.cost=o.basecost;const n=Object.entries(o.cost).map((([e,t])=>`${e}: ${t}`)).join(", "),s=function(e){return function(){const t=Object.entries(e).every((([e,t])=>l(e)>=Math.floor(t/2)));return u("clones")&&t}}(o.cost);return console.log("create building button:",o,JSON.parse(JSON.stringify(o.emoji))),{class:"tooltip "+e,tab:"production",text:`${JSON.parse(JSON.stringify(o.emoji))} ${h(e)} (${o.count})`,tooltipDesc:t[e].tooltipDesc||"A mysterious building with untold benefits.",tooltipCost:n,requirement:()=>s(),data_building:e}}catch(o){console.error("Could not create building button for",e,t)}},buyMaxBuildings:function(e){let t=0;for(n[e];g(e);)y(e),++t;return t},buyBuilding:y,generateEffectString:function(e){let t=[];for(let[o,n]of Object.entries(e.effects))t.push(`+${n} max ${o}`);for(let[o,n]of Object.entries(e.boost)){let e=Math.round(100*(n-1));m("effectiveBuildings")&&(e*=1.01),t.push(`+${e}% ${o} production`)}return t.join(", ")},updateBuildingList:b}},121:(e,t,o)=>{const{resources:n}=o(587),{craftedResources:s}=o(371),{skills:i}=o(324),{getWorkers:r}=o(150),{hasPerk:a}=o(134),{isPondered:c}=o(369),{getFactoryProduction:l}=o(51),{hasPrestige:u,getLevelOfPrestige:d}=o(425),{getMaterial:f}=o(924),{hasTool:p}=o(609),g={Lumberjack:["wood","sticks"],Miner:["rocks","ore"],Botanist:["vines","herbs","wheat"]},m={gathering:["gatheringBoost"],masonry:["masonryBoost"],carpentry:["carpentryBoost"],thinking:["thinkingBoost"],farming:["farmingBoost"],fishing:["fishingBoost"],hunting:["huntingBoost"]},b={wood:"axe",ore:"pickaxe",fish:"fishingrod",game:"spear",ponder:"paper",sticks:"staff"};t.calcIncrease=function(e,t){var p=0;const h=o(882).buildings;if(!n.hasOwnProperty(e)){if(!s.hasOwnProperty(e))return p;if((p=l(e))>0)return p}"clones"===e&&c("autoClone")&&(p=1),n[e]&&n[e].isGetting&&(p+=1),p=function(e,t){for(const[o,n]of Object.entries(g))n.includes(t)&&a(o)&&(e*=1.75);return e}(p+=(a("Leader")?.375:.25)*r(e)||0,e),p=function(e,t){for(const[o,n]of Object.entries(m))if(i[o].affectedResources.includes(t)){n.forEach((t=>{u(t)&&(e*=1.1*d(t))}));let t=1.06,s=1+(Math.pow(t,i[o].level)-1)/100;e*=s}return e}(p,e);for(const t of Object.keys(h)){const n=o(882).getBoost(t,e);if(n){var y=Math.pow(n,h[t].count);c("effectiveBuildings")&&(y*=1.03),p*=y}}return"ponder"===e&&(c("ponder1")&&(p*=1.05),c("ponder2")&&(p*=1.05),c("ponder3")&&(p*=1.05)),c("fasterResourceGain")&&(p*=1.05),u("cloneBoost")&&(p*=1.05*d("cloneBoost")),p=function(e,t){const o=b[t];return o&&f(o)>10&&(e*=1+Math.log10(f(o)/10)),e}(p,e),f("husks")>10&&(p*=1+Math.log(f("husks")/10)),parseFloat((p*t/1e3).toFixed(3))}},23:(e,t,o)=>{const{resources:n}=o(587),{getMaterial:s}=o(924),{passedStage:i}=o(751);t.canBuyBuilding=function(e){let t=!0;const r=o(882).buildings[e];for(const e in r.cost)if(r.cost[e]>s(e,n)){t=!1;break}return r.effects&&r.effects.clones&&!i("clone")&&(t=!1),t}},64:(e,t,o)=>{const{resources:n}=o(587),{craftedResources:s}=o(371),{getMaterial:i}=o(924);t.canCraft=function(e){let t=!0,o=s[e].cost;try{for(let e in o)if(i(e,n)<o[e]){t=!1;break}}catch(t){console.warn("Error in calculating requirements: ",e,o,t)}return t}},681:(e,t)=>{t.capitalizeFirst=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},169:(e,t)=>{const o=document.getElementById("message");t.messageElement=o,t.changeMessage=function(e,t,n="You feel peckish for some seafood"){null===n&&(n="You feel peckish for some seafood");const s=e.replace(t,`<span class='tooltip' id="alone" tooltipDesc="${n}">${t}</span>`);o.innerHTML=s}},856:(e,t,o)=>{const{getMaterial:n}=o(924),{increaseMaterial:s}=o(594),i={husks:{probability:.05,quantity:1},nails:{probability:.1,quantity:50},slabs:{probability:.2,quantity:50},beams:{probability:.1,quantity:60},axe:{probability:.15,quantity:5},spear:{probability:1,quantity:5},gold:{probability:.1,quantity:10},iron:{probability:.15,quantity:50},silver:{probability:.05,quantity:20},steel:{probability:.1,quantity:30},bricks:{probability:.15,quantity:80}};let r={};function a(){return r}function c(){let e={};for(const t in i)if(Math.random()<i[t].probability){const o=Math.floor(i[t].quantity*(.4*Math.random()+.8));o>0&&(e[t]=o)}return r=e,console.log(r),e}const l=document.getElementById("arena");function u(e,t){for(let o=0;o<t;o++){const t=document.createElement("div");t.className=`ball ${e}`,t.style.left=("player"===e?10:90)+"%",t.style.top=10+30*o+"px",l.appendChild(t),"player"===e?d.push(t):f.push(t)}}let d=[],f=[],p=[];const g=3e3;function m(){document.querySelectorAll(".ball").forEach((e=>{const t=e.classList.contains("player")?l.offsetWidth:-l.offsetWidth;p.push(e.animate([{transform:`translateX(${t}px)`}],{duration:g,fill:"none"}).finished.then((()=>{e.remove()})))})),v(),setTimeout((()=>{const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0!==e&&0!==t){for(const e of document.querySelectorAll(".ball"))e.remove();u("player",e),u("enemy",t),m()}}),g-100)}let b=!1;function h(){if(b)return;const e=document.querySelectorAll(".player").length,t=document.querySelectorAll(".enemy").length;if(0===e&&t>0?w="enemy":0===t&&e>0&&(w="player"),null!==w){const e=document.getElementById("combatResult");if(e.textContent="player"===w?"You won!":"enemy"===w?"The Enemy won!":"It's a draw!",setTimeout((()=>{x.disabled=!1}),g/2),"player"===w){b=!0;let t=1;"aggressive"===q()&&(t=.75),"careful"===q()&&(t=1.25);for(const[o,n]of Object.entries(r))s(o,n*t),e.innerHTML+=`<br>+${n*t} ${o}`;c()}return console.log("battle result was",w),function(e){if(null===e)return T;e?T+=50:T-=50,T<200&&(T=200)}(null===w||"player"===w),L(),!0}return!1}function y(e,t){const o=e.getBoundingClientRect(),n=t.getBoundingClientRect();return!(o.right<n.left||o.left>n.right||o.bottom<n.top||o.top>n.bottom)}function v(){!function(e,t){for(let s=0;s<e.length;s++)for(let e=0;e<t.length;e++)y(d[s],f[e])&&(o=d[s],n=f[e],Math.random()<1/(1+Math.pow(10,(M()-C())/B))?n.remove():o.remove());var o,n}(d,f),h()||b||requestAnimationFrame(v)}function k(){const e=C(),t=M(),o=Math.ceil(e/12),n=Math.ceil(t/12),s=Math.max(o,n),i=Math.floor(e/s),r=Math.floor(t/s);return document.getElementById("approximateBall").textContent=s.toString(),[i,r]}const x=document.querySelector("button#startCombat");let w=null;const B=200;function C(){let e=n("violence")+n("spear")+n("medicine");return"aggressive"===q()?e*=1.2:"careful"===q()&&(e*=.8),e}let T=400;function M(){return T}const S=document.getElementById("playerMight"),E=document.getElementById("enemyMight");function A(){const e=C(),t=M(),o=1/(1+Math.pow(10,(t-e)/B));S.textContent=e.toFixed(0),S.setAttribute("tooltipdesc",`${n("violence").toFixed(0)} violence + ${n("spear").toFixed(0)} spears + ${n("medicine").toFixed(0)} medicine`),E.textContent=t.toFixed(0);const s=document.getElementById("chanceToWin");return s.textContent=(100*o).toFixed(1)+"%",s.style.color=`hsl(${(120*o).toString(10)},100%,50%)`,o}let j="balanced";function q(){return j}const $=document.querySelectorAll("button.stance");function D(e){console.log("switch stance to ",e),$.forEach((e=>{e.disabled=!1})),document.querySelector(`#${e}Stance`).disabled=!0,function(e){j=e}(e),L()}function L(){Object.keys(a()).length<1&&c();const e=document.getElementById("lootList");e.innerHTML="";for(const[t,o]of Object.entries(a()))e.innerHTML+=`<span>${t} (${o})</span> <br>`;E.textContent=M().toString(),k(),A()}window.switchStance=D,e.exports={combat:function(){w=null;for(const e of document.querySelectorAll(".ball"))e.remove();let[e,t]=k();u("player",e),u("enemy",t),document.getElementById("combatResult").textContent="",x.disabled=!0,b=!1,m()},calculateWinChance:A,refreshValues:L,pauseAnimation:function(){p.forEach((e=>{e.pause()}))},battleResult:w,simulateBattle:function(){w=function(){const e=C(),t=M(),o=1/(1+Math.pow(10,(t-e)/B));return Math.random()<o?"player":"enemy"}(),h()},switchStance:D,getCurrEnemyMight:M,setEnemyMight:function(e){T=e}}},51:(e,t,o)=>{const{getSfxVolume:n}=o(98),{getMaterial:s}=o(924),{craftedResources:i}=o(371),{resources:r}=o(587);var a={beams:["wood"],bricks:["clay"],concrete:["sand"],crates:["wood"],glass:["sand"],gold:["ore"],handle:["sticks"],iron:["ore"],leather:["hides"],medicine:["herbs"],nails:["iron"],paper:["wood"],sharprocks:["rocks"],silver:["ore"],slabs:["rocks"],spear:["staff","sharprocks","rope"],staff:["handle","rope"],steel:["iron"],sticks:["wood"],rope:["vines"],wood:["sticks"]},c=[];Object.keys(r).forEach((e=>c.push(e))),Object.keys(i).forEach((e=>c.push(e))),console.log("All materials: ",c);let l={},u={};function d(e,t){e&&"none"!==e&&(l[e]--,Array.from(i[e].cost).forEach((e=>{u[e.resource]-=e.amount}))),l[t]?l[t]++:l[t]=1,i[t]&&Array.from(i[t].cost).forEach((e=>{u[e.resource]+=e.amount}))}function f(){const e=document.getElementById("factories"),t=document.createElement("div");t.className="factory";const n=document.createElement("span");n.classList.add("factoryCost");const s=document.createElement("select");Object.keys(a).forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,s.appendChild(t)})),s.setAttribute("data-produced","none"),s.addEventListener("change",(function(){const e=this.getAttribute("data-produced");"none"!==e&&(document.querySelector(`#resource-${e}`).style.color="");const t=s.value;d(e,t),this.setAttribute("data-produced",t),t&&"none"!==t&&(document.querySelector(`#resource-${t}`).style.color="thistle",n.innerHTML="",n.innerHTML+=`${o(594).generateTooltipCost(i[s.value].cost)}`)}));const r=document.createElement("span");return r.innerHTML="&#8594;",t.appendChild(n),t.appendChild(r),t.appendChild(s),function(e,t){const o=document.createElement("option");o.value="",o.textContent="Select a Resource",o.selected=!0,e.appendChild(o)}(s),e.appendChild(t),t}let p=2,g=30;var m=50;e.exports={createFactoryDiv:f,attemptManufacture:function(){document.querySelectorAll(".factory").forEach((e=>{const t=e.querySelector("select:last-child").value,n=a[t];n&&t&&function(e,t){let n=[];e.forEach((e=>n.push(s(e)/i[t].cost[e])));let r=Math.min(p,...n);r*=1,o(594).craftResourceQuantity(t,r)}(n,t)}))},buyFactory:function(){const e=document.getElementById("buyFactoryButton");if(s("silver")<m)return void console.log("Not enough silver!");o(594).increaseMaterial("silver",-m),f();const t=new Audio("./audio/factorybuild.wav");t.volume=n(),t.play(),m*=1.2,e.setAttribute("tooltipCost",`${m.toFixed(2)} silver`)},upgradeBulk:function(){if(s("silver")<g)return;p+=2,g+=10;const e=new Audio("./audio/factorybulk.wav");e.volume=n(),e.play(),document.getElementById("upgradeBulkButton").setAttribute("tooltipCost",`${p} → ${p+2}: ${g.toFixed(0)} silver`)},allMaterials:c,getFactoryProduction:function(e){return l[e]*p},loadFactory:function(e){console.log("loading a factory for ",e);let t=f();e&&(t.querySelector("select").value=e,document.querySelector(`#resource-${e}`).style.color="thistle",t.querySelector(".factoryCost").innerHTML="",t.querySelector(".factoryCost").innerHTML+=`${o(594).generateTooltipCost(i[e].cost)}`);const n=document.getElementById("buyFactoryButton");m*=1.2,n.setAttribute("tooltipCost",`${m.toFixed(0)} silver`),d("none",e)},activeFactoriesProducing:l}},531:(e,t)=>{t.fitCharToCell=function(e,t,o,n){const s=document.createElement("span");s.textContent=e,s.style.fontSize=`${n}px`,s.style.position="absolute",s.style.whiteSpace="nowrap",s.style.visibility="hidden",document.body.appendChild(s);let i=n;for(;s.offsetWidth<t&&s.offsetHeight<o&&(i++,s.style.fontSize=`${i}px`,!(i>=1e3)););return document.body.removeChild(s),i}},215:(e,t,o)=>{const{resources:n}=o(587),{capitalizeFirst:s}=o(681),{getSfxVolume:i}=o(98),r=document.querySelector("#resources");const a=document.querySelector("#emojiGatherDisplay");t.toggleResource=function(e){const t=new Audio("./audio/gather.wav");t.volume=i(),t.play();const o=n[e],c=document.querySelector("#resources").querySelector("#resource-"+e),l=document.querySelector("#gather"+e.charAt(0).toUpperCase()+e.slice(1));a.textContent="𓀟",o.isGetting?(o.isGetting=!1,l.classList.remove("gathering"),l.textContent=o.defaultText,c&&(c.style.fontWeight="normal")):(function(){for(const[e,t]of Object.entries(n)){t.isGetting=!1;const o=document.querySelector("#gather"+s(e));o&&(o.textContent=t.defaultText,o.classList.remove("gathering"));const n=r.querySelector("#resource-"+e);n&&(n.style.fontWeight="normal")}}(),o.isGetting=!0,l.textContent=o.activeText,c&&(c.style.fontWeight="bold"),a.textContent=o.emoji,console.log(o.emoji),l.classList.add("gathering"))}},429:(e,t,o)=>{const{craftedResources:n}=o(371),{buildings:s}=o(882),{buttons:i}=o(54),{generateTooltipCost:r}=o(594),{createBuildingButton:a}=o(151),{hasPerk:c}=o(134),{recalculateBuildingCost:l}=o(22),{showTab:u}=o(93);t.generateButtons=function(){console.log("Generating buttons"),console.trace();for(let e in s){const t=a(e,s);i[e]=t}const e=e=>{const t=document.createElement("div"),o=document.createElement("div"),n=document.createElement("div");return t.style.width="33.33%",o.style.width="33.33%",n.style.width="33.33%",t.style.display="inline-block",o.style.display="inline-block",n.style.display="inline-block",t.classList.add("visible"),o.classList.add("visible"),n.classList.add("visible"),e.prepend(n),e.prepend(o),e.prepend(t),[t,o,n]},t=document.getElementById("tabs"),o=document.getElementById("productionTab"),d=document.getElementById("experimentTab").querySelector(".button-columns"),f=document.getElementById("ponderTab"),p=e(d),g=e(f);let m=1,b=0,h=0;for(let e in i){const a=i[e],d=document.createElement("button");d.id=e,d.className=a.class,d.textContent=a.text.split("_").join(" "),a.tooltipDesc&&d.setAttribute("data-tooltip-desc",a.tooltipDesc),a.tooltipEffect&&d.setAttribute("data-tooltip-effect",a.tooltipEffect),d.setAttribute("unlock",a.unlock),d.setAttribute("data_building",a.data_building);const f=Object.values(n).find((t=>t.id===e));f&&(a.tooltipCost=r(f.cost)),d.setAttribute("data-tooltip-cost",a.tooltipCost),a.showTab&&d.addEventListener("click",(()=>{u(a.showTab),console.log("Switching to tab: "+a.showTab)})),"production"===a.tab?(d.style.gridColumn=m.toString(),m=(m+1)%3,o.appendChild(d)):"experiment"===a.tab?(p[b].appendChild(d),b=(b+1)%3):"tabs"===a.tab?t.appendChild(d):"ponder"===a.tab?(g[h].appendChild(d),h=(h+1)%3):"job"===a.tab||document.getElementById(a.tab).appendChild(a),Object.keys(s).find((t=>t===e))&&l(e,s,c);try{a.requirement()||(d.style.display="none")}catch(e){}}}},900:(e,t,o)=>{const{capitalizeFirst:n}=o(681),{craftedResources:s}=o(371),{resources:i}=o(587),r=Object.keys(i).filter((e=>"husks"!==e)),a=Object.keys(s);function c(e,t){return Math.random()*(t-e)+e}function l(){const e=[{start:78107,end:78142},{start:78307,end:78367}],t=e[Math.floor(Math.random()*e.length)],o=Math.floor(c(t.start,t.end+1));return String.fromCodePoint(o)}const u=["bustling","majestic","ancient","elegant","hidden","glorious","enchanted","whispering","mystical","luminous","radiant","spectacular","dazzling","serenade","celestial","vibrant","imposing","venerable","immaculate","enigmatic","harmonious","ethereal","resplendent","tranquil","serene","awe-inspiring","peaceful","picturesque","captivating"],d=["Sanctuary","Citadel","Haven","Monastery","Outpost","Observatory","Stronghold","Palace","Temple","Manor","Keep","Chateau","Acropolis","Cathedral","Villa","Fortress","Bastion","Lighthouse","Castle","Coliseum","Pyramid","Mansion","Estate","Museum","Tower","Hall","Library","Gallery","Bazaar"],f=["sanctuary","citadel","haven","monastery","outpost","observatory","stronghold","palace","temple","manor"],p=["provides","enhances","imbues","radiates","embodies","inspires","evokes","exudes","bestows","creates"],g=["with","through","amidst","beneath","above","alongside"],m=["and","while","as","although","yet"];t.generateRandomBuilding=function(){const e=function(){const e=u[Math.floor(Math.random()*u.length)],t=d[Math.floor(Math.random()*d.length)];return`${n(e)} ${t}`}(),t=function(){const e=u[Math.floor(Math.random()*u.length)],t=u[Math.floor(Math.random()*u.length)],o=f[Math.floor(Math.random()*f.length)],s=p[Math.floor(Math.random()*p.length)],i=g[Math.floor(Math.random()*g.length)],r=m[Math.floor(Math.random()*m.length)];let a="";switch(Math.floor(6*Math.random())){case 0:a=`${e} ${o} that ${s} an aura of splendor.`;break;case 1:a=`${n(i)} its ${e} appearance, the ${o} ${s} an aura of ${t}.`;break;case 2:a=`${n(e)} ${o} ${s} gracefully, exuding an enchanting atmosphere.`;break;case 3:a=`The ${o} is ${e} and ${s} with a sense of wonder.`;break;case 4:a=`Amidst the ${e} surroundings, the ${o} ${s} tranquility and beauty.`;break;case 5:a=`An ${e} ${o} that ${s} an aura of charm ${r} mystique.`;break;default:a=`${n(e)} ${o} that ${s} an aura of splendor.`}return a}(),o=c(1,3),s={};for(let e=0;e<o;e++)s[r[Math.floor(Math.random()*r.length)]]=Math.floor(100*Math.random()*(5-o));const i=c(0,1);for(let e=0;e<i;e++)s[a[Math.floor(Math.random()*a.length)]]=Math.floor(50*Math.random());const b={},h=c(0,3);for(let e=0;e<h;e++){const e=r[Math.floor(Math.random()*r.length)];let t=Math.floor(c(30,200));"clones"===e?t=Math.floor(c(1,3)):"husks"===e&&(t=Math.floor(c(1,10))),b[e]=t}const y={},v=c(0===h?1:0,3);for(let e=0;e<v;e++){const e=r[Math.floor(Math.random()*r.length)],t=c(1.01,1.2);y[e]=t}return{name:e,description:t,basecost:s,cost:s,effects:b,boost:y,count:0,ratio:c(1.3,1.6),emoji:l()}}},590:(e,t,o)=>{t.getCraftedResource=function(e,t){return e=e.toLowerCase(),t||(t=o(371).craftedResources),t.hasOwnProperty(e)&&t[e].value||0}},924:(e,t,o)=>{const{getCraftedResource:n}=o(590);t.getMaterial=function(e,t){return t||(t=o(587).resources),t.hasOwnProperty(e)?t[e].value:n(e,null)}},78:(e,t,o)=>{const{hasPrestige:n,getLevelOfPrestige:s}=o(425),{resources:i,isResource:r}=o(587),{skills:a}=o(324);let c=new Set(["gatherSticks"]);t.allVisibleButtons=c,e.exports={getMax:function(e){if(r(e)){let t=i[e].max,o=t;return n("storageSpace")&&"clones"!==e?o=t*(1.05*s("storageSpace")):"clones"===e&&n("maxClones")&&(o=t+s("maxClones")),o}return 1/0},calcCraftBonus:function(e){let t=1;for(let o in a)if(a[o].affectedResources.includes(e)){let e=1.06;t*=1+(Math.pow(e,a[o].level)-1)/100}return t},isButtonIdVisible:function(e){return c.has(e)},setVisibleButton:function(e){c.add(e)},clearSidebar:function(){document.querySelector("#resources").innerHTML=""}}},842:(e,t)=>{t.O={thinking:"thinking",fishing:"fishing",smithing:"not-unlockable",farming:"agriculture",combat:"combatTab",hunting:"hunting"}},150:(e,t,o)=>{const{skills:n}=o(324),{resources:s}=o(587),{getMaterial:i}=o(924),{isPondered:r}=o(369),{getMax:a}=o(78),{triggerFloatUpText:c}=o(727),l=new Audio("./audio/job.wav"),u={};for(let e in n)u[e]=0;const d=document.getElementById("jobsTab");function f(){var e=0;for(let t in u)e+=u[t];return e}Object.keys(n).forEach((e=>{const t=document.createElement("div");t.classList.add("job-button"),t.setAttribute("data-job",e),t.id="job-button-"+e;const o=document.createElement("div");o.classList.add("btn-decrement"),o.textContent="-",t.appendChild(o);const n=document.createElement("span");n.classList.add("job-name"),n.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: 0`,t.appendChild(n);const s=document.createElement("div");s.classList.add("btn-increment"),s.textContent="+",t.appendChild(s),d.appendChild(t)})),document.querySelectorAll(".btn-increment").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job");if(l.play(),i("clones",s)>f()){const o=e.pageX,n=e.pageY;if(e.shiftKey){let e=i("clones",s)-f();u[t]+=e,c(o,n,`+${e} workers`,"green")}else if(e.ctrlKey){let e=Math.min(10,i("clones",s)-f());u[t]+=e,c(o,n,`+${e} workers`,"green")}else u[t]++,c(o,n,"+1 worker","green");g(t,u[t]),b(t),h()}}))})),document.querySelectorAll(".btn-decrement").forEach((e=>{e.addEventListener("click",(function(e){const t=this.closest(".job-button").getAttribute("data-job"),o=e.pageX,n=e.pageY;if(l.play(),e.shiftKey){let e=u[t];u[t]=0,e>0&&c(o,n,`-${e} workers`,"red")}else if(e.ctrlKey){let e=Math.min(10,u[t]);u[t]-=e,c(o,n,`-${e} workers`,"red")}else u[t]>0&&(u[t]--,c(o,n,"-1 worker","red"));g(t,u[t]),b(t),h()}))}));let p=new Map;function g(e,t){if(!n[e])return null;let o=n[e].affectedResources;o=o.filter((e=>e in s));let i=o.length,r=Math.floor(t/i);for(let t of o)p.set(t,r),r>0&&m(e,t);let a=t-r*i;for(let t of o)a>0&&(p.set(t,p.get(t)+1),a--,m(e,t))}function m(e,t){const o=Array.from(document.querySelectorAll(".job-button")).find((t=>t.getAttribute("data-job")===e));if(!o||"none"===o.style.display)return;const n=document.getElementById(`resource-${t}`);if(!n||"none"===n.style.display)return;const s=o.getBoundingClientRect(),i=n.getBoundingClientRect(),r=document.createElement("div");r.style.position="absolute",r.style.width="10px",r.style.height="10px",r.style.borderRadius="50%",r.style.backgroundColor="white",r.style.opacity=".8",r.style.left=`${s.left+window.scrollX}px`,r.style.top=`${s.top+window.scrollY}px`,document.body.appendChild(r),r.animate([{transform:`translate(${i.left-s.left}px, ${i.top-s.top}px)`}],{duration:1e3,easing:"cubic-bezier(.23,-0.34,0,1.06)"}).onfinish=()=>{r.style.display="none"}}function b(e){const t=document.querySelector(`.job-button[data-job="${e}"]`);t||console.warn("Couldn't find job button for job: ",e);const n=t.querySelector(".job-name");n&&(n.textContent=`${e.charAt(0).toUpperCase()+e.slice(1)}: ${u[e]}`),o(594).updateEmojiDisplay()}function h(){document.querySelector("#jobs-total").textContent="Assigned Clones: "+f()+" / "+a("clones")}let y=new Map,v=document.getElementById("lineCanvas"),k=v.getContext("2d");function x(e,t,o){let n=e.getBoundingClientRect(),s=n.left+n.width/2,i=scrollY+n.top+n.height/2;k.beginPath(),k.moveTo(s,i),k.lineTo(t,o),k.stroke(),function(e,t,o,n,s,i){let r,a,c,l=n,u=s;e.beginPath(),r=Math.atan2(s-o,n-t),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.moveTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.lineTo(a,c),r+=1/3*(2*Math.PI),a=i*Math.cos(r)+l,c=i*Math.sin(r)+u,e.lineTo(a,c),e.closePath(),e.fill()}(k,s,i,t,o,10)}function w(e,t){let o=u[e];u[e]=0,u[t]+=o,b(e),b(t)}v.width=window.innerWidth,v.height=window.innerHeight,e.exports={clearJobAssignments:function(){k.clearRect(0,0,v.width,v.height),y=new Map},reassignJobsBasedOnResources:function(){try{const e=y.entries();if(void 0===e)throw"Entries is undefined";for(let[t,o]of e){let e=document.getElementById(t).getAttribute("data-job");const r=t.replace("job-button-",""),a=o.replace("job-button-","");let c=!0,l=n[e].affectedResources;if(!l)return;for(const e of l)if(void 0!==s[e]&&i(e)<s[e].max){c=!1;break}c&&u[e]>0&&(w(r,a),g(r,u[r]),g(a,u[a]))}}catch(e){console.warn("reassignJobs",e)}},switchJob:w,drawAllConnections:function(){k.clearRect(0,0,v.width,v.height);try{for(let[e,t]of y.entries()){let o=document.getElementById(e),n=document.getElementById(t),s=n.getBoundingClientRect(),i=s.left+s.width/2,r=0;r=s.bottom>o.getBoundingClientRect().bottom?n.offsetTop-10:n.offsetTop+n.offsetHeight+10,x(o,i,r)}}catch(e){console.warn("drawAllConnections",e)}},getWorkers:function(e){return p.get(e)},updateTotal:h,setConnections:function(e){y=e},getConnections:function(){return y},distributeWorkers:g,updateDisplay:b,jobCounts:u,resetAllJobs:function(){for(let e in n)u[e]=0,g(e,0),h(),b(e)}}},882:(e,t,o)=>{const{hasPerk:n}=o(134),{recalcMaxClones:s}=o(995),{recalculateBuildingCost:i}=o(22),{updateBuildingButtonCount:r}=o(607),a={shelter:{basecost:{sticks:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"For when you need a home away from home.",emoji:"八"},hut:{basecost:{sticks:50,vines:30},effects:{clones:1},boost:{},count:0,ratio:1.4,tooltipDesc:"A cozy, idyllic chunk of wood.",emoji:"冂"},house:{basecost:{wood:50,rocks:20,fish:10},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Every clone's dream. Minus the white picket fence.",emoji:"介"},teepee:{basecost:{wood:10,hides:25,fish:15},effects:{clones:2},boost:{},count:0,ratio:1.5,tooltipDesc:"Wrap some hides around some wood and call it a home.",emoji:"穴"},hospital:{basecost:{concrete:10,medicine:20,fish:20},effects:{clones:3},boost:{},count:0,ratio:1.7,tooltipDesc:"Keep yourself safe.",emoji:"+"},barracks:{basecost:{spear:20,violence:1,wood:200},effects:{clones:1,violence:20},boost:{},count:0,ratio:1.5,tooltipDesc:"A hall of raucous soldiers.",emoji:"𓈏"},shed:{basecost:{wood:40},effects:{wood:50,sticks:50,rocks:20},boost:{},count:0,ratio:1.2,tooltipDesc:"The ultimate storage solution for the pack rat in you.",emoji:"个"},stockpile:{basecost:{rocks:30,wood:40},effects:{wood:100},ratio:1.2,boost:{},count:0,tooltipDesc:"Chuck a bunch of logs in a pile, what could happen?",emoji:"品"},drying_racks:{basecost:{sticks:30,fish:5},effects:{fish:20},boost:{},count:0,ratio:1.2,tooltipDesc:"Air drying: Nature's way of preserving food.",emoji:"四"},workshop:{basecost:{wood:40,sticks:20,rocks:10},effects:{rocks:50,ore:50,sand:100,clay:50},boost:{},count:0,ratio:1.4,tooltipDesc:"DIY's dream destination.",emoji:"𓎰"},barn:{basecost:{wood:30,wheat:5},effects:{wheat:100,vines:40},boost:{},count:0,ratio:1.2,tooltipDesc:"Hay, what's in that building?",emoji:"𓏆"},herbalist_hut:{basecost:{sticks:50,vines:50,herbs:50},effects:{herbs:100,vines:100},boost:{herbs:1.2,vines:1.1},count:0,ratio:1.2,tooltipDesc:"A place for brewing and stewing.",emoji:"𓏃"},bakery:{basecost:{wood:80,bread:10,rocks:40},effects:{wheat:200},boost:{},count:0,ratio:1.25,tooltipDesc:"Freshly baked bread, hot and ready.",emoji:"𓏖"},animal_pen:{basecost:{sticks:50,game:20,fish:25},effects:{game:100,hides:30},boost:{},count:0,ratio:1.2,tooltipDesc:"A place to put those lesser than you.",emoji:"皿"},reservoir:{basecost:{rocks:100,clay:50,water:10},effects:{water:100},boost:{},count:0,ratio:1.3,tooltipDesc:"A hole filled with water. Useful.",emoji:"𓈞"},stone_depot:{basecost:{rocks:200},effects:{rocks:250},boost:{},count:0,ratio:1.2,tooltipDesc:"A big stack of rocks.",emoji:"𓈓"},warehouse:{basecost:{crates:10,concrete:20},effects:{wood:100,rocks:100,clay:100,sand:100},boost:{},count:0,ratio:1.3,tooltipDesc:"Put stuff in a box inside a larger box.",emoji:"𓇦"},military_school:{basecost:{bricks:20,violence:10},effects:{violence:100},boost:{violence:1.05},count:0,ratio:1.4,tooltipDesc:"Learn the art of hurting others.",emoji:"𓇻"},grove:{basecost:{wood:20,vines:20},effects:{},boost:{wood:1.05,sticks:1.1},count:0,ratio:1.2,tooltipDesc:"A nice grove of trees to find wood faster.",emoji:"𓆭𓆭"},fish_traps:{basecost:{rope:40},effects:{},boost:{fish:1.05},count:0,ratio:1.2,tooltipDesc:"Fishing made easy. No patience required.",emoji:"井"},mine:{basecost:{rocks:30,wood:30},effects:{},boost:{ore:1.05,rocks:1.05},count:0,ratio:1.2,tooltipDesc:"Dig deep and find your inner ore.",emoji:"𓊍"},campfire:{basecost:{rocks:20,sticks:20},effects:{},boost:{all:1.02},count:0,ratio:1.5,tooltipDesc:"Where stories are told and marshmallows are toasted.",emoji:"火"},lumber_yard:{basecost:{wood:200,iron:1},effects:{},boost:{wood:1.2},count:0,ratio:1.3,tooltipDesc:"Wood you like some more wood?",emoji:"𓌏"},stone_quarry:{basecost:{rocks:50,wood:20,rope:30},effects:{},boost:{rocks:1.1},count:0,ratio:1.3,tooltipDesc:"Rock on with your bad self!",emoji:"𓊎"},fishery:{basecost:{wood:40,rope:15},effects:{fish:50},boost:{},count:0,ratio:1.2,tooltipDesc:"Fish are friends. And food.",emoji:"𓌤"},vineyard:{basecost:{wood:20,vines:50},effects:{},boost:{vines:1.1},count:0,ratio:1.2,tooltipDesc:"For the finest vines. What else would it grow?",emoji:"🜌"},forge:{basecost:{rocks:40,ore:20,wood:100},effects:{},boost:{ore:1.2},count:0,ratio:1.2,tooltipDesc:"Melt, mold, and make marvelous metals.",emoji:"𓊫"},water_pump:{basecost:{rocks:30,rope:1,wood:10,wheat:2},effects:{freshwater:30},boost:{freshwater:1.1},count:0,ratio:1.4,tooltipDesc:"Fresh water on demand!",emoji:"𓏂"},tower:{basecost:{bricks:20,rocks:10,wood:30},effects:{},boost:{hides:1.05,game:1.1},count:0,ratio:1.3,tooltipDesc:"See things from afar.",emoji:"𓊢"},tannery:{basecost:{wood:60,hides:40},effects:{hides:50},boost:{hides:1.1},count:0,ratio:1.3,tooltipDesc:"Treat hides to make quality leather.",emoji:"𓃔"},marketplace:{basecost:{wood:100,rocks:50,gold:1},effects:{},boost:{all:1.05},count:0,ratio:1.25,tooltipDesc:"A bustling hub of trade and barter.",emoji:"₿"},windmill:{basecost:{wood:100,rocks:60,wheat:50},effects:{},boost:{wheat:1.2},count:0,ratio:1.3,tooltipDesc:"Grind grains efficiently with wind power.",emoji:"𓇬"},garden:{basecost:{beams:20,herbs:20,freshwater:10},effects:{},boost:{herbs:1.1,sticks:1.05},count:0,ratio:1.3,tooltipDesc:"Nice nature, carefully cultivated.",emoji:"𓆷"},sand_scoop:{basecost:{beams:10,iron:5},effects:{},boost:{sand:1.1},count:0,ratio:1.2,tooltipDesc:"Scoop the sand from the shore? Sure!",emoji:"𓄛"},traps:{basecost:{nails:10,sticks:20,herbs:20},effects:{},boost:{game:1.1},count:0,ratio:1.2,tooltipDesc:"Watch your step!",emoji:"𓄦"},rock_role:{basecost:{slabs:20,freshwater:30},effects:{},boost:{rocks:1.2},count:0,ratio:1.3,tooltipDesc:"In order to gather the rock you must become the rock.",emoji:"𓆇"},telescope:{basecost:{glass:1,wood:10,ponder:10},effects:{},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"Look, up in the sky! It's a star!",emoji:"𓌩"},observatory:{basecost:{bricks:70,wood:30,glass:50,ponder:50},effects:{},boost:{ponder:1.2},count:0,ratio:1.3,tooltipDesc:"Stargazing has never been so... productive?",emoji:"☆"},library:{basecost:{wood:70,paper:25,glass:5,ponder:25},effects:{ponder:50},boost:{ponder:1.1},count:0,ratio:1.3,tooltipDesc:"Knowledge is power. And a fire hazard if not stored properly.",emoji:"🕮"},desk:{basecost:{wood:15,sticks:20,ponder:10},effects:{ponder:30},boost:{ponder:1.05},count:0,ratio:1.2,tooltipDesc:"A writer's block is no match for armor-piercing pencils!",emoji:"𓊬"}};e.exports={buildings:a,getBuildingCount:function(e){return a[e].count},getBoost:function(e,t){const o=a[e];if(o&&o.boost){if(o.boost[t])return o.boost[t];if(o.boost.all)return o.boost.all}return null},resetBuildings:function(){for(const[e,t]of Object.entries(a))t.count=0,r(e,0),i(e,a,n);s()},isPopBuilding:function(e){switch(e){case"shelter":case"hut":case"house":case"teepee":return!0;default:return!1}}}},54:(e,t,o)=>{const{passedStage:n}=o(751),{getMaterial:s}=o(924),{hasTool:i}=o(609),{resources:r}=o(587),a={gatherSticks:{class:"tooltip startVisible",tab:"production",text:"𓀝 Gather Sticks",tooltipDesc:"Five, Six, Pick up sticks.",tooltipCost:"Free",requirement:()=>!0,hide:()=>!1},gatherVines:{class:"tooltip stick",tab:"production",text:"𓍯 Gather Vines",tooltipDesc:"Some vines are rubbery, others are gummy.",tooltipCost:"Free",requirement:()=>s("sticks",r)>=10||n("vines"),hide:()=>!1},gatherRocks:{class:"tooltip stick",tab:"production",text:"𓊖𓀩 Gather Rocks",tooltipDesc:"Not a single window to throw them through.",tooltipCost:"Free",requirement:()=>s("vines",r)>=10||n("rocks"),hide:()=>!1},gatherFish:{class:"tooltip fishing",tab:"production",text:"𓆝 𓆟 𓆞 Go Fish",tooltipDesc:"Got any tuna?",tooltipCost:"Free",requirement:()=>i("Spear")||i("Fishing Rod")||n("fishing"),hide:()=>!1},gatherWood:{class:"woodToggle wood",tab:"production",text:"𓌏 Chop Wood",tooltipDesc:"An axe hurts way less than using your hands.",tooltipCost:"",requirement:()=>i("Axe")||n("wood"),hide:()=>!1},gatherOre:{class:"tooltip ",tab:"production",text:"𓉸 Mine Ore",tooltipDesc:"Diggy Diggy Hole",tooltipCost:"Free",requirement:()=>i("Pickaxe")||n("ore"),hide:()=>!1},productionTabButton:{class:"tab-button",text:"Production",showTab:"productionTab",tab:"tabs",requirement:()=>n("tab-button"),hide:()=>!1},experimentTabButton:{class:"tab-button",text:"Experiment",showTab:"experimentTab",tab:"tabs",requirement:()=>n("tab-button"),hide:()=>!1},ponderTabButton:{class:"tab-button",text:"Ponder",showTab:"ponderTab",tab:"tabs",requirement:()=>n("ponder-tab"),hide:()=>!1},jobsTabButton:{class:"tab-button",text:"Jobs",showTab:"jobsTab",tab:"tabs",requirement:()=>n("jobs-tab"),hide:()=>!1},skillsTabButton:{class:"tab-button",text:"Skills",showTab:"skillsTab",tab:"tabs",requirement:()=>n("skillsTable"),hide:()=>!1},perksTabButton:{class:"tab-button",text:"Perks",showTab:"perksTab",tab:"tabs",requirement:()=>n("perksTab"),hide:()=>!1},factoryTabButton:{class:"tab-button",text:"Factories",showTab:"factoryTab",tab:"tabs",requirement:()=>n("factoryTab"),hide:()=>!1},combatTabButton:{class:"tab-button",text:"Combat",showTab:"combatTab",tab:"tabs",requirement:()=>n("combatTab"),hide:()=>!1},gatherPonder:{class:"tooltip",text:"Ponder",tooltipDesc:"Wrap your head around the great mysteries",tooltipCost:"Time",tab:"ponder",requirement:()=>n("ponder-tab"),hide:()=>!1}};e.exports={buttons:a}},371:(e,t,o)=>{const{getMaterial:n}=o(924),{getCraftedResource:s}=o(590),{resources:i}=o(587),{passedStage:r}=o(751),a={sharprocks:{text:"Sharp Rocks",id:"craftSharprocksButton",value:0,cost:{rocks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Craft a rock using nothing but rocks!",tooltipCost:"Rocks: 5",class:"craftRocks"},rope:{id:"craftRopeButton",value:0,cost:{vines:3},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"The basis of attaching things to other things.",tooltipCost:"Vines: 3",class:"craftRocks"},handle:{id:"craftHandleButton",value:0,cost:{sticks:2},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Shear off that bark to hold it better",tooltipCost:"Sharp Rocks: 1",class:"craftRocks"},staff:{id:"craftStaffButton",value:0,cost:{handle:2,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"Stick some sheared sticks together",tooltipCost:"Handles: 2",class:"rope"},fishingrod:{id:"craftFishingrodButton",text:"Fishing Rod",value:0,cost:{staff:1,rope:2},craftedOnce:!1,requiredStage:"fishing",tooltipDesc:"A weapon feared by underwater life",tooltipCost:"",class:"fishing"},spear:{id:"craftSpearButton",value:0,cost:{staff:1,sharprocks:1,rope:1},craftedOnce:!1,requiredStage:"rocks",tooltipDesc:"A long and pointy stick",tooltipCost:"Staffs: 1",class:"rope"},axe:{id:"craftAxeButton",value:0,cost:{handle:1,rope:1,sharprocks:2},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Put a rock straight through that handle",tooltipCost:"Spears: 1",class:"spear"},pickaxe:{id:"craftPickaxeButton",value:0,cost:{handle:1,sharprocks:3,rope:1,rocks:10},craftedOnce:!1,requiredStage:"spear",tooltipDesc:"Sadly not made of diamonds",tooltipCost:"Axes: 1",class:"spear"},glass:{id:"craftGlassButton",value:0,cost:{sand:10},craftedOnce:!1,tooltipDesc:"You can see right through it!",requiredStage:"glassBlowing",class:"glassBlowing"},paper:{id:"craftPaperButton",value:0,cost:{wood:12},craftedOnce:!1,tooltipDesc:"Outsource your memory",requiredStage:"paper",class:"paper"},gold:{id:"craftGoldButton",value:0,cost:{ore:100},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some yellow bits in this ore",tooltipCost:"",class:"metalWorking"},iron:{id:"craftIronButton",value:0,cost:{ore:20},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some sturdy-looking bits in this ore",tooltipCost:"",class:"metalWorking"},silver:{id:"craftSilverButton",value:0,cost:{ore:50},craftedOnce:!1,requiredStage:"metalWorking",tooltipDesc:"There's some shiny gray bits in this ore",tooltipCost:"",class:"metalWorking"},bricks:{id:"craftBricksButton",value:0,cost:{clay:15},craftedOnce:!1,requiredStage:"clay",tooltipDesc:"Leave some clay by the fire",tooltipCost:"",class:"clay"},bread:{id:"craftBreadButton",value:0,cost:{wheat:13},craftedOnce:!1,requiredStage:"agriculture",tooltipDesc:"I'm gonna grind your wheat to make my bread!",tooltipcost:"",class:"agriculture"},steel:{value:0,cost:{iron:5}},beams:{value:0,cost:{wood:10}},crates:{value:0,cost:{wood:15}},nails:{value:0,cost:{iron:1}},slabs:{value:0,cost:{rocks:20}},medicine:{value:0,cost:{herbs:50}},leather:{value:0,cost:{hides:10}},concrete:{value:0,cost:{sand:32}},wood:{value:0,cost:{sticks:8}},sticks:{value:0,cost:{wood:.1}}};e.exports={craftedResources:a,getCraftedResourceConfigById:function(e){for(const[t,o]of Object.entries(a))if(o.id===e||o.id===e)return o;return null},getCraftedResourceKeyByConfig:function(e){for(let t in a)if(a[t].id===e.id)return t;return null},resetCraftedResources:function(){for(const[e,t]of Object.entries(a))t.value=0,t.craftedOnce=!1}}},55:e=>{e.exports={perks:{tier1:["Lumberjack","Miner","Botanist","Leader","Architect"],tier2:["Thinker","General","Merchant","Generalist","Specialist"]}}},397:e=>{let t={ponder1:{id:"ponderPonder1",isPondered:!1,cost:{ponder:10},text:"Think Harder",tooltipDesc:"5% boost to pondering",requirement:()=>!0},"jobs-tab":{id:"ponderJobs-tab",isPondered:!1,cost:{ponder:20},text:"Understand Cloning",tooltipDesc:"Why are there two of you?",requirement:()=>!0,tooltipCost:"Sanity (20 Ponder)"},skillsTable:{id:"ponderSkillsTable",isPondered:!1,cost:{ponder:50},tooltipDesc:"You're starting to learn things, right?",requirement:()=>!0,text:"Notice Improvement"},fishing:{id:"ponderFishing",isPondered:!1,cost:{ponder:50,fish:50},tooltipDesc:"What if... your clones could go fishing?",requirement:()=>!0,text:"Fishing Job"},fasterSkills:{id:"ponderFasterSkills",isPondered:!1,cost:{ponder:80},requirement:()=>!0,text:"Skills I",tooltipDesc:"Think Smarter. 5% bonus to skill exp"},thinking:{id:"ponderThinking",isPondered:!1,cost:{ponder:150},text:"Thinking Job",requirement:()=>!0,tooltipDesc:"Let your clones start thinking for themselves."},fasterResourceGain:{id:"ponderFasterResourceGain",isPondered:!1,cost:{ponder:120},requirement:()=>!0,text:"Productivity I",tooltipDesc:"Just work harder. 5% bonus to resource gain"},metalWorking:{id:"ponderMetalWorking",isPondered:!1,requirement:()=>!0,text:"Metal Working",tooltipDesc:"Start processing that ore",cost:{ponder:100,ore:50,rocks:50}},glassBlowing:{id:"ponderGlassBlowing",isPondered:!1,requirement:()=>!0,text:"Glass Blowing",tooltipDesc:"Huff and puff and make a cool vase",cost:{sand:20,ponder:80}},organization:{id:"ponderOrganization",isPondered:!1,requirement:()=>!0,text:"Organized Storage",tooltipDesc:"Organize your storage by groups",cost:{ponder:200}},paper:{id:"ponderPaper",isPondered:!1,requirement:()=>!0,text:"Paper Processing",tooltipDesc:"Smash down some wood into paper",cost:{ponder:200,wood:100}},autoClone:{id:"ponderAutoClone",requirement:()=>!0,isPondered:!1,text:"Auto Clone",tooltipDesc:"Automatically produce clones",cost:{ponder:140,clones:20}},effectiveBuildings:{id:"ponderEffectiveBuildings",requirement:()=>!0,isPondered:!1,text:"Buildings I",tooltipDesc:"Increase building effects by 3%",cost:{ponder:180}},agriculture:{id:"ponderAgriculture",requirement:()=>!0,isPondered:!1,text:"Agriculture",tooltipDesc:"Find some seeds from all those plants",cost:{ponder:180}},combatTab:{id:"ponderCombatTab",requirement:()=>!0,isPondered:!1,text:"Combat",tooltipDesc:"Is there anyone to spar with besides you?",cost:{ponder:300,spear:100}},hunting:{id:"ponderHunting",requirement:()=>!0,isPondered:!1,text:"Hunting",tooltipDesc:"At least there are animals",cost:{ponder:200,fish:50}},perksTab:{id:"ponderPerksTab",requirement:()=>!0,isPondered:!1,text:"Perks",tooltipDesc:"Maybe you as the original should specialize",cost:{ponder:400}},factoryTab:{id:"ponderFactoryTab",requirement:()=>!0,isPondered:!1,text:"Factories",tooltipDesc:"Ascend to the next level of economy",cost:{ponder:500,gold:10,wood:1e3,wheat:1e3,rocks:1e3}},ponder2:{id:"ponderPonder2",requirement:()=>!0,isPondered:!1,text:"Think even harder",tooltipDesc:"5% boost to pondering",cost:{ponder:300}},ponder3:{id:"ponderPonder3",requirement:()=>!0,isPondered:!1,text:"Think hardest",tooltipDesc:"5% boost to pondering",cost:{ponder:600}},biggerShelter:{id:"ponderBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:500,sticks:1e3}},biggerHut:{id:"ponderBiggerHut",requirement:()=>!0,isPondered:!1,text:"Expand Hut",tooltipDesc:"Huts can house 1 more clone each",cost:{ponder:750,sticks:1500,vines:1e3}},biggerHouse:{id:"ponderBiggerHouse",requirement:()=>!0,isPondered:!1,text:"Two-story houses",tooltipDesc:"Houses can house 2 more clones each",cost:{ponder:1e3,wood:2e3,rocks:2e3}},biggerTeepee:{id:"ponderBiggerTeepee",requirement:()=>!0,isPondered:!1,text:"Double diameter Teepees",tooltipDesc:"Teepees can house 4 more clones each",cost:{ponder:1250,wood:3e3,hides:1500}},evenBiggerShelter:{id:"ponderEvenBiggerShelter",requirement:()=>!0,isPondered:!1,text:"Expand Shelter Again",tooltipDesc:"Shelters can house 1 more clone each",cost:{ponder:1500,sticks:3e3,fish:1e3}}};e.exports={ponders:t,resetPonders:function(){for(const[e,o]of Object.entries(t))o.isPondered=!1}}},425:e=>{const t={maxClones:{text:"Cramped",tooltipDesc:"Max Clones (+1)",cost:2,level:0},cloneBoost:{text:"Handyman",tooltipDesc:"Clone Productivity (+5%)",cost:1,level:0},gatheringBoost:{text:"Picker",tooltipDesc:"Gathering Efficiency (+10%)",cost:1,level:0},masonryBoost:{text:"Rocker",tooltipDesc:"Masonry Efficiency (+10%)",cost:1,level:0},carpentryBoost:{text:"Chopped",tooltipDesc:"Carpentry Efficiency (+10%)",cost:1,level:0},thinkingBoost:{text:"Wizened",tooltipDesc:"Thinking Efficiency (+10%)",cost:1,level:0},farmingBoost:{text:"Pruned",tooltipDesc:"Farming Efficiency (+10%)",cost:1,level:0},fishingBoost:{text:"Hooked",tooltipDesc:"Fishing Efficiency (+10%)",cost:1,level:0},huntingBoost:{text:"Tracker",tooltipDesc:"Hunting Efficiency (+10%)",cost:1,level:0},cheaperBuildings:{text:"Rickety",tooltipDesc:"Building Cost (-5%)",cost:2,level:0},storageSpace:{text:"Stuffed",tooltipDesc:"Storage Space (+5%)",cost:2,level:0}};function o(e){return t[e].level}e.exports={prestige:t,hasPrestige:function(e){return o(e)>0},getLevelOfPrestige:o}},587:e=>{const t={clones:{id:"makeClone",value:0,isVisible:!1,max:0},sticks:{id:"gatherSticks",isGetting:!1,isVisible:!0,activeText:"𓆱𓀜 Gathering Sticks",defaultText:"𓆱 Gather Sticks",value:0,emoji:"𓀝",max:50},vines:{id:"gatherVines",isGetting:!1,isVisible:!1,activeText:"𓍯𓀪 Gathering Vines",defaultText:"𓍯 Gather Vines",tools:[{tool:"Axe",val:1.5}],value:0,emoji:"𓀪",max:50},rocks:{id:"gatherRocks",isGetting:!1,isVisible:!1,activeText:"𓊖𓀩 Gathering Rocks",defaultText:"𓊖 Gather Rocks",value:0,emoji:"𓀩",max:30},fish:{id:"gatherFish",isGetting:!1,isVisible:!1,activeText:"𓆝𓆟𓆞 𓁃 Gone Fishing",defaultText:"𓆝𓆟𓆞 Go Fish",value:0,emoji:"𓁃",tools:[{tool:"Spear",val:1},{tool:"Fishing Rod",val:2}],max:10},wood:{id:"gatherWood",isGetting:!1,isVisible:!1,activeText:"𓀨 Chopping Wood",defaultText:"𓌏 Chop Wood",emoji:"𓀨",tools:[{tool:"Axe",val:1.5},{tool:"Chainsaw",val:3}],value:0,max:40},ponder:{id:"gatherPonder",isGetting:!1,isVisible:!1,activeText:"𓀁 Pondering",defaultText:"𓀁 Ponder",emoji:"𓀁",value:0,max:20},ore:{value:0,id:"gatherOre",isGetting:!1,isVisible:!1,activeText:"𓉸𓁄 Mining Ore",defaultText:"𓉸 Mine Ore",emoji:"𓁄",max:20},sand:{value:0,id:"gatherSand",isGetting:!1,isVisible:!1,activeText:"𓀩 Scooping Sand",defaultText:"𓀩 Scoop Sand",emoji:"𓀩",max:20},wheat:{value:0,id:"gatherWheat",isGetting:!1,isVisible:!1,activeText:"𓀩 Harvesting Wheat",defaultText:"𓀩 Harvest Wheat",emoji:"𓀝",max:20},freshwater:{value:0,id:"gatherFreshwater",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},hides:{value:0,id:"gatherHides",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀎",max:50},clay:{value:0,id:"gatherClay",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},herbs:{value:0,id:"gatherHerbs",isGetting:!1,isVisible:!1,activeText:"water",defaultText:"water",emoji:"𓀩",max:50},game:{value:0,id:"gatherGame",isGetting:!1,isVisible:!1,activeText:"𓃚𓀎 Hunting",defaultText:"𓀎 Hunt",emoji:"𓀎",max:50},husks:{value:0,id:"gatherHusks",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"X",max:1e3},violence:{value:0,id:"gatherViolence",isGetting:!1,isVisible:!1,activeText:"",defaultText:"",emoji:"",max:100}};e.exports={resources:t,isResource:function(e){return e in t},getResourceConfigById:function(e){for(let o in t)if(t[o].id===e)return t[o];return null},resetResources:function(){for(const[e,o]of Object.entries(t))o.value=0}}},324:e=>{e.exports={skills:{gathering:{exp:0,level:0,affectedResources:["sticks","vines","sand","herbs","berries"]},masonry:{exp:0,level:0,affectedResources:["rocks","ore","clay"],needTools:[{Pickaxe:["ore"]}]},carpentry:{exp:0,level:0,affectedResources:["wood","handle","staff","fishingrod"],needTools:[{Axe:["wood"]}]},thinking:{exp:0,level:0,affectedResources:["ponder"]},farming:{exp:0,level:0,affectedResources:["wheat","freshwater"]},combat:{exp:0,level:0,affectedResources:["violence"]},fishing:{exp:0,level:0,affectedResources:["fish"]},hunting:{exp:0,level:0,affectedResources:["hides","game"]}}}},808:(e,t,o)=>{const{craftedResources:n,resetCraftedResources:s}=o(371),{buildings:i,resetBuildings:r}=o(882),{ponders:a,resetPonders:c}=o(397),{buttons:l}=o(54),{resources:u,resetResources:d}=o(587),{saveGame:f,loadGame:p}=o(502),{appendCraftedResourceButtons:g,increaseMaterial:m,craftAllResources:b,craftResource:h,calcIncrease:y,updateResourceIncreaseRates:v,increaseMax:k}=o(594),{buyMaxBuildings:x,buyBuilding:w}=o(151),{selectAbility:B,resetPerks:C}=o(134),{clearSidebar:T}=o(78),{makeVisible:M}=o(123),{updateButtonVisibility:S}=o(667),{getCraftedResource:E}=o(590),{getMaterial:A}=o(924),{buyFactory:j,attemptManufacture:q,upgradeBulk:$}=o(51),{isPondered:D,generatePonderButtons:L}=o(369),{hasTool:P,addTool:R}=o(609),{getAteFish:O,setAteFish:I}=o(621),{updateTotal:F,clearJobAssignments:V,resetAllJobs:H}=o(150),{capitalizeFirst:G}=o(681),{passedStage:W,resetStages:N}=o(751),{recalcMaxClones:z}=o(995),{initializeResourceTags:_,updateSidebar:J,updateDisplayValue:Y}=o(453),{prestige:U}=o(425),{triggerFloatUpText:K}=o(727),{updateBounceAnimation:X}=o(994),{updateTooltip:Q,hideTooltip:Z}=o(208),{canCraft:ee}=o(64),{calculateWinChance:te,combat:oe,switchStance:ne}=o(856),{showTab:se,getCurrentTab:ie}=o(93),{getSfxVolume:re,getMusicVolume:ae,setMusicVolume:ce,setSfxVolume:le}=o(98),{generateRandomBuilding:ue}=o(900),{changeMessage:de,messageElement:fe}=o(169),{generateButtons:pe}=o(429),{toggleResource:ge}=o(215),me={SharpRocks:"craftRocks",Spear:"fishing",FishingRod:"fishing",Axe:"wood",Pickaxe:"ore"},be=[{condition:()=>A("sticks",u)>=1,action:()=>M("stick")},{condition:()=>A("sticks",u)>=10,action:()=>M("vines")},{condition:()=>A("vines",u)>=10,action:()=>M("rocks")},{condition:()=>A("rocks",u)>=1,action:()=>{M("tab-button"),M("craftRocks")}},{condition:()=>E("spear",n)>0,action:()=>M("spear")},{condition:()=>A("fish",u)>=1,action:()=>M("fishing")},{condition:()=>P("Axe"),action:()=>M("wood")},{condition:()=>E("rope")>=1,action:()=>M("rope")},{condition:()=>A("fish",u)>=5&&!O(),action:()=>M("eatFish")},{condition:()=>O(),action:()=>{M("clone"),M("ponder-tab")}},{condition:()=>D("ponderFinish"),action:()=>(document.getElementById("page-transition-overlay").classList.add("fade-in"),void setTimeout((function(){window.location.href="stage2.html"}),300))},{condition:()=>D("biggerShelter"),action:()=>z()},{condition:()=>D("biggerHut"),action:()=>z()},{condition:()=>D("biggerHouse"),action:()=>z()},{condition:()=>D("biggerTeepee"),action:()=>z()},{condition:()=>D("evenBiggerShelter"),action:()=>z()},{condition:()=>A("clones")>=40,action:()=>M("prestige")},{condition:()=>A("clay")>0,action:()=>M("clay")},{condition:()=>!document.getElementById("toggle-basics")&&D("organization"),action:()=>_(!0)},{condition:()=>W("combatTab"),action:()=>te()}],he=["./audio/song1.wav","./audio/song2.wav","./audio/song3.wav","./audio/song4.wav","./audio/song5.wav","./audio/song6.wav","./audio/song7.wav","./audio/song8.wav","./audio/song9.wav","./audio/song10.wav"];let ye=null,ve=null;function ke(){ye&&(ye.pause(),ye.currentTime=0);const e=Math.floor(Math.random()*he.length);ye=new Audio(he[e]),ye.volume=ae(),ye.play(),function(){ve&&clearTimeout(ve);const e=3e4*Math.random()+5e3;ye.onended=()=>{ve=setTimeout(ke,e)}}()}document.addEventListener("keydown",(function(e){switch(e.key){case"1":se("productionTab");break;case"2":W("tab-button")&&se("experimentTab");break;case"3":W("ponder-tab")&&se("ponderTab");break;case"4":W("jobs-tab")&&se("jobsTab");break;case"5":W("skillsTable")&&se("skillsTab");break;case"6":W("perksTab")&&se("perksTab");break;case"7":W("factoryTab")&&se("factoryTab");break;case"8":W("combatTab")&&se("combatTab");break;case"a":"combatTab"===ie()&&ne("aggressive");break;case"b":"combatTab"===ie()&&ne("balanced");break;case"c":"combatTab"===ie()&&ne("careful");break;case"f":"combatTab"!==ie()||document.getElementById("startCombat").disabled?ge("fish"):oe();break;case"s":ge("sticks");break;case"r":W("rocks")&&ge("rocks");break;case"v":W("vines")&&ge("vines");break;case"w":W("wood")&&ge("wood");break;case"o":W("ore")&&ge("ore");break;case"p":W("ponder-tab")&&ge("ponder");break;case"Escape":$e()}}));const xe=document.body;xe.classList.toggle("dark-mode");let we=!0;function Be(){const e=document.getElementById("overlay"),t=document.getElementById("overlay-text"),o=document.getElementById("overlay-button");e.style.display="flex",setTimeout((()=>{t.style.opacity="1"}),2e3),setTimeout((()=>{o.style.display="block",o.style.opacity="1"}),5e3)}let Ce=50,Te=null,Me=0,Se=0;function Ee(e){null===Te&&(Te=e);const t=e-Te;Me+=t,Se+=t,Te=e;let o=Ce;for(Se>=10*Ce&&(Ce=Se/10);Se>=Ce;)Se-=Ce,qe(Ce);Ce=o,requestAnimationFrame(Ee)}let Ae=0,je=0;function qe(e,t){for(const[t,o]of Object.entries(u))m(t,y(t,e));v(),function(){for(let e=be.length-1;e>=0;e--){const t=be[e];t.condition()&&(t.action(),be.splice(e,1))}for(let e in me)!P(e)&&E(e)>0&&(R(e),M(me[e]));try{S(),null!==Fe&&Q(Fe)}catch(e){console.warn(e)}}(),Ae+=e,je+=e,Ae>=1e4&&(f(),Ae=0),W("factoryTab")&&je>=1e3&&(q(),je=0)}function $e(){const e=new Audio("./audio/options.wav");e.volume=re(),e.play();const t=document.getElementById("optionsMenu");t.style.display="none"===t.style.display?"block":"none"}window.onbeforeunload=function(){De||f()};let De=!1;document.addEventListener("DOMContentLoaded",(e=>{L(a),pe(),function(){const e=document.querySelector("#factoryButtons"),t=document.createElement("button");t.classList.add("tooltip"),t.id="buyFactoryButton",t.textContent="Buy New Factory",t.setAttribute("data-tooltip-desc","The factory must grow!"),t.setAttribute("tooltipCost","50 silver"),e.appendChild(t),t.addEventListener("click",(()=>{console.log("buying factory"),j()}));const o=document.createElement("button");o.classList.add("tooltip"),o.id="upgradeBulkButton",o.textContent="Upgrade Bulk",o.setAttribute("data-tooltip-desc","Craft more resources per second"),o.setAttribute("tooltipCost","2 → 4: 30 silver"),e.appendChild(o),o.addEventListener("click",(()=>{console.log("upgrading bulk"),$()}))}(),_(),p(),T(),_(D("organization")),g(),J(),se("productionTab"),o(864).generateTradeTable(u),document.addEventListener("click",(e=>{if(null===ye&&ke(),e.target.matches("button")){const s=e.target;if(s.getAttribute("data_building")&&"undefined"!==s.getAttribute("data_building")&&s.classList.contains("purchasable")){var t=s.getAttribute("data_building");const o=e.pageX,n=e.pageY;let i=new Audio("./audio/building.wav");i.volume=re(),i.play();const r=G(t).split("_").join(" ");if(e.shiftKey){let e=x(t);K(o,n,`+${e} ${r}s`,"aqua")}else w(t),K(o,n,`+1 ${r}`,"aqua")}else if(s.classList.contains("unlock")){const e=s.getAttribute("unlock");if(console.log(e),a[e]){var o=!0;for(let t in a[e].cost)if(A(t,u)<a[e].cost[t]){o=!1;break}if(o){for(let t in a[e].cost)m(t,-a[e].cost[t]);a[e].isPondered=!0,M(e),s.display="none";let t=new Audio("./audio/ponder.wav");t.volume=re(),t.play(),"organization"===e&&location.reload()}}}else if("undefined"!==s.id)if("gather"===s.id.slice(0,6))ge(function(e){for(const[t,o]of Object.entries(u))if(o.id===e)return t;return"error "+e}(s.id));else if("craft"===s.id.slice(0,5)){let t=new Audio("./audio/craft.wav");t.volume=re(),t.play();let o=function(e){for(const[t,o]of Object.entries(n))if(console.log(t,o,e),o.id===e)return t;return"error "+e}(s.id);console.log("clicked cr: ",o),ee(o)&&K(e.pageX,e.pageY,`+${o}`,"aqua"),e.shiftKey?b(o):h(o)}else"saveButton"===s.id?f():"eatFish"===s.id?function(){if(!O()&&A("fish",u)>=1){const e=new Audio("./audio/fish.wav");e.volume=re(),e.play(),m("fish",-1),Be(),I(!0),document.querySelector("#eatFish").style.display="none",setTimeout((()=>{de("You are with yourself in a forest.","with yourself","You feel peckish for some seafood."),k("clones",1),m("clones",1)}),1e3)}}():"overlay-button"===s.id?(document.getElementById("overlay-text").style.opacity="0",document.getElementById("overlay-button").style.opacity="0",document.getElementById("overlay").style.display="none",document.getElementById("isekaiButtons").innerHTML="",location.reload()):"deleteSaveButton"===s.id&&confirm("Are you sure you want to delete your save data? This will reset all your progress.")?Ve():"clearJobAssignments"===s.id?V():"darkModeToggle"===s.id?(xe.classList.toggle("dark-mode"),darkModeToggle.classList.toggle("dark"),we=!we,darkModeToggle.textContent=we?"Light Mode":"Dark Mode"):"prestige"===s.id?Ie():"startCombat"===s.id&&oe();if(s.classList.contains("tierOneButton")){let e=s.textContent;B(e)}}if(e.target.matches("#alone")){let t="+1 Clone";u.clones.value<u.clones.max?u.clones.value+=1:t="Max Clones";const o=new Audio("+1 Clone"===t?"./audio/clone.wav":"./audio/failclone.wav");o.volume=re(),o.play();const n=e.pageX,s=e.pageY;K(n,s,t,"+1 Clone"===t?"green":"red"),F(),Y("clones")}})),document.getElementById("optionsButton").addEventListener("click",$e),document.getElementById("musicVolume").addEventListener("input",(function(){ce(this.value),ye.volume=ae()})),document.getElementById("sfxVolume").addEventListener("input",(function(){le(this.value)})),requestAnimationFrame(Ee),document.querySelectorAll(".tooltip").forEach((e=>{e.addEventListener("mouseenter",(function(t){Q(e),Fe=e})),e.addEventListener("onclick",(function(){Q(e)})),e.addEventListener("mouseleave",(function(){Z(),Fe=null}))})),F(),X()}));const Le=document.getElementById("overlay"),Pe=document.getElementById("overlay-text"),Re=document.getElementById("overlay-button"),Oe=document.getElementById("overlay-back-button");function Ie(){Re.addEventListener("click",(()=>{const e=A("clones");d(),s(),c(),C(),r(),H(),N();const t=new Audio("./audio/isekaiconfirm.wav");t.volume=re(),t.play();for(let[e,t]of Object.entries(u))t.max=100;m("husks",e),Le.style.display="none";let o=null;for(let e=0;e<5;e++){const e=ue();i[e.name.split(" ").join("_")]=e,o=e}de("You are in another world.","another",`You feel a need to acquire ${o.cost}`),_(!1)})),Oe.addEventListener("click",(()=>{Le.style.display="none"}));const e=new Audio("./audio/isekai.wav");e.volume=re(),e.play();const t=document.getElementById("husksIsekaiValue");let o;o=t||document.createElement("p"),o.id="husksIsekaiValue",o.innerHTML=`Husks:  ${A("husks")} <br> You will get ${A("clones")} Husks post-isekai.<br>You will receive 5 randomly generated new buildings, unique to this new world.`,o.style.opacity="0",Le.prepend(o),Le.style.backgroundColor="MidnightBlue",Pe.textContent="You step through to another world.",Be(),setTimeout((()=>{Oe.style.opacity="1"}),5e3),setTimeout((function(){const e=document.getElementById("isekaiButtons");let t=1;Object.keys(U).forEach((n=>{const s=document.createElement("button");s.innerHTML=`<b>${U[n].text}</b><br>Level: ${U[n].level}<br>Cost: ${U[n].cost}`,s.setAttribute("tooltipCost",U[n].cost),s.setAttribute("tooltipDesc",U[n].tooltipDesc),s.classList.add("tooltip"),s.style.gridColumn=(t%4+1).toString(),s.style.gridRow=Math.floor(t/4+1).toString(),++t,s.addEventListener("click",(()=>{console.log(`Button ${n} was clicked`),A("husks")<U[n].cost||(U[n].level++,m("husks",-U[n].cost),U[n].cost=function(e){let t=e*(1+Math.sqrt(5))/2;return Math.round(t)}(U[n].cost),s.setAttribute("tooltipCost",U[n].cost),s.innerHTML=`<b>${U[n].text}</b><br>Level: ${U[n].level}<br>Cost: ${U[n].cost}`,o.textContent="Husks: "+A("husks"),Q(s))})),s.addEventListener("contextmenu",(e=>{e.preventDefault(),console.log(`Button ${n} was right clicked`),U[n].level<=0||(U[n].level--,U[n].cost=function(e){let t=e/((1+Math.sqrt(5))/2);return Math.round(t)}(U[n].cost),s.setAttribute("tooltipCost",U[n].cost),m("husks",U[n].cost),s.innerHTML=`<b>${U[n].text}</b><br>Level: ${U[n].level}<br>Cost: ${U[n].cost}`,o.textContent="Husks: "+A("husks"),Q(s))})),e.appendChild(s),s.addEventListener("mouseenter",(function(e){Q(s),Fe=s})),s.addEventListener("mouseleave",(function(){Z(),Fe=null}))}))}),5e3),setTimeout((()=>{o.style.opacity="1"}),5e3)}var Fe=null;function Ve(){localStorage.removeItem("save"),De=!0,location.reload()}e.exports={updateUI:function(e){const t=document.createElement("div");t.innerHTML=`${e}: ${u[e].value}`,document.body.appendChild(t)},setTotalTime:function(e){Me=e},changeMessage:de,getMessage:function(){return fe},total_time:Me,currentHoverButton:Fe,deleteGame:Ve,isekai:Ie,getMessageTooltip:function(){return fe.querySelector("#alone").getAttribute("tooltipDesc")}},window.deleteGame=Ve,window.isekai=Ie},123:(e,t,o)=>{const{setStage:n,passedStage:s}=o(751),{updateButtonVisibility:i}=o(667);t.makeVisible=function(e){s(e)||n(e),document.querySelectorAll("."+e).forEach((e=>{e.classList.add("visible"),e.classList.remove("hidden"),e.style.display=""})),i()}},134:(e,t,o)=>{const{buildings:n}=o(882),{perks:s}=o(55);let i=[];function r(e){return i.includes(e)}function a(e){if(i.push(e),"Architect"===e){const e=o(882).buildings;for(let t of Object.keys(e))o(22).recalculateBuildingCost(t,e,r)}}e.exports={hasPerk:r,addPerk:a,selectAbility:function(e){r(e)||window.confirm("Do you want to select "+e+"? This decision cannot be easily changed.")&&(a(e),o(495).selectCorrectPerkButton(e))},getPerkFromTier:function(e){for(let t in s["tier"+e])if(r(t))return t;return""},getAllPerks:function(){return i},resetPerks:function(){i=[]}}},369:(e,t,o)=>{const{capitalizeFirst:n}=o(681),{ponders:s}=o(397),{getMaterial:i}=o(924),{resources:r}=o(587),{buttons:a}=o(54);function c(e){return!!s[e]&&s[e].isPondered}e.exports={canUnlock:function(e){var t="";for(let o in s)s[o].id===e&&(t=o);if(""===t)return console.warn("invalid unlock id: ",e),!1;var o=!0;for(let e in s[t].cost)if(i(e,r)<s[t].cost[e]){o=!1;break}return o},isPondered:c,generatePonderButtons:function(e){for(const[t,i]of Object.entries(e)){const e=`ponder${n(t)}`;let r=o(594).generateTooltipCost(i.cost);a[e]={class:"tooltip unlock",text:i.text||"Ponder a Mystery?",tooltipDesc:i.tooltipDesc||"Who knows what you'll discover",tooltipCost:r,tab:"ponder",unlock:t,requirement:()=>o(78).getMax("ponder")>=s[t].cost.ponder/2,hide:()=>c(t)}}}}},995:(e,t,o)=>{const{hasPrestige:n,getLevelOfPrestige:s}=o(425),{isPondered:i}=o(369),{setMax:r}=o(594),{passedStage:a}=o(751),{updateBounceAnimation:c}=o(994);t.recalcMaxClones=function(){let e=0;a("clone")&&(e+=1);const t=o(882).buildings;for(const[o,n]of Object.entries(t))n.effects&&n.effects.clones&&(e+=n.effects.clones*n.count);i("biggerShelter")&&(e+=1*t.shelter.count),i("biggerHut")&&(e+=1*t.hut.count),i("biggerHouse")&&(e+=2*t.house.count),i("biggerTeepee")&&(e+=4*t.teepee.count),i("evenBiggerShelter")&&(e+=1*t.shelter.count),n("maxClones")&&(e+=1*s("maxClones")),r("clones",e),c()}},22:(e,t,o)=>{const{hasPrestige:n,getLevelOfPrestige:s}=o(425);t.recalculateBuildingCost=function(e,t,i){let r=t[e];if(r&&r.cost&&r.ratio)for(let e in r.cost)r.cost[e]=Math.round(r.basecost[e]*Math.pow(r.ratio,r.count)),i("Architect")&&(r.cost[e]*=.75),n("cheaperBuildings")&&(r.cost[e]*=Math.pow(.95,s("cheaperBuildings")));const a=document.querySelector("#"+e);var c=o(594).generateTooltipCost(r.cost);if(!a)throw"Button not found for "+e;{a.setAttribute("data-tooltip-cost",c);const e=o(151).generateEffectString(r);a.setAttribute("data-tooltip-effect",e)}}},594:(e,t,o)=>{const{resources:n}=o(587),{craftedResources:s}=o(371),{buttons:i}=o(54),{skills:r}=o(324),{getWorkers:a,updateTotal:c}=o(150),{hasTool:l}=o(609),{calcCraftBonus:u,getMax:d}=o(78),{canCraft:f}=o(64),{capitalizeFirst:p}=o(681),{getMaterial:g}=o(924),{isPondered:m}=o(369),{calcIncrease:b}=o(121),{updateSidebar:h,abbreviateNumber:y}=o(453),{passedStage:v}=o(751),{updateDisplayValue:k}=o(453),{updateSkills:x}=o(491),w=document.getElementById("resources");function B(e,t){n[e].max+=t,h(),c()}function C(e,t){0!=t&&((e=e.toLowerCase())in n?(g(e)<d(e)&&t>0?(m("fasterResourceGain")&&(t*=1.05),n[e].value+=t,x(e,t),"violence"===e&&o(856).refreshValues()):t<0?n[e].value+=t:n[e].value=d(e),k(e)):e in s?(console.log("crafting a material",e,t),s[e].value+=t,k(e),x(e,t)):(n[e]&&(n[e].value+=t),s[e]&&(s[e].value+=t),h()))}function T(e){const t=document.createElement("button");t.className=e.class+" tooltip",t.setAttribute("id",e.id),t.setAttribute("requirement",e.requiredStage);const o=Object.keys(s).find((t=>s[t]===e));return t.innerHTML=`${e.text||p(o)}`,t.tab="experiment",t}t.resourcesContainer=w,window.increaseMaterial=C,window.increaseMax=B;const M=document.querySelector("#craftedResourceButtons");function S(e){if(null===e)return"";var t="";for(let o in e)t+=`<span class="tooltip-${o} ${g(o,n)>=e[o]?"enough":"not-enough"}">${y(e[o])} ${o}</span><br>`;return t}const E=document.getElementById("emojiDisplay");function A(){let e="";for(let t in n){let o=a(t);if(void 0===o||0==o)continue;let s=n[t].emoji||"𓀟";s&&(e+=s.repeat(o))}E.textContent=e,function(){let e=48;for(E.style.fontSize=`${e}px`;E.offsetWidth>600&&e>30;)e-=1,E.style.fontSize=`${e}px`}()}function j(e,t){if(!s.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;if(!f(e))return;let o=s[e].cost;t=Math.floor(t);for(const[e,n]of Object.entries(o))C(e,-n*t);C(e,u(e)*t),s[e].craftedOnce||(s[e].craftedOnce=!0),k(e)}A(),e.exports={increaseMaterial:C,setMax:function(e,t){n[e].max=t,h(),c()},increaseMax:B,craftAllResources:function(e){try{const t=s[e].cost;let o=[];for(let e in t)o.push(g(e,n)/t[e]);let i=Math.floor(Math.min(...o));console.log(e,i),j(e,i)}catch(t){console.log("Failed to craftall for: ",e,t)}},craftResource:function(e){if(!s.hasOwnProperty(e))throw"Invalid craft for missing resource: "+e;f(e)&&(!function(e,t,o){for(const[e,o]of Object.entries(t))C(e,-o);C(e,o)}(e,s[e].cost,u(e)),s[e].craftedOnce||(s[e].craftedOnce=!0),k(e))},updateEmojiDisplay:A,generateTooltipCost:S,calcSecondsRemaining:function(e,t){if(t<=g(e))return 0;const o=b(e,1e3);return 0==o?1/0:Math.ceil(t-g(e))/o},appendCraftedResourceButtons:function(){for(let e in s){const t=T(s[e]);t.setAttribute("data-tooltip-desc",s[e].tooltipDesc||""),t.setAttribute("data-tooltip-cost",S(s[e].cost)||""),M.appendChild(t),v(t.getAttribute("requirement"))?t.classList.remove("hidden"):t.classList.add("hidden"),i[s[e].id]=s[e]}},calcIncrease:b,updateResourceIncreaseRates:function(){for(let t in n){const o=b(t,1e3);var e=document.getElementById(`${t}IncreaseRate`);e&&(e.textContent=o)}},craftResourceQuantity:j}},502:(e,t,o)=>{const{calcIncrease:n,updateEmojiDisplay:s}=o(594),{addTool:i,getAllTools:r}=o(609),{allVisibleButtons:a,setVisibleButton:c,getMax:l}=o(78),{makeVisible:u}=o(123),{getCraftedResource:d}=o(590),{getMaterial:f}=o(924),{getAllPerks:p,addPerk:g,hasPerk:m,selectAbility:b}=o(134),{isPondered:h}=o(369),{jobCounts:y,setConnections:v,getConnections:k,distributeWorkers:x,updateDisplay:w}=o(150),{total_time:B}=o(808),{setAteFish:C,getAteFish:T}=o(621),{craftedResources:M}=o(371),{buildings:S}=o(882),{ponders:E}=o(397),{resources:A}=o(587),{skills:j}=o(324),{getAllStages:q}=o(751),{activeFactoriesProducing:$,loadFactory:D}=o(51),{recalcMaxClones:L}=o(995),{updateSidebar:P}=o(453),{prestige:R}=o(425),{recalculateBuildingCost:O}=o(22),{updateBuildingButtonCount:I}=o(607),{updateBuildingList:F}=o(151),{populateSkillsTable:V}=o(491);function H(){let e={skills:{},craftedResources:{},resources:{},tools:[],stages:[],unlocks:{},jobs:{},buildings:{},time:{},allVisibleButtons:[],message:[],connections:new Map,perks:[],factories:{},prestige:{},newBuildings:{}};for(let t in j)e.skills[t]={exp:j[t].exp,level:j[t].level};for(let t in M)e.craftedResources.hasOwnProperty(t)||(e.craftedResources[t]={value:0,craftedOnce:!1}),e.craftedResources[t].value=d(t),e.craftedResources[t].craftedOnce=M[t].craftedOnce;for(let t in A)e.resources.hasOwnProperty(t)||(e.resources[t]={value:0,max:0}),e.resources[t].value=f(t,A),e.resources[t].max=A[t].max;e.tools=r(),e.stages=q(),e.jobs=y,e.perks=p(),e.connections=Array.from(k().entries());for(let t in E)e.unlocks[t]=h(t);for(let t in S)e.buildings[t]=S[t].count,S[t].hasOwnProperty("name")&&(e.newBuildings[t]=S[t]);for(let t in a)e.allVisibleButtons.push(t);for(const[t,o]of Object.entries($))e.factories[t]=o;const t=o(808).getMessage().innerHTML,n=o(808).getMessageTooltip(),s=function(e){const t=document.createElement("div");return t.innerHTML=e,[t.textContent,t.querySelector("span").textContent]}(t);s.push(n),e.message=s;for(const[t,o]of Object.entries(R))e.prestige[t]={cost:o.cost,level:o.level};return e.time.total_time=B,e.time.time_of_save=Date.now(),console.log(e),localStorage.setItem("save",JSON.stringify(e)),e}e.exports={saveGame:H,loadGame:function(){console.log("Loading Game");var e=JSON.parse(localStorage.getItem("save"));if(console.log(e),null!==e){if(void 0!==e.resources)for(let t in e.resources)"undefined"!==t.valueOf()&&null!==t&&null!==A[t]&&(A[t].value=e.resources[t].value,A[t].max=e.resources[t].max,console.log("Updating resources for "+t+" to "+e.resources[t].value,e.resources[t].max),0!=A[t].value&&o(453).updateDisplayValue(t));if(void 0!==e.skills)for(let t in e.skills)j[t].exp=e.skills[t].exp,j[t].level=e.skills[t].level;if(void 0!==e.craftedResources)for(var t of Object.keys(e.craftedResources))M[t]&&(M[t].value=e.craftedResources[t].value,Number.isNaN(M[t].value)&&(M[t].value=0),M[t].craftedOnce=e.craftedResources[t].craftedOnce,o(453).updateDisplayValue(t));if(void 0!==e.tools){let t=[...new Set([...r(),...e.tools])];for(let e in t)i(e)}if(void 0!==e.stages)for(let t in e.stages)u(e.stages[t]);if(void 0!==e.jobs)for(let t in e.jobs)y[t]=e.jobs[t],w(t);if(void 0!==e.unlocks)for(let t in e.unlocks)try{E[t].isPondered=e.unlocks[t]}catch(e){console.warn("Old save data includes obsolete ponder",t)}if(h("skillsTable")&&V(),void 0!==e.perks)for(let[t,n]of Object.entries(e.perks))g(n),o(495).selectCorrectPerkButton(n);if(void 0!==e.prestige)for(const[t,o]of Object.entries(e.prestige))R[t].cost=o.cost,R[t].level=o.level;if(void 0!==e.newBuildings)for(let t in e.newBuildings)S[t]=e.newBuildings[t];if(void 0!==e.buildings){for(let t in e.buildings)try{S[t].count=e.buildings[t],S[t].count>0&&(I(t,S[t].count,S[t].emoji),O(t,S,m))}catch(e){console.warn("error with building",t,e)}P()}if(L(),F(),C(A.clones.max>=1),T()&&(document.querySelector("#eatFish").style.display="none"),void 0!==e.message&&o(169).changeMessage(e.message[0],e.message[1],e.message[2]?e.message[2]:null),void 0!==e.time){o(808).setTotalTime(e.time[B]);const t=Date.now()-e.time.time_of_save;for(let e in A){const o=n(e,t);A[e].value+=o,A[e].value>A[e].max&&(A[e].value=A[e].max)}}if(void 0!==e.allVisibleButtons){console.log(e.allVisibleButtons);for(let t in e.allVisibleButtons)c(t)}void 0!==e.connections&&(v(new Map(e.connections)),0===k().size&&v(new Map),console.log(k()));for(let e in y)x(e,y[e]);if(s(),void 0!==e.factories)for(const[t,o]of Object.entries(e.factories))if(o>0)for(let e=0;e<o;++e)D(t)}}},window.saveGame=H},495:(e,t)=>{t.selectCorrectPerkButton=function(e){let t,o=document.querySelectorAll(".tierOneButton");try{t=document.querySelector(`#${e}Perk`)}catch(e){}t?(o.forEach((e=>{e.setAttribute("disabled","true")})),console.log(t,e),t.removeAttribute("disabled"),t.classList.add("selected")):console.warn("No button found with ability name: "+e)}},93:(e,t,o)=>{const{drawAllConnections:n}=o(150),{updateSidebar:s}=o(453),{refreshValues:i,combat:r,pauseAnimation:a,battleResult:c,simulateBattle:l}=o(856),{getSfxVolume:u}=o(98);function d(){let e="";for(let t of f)t.classList.contains("active")&&(e=t.id);return e}t.getCurrentTab=d;let f=document.querySelectorAll(".tab-content > .content");t.showTab=function(e){console.log("show tab: "+e);let t=d();if(e===t)return;let o=new Audio("./audio/tab.wav");o.volume=u(),o.play();let r=document.getElementById(t);r.classList.remove("active"),r.style.opacity="0";let a=document.querySelectorAll(".tab-button");for(let e of a)e.classList.remove("active");let f=document.getElementById(e);setTimeout((()=>{f.classList.add("active")}),100),setTimeout((()=>{f.style.opacity="1"}),200);const p=`#${e}Button`;let g=document.querySelector(p);g&&g.classList.add("active"),"jobsTab"===e&&n(),"combatTab"===e&&(i(),null===c&&l()),console.log(t,">",e),s()}},453:(e,t,o)=>{const{calcIncrease:n}=o(121),{capitalizeFirst:s}=o(681),{getMaterial:i}=o(924),{getMax:r}=o(78),{resources:a}=o(587),{isPondered:c}=o(369);function l(e){var t=!0;return i(e)>0&&(t=!1,a[e]&&(a[e].isVisible=!0)),a[e]&&a[e].isVisible&&(t=!1),t}function u(e){if("number"!=typeof e)return e;function t(e,t){return e<10?o(e,2)+t:e<100?o(e,1)+t:e<1e3?o(e,0)+t:Math.round(e)+t}function o(e,t){const o=Math.pow(10,t);return(Math.round(e*o)/o).toFixed(t)}return e<1e3?o(e,1):e<1e6?t(e/1e3,"K"):e<1e9?t(e/1e6,"M"):e<1e12?t(e/1e9,"B"):(e===1/0&&(e="∞"),e.toString())}const d=document.getElementById("resources");function f(e,t){let o;t?(o=document.getElementById(`group-${t}`),o||(o=function(e){const t=document.createElement("div");t.className="resourceGroup",t.id=`group-${e}`;const o=document.createElement("button");return o.textContent=e.toUpperCase(),o.onclick=()=>function(e){const t=document.getElementById(`group-${e}`),o=document.getElementById(`toggle-${e}`);Array.from(t.children).forEach((e=>{"P"===e.tagName&&e.classList.toggle("hidden")})),o.classList.contains("arrow-down")?(o.classList.remove("arrow-down"),o.classList.add("arrow-right")):(o.classList.remove("arrow-right"),o.classList.add("arrow-down"))}(e),o.className="toggle-button arrow-down",o.id=`toggle-${e}`,t.appendChild(o),t}(t),d.appendChild(o))):o=document.getElementById("resources");const n=s(e).split("_").join(" "),a=document.createElement("p");a.className="resource",a.id=`resource-${e}`;const c=document.createElement("span");c.className="resourceName",c.textContent=`${n}:`;const l=document.createElement("span");l.className="resourceValue",l.id=`${e}Value`;let u=r(e)&&r(e)<1/0?r(e).toFixed(2):"∞";l.textContent=`${i(e).toFixed(2)} / ${u}`;const f=document.createElement("span");function p(e,t){const o=document.getElementById(e);o&&(o.style.order=t)}return f.className="resourceRate",f.innerHTML=`(+\n            <span id="${e}IncreaseRate">0</span>/s)`,a.appendChild(c),a.appendChild(l),a.appendChild(f),o.appendChild(a),p("resource-clones",1),p("resource-sticks",2),p("resource-vines",3),p("resource-rocks",4),p("resource-fish",5),p("resource-freshwater",6),p("resource-wood",7),p("resource-ore",8),p("resource-sand",9),p("resource-clay",10),p("resource-wheat",11),p("resource-hides",12),p("resource-game",13),p("resource-herbs",14),p("resource-berries",15),p("resource-ponder",50),a}function p(e){const t=d.querySelector(`#${e}Value`),o=d.querySelector(`#${e}IncreaseRate`);if(t){try{t.textContent=`${u(i(e))} / ${u(r(e))}`,o&&(o.textContent=n(e,1e3).toFixed(1)),l(e)?t.parentElement.style.display="none":t.parentElement.style.display=""}catch(o){console.error(t,e,o)}if(a[e]&&a[e].isGetting){const t=document.querySelector("#resources").querySelector("#resource-"+e);t&&(t.style.fontWeight="bold")}}}e.exports={updateSidebar:function(){const e=o(51).allMaterials;Array.from(e).forEach((e=>{a[e]&&p(e)}));for(const[o,n]of Object.entries(e)){if(a[n])continue;const e=document.getElementById("resource-"+n);if(!e)return void console.warn("no parent element found for",n);l(n)?e.style.display="none":e.style.display="";const o=document.getElementById(n+"Value");if(o){var t="#fff";const e=i(n),s=r(n);e===s?t="#fcc":e/s>.6&&(t="#eeb"),o.innerHTML=`<span style="color:${t}">${u(e)} / ${u(s)} </span>`}}},initializeResourceTags:function(e){console.log("initialzing resource tags"),console.trace();const t={special:["clones","husks","ponder","violence"],food:["berries","fish","game","wheat","bread","freshwater"],materials:["sticks","vines","rocks","wood","sand","clay","hides","herbs"],tools:["sharprocks","rope","handle","fishingrod","pickaxe","axe","spear","staff"],advanced:["glass","paper","crates","medicine","leather"],metal:["ore","gold","iron","silver","steel"],construction:["bricks","beams","nails","slabs","concrete"]};for(let[o,n]of Object.entries(t))n.forEach((t=>{let n=document.getElementById("resource-"+t);e||(o=null),n||(n=f(t,o)),l(t)?n.style.display="none":n.style.display=""}))},updateDisplayValue:p,abbreviateNumber:u}},491:(e,t,o)=>{const{skills:n}=o(324),{triggerFloatUpText:s}=o(727),i=function(e){let t={};for(const[o,n]of Object.entries(e))for(const e of n.affectedResources)t[e]||(t[e]=[]),t[e].push(o);return t}(n);console.log(i);let r=!1;function a(){const e=document.getElementById("skillsTable");if(r)for(let e in n){(n[e].exp>0||n[e].level>0)&&(document.querySelector("#tr-"+e).style.display="");let t=document.querySelector(`.progressBar[data-skill="${e}"]`);t&&(t.style.width=n[e].exp+"%",document.querySelector("#level-"+e).textContent="[level "+n[e].level+"]   "+e)}else{console.log("Generating table for the first time"),r=!0;for(let t in n){let o=document.createElement("tr");o.id="tr-"+t;let s=document.createElement("td");s.style.position="relative";let i=document.createElement("div");i.setAttribute("class","progressBar"),i.style.height="20px",i.setAttribute("data-skill",t);let r=document.createElement("span");r.textContent="[level "+n[t].level+"]   "+t,r.setAttribute("id","level-"+t),r.style.position="absolute",r.style.left="10px",r.style.top="50%",r.style.transform="translateY(-50%)",0==n[t].exp&&0==n[t].level&&(o.style.display="none"),s.appendChild(i),s.appendChild(r),o.appendChild(s),e.appendChild(o)}}}e.exports={updateSkills:function(e,t){if(t=Math.abs(t),o(369).isPondered("fasterSkills")&&(t*=1.05),!i[e])return;const r=i[e][0].toString();if(n[r].level>=100)return n[r].level=100,void(n[r].exp=0);if(n[r].exp+=t/Math.pow(1.4,n[r].level),n[r].exp>=100){n[r].level+=1,n[r].exp=0;let e=`Level up! ${r} → ${n[r].level}`;const t=document.getElementById("prestige").getBoundingClientRect();s(t.x,t.y,e,"#F4D03F")}o(751).passedStage("skillsTable")&&a()},populateSkillsTable:a}},751:e=>{let t=[];e.exports={setStage:function(e){t.push(e)},passedStage:function(e){return Object.values(t).includes(e)},getAllStages:function(){return t},resetStages:function(){for(;t.length>0;)t.pop()}}},609:e=>{let t=["Bare Hands"];function o(e){return t.includes(e)}e.exports={hasTool:o,addTool:function(e){(isNaN(e)||isNaN(parseFloat(e)))&&(o(e)||(t.push(e),function(e){var t=document.getElementById("tools-list"),o=document.createElement("li");o.appendChild(document.createTextNode(e)),t&&t.appendChild(o)}(e)))},getAllTools:function(){return t},getToolValueForResource:function(e){if(!e)return 1;if(!e.tools)return 1;const t=e.tools.sort(((e,t)=>t.val-e.val));for(let e of t)if(o(e.tool))return e.val;return 1}}},864:(e,t,o)=>{const{getMaterial:n}=o(924),s=document.getElementById("resourceList"),i=document.getElementById("goldAmount");function r(e,t){n("gold",o(587).resources)>=t&&(o(594).increaseMaterial("gold",-t),o(594).increaseMaterial(e,t),i.textContent=n("gold",o(587).resources))}function a(e,t){n(e,o(587).resources)>=1&&(o(594).increaseMaterial("gold",t),o(594).increaseMaterial(e,-1),i.textContent=n("gold",o(587).resources))}t.generateTradeTable=function(e){for(let t in e){const e=document.createElement("tr"),o=Math.floor(100*Math.random())+10;e.innerHTML=`\n            <td class="tradetd">${t}</td>\n            <td class="tradetd">${o}</td>\n            <td class="tradetd" style="display:flex; flex-direction:row;">\n                <button class="buyBtn" data-resource="${t}" data-price="${o}">Buy</button>\n                <button class="sellBtn" data-resource="${t}" data-price="${o}">Sell</button>\n            </td>\n        `,s.appendChild(e)}document.querySelectorAll(".buyBtn").forEach((e=>{e.addEventListener("click",(e=>{r(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))})),document.querySelectorAll(".sellBtn").forEach((e=>{e.addEventListener("click",(e=>{a(e.target.getAttribute("data-resource"),parseFloat(e.target.getAttribute("data-price")))}))}))},t.buyResource=r,t.sellResource=a},727:(e,t)=>{t.triggerFloatUpText=function(e,t,o,n){const s=document.createElement("div");s.textContent=o,s.style.left=`${e}px`,s.style.top=t-30+"px",s.style.color=n,s.classList.add("float-up-fade-out"),document.body.appendChild(s),s.addEventListener("animationend",(()=>{s.remove()}))}},994:(e,t,o)=>{const{getMaterial:n}=o(924),{getMax:s}=o(78);t.updateBounceAnimation=function e(){const t=document.getElementById("alone");n("clones")<s("clones")?(t.classList.add("bouncing"),setTimeout((()=>{t.classList.remove("bouncing"),t.offsetHeight,e()}),11e3)):t.classList.remove("bouncing")}},607:(e,t,o)=>{const{capitalizeFirst:n}=o(681);t.updateBuildingButtonCount=function(e,t,o){document.getElementById(`${e}`).textContent=`${o} ${n(e).split("_").join(" ")} (${t})`}},831:(e,t,o)=>{const{buildings:n}=o(882),{updateTooltip:s,hideTooltip:i}=o(208),{fitCharToCell:r}=o(531),a=document.getElementById("buildingList");t.updateBuildingList=function(){const e=document.createDocumentFragment();let t=0;for(const[o,s]of Object.entries(n))for(let n=0;n<s.count;++n,++t){let n=(t%6+1).toString(),i=Math.floor(t/6+1).toString();const r=document.createElement("span");r.className="tooltip",r.style.gridColumn=n,r.style.gridRow=i,r.style.fontSize="36px",r.setAttribute("tooltipDesc",o),r.textContent=s.emoji||"?",e.appendChild(r)}a.innerHTML="",a.appendChild(e),a.addEventListener("mouseenter",(e=>{e.target.classList.contains("tooltip")&&s(e.target)}),!0),a.addEventListener("mouseleave",(e=>{e.target.classList.contains("tooltip")&&i()}),!0)}},667:(e,t,o)=>{const{buttons:n}=o(54),{getCraftedResourceConfigById:s}=o(371),{getBuildingCount:i}=o(882),{isPondered:r,canUnlock:a}=o(369),{getCraftedResourceKeyByConfig:c}=o(371),{isButtonIdVisible:l,setVisibleButton:u}=o(78),{canCraft:d}=o(64),{canBuyBuilding:f}=o(23),{passedStage:p}=o(751);t.updateButtonVisibility=function(){document.querySelectorAll("button").forEach((e=>{const t=n[e.id];if(t){e.classList.remove("hidden","purchasable","button-disabled");var o="hidden";e.id&&l(e.id)&&(o="button-disabled");try{t.requirement&&t.requirement()&&(o="button-disabled",t.tab&&!t.data_building&&"production"===t.tab&&(o="purchasable"),e.id&&"gatherPonder"===e.id&&(o="purchasable"),t.tab&&"ponder"===t.tab&&e.id&&e.classList.contains("unlock")&&(a(e.id)&&(o="purchasable"),r(e.getAttribute("unlock"))&&(o="hidden")),t.tab&&"tabs"===t.tab&&(o="visible"))}catch(e){}if(t.id&&"craft"===t.id.slice(0,5)){t.craftedOnce&&(o="button-disabled");var g=s(t.id);g.value>0&&(o="button-disabled");const e=c(g);d(e)&&(o=!t.requiredStage||t.requiredStage&&p(t.requiredStage)?"purchasable":"hidden")}t.data_building&&(o=i(t.data_building)?"button-disabled":o,o=f(t.data_building)?"purchasable":o),t.hide&&(o=t.hide()?"hidden":o),""!==o&&e.classList.add(o),"hidden"===o?e.style.display="none":(u(e.id),e.style.display="")}})),document.querySelectorAll(".job-button").forEach((e=>{const t=e.getAttribute("data-job");e.classList.remove("hidden","purchasable","button-disabled");var n;const s=o(842).O[t];"hidden"==(n=null==s||r(s)?"purchasable":"not-unlockable"===s?"hidden":"button-disabled")?e.style.display="none":(u(e.id),e.classList.add(n),e.style.display="")}))}},208:(e,t,o)=>{const{getCraftedResourceConfigById:n}=o(371),{buildings:s}=o(882),{ponders:i}=o(397),{resources:r,getResourceConfigById:a}=o(587),{calcSecondsRemaining:c}=o(594),{getMax:l}=o(78),{getMaterial:u}=o(924),d=document.getElementById("dynamic-tooltip");t.hideTooltip=function(){d.style.display="none"},t.updateTooltip=function(e){const t=e.getAttribute("data-tooltip-desc")||e.getAttribute("tooltipDesc"),o=e.getAttribute("data-tooltip-effect"),f=a(e.id)||n(e.id)||s[e.getAttribute("data_building")]||i[e.getAttribute("unlock")],p=e.getAttribute("tooltipCost")||e.getAttribute("data-tooltip-cost")||f&&f.cost;!function(e,t,o,n){let s="";function i(e){let t=parseFloat(e);return e.includes("K")?t*=1e3:e.includes("M")?t*=1e6:e.includes("B")&&(t*=1e9),t}t&&(s+=`<span >${t}</span><hr>`),o&&(s+=`<span style="color:#4cf">${o}</span><hr>`);try{if(n.toString().includes("span"))s+=function(e,t){const o=/class="tooltip-(\w+) .+?">([\d.]+[KM]?)\s(\w+)</g;let n,s="";for(;null!==(n=o.exec(e));){const e=n[1],o=n[2],a=i(o);var r=u(e,t)>=a?"enough":"not-enough";l(e)<a&&(r="exceeds-max"),s+=`<span class="tooltip-${e} ${r}">${o} ${e}</span>`;let d=0;t[e]&&(d=c(e,a)),d>0&&"exceeds-max"!=r&&(s+=`<span class="time-remaining">(${d.toFixed(0)} seconds)</span>`),s+="<br>"}return s}(n,r);else{var a="";for(const[e,t]of Object.entries(n)){var f=u(e,r)>=t?"enough":"not-enough";l(e)<t&&(f="exceeds-max"),a+=`<span class="tooltip-${e} ${f}">${t.toFixed(0)} ${e}</span>`;let o=0;r[e]&&(o=c(e,t)),o>0&&"exceeds-max"!=f&&(a+=`<span class="time-remaining">(${o.toFixed(0)} seconds)</span>`),a+="<br>"}s+=a}}catch(e){void 0!==n&&"undefined"!==n&&(s+=n)}d.innerHTML=s,d.style.left=e.getBoundingClientRect().right+5+"px",d.style.top=e.getBoundingClientRect().top-d.offsetHeight/2+"px",d.style.display="block"}(e,t,o,p)}}},t={};!function o(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,o),i.exports}(808)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,